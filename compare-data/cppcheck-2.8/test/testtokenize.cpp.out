

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073742880 expected@var22 !=@expr1073742881 actual@var23 ) {
62: std ::@expr1073742882 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073742883 expected@var22 ;
64: std ::@expr1073742884 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742885 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742886 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742887 str (@expr1073742888 ) , actualStr@var26 .@expr1073742889 str (@expr1073742890 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742891 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742892 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742893 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742894 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testtokenize.cpp

1:
|
38:
39: struct InternalError ;
40:
41: class TestTokenizer : public TestFixture {
42: public:
43: TestTokenizer ( ) : TestFixture ( "TestTokenizer" ) { }
44:
45: private:
46: Settings settings0@var102 ;
47: Settings settings1@var103 ;
48: Settings settings2@var104 ;
49: Settings settings_windows@var105 ;
50:
51: void run ( ) override {
52: $do ${ $if $(@expr1073742895 settings_windows@var105 .@expr1073742896 library@var106 $.@expr1073742897 $load $(@expr1073742898 $exename@var11 $.@expr1073742899 $c_str $(@expr1073742900 $) $, "windows.cfg" $) $.@expr1073742901 $errorcode $!=@expr1073742902 $Library $::@expr1073742903 $ErrorCode $::@expr1073742904 $OK $) ${ $complainMissingLib $(@expr1073742905 "windows.cfg" $) $; $return $; $} $} $while $(@expr1073742906 $false $) ;
53:
54:
55: settings0@var102 .@expr1073742907 checkUnusedTemplates@var107 =@expr1073742908 true ;
56: settings1@var103 .@expr1073742909 checkUnusedTemplates@var108 =@expr1073742910 true ;
57: settings2@var104 .@expr1073742911 checkUnusedTemplates@var109 =@expr1073742912 true ;
58: settings_windows@var105 .@expr1073742913 checkUnusedTemplates@var110 =@expr1073742914 true ;
59:
60: $do ${ $if $(@expr1073742915 $prepareTest $(@expr1073742916 "tokenize1" $) $) ${ $setVerbose $(@expr1073742917 $false $) $; tokenize1 $(@expr1073742918 $) $; $} $} $while $(@expr1073742919 $false $) ;
61: $do ${ $if $(@expr1073742920 $prepareTest $(@expr1073742921 "tokenize2" $) $) ${ $setVerbose $(@expr1073742922 $false $) $; tokenize2 $(@expr1073742923 $) $; $} $} $while $(@expr1073742924 $false $) ;
62: $do ${ $if $(@expr1073742925 $prepareTest $(@expr1073742926 "tokenize4" $) $) ${ $setVerbose $(@expr1073742927 $false $) $; tokenize4 $(@expr1073742928 $) $; $} $} $while $(@expr1073742929 $false $) ;
63: $do ${ $if $(@expr1073742930 $prepareTest $(@expr1073742931 "tokenize5" $) $) ${ $setVerbose $(@expr1073742932 $false $) $; tokenize5 $(@expr1073742933 $) $; $} $} $while $(@expr1073742934 $false $) ;
64: $do ${ $if $(@expr1073742935 $prepareTest $(@expr1073742936 "tokenize7" $) $) ${ $setVerbose $(@expr1073742937 $false $) $; tokenize7 $(@expr1073742938 $) $; $} $} $while $(@expr1073742939 $false $) ;
65: $do ${ $if $(@expr1073742940 $prepareTest $(@expr1073742941 "tokenize8" $) $) ${ $setVerbose $(@expr1073742942 $false $) $; tokenize8 $(@expr1073742943 $) $; $} $} $while $(@expr1073742944 $false $) ;
66: $do ${ $if $(@expr1073742945 $prepareTest $(@expr1073742946 "tokenize9" $) $) ${ $setVerbose $(@expr1073742947 $false $) $; tokenize9 $(@expr1073742948 $) $; $} $} $while $(@expr1073742949 $false $) ;
67: $do ${ $if $(@expr1073742950 $prepareTest $(@expr1073742951 "tokenize11" $) $) ${ $setVerbose $(@expr1073742952 $false $) $; tokenize11 $(@expr1073742953 $) $; $} $} $while $(@expr1073742954 $false $) ;
68: $do ${ $if $(@expr1073742955 $prepareTest $(@expr1073742956 "tokenize13" $) $) ${ $setVerbose $(@expr1073742957 $false $) $; tokenize13 $(@expr1073742958 $) $; $} $} $while $(@expr1073742959 $false $) ;
69: $do ${ $if $(@expr1073742960 $prepareTest $(@expr1073742961 "tokenize14" $) $) ${ $setVerbose $(@expr1073742962 $false $) $; tokenize14 $(@expr1073742963 $) $; $} $} $while $(@expr1073742964 $false $) ;
70: $do ${ $if $(@expr1073742965 $prepareTest $(@expr1073742966 "tokenizeHexWithSuffix" $) $) ${ $setVerbose $(@expr1073742967 $false $) $; tokenizeHexWithSuffix $(@expr1073742968 $) $; $} $} $while $(@expr1073742969 $false $) ;
71: $do ${ $if $(@expr1073742970 $prepareTest $(@expr1073742971 "tokenize15" $) $) ${ $setVerbose $(@expr1073742972 $false $) $; tokenize15 $(@expr1073742973 $) $; $} $} $while $(@expr1073742974 $false $) ;
72: $do ${ $if $(@expr1073742975 $prepareTest $(@expr1073742976 "tokenize17" $) $) ${ $setVerbose $(@expr1073742977 $false $) $; tokenize17 $(@expr1073742978 $) $; $} $} $while $(@expr1073742979 $false $) ;
73: $do ${ $if $(@expr1073742980 $prepareTest $(@expr1073742981 "tokenize18" $) $) ${ $setVerbose $(@expr1073742982 $false $) $; tokenize18 $(@expr1073742983 $) $; $} $} $while $(@expr1073742984 $false $) ;
74: $do ${ $if $(@expr1073742985 $prepareTest $(@expr1073742986 "tokenize19" $) $) ${ $setVerbose $(@expr1073742987 $false $) $; tokenize19 $(@expr1073742988 $) $; $} $} $while $(@expr1073742989 $false $) ;
75: $do ${ $if $(@expr1073742990 $prepareTest $(@expr1073742991 "tokenize21" $) $) ${ $setVerbose $(@expr1073742992 $false $) $; tokenize21 $(@expr1073742993 $) $; $} $} $while $(@expr1073742994 $false $) ;
76: $do ${ $if $(@expr1073742995 $prepareTest $(@expr1073742996 "tokenize22" $) $) ${ $setVerbose $(@expr1073742997 $false $) $; tokenize22 $(@expr1073742998 $) $; $} $} $while $(@expr1073742999 $false $) ;
77: $do ${ $if $(@expr1073743000 $prepareTest $(@expr1073743001 "tokenize25" $) $) ${ $setVerbose $(@expr1073743002 $false $) $; tokenize25 $(@expr1073743003 $) $; $} $} $while $(@expr1073743004 $false $) ;
78: $do ${ $if $(@expr1073743005 $prepareTest $(@expr1073743006 "tokenize26" $) $) ${ $setVerbose $(@expr1073743007 $false $) $; tokenize26 $(@expr1073743008 $) $; $} $} $while $(@expr1073743009 $false $) ;
79: $do ${ $if $(@expr1073743010 $prepareTest $(@expr1073743011 "tokenize27" $) $) ${ $setVerbose $(@expr1073743012 $false $) $; tokenize27 $(@expr1073743013 $) $; $} $} $while $(@expr1073743014 $false $) ;
80: $do ${ $if $(@expr1073743015 $prepareTest $(@expr1073743016 "tokenize31" $) $) ${ $setVerbose $(@expr1073743017 $false $) $; tokenize31 $(@expr1073743018 $) $; $} $} $while $(@expr1073743019 $false $) ;
81: $do ${ $if $(@expr1073743020 $prepareTest $(@expr1073743021 "tokenize32" $) $) ${ $setVerbose $(@expr1073743022 $false $) $; tokenize32 $(@expr1073743023 $) $; $} $} $while $(@expr1073743024 $false $) ;
82: $do ${ $if $(@expr1073743025 $prepareTest $(@expr1073743026 "tokenize33" $) $) ${ $setVerbose $(@expr1073743027 $false $) $; tokenize33 $(@expr1073743028 $) $; $} $} $while $(@expr1073743029 $false $) ;
83: $do ${ $if $(@expr1073743030 $prepareTest $(@expr1073743031 "tokenize34" $) $) ${ $setVerbose $(@expr1073743032 $false $) $; tokenize34 $(@expr1073743033 $) $; $} $} $while $(@expr1073743034 $false $) ;
84: $do ${ $if $(@expr1073743035 $prepareTest $(@expr1073743036 "tokenize35" $) $) ${ $setVerbose $(@expr1073743037 $false $) $; tokenize35 $(@expr1073743038 $) $; $} $} $while $(@expr1073743039 $false $) ;
85: $do ${ $if $(@expr1073743040 $prepareTest $(@expr1073743041 "tokenize36" $) $) ${ $setVerbose $(@expr1073743042 $false $) $; tokenize36 $(@expr1073743043 $) $; $} $} $while $(@expr1073743044 $false $) ;
86: $do ${ $if $(@expr1073743045 $prepareTest $(@expr1073743046 "tokenize37" $) $) ${ $setVerbose $(@expr1073743047 $false $) $; tokenize37 $(@expr1073743048 $) $; $} $} $while $(@expr1073743049 $false $) ;
87: $do ${ $if $(@expr1073743050 $prepareTest $(@expr1073743051 "tokenize38" $) $) ${ $setVerbose $(@expr1073743052 $false $) $; tokenize38 $(@expr1073743053 $) $; $} $} $while $(@expr1073743054 $false $) ;
88: $do ${ $if $(@expr1073743055 $prepareTest $(@expr1073743056 "tokenize39" $) $) ${ $setVerbose $(@expr1073743057 $false $) $; tokenize39 $(@expr1073743058 $) $; $} $} $while $(@expr1073743059 $false $) ;
89:
90: $do ${ $if $(@expr1073743060 $prepareTest $(@expr1073743061 "validate" $) $) ${ $setVerbose $(@expr1073743062 $false $) $; validate $(@expr1073743063 $) $; $} $} $while $(@expr1073743064 $false $) ;
91:
92: $do ${ $if $(@expr1073743065 $prepareTest $(@expr1073743066 "objectiveC" $) $) ${ $setVerbose $(@expr1073743067 $false $) $; objectiveC $(@expr1073743068 $) $; $} $} $while $(@expr1073743069 $false $) ;
93:
94: $do ${ $if $(@expr1073743070 $prepareTest $(@expr1073743071 "syntax_case_default" $) $) ${ $setVerbose $(@expr1073743072 $false $) $; syntax_case_default $(@expr1073743073 $) $; $} $} $while $(@expr1073743074 $false $) ;
95:
96: $do ${ $if $(@expr1073743075 $prepareTest $(@expr1073743076 "removePragma" $) $) ${ $setVerbose $(@expr1073743077 $false $) $; removePragma $(@expr1073743078 $) $; $} $} $while $(@expr1073743079 $false $) ;
97:
98: $do ${ $if $(@expr1073743080 $prepareTest $(@expr1073743081 "foreach" $) $) ${ $setVerbose $(@expr1073743082 $false $) $; foreach $(@expr1073743083 $) $; $} $} $while $(@expr1073743084 $false $) ;
99: $do ${ $if $(@expr1073743085 $prepareTest $(@expr1073743086 "ifconstexpr" $) $) ${ $setVerbose $(@expr1073743087 $false $) $; ifconstexpr $(@expr1073743088 $) $; $} $} $while $(@expr1073743089 $false $) ;
100:
101: $do ${ $if $(@expr1073743090 $prepareTest $(@expr1073743091 "combineOperators" $) $) ${ $setVerbose $(@expr1073743092 $false $) $; combineOperators $(@expr1073743093 $) $; $} $} $while $(@expr1073743094 $false $) ;
102:
103: $do ${ $if $(@expr1073743095 $prepareTest $(@expr1073743096 "concatenateNegativeNumber" $) $) ${ $setVerbose $(@expr1073743097 $false $) $; concatenateNegativeNumber $(@expr1073743098 $) $; $} $} $while $(@expr1073743099 $false $) ;
104:
105: $do ${ $if $(@expr1073743100 $prepareTest $(@expr1073743101 "longtok" $) $) ${ $setVerbose $(@expr1073743102 $false $) $; longtok $(@expr1073743103 $) $; $} $} $while $(@expr1073743104 $false $) ;
106:
107: $do ${ $if $(@expr1073743105 $prepareTest $(@expr1073743106 "simplifyHeadersAndUnusedTemplates1" $) $) ${ $setVerbose $(@expr1073743107 $false $) $; simplifyHeadersAndUnusedTemplates1 $(@expr1073743108 $) $; $} $} $while $(@expr1073743109 $false $) ;
108: $do ${ $if $(@expr1073743110 $prepareTest $(@expr1073743111 "simplifyHeadersAndUnusedTemplates2" $) $) ${ $setVerbose $(@expr1073743112 $false $) $; simplifyHeadersAndUnusedTemplates2 $(@expr1073743113 $) $; $} $} $while $(@expr1073743114 $false $) ;
109:
110: $do ${ $if $(@expr1073743115 $prepareTest $(@expr1073743116 "simplifyAt" $) $) ${ $setVerbose $(@expr1073743117 $false $) $; simplifyAt $(@expr1073743118 $) $; $} $} $while $(@expr1073743119 $false $) ;
111:
112: $do ${ $if $(@expr1073743120 $prepareTest $(@expr1073743121 "inlineasm" $) $) ${ $setVerbose $(@expr1073743122 $false $) $; inlineasm $(@expr1073743123 $) $; $} $} $while $(@expr1073743124 $false $) ;
113: $do ${ $if $(@expr1073743125 $prepareTest $(@expr1073743126 "simplifyAsm2" $) $) ${ $setVerbose $(@expr1073743127 $false $) $; simplifyAsm2 $(@expr1073743128 $) $; $} $} $while $(@expr1073743129 $false $) ;
114:
115: $do ${ $if $(@expr1073743130 $prepareTest $(@expr1073743131 "ifAddBraces1" $) $) ${ $setVerbose $(@expr1073743132 $false $) $; ifAddBraces1 $(@expr1073743133 $) $; $} $} $while $(@expr1073743134 $false $) ;
116: $do ${ $if $(@expr1073743135 $prepareTest $(@expr1073743136 "ifAddBraces2" $) $) ${ $setVerbose $(@expr1073743137 $false $) $; ifAddBraces2 $(@expr1073743138 $) $; $} $} $while $(@expr1073743139 $false $) ;
117: $do ${ $if $(@expr1073743140 $prepareTest $(@expr1073743141 "ifAddBraces3" $) $) ${ $setVerbose $(@expr1073743142 $false $) $; ifAddBraces3 $(@expr1073743143 $) $; $} $} $while $(@expr1073743144 $false $) ;
118: $do ${ $if $(@expr1073743145 $prepareTest $(@expr1073743146 "ifAddBraces4" $) $) ${ $setVerbose $(@expr1073743147 $false $) $; ifAddBraces4 $(@expr1073743148 $) $; $} $} $while $(@expr1073743149 $false $) ;
119: $do ${ $if $(@expr1073743150 $prepareTest $(@expr1073743151 "ifAddBraces5" $) $) ${ $setVerbose $(@expr1073743152 $false $) $; ifAddBraces5 $(@expr1073743153 $) $; $} $} $while $(@expr1073743154 $false $) ;
120: $do ${ $if $(@expr1073743155 $prepareTest $(@expr1073743156 "ifAddBraces7" $) $) ${ $setVerbose $(@expr1073743157 $false $) $; ifAddBraces7 $(@expr1073743158 $) $; $} $} $while $(@expr1073743159 $false $) ;
121: $do ${ $if $(@expr1073743160 $prepareTest $(@expr1073743161 "ifAddBraces9" $) $) ${ $setVerbose $(@expr1073743162 $false $) $; ifAddBraces9 $(@expr1073743163 $) $; $} $} $while $(@expr1073743164 $false $) ;
122: $do ${ $if $(@expr1073743165 $prepareTest $(@expr1073743166 "ifAddBraces11" $) $) ${ $setVerbose $(@expr1073743167 $false $) $; ifAddBraces11 $(@expr1073743168 $) $; $} $} $while $(@expr1073743169 $false $) ;
123: $do ${ $if $(@expr1073743170 $prepareTest $(@expr1073743171 "ifAddBraces12" $) $) ${ $setVerbose $(@expr1073743172 $false $) $; ifAddBraces12 $(@expr1073743173 $) $; $} $} $while $(@expr1073743174 $false $) ;
124: $do ${ $if $(@expr1073743175 $prepareTest $(@expr1073743176 "ifAddBraces13" $) $) ${ $setVerbose $(@expr1073743177 $false $) $; ifAddBraces13 $(@expr1073743178 $) $; $} $} $while $(@expr1073743179 $false $) ;
125: $do ${ $if $(@expr1073743180 $prepareTest $(@expr1073743181 "ifAddBraces15" $) $) ${ $setVerbose $(@expr1073743182 $false $) $; ifAddBraces15 $(@expr1073743183 $) $; $} $} $while $(@expr1073743184 $false $) ;
126: $do ${ $if $(@expr1073743185 $prepareTest $(@expr1073743186 "ifAddBraces16" $) $) ${ $setVerbose $(@expr1073743187 $false $) $; ifAddBraces16 $(@expr1073743188 $) $; $} $} $while $(@expr1073743189 $false $) ;
127: $do ${ $if $(@expr1073743190 $prepareTest $(@expr1073743191 "ifAddBraces17" $) $) ${ $setVerbose $(@expr1073743192 $false $) $; ifAddBraces17 $(@expr1073743193 $) $; $} $} $while $(@expr1073743194 $false $) ;
128: $do ${ $if $(@expr1073743195 $prepareTest $(@expr1073743196 "ifAddBraces18" $) $) ${ $setVerbose $(@expr1073743197 $false $) $; ifAddBraces18 $(@expr1073743198 $) $; $} $} $while $(@expr1073743199 $false $) ;
129: $do ${ $if $(@expr1073743200 $prepareTest $(@expr1073743201 "ifAddBraces19" $) $) ${ $setVerbose $(@expr1073743202 $false $) $; ifAddBraces19 $(@expr1073743203 $) $; $} $} $while $(@expr1073743204 $false $) ;
130: $do ${ $if $(@expr1073743205 $prepareTest $(@expr1073743206 "ifAddBraces20" $) $) ${ $setVerbose $(@expr1073743207 $false $) $; ifAddBraces20 $(@expr1073743208 $) $; $} $} $while $(@expr1073743209 $false $) ;
131: $do ${ $if $(@expr1073743210 $prepareTest $(@expr1073743211 "ifAddBracesLabels" $) $) ${ $setVerbose $(@expr1073743212 $false $) $; ifAddBracesLabels $(@expr1073743213 $) $; $} $} $while $(@expr1073743214 $false $) ;
132:
133: $do ${ $if $(@expr1073743215 $prepareTest $(@expr1073743216 "switchAddBracesLabels" $) $) ${ $setVerbose $(@expr1073743217 $false $) $; switchAddBracesLabels $(@expr1073743218 $) $; $} $} $while $(@expr1073743219 $false $) ;
134:
135: $do ${ $if $(@expr1073743220 $prepareTest $(@expr1073743221 "whileAddBraces" $) $) ${ $setVerbose $(@expr1073743222 $false $) $; whileAddBraces $(@expr1073743223 $) $; $} $} $while $(@expr1073743224 $false $) ;
136: $do ${ $if $(@expr1073743225 $prepareTest $(@expr1073743226 "whileAddBracesLabels" $) $) ${ $setVerbose $(@expr1073743227 $false $) $; whileAddBracesLabels $(@expr1073743228 $) $; $} $} $while $(@expr1073743229 $false $) ;
137:
138: $do ${ $if $(@expr1073743230 $prepareTest $(@expr1073743231 "doWhileAddBraces" $) $) ${ $setVerbose $(@expr1073743232 $false $) $; doWhileAddBraces $(@expr1073743233 $) $; $} $} $while $(@expr1073743234 $false $) ;
139: $do ${ $if $(@expr1073743235 $prepareTest $(@expr1073743236 "doWhileAddBracesLabels" $) $) ${ $setVerbose $(@expr1073743237 $false $) $; doWhileAddBracesLabels $(@expr1073743238 $) $; $} $} $while $(@expr1073743239 $false $) ;
140:
141: $do ${ $if $(@expr1073743240 $prepareTest $(@expr1073743241 "forAddBraces1" $) $) ${ $setVerbose $(@expr1073743242 $false $) $; forAddBraces1 $(@expr1073743243 $) $; $} $} $while $(@expr1073743244 $false $) ;
142: $do ${ $if $(@expr1073743245 $prepareTest $(@expr1073743246 "forAddBraces2" $) $) ${ $setVerbose $(@expr1073743247 $false $) $; forAddBraces2 $(@expr1073743248 $) $; $} $} $while $(@expr1073743249 $false $) ;
143: $do ${ $if $(@expr1073743250 $prepareTest $(@expr1073743251 "forAddBracesLabels" $) $) ${ $setVerbose $(@expr1073743252 $false $) $; forAddBracesLabels $(@expr1073743253 $) $; $} $} $while $(@expr1073743254 $false $) ;
144:
145: $do ${ $if $(@expr1073743255 $prepareTest $(@expr1073743256 "simplifyExternC" $) $) ${ $setVerbose $(@expr1073743257 $false $) $; simplifyExternC $(@expr1073743258 $) $; $} $} $while $(@expr1073743259 $false $) ;
146: $do ${ $if $(@expr1073743260 $prepareTest $(@expr1073743261 "simplifyKeyword" $) $) ${ $setVerbose $(@expr1073743262 $false $) $; simplifyKeyword $(@expr1073743263 $) $; $} $} $while $(@expr1073743264 $false $) ;
147:
148: $do ${ $if $(@expr1073743265 $prepareTest $(@expr1073743266 "isZeroNumber" $) $) ${ $setVerbose $(@expr1073743267 $false $) $; isZeroNumber $(@expr1073743268 $) $; $} $} $while $(@expr1073743269 $false $) ;
149: $do ${ $if $(@expr1073743270 $prepareTest $(@expr1073743271 "isOneNumber" $) $) ${ $setVerbose $(@expr1073743272 $false $) $; isOneNumber $(@expr1073743273 $) $; $} $} $while $(@expr1073743274 $false $) ;
150: $do ${ $if $(@expr1073743275 $prepareTest $(@expr1073743276 "isTwoNumber" $) $) ${ $setVerbose $(@expr1073743277 $false $) $; isTwoNumber $(@expr1073743278 $) $; $} $} $while $(@expr1073743279 $false $) ;
151:
152: $do ${ $if $(@expr1073743280 $prepareTest $(@expr1073743281 "simplifyFunctionParameters" $) $) ${ $setVerbose $(@expr1073743282 $false $) $; simplifyFunctionParameters $(@expr1073743283 $) $; $} $} $while $(@expr1073743284 $false $) ;
153: $do ${ $if $(@expr1073743285 $prepareTest $(@expr1073743286 "simplifyFunctionParameters1" $) $) ${ $setVerbose $(@expr1073743287 $false $) $; simplifyFunctionParameters1 $(@expr1073743288 $) $; $} $} $while $(@expr1073743289 $false $) ;
154: $do ${ $if $(@expr1073743290 $prepareTest $(@expr1073743291 "simplifyFunctionParameters2" $) $) ${ $setVerbose $(@expr1073743292 $false $) $; simplifyFunctionParameters2 $(@expr1073743293 $) $; $} $} $while $(@expr1073743294 $false $) ;
155: $do ${ $if $(@expr1073743295 $prepareTest $(@expr1073743296 "simplifyFunctionParameters3" $) $) ${ $setVerbose $(@expr1073743297 $false $) $; simplifyFunctionParameters3 $(@expr1073743298 $) $; $} $} $while $(@expr1073743299 $false $) ;
156: $do ${ $if $(@expr1073743300 $prepareTest $(@expr1073743301 "simplifyFunctionParameters4" $) $) ${ $setVerbose $(@expr1073743302 $false $) $; simplifyFunctionParameters4 $(@expr1073743303 $) $; $} $} $while $(@expr1073743304 $false $) ;
157: $do ${ $if $(@expr1073743305 $prepareTest $(@expr1073743306 "simplifyFunctionParametersMultiTemplate" $) $) ${ $setVerbose $(@expr1073743307 $false $) $; simplifyFunctionParametersMultiTemplate $(@expr1073743308 $) $; $} $} $while $(@expr1073743309 $false $) ;
158: $do ${ $if $(@expr1073743310 $prepareTest $(@expr1073743311 "simplifyFunctionParametersErrors" $) $) ${ $setVerbose $(@expr1073743312 $false $) $; simplifyFunctionParametersErrors $(@expr1073743313 $) $; $} $} $while $(@expr1073743314 $false $) ;
159:
160: $do ${ $if $(@expr1073743315 $prepareTest $(@expr1073743316 "simplifyFunctionTryCatch" $) $) ${ $setVerbose $(@expr1073743317 $false $) $; simplifyFunctionTryCatch $(@expr1073743318 $) $; $} $} $while $(@expr1073743319 $false $) ;
161:
162: $do ${ $if $(@expr1073743320 $prepareTest $(@expr1073743321 "removeParentheses1" $) $) ${ $setVerbose $(@expr1073743322 $false $) $; removeParentheses1 $(@expr1073743323 $) $; $} $} $while $(@expr1073743324 $false $) ;
163: $do ${ $if $(@expr1073743325 $prepareTest $(@expr1073743326 "removeParentheses3" $) $) ${ $setVerbose $(@expr1073743327 $false $) $; removeParentheses3 $(@expr1073743328 $) $; $} $} $while $(@expr1073743329 $false $) ;
164: $do ${ $if $(@expr1073743330 $prepareTest $(@expr1073743331 "removeParentheses4" $) $) ${ $setVerbose $(@expr1073743332 $false $) $; removeParentheses4 $(@expr1073743333 $) $; $} $} $while $(@expr1073743334 $false $) ;
165: $do ${ $if $(@expr1073743335 $prepareTest $(@expr1073743336 "removeParentheses5" $) $) ${ $setVerbose $(@expr1073743337 $false $) $; removeParentheses5 $(@expr1073743338 $) $; $} $} $while $(@expr1073743339 $false $) ;
166: $do ${ $if $(@expr1073743340 $prepareTest $(@expr1073743341 "removeParentheses6" $) $) ${ $setVerbose $(@expr1073743342 $false $) $; removeParentheses6 $(@expr1073743343 $) $; $} $} $while $(@expr1073743344 $false $) ;
167: $do ${ $if $(@expr1073743345 $prepareTest $(@expr1073743346 "removeParentheses7" $) $) ${ $setVerbose $(@expr1073743347 $false $) $; removeParentheses7 $(@expr1073743348 $) $; $} $} $while $(@expr1073743349 $false $) ;
168: $do ${ $if $(@expr1073743350 $prepareTest $(@expr1073743351 "removeParentheses8" $) $) ${ $setVerbose $(@expr1073743352 $false $) $; removeParentheses8 $(@expr1073743353 $) $; $} $} $while $(@expr1073743354 $false $) ;
169: $do ${ $if $(@expr1073743355 $prepareTest $(@expr1073743356 "removeParentheses9" $) $) ${ $setVerbose $(@expr1073743357 $false $) $; removeParentheses9 $(@expr1073743358 $) $; $} $} $while $(@expr1073743359 $false $) ;
170: $do ${ $if $(@expr1073743360 $prepareTest $(@expr1073743361 "removeParentheses10" $) $) ${ $setVerbose $(@expr1073743362 $false $) $; removeParentheses10 $(@expr1073743363 $) $; $} $} $while $(@expr1073743364 $false $) ;
171: $do ${ $if $(@expr1073743365 $prepareTest $(@expr1073743366 "removeParentheses11" $) $) ${ $setVerbose $(@expr1073743367 $false $) $; removeParentheses11 $(@expr1073743368 $) $; $} $} $while $(@expr1073743369 $false $) ;
172: $do ${ $if $(@expr1073743370 $prepareTest $(@expr1073743371 "removeParentheses12" $) $) ${ $setVerbose $(@expr1073743372 $false $) $; removeParentheses12 $(@expr1073743373 $) $; $} $} $while $(@expr1073743374 $false $) ;
173: $do ${ $if $(@expr1073743375 $prepareTest $(@expr1073743376 "removeParentheses13" $) $) ${ $setVerbose $(@expr1073743377 $false $) $; removeParentheses13 $(@expr1073743378 $) $; $} $} $while $(@expr1073743379 $false $) ;
174: $do ${ $if $(@expr1073743380 $prepareTest $(@expr1073743381 "removeParentheses14" $) $) ${ $setVerbose $(@expr1073743382 $false $) $; removeParentheses14 $(@expr1073743383 $) $; $} $} $while $(@expr1073743384 $false $) ;
175: $do ${ $if $(@expr1073743385 $prepareTest $(@expr1073743386 "removeParentheses15" $) $) ${ $setVerbose $(@expr1073743387 $false $) $; removeParentheses15 $(@expr1073743388 $) $; $} $} $while $(@expr1073743389 $false $) ;
176: $do ${ $if $(@expr1073743390 $prepareTest $(@expr1073743391 "removeParentheses16" $) $) ${ $setVerbose $(@expr1073743392 $false $) $; removeParentheses16 $(@expr1073743393 $) $; $} $} $while $(@expr1073743394 $false $) ;
177: $do ${ $if $(@expr1073743395 $prepareTest $(@expr1073743396 "removeParentheses17" $) $) ${ $setVerbose $(@expr1073743397 $false $) $; removeParentheses17 $(@expr1073743398 $) $; $} $} $while $(@expr1073743399 $false $) ;
178: $do ${ $if $(@expr1073743400 $prepareTest $(@expr1073743401 "removeParentheses18" $) $) ${ $setVerbose $(@expr1073743402 $false $) $; removeParentheses18 $(@expr1073743403 $) $; $} $} $while $(@expr1073743404 $false $) ;
179: $do ${ $if $(@expr1073743405 $prepareTest $(@expr1073743406 "removeParentheses19" $) $) ${ $setVerbose $(@expr1073743407 $false $) $; removeParentheses19 $(@expr1073743408 $) $; $} $} $while $(@expr1073743409 $false $) ;
180: $do ${ $if $(@expr1073743410 $prepareTest $(@expr1073743411 "removeParentheses20" $) $) ${ $setVerbose $(@expr1073743412 $false $) $; removeParentheses20 $(@expr1073743413 $) $; $} $} $while $(@expr1073743414 $false $) ;
181: $do ${ $if $(@expr1073743415 $prepareTest $(@expr1073743416 "removeParentheses21" $) $) ${ $setVerbose $(@expr1073743417 $false $) $; removeParentheses21 $(@expr1073743418 $) $; $} $} $while $(@expr1073743419 $false $) ;
182: $do ${ $if $(@expr1073743420 $prepareTest $(@expr1073743421 "removeParentheses22" $) $) ${ $setVerbose $(@expr1073743422 $false $) $; removeParentheses22 $(@expr1073743423 $) $; $} $} $while $(@expr1073743424 $false $) ;
183: $do ${ $if $(@expr1073743425 $prepareTest $(@expr1073743426 "removeParentheses23" $) $) ${ $setVerbose $(@expr1073743427 $false $) $; removeParentheses23 $(@expr1073743428 $) $; $} $} $while $(@expr1073743429 $false $) ;
184: $do ${ $if $(@expr1073743430 $prepareTest $(@expr1073743431 "removeParentheses24" $) $) ${ $setVerbose $(@expr1073743432 $false $) $; removeParentheses24 $(@expr1073743433 $) $; $} $} $while $(@expr1073743434 $false $) ;
185: $do ${ $if $(@expr1073743435 $prepareTest $(@expr1073743436 "removeParentheses25" $) $) ${ $setVerbose $(@expr1073743437 $false $) $; removeParentheses25 $(@expr1073743438 $) $; $} $} $while $(@expr1073743439 $false $) ;
186: $do ${ $if $(@expr1073743440 $prepareTest $(@expr1073743441 "removeParentheses26" $) $) ${ $setVerbose $(@expr1073743442 $false $) $; removeParentheses26 $(@expr1073743443 $) $; $} $} $while $(@expr1073743444 $false $) ;
187:
188: $do ${ $if $(@expr1073743445 $prepareTest $(@expr1073743446 "tokenize_double" $) $) ${ $setVerbose $(@expr1073743447 $false $) $; tokenize_double $(@expr1073743448 $) $; $} $} $while $(@expr1073743449 $false $) ;
189: $do ${ $if $(@expr1073743450 $prepareTest $(@expr1073743451 "tokenize_strings" $) $) ${ $setVerbose $(@expr1073743452 $false $) $; tokenize_strings $(@expr1073743453 $) $; $} $} $while $(@expr1073743454 $false $) ;
190:
191: $do ${ $if $(@expr1073743455 $prepareTest $(@expr1073743456 "simplifyStructDecl" $) $) ${ $setVerbose $(@expr1073743457 $false $) $; simplifyStructDecl $(@expr1073743458 $) $; $} $} $while $(@expr1073743459 $false $) ;
192:
193: $do ${ $if $(@expr1073743460 $prepareTest $(@expr1073743461 "vardecl1" $) $) ${ $setVerbose $(@expr1073743462 $false $) $; vardecl1 $(@expr1073743463 $) $; $} $} $while $(@expr1073743464 $false $) ;
194: $do ${ $if $(@expr1073743465 $prepareTest $(@expr1073743466 "vardecl2" $) $) ${ $setVerbose $(@expr1073743467 $false $) $; vardecl2 $(@expr1073743468 $) $; $} $} $while $(@expr1073743469 $false $) ;
195: $do ${ $if $(@expr1073743470 $prepareTest $(@expr1073743471 "vardecl3" $) $) ${ $setVerbose $(@expr1073743472 $false $) $; vardecl3 $(@expr1073743473 $) $; $} $} $while $(@expr1073743474 $false $) ;
196: $do ${ $if $(@expr1073743475 $prepareTest $(@expr1073743476 "vardecl4" $) $) ${ $setVerbose $(@expr1073743477 $false $) $; vardecl4 $(@expr1073743478 $) $; $} $} $while $(@expr1073743479 $false $) ;
197: $do ${ $if $(@expr1073743480 $prepareTest $(@expr1073743481 "vardecl5" $) $) ${ $setVerbose $(@expr1073743482 $false $) $; vardecl5 $(@expr1073743483 $) $; $} $} $while $(@expr1073743484 $false $) ;
198: $do ${ $if $(@expr1073743485 $prepareTest $(@expr1073743486 "vardec_static" $) $) ${ $setVerbose $(@expr1073743487 $false $) $; vardec_static $(@expr1073743488 $) $; $} $} $while $(@expr1073743489 $false $) ;
199: $do ${ $if $(@expr1073743490 $prepareTest $(@expr1073743491 "vardecl6" $) $) ${ $setVerbose $(@expr1073743492 $false $) $; vardecl6 $(@expr1073743493 $) $; $} $} $while $(@expr1073743494 $false $) ;
200: $do ${ $if $(@expr1073743495 $prepareTest $(@expr1073743496 "vardecl7" $) $) ${ $setVerbose $(@expr1073743497 $false $) $; vardecl7 $(@expr1073743498 $) $; $} $} $while $(@expr1073743499 $false $) ;
201: $do ${ $if $(@expr1073743500 $prepareTest $(@expr1073743501 "vardecl8" $) $) ${ $setVerbose $(@expr1073743502 $false $) $; vardecl8 $(@expr1073743503 $) $; $} $} $while $(@expr1073743504 $false $) ;
202: $do ${ $if $(@expr1073743505 $prepareTest $(@expr1073743506 "vardecl9" $) $) ${ $setVerbose $(@expr1073743507 $false $) $; vardecl9 $(@expr1073743508 $) $; $} $} $while $(@expr1073743509 $false $) ;
203: $do ${ $if $(@expr1073743510 $prepareTest $(@expr1073743511 "vardecl10" $) $) ${ $setVerbose $(@expr1073743512 $false $) $; vardecl10 $(@expr1073743513 $) $; $} $} $while $(@expr1073743514 $false $) ;
204: $do ${ $if $(@expr1073743515 $prepareTest $(@expr1073743516 "vardecl11" $) $) ${ $setVerbose $(@expr1073743517 $false $) $; vardecl11 $(@expr1073743518 $) $; $} $} $while $(@expr1073743519 $false $) ;
205: $do ${ $if $(@expr1073743520 $prepareTest $(@expr1073743521 "vardecl12" $) $) ${ $setVerbose $(@expr1073743522 $false $) $; vardecl12 $(@expr1073743523 $) $; $} $} $while $(@expr1073743524 $false $) ;
206: $do ${ $if $(@expr1073743525 $prepareTest $(@expr1073743526 "vardecl13" $) $) ${ $setVerbose $(@expr1073743527 $false $) $; vardecl13 $(@expr1073743528 $) $; $} $} $while $(@expr1073743529 $false $) ;
207: $do ${ $if $(@expr1073743530 $prepareTest $(@expr1073743531 "vardecl14" $) $) ${ $setVerbose $(@expr1073743532 $false $) $; vardecl14 $(@expr1073743533 $) $; $} $} $while $(@expr1073743534 $false $) ;
208: $do ${ $if $(@expr1073743535 $prepareTest $(@expr1073743536 "vardecl15" $) $) ${ $setVerbose $(@expr1073743537 $false $) $; vardecl15 $(@expr1073743538 $) $; $} $} $while $(@expr1073743539 $false $) ;
209: $do ${ $if $(@expr1073743540 $prepareTest $(@expr1073743541 "vardecl16" $) $) ${ $setVerbose $(@expr1073743542 $false $) $; vardecl16 $(@expr1073743543 $) $; $} $} $while $(@expr1073743544 $false $) ;
210: $do ${ $if $(@expr1073743545 $prepareTest $(@expr1073743546 "vardecl17" $) $) ${ $setVerbose $(@expr1073743547 $false $) $; vardecl17 $(@expr1073743548 $) $; $} $} $while $(@expr1073743549 $false $) ;
211: $do ${ $if $(@expr1073743550 $prepareTest $(@expr1073743551 "vardecl18" $) $) ${ $setVerbose $(@expr1073743552 $false $) $; vardecl18 $(@expr1073743553 $) $; $} $} $while $(@expr1073743554 $false $) ;
212: $do ${ $if $(@expr1073743555 $prepareTest $(@expr1073743556 "vardecl19" $) $) ${ $setVerbose $(@expr1073743557 $false $) $; vardecl19 $(@expr1073743558 $) $; $} $} $while $(@expr1073743559 $false $) ;
213: $do ${ $if $(@expr1073743560 $prepareTest $(@expr1073743561 "vardecl20" $) $) ${ $setVerbose $(@expr1073743562 $false $) $; vardecl20 $(@expr1073743563 $) $; $} $} $while $(@expr1073743564 $false $) ;
214: $do ${ $if $(@expr1073743565 $prepareTest $(@expr1073743566 "vardecl21" $) $) ${ $setVerbose $(@expr1073743567 $false $) $; vardecl21 $(@expr1073743568 $) $; $} $} $while $(@expr1073743569 $false $) ;
215: $do ${ $if $(@expr1073743570 $prepareTest $(@expr1073743571 "vardecl22" $) $) ${ $setVerbose $(@expr1073743572 $false $) $; vardecl22 $(@expr1073743573 $) $; $} $} $while $(@expr1073743574 $false $) ;
216: $do ${ $if $(@expr1073743575 $prepareTest $(@expr1073743576 "vardecl23" $) $) ${ $setVerbose $(@expr1073743577 $false $) $; vardecl23 $(@expr1073743578 $) $; $} $} $while $(@expr1073743579 $false $) ;
217: $do ${ $if $(@expr1073743580 $prepareTest $(@expr1073743581 "vardecl24" $) $) ${ $setVerbose $(@expr1073743582 $false $) $; vardecl24 $(@expr1073743583 $) $; $} $} $while $(@expr1073743584 $false $) ;
218: $do ${ $if $(@expr1073743585 $prepareTest $(@expr1073743586 "vardecl25" $) $) ${ $setVerbose $(@expr1073743587 $false $) $; vardecl25 $(@expr1073743588 $) $; $} $} $while $(@expr1073743589 $false $) ;
219: $do ${ $if $(@expr1073743590 $prepareTest $(@expr1073743591 "vardecl26" $) $) ${ $setVerbose $(@expr1073743592 $false $) $; vardecl26 $(@expr1073743593 $) $; $} $} $while $(@expr1073743594 $false $) ;
220: $do ${ $if $(@expr1073743595 $prepareTest $(@expr1073743596 "vardecl27" $) $) ${ $setVerbose $(@expr1073743597 $false $) $; vardecl27 $(@expr1073743598 $) $; $} $} $while $(@expr1073743599 $false $) ;
221: $do ${ $if $(@expr1073743600 $prepareTest $(@expr1073743601 "vardecl28" $) $) ${ $setVerbose $(@expr1073743602 $false $) $; vardecl28 $(@expr1073743603 $) $; $} $} $while $(@expr1073743604 $false $) ;
222: $do ${ $if $(@expr1073743605 $prepareTest $(@expr1073743606 "vardecl_stl_1" $) $) ${ $setVerbose $(@expr1073743607 $false $) $; vardecl_stl_1 $(@expr1073743608 $) $; $} $} $while $(@expr1073743609 $false $) ;
223: $do ${ $if $(@expr1073743610 $prepareTest $(@expr1073743611 "vardecl_stl_2" $) $) ${ $setVerbose $(@expr1073743612 $false $) $; vardecl_stl_2 $(@expr1073743613 $) $; $} $} $while $(@expr1073743614 $false $) ;
224: $do ${ $if $(@expr1073743615 $prepareTest $(@expr1073743616 "vardecl_stl_3" $) $) ${ $setVerbose $(@expr1073743617 $false $) $; vardecl_stl_3 $(@expr1073743618 $) $; $} $} $while $(@expr1073743619 $false $) ;
225: $do ${ $if $(@expr1073743620 $prepareTest $(@expr1073743621 "vardecl_template_1" $) $) ${ $setVerbose $(@expr1073743622 $false $) $; vardecl_template_1 $(@expr1073743623 $) $; $} $} $while $(@expr1073743624 $false $) ;
226: $do ${ $if $(@expr1073743625 $prepareTest $(@expr1073743626 "vardecl_template_2" $) $) ${ $setVerbose $(@expr1073743627 $false $) $; vardecl_template_2 $(@expr1073743628 $) $; $} $} $while $(@expr1073743629 $false $) ;
227: $do ${ $if $(@expr1073743630 $prepareTest $(@expr1073743631 "vardecl_union" $) $) ${ $setVerbose $(@expr1073743632 $false $) $; vardecl_union $(@expr1073743633 $) $; $} $} $while $(@expr1073743634 $false $) ;
228: $do ${ $if $(@expr1073743635 $prepareTest $(@expr1073743636 "vardecl_par" $) $) ${ $setVerbose $(@expr1073743637 $false $) $; vardecl_par $(@expr1073743638 $) $; $} $} $while $(@expr1073743639 $false $) ;
229: $do ${ $if $(@expr1073743640 $prepareTest $(@expr1073743641 "vardecl_par2" $) $) ${ $setVerbose $(@expr1073743642 $false $) $; vardecl_par2 $(@expr1073743643 $) $; $} $} $while $(@expr1073743644 $false $) ;
230: $do ${ $if $(@expr1073743645 $prepareTest $(@expr1073743646 "vardecl_par3" $) $) ${ $setVerbose $(@expr1073743647 $false $) $; vardecl_par3 $(@expr1073743648 $) $; $} $} $while $(@expr1073743649 $false $) ;
231: $do ${ $if $(@expr1073743650 $prepareTest $(@expr1073743651 "vardecl_class_ref" $) $) ${ $setVerbose $(@expr1073743652 $false $) $; vardecl_class_ref $(@expr1073743653 $) $; $} $} $while $(@expr1073743654 $false $) ;
232: $do ${ $if $(@expr1073743655 $prepareTest $(@expr1073743656 "volatile_variables" $) $) ${ $setVerbose $(@expr1073743657 $false $) $; volatile_variables $(@expr1073743658 $) $; $} $} $while $(@expr1073743659 $false $) ;
233:
234:
235: $do ${ $if $(@expr1073743660 $prepareTest $(@expr1073743661 "implicitIntConst" $) $) ${ $setVerbose $(@expr1073743662 $false $) $; implicitIntConst $(@expr1073743663 $) $; $} $} $while $(@expr1073743664 $false $) ;
236: $do ${ $if $(@expr1073743665 $prepareTest $(@expr1073743666 "implicitIntExtern" $) $) ${ $setVerbose $(@expr1073743667 $false $) $; implicitIntExtern $(@expr1073743668 $) $; $} $} $while $(@expr1073743669 $false $) ;
237: $do ${ $if $(@expr1073743670 $prepareTest $(@expr1073743671 "implicitIntSigned1" $) $) ${ $setVerbose $(@expr1073743672 $false $) $; implicitIntSigned1 $(@expr1073743673 $) $; $} $} $while $(@expr1073743674 $false $) ;
238: $do ${ $if $(@expr1073743675 $prepareTest $(@expr1073743676 "implicitIntUnsigned1" $) $) ${ $setVerbose $(@expr1073743677 $false $) $; implicitIntUnsigned1 $(@expr1073743678 $) $; $} $} $while $(@expr1073743679 $false $) ;
239: $do ${ $if $(@expr1073743680 $prepareTest $(@expr1073743681 "implicitIntUnsigned2" $) $) ${ $setVerbose $(@expr1073743682 $false $) $; implicitIntUnsigned2 $(@expr1073743683 $) $; $} $} $while $(@expr1073743684 $false $) ;
240: $do ${ $if $(@expr1073743685 $prepareTest $(@expr1073743686 "implicitIntUnsigned3" $) $) ${ $setVerbose $(@expr1073743687 $false $) $; implicitIntUnsigned3 $(@expr1073743688 $) $; $} $} $while $(@expr1073743689 $false $) ;
241:
242: $do ${ $if $(@expr1073743690 $prepareTest $(@expr1073743691 "simplifyStdType" $) $) ${ $setVerbose $(@expr1073743692 $false $) $; simplifyStdType $(@expr1073743693 $) $; $} $} $while $(@expr1073743694 $false $) ;
243:
244: $do ${ $if $(@expr1073743695 $prepareTest $(@expr1073743696 "createLinks" $) $) ${ $setVerbose $(@expr1073743697 $false $) $; createLinks $(@expr1073743698 $) $; $} $} $while $(@expr1073743699 $false $) ;
245: $do ${ $if $(@expr1073743700 $prepareTest $(@expr1073743701 "createLinks2" $) $) ${ $setVerbose $(@expr1073743702 $false $) $; createLinks2 $(@expr1073743703 $) $; $} $} $while $(@expr1073743704 $false $) ;
246:
247: $do ${ $if $(@expr1073743705 $prepareTest $(@expr1073743706 "simplifyString" $) $) ${ $setVerbose $(@expr1073743707 $false $) $; simplifyString $(@expr1073743708 $) $; $} $} $while $(@expr1073743709 $false $) ;
248: $do ${ $if $(@expr1073743710 $prepareTest $(@expr1073743711 "simplifyConst" $) $) ${ $setVerbose $(@expr1073743712 $false $) $; simplifyConst $(@expr1073743713 $) $; $} $} $while $(@expr1073743714 $false $) ;
249: $do ${ $if $(@expr1073743715 $prepareTest $(@expr1073743716 "switchCase" $) $) ${ $setVerbose $(@expr1073743717 $false $) $; switchCase $(@expr1073743718 $) $; $} $} $while $(@expr1073743719 $false $) ;
250:
251: $do ${ $if $(@expr1073743720 $prepareTest $(@expr1073743721 "simplifyPointerToStandardType" $) $) ${ $setVerbose $(@expr1073743722 $false $) $; simplifyPointerToStandardType $(@expr1073743723 $) $; $} $} $while $(@expr1073743724 $false $) ;
252: $do ${ $if $(@expr1073743725 $prepareTest $(@expr1073743726 "simplifyFunctionPointers1" $) $) ${ $setVerbose $(@expr1073743727 $false $) $; simplifyFunctionPointers1 $(@expr1073743728 $) $; $} $} $while $(@expr1073743729 $false $) ;
253: $do ${ $if $(@expr1073743730 $prepareTest $(@expr1073743731 "simplifyFunctionPointers2" $) $) ${ $setVerbose $(@expr1073743732 $false $) $; simplifyFunctionPointers2 $(@expr1073743733 $) $; $} $} $while $(@expr1073743734 $false $) ;
254: $do ${ $if $(@expr1073743735 $prepareTest $(@expr1073743736 "simplifyFunctionPointers3" $) $) ${ $setVerbose $(@expr1073743737 $false $) $; simplifyFunctionPointers3 $(@expr1073743738 $) $; $} $} $while $(@expr1073743739 $false $) ;
255: $do ${ $if $(@expr1073743740 $prepareTest $(@expr1073743741 "simplifyFunctionPointers4" $) $) ${ $setVerbose $(@expr1073743742 $false $) $; simplifyFunctionPointers4 $(@expr1073743743 $) $; $} $} $while $(@expr1073743744 $false $) ;
256: $do ${ $if $(@expr1073743745 $prepareTest $(@expr1073743746 "simplifyFunctionPointers5" $) $) ${ $setVerbose $(@expr1073743747 $false $) $; simplifyFunctionPointers5 $(@expr1073743748 $) $; $} $} $while $(@expr1073743749 $false $) ;
257: $do ${ $if $(@expr1073743750 $prepareTest $(@expr1073743751 "simplifyFunctionPointers6" $) $) ${ $setVerbose $(@expr1073743752 $false $) $; simplifyFunctionPointers6 $(@expr1073743753 $) $; $} $} $while $(@expr1073743754 $false $) ;
258: $do ${ $if $(@expr1073743755 $prepareTest $(@expr1073743756 "simplifyFunctionPointers7" $) $) ${ $setVerbose $(@expr1073743757 $false $) $; simplifyFunctionPointers7 $(@expr1073743758 $) $; $} $} $while $(@expr1073743759 $false $) ;
259: $do ${ $if $(@expr1073743760 $prepareTest $(@expr1073743761 "simplifyFunctionPointers8" $) $) ${ $setVerbose $(@expr1073743762 $false $) $; simplifyFunctionPointers8 $(@expr1073743763 $) $; $} $} $while $(@expr1073743764 $false $) ;
260: $do ${ $if $(@expr1073743765 $prepareTest $(@expr1073743766 "simplifyFunctionPointers9" $) $) ${ $setVerbose $(@expr1073743767 $false $) $; simplifyFunctionPointers9 $(@expr1073743768 $) $; $} $} $while $(@expr1073743769 $false $) ;
261:
262: $do ${ $if $(@expr1073743770 $prepareTest $(@expr1073743771 "removedeclspec" $) $) ${ $setVerbose $(@expr1073743772 $false $) $; removedeclspec $(@expr1073743773 $) $; $} $} $while $(@expr1073743774 $false $) ;
263: $do ${ $if $(@expr1073743775 $prepareTest $(@expr1073743776 "removeattribute" $) $) ${ $setVerbose $(@expr1073743777 $false $) $; removeattribute $(@expr1073743778 $) $; $} $} $while $(@expr1073743779 $false $) ;
264: $do ${ $if $(@expr1073743780 $prepareTest $(@expr1073743781 "functionAttributeBefore1" $) $) ${ $setVerbose $(@expr1073743782 $false $) $; functionAttributeBefore1 $(@expr1073743783 $) $; $} $} $while $(@expr1073743784 $false $) ;
265: $do ${ $if $(@expr1073743785 $prepareTest $(@expr1073743786 "functionAttributeBefore2" $) $) ${ $setVerbose $(@expr1073743787 $false $) $; functionAttributeBefore2 $(@expr1073743788 $) $; $} $} $while $(@expr1073743789 $false $) ;
266: $do ${ $if $(@expr1073743790 $prepareTest $(@expr1073743791 "functionAttributeBefore3" $) $) ${ $setVerbose $(@expr1073743792 $false $) $; functionAttributeBefore3 $(@expr1073743793 $) $; $} $} $while $(@expr1073743794 $false $) ;
267: $do ${ $if $(@expr1073743795 $prepareTest $(@expr1073743796 "functionAttributeBefore4" $) $) ${ $setVerbose $(@expr1073743797 $false $) $; functionAttributeBefore4 $(@expr1073743798 $) $; $} $} $while $(@expr1073743799 $false $) ;
268: $do ${ $if $(@expr1073743800 $prepareTest $(@expr1073743801 "functionAttributeAfter1" $) $) ${ $setVerbose $(@expr1073743802 $false $) $; functionAttributeAfter1 $(@expr1073743803 $) $; $} $} $while $(@expr1073743804 $false $) ;
269: $do ${ $if $(@expr1073743805 $prepareTest $(@expr1073743806 "functionAttributeAfter2" $) $) ${ $setVerbose $(@expr1073743807 $false $) $; functionAttributeAfter2 $(@expr1073743808 $) $; $} $} $while $(@expr1073743809 $false $) ;
270: $do ${ $if $(@expr1073743810 $prepareTest $(@expr1073743811 "functionAttributeListBefore" $) $) ${ $setVerbose $(@expr1073743812 $false $) $; functionAttributeListBefore $(@expr1073743813 $) $; $} $} $while $(@expr1073743814 $false $) ;
271: $do ${ $if $(@expr1073743815 $prepareTest $(@expr1073743816 "functionAttributeListAfter" $) $) ${ $setVerbose $(@expr1073743817 $false $) $; functionAttributeListAfter $(@expr1073743818 $) $; $} $} $while $(@expr1073743819 $false $) ;
272:
273: $do ${ $if $(@expr1073743820 $prepareTest $(@expr1073743821 "splitTemplateRightAngleBrackets" $) $) ${ $setVerbose $(@expr1073743822 $false $) $; splitTemplateRightAngleBrackets $(@expr1073743823 $) $; $} $} $while $(@expr1073743824 $false $) ;
274:
275: $do ${ $if $(@expr1073743825 $prepareTest $(@expr1073743826 "cpp03template1" $) $) ${ $setVerbose $(@expr1073743827 $false $) $; cpp03template1 $(@expr1073743828 $) $; $} $} $while $(@expr1073743829 $false $) ;
276: $do ${ $if $(@expr1073743830 $prepareTest $(@expr1073743831 "cpp0xtemplate1" $) $) ${ $setVerbose $(@expr1073743832 $false $) $; cpp0xtemplate1 $(@expr1073743833 $) $; $} $} $while $(@expr1073743834 $false $) ;
277: $do ${ $if $(@expr1073743835 $prepareTest $(@expr1073743836 "cpp0xtemplate2" $) $) ${ $setVerbose $(@expr1073743837 $false $) $; cpp0xtemplate2 $(@expr1073743838 $) $; $} $} $while $(@expr1073743839 $false $) ;
278: $do ${ $if $(@expr1073743840 $prepareTest $(@expr1073743841 "cpp0xtemplate3" $) $) ${ $setVerbose $(@expr1073743842 $false $) $; cpp0xtemplate3 $(@expr1073743843 $) $; $} $} $while $(@expr1073743844 $false $) ;
279: $do ${ $if $(@expr1073743845 $prepareTest $(@expr1073743846 "cpp0xtemplate4" $) $) ${ $setVerbose $(@expr1073743847 $false $) $; cpp0xtemplate4 $(@expr1073743848 $) $; $} $} $while $(@expr1073743849 $false $) ;
280: $do ${ $if $(@expr1073743850 $prepareTest $(@expr1073743851 "cpp0xtemplate5" $) $) ${ $setVerbose $(@expr1073743852 $false $) $; cpp0xtemplate5 $(@expr1073743853 $) $; $} $} $while $(@expr1073743854 $false $) ;
281: $do ${ $if $(@expr1073743855 $prepareTest $(@expr1073743856 "cpp14template" $) $) ${ $setVerbose $(@expr1073743857 $false $) $; cpp14template $(@expr1073743858 $) $; $} $} $while $(@expr1073743859 $false $) ;
282:
283: $do ${ $if $(@expr1073743860 $prepareTest $(@expr1073743861 "arraySize" $) $) ${ $setVerbose $(@expr1073743862 $false $) $; arraySize $(@expr1073743863 $) $; $} $} $while $(@expr1073743864 $false $) ;
284:
285: $do ${ $if $(@expr1073743865 $prepareTest $(@expr1073743866 "labels" $) $) ${ $setVerbose $(@expr1073743867 $false $) $; labels $(@expr1073743868 $) $; $} $} $while $(@expr1073743869 $false $) ;
286: $do ${ $if $(@expr1073743870 $prepareTest $(@expr1073743871 "simplifyInitVar" $) $) ${ $setVerbose $(@expr1073743872 $false $) $; simplifyInitVar $(@expr1073743873 $) $; $} $} $while $(@expr1073743874 $false $) ;
287: $do ${ $if $(@expr1073743875 $prepareTest $(@expr1073743876 "simplifyInitVar2" $) $) ${ $setVerbose $(@expr1073743877 $false $) $; simplifyInitVar2 $(@expr1073743878 $) $; $} $} $while $(@expr1073743879 $false $) ;
288: $do ${ $if $(@expr1073743880 $prepareTest $(@expr1073743881 "simplifyInitVar3" $) $) ${ $setVerbose $(@expr1073743882 $false $) $; simplifyInitVar3 $(@expr1073743883 $) $; $} $} $while $(@expr1073743884 $false $) ;
289:
290: $do ${ $if $(@expr1073743885 $prepareTest $(@expr1073743886 "bitfields1" $) $) ${ $setVerbose $(@expr1073743887 $false $) $; bitfields1 $(@expr1073743888 $) $; $} $} $while $(@expr1073743889 $false $) ;
291: $do ${ $if $(@expr1073743890 $prepareTest $(@expr1073743891 "bitfields2" $) $) ${ $setVerbose $(@expr1073743892 $false $) $; bitfields2 $(@expr1073743893 $) $; $} $} $while $(@expr1073743894 $false $) ;
292: $do ${ $if $(@expr1073743895 $prepareTest $(@expr1073743896 "bitfields3" $) $) ${ $setVerbose $(@expr1073743897 $false $) $; bitfields3 $(@expr1073743898 $) $; $} $} $while $(@expr1073743899 $false $) ;
293: $do ${ $if $(@expr1073743900 $prepareTest $(@expr1073743901 "bitfields4" $) $) ${ $setVerbose $(@expr1073743902 $false $) $; bitfields4 $(@expr1073743903 $) $; $} $} $while $(@expr1073743904 $false $) ;
294: $do ${ $if $(@expr1073743905 $prepareTest $(@expr1073743906 "bitfields5" $) $) ${ $setVerbose $(@expr1073743907 $false $) $; bitfields5 $(@expr1073743908 $) $; $} $} $while $(@expr1073743909 $false $) ;
295: $do ${ $if $(@expr1073743910 $prepareTest $(@expr1073743911 "bitfields6" $) $) ${ $setVerbose $(@expr1073743912 $false $) $; bitfields6 $(@expr1073743913 $) $; $} $} $while $(@expr1073743914 $false $) ;
296: $do ${ $if $(@expr1073743915 $prepareTest $(@expr1073743916 "bitfields7" $) $) ${ $setVerbose $(@expr1073743917 $false $) $; bitfields7 $(@expr1073743918 $) $; $} $} $while $(@expr1073743919 $false $) ;
297: $do ${ $if $(@expr1073743920 $prepareTest $(@expr1073743921 "bitfields8" $) $) ${ $setVerbose $(@expr1073743922 $false $) $; bitfields8 $(@expr1073743923 $) $; $} $} $while $(@expr1073743924 $false $) ;
298: $do ${ $if $(@expr1073743925 $prepareTest $(@expr1073743926 "bitfields9" $) $) ${ $setVerbose $(@expr1073743927 $false $) $; bitfields9 $(@expr1073743928 $) $; $} $} $while $(@expr1073743929 $false $) ;
299: $do ${ $if $(@expr1073743930 $prepareTest $(@expr1073743931 "bitfields10" $) $) ${ $setVerbose $(@expr1073743932 $false $) $; bitfields10 $(@expr1073743933 $) $; $} $} $while $(@expr1073743934 $false $) ;
300: $do ${ $if $(@expr1073743935 $prepareTest $(@expr1073743936 "bitfields12" $) $) ${ $setVerbose $(@expr1073743937 $false $) $; bitfields12 $(@expr1073743938 $) $; $} $} $while $(@expr1073743939 $false $) ;
301: $do ${ $if $(@expr1073743940 $prepareTest $(@expr1073743941 "bitfields13" $) $) ${ $setVerbose $(@expr1073743942 $false $) $; bitfields13 $(@expr1073743943 $) $; $} $} $while $(@expr1073743944 $false $) ;
302: $do ${ $if $(@expr1073743945 $prepareTest $(@expr1073743946 "bitfields14" $) $) ${ $setVerbose $(@expr1073743947 $false $) $; bitfields14 $(@expr1073743948 $) $; $} $} $while $(@expr1073743949 $false $) ;
303: $do ${ $if $(@expr1073743950 $prepareTest $(@expr1073743951 "bitfields15" $) $) ${ $setVerbose $(@expr1073743952 $false $) $; bitfields15 $(@expr1073743953 $) $; $} $} $while $(@expr1073743954 $false $) ;
304: $do ${ $if $(@expr1073743955 $prepareTest $(@expr1073743956 "bitfields16" $) $) ${ $setVerbose $(@expr1073743957 $false $) $; bitfields16 $(@expr1073743958 $) $; $} $} $while $(@expr1073743959 $false $) ;
305:
306: $do ${ $if $(@expr1073743960 $prepareTest $(@expr1073743961 "simplifyNamespaceStd" $) $) ${ $setVerbose $(@expr1073743962 $false $) $; simplifyNamespaceStd $(@expr1073743963 $) $; $} $} $while $(@expr1073743964 $false $) ;
307:
308: $do ${ $if $(@expr1073743965 $prepareTest $(@expr1073743966 "microsoftMemory" $) $) ${ $setVerbose $(@expr1073743967 $false $) $; microsoftMemory $(@expr1073743968 $) $; $} $} $while $(@expr1073743969 $false $) ;
309: $do ${ $if $(@expr1073743970 $prepareTest $(@expr1073743971 "microsoftString" $) $) ${ $setVerbose $(@expr1073743972 $false $) $; microsoftString $(@expr1073743973 $) $; $} $} $while $(@expr1073743974 $false $) ;
310:
311: $do ${ $if $(@expr1073743975 $prepareTest $(@expr1073743976 "borland" $) $) ${ $setVerbose $(@expr1073743977 $false $) $; borland $(@expr1073743978 $) $; $} $} $while $(@expr1073743979 $false $) ;
312:
313: $do ${ $if $(@expr1073743980 $prepareTest $(@expr1073743981 "simplifyQtSignalsSlots1" $) $) ${ $setVerbose $(@expr1073743982 $false $) $; simplifyQtSignalsSlots1 $(@expr1073743983 $) $; $} $} $while $(@expr1073743984 $false $) ;
314: $do ${ $if $(@expr1073743985 $prepareTest $(@expr1073743986 "simplifyQtSignalsSlots2" $) $) ${ $setVerbose $(@expr1073743987 $false $) $; simplifyQtSignalsSlots2 $(@expr1073743988 $) $; $} $} $while $(@expr1073743989 $false $) ;
315:
316: $do ${ $if $(@expr1073743990 $prepareTest $(@expr1073743991 "simplifySQL" $) $) ${ $setVerbose $(@expr1073743992 $false $) $; simplifySQL $(@expr1073743993 $) $; $} $} $while $(@expr1073743994 $false $) ;
317:
318: $do ${ $if $(@expr1073743995 $prepareTest $(@expr1073743996 "simplifyCAlternativeTokens" $) $) ${ $setVerbose $(@expr1073743997 $false $) $; simplifyCAlternativeTokens $(@expr1073743998 $) $; $} $} $while $(@expr1073743999 $false $) ;
319:
320:
321: $do ${ $if $(@expr1073744000 $prepareTest $(@expr1073744001 "simplifyRoundCurlyParentheses" $) $) ${ $setVerbose $(@expr1073744002 $false $) $; simplifyRoundCurlyParentheses $(@expr1073744003 $) $; $} $} $while $(@expr1073744004 $false $) ;
322:
323: $do ${ $if $(@expr1073744005 $prepareTest $(@expr1073744006 "simplifyOperatorName1" $) $) ${ $setVerbose $(@expr1073744007 $false $) $; simplifyOperatorName1 $(@expr1073744008 $) $; $} $} $while $(@expr1073744009 $false $) ;
324: $do ${ $if $(@expr1073744010 $prepareTest $(@expr1073744011 "simplifyOperatorName2" $) $) ${ $setVerbose $(@expr1073744012 $false $) $; simplifyOperatorName2 $(@expr1073744013 $) $; $} $} $while $(@expr1073744014 $false $) ;
325: $do ${ $if $(@expr1073744015 $prepareTest $(@expr1073744016 "simplifyOperatorName3" $) $) ${ $setVerbose $(@expr1073744017 $false $) $; simplifyOperatorName3 $(@expr1073744018 $) $; $} $} $while $(@expr1073744019 $false $) ;
326: $do ${ $if $(@expr1073744020 $prepareTest $(@expr1073744021 "simplifyOperatorName4" $) $) ${ $setVerbose $(@expr1073744022 $false $) $; simplifyOperatorName4 $(@expr1073744023 $) $; $} $} $while $(@expr1073744024 $false $) ;
327: $do ${ $if $(@expr1073744025 $prepareTest $(@expr1073744026 "simplifyOperatorName5" $) $) ${ $setVerbose $(@expr1073744027 $false $) $; simplifyOperatorName5 $(@expr1073744028 $) $; $} $} $while $(@expr1073744029 $false $) ;
328: $do ${ $if $(@expr1073744030 $prepareTest $(@expr1073744031 "simplifyOperatorName6" $) $) ${ $setVerbose $(@expr1073744032 $false $) $; simplifyOperatorName6 $(@expr1073744033 $) $; $} $} $while $(@expr1073744034 $false $) ;
329: $do ${ $if $(@expr1073744035 $prepareTest $(@expr1073744036 "simplifyOperatorName7" $) $) ${ $setVerbose $(@expr1073744037 $false $) $; simplifyOperatorName7 $(@expr1073744038 $) $; $} $} $while $(@expr1073744039 $false $) ;
330: $do ${ $if $(@expr1073744040 $prepareTest $(@expr1073744041 "simplifyOperatorName8" $) $) ${ $setVerbose $(@expr1073744042 $false $) $; simplifyOperatorName8 $(@expr1073744043 $) $; $} $} $while $(@expr1073744044 $false $) ;
331: $do ${ $if $(@expr1073744045 $prepareTest $(@expr1073744046 "simplifyOperatorName9" $) $) ${ $setVerbose $(@expr1073744047 $false $) $; simplifyOperatorName9 $(@expr1073744048 $) $; $} $} $while $(@expr1073744049 $false $) ;
332: $do ${ $if $(@expr1073744050 $prepareTest $(@expr1073744051 "simplifyOperatorName10" $) $) ${ $setVerbose $(@expr1073744052 $false $) $; simplifyOperatorName10 $(@expr1073744053 $) $; $} $} $while $(@expr1073744054 $false $) ;
333: $do ${ $if $(@expr1073744055 $prepareTest $(@expr1073744056 "simplifyOperatorName11" $) $) ${ $setVerbose $(@expr1073744057 $false $) $; simplifyOperatorName11 $(@expr1073744058 $) $; $} $} $while $(@expr1073744059 $false $) ;
334: $do ${ $if $(@expr1073744060 $prepareTest $(@expr1073744061 "simplifyOperatorName12" $) $) ${ $setVerbose $(@expr1073744062 $false $) $; simplifyOperatorName12 $(@expr1073744063 $) $; $} $} $while $(@expr1073744064 $false $) ;
335: $do ${ $if $(@expr1073744065 $prepareTest $(@expr1073744066 "simplifyOperatorName13" $) $) ${ $setVerbose $(@expr1073744067 $false $) $; simplifyOperatorName13 $(@expr1073744068 $) $; $} $} $while $(@expr1073744069 $false $) ;
336: $do ${ $if $(@expr1073744070 $prepareTest $(@expr1073744071 "simplifyOperatorName14" $) $) ${ $setVerbose $(@expr1073744072 $false $) $; simplifyOperatorName14 $(@expr1073744073 $) $; $} $} $while $(@expr1073744074 $false $) ;
337: $do ${ $if $(@expr1073744075 $prepareTest $(@expr1073744076 "simplifyOperatorName15" $) $) ${ $setVerbose $(@expr1073744077 $false $) $; simplifyOperatorName15 $(@expr1073744078 $) $; $} $} $while $(@expr1073744079 $false $) ;
338: $do ${ $if $(@expr1073744080 $prepareTest $(@expr1073744081 "simplifyOperatorName16" $) $) ${ $setVerbose $(@expr1073744082 $false $) $; simplifyOperatorName16 $(@expr1073744083 $) $; $} $} $while $(@expr1073744084 $false $) ;
339: $do ${ $if $(@expr1073744085 $prepareTest $(@expr1073744086 "simplifyOperatorName17" $) $) ${ $setVerbose $(@expr1073744087 $false $) $; simplifyOperatorName17 $(@expr1073744088 $) $; $} $} $while $(@expr1073744089 $false $) ;
340: $do ${ $if $(@expr1073744090 $prepareTest $(@expr1073744091 "simplifyOperatorName18" $) $) ${ $setVerbose $(@expr1073744092 $false $) $; simplifyOperatorName18 $(@expr1073744093 $) $; $} $} $while $(@expr1073744094 $false $) ;
341: $do ${ $if $(@expr1073744095 $prepareTest $(@expr1073744096 "simplifyOperatorName19" $) $) ${ $setVerbose $(@expr1073744097 $false $) $; simplifyOperatorName19 $(@expr1073744098 $) $; $} $} $while $(@expr1073744099 $false $) ;
342: $do ${ $if $(@expr1073744100 $prepareTest $(@expr1073744101 "simplifyOperatorName20" $) $) ${ $setVerbose $(@expr1073744102 $false $) $; simplifyOperatorName20 $(@expr1073744103 $) $; $} $} $while $(@expr1073744104 $false $) ;
343: $do ${ $if $(@expr1073744105 $prepareTest $(@expr1073744106 "simplifyOperatorName21" $) $) ${ $setVerbose $(@expr1073744107 $false $) $; simplifyOperatorName21 $(@expr1073744108 $) $; $} $} $while $(@expr1073744109 $false $) ;
344: $do ${ $if $(@expr1073744110 $prepareTest $(@expr1073744111 "simplifyOperatorName22" $) $) ${ $setVerbose $(@expr1073744112 $false $) $; simplifyOperatorName22 $(@expr1073744113 $) $; $} $} $while $(@expr1073744114 $false $) ;
345: $do ${ $if $(@expr1073744115 $prepareTest $(@expr1073744116 "simplifyOperatorName23" $) $) ${ $setVerbose $(@expr1073744117 $false $) $; simplifyOperatorName23 $(@expr1073744118 $) $; $} $} $while $(@expr1073744119 $false $) ;
346: $do ${ $if $(@expr1073744120 $prepareTest $(@expr1073744121 "simplifyOperatorName24" $) $) ${ $setVerbose $(@expr1073744122 $false $) $; simplifyOperatorName24 $(@expr1073744123 $) $; $} $} $while $(@expr1073744124 $false $) ;
347: $do ${ $if $(@expr1073744125 $prepareTest $(@expr1073744126 "simplifyOperatorName25" $) $) ${ $setVerbose $(@expr1073744127 $false $) $; simplifyOperatorName25 $(@expr1073744128 $) $; $} $} $while $(@expr1073744129 $false $) ;
348: $do ${ $if $(@expr1073744130 $prepareTest $(@expr1073744131 "simplifyOperatorName26" $) $) ${ $setVerbose $(@expr1073744132 $false $) $; simplifyOperatorName26 $(@expr1073744133 $) $; $} $} $while $(@expr1073744134 $false $) ;
349: $do ${ $if $(@expr1073744135 $prepareTest $(@expr1073744136 "simplifyOperatorName27" $) $) ${ $setVerbose $(@expr1073744137 $false $) $; simplifyOperatorName27 $(@expr1073744138 $) $; $} $} $while $(@expr1073744139 $false $) ;
350: $do ${ $if $(@expr1073744140 $prepareTest $(@expr1073744141 "simplifyOperatorName28" $) $) ${ $setVerbose $(@expr1073744142 $false $) $; simplifyOperatorName28 $(@expr1073744143 $) $; $} $} $while $(@expr1073744144 $false $) ;
351: $do ${ $if $(@expr1073744145 $prepareTest $(@expr1073744146 "simplifyOperatorName29" $) $) ${ $setVerbose $(@expr1073744147 $false $) $; simplifyOperatorName29 $(@expr1073744148 $) $; $} $} $while $(@expr1073744149 $false $) ;
352: $do ${ $if $(@expr1073744150 $prepareTest $(@expr1073744151 "simplifyOperatorName31" $) $) ${ $setVerbose $(@expr1073744152 $false $) $; simplifyOperatorName31 $(@expr1073744153 $) $; $} $} $while $(@expr1073744154 $false $) ;
353: $do ${ $if $(@expr1073744155 $prepareTest $(@expr1073744156 "simplifyOperatorName32" $) $) ${ $setVerbose $(@expr1073744157 $false $) $; simplifyOperatorName32 $(@expr1073744158 $) $; $} $} $while $(@expr1073744159 $false $) ;
354:
355: $do ${ $if $(@expr1073744160 $prepareTest $(@expr1073744161 "simplifyOverloadedOperators1" $) $) ${ $setVerbose $(@expr1073744162 $false $) $; simplifyOverloadedOperators1 $(@expr1073744163 $) $; $} $} $while $(@expr1073744164 $false $) ;
356: $do ${ $if $(@expr1073744165 $prepareTest $(@expr1073744166 "simplifyOverloadedOperators2" $) $) ${ $setVerbose $(@expr1073744167 $false $) $; simplifyOverloadedOperators2 $(@expr1073744168 $) $; $} $} $while $(@expr1073744169 $false $) ;
357: $do ${ $if $(@expr1073744170 $prepareTest $(@expr1073744171 "simplifyOverloadedOperators3" $) $) ${ $setVerbose $(@expr1073744172 $false $) $; simplifyOverloadedOperators3 $(@expr1073744173 $) $; $} $} $while $(@expr1073744174 $false $) ;
358:
359: $do ${ $if $(@expr1073744175 $prepareTest $(@expr1073744176 "simplifyNullArray" $) $) ${ $setVerbose $(@expr1073744177 $false $) $; simplifyNullArray $(@expr1073744178 $) $; $} $} $while $(@expr1073744179 $false $) ;
360:
361:
362: $do ${ $if $(@expr1073744180 $prepareTest $(@expr1073744181 "removeMacrosInGlobalScope" $) $) ${ $setVerbose $(@expr1073744182 $false $) $; removeMacrosInGlobalScope $(@expr1073744183 $) $; $} $} $while $(@expr1073744184 $false $) ;
363: $do ${ $if $(@expr1073744185 $prepareTest $(@expr1073744186 "removeMacroInVarDecl" $) $) ${ $setVerbose $(@expr1073744187 $false $) $; removeMacroInVarDecl $(@expr1073744188 $) $; $} $} $while $(@expr1073744189 $false $) ;
364:
365: $do ${ $if $(@expr1073744190 $prepareTest $(@expr1073744191 "addSemicolonAfterUnknownMacro" $) $) ${ $setVerbose $(@expr1073744192 $false $) $; addSemicolonAfterUnknownMacro $(@expr1073744193 $) $; $} $} $while $(@expr1073744194 $false $) ;
366:
367:
368: $do ${ $if $(@expr1073744195 $prepareTest $(@expr1073744196 "multipleAssignment" $) $) ${ $setVerbose $(@expr1073744197 $false $) $; multipleAssignment $(@expr1073744198 $) $; $} $} $while $(@expr1073744199 $false $) ;
369:
370: $do ${ $if $(@expr1073744200 $prepareTest $(@expr1073744201 "platformWin32A" $) $) ${ $setVerbose $(@expr1073744202 $false $) $; platformWin32A $(@expr1073744203 $) $; $} $} $while $(@expr1073744204 $false $) ;
371: $do ${ $if $(@expr1073744205 $prepareTest $(@expr1073744206 "platformWin32W" $) $) ${ $setVerbose $(@expr1073744207 $false $) $; platformWin32W $(@expr1073744208 $) $; $} $} $while $(@expr1073744209 $false $) ;
372: $do ${ $if $(@expr1073744210 $prepareTest $(@expr1073744211 "platformWin32AStringCat" $) $) ${ $setVerbose $(@expr1073744212 $false $) $; platformWin32AStringCat $(@expr1073744213 $) $; $} $} $while $(@expr1073744214 $false $) ;
373: $do ${ $if $(@expr1073744215 $prepareTest $(@expr1073744216 "platformWin32WStringCat" $) $) ${ $setVerbose $(@expr1073744217 $false $) $; platformWin32WStringCat $(@expr1073744218 $) $; $} $} $while $(@expr1073744219 $false $) ;
374: $do ${ $if $(@expr1073744220 $prepareTest $(@expr1073744221 "platformWinWithNamespace" $) $) ${ $setVerbose $(@expr1073744222 $false $) $; platformWinWithNamespace $(@expr1073744223 $) $; $} $} $while $(@expr1073744224 $false $) ;
375:
376: $do ${ $if $(@expr1073744225 $prepareTest $(@expr1073744226 "simplifyStaticConst" $) $) ${ $setVerbose $(@expr1073744227 $false $) $; simplifyStaticConst $(@expr1073744228 $) $; $} $} $while $(@expr1073744229 $false $) ;
377:
378: $do ${ $if $(@expr1073744230 $prepareTest $(@expr1073744231 "simplifyCPPAttribute" $) $) ${ $setVerbose $(@expr1073744232 $false $) $; simplifyCPPAttribute $(@expr1073744233 $) $; $} $} $while $(@expr1073744234 $false $) ;
379:
380: $do ${ $if $(@expr1073744235 $prepareTest $(@expr1073744236 "simplifyCaseRange" $) $) ${ $setVerbose $(@expr1073744237 $false $) $; simplifyCaseRange $(@expr1073744238 $) $; $} $} $while $(@expr1073744239 $false $) ;
381:
382: $do ${ $if $(@expr1073744240 $prepareTest $(@expr1073744241 "simplifyEmptyNamespaces" $) $) ${ $setVerbose $(@expr1073744242 $false $) $; simplifyEmptyNamespaces $(@expr1073744243 $) $; $} $} $while $(@expr1073744244 $false $) ;
383:
384: $do ${ $if $(@expr1073744245 $prepareTest $(@expr1073744246 "compileLimits" $) $) ${ $setVerbose $(@expr1073744247 $false $) $; compileLimits $(@expr1073744248 $) $; $} $} $while $(@expr1073744249 $false $) ;
385:
386: $do ${ $if $(@expr1073744250 $prepareTest $(@expr1073744251 "prepareTernaryOpForAST" $) $) ${ $setVerbose $(@expr1073744252 $false $) $; prepareTernaryOpForAST $(@expr1073744253 $) $; $} $} $while $(@expr1073744254 $false $) ;
387:
388:
389: $do ${ $if $(@expr1073744255 $prepareTest $(@expr1073744256 "astexpr" $) $) ${ $setVerbose $(@expr1073744257 $false $) $; astexpr $(@expr1073744258 $) $; $} $} $while $(@expr1073744259 $false $) ;
390: $do ${ $if $(@expr1073744260 $prepareTest $(@expr1073744261 "astexpr2" $) $) ${ $setVerbose $(@expr1073744262 $false $) $; astexpr2 $(@expr1073744263 $) $; $} $} $while $(@expr1073744264 $false $) ;
391: $do ${ $if $(@expr1073744265 $prepareTest $(@expr1073744266 "astpar" $) $) ${ $setVerbose $(@expr1073744267 $false $) $; astpar $(@expr1073744268 $) $; $} $} $while $(@expr1073744269 $false $) ;
392: $do ${ $if $(@expr1073744270 $prepareTest $(@expr1073744271 "astnewdelete" $) $) ${ $setVerbose $(@expr1073744272 $false $) $; astnewdelete $(@expr1073744273 $) $; $} $} $while $(@expr1073744274 $false $) ;
393: $do ${ $if $(@expr1073744275 $prepareTest $(@expr1073744276 "astbrackets" $) $) ${ $setVerbose $(@expr1073744277 $false $) $; astbrackets $(@expr1073744278 $) $; $} $} $while $(@expr1073744279 $false $) ;
394: $do ${ $if $(@expr1073744280 $prepareTest $(@expr1073744281 "astunaryop" $) $) ${ $setVerbose $(@expr1073744282 $false $) $; astunaryop $(@expr1073744283 $) $; $} $} $while $(@expr1073744284 $false $) ;
395: $do ${ $if $(@expr1073744285 $prepareTest $(@expr1073744286 "astfunction" $) $) ${ $setVerbose $(@expr1073744287 $false $) $; astfunction $(@expr1073744288 $) $; $} $} $while $(@expr1073744289 $false $) ;
396: $do ${ $if $(@expr1073744290 $prepareTest $(@expr1073744291 "asttemplate" $) $) ${ $setVerbose $(@expr1073744292 $false $) $; asttemplate $(@expr1073744293 $) $; $} $} $while $(@expr1073744294 $false $) ;
397: $do ${ $if $(@expr1073744295 $prepareTest $(@expr1073744296 "astcast" $) $) ${ $setVerbose $(@expr1073744297 $false $) $; astcast $(@expr1073744298 $) $; $} $} $while $(@expr1073744299 $false $) ;
398: $do ${ $if $(@expr1073744300 $prepareTest $(@expr1073744301 "astlambda" $) $) ${ $setVerbose $(@expr1073744302 $false $) $; astlambda $(@expr1073744303 $) $; $} $} $while $(@expr1073744304 $false $) ;
399: $do ${ $if $(@expr1073744305 $prepareTest $(@expr1073744306 "astcase" $) $) ${ $setVerbose $(@expr1073744307 $false $) $; astcase $(@expr1073744308 $) $; $} $} $while $(@expr1073744309 $false $) ;
400: $do ${ $if $(@expr1073744310 $prepareTest $(@expr1073744311 "astrefqualifier" $) $) ${ $setVerbose $(@expr1073744312 $false $) $; astrefqualifier $(@expr1073744313 $) $; $} $} $while $(@expr1073744314 $false $) ;
401: $do ${ $if $(@expr1073744315 $prepareTest $(@expr1073744316 "astvardecl" $) $) ${ $setVerbose $(@expr1073744317 $false $) $; astvardecl $(@expr1073744318 $) $; $} $} $while $(@expr1073744319 $false $) ;
402: $do ${ $if $(@expr1073744320 $prepareTest $(@expr1073744321 "astnewscoped" $) $) ${ $setVerbose $(@expr1073744322 $false $) $; astnewscoped $(@expr1073744323 $) $; $} $} $while $(@expr1073744324 $false $) ;
403:
404: $do ${ $if $(@expr1073744325 $prepareTest $(@expr1073744326 "startOfExecutableScope" $) $) ${ $setVerbose $(@expr1073744327 $false $) $; startOfExecutableScope $(@expr1073744328 $) $; $} $} $while $(@expr1073744329 $false $) ;
405:
406: $do ${ $if $(@expr1073744330 $prepareTest $(@expr1073744331 "removeMacroInClassDef" $) $) ${ $setVerbose $(@expr1073744332 $false $) $; removeMacroInClassDef $(@expr1073744333 $) $; $} $} $while $(@expr1073744334 $false $) ;
407:
408: $do ${ $if $(@expr1073744335 $prepareTest $(@expr1073744336 "sizeofAddParentheses" $) $) ${ $setVerbose $(@expr1073744337 $false $) $; sizeofAddParentheses $(@expr1073744338 $) $; $} $} $while $(@expr1073744339 $false $) ;
409:
410: $do ${ $if $(@expr1073744340 $prepareTest $(@expr1073744341 "reportUnknownMacros" $) $) ${ $setVerbose $(@expr1073744342 $false $) $; reportUnknownMacros $(@expr1073744343 $) $; $} $} $while $(@expr1073744344 $false $) ;
411:
412:
413:
414: $do ${ $if $(@expr1073744345 $prepareTest $(@expr1073744346 "findGarbageCode" $) $) ${ $setVerbose $(@expr1073744347 $false $) $; findGarbageCode $(@expr1073744348 $) $; $} $} $while $(@expr1073744349 $false $) ;
415: $do ${ $if $(@expr1073744350 $prepareTest $(@expr1073744351 "checkEnableIf" $) $) ${ $setVerbose $(@expr1073744352 $false $) $; checkEnableIf $(@expr1073744353 $) $; $} $} $while $(@expr1073744354 $false $) ;
416: $do ${ $if $(@expr1073744355 $prepareTest $(@expr1073744356 "checkTemplates" $) $) ${ $setVerbose $(@expr1073744357 $false $) $; checkTemplates $(@expr1073744358 $) $; $} $} $while $(@expr1073744359 $false $) ;
417: $do ${ $if $(@expr1073744360 $prepareTest $(@expr1073744361 "checkNamespaces" $) $) ${ $setVerbose $(@expr1073744362 $false $) $; checkNamespaces $(@expr1073744363 $) $; $} $} $while $(@expr1073744364 $false $) ;
418: $do ${ $if $(@expr1073744365 $prepareTest $(@expr1073744366 "checkLambdas" $) $) ${ $setVerbose $(@expr1073744367 $false $) $; checkLambdas $(@expr1073744368 $) $; $} $} $while $(@expr1073744369 $false $) ;
419: $do ${ $if $(@expr1073744370 $prepareTest $(@expr1073744371 "checkIfCppCast" $) $) ${ $setVerbose $(@expr1073744372 $false $) $; checkIfCppCast $(@expr1073744373 $) $; $} $} $while $(@expr1073744374 $false $) ;
420: $do ${ $if $(@expr1073744375 $prepareTest $(@expr1073744376 "checkRefQualifiers" $) $) ${ $setVerbose $(@expr1073744377 $false $) $; checkRefQualifiers $(@expr1073744378 $) $; $} $} $while $(@expr1073744379 $false $) ;
421: $do ${ $if $(@expr1073744380 $prepareTest $(@expr1073744381 "checkConditionBlock" $) $) ${ $setVerbose $(@expr1073744382 $false $) $; checkConditionBlock $(@expr1073744383 $) $; $} $} $while $(@expr1073744384 $false $) ;
422: $do ${ $if $(@expr1073744385 $prepareTest $(@expr1073744386 "checkUnknownCircularVar" $) $) ${ $setVerbose $(@expr1073744387 $false $) $; checkUnknownCircularVar $(@expr1073744388 $) $; $} $} $while $(@expr1073744389 $false $) ;
423:
424:
425: $do ${ $if $(@expr1073744390 $prepareTest $(@expr1073744391 "noCrash1" $) $) ${ $setVerbose $(@expr1073744392 $false $) $; noCrash1 $(@expr1073744393 $) $; $} $} $while $(@expr1073744394 $false $) ;
426: $do ${ $if $(@expr1073744395 $prepareTest $(@expr1073744396 "noCrash2" $) $) ${ $setVerbose $(@expr1073744397 $false $) $; noCrash2 $(@expr1073744398 $) $; $} $} $while $(@expr1073744399 $false $) ;
427: $do ${ $if $(@expr1073744400 $prepareTest $(@expr1073744401 "noCrash3" $) $) ${ $setVerbose $(@expr1073744402 $false $) $; noCrash3 $(@expr1073744403 $) $; $} $} $while $(@expr1073744404 $false $) ;
428: $do ${ $if $(@expr1073744405 $prepareTest $(@expr1073744406 "noCrash4" $) $) ${ $setVerbose $(@expr1073744407 $false $) $; noCrash4 $(@expr1073744408 $) $; $} $} $while $(@expr1073744409 $false $) ;
429:
430:
431: $do ${ $if $(@expr1073744410 $prepareTest $(@expr1073744411 "checkConfiguration" $) $) ${ $setVerbose $(@expr1073744412 $false $) $; checkConfiguration $(@expr1073744413 $) $; $} $} $while $(@expr1073744414 $false $) ;
432:
433: $do ${ $if $(@expr1073744415 $prepareTest $(@expr1073744416 "unknownType" $) $) ${ $setVerbose $(@expr1073744417 $false $) $; unknownType $(@expr1073744418 $) $; $} $} $while $(@expr1073744419 $false $) ;
434:
435: $do ${ $if $(@expr1073744420 $prepareTest $(@expr1073744421 "unknownMacroBeforeReturn" $) $) ${ $setVerbose $(@expr1073744422 $false $) $; unknownMacroBeforeReturn $(@expr1073744423 $) $; $} $} $while $(@expr1073744424 $false $) ;
436:
437: $do ${ $if $(@expr1073744425 $prepareTest $(@expr1073744426 "cppcast" $) $) ${ $setVerbose $(@expr1073744427 $false $) $; cppcast $(@expr1073744428 $) $; $} $} $while $(@expr1073744429 $false $) ;
438:
439: $do ${ $if $(@expr1073744430 $prepareTest $(@expr1073744431 "checkHeader1" $) $) ${ $setVerbose $(@expr1073744432 $false $) $; checkHeader1 $(@expr1073744433 $) $; $} $} $while $(@expr1073744434 $false $) ;
440:
441: $do ${ $if $(@expr1073744435 $prepareTest $(@expr1073744436 "removeExtraTemplateKeywords" $) $) ${ $setVerbose $(@expr1073744437 $false $) $; removeExtraTemplateKeywords $(@expr1073744438 $) $; $} $} $while $(@expr1073744439 $false $) ;
442:
443: $do ${ $if $(@expr1073744440 $prepareTest $(@expr1073744441 "removeAlignas1" $) $) ${ $setVerbose $(@expr1073744442 $false $) $; removeAlignas1 $(@expr1073744443 $) $; $} $} $while $(@expr1073744444 $false $) ;
444: $do ${ $if $(@expr1073744445 $prepareTest $(@expr1073744446 "removeAlignas2" $) $) ${ $setVerbose $(@expr1073744447 $false $) $; removeAlignas2 $(@expr1073744448 $) $; $} $} $while $(@expr1073744449 $false $) ;
445:
446: $do ${ $if $(@expr1073744450 $prepareTest $(@expr1073744451 "simplifyCoroutines" $) $) ${ $setVerbose $(@expr1073744452 $false $) $; simplifyCoroutines $(@expr1073744453 $) $; $} $} $while $(@expr1073744454 $false $) ;
447:
448: $do ${ $if $(@expr1073744455 $prepareTest $(@expr1073744456 "simplifySpaceshipOperator" $) $) ${ $setVerbose $(@expr1073744457 $false $) $; simplifySpaceshipOperator $(@expr1073744458 $) $; $} $} $while $(@expr1073744459 $false $) ;
449:
450: $do ${ $if $(@expr1073744460 $prepareTest $(@expr1073744461 "simplifyIfSwitchForInit1" $) $) ${ $setVerbose $(@expr1073744462 $false $) $; simplifyIfSwitchForInit1 $(@expr1073744463 $) $; $} $} $while $(@expr1073744464 $false $) ;
451: $do ${ $if $(@expr1073744465 $prepareTest $(@expr1073744466 "simplifyIfSwitchForInit2" $) $) ${ $setVerbose $(@expr1073744467 $false $) $; simplifyIfSwitchForInit2 $(@expr1073744468 $) $; $} $} $while $(@expr1073744469 $false $) ;
452: $do ${ $if $(@expr1073744470 $prepareTest $(@expr1073744471 "simplifyIfSwitchForInit3" $) $) ${ $setVerbose $(@expr1073744472 $false $) $; simplifyIfSwitchForInit3 $(@expr1073744473 $) $; $} $} $while $(@expr1073744474 $false $) ;
453: $do ${ $if $(@expr1073744475 $prepareTest $(@expr1073744476 "simplifyIfSwitchForInit4" $) $) ${ $setVerbose $(@expr1073744477 $false $) $; simplifyIfSwitchForInit4 $(@expr1073744478 $) $; $} $} $while $(@expr1073744479 $false $) ;
454: $do ${ $if $(@expr1073744480 $prepareTest $(@expr1073744481 "simplifyIfSwitchForInit5" $) $) ${ $setVerbose $(@expr1073744482 $false $) $; simplifyIfSwitchForInit5 $(@expr1073744483 $) $; $} $} $while $(@expr1073744484 $false $) ;
455:
456: $do ${ $if $(@expr1073744485 $prepareTest $(@expr1073744486 "cpp20_default_bitfield_initializer" $) $) ${ $setVerbose $(@expr1073744487 $false $) $; cpp20_default_bitfield_initializer $(@expr1073744488 $) $; $} $} $while $(@expr1073744489 $false $) ;
457: }
458:
459:
460: std :: string tokenizeAndStringify_ ( const char * file@var111 , int linenr@var112 , const char code@var113 [ ] , bool expand@var114 = true , Settings :: PlatformType platform@var115 = Settings :: Native , const char * filename@var116 = "test.cpp" , bool cpp11@var117 = true ) {
461: errout@var100 .@expr2668 str (@expr2669 "" ) ;
462:
463: settings1@var103 .@expr1073744494 debugwarnings@var118 =@expr1073744495 true ;
464: settings1@var103 .@expr1073744496 platform (@expr1073744497 platform@var115 ) ;
465: settings1@var103 .@expr1073744498 standards@var119 .@expr1073744499 cpp@var120 =@expr1073744500 cpp11@var117 ?@expr1073744501 Standards ::@expr1073744502 CPP11 :@expr1073744503 Standards ::@expr1073744504 CPP03@expr1073744490 ;
466:
467:
468: Tokenizer tokenizer@var121 (@expr1073744505 &@expr1073744506 settings1@var103 , this@expr1073744507 ) ;
469: std ::@expr1073744508 istringstream istr@var122 (@expr1073744509 code@var113 ) ;
470: $assert_ $(@expr1073744510 file@var111 $, linenr@var112 $, $(@expr1073744511 tokenizer@var121 .@expr1073744512 tokenize (@expr1073744513 istr@var122 , filename@var116 ) $) $) ;
471:
472:
473: const std ::@expr1073744514 string debugwarnings@var123 =@expr1073744515 errout@var100 .@expr2668 str (@expr1073744517 ) ;
474: errout@var100 .@expr2668 str (@expr2669 "" ) ;
475: std ::@expr1073744520 istringstream istr2@var124 (@expr1073744521 debugwarnings@var123 ) ;
476: std ::@expr1073744522 string line@var125 ;
477: while (@expr1073744523 std ::@expr1073744524 getline (@expr1073744525 istr2@var124 , line@var125 ) ) {
478: if (@expr1073744526 line@var125 .@expr1073744527 find (@expr1073744528 "valueflow.cpp" ) ==@expr1073744529 std ::@expr1073744530 string ::@expr1073744531 npos@expr1073744491 ) {
479: errout@var100 <<@expr1073744532 line@var125 <<@expr1073744533 "\n" ; }
480: }
481:
482: if (@expr1073744534 tokenizer@var121 .@expr2711 tokens (@expr2712 ) ) {
483: return tokenizer@var121 .@expr2711 tokens (@expr2712 ) .@expr1073744539 stringifyList (@expr1073744540 false , expand@var114 , false , true , false , nullptr , nullptr ) ; }
484: else {
485: return "" ; }
486: }
487:
488:
489: std :: string tokenizeAndStringifyWindows_ ( const char * file@var126 , int linenr@var127 , const char code@var128 [ ] , bool expand@var129 = true , Settings :: PlatformType platform@var130 = Settings :: Native , const char * filename@var131 = "test.cpp" , bool cpp11@var132 = true ) {
490: errout@var100 .@expr2719 str (@expr2720 "" ) ;
491:
492: settings_windows@var105 .@expr1073744545 debugwarnings@var133 =@expr1073744546 true ;
493: settings_windows@var105 .@expr1073744547 platform (@expr1073744548 platform@var130 ) ;
494: settings_windows@var105 .@expr1073744549 standards@var134 .@expr1073744550 cpp@var135 =@expr1073744551 cpp11@var132 ?@expr1073744552 Standards ::@expr1073744553 CPP11 :@expr1073744554 Standards ::@expr1073744555 CPP03@expr1073744541 ;
495:
496:
497: Tokenizer tokenizer@var136 (@expr1073744556 &@expr1073744557 settings_windows@var105 , this@expr1073744558 ) ;
498: std ::@expr1073744559 istringstream istr@var137 (@expr1073744560 code@var128 ) ;
499: $assert_ $(@expr1073744561 file@var126 $, linenr@var127 $, $(@expr1073744562 tokenizer@var136 .@expr1073744563 tokenize (@expr1073744564 istr@var137 , filename@var131 ) $) $) ;
500:
501:
502: const std ::@expr1073744565 string debugwarnings@var138 =@expr1073744566 errout@var100 .@expr2719 str (@expr1073744568 ) ;
503: errout@var100 .@expr2719 str (@expr2720 "" ) ;
504: std ::@expr1073744571 istringstream istr2@var139 (@expr1073744572 debugwarnings@var138 ) ;
505: std ::@expr1073744573 string line@var140 ;
506: while (@expr1073744574 std ::@expr1073744575 getline (@expr1073744576 istr2@var139 , line@var140 ) ) {
507: if (@expr1073744577 line@var140 .@expr1073744578 find (@expr1073744579 "valueflow.cpp" ) ==@expr1073744580 std ::@expr1073744581 string ::@expr1073744582 npos@expr1073744542 ) {
508: errout@var100 <<@expr1073744583 line@var140 <<@expr1073744584 "\n" ; }
509: }
510:
511: if (@expr1073744585 tokenizer@var136 .@expr2762 tokens (@expr2763 ) ) {
512: return tokenizer@var136 .@expr2762 tokens (@expr2763 ) .@expr1073744590 stringifyList (@expr1073744591 false , expand@var129 , false , true , false , nullptr , nullptr ) ; }
513: else {
514: return "" ; }
515: }
516:
517: std :: string tokenizeAndStringify_ ( const char * file@var141 , int line@var142 , const char code@var143 [ ] , const Settings & settings@var144 , const char filename@var145 [ 9 ] = "test.cpp" ) {
518: errout@var100 .@expr1073744592 str (@expr1073744593 "" ) ;
519:
520:
521: Tokenizer tokenizer@var146 (@expr1073744594 &@expr1073744595 settings@var144 , this@expr1073744596 ) ;
522: std ::@expr1073744597 istringstream istr@var147 (@expr1073744598 code@var143 ) ;
523: $assert_ $(@expr1073744599 file@var141 $, line@var142 $, $(@expr1073744600 tokenizer@var146 .@expr1073744601 tokenize (@expr1073744602 istr@var147 , filename@var145 ) $) $) ;
524: if (@expr1073744603 !@expr1073744604 tokenizer@var146 .@expr2781 tokens (@expr2782 ) ) {
525: return "" ; }
526: return tokenizer@var146 .@expr2781 tokens (@expr2782 ) .@expr1073744609 stringifyList (@expr1073744610 false , true , false , true , false , nullptr , nullptr ) ;
527: }
528:
529:
530: std :: string tokenizeDebugListing_ ( const char * file@var148 , int line@var149 , const char code@var150 [ ] , const char filename@var151 [ 9 ] = "test.cpp" ) {
531: errout@var100 .@expr1073744613 str (@expr1073744614 "" ) ;
532:
533: settings2@var104 .@expr2791 standards@var152 .@expr1073744616 c@var153 =@expr1073744617 Standards ::@expr1073744618 C89@expr1073744611 ;
534: settings2@var104 .@expr2791 standards@var152 .@expr1073744620 cpp@var154 =@expr1073744621 Standards ::@expr1073744622 CPP03@expr1073744612 ;
535:
536: Tokenizer tokenizer@var155 (@expr1073744623 &@expr1073744624 settings2@var104 , this@expr1073744625 ) ;
537: std ::@expr1073744626 istringstream istr@var156 (@expr1073744627 code@var150 ) ;
538: $assert_ $(@expr1073744628 file@var148 $, line@var149 $, $(@expr1073744629 tokenizer@var155 .@expr1073744630 tokenize (@expr1073744631 istr@var156 , filename@var151 ) $) $) ;
539:
540:
541: return tokenizer@var155 .@expr1073744632 tokens (@expr1073744633 ) .@expr1073744634 stringifyList (@expr1073744635 true , true , true , true , false ) ;
542: }
543:
544: void tokenize1 ( ) {
545: const char code@var157 [@expr1073744636 42 ] =@expr1073744637 "void f ( )\n{ if ( p . y ( ) > yof ) { } }"
546: ;
547: $if $(@expr1073744638 $!@expr1073744639 $assertEquals $(@expr1073744640 "cppcheck-2.8/test/testtokenize.cpp" $, 547 $, code@var157 $, $tokenizeAndStringify_ $(@expr1073744641 "cppcheck-2.8/test/testtokenize.cpp" $, 547 $, code@var157 $) $) $) { $return ; }
548: }
549:
550: void tokenize2 ( ) {
551: const char code@var158 [@expr1073744642 23 ] =@expr1073744643 "{ sizeof a, sizeof b }" ;
552: $if $(@expr1073744644 $!@expr1073744645 $assertEquals $(@expr1073744646 "cppcheck-2.8/test/testtokenize.cpp" $, 552 $, "{ sizeof ( a ) , sizeof ( b ) }" $, $tokenizeAndStringify_ $(@expr1073744647 "cppcheck-2.8/test/testtokenize.cpp" $, 552 $, code@var158 $) $) $) { $return ; }
553: }
554:
555: void tokenize4 ( ) {
556: const char code@var159 [@expr1073744648 39 ] =@expr1073744649 "class foo\n{\npublic:\n    const int i;\n}"
557:
558:
559:
560: ;
561: $if $(@expr1073744650 $!@expr1073744651 $assertEquals $(@expr1073744652 "cppcheck-2.8/test/testtokenize.cpp" $, 561 $, "class foo\n{\npublic:\nconst int i ;\n}" $, $tokenizeAndStringify_ $(@expr1073744653 "cppcheck-2.8/test/testtokenize.cpp" $, 561 $, code@var159 $) $) $) { $return
562:
563:
564:
565: ; }
566: $if $(@expr1073744654 $!@expr1073744655 $assertEquals $(@expr1073744656 "cppcheck-2.8/test/testtokenize.cpp" $, 566 $, "" $, errout@var100 .@expr1073744657 str (@expr1073744658 ) $) $) { $return ; }
567: }
568:
569: void tokenize5 ( ) {
570:
571: $if $(@expr1073744659 $!@expr1073744660 $assertEquals $(@expr1073744661 "cppcheck-2.8/test/testtokenize.cpp" $, 571 $, "; + 1E3 ;" $, $tokenizeAndStringify_ $(@expr1073744662 "cppcheck-2.8/test/testtokenize.cpp" $, 571 $, "; +1E3 ;" $) $) $) { $return ; }
572: $if $(@expr1073744663 $!@expr1073744664 $assertEquals $(@expr1073744665 "cppcheck-2.8/test/testtokenize.cpp" $, 572 $, "; 1E-2 ;" $, $tokenizeAndStringify_ $(@expr1073744666 "cppcheck-2.8/test/testtokenize.cpp" $, 572 $, "; 1E-2 ;" $) $) $) { $return ; }
573: }
574:
575: void tokenize7 ( ) {
576: const char code@var160 [@expr1073744667 46 ] =@expr1073744668 "void f() {\n    int x1 = 1;\n    int x2(x1);\n}\n"
577:
578:
579: ;
580: $if $(@expr1073744669 $!@expr1073744670 $assertEquals $(@expr1073744671 "cppcheck-2.8/test/testtokenize.cpp" $, 580 $, "void f ( ) {\nint x1 ; x1 = 1 ;\nint x2 ; x2 = x1 ;\n}" $, $tokenizeAndStringify_ $(@expr1073744672 "cppcheck-2.8/test/testtokenize.cpp" $, 580 $, code@var160 $) $) $) { $return
581: ; }
582: }
583:
584: void tokenize8 ( ) {
585: const char code@var161 [@expr1073744673 47 ] =@expr1073744674 "void f() {\n    int x1(g());\n    int x2(x1);\n}\n"
586:
587:
588: ;
589: $if $(@expr1073744675 $!@expr1073744676 $assertEquals $(@expr1073744677 "cppcheck-2.8/test/testtokenize.cpp" $, 589 $, "1: void f ( ) {\n2: int x1@1 ; x1@1 = g ( ) ;\n3: int x2@2 ; x2@2 = x1@1 ;\n4: }\n" $, $tokenizeDebugListing_ $(@expr1073744678 "cppcheck-2.8/test/testtokenize.cpp" $, 589 $, code@var161 $) $) $) { $return
590:
591:
592:
593: ; }
594: }
595:
596: void tokenize9 ( ) {
597: const char code@var162 [@expr1073744679 78 ] =@expr1073744680 "typedef void (*fp)();\ntypedef fp (*fpp)();\nvoid f() {\n    fpp x = (fpp)f();\n}"
598:
599:
600:
601: ;
602: $tokenizeAndStringify_ $(@expr1073744681 "cppcheck-2.8/test/testtokenize.cpp" $, 602 $, code@var162 $) ;
603: $if $(@expr1073744682 $!@expr1073744683 $assertEquals $(@expr1073744684 "cppcheck-2.8/test/testtokenize.cpp" $, 603 $, "" $, errout@var100 .@expr1073744685 str (@expr1073744686 ) $) $) { $return ; }
604: }
605:
606: void tokenize11 ( ) {
607: $if $(@expr1073744687 $!@expr1073744688 $assertEquals $(@expr1073744689 "cppcheck-2.8/test/testtokenize.cpp" $, 607 $, "X * sizeof ( Y ( ) ) ;" $, $tokenizeAndStringify_ $(@expr1073744690 "cppcheck-2.8/test/testtokenize.cpp" $, 607 $, "X * sizeof(Y());" $) $) $) { $return ; }
608: }
609:
610:
611: void tokenize13 ( ) {
612: const char code@var163 [@expr1073744691 50 ] =@expr1073744692 "@implementation\n-(Foo *)foo: (Bar *)bar\n{ }\n@end\n"
613:
614:
615: ;
616: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744693 "cppcheck-2.8/test/testtokenize.cpp" $, 616 $, code@var163 $) $; $assertThrowFail $(@expr1073744694 "cppcheck-2.8/test/testtokenize.cpp" $, 616 $) $; $} $catch $(@expr1073744695 $const InternalError $&@expr1073744696 $) ${ $} $catch $(@expr1073744697 $... $) ${ $assertThrowFail $(@expr1073744698 "cppcheck-2.8/test/testtokenize.cpp" $, 616 $) $; $} $} $while $(@expr1073744699 $false $) ;
617: }
618:
619:
620: void tokenize14 ( ) {
621: $if $(@expr1073744700 $!@expr1073744701 $assertEquals $(@expr1073744702 "cppcheck-2.8/test/testtokenize.cpp" $, 621 $, "; 0x10 ;" $, $tokenizeAndStringify_ $(@expr1073744703 "cppcheck-2.8/test/testtokenize.cpp" $, 621 $, ";0x10;" $) $) $) { $return ; }
622: $if $(@expr1073744704 $!@expr1073744705 $assertEquals $(@expr1073744706 "cppcheck-2.8/test/testtokenize.cpp" $, 622 $, "; 0X10 ;" $, $tokenizeAndStringify_ $(@expr1073744707 "cppcheck-2.8/test/testtokenize.cpp" $, 622 $, ";0X10;" $) $) $) { $return ; }
623: $if $(@expr1073744708 $!@expr1073744709 $assertEquals $(@expr1073744710 "cppcheck-2.8/test/testtokenize.cpp" $, 623 $, "; 0444 ;" $, $tokenizeAndStringify_ $(@expr1073744711 "cppcheck-2.8/test/testtokenize.cpp" $, 623 $, ";0444;" $) $) $) { $return ; }
624: }
625:
626:
627: void tokenizeHexWithSuffix ( ) {
628: $if $(@expr1073744712 $!@expr1073744713 $assertEquals $(@expr1073744714 "cppcheck-2.8/test/testtokenize.cpp" $, 628 $, "; 0xFFFFFF ;" $, $tokenizeAndStringify_ $(@expr1073744715 "cppcheck-2.8/test/testtokenize.cpp" $, 628 $, ";0xFFFFFF;" $) $) $) { $return ; }
629: $if $(@expr1073744716 $!@expr1073744717 $assertEquals $(@expr1073744718 "cppcheck-2.8/test/testtokenize.cpp" $, 629 $, "; 0xFFFFFFu ;" $, $tokenizeAndStringify_ $(@expr1073744719 "cppcheck-2.8/test/testtokenize.cpp" $, 629 $, ";0xFFFFFFu;" $) $) $) { $return ; }
630: $if $(@expr1073744720 $!@expr1073744721 $assertEquals $(@expr1073744722 "cppcheck-2.8/test/testtokenize.cpp" $, 630 $, "; 0xFFFFFFul ;" $, $tokenizeAndStringify_ $(@expr1073744723 "cppcheck-2.8/test/testtokenize.cpp" $, 630 $, ";0xFFFFFFul;" $) $) $) { $return ; }
631:
632:
633: $if $(@expr1073744724 $!@expr1073744725 $assertEquals $(@expr1073744726 "cppcheck-2.8/test/testtokenize.cpp" $, 633 $, "; 0xFFFFFFFF ;" $, $tokenizeAndStringify_ $(@expr1073744727 "cppcheck-2.8/test/testtokenize.cpp" $, 633 $, ";0xFFFFFFFF;" $) $) $) { $return ; }
634: $if $(@expr1073744728 $!@expr1073744729 $assertEquals $(@expr1073744730 "cppcheck-2.8/test/testtokenize.cpp" $, 634 $, "; 0xFFFFFFFFu ;" $, $tokenizeAndStringify_ $(@expr1073744731 "cppcheck-2.8/test/testtokenize.cpp" $, 634 $, ";0xFFFFFFFFu;" $) $) $) { $return ; }
635: $if $(@expr1073744732 $!@expr1073744733 $assertEquals $(@expr1073744734 "cppcheck-2.8/test/testtokenize.cpp" $, 635 $, "; 0xFFFFFFFFul ;" $, $tokenizeAndStringify_ $(@expr1073744735 "cppcheck-2.8/test/testtokenize.cpp" $, 635 $, ";0xFFFFFFFFul;" $) $) $) { $return ; }
636: }
637:
638:
639: void tokenize15 ( ) {
640: $if $(@expr1073744736 $!@expr1073744737 $assertEquals $(@expr1073744738 "cppcheck-2.8/test/testtokenize.cpp" $, 640 $, "0.125 ;" $, $tokenizeAndStringify_ $(@expr1073744739 "cppcheck-2.8/test/testtokenize.cpp" $, 640 $, ".125;" $) $) $) { $return ; }
641: $if $(@expr1073744740 $!@expr1073744741 $assertEquals $(@expr1073744742 "cppcheck-2.8/test/testtokenize.cpp" $, 641 $, "005.125 ;" $, $tokenizeAndStringify_ $(@expr1073744743 "cppcheck-2.8/test/testtokenize.cpp" $, 641 $, "005.125;" $) $) $) { $return ; }
642: }
643:
644: void tokenize17 ( ) {
645: $if $(@expr1073744744 $!@expr1073744745 $assertEquals $(@expr1073744746 "cppcheck-2.8/test/testtokenize.cpp" $, 645 $, "class B : private :: A { } ;" $, $tokenizeAndStringify_ $(@expr1073744747 "cppcheck-2.8/test/testtokenize.cpp" $, 645 $, "class B : private ::A { };" $) $) $) { $return ; }
646: }
647:
648: void tokenize18 ( ) {
649: $if $(@expr1073744748 $!@expr1073744749 $assertEquals $(@expr1073744750 "cppcheck-2.8/test/testtokenize.cpp" $, 649 $, "( X && Y ) ;" $, $tokenizeAndStringify_ $(@expr1073744751 "cppcheck-2.8/test/testtokenize.cpp" $, 649 $, "(X&&Y);" $) $) $) { $return ; }
650: }
651:
652: void tokenize19 ( ) {
653:
654: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744752 "cppcheck-2.8/test/testtokenize.cpp" $, 654 $, "x < () <" $) $; $assertThrowFail $(@expr1073744753 "cppcheck-2.8/test/testtokenize.cpp" $, 654 $) $; $} $catch $(@expr1073744754 $const InternalError $&@expr1073744755 $) ${ $} $catch $(@expr1073744756 $... $) ${ $assertThrowFail $(@expr1073744757 "cppcheck-2.8/test/testtokenize.cpp" $, 654 $) $; $} $} $while $(@expr1073744758 $false $) ;
655:
656:
657: $if $(@expr1073744759 $!@expr1073744760 $assertEquals $(@expr1073744761 "cppcheck-2.8/test/testtokenize.cpp" $, 657 $, "void a ( Fred * f ) { for ( ; n < f . x ( ) ; ) { } }" $, $tokenizeAndStringify_ $(@expr1073744762 "cppcheck-2.8/test/testtokenize.cpp" $, 657 $, "void a(Fred* f) MACRO { for (;n < f->x();) {} }" $) $) $) { $return
658: ; }
659:
660:
661: $if $(@expr1073744763 $!@expr1073744764 $assertEquals $(@expr1073744765 "cppcheck-2.8/test/testtokenize.cpp" $, 661 $, "C :: C ( )\n: v { }\n{\nfor ( int dim = 0 ; dim < v . size ( ) ; ++ dim ) {\nv [ dim ] . f ( ) ;\n}\n} ;" $, $tokenizeAndStringify_ $(@expr1073744766 "cppcheck-2.8/test/testtokenize.cpp" $, 661 $, "C::C()\n:v{}\n{\n    for (int dim = 0; dim < v.size(); ++dim) {\n        v[dim]->f();\n    }\n};" $) $) $) { $return
662:
|
673:
674: ; }
675: }
676:
677: void tokenize21 ( ) {
678: $if $(@expr1073744767 $!@expr1073744768 $assertEquals $(@expr1073744769 "cppcheck-2.8/test/testtokenize.cpp" $, 678 $, "0x0E - 7 ;" $, $tokenizeAndStringify_ $(@expr1073744770 "cppcheck-2.8/test/testtokenize.cpp" $, 678 $, "0x0E-7;" $) $) $) { $return ; }
679: }
680:
681: void tokenize22 ( ) {
682: $if $(@expr1073744771 $!@expr1073744772 $assertEquals $(@expr1073744773 "cppcheck-2.8/test/testtokenize.cpp" $, 682 $, "a$b" $, $tokenizeAndStringify_ $(@expr1073744774 "cppcheck-2.8/test/testtokenize.cpp" $, 682 $, "a$b" $) $) $) { $return ; }
683: $if $(@expr1073744775 $!@expr1073744776 $assertEquals $(@expr1073744777 "cppcheck-2.8/test/testtokenize.cpp" $, 683 $, "a $b\nc" $, $tokenizeAndStringify_ $(@expr1073744778 "cppcheck-2.8/test/testtokenize.cpp" $, 683 $, "a $b\nc" $) $) $) { $return ; }
684: $if $(@expr1073744779 $!@expr1073744780 $assertEquals $(@expr1073744781 "cppcheck-2.8/test/testtokenize.cpp" $, 684 $, "a = $0 ;" $, $tokenizeAndStringify_ $(@expr1073744782 "cppcheck-2.8/test/testtokenize.cpp" $, 684 $, "a = $0;" $) $) $) { $return ; }
685: $if $(@expr1073744783 $!@expr1073744784 $assertEquals $(@expr1073744785 "cppcheck-2.8/test/testtokenize.cpp" $, 685 $, "a$ ++ ;" $, $tokenizeAndStringify_ $(@expr1073744786 "cppcheck-2.8/test/testtokenize.cpp" $, 685 $, "a$++;" $) $) $) { $return ; }
686: $if $(@expr1073744787 $!@expr1073744788 $assertEquals $(@expr1073744789 "cppcheck-2.8/test/testtokenize.cpp" $, 686 $, "$if ( ! p )" $, $tokenizeAndStringify_ $(@expr1073744790 "cppcheck-2.8/test/testtokenize.cpp" $, 686 $, "$if(!p)" $) $) $) { $return ; }
687: }
688:
689:
690: void tokenize25 ( ) {
691: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744791 "cppcheck-2.8/test/testtokenize.cpp" $, 691 $, "f ( struct { int typedef T x ; } ) { }" $) $; $assertThrowFail $(@expr1073744792 "cppcheck-2.8/test/testtokenize.cpp" $, 691 $) $; $} $catch $(@expr1073744793 $const InternalError $&@expr1073744794 $) ${ $} $catch $(@expr1073744795 $... $) ${ $assertThrowFail $(@expr1073744796 "cppcheck-2.8/test/testtokenize.cpp" $, 691 $) $; $} $} $while $(@expr1073744797 $false $) ;
692: }
693:
694:
695: void tokenize26 ( ) {
696: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744798 "cppcheck-2.8/test/testtokenize.cpp" $, 696 $, "class x { protected : template < int y = } ;" $) $; $assertThrowFail $(@expr1073744799 "cppcheck-2.8/test/testtokenize.cpp" $, 696 $) $; $} $catch $(@expr1073744800 $const InternalError $&@expr1073744801 $) ${ $} $catch $(@expr1073744802 $... $) ${ $assertThrowFail $(@expr1073744803 "cppcheck-2.8/test/testtokenize.cpp" $, 696 $) $; $} $} $while $(@expr1073744804 $false $) ;
697: }
698:
699: void tokenize27 ( ) {
700:
701: $tokenizeAndStringify_ $(@expr1073744805 "cppcheck-2.8/test/testtokenize.cpp" $, 701 $, "struct except_spec_d_good : except_spec_a, except_spec_b {\n~except_spec_d_good();\n};\nstruct S { S(); };\nS::S() __attribute((pure)) = default;" $)
702:
|
705:
706: ;
707:
708:
709: $tokenizeAndStringify_ $(@expr1073744806 "cppcheck-2.8/test/testtokenize.cpp" $, 709 $, "static unsigned int re_string_context_at (const re_string_t *input, int idx, int eflags) internal_function __attribute__ ((pure));" $) ;
710: }
711:
712:
713: void tokenize31 ( ) {
714: $if $(@expr1073744807 $!@expr1073744808 $assertEquals $(@expr1073744809 "cppcheck-2.8/test/testtokenize.cpp" $, 714 $, "struct TTestClass { TTestClass ( ) { }\nvoid SetFunction ( Other ( * m_f ) ( ) ) { }\n} ;" $, $tokenizeAndStringify_ $(@expr1073744810 "cppcheck-2.8/test/testtokenize.cpp" $, 714 $, "struct TTestClass { TTestClass() { }\n    void SetFunction(Other(*m_f)()) { }\n};" $) $) $) { $return
715:
|
718:
719: ; }
720:
721: $if $(@expr1073744811 $!@expr1073744812 $assertEquals $(@expr1073744813 "cppcheck-2.8/test/testtokenize.cpp" $, 721 $, "struct TTestClass { TTestClass ( ) { }\nvoid SetFunction ( Other ( * m_f ) ( ) ) ;\n} ;" $, $tokenizeAndStringify_ $(@expr1073744814 "cppcheck-2.8/test/testtokenize.cpp" $, 721 $, "struct TTestClass { TTestClass() { }\n    void SetFunction(Other(*m_f)());\n};" $) $) $) { $return
722:
|
725:
726: ; }
727: }
728:
729:
730: void tokenize32 ( ) {
731:
732: const char * code@var164 ; code@var164 =@expr1073744815 "void f ( ) { int max_x ; max_x = -10000 << 16 ; }" ;
733: $if $(@expr1073744816 $!@expr1073744817 $assertEquals $(@expr1073744818 "cppcheck-2.8/test/testtokenize.cpp" $, 733 $, code@var164 $, $tokenizeAndStringify_ $(@expr1073744819 "cppcheck-2.8/test/testtokenize.cpp" $, 733 $, code@var164 $) $) $) { $return ; }
734: }
735:
736:
737: void tokenize33 ( ) {
738: const char * code@var165 ; code@var165 =@expr1073744820 "template<typename T, typename A = Alloc<T>> struct vector {};\nvoid z() {\n    vector<int> VI;\n}\n"
739:
740:
741: ;
742: $tokenizeAndStringify_ $(@expr1073744821 "cppcheck-2.8/test/testtokenize.cpp" $, 742 $, code@var165 $) ;
743: }
744:
745: void tokenize34 ( ) {
746: {
747: const char code@var166 [@expr1073744822 126 ] =@expr1073744823 "struct Container {\n  Container();\n  int* mElements;\n};\nContainer::Container() : mElements(nullptr) {}\nContainer intContainer;"
748:
|
751:
752: ;
753: const char exp@var167 [@expr1073744824 162 ] =@expr1073744825 "1: struct Container {\n2: Container ( ) ;\n3: int * mElements@1 ;\n4: } ;\n5: Container :: Container ( ) : mElements@1 ( nullptr ) { }\n6: Container intContainer@2 ;\n"
754:
|
757:
758: ;
759: $if $(@expr1073744826 $!@expr1073744827 $assertEquals $(@expr1073744828 "cppcheck-2.8/test/testtokenize.cpp" $, 759 $, exp@var167 $, $tokenizeDebugListing_ $(@expr1073744829 "cppcheck-2.8/test/testtokenize.cpp" $, 759 $, code@var166 $) $) $) { $return ; }
760: }
761: {
762: const char code@var168 [@expr1073744830 171 ] =@expr1073744831 "template<class T> struct Container {\n  Container();\n  int* mElements;\n};\ntemplate <class T> Container<T>::Container() : mElements(nullptr) {}\nContainer<int> intContainer;"
763:
|
766:
767: ;
768: const char exp@var169 [@expr1073744832 222 ] =@expr1073744833 "1: struct Container<int> ;\n2:\n|\n5:\n6: Container<int> intContainer@1 ;\n1: struct Container<int> {\n2: Container<int> ( ) ;\n3: int * mElements@2 ;\n4: } ;\n5: Container<int> :: Container<int> ( ) : mElements@2 ( nullptr ) { }\n"
769:
|
776:
777: ;
778: $if $(@expr1073744834 $!@expr1073744835 $assertEquals $(@expr1073744836 "cppcheck-2.8/test/testtokenize.cpp" $, 778 $, exp@var169 $, $tokenizeDebugListing_ $(@expr1073744837 "cppcheck-2.8/test/testtokenize.cpp" $, 778 $, code@var168 $) $) $) { $return ; }
779: }
780: }
781:
782: void tokenize35 ( ) {
783: $tokenizeAndStringify_ $(@expr1073744838 "cppcheck-2.8/test/testtokenize.cpp" $, 783 $, "typedef int CRCWord; template<typename T> ::CRCWord const Compute(T const t) { return 0; }" $)
784: ;
785: }
786:
787: void tokenize36 ( ) {
788: const char code@var170 [@expr1073744839 71 ] =@expr1073744840 "int foo ( int i ) { return i ? * new int { 5 } : int { i ? 0 : 1 } ; }" ;
789: $if $(@expr1073744841 $!@expr1073744842 $assertEquals $(@expr1073744843 "cppcheck-2.8/test/testtokenize.cpp" $, 789 $, code@var170 $, $tokenizeAndStringify_ $(@expr1073744844 "cppcheck-2.8/test/testtokenize.cpp" $, 789 $, code@var170 $) $) $) { $return ; }
790: }
791:
792: void tokenize37 ( ) {
793: const char codeC@var171 [@expr1073744845 111 ] =@expr1073744846 "class name { public: static void init ( ) {} } ; typedef class name N; void foo ( ) { return N :: init ( ) ; }"
794:
795: ;
796: const char expC@var172 [@expr1073744847 93 ] =@expr1073744848 "class name { public: static void init ( ) { } } ; void foo ( ) { return name :: init ( ) ; }"
797: ;
798: $if $(@expr1073744849 $!@expr1073744850 $assertEquals $(@expr1073744851 "cppcheck-2.8/test/testtokenize.cpp" $, 798 $, expC@var172 $, $tokenizeAndStringify_ $(@expr1073744852 "cppcheck-2.8/test/testtokenize.cpp" $, 798 $, codeC@var171 $) $) $) { $return ; }
799: const char codeS@var173 [@expr1073744853 112 ] =@expr1073744854 "class name { public: static void init ( ) {} } ; typedef struct name N; void foo ( ) { return N :: init ( ) ; }"
800:
801: ;
802: const char expS@var174 [@expr1073744855 93 ] =@expr1073744856 "class name { public: static void init ( ) { } } ; void foo ( ) { return name :: init ( ) ; }"
803: ;
804: $if $(@expr1073744857 $!@expr1073744858 $assertEquals $(@expr1073744859 "cppcheck-2.8/test/testtokenize.cpp" $, 804 $, expS@var174 $, $tokenizeAndStringify_ $(@expr1073744860 "cppcheck-2.8/test/testtokenize.cpp" $, 804 $, codeS@var173 $) $) $) { $return ; }
805: }
806:
807: void tokenize38 ( ) {
808: const char code@var175 [@expr1073744861 56 ] =@expr1073744862 "using Binary = std::vector<char>; enum Type { Binary };" ;
809: const char exp@var176 [@expr1073744863 23 ] =@expr1073744864 "enum Type { Binary } ;" ;
810: $if $(@expr1073744865 $!@expr1073744866 $assertEquals $(@expr1073744867 "cppcheck-2.8/test/testtokenize.cpp" $, 810 $, exp@var176 $, $tokenizeAndStringify_ $(@expr1073744868 "cppcheck-2.8/test/testtokenize.cpp" $, 810 $, code@var175 $) $) $) { $return ; }
811: }
812:
813: void tokenize39 ( ) {
814: const char code@var177 [@expr1073744869 199 ] =@expr1073744870 "template <typename T> class Foo;template <typename T> bool operator!=(const Foo<T> &, const Foo<T> &);template <typename T> class Foo { friend bool operator!= <> (const Foo<T> &, const Foo<T> &); };"
815:
816: ;
817: const char exp@var178 [@expr1073744871 231 ] =@expr1073744872 "template < typename T > class Foo ; template < typename T > bool operator!= ( const Foo < T > & , const Foo < T > & ) ; template < typename T > class Foo { friend bool operator!= < > ( const Foo < T > & , const Foo < T > & ) ; } ;"
818:
819: ;
820: $if $(@expr1073744873 $!@expr1073744874 $assertEquals $(@expr1073744875 "cppcheck-2.8/test/testtokenize.cpp" $, 820 $, exp@var178 $, $tokenizeAndStringify_ $(@expr1073744876 "cppcheck-2.8/test/testtokenize.cpp" $, 820 $, code@var177 $) $) $) { $return ; }
821: }
822:
823: void validate ( ) {
824:
825: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744878 "cppcheck-2.8/test/testtokenize.cpp" $, 825 $, ";using namespace std;" , false , Settings ::@expr3055 Native@expr3053 , "test.c" $) $; $assertThrowFail $(@expr1073744880 "cppcheck-2.8/test/testtokenize.cpp" $, 825 $) $; $} $catch $(@expr1073744881 $const InternalError $&@expr1073744882 $) ${ $} $catch $(@expr1073744883 $... $) ${ $assertThrowFail $(@expr1073744884 "cppcheck-2.8/test/testtokenize.cpp" $, 825 $) $; $} $} $while $(@expr1073744885 $false $) ;
826: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744886 "cppcheck-2.8/test/testtokenize.cpp" $, 826 $, ";std::map<int,int> m;" , false , Settings ::@expr3055 Native@expr3053 , "test.c" $) $; $assertThrowFail $(@expr1073744888 "cppcheck-2.8/test/testtokenize.cpp" $, 826 $) $; $} $catch $(@expr1073744889 $const InternalError $&@expr1073744890 $) ${ $} $catch $(@expr1073744891 $... $) ${ $assertThrowFail $(@expr1073744892 "cppcheck-2.8/test/testtokenize.cpp" $, 826 $) $; $} $} $while $(@expr1073744893 $false $) ;
827: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744894 "cppcheck-2.8/test/testtokenize.cpp" $, 827 $, ";template<class T> class X { };" , false , Settings ::@expr3055 Native@expr3053 , "test.c" $) $; $assertThrowFail $(@expr1073744896 "cppcheck-2.8/test/testtokenize.cpp" $, 827 $) $; $} $catch $(@expr1073744897 $const InternalError $&@expr1073744898 $) ${ $} $catch $(@expr1073744899 $... $) ${ $assertThrowFail $(@expr1073744900 "cppcheck-2.8/test/testtokenize.cpp" $, 827 $) $; $} $} $while $(@expr1073744901 $false $) ;
828: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744902 "cppcheck-2.8/test/testtokenize.cpp" $, 828 $, "int X<Y>() {};" , false , Settings ::@expr3055 Native@expr3053 , "test.c" $) $; $assertThrowFail $(@expr1073744904 "cppcheck-2.8/test/testtokenize.cpp" $, 828 $) $; $} $catch $(@expr1073744905 $const InternalError $&@expr1073744906 $) ${ $} $catch $(@expr1073744907 $... $) ${ $assertThrowFail $(@expr1073744908 "cppcheck-2.8/test/testtokenize.cpp" $, 828 $) $; $} $} $while $(@expr1073744909 $false $) ;
829: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744910 "cppcheck-2.8/test/testtokenize.cpp" $, 829 $, "void foo(int i) { reinterpret_cast<char>(i) };" , false , Settings ::@expr3055 Native@expr3053 , "test.h" $) $; $assertThrowFail $(@expr1073744912 "cppcheck-2.8/test/testtokenize.cpp" $, 829 $) $; $} $catch $(@expr1073744913 $const InternalError $&@expr1073744914 $) ${ $} $catch $(@expr1073744915 $... $) ${ $assertThrowFail $(@expr1073744916 "cppcheck-2.8/test/testtokenize.cpp" $, 829 $) $; $} $} $while $(@expr1073744917 $false $) ;
830: }
831:
832: void objectiveC ( ) {
833: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744918 "cppcheck-2.8/test/testtokenize.cpp" $, 833 $, "void f() { [foo bar]; }" $) $; $assertThrowFail $(@expr1073744919 "cppcheck-2.8/test/testtokenize.cpp" $, 833 $) $; $} $catch $(@expr1073744920 $const InternalError $&@expr1073744921 $) ${ $} $catch $(@expr1073744922 $... $) ${ $assertThrowFail $(@expr1073744923 "cppcheck-2.8/test/testtokenize.cpp" $, 833 $) $; $} $} $while $(@expr1073744924 $false $) ;
834: }
835:
836: void syntax_case_default ( ) {
837: $tokenizeAndStringify_ $(@expr1073744925 "cppcheck-2.8/test/testtokenize.cpp" $, 837 $, "void f() {switch (n) { case 0: z(); break;}}" $) ;
838: $if $(@expr1073744926 $!@expr1073744927 $assertEquals $(@expr1073744928 "cppcheck-2.8/test/testtokenize.cpp" $, 838 $, "" $, errout@var100 .@expr3105 str (@expr3106 ) $) $) { $return ; }
839:
840: $tokenizeAndStringify_ $(@expr1073744931 "cppcheck-2.8/test/testtokenize.cpp" $, 840 $, "void f() {switch (n) { case 0:; break;}}" $) ;
841: $if $(@expr1073744932 $!@expr1073744933 $assertEquals $(@expr1073744934 "cppcheck-2.8/test/testtokenize.cpp" $, 841 $, "" $, errout@var100 .@expr3105 str (@expr3106 ) $) $) { $return ; }
842:
843:
844: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744937 "cppcheck-2.8/test/testtokenize.cpp" $, 844 $, "void f() {switch (n) { case 0?1:2 : z(); break;}}" $) $; $} $catch $(@expr1073744938 $const InternalError $&@expr1073744939 $) ${ $} $catch $(@expr1073744940 $... $) ${ $assertThrow $(@expr1073744941 "cppcheck-2.8/test/testtokenize.cpp" $, 844 $) $; $} $} $while $(@expr1073744942 $false $) ;
845:
846:
847:
848: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744943 "cppcheck-2.8/test/testtokenize.cpp" $, 848 $, "void f() {switch (n) { case 0?(1?3:4):2 : z(); break;}}" $) $; $} $catch $(@expr1073744944 $const InternalError $&@expr1073744945 $) ${ $} $catch $(@expr1073744946 $... $) ${ $assertThrow $(@expr1073744947 "cppcheck-2.8/test/testtokenize.cpp" $, 848 $) $; $} $} $while $(@expr1073744948 $false $) ;
849: $if $(@expr1073744949 $!@expr1073744950 $assertEquals $(@expr1073744951 "cppcheck-2.8/test/testtokenize.cpp" $, 849 $, "" $, errout@var100 .@expr3105 str (@expr3106 ) $) $) { $return ; }
850:
851:
852:
853: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073744954 "cppcheck-2.8/test/testtokenize.cpp" $, 853 $, "void f() {switch (n) { case 0?({0;}):1: z(); break;}}" $) $; $} $catch $(@expr1073744955 $const InternalError $&@expr1073744956 $) ${ $} $catch $(@expr1073744957 $... $) ${ $assertThrow $(@expr1073744958 "cppcheck-2.8/test/testtokenize.cpp" $, 853 $) $; $} $} $while $(@expr1073744959 $false $) ;
854: $if $(@expr1073744960 $!@expr1073744961 $assertEquals $(@expr1073744962 "cppcheck-2.8/test/testtokenize.cpp" $, 854 $, "" $, errout@var100 .@expr3105 str (@expr3106 ) $) $) { $return ; }
855:
856:
857: $tokenizeAndStringify_ $(@expr1073744965 "cppcheck-2.8/test/testtokenize.cpp" $, 857 $, "void f() {switch (n) { case b: z(); break;}}" $) ;
858: $if $(@expr1073744966 $!@expr1073744967 $assertEquals $(@expr1073744968 "cppcheck-2.8/test/testtokenize.cpp" $, 858 $, "" $, errout@var100 .@expr3105 str (@expr3106 ) $) $) { $return ; }
859:
860:
861: $tokenizeAndStringify_ $(@expr1073744971 "cppcheck-2.8/test/testtokenize.cpp" $, 861 $, "void f() {switch (n) { case g(): z(); break;}}" $) ;
862: $if $(@expr1073744972 $!@expr1073744973 $assertEquals $(@expr1073744974 "cppcheck-2.8/test/testtokenize.cpp" $, 862 $, "" $, errout@var100 .@expr3105 str (@expr3106 ) $) $) { $return ; }
863:
864:
865: $tokenizeAndStringify_ $(@expr1073744977 "cppcheck-2.8/test/testtokenize.cpp" $, 865 $, "void f() {switch (n) { case g[0]: z(); break;}}" $) ;
866: $if $(@expr1073744978 $!@expr1073744979 $assertEquals $(@expr1073744980 "cppcheck-2.8/test/testtokenize.cpp" $, 866 $, "" $, errout@var100 .@expr3105 str (@expr3106 ) $) $) { $return ; }
867:
868:
869: $tokenizeAndStringify_ $(@expr1073744983 "cppcheck-2.8/test/testtokenize.cpp" $, 869 $, "void f() {switch (n) { case *g: z(); break;}}" $) ;
870: $if $(@expr1073744984 $!@expr1073744985 $assertEquals $(@expr1073744986 "cppcheck-2.8/test/testtokenize.cpp" $, 870 $, "" $, errout@var100 .@expr3105 str (@expr3106 ) $) $) { $return ; }
871:
872:
873: $tokenizeAndStringify_ $(@expr1073744989 "cppcheck-2.8/test/testtokenize.cpp" $, 873 $, "void f() {switch (n) { case sqrt(x+y): z(); break;}}" $) ;
874: $if $(@expr1073744990 $!@expr1073744991 $assertEquals $(@expr1073744992 "cppcheck-2.8/test/testtokenize.cpp" $, 874 $, "" $, errout@var100 .@expr3105 str (@expr3106 ) $) $) { $return ; }
875: }
876:
877: void removePragma ( ) {
878: const char code@var179 [@expr1073744999 22 ] =@expr1073745000 "_Pragma(\"abc\") int x;" ;
879: Settings s@var180 ;
880:
881: s@var180 .@expr3177 standards@var181 .@expr3178 c@var182 =@expr1073745003 Standards ::@expr1073745004 C89@expr1073744995 ;
882: $if $(@expr1073745005 $!@expr1073745006 $assertEquals $(@expr1073745007 "cppcheck-2.8/test/testtokenize.cpp" $, 882 $, "_Pragma ( \"abc\" ) int x ;" $, $tokenizeAndStringify_ $(@expr1073745008 "cppcheck-2.8/test/testtokenize.cpp" $, 882 $, code@var179 , s@var180 , "test.c" $) $) $) { $return ; }
883: s@var180 .@expr3177 standards@var181 .@expr3178 c@var182 =@expr1073745011 Standards ::@expr1073745012 CLatest@expr1073744996 ;
884: $if $(@expr1073745013 $!@expr1073745014 $assertEquals $(@expr1073745015 "cppcheck-2.8/test/testtokenize.cpp" $, 884 $, "int x ;" $, $tokenizeAndStringify_ $(@expr1073745016 "cppcheck-2.8/test/testtokenize.cpp" $, 884 $, code@var179 , s@var180 , "test.c" $) $) $) { $return ; }
885:
886: s@var180 .@expr3177 standards@var181 .@expr3194 cpp@var183 =@expr1073745019 Standards ::@expr1073745020 CPP03@expr1073744997 ;
887: $if $(@expr1073745021 $!@expr1073745022 $assertEquals $(@expr1073745023 "cppcheck-2.8/test/testtokenize.cpp" $, 887 $, "_Pragma ( \"abc\" ) int x ;" $, $tokenizeAndStringify_ $(@expr1073745024 "cppcheck-2.8/test/testtokenize.cpp" $, 887 $, code@var179 , s@var180 , "test.cpp" $) $) $) { $return ; }
888: s@var180 .@expr3177 standards@var181 .@expr3194 cpp@var183 =@expr1073745027 Standards ::@expr1073745028 CPPLatest@expr1073744998 ;
889: $if $(@expr1073745029 $!@expr1073745030 $assertEquals $(@expr1073745031 "cppcheck-2.8/test/testtokenize.cpp" $, 889 $, "int x ;" $, $tokenizeAndStringify_ $(@expr1073745032 "cppcheck-2.8/test/testtokenize.cpp" $, 889 $, code@var179 , s@var180 , "test.cpp" $) $) $) { $return ; }
890: }
891:
892: void foreach ( ) {
893:
894: const char code@var184 [@expr1073745033 68 ] =@expr1073745034 "void f() { for each ( char c in MyString ) { Console::Write(c); } }" ;
895: $if $(@expr1073745035 $!@expr1073745036 $assertEquals $(@expr1073745037 "cppcheck-2.8/test/testtokenize.cpp" $, 895 $, "void f ( ) { asm ( \"char c in MyString\" ) { Console :: Write ( c ) ; } }" $, $tokenizeAndStringify_ $(@expr1073745038 "cppcheck-2.8/test/testtokenize.cpp" $, 895 $, code@var184 $) $) $) { $return ; }
896: }
897:
898: void ifconstexpr ( ) {
899: $if $(@expr1073745039 $!@expr1073745040 $assertEquals $(@expr1073745041 "cppcheck-2.8/test/testtokenize.cpp" $, 899 $, "void f ( ) { if ( FOO ) { bar ( c ) ; } }" $, $tokenizeAndStringify_ $(@expr1073745042 "cppcheck-2.8/test/testtokenize.cpp" $, 899 $, "void f() { if constexpr ( FOO ) { bar(c); } }" $) $) $) { $return ; }
900: }
901:
902: void combineOperators ( ) {
903: $if $(@expr1073745043 $!@expr1073745044 $assertEquals $(@expr1073745045 "cppcheck-2.8/test/testtokenize.cpp" $, 903 $, "; private: ;" $, $tokenizeAndStringify_ $(@expr1073745046 "cppcheck-2.8/test/testtokenize.cpp" $, 903 $, ";private:;" $) $) $) { $return ; }
904: $if $(@expr1073745047 $!@expr1073745048 $assertEquals $(@expr1073745049 "cppcheck-2.8/test/testtokenize.cpp" $, 904 $, "; protected: ;" $, $tokenizeAndStringify_ $(@expr1073745050 "cppcheck-2.8/test/testtokenize.cpp" $, 904 $, ";protected:;" $) $) $) { $return ; }
905: $if $(@expr1073745051 $!@expr1073745052 $assertEquals $(@expr1073745053 "cppcheck-2.8/test/testtokenize.cpp" $, 905 $, "; public: ;" $, $tokenizeAndStringify_ $(@expr1073745054 "cppcheck-2.8/test/testtokenize.cpp" $, 905 $, ";public:;" $) $) $) { $return ; }
906: $if $(@expr1073745055 $!@expr1073745056 $assertEquals $(@expr1073745057 "cppcheck-2.8/test/testtokenize.cpp" $, 906 $, "; __published: ;" $, $tokenizeAndStringify_ $(@expr1073745058 "cppcheck-2.8/test/testtokenize.cpp" $, 906 $, ";__published:;" $) $) $) { $return ; }
907: $if $(@expr1073745059 $!@expr1073745060 $assertEquals $(@expr1073745061 "cppcheck-2.8/test/testtokenize.cpp" $, 907 $, "a . public : ;" $, $tokenizeAndStringify_ $(@expr1073745062 "cppcheck-2.8/test/testtokenize.cpp" $, 907 $, "a.public:;" $) $) $) { $return ; }
908: $if $(@expr1073745063 $!@expr1073745064 $assertEquals $(@expr1073745065 "cppcheck-2.8/test/testtokenize.cpp" $, 908 $, "void f ( x & = 2 ) ;" $, $tokenizeAndStringify_ $(@expr1073745066 "cppcheck-2.8/test/testtokenize.cpp" $, 908 $, "void f(x &= 2);" $) $) $) { $return ; }
909: $if $(@expr1073745067 $!@expr1073745068 $assertEquals $(@expr1073745069 "cppcheck-2.8/test/testtokenize.cpp" $, 909 $, "const_cast < a * > ( & e )" $, $tokenizeAndStringify_ $(@expr1073745070 "cppcheck-2.8/test/testtokenize.cpp" $, 909 $, "const_cast<a*>(&e)" $) $) $) { $return ; }
910: }
911:
912: void concatenateNegativeNumber ( ) {
913: $if $(@expr1073745071 $!@expr1073745072 $assertEquals $(@expr1073745073 "cppcheck-2.8/test/testtokenize.cpp" $, 913 $, "i = -12 ;" $, $tokenizeAndStringify_ $(@expr1073745074 "cppcheck-2.8/test/testtokenize.cpp" $, 913 $, "i = -12;" $) $) $) { $return ; }
914: $if $(@expr1073745075 $!@expr1073745076 $assertEquals $(@expr1073745077 "cppcheck-2.8/test/testtokenize.cpp" $, 914 $, "1 - 2 ;" $, $tokenizeAndStringify_ $(@expr1073745078 "cppcheck-2.8/test/testtokenize.cpp" $, 914 $, "1-2;" $) $) $) { $return ; }
915: $if $(@expr1073745079 $!@expr1073745080 $assertEquals $(@expr1073745081 "cppcheck-2.8/test/testtokenize.cpp" $, 915 $, "foo ( -1 ) - 2 ;" $, $tokenizeAndStringify_ $(@expr1073745082 "cppcheck-2.8/test/testtokenize.cpp" $, 915 $, "foo(-1)-2;" $) $) $) { $return ; }
916: $if $(@expr1073745083 $!@expr1073745084 $assertEquals $(@expr1073745085 "cppcheck-2.8/test/testtokenize.cpp" $, 916 $, "int f ( ) { return -2 ; }" $, $tokenizeAndStringify_ $(@expr1073745086 "cppcheck-2.8/test/testtokenize.cpp" $, 916 $, "int f(){return -2;}" $) $) $) { $return ; }
917: $if $(@expr1073745087 $!@expr1073745088 $assertEquals $(@expr1073745089 "cppcheck-2.8/test/testtokenize.cpp" $, 917 $, "int x [ 2 ] = { -2 , 1 }" $, $tokenizeAndStringify_ $(@expr1073745090 "cppcheck-2.8/test/testtokenize.cpp" $, 917 $, "int x[2] = {-2,1}" $) $) $) { $return ; }
918:
919: $if $(@expr1073745091 $!@expr1073745092 $assertEquals $(@expr1073745093 "cppcheck-2.8/test/testtokenize.cpp" $, 919 $, "f ( 123 )" $, $tokenizeAndStringify_ $(@expr1073745094 "cppcheck-2.8/test/testtokenize.cpp" $, 919 $, "f(+123)" $) $) $) { $return ; }
920: }
921:
922:
923:
924: void longtok ( ) {
925: const std ::@expr1073745095 string filedata@var185 (@expr1073745096 10000 , 'a' ) ;
926: $if $(@expr1073745097 $!@expr1073745098 $assertEquals $(@expr1073745099 "cppcheck-2.8/test/testtokenize.cpp" $, 926 $, filedata@var185 $, $tokenizeAndStringify_ $(@expr1073745100 "cppcheck-2.8/test/testtokenize.cpp" $, 926 $, filedata@var185 .@expr1073745101 c_str (@expr1073745102 ) $) $) $) { $return ; }
927: }
928:
929:
930: void simplifyHeadersAndUnusedTemplates1 ( ) {
931: Settings s@var186 ;
932: s@var186 .@expr1073745103 checkUnusedTemplates@var187 =@expr1073745104 false ;
933: $if $(@expr1073745105 $!@expr1073745106 $assertEquals $(@expr1073745107 "cppcheck-2.8/test/testtokenize.cpp" $, 933 $, ";" $, $tokenizeAndStringify_ $(@expr1073745108 "cppcheck-2.8/test/testtokenize.cpp" $, 933 $, "; template <typename... a> uint8_t b(std::tuple<uint8_t> d) {\n  std::tuple<a...> c{std::move(d)};\n  return std::get<0>(c);\n}" , s@var186 $) $) $) { $return
934:
935:
936:
937: ; }
938: $if $(@expr1073745109 $!@expr1073745110 $assertEquals $(@expr1073745111 "cppcheck-2.8/test/testtokenize.cpp" $, 938 $, "int g ( int ) ;" $, $tokenizeAndStringify_ $(@expr1073745112 "cppcheck-2.8/test/testtokenize.cpp" $, 938 $, "int g(int);\ntemplate <class F, class... Ts> auto h(F f, Ts... xs) {\n    auto e = f(g(xs)...);\n    return e;\n}" , s@var186 $) $) $) { $return
939:
|
942:
943: ; }
944: }
945:
946: void simplifyHeadersAndUnusedTemplates2 ( ) {
947: const char code@var188 [@expr1073745113 134 ] =@expr1073745114 "; template< typename T, u_int uBAR = 0 >\nclass Foo {\npublic:\n    void FooBar() {\n        new ( (uBAR ? uBAR : sizeof(T))) T;\n    }\n};"
948:
|
952:
953: ;
954:
955: Settings s@var189 ;
956: s@var189 .@expr3291 checkUnusedTemplates@var190 =@expr1073745116 false ;
957: $if $(@expr1073745117 $!@expr1073745118 $assertEquals $(@expr1073745119 "cppcheck-2.8/test/testtokenize.cpp" $, 957 $, ";" $, $tokenizeAndStringify_ $(@expr1073745120 "cppcheck-2.8/test/testtokenize.cpp" $, 957 $, code@var188 , s@var189 $) $) $) { $return ; }
958:
959: s@var189 .@expr3291 checkUnusedTemplates@var190 =@expr1073745122 true ;
960: $if $(@expr1073745123 $!@expr1073745124 $assertEquals $(@expr1073745125 "cppcheck-2.8/test/testtokenize.cpp" $, 960 $, "; template < typename T , u_int uBAR = 0 >\nclass Foo {\npublic:\nvoid FooBar ( ) {\nnew ( uBAR ? uBAR : sizeof ( T ) ) T ;\n}\n} ;" $, $tokenizeAndStringify_ $(@expr1073745126 "cppcheck-2.8/test/testtokenize.cpp" $, 960 $, code@var188 , s@var189 $) $) $) { $return
961:
|
965:
966: ; }
967: }
968:
969: void simplifyAt ( ) {
970: $if $(@expr1073745127 $!@expr1073745128 $assertEquals $(@expr1073745129 "cppcheck-2.8/test/testtokenize.cpp" $, 970 $, "int x ;" $, $tokenizeAndStringify_ $(@expr1073745130 "cppcheck-2.8/test/testtokenize.cpp" $, 970 $, "int x@123;" $) $) $) { $return ; }
971: $if $(@expr1073745131 $!@expr1073745132 $assertEquals $(@expr1073745133 "cppcheck-2.8/test/testtokenize.cpp" $, 971 $, "bool x ;" $, $tokenizeAndStringify_ $(@expr1073745134 "cppcheck-2.8/test/testtokenize.cpp" $, 971 $, "bool x@123:1;" $) $) $) { $return ; }
972: $if $(@expr1073745135 $!@expr1073745136 $assertEquals $(@expr1073745137 "cppcheck-2.8/test/testtokenize.cpp" $, 972 $, "char PORTB ; bool PB3 ;" $, $tokenizeAndStringify_ $(@expr1073745138 "cppcheck-2.8/test/testtokenize.cpp" $, 972 $, "char PORTB @ 0x10; bool PB3 @ PORTB:3;\n" $) $) $) { $return ; }
973: $if $(@expr1073745139 $!@expr1073745140 $assertEquals $(@expr1073745141 "cppcheck-2.8/test/testtokenize.cpp" $, 973 $, "int x ;" $, $tokenizeAndStringify_ $(@expr1073745142 "cppcheck-2.8/test/testtokenize.cpp" $, 973 $, "int x @ (0x1000 + 18);" $) $) $) { $return ; }
974:
975: $if $(@expr1073745143 $!@expr1073745144 $assertEquals $(@expr1073745145 "cppcheck-2.8/test/testtokenize.cpp" $, 975 $, "int x [ 10 ] ;" $, $tokenizeAndStringify_ $(@expr1073745146 "cppcheck-2.8/test/testtokenize.cpp" $, 975 $, "int x[10]@0x100;" $) $) $) { $return ; }
976:
977: $if $(@expr1073745147 $!@expr1073745148 $assertEquals $(@expr1073745149 "cppcheck-2.8/test/testtokenize.cpp" $, 977 $, "interrupt@ f ( ) { }" $, $tokenizeAndStringify_ $(@expr1073745150 "cppcheck-2.8/test/testtokenize.cpp" $, 977 $, "@interrupt f() {}" $) $) $) { $return ; }
978: }
979:
980: void inlineasm ( ) {
981: $if $(@expr1073745151 $!@expr1073745152 $assertEquals $(@expr1073745153 "cppcheck-2.8/test/testtokenize.cpp" $, 981 $, "asm ( \"mov ax , bx\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745154 "cppcheck-2.8/test/testtokenize.cpp" $, 981 $, "asm { mov ax,bx };" $) $) $) { $return ; }
982: $if $(@expr1073745155 $!@expr1073745156 $assertEquals $(@expr1073745157 "cppcheck-2.8/test/testtokenize.cpp" $, 982 $, "asm ( \"mov ax , bx\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745158 "cppcheck-2.8/test/testtokenize.cpp" $, 982 $, "_asm { mov ax,bx };" $) $) $) { $return ; }
983: $if $(@expr1073745159 $!@expr1073745160 $assertEquals $(@expr1073745161 "cppcheck-2.8/test/testtokenize.cpp" $, 983 $, "asm ( \"mov ax , bx\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745162 "cppcheck-2.8/test/testtokenize.cpp" $, 983 $, "_asm mov ax,bx" $) $) $) { $return ; }
984: $if $(@expr1073745163 $!@expr1073745164 $assertEquals $(@expr1073745165 "cppcheck-2.8/test/testtokenize.cpp" $, 984 $, "asm ( \"mov ax , bx\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745166 "cppcheck-2.8/test/testtokenize.cpp" $, 984 $, "__asm { mov ax,bx };" $) $) $) { $return ; }
985: $if $(@expr1073745167 $!@expr1073745168 $assertEquals $(@expr1073745169 "cppcheck-2.8/test/testtokenize.cpp" $, 985 $, "asm ( \"\"mov ax,bx\"\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745170 "cppcheck-2.8/test/testtokenize.cpp" $, 985 $, "__asm__ __volatile__ ( \"mov ax,bx\" );" $) $) $) { $return ; }
986: $if $(@expr1073745171 $!@expr1073745172 $assertEquals $(@expr1073745173 "cppcheck-2.8/test/testtokenize.cpp" $, 986 $, "asm ( \"_emit 12h\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745174 "cppcheck-2.8/test/testtokenize.cpp" $, 986 $, "__asm _emit 12h ;" $) $) $) { $return ; }
987: $if $(@expr1073745175 $!@expr1073745176 $assertEquals $(@expr1073745177 "cppcheck-2.8/test/testtokenize.cpp" $, 987 $, "asm ( \"mov a , b\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745178 "cppcheck-2.8/test/testtokenize.cpp" $, 987 $, "__asm mov a, b ;" $) $) $) { $return ; }
988: $if $(@expr1073745179 $!@expr1073745180 $assertEquals $(@expr1073745181 "cppcheck-2.8/test/testtokenize.cpp" $, 988 $, "asm ( \"\"fnstcw %0\" : \"= m\" ( old_cw )\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745182 "cppcheck-2.8/test/testtokenize.cpp" $, 988 $, "asm volatile (\"fnstcw %0\" : \"= m\" (old_cw));" $) $) $) { $return ; }
989: $if $(@expr1073745183 $!@expr1073745184 $assertEquals $(@expr1073745185 "cppcheck-2.8/test/testtokenize.cpp" $, 989 $, "asm ( \"\"fnstcw %0\" : \"= m\" ( old_cw )\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745186 "cppcheck-2.8/test/testtokenize.cpp" $, 989 $, " __asm__ (\"fnstcw %0\" : \"= m\" (old_cw));" $) $) $) { $return ; }
990: $if $(@expr1073745187 $!@expr1073745188 $assertEquals $(@expr1073745189 "cppcheck-2.8/test/testtokenize.cpp" $, 990 $, "asm ( \"\"ddd\"\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745190 "cppcheck-2.8/test/testtokenize.cpp" $, 990 $, " __asm __volatile__ (\"ddd\") ;" $) $) $) { $return ; }
991: $if $(@expr1073745191 $!@expr1073745192 $assertEquals $(@expr1073745193 "cppcheck-2.8/test/testtokenize.cpp" $, 991 $, "asm ( \"\"ddd\"\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745194 "cppcheck-2.8/test/testtokenize.cpp" $, 991 $, " __asm __volatile (\"ddd\") ;" $) $) $) { $return ; }
992: $if $(@expr1073745195 $!@expr1073745196 $assertEquals $(@expr1073745197 "cppcheck-2.8/test/testtokenize.cpp" $, 992 $, "asm ( \"\"mov ax,bx\"\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745198 "cppcheck-2.8/test/testtokenize.cpp" $, 992 $, "__asm__ volatile ( \"mov ax,bx\" );" $) $) $) { $return ; }
993: $if $(@expr1073745199 $!@expr1073745200 $assertEquals $(@expr1073745201 "cppcheck-2.8/test/testtokenize.cpp" $, 993 $, "asm ( \"mov ax , bx\" ) ; int a ;" $, $tokenizeAndStringify_ $(@expr1073745202 "cppcheck-2.8/test/testtokenize.cpp" $, 993 $, "asm { mov ax,bx } int a;" $) $) $) { $return ; }
994: $if $(@expr1073745203 $!@expr1073745204 $assertEquals $(@expr1073745205 "cppcheck-2.8/test/testtokenize.cpp" $, 994 $, "asm\n\n( \"mov ax , bx\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745206 "cppcheck-2.8/test/testtokenize.cpp" $, 994 $, "__asm\nmov ax,bx\n__endasm;" $) $) $) { $return ; }
995: $if $(@expr1073745207 $!@expr1073745208 $assertEquals $(@expr1073745209 "cppcheck-2.8/test/testtokenize.cpp" $, 995 $, "asm\n\n( \"push b ; for if\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745210 "cppcheck-2.8/test/testtokenize.cpp" $, 995 $, "__asm\npush b ; for if\n__endasm;" $) $) $) { $return ; }
996:
997:
998: $if $(@expr1073745211 $!@expr1073745212 $assertEquals $(@expr1073745213 "cppcheck-2.8/test/testtokenize.cpp" $, 998 $, ";\n\nasm ( \"\"mov ax,bx\"\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745214 "cppcheck-2.8/test/testtokenize.cpp" $, 998 $, ";\n\n__asm__ volatile ( \"mov ax,bx\" );" $) $) $) { $return ; }
999:
1000: $if $(@expr1073745215 $!@expr1073745216 $assertEquals $(@expr1073745217 "cppcheck-2.8/test/testtokenize.cpp" $, 1000 $, "void func1 ( ) ;" $, $tokenizeAndStringify_ $(@expr1073745218 "cppcheck-2.8/test/testtokenize.cpp" $, 1000 $, "void func1() __asm__(\"...\") __attribute__();" $) $) $) { $return ; }
1001: }
1002:
1003:
1004: void simplifyAsm2 ( ) {
1005: $do ${ $try ${ $if $(@expr1073745219 $!@expr1073745220 $assertEquals $(@expr1073745221 "cppcheck-2.8/test/testtokenize.cpp" $, 1005 $, "void f ( ) { asm ( \"^{}\" ) ; }" $, $tokenizeAndStringify_ $(@expr1073745222 "cppcheck-2.8/test/testtokenize.cpp" $, 1005 $, "void f() { ^{} }" $) $) $) { $return $; } $assertThrowFail $(@expr1073745223 "cppcheck-2.8/test/testtokenize.cpp" $, 1005 $) $; $} $catch $(@expr1073745224 $const InternalError $&@expr1073745225 $) ${ $} $catch $(@expr1073745226 $... $) ${ $assertThrowFail $(@expr1073745227 "cppcheck-2.8/test/testtokenize.cpp" $, 1005 $) $; $} $} $while $(@expr1073745228 $false $) ;
1006: $do ${ $try ${ $if $(@expr1073745229 $!@expr1073745230 $assertEquals $(@expr1073745231 "cppcheck-2.8/test/testtokenize.cpp" $, 1006 $, "void f ( ) { x ( asm ( \"^{}\" ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073745232 "cppcheck-2.8/test/testtokenize.cpp" $, 1006 $, "void f() { x(^{}); }" $) $) $) { $return $; } $assertThrowFail $(@expr1073745233 "cppcheck-2.8/test/testtokenize.cpp" $, 1006 $) $; $} $catch $(@expr1073745234 $const InternalError $&@expr1073745235 $) ${ $} $catch $(@expr1073745236 $... $) ${ $assertThrowFail $(@expr1073745237 "cppcheck-2.8/test/testtokenize.cpp" $, 1006 $) $; $} $} $while $(@expr1073745238 $false $) ;
1007: $do ${ $try ${ $if $(@expr1073745239 $!@expr1073745240 $assertEquals $(@expr1073745241 "cppcheck-2.8/test/testtokenize.cpp" $, 1007 $, "void f ( ) { foo ( A ( ) , asm ( \"^{bar();}\" ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073745242 "cppcheck-2.8/test/testtokenize.cpp" $, 1007 $, "void f() { foo(A(), ^{ bar(); }); }" $) $) $) { $return $; } $assertThrowFail $(@expr1073745243 "cppcheck-2.8/test/testtokenize.cpp" $, 1007 $) $; $} $catch $(@expr1073745244 $const InternalError $&@expr1073745245 $) ${ $} $catch $(@expr1073745246 $... $) ${ $assertThrowFail $(@expr1073745247 "cppcheck-2.8/test/testtokenize.cpp" $, 1007 $) $; $} $} $while $(@expr1073745248 $false $) ;
1008: $do ${ $try ${ $if $(@expr1073745249 $!@expr1073745250 $assertEquals $(@expr1073745251 "cppcheck-2.8/test/testtokenize.cpp" $, 1008 $, "int f0 ( Args args ) { asm ( \"asm(\"return^{returnsizeof...(Args);}()\")+^{returnsizeof...(args);}()\" )\n2:\n|\n5:\n6: ;\n} ;" $, $tokenizeAndStringify_ $(@expr1073745252 "cppcheck-2.8/test/testtokenize.cpp" $, 1008 $, "int f0(Args args) {\n    return ^{\n        return sizeof...(Args);\n    }() + ^ {\n        return sizeof...(args);\n    }();\n};" $) $) $) { $return $; } $assertThrowFail $(@expr1073745253 "cppcheck-2.8/test/testtokenize.cpp" $, 1008 $) $; $} $catch $(@expr1073745254 $const InternalError $&@expr1073745255 $) ${ $} $catch $(@expr1073745256 $... $) ${ $assertThrowFail $(@expr1073745257 "cppcheck-2.8/test/testtokenize.cpp" $, 1008 $) $; $} $} $while $(@expr1073745258 $false $)
1009:
|
1018:
1019: ;
1020: $do ${ $try ${ $if $(@expr1073745259 $!@expr1073745260 $assertEquals $(@expr1073745261 "cppcheck-2.8/test/testtokenize.cpp" $, 1020 $, "int ( ^ block ) ( void ) = asm ( \"^{staticinttest=0;returntest;}\" )\n\n\n;" $, $tokenizeAndStringify_ $(@expr1073745262 "cppcheck-2.8/test/testtokenize.cpp" $, 1020 $, "int(^block)(void) = ^{\n    static int test = 0;\n    return test;\n};" $) $) $) { $return $; } $assertThrowFail $(@expr1073745263 "cppcheck-2.8/test/testtokenize.cpp" $, 1020 $) $; $} $catch $(@expr1073745264 $const InternalError $&@expr1073745265 $) ${ $} $catch $(@expr1073745266 $... $) ${ $assertThrowFail $(@expr1073745267 "cppcheck-2.8/test/testtokenize.cpp" $, 1020 $) $; $} $} $while $(@expr1073745268 $false $)
1021:
1022:
1023:
1024: ;
1025:
1026: $do ${ $try ${ $if $(@expr1073745269 $!@expr1073745270 $assertEquals $(@expr1073745271 "cppcheck-2.8/test/testtokenize.cpp" $, 1026 $, "; return f ( a [ b = c ] , asm ( \"^{}\" ) ) ;" $, $tokenizeAndStringify_ $(@expr1073745272 "cppcheck-2.8/test/testtokenize.cpp" $, 1026 $, "; return f(a[b=c],^{});" $) $) $) { $return $; } $assertThrowFail $(@expr1073745273 "cppcheck-2.8/test/testtokenize.cpp" $, 1026 $) $; $} $catch $(@expr1073745274 $const InternalError $&@expr1073745275 $) ${ $} $catch $(@expr1073745276 $... $) ${ $assertThrowFail $(@expr1073745277 "cppcheck-2.8/test/testtokenize.cpp" $, 1026 $) $; $} $} $while $(@expr1073745278 $false $)
1027: ;
1028: $if $(@expr1073745279 $!@expr1073745280 $assertEquals $(@expr1073745281 "cppcheck-2.8/test/testtokenize.cpp" $, 1028 $, "{ return f ( asm ( \"^(void){somecode}\" ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073745282 "cppcheck-2.8/test/testtokenize.cpp" $, 1028 $, "{ return f(^(void){somecode}); }" $) $) $) { $return
1029: ; }
1030: $do ${ $try ${ $if $(@expr1073745283 $!@expr1073745284 $assertEquals $(@expr1073745285 "cppcheck-2.8/test/testtokenize.cpp" $, 1030 $, "; asm ( \"a?(b?(c,asm(\"^{}\")):0):^{}\" ) ;" $, $tokenizeAndStringify_ $(@expr1073745286 "cppcheck-2.8/test/testtokenize.cpp" $, 1030 $, ";a?(b?(c,^{}):0):^{};" $) $) $) { $return $; } $assertThrowFail $(@expr1073745287 "cppcheck-2.8/test/testtokenize.cpp" $, 1030 $) $; $} $catch $(@expr1073745288 $const InternalError $&@expr1073745289 $) ${ $} $catch $(@expr1073745290 $... $) ${ $assertThrowFail $(@expr1073745291 "cppcheck-2.8/test/testtokenize.cpp" $, 1030 $) $; $} $} $while $(@expr1073745292 $false $)
1031: ;
1032: $if $(@expr1073745293 $!@expr1073745294 $assertEquals $(@expr1073745295 "cppcheck-2.8/test/testtokenize.cpp" $, 1032 $, "template < typename T > CImg < T > operator| ( const char * const expression , const CImg < T > & img ) { return img | expression ; } template < typename T > CImg < T > operator^ ( const char * const expression , const CImg < T > & img ) { return img ^ expression ; } template < typename T > CImg < T > operator== ( const char * const expression , const CImg < T > & img ) { return img == expression ; }" $, $tokenizeAndStringify_ $(@expr1073745296 "cppcheck-2.8/test/testtokenize.cpp" $, 1032 $, "template < typename T >inline CImg<T> operator|(const char *const expression, const CImg<T>& img) {  return img | expression ;}template<typename T>inline CImg<T> operator^(const char *const expression, const CImg<T>& img) {  return img ^ expression;}template<typename T>inline CImg<T> operator==(const char *const expression, const CImg<T>& img) {  return img == expression;}" $) $) $) { $return
1033:
|
1054:
1055: ; }
1056: }
1057:
1058: void ifAddBraces1 ( ) {
1059: const char code@var191 [@expr1073745297 37 ] =@expr1073745298 "void f()\n{\n    if (a);\n    else ;\n}\n"
1060:
1061:
1062:
1063: ;
1064: $if $(@expr1073745299 $!@expr1073745300 $assertEquals $(@expr1073745301 "cppcheck-2.8/test/testtokenize.cpp" $, 1064 $, "void f ( )\n{\nif ( a ) { ; }\nelse { ; }\n}" $, $tokenizeAndStringify_ $(@expr1073745302 "cppcheck-2.8/test/testtokenize.cpp" $, 1064 $, code@var191 $) $) $) { $return
1065:
1066:
1067:
1068: ; }
1069: }
1070:
1071: void ifAddBraces2 ( ) {
1072: const char code@var192 [@expr1073745303 36 ] =@expr1073745304 "void f()\n{\n    if (a) if (b) { }\n}\n"
1073:
1074:
1075: ;
1076: $if $(@expr1073745305 $!@expr1073745306 $assertEquals $(@expr1073745307 "cppcheck-2.8/test/testtokenize.cpp" $, 1076 $, "void f ( )\n{\nif ( a ) { if ( b ) { } }\n}" $, $tokenizeAndStringify_ $(@expr1073745308 "cppcheck-2.8/test/testtokenize.cpp" $, 1076 $, code@var192 $) $) $) { $return
1077:
1078:
1079: ; }
1080: }
1081:
1082: void ifAddBraces3 ( ) {
1083: const char code@var193 [@expr1073745309 38 ] =@expr1073745310 "void f()\n{\n    if (a) for (;;) { }\n}\n"
1084:
1085:
1086: ;
1087: $if $(@expr1073745311 $!@expr1073745312 $assertEquals $(@expr1073745313 "cppcheck-2.8/test/testtokenize.cpp" $, 1087 $, "void f ( )\n{\nif ( a ) { for ( ; ; ) { } }\n}" $, $tokenizeAndStringify_ $(@expr1073745314 "cppcheck-2.8/test/testtokenize.cpp" $, 1087 $, code@var193 $) $) $) { $return
1088:
1089:
1090: ; }
1091: }
1092:
1093: void ifAddBraces4 ( ) {
1094: const char code@var194 [@expr1073745315 118 ] =@expr1073745316 "char * foo ()\n{\n    char *str = malloc(10);\n    if (somecondition)\n        for ( ; ; )\n        { }\n    return str;\n}\n"
1095:
|
1100:
1101: ;
1102: $if $(@expr1073745317 $!@expr1073745318 $assertEquals $(@expr1073745319 "cppcheck-2.8/test/testtokenize.cpp" $, 1102 $, "char * foo ( )\n{\nchar * str ; str = malloc ( 10 ) ;\nif ( somecondition ) {\nfor ( ; ; )\n{ } }\nreturn str ;\n}" $, $tokenizeAndStringify_ $(@expr1073745320 "cppcheck-2.8/test/testtokenize.cpp" $, 1102 $, code@var194 $) $) $) { $return
1103:
|
1108:
1109: ; }
1110: }
1111:
1112: void ifAddBraces5 ( ) {
1113: const char code@var195 [@expr1073745321 67 ] =@expr1073745322 "void f()\n{\nfor(int i = 0; i < 2; i++)\nif(true)\nreturn;\n\nreturn;\n}\n"
1114:
|
1119:
1120: ;
1121:
1122: $if $(@expr1073745323 $!@expr1073745324 $assertEquals $(@expr1073745325 "cppcheck-2.8/test/testtokenize.cpp" $, 1122 $, "void f ( )\n{\nfor ( int i = 0 ; i < 2 ; i ++ ) {\nif ( true ) {\nreturn ; } }\n\nreturn ;\n}" $, $tokenizeAndStringify_ $(@expr1073745326 "cppcheck-2.8/test/testtokenize.cpp" $, 1122 $, code@var195 $) $) $) { $return
1123:
|
1127:
1128: ; }
1129: }
1130:
1131: void ifAddBraces7 ( ) {
1132: const char code@var196 [@expr1073745327 50 ] =@expr1073745328 "void f()\n{\nint a;\nif( a )\n  ({a=4;}),({a=5;});\n}\n"
1133:
|
1136:
1137: ;
1138: $if $(@expr1073745329 $!@expr1073745330 $assertEquals $(@expr1073745331 "cppcheck-2.8/test/testtokenize.cpp" $, 1138 $, "void f ( )\n{\nint a ;\nif ( a ) {\n( { a = 4 ; } ) , ( { a = 5 ; } ) ; }\n}" $, $tokenizeAndStringify_ $(@expr1073745332 "cppcheck-2.8/test/testtokenize.cpp" $, 1138 $, code@var196 $) $) $) { $return
1139:
|
1142:
1143: ; }
1144: }
1145:
1146: void ifAddBraces9 ( ) {
1147:
1148: const char code@var197 [@expr1073745333 77 ] =@expr1073745334
1149: "void f() {    for (int k=0; k<VectorSize; k++)        LOG_OUT(ID_Vector[k])}"
1150:
1151:
1152: ;
1153: const char expected@var198 [@expr1073745335 85 ] =@expr1073745336
1154: "void f ( ) { for ( int k = 0 ; k < VectorSize ; k ++ ) LOG_OUT ( ID_Vector [ k ] ) }"
1155:
1156:
1157: ;
1158: $if $(@expr1073745337 $!@expr1073745338 $assertEquals $(@expr1073745339 "cppcheck-2.8/test/testtokenize.cpp" $, 1158 $, expected@var198 $, $tokenizeAndStringify_ $(@expr1073745340 "cppcheck-2.8/test/testtokenize.cpp" $, 1158 $, code@var197 $) $) $) { $return ; }
1159: }
1160:
1161: void ifAddBraces11 ( ) {
1162: const char code@var199 [@expr1073745341 27 ] =@expr1073745342 "{ if (x) if (y) ; else ; }" ;
1163: const char expected@var200 [@expr1073745343 43 ] =@expr1073745344 "{ if ( x ) { if ( y ) { ; } else { ; } } }" ;
1164: $if $(@expr1073745345 $!@expr1073745346 $assertEquals $(@expr1073745347 "cppcheck-2.8/test/testtokenize.cpp" $, 1164 $, expected@var200 $, $tokenizeAndStringify_ $(@expr1073745348 "cppcheck-2.8/test/testtokenize.cpp" $, 1164 $, code@var199 $) $) $) { $return ; }
1165: }
1166:
1167: void ifAddBraces12 ( ) {
1168:
1169: const char code@var201 [@expr1073745349 28 ] =@expr1073745350 "{ if (x) do { } while(x); }" ;
1170: const char expected@var202 [@expr1073745351 38 ] =@expr1073745352 "{ if ( x ) { do { } while ( x ) ; } }" ;
1171: $if $(@expr1073745353 $!@expr1073745354 $assertEquals $(@expr1073745355 "cppcheck-2.8/test/testtokenize.cpp" $, 1171 $, expected@var202 $, $tokenizeAndStringify_ $(@expr1073745356 "cppcheck-2.8/test/testtokenize.cpp" $, 1171 $, code@var201 $) $) $) { $return ; }
1172: }
1173:
1174: void ifAddBraces13 ( ) {
1175:
1176: const char code@var203 [@expr1073745357 40 ] =@expr1073745358 "{ if (x) if (y) { } else { } else { } }" ;
1177: const char expected@var204 [@expr1073745359 48 ] =@expr1073745360 "{ if ( x ) { if ( y ) { } else { } } else { } }" ;
1178: $if $(@expr1073745361 $!@expr1073745362 $assertEquals $(@expr1073745363 "cppcheck-2.8/test/testtokenize.cpp" $, 1178 $, expected@var204 $, $tokenizeAndStringify_ $(@expr1073745364 "cppcheck-2.8/test/testtokenize.cpp" $, 1178 $, code@var203 $) $) $) { $return ; }
1179:
1180:
1181: const char code2@var205 [@expr1073745365 34 ] =@expr1073745366 "{ if (x) while (y) { } else { } }" ;
1182: const char expected2@var206 [@expr1073745367 42 ] =@expr1073745368 "{ if ( x ) { while ( y ) { } } else { } }" ;
1183: $if $(@expr1073745369 $!@expr1073745370 $assertEquals $(@expr1073745371 "cppcheck-2.8/test/testtokenize.cpp" $, 1183 $, expected2@var206 $, $tokenizeAndStringify_ $(@expr1073745372 "cppcheck-2.8/test/testtokenize.cpp" $, 1183 $, code2@var205 $) $) $) { $return ; }
1184: }
1185:
1186: void ifAddBraces15 ( ) {
1187:
1188:
1189: $if $(@expr1073745373 $!@expr1073745374 $assertEquals $(@expr1073745375 "cppcheck-2.8/test/testtokenize.cpp" $, 1189 $, "{ A if ( x ) { y ( ) ; } }" $, $tokenizeAndStringify_ $(@expr1073745376 "cppcheck-2.8/test/testtokenize.cpp" $, 1189 $, "{A if(x)y();}" $) $) $) { $return ; }
1190: }
1191:
1192: void ifAddBraces16 ( ) {
1193:
1194:
1195: const char code@var207 [@expr1073745377 47 ] =@expr1073745378 "void f() { (void) ( { if(*p) (*p) = x(); } ) }"
1196:
1197: ;
1198: $if $(@expr1073745379 $!@expr1073745380 $assertEquals $(@expr1073745381 "cppcheck-2.8/test/testtokenize.cpp" $, 1198 $, "void f ( ) { ( void ) ( { if ( * p ) { ( * p ) = x ( ) ; } } ) }" $, $tokenizeAndStringify_ $(@expr1073745382 "cppcheck-2.8/test/testtokenize.cpp" $, 1198 $, code@var207 $) $) $) { $return
1199: ; }
1200:
1201: }
1202:
1203: void ifAddBraces17 ( ) {
1204: const char code@var208 [@expr1073745383 69 ] =@expr1073745384 "void f()\n{\n    if (a)\n        bar1 ();\n\n    else\n        bar2 ();\n}\n"
1205:
|
1210:
1211: ;
1212: $if $(@expr1073745385 $!@expr1073745386 $assertEquals $(@expr1073745387 "cppcheck-2.8/test/testtokenize.cpp" $, 1212 $, "void f ( )\n{\nif ( a ) {\nbar1 ( ) ; }\n\nelse {\nbar2 ( ) ; }\n}" $, $tokenizeAndStringify_ $(@expr1073745388 "cppcheck-2.8/test/testtokenize.cpp" $, 1212 $, code@var208 $) $) $) { $return
1213:
|
1218:
1219: ; }
1220: }
1221:
1222: void ifAddBraces18 ( ) {
1223:
1224: $if $(@expr1073745389 $!@expr1073745390 $assertEquals $(@expr1073745391 "cppcheck-2.8/test/testtokenize.cpp" $, 1224 $, "{ if ( x ) { if ( y ) { } else { ; } } else { ; } }" $, $tokenizeAndStringify_ $(@expr1073745392 "cppcheck-2.8/test/testtokenize.cpp" $, 1224 $, "{ if(x) if(y){}else;else;}" $) $) $) { $return
1225: ; }
1226:
1227: $if $(@expr1073745393 $!@expr1073745394 $assertEquals $(@expr1073745395 "cppcheck-2.8/test/testtokenize.cpp" $, 1227 $, "{ if ( x ) { if ( y ) { if ( z ) { } else { ; } } else { ; } } else { ; } }" $, $tokenizeAndStringify_ $(@expr1073745396 "cppcheck-2.8/test/testtokenize.cpp" $, 1227 $, "{ if(x) if(y) if(z){}else;else;else;}" $) $) $) { $return
1228: ; }
1229: }
1230:
1231: void ifAddBraces19 ( ) {
1232:
1233: const char code@var209 [@expr1073745397 126 ] =@expr1073745398 "void f()\n{\n    if (a)\n        for (;;)\n            if (b)\n                bar1();\n            else\n                bar2();\n}\n"
1234:
|
1240:
1241: ;
1242: $if $(@expr1073745399 $!@expr1073745400 $assertEquals $(@expr1073745401 "cppcheck-2.8/test/testtokenize.cpp" $, 1242 $, "void f ( )\n{\nif ( a ) {\nfor ( ; ; ) {\nif ( b ) {\nbar1 ( ) ; }\nelse {\nbar2 ( ) ; } } }\n}" $, $tokenizeAndStringify_ $(@expr1073745402 "cppcheck-2.8/test/testtokenize.cpp" $, 1242 $, code@var209 $) $) $) { $return
1243:
|
1249:
1250: ; }
1251: }
1252:
1253: void ifAddBraces20 ( ) {
1254: const char code@var210 [@expr1073745403 27 ] =@expr1073745404 "void f() { if(x) {} else }" ;
1255: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073745405 "cppcheck-2.8/test/testtokenize.cpp" $, 1255 $, code@var210 $) $; $assertThrowFail $(@expr1073745406 "cppcheck-2.8/test/testtokenize.cpp" $, 1255 $) $; $} $catch $(@expr1073745407 $const InternalError $&@expr1073745408 $) ${ $} $catch $(@expr1073745409 $... $) ${ $assertThrowFail $(@expr1073745410 "cppcheck-2.8/test/testtokenize.cpp" $, 1255 $) $; $} $} $while $(@expr1073745411 $false $) ;
1256: }
1257:
1258: void ifAddBracesLabels ( ) {
1259:
1260: $if $(@expr1073745412 $!@expr1073745413 $assertEquals $(@expr1073745414 "cppcheck-2.8/test/testtokenize.cpp" $, 1260 $, "int f ( int x ) {\nif ( x ) {\nl1 : ; l2 : ; return x ; }\n}" $, $tokenizeAndStringify_ $(@expr1073745415 "cppcheck-2.8/test/testtokenize.cpp" $, 1260 $, "int f(int x) {\n  if (x)\n  l1: l2: return x;\n}" $) $) $) { $return
1261:
|
1266:
1267: ; }
1268:
1269:
1270: $if $(@expr1073745416 $!@expr1073745417 $assertEquals $(@expr1073745418 "cppcheck-2.8/test/testtokenize.cpp" $, 1270 $, "int f ( int x ) {\nif ( x )\n{ l1 : ; l2 : ; return x ; }\n}" $, $tokenizeAndStringify_ $(@expr1073745419 "cppcheck-2.8/test/testtokenize.cpp" $, 1270 $, "int f(int x) {\n  if (x)\n  l1: l2: { return x; }\n}" $) $) $) { $return
1271:
|
1276:
1277: ; }
1278:
1279:
1280: $if $(@expr1073745420 $!@expr1073745421 $assertEquals $(@expr1073745422 "cppcheck-2.8/test/testtokenize.cpp" $, 1280 $, "int f ( int x ) {\nif ( x ) {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { return x ; } }\n}" $, $tokenizeAndStringify_ $(@expr1073745423 "cppcheck-2.8/test/testtokenize.cpp" $, 1280 $, "int f(int x) {\n  if (x)\n  l1: l2:\n    try { throw 1; }\n    catch(...) { return x; }\n}" $) $) $) { $return
1281:
|
1290:
1291: ; }
1292: }
1293:
1294: void switchAddBracesLabels ( ) {
1295:
1296: $if $(@expr1073745424 $!@expr1073745425 $assertEquals $(@expr1073745426 "cppcheck-2.8/test/testtokenize.cpp" $, 1296 $, "int f ( int x ) {\nswitch ( x ) {\nl1 : ; case 0 : ; l2 : ; case ( 1 ) : ; return x ; }\n}" $, $tokenizeAndStringify_ $(@expr1073745427 "cppcheck-2.8/test/testtokenize.cpp" $, 1296 $, "int f(int x) {\n  switch (x)\n  l1: case 0: l2: case (1): return x;\n}" $) $) $) { $return
1297:
|
1302:
1303: ; }
1304:
1305:
1306: $if $(@expr1073745428 $!@expr1073745429 $assertEquals $(@expr1073745430 "cppcheck-2.8/test/testtokenize.cpp" $, 1306 $, "int f ( int x ) {\nswitch ( x )\n{ l1 : ; case 0 : ; l2 : ; case ( 1 ) : ; return x ; }\n}" $, $tokenizeAndStringify_ $(@expr1073745431 "cppcheck-2.8/test/testtokenize.cpp" $, 1306 $, "int f(int x) {\n  switch (x)\n  l1: case 0: l2: case (1): { return x; }\n}" $) $) $) { $return
1307:
|
1312:
1313: ; }
1314:
1315:
1316: $if $(@expr1073745432 $!@expr1073745433 $assertEquals $(@expr1073745434 "cppcheck-2.8/test/testtokenize.cpp" $, 1316 $, "int f ( int x ) {\nswitch ( x ) {\nl1 : ; case 0 : ; l2 : ; case ( 1 ) : ;\ntry { throw 1 ; }\ncatch ( ... ) { return x ; } }\n}" $, $tokenizeAndStringify_ $(@expr1073745435 "cppcheck-2.8/test/testtokenize.cpp" $, 1316 $, "int f(int x) {\n  switch (x)\n  l1: case 0: l2: case (1):\n    try { throw 1; }\n    catch(...) { return x; }\n}" $) $) $) { $return
1317:
|
1326:
1327: ; }
1328: }
1329:
1330: void whileAddBraces ( ) {
1331: const char code@var211 [@expr1073745436 12 ] =@expr1073745437 "{while(a);}" ;
1332: $if $(@expr1073745438 $!@expr1073745439 $assertEquals $(@expr1073745440 "cppcheck-2.8/test/testtokenize.cpp" $, 1332 $, "{ while ( a ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073745441 "cppcheck-2.8/test/testtokenize.cpp" $, 1332 $, code@var211 $) $) $) { $return ; }
1333: }
1334:
1335: void whileAddBracesLabels ( ) {
1336:
1337: $if $(@expr1073745442 $!@expr1073745443 $assertEquals $(@expr1073745444 "cppcheck-2.8/test/testtokenize.cpp" $, 1337 $, "void f ( int x ) {\nwhile ( x ) {\nl1 : ; l2 : ; -- x ; }\n}" $, $tokenizeAndStringify_ $(@expr1073745445 "cppcheck-2.8/test/testtokenize.cpp" $, 1337 $, "void f(int x) {\n  while (x)\n  l1: l2: --x;\n}" $) $) $) { $return
1338:
|
1343:
1344: ; }
1345:
1346:
1347: $if $(@expr1073745446 $!@expr1073745447 $assertEquals $(@expr1073745448 "cppcheck-2.8/test/testtokenize.cpp" $, 1347 $, "void f ( int x ) {\nwhile ( x )\n{ l1 : ; l2 : ; -- x ; }\n}" $, $tokenizeAndStringify_ $(@expr1073745449 "cppcheck-2.8/test/testtokenize.cpp" $, 1347 $, "void f(int x) {\n  while (x)\n  l1: l2: { -- x; }\n}" $) $) $) { $return
1348:
|
1353:
1354: ; }
1355:
1356:
1357: $if $(@expr1073745450 $!@expr1073745451 $assertEquals $(@expr1073745452 "cppcheck-2.8/test/testtokenize.cpp" $, 1357 $, "void f ( int x ) {\nwhile ( x ) {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { -- x ; } }\n}" $, $tokenizeAndStringify_ $(@expr1073745453 "cppcheck-2.8/test/testtokenize.cpp" $, 1357 $, "void f(int x) {\n  while (x)\n  l1: l2:\n    try { throw 1; }\n    catch(...) { --x; }\n}" $) $) $) { $return
1358:
|
1367:
1368: ; }
1369: }
1370:
1371: void doWhileAddBraces ( ) {
1372: {
1373: const char code@var212 [@expr1073745454 18 ] =@expr1073745455 "{do ; while (0);}" ;
1374: const char result@var213 [@expr1073745456 27 ] =@expr1073745457 "{ do { ; } while ( 0 ) ; }" ;
1375:
1376: $if $(@expr1073745458 $!@expr1073745459 $assertEquals $(@expr1073745460 "cppcheck-2.8/test/testtokenize.cpp" $, 1376 $, result@var213 $, $tokenizeAndStringify_ $(@expr1073745461 "cppcheck-2.8/test/testtokenize.cpp" $, 1376 $, code@var212 $) $) $) { $return ; }
1377: }
1378:
1379: {
1380: const char code@var214 [@expr1073745462 44 ] =@expr1073745463 "{ UNKNOWN_MACRO ( do ) ; while ( a -- ) ; }" ;
1381: const char result@var215 [@expr1073745464 48 ] =@expr1073745465 "{ UNKNOWN_MACRO ( do ) ; while ( a -- ) { ; } }" ;
1382:
1383: $if $(@expr1073745466 $!@expr1073745467 $assertEquals $(@expr1073745468 "cppcheck-2.8/test/testtokenize.cpp" $, 1383 $, result@var215 $, $tokenizeAndStringify_ $(@expr1073745469 "cppcheck-2.8/test/testtokenize.cpp" $, 1383 $, code@var214 $) $) $) { $return ; }
1384: }
1385:
1386: {
1387: const char code@var216 [@expr1073745470 50 ] =@expr1073745471 "{ UNKNOWN_MACRO ( do , foo ) ; while ( a -- ) ; }" ;
1388: const char result@var217 [@expr1073745472 54 ] =@expr1073745473 "{ UNKNOWN_MACRO ( do , foo ) ; while ( a -- ) { ; } }" ;
1389:
1390: $if $(@expr1073745474 $!@expr1073745475 $assertEquals $(@expr1073745476 "cppcheck-2.8/test/testtokenize.cpp" $, 1390 $, result@var217 $, $tokenizeAndStringify_ $(@expr1073745477 "cppcheck-2.8/test/testtokenize.cpp" $, 1390 $, code@var216 $) $) $) { $return ; }
1391: }
1392:
1393: {
1394: const char code@var218 [@expr1073745478 113 ] =@expr1073745479 "void foo ( int c , int d ) {\n do\n  if ( c ) {\n   while ( c ) { c -- ; }\n  }\n while ( -- d > 0 ) ;\n return 0 ;\n}\n"
1395:
|
1400:
1401: ;
1402: const char result@var219 [@expr1073745480 106 ] =@expr1073745481 "void foo ( int c , int d ) {\ndo {\nif ( c ) {\nwhile ( c ) { c -- ; }\n} }\nwhile ( -- d > 0 ) ;\nreturn 0 ;\n}"
1403:
|
1408:
1409: ;
1410: $if $(@expr1073745482 $!@expr1073745483 $assertEquals $(@expr1073745484 "cppcheck-2.8/test/testtokenize.cpp" $, 1410 $, result@var219 $, $tokenizeAndStringify_ $(@expr1073745485 "cppcheck-2.8/test/testtokenize.cpp" $, 1410 $, code@var218 $) $) $) { $return ; }
1411: }
1412:
1413: {
1414: const char code@var220 [@expr1073745486 97 ] =@expr1073745487 "void foo ( int c , int d ) {\n do\n   do c -- ; while ( c ) ;\n while ( -- d > 0 ) ;\n return 0 ;\n}\n"
1415:
|
1418:
1419: ;
1420: const char result@var221 [@expr1073745488 98 ] =@expr1073745489 "void foo ( int c , int d ) {\ndo {\ndo { c -- ; } while ( c ) ; }\nwhile ( -- d > 0 ) ;\nreturn 0 ;\n}"
1421:
|
1424:
1425: ;
1426: $if $(@expr1073745490 $!@expr1073745491 $assertEquals $(@expr1073745492 "cppcheck-2.8/test/testtokenize.cpp" $, 1426 $, result@var221 $, $tokenizeAndStringify_ $(@expr1073745493 "cppcheck-2.8/test/testtokenize.cpp" $, 1426 $, code@var220 $) $) $) { $return ; }
1427: }
1428:
1429: {
1430:
1431: const char code@var222 [@expr1073745494 52 ] =@expr1073745495 "void foo() {\n    do { while (x) f(); } while (y);\n}"
1432:
1433: ;
1434: const char result@var223 [@expr1073745496 62 ] =@expr1073745497 "void foo ( ) {\ndo { while ( x ) { f ( ) ; } } while ( y ) ;\n}"
1435:
1436: ;
1437: $if $(@expr1073745498 $!@expr1073745499 $assertEquals $(@expr1073745500 "cppcheck-2.8/test/testtokenize.cpp" $, 1437 $, result@var223 $, $tokenizeAndStringify_ $(@expr1073745501 "cppcheck-2.8/test/testtokenize.cpp" $, 1437 $, code@var222 $) $) $) { $return ; }
1438: }
1439: }
1440:
1441: void doWhileAddBracesLabels ( ) {
1442:
1443: $if $(@expr1073745502 $!@expr1073745503 $assertEquals $(@expr1073745504 "cppcheck-2.8/test/testtokenize.cpp" $, 1443 $, "void f ( int x ) {\ndo {\nl1 : ; l2 : ; -- x ; }\nwhile ( x ) ;\n}" $, $tokenizeAndStringify_ $(@expr1073745505 "cppcheck-2.8/test/testtokenize.cpp" $, 1443 $, "void f(int x) {\n  do\n  l1: l2: --x;\n  while (x);\n}" $) $) $) { $return
1444:
|
1451:
1452: ; }
1453:
1454:
1455: $if $(@expr1073745506 $!@expr1073745507 $assertEquals $(@expr1073745508 "cppcheck-2.8/test/testtokenize.cpp" $, 1455 $, "void f ( int x ) {\ndo\n{ l1 : ; l2 : ; -- x ; }\nwhile ( x ) ;\n}" $, $tokenizeAndStringify_ $(@expr1073745509 "cppcheck-2.8/test/testtokenize.cpp" $, 1455 $, "void f(int x) {\n  do\n  l1: l2: { -- x; }\n  while (x);\n}" $) $) $) { $return
1456:
|
1463:
1464: ; }
1465:
1466:
1467: $if $(@expr1073745510 $!@expr1073745511 $assertEquals $(@expr1073745512 "cppcheck-2.8/test/testtokenize.cpp" $, 1467 $, "void f ( int x ) {\ndo {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { -- x ; } }\nwhile ( x ) ;\n}" $, $tokenizeAndStringify_ $(@expr1073745513 "cppcheck-2.8/test/testtokenize.cpp" $, 1467 $, "void f(int x) {\n  do\n  l1: l2:\n    try { throw 1; }\n    catch(...) { --x; }\n  while (x);\n}" $) $) $) { $return
1468:
|
1479:
1480: ; }
1481: }
1482:
1483: void forAddBraces1 ( ) {
1484: {
1485: const char code@var224 [@expr1073745514 64 ] =@expr1073745515 "void f() {\n     for(;;)\n         if (a) { }\n         else { }\n}"
1486:
1487:
1488:
1489: ;
1490: const char expected@var225 [@expr1073745516 53 ] =@expr1073745517 "void f ( ) {\nfor ( ; ; ) {\nif ( a ) { }\nelse { } }\n}"
1491:
1492:
1493:
1494: ;
1495: $if $(@expr1073745518 $!@expr1073745519 $assertEquals $(@expr1073745520 "cppcheck-2.8/test/testtokenize.cpp" $, 1495 $, expected@var225 $, $tokenizeAndStringify_ $(@expr1073745521 "cppcheck-2.8/test/testtokenize.cpp" $, 1495 $, code@var224 $) $) $) { $return ; }
1496: }
1497:
1498: {
1499: const char code@var226 [@expr1073745522 89 ] =@expr1073745523 "void f() {\n     for(;;)\n         if (a) { }\n         else if (b) { }\n         else { }\n}"
1500:
|
1503:
1504: ;
1505: const char expected@var227 [@expr1073745524 75 ] =@expr1073745525 "void f ( ) {\nfor ( ; ; ) {\nif ( a ) { }\nelse { if ( b ) { }\nelse { } } }\n}"
1506:
|
1509:
1510: ;
1511: $if $(@expr1073745526 $!@expr1073745527 $assertEquals $(@expr1073745528 "cppcheck-2.8/test/testtokenize.cpp" $, 1511 $, expected@var227 $, $tokenizeAndStringify_ $(@expr1073745529 "cppcheck-2.8/test/testtokenize.cpp" $, 1511 $, code@var226 $) $) $) { $return ; }
1512: }
1513: }
1514:
1515: void forAddBraces2 ( ) {
1516: const char code@var228 [@expr1073745530 49 ] =@expr1073745531 "void f() {\n    for(;;) try { } catch (...) { }\n}"
1517:
1518: ;
1519: const char expected@var229 [@expr1073745532 57 ] =@expr1073745533 "void f ( ) {\nfor ( ; ; ) { try { } catch ( ... ) { } }\n}"
1520:
1521: ;
1522: $if $(@expr1073745534 $!@expr1073745535 $assertEquals $(@expr1073745536 "cppcheck-2.8/test/testtokenize.cpp" $, 1522 $, expected@var229 $, $tokenizeAndStringify_ $(@expr1073745537 "cppcheck-2.8/test/testtokenize.cpp" $, 1522 $, code@var228 $) $) $) { $return ; }
1523: }
1524:
1525: void forAddBracesLabels ( ) {
1526:
1527: $if $(@expr1073745538 $!@expr1073745539 $assertEquals $(@expr1073745540 "cppcheck-2.8/test/testtokenize.cpp" $, 1527 $, "void f ( int x ) {\nfor ( ; x ; ) {\nl1 : ; l2 : ; -- x ; }\n}" $, $tokenizeAndStringify_ $(@expr1073745541 "cppcheck-2.8/test/testtokenize.cpp" $, 1527 $, "void f(int x) {\n  for ( ; x; )\n  l1: l2: --x;\n}" $) $) $) { $return
1528:
|
1533:
1534: ; }
1535:
1536:
1537: $if $(@expr1073745542 $!@expr1073745543 $assertEquals $(@expr1073745544 "cppcheck-2.8/test/testtokenize.cpp" $, 1537 $, "void f ( int x ) {\nfor ( ; x ; )\n{ l1 : ; l2 : ; -- x ; }\n}" $, $tokenizeAndStringify_ $(@expr1073745545 "cppcheck-2.8/test/testtokenize.cpp" $, 1537 $, "void f(int x) {\n  for ( ; x; )\n  l1: l2: { -- x; }\n}" $) $) $) { $return
1538:
|
1543:
1544: ; }
1545:
1546:
1547: $if $(@expr1073745546 $!@expr1073745547 $assertEquals $(@expr1073745548 "cppcheck-2.8/test/testtokenize.cpp" $, 1547 $, "void f ( int x ) {\nfor ( ; x ; ) {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { -- x ; } }\n}" $, $tokenizeAndStringify_ $(@expr1073745549 "cppcheck-2.8/test/testtokenize.cpp" $, 1547 $, "void f(int x) {\n  for ( ; x; )\n  l1: l2:\n    try { throw 1; }\n    catch(...) { --x; }\n}" $) $) $) { $return
1548:
|
1557:
1558: ; }
1559: }
1560:
1561:
1562: void simplifyExternC ( ) {
1563: $if $(@expr1073745550 $!@expr1073745551 $assertEquals $(@expr1073745552 "cppcheck-2.8/test/testtokenize.cpp" $, 1563 $, "int foo ( ) ;" $, $tokenizeAndStringify_ $(@expr1073745553 "cppcheck-2.8/test/testtokenize.cpp" $, 1563 $, "extern \"C\" int foo();" $) $) $) { $return ; }
1564: $if $(@expr1073745554 $!@expr1073745555 $assertEquals $(@expr1073745556 "cppcheck-2.8/test/testtokenize.cpp" $, 1564 $, "int foo ( ) ;" $, $tokenizeAndStringify_ $(@expr1073745557 "cppcheck-2.8/test/testtokenize.cpp" $, 1564 $, "extern \"C\" { int foo(); }" $) $) $) { $return ; }
1565: }
1566:
1567: void simplifyFunctionParameters ( ) {
1568: {
1569: const char code@var230 [@expr1073745558 25 ] =@expr1073745559 "char a [ ABC ( DEF ) ] ;" ;
1570: $if $(@expr1073745560 $!@expr1073745561 $assertEquals $(@expr1073745562 "cppcheck-2.8/test/testtokenize.cpp" $, 1570 $, code@var230 $, $tokenizeAndStringify_ $(@expr1073745563 "cppcheck-2.8/test/testtokenize.cpp" $, 1570 $, code@var230 $) $) $) { $return ; }
1571: }
1572:
1573: {
1574: const char code@var231 [@expr1073745564 41 ] =@expr1073745565 "module ( a , a , sizeof ( a ) , 0444 ) ;" ;
1575: $if $(@expr1073745566 $!@expr1073745567 $assertEquals $(@expr1073745568 "cppcheck-2.8/test/testtokenize.cpp" $, 1575 $, "module ( a , a , sizeof ( a ) , 0444 ) ;" $, $tokenizeAndStringify_ $(@expr1073745569 "cppcheck-2.8/test/testtokenize.cpp" $, 1575 $, code@var231 $) $) $) { $return ; }
1576: }
1577:
1578: $if $(@expr1073745570 $!@expr1073745571 $assertEquals $(@expr1073745572 "cppcheck-2.8/test/testtokenize.cpp" $, 1578 $, "void f ( int x ) { }" $, $tokenizeAndStringify_ $(@expr1073745573 "cppcheck-2.8/test/testtokenize.cpp" $, 1578 $, "void f(x) int x; { }" $) $) $) { $return ; }
1579: $if $(@expr1073745574 $!@expr1073745575 $assertEquals $(@expr1073745576 "cppcheck-2.8/test/testtokenize.cpp" $, 1579 $, "void f ( int x , char y ) { }" $, $tokenizeAndStringify_ $(@expr1073745577 "cppcheck-2.8/test/testtokenize.cpp" $, 1579 $, "void f(x,y) int x; char y; { }" $) $) $) { $return ; }
1580: $if $(@expr1073745578 $!@expr1073745579 $assertEquals $(@expr1073745580 "cppcheck-2.8/test/testtokenize.cpp" $, 1580 $, "int main ( int argc , char * argv [ ] ) { }" $, $tokenizeAndStringify_ $(@expr1073745581 "cppcheck-2.8/test/testtokenize.cpp" $, 1580 $, "int main(argc,argv) int argc; char *argv[]; { }" $) $) $) { $return ; }
1581: $if $(@expr1073745582 $!@expr1073745583 $assertEquals $(@expr1073745584 "cppcheck-2.8/test/testtokenize.cpp" $, 1581 $, "int f ( int p , int w , float d ) { }" $, $tokenizeAndStringify_ $(@expr1073745585 "cppcheck-2.8/test/testtokenize.cpp" $, 1581 $, "int f(p,w,d) float d; { }" $) $) $) { $return ; }
1582:
1583:
1584: $if $(@expr1073745586 $!@expr1073745587 $assertEquals $(@expr1073745588 "cppcheck-2.8/test/testtokenize.cpp" $, 1584 $, "int ( * d ( a , b , c ) ) ( ) int a ; int b ; int c ; { }" $, $tokenizeAndStringify_ $(@expr1073745589 "cppcheck-2.8/test/testtokenize.cpp" $, 1584 $, "int (*d(a,b,c))()int a,b,c; { }" $) $) $) { $return ; }
1585:
1586: {
1587:
1588: const char code@var232 [@expr1073745590 44 ] =@expr1073745591 "void foo(){    if (x)        int x;    { }}"
1589:
|
1592:
1593: ;
1594: $if $(@expr1073745592 $!@expr1073745593 $assertEquals $(@expr1073745594 "cppcheck-2.8/test/testtokenize.cpp" $, 1594 $, "void foo ( ) { if ( x ) { int x ; } { } }" $, $tokenizeAndStringify_ $(@expr1073745595 "cppcheck-2.8/test/testtokenize.cpp" $, 1594 $, code@var232 $) $) $) { $return ; }
1595: }
1596: }
1597:
1598: void simplifyFunctionParameters1 ( ) {
1599:
1600: const char code@var233 [@expr1073745596 91 ] =@expr1073745597 "typedef float ufloat;\ntypedef short ftnlen;\nint f(p,w,d,e,len) ufloat *p; ftnlen len;\n{\n}\n"
1601:
1602:
1603:
1604: ;
1605: $if $(@expr1073745598 $!@expr1073745599 $assertEquals $(@expr1073745600 "cppcheck-2.8/test/testtokenize.cpp" $, 1605 $, "int f ( float * p , int w , int d , int e , short len )\n{\n}" $, $tokenizeAndStringify_ $(@expr1073745601 "cppcheck-2.8/test/testtokenize.cpp" $, 1605 $, code@var233 $) $) $) { $return
1606:
1607: ; }
1608: }
1609:
1610: void simplifyFunctionParameters2 ( ) {
1611: const char code@var234 [@expr1073745602 87 ] =@expr1073745603 "class Item { int i ; public: Item ( int i ) ; } ; Item :: Item ( int i ) : i ( i ) { }"
1612:
|
1615:
1616: ;
1617: $if $(@expr1073745604 $!@expr1073745605 $assertEquals $(@expr1073745606 "cppcheck-2.8/test/testtokenize.cpp" $, 1617 $, code@var234 $, $tokenizeAndStringify_ $(@expr1073745607 "cppcheck-2.8/test/testtokenize.cpp" $, 1617 $, code@var234 $) $) $) { $return ; }
1618: }
1619:
1620: void simplifyFunctionParameters3 ( ) {
1621: const char code@var235 [@expr1073745608 121 ] =@expr1073745609 "class Item { int i ; int j ; public: Item ( int i , int j ) ; } ; Item :: Item ( int i , int j ) : i ( i ) , j ( j ) { }"
1622:
|
1626:
1627: ;
1628: $if $(@expr1073745610 $!@expr1073745611 $assertEquals $(@expr1073745612 "cppcheck-2.8/test/testtokenize.cpp" $, 1628 $, code@var235 $, $tokenizeAndStringify_ $(@expr1073745613 "cppcheck-2.8/test/testtokenize.cpp" $, 1628 $, code@var235 $) $) $) { $return ; }
1629: }
1630:
1631: void simplifyFunctionParameters4 ( ) {
1632: const char code@var236 [@expr1073745614 37 ] =@expr1073745615 "int foo :: bar ( int , int ) const ;" ;
1633: $if $(@expr1073745616 $!@expr1073745617 $assertEquals $(@expr1073745618 "cppcheck-2.8/test/testtokenize.cpp" $, 1633 $, code@var236 $, $tokenizeAndStringify_ $(@expr1073745619 "cppcheck-2.8/test/testtokenize.cpp" $, 1633 $, code@var236 $) $) $) { $return ; }
1634: }
1635:
1636: void simplifyFunctionParametersMultiTemplate ( ) {
1637: const char code@var237 [@expr1073745620 82 ] =@expr1073745621 "template < typename T1 > template < typename T2 > void A < T1 > :: foo ( T2 ) { }"
1638: ;
1639: $if $(@expr1073745622 $!@expr1073745623 $assertEquals $(@expr1073745624 "cppcheck-2.8/test/testtokenize.cpp" $, 1639 $, code@var237 $, $tokenizeAndStringify_ $(@expr1073745625 "cppcheck-2.8/test/testtokenize.cpp" $, 1639 $, code@var237 $) $) $) { $return ; }
1640: }
1641:
1642: void simplifyFunctionParametersErrors ( ) {
1643:
1644: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073745626 "cppcheck-2.8/test/testtokenize.cpp" $, 1644 $, "void foo(x, x)\n int x;\n int x;\n{}\n" $) $; $assertThrowFail $(@expr1073745627 "cppcheck-2.8/test/testtokenize.cpp" $, 1644 $) $; $} $catch $(@expr1073745628 $const InternalError $&@expr1073745629 $) ${ $} $catch $(@expr1073745630 $... $) ${ $assertThrowFail $(@expr1073745631 "cppcheck-2.8/test/testtokenize.cpp" $, 1644 $) $; $} $} $while $(@expr1073745632 $false $)
1645:
1646:
1647: ;
1648:
1649: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073745633 "cppcheck-2.8/test/testtokenize.cpp" $, 1649 $, "void foo(x, y)\n int x;\n int x;\n{}\n" $) $; $assertThrowFail $(@expr1073745634 "cppcheck-2.8/test/testtokenize.cpp" $, 1649 $) $; $} $catch $(@expr1073745635 $const InternalError $&@expr1073745636 $) ${ $} $catch $(@expr1073745637 $... $) ${ $assertThrowFail $(@expr1073745638 "cppcheck-2.8/test/testtokenize.cpp" $, 1649 $) $; $} $} $while $(@expr1073745639 $false $)
1650:
1651:
1652: ;
1653:
1654: $tokenizeAndStringify_ $(@expr1073745640 "cppcheck-2.8/test/testtokenize.cpp" $, 1654 $, "void foo(int, int)\n{}" $)
1655: ;
1656: $if $(@expr1073745641 $!@expr1073745642 $assertEquals $(@expr1073745643 "cppcheck-2.8/test/testtokenize.cpp" $, 1656 $, "" $, errout@var100 .@expr3820 str (@expr3821 ) $) $) { $return ; }
1657:
1658:
1659: $tokenizeAndStringify_ $(@expr1073745646 "cppcheck-2.8/test/testtokenize.cpp" $, 1659 $, "sal_Bool ShapeHasText(sal_uLong, sal_uLong) const {\n    return sal_True;\n}\nvoid CreateSdrOLEFromStorage() {\n    comphelper::EmbeddedObjectContainer aCnt( xDestStorage );\n    { }\n}" $)
1660:
|
1664:
1665: ;
1666: $if $(@expr1073745647 $!@expr1073745648 $assertEquals $(@expr1073745649 "cppcheck-2.8/test/testtokenize.cpp" $, 1666 $, "" $, errout@var100 .@expr3820 str (@expr3821 ) $) $) { $return ; }
1667: }
1668:
1669: void simplifyFunctionTryCatch ( ) {
1670: $if $(@expr1073745652 $!@expr1073745653 $assertEquals $(@expr1073745654 "cppcheck-2.8/test/testtokenize.cpp" $, 1670 $, "void foo ( ) { try {\n} catch ( int ) {\n} catch ( char ) {\n} }" $, $tokenizeAndStringify_ $(@expr1073745655 "cppcheck-2.8/test/testtokenize.cpp" $, 1670 $, "void foo() try {\n} catch (int) {\n} catch (char) {\n}" $) $) $) { $return
1671:
|
1676:
1677: ; }
1678:
1679: $if $(@expr1073745656 $!@expr1073745657 $assertEquals $(@expr1073745658 "cppcheck-2.8/test/testtokenize.cpp" $, 1679 $, "void foo ( ) { try {\nstruct S {\nvoid bar ( ) { try {\n} catch ( int ) {\n} catch ( char ) {\n} }\n} ;\n} catch ( long ) {\n} }" $, $tokenizeAndStringify_ $(@expr1073745659 "cppcheck-2.8/test/testtokenize.cpp" $, 1679 $, "void foo() try {\n  struct S {\n    void bar() try {\n    } catch (int) {\n    } catch (char) {\n    }\n  };\n} catch (long) {\n}" $) $) $) { $return
1680:
|
1695:
1696: ; }
1697: }
1698:
1699:
1700: void removeParentheses1 ( ) {
1701: const char code@var238 [@expr1073745660 34 ] =@expr1073745661 "void foo(){    free(((void*)p));}"
1702:
1703:
1704: ;
1705:
1706: $if $(@expr1073745662 $!@expr1073745663 $assertEquals $(@expr1073745664 "cppcheck-2.8/test/testtokenize.cpp" $, 1706 $, "void foo ( ) { free ( ( void * ) p ) ; }" $, $tokenizeAndStringify_ $(@expr1073745665 "cppcheck-2.8/test/testtokenize.cpp" $, 1706 $, code@var238 $) $) $) { $return ; }
1707: }
1708:
1709: void removeParentheses3 ( ) {
1710: {
1711: const char code@var239 [@expr1073745666 40 ] =@expr1073745667 "void foo(){    if (( true )==(true)){}}"
1712:
1713:
1714: ;
1715: $if $(@expr1073745668 $!@expr1073745669 $assertEquals $(@expr1073745670 "cppcheck-2.8/test/testtokenize.cpp" $, 1715 $, "void foo ( ) { if ( true == true ) { } }" $, $tokenizeAndStringify_ $(@expr1073745671 "cppcheck-2.8/test/testtokenize.cpp" $, 1715 $, code@var239 $) $) $) { $return ; }
1716: }
1717:
1718: {
1719: const char code@var240 [@expr1073745672 34 ] =@expr1073745673 "void foo(){    if (( 2 )==(2)){}}"
1720:
1721:
1722: ;
1723: $if $(@expr1073745674 $!@expr1073745675 $assertEquals $(@expr1073745676 "cppcheck-2.8/test/testtokenize.cpp" $, 1723 $, "void foo ( ) { if ( 2 == 2 ) { } }" $, $tokenizeAndStringify_ $(@expr1073745677 "cppcheck-2.8/test/testtokenize.cpp" $, 1723 $, code@var240 $) $) $) { $return ; }
1724: }
1725:
1726: {
1727: const char code@var241 [@expr1073745678 29 ] =@expr1073745679 "void foo(){    if( g(10)){}}"
1728:
1729:
1730: ;
1731: $if $(@expr1073745680 $!@expr1073745681 $assertEquals $(@expr1073745682 "cppcheck-2.8/test/testtokenize.cpp" $, 1731 $, "void foo ( ) { if ( g ( 10 ) ) { } }" $, $tokenizeAndStringify_ $(@expr1073745683 "cppcheck-2.8/test/testtokenize.cpp" $, 1731 $, code@var241 $) $) $) { $return ; }
1732: }
1733: }
1734:
1735:
1736: void removeParentheses4 ( ) {
1737: const char code@var242 [@expr1073745684 27 ] =@expr1073745685 "void foo(){    (free(p));}"
1738:
1739:
1740: ;
1741: $if $(@expr1073745686 $!@expr1073745687 $assertEquals $(@expr1073745688 "cppcheck-2.8/test/testtokenize.cpp" $, 1741 $, "void foo ( ) { free ( p ) ; }" $, $tokenizeAndStringify_ $(@expr1073745689 "cppcheck-2.8/test/testtokenize.cpp" $, 1741 $, code@var242 $) $) $) { $return ; }
1742: }
1743:
1744: void removeParentheses5 ( ) {
1745:
1746: {
1747: const char code@var243 [@expr1073745690 28 ] =@expr1073745691 "void foo(){    (delete p);}"
1748:
1749:
1750: ;
1751: $if $(@expr1073745692 $!@expr1073745693 $assertEquals $(@expr1073745694 "cppcheck-2.8/test/testtokenize.cpp" $, 1751 $, "void foo ( ) { delete p ; }" $, $tokenizeAndStringify_ $(@expr1073745695 "cppcheck-2.8/test/testtokenize.cpp" $, 1751 $, code@var243 $) $) $) { $return ; }
1752: }
1753:
1754:
1755: {
1756: const char code@var244 [@expr1073745696 31 ] =@expr1073745697 "void foo(){    (delete [] p);}"
1757:
1758:
1759: ;
1760: $if $(@expr1073745698 $!@expr1073745699 $assertEquals $(@expr1073745700 "cppcheck-2.8/test/testtokenize.cpp" $, 1760 $, "void foo ( ) { delete [ ] p ; }" $, $tokenizeAndStringify_ $(@expr1073745701 "cppcheck-2.8/test/testtokenize.cpp" $, 1760 $, code@var244 $) $) $) { $return ; }
1761: }
1762: }
1763:
1764:
1765: void removeParentheses6 ( ) {
1766: {
1767: const char code@var245 [@expr1073745702 12 ] =@expr1073745703 "(!(abc.a));" ;
1768: $if $(@expr1073745704 $!@expr1073745705 $assertEquals $(@expr1073745706 "cppcheck-2.8/test/testtokenize.cpp" $, 1768 $, "( ! abc . a ) ;" $, $tokenizeAndStringify_ $(@expr1073745707 "cppcheck-2.8/test/testtokenize.cpp" $, 1768 $, code@var245 $) $) $) { $return ; }
1769: }
1770:
1771: {
1772: const char code@var246 [@expr1073745708 14 ] =@expr1073745709 "(!(a.b.c.d));" ;
1773: $if $(@expr1073745710 $!@expr1073745711 $assertEquals $(@expr1073745712 "cppcheck-2.8/test/testtokenize.cpp" $, 1773 $, "( ! a . b . c . d ) ;" $, $tokenizeAndStringify_ $(@expr1073745713 "cppcheck-2.8/test/testtokenize.cpp" $, 1773 $, code@var246 $) $) $) { $return ; }
1774: }
1775: }
1776:
1777: void removeParentheses7 ( ) {
1778: const char code@var247 [@expr1073745714 30 ] =@expr1073745715 ";char *p; (delete(p), (p)=0);" ;
1779: $if $(@expr1073745716 $!@expr1073745717 $assertEquals $(@expr1073745718 "cppcheck-2.8/test/testtokenize.cpp" $, 1779 $, "; char * p ; delete ( p ) , p = 0 ;" $, $tokenizeAndStringify_ $(@expr1073745719 "cppcheck-2.8/test/testtokenize.cpp" $, 1779 $, code@var247 $) $) $) { $return ; }
1780: }
1781:
1782: void removeParentheses8 ( ) {
1783: const char code@var248 [@expr1073745721 64 ] =@expr1073745722 "struct foo {\n    void operator delete(void *obj, size_t sz);\n}\n"
1784:
1785: ;
1786: const std ::@expr1073745723 string actual@var249 (@expr1073745724 $tokenizeAndStringify_ $(@expr1073745725 "cppcheck-2.8/test/testtokenize.cpp" $, 1786 $, code@var248 , true , Settings ::@expr1073745726 Win32A@expr1073745720 $) ) ;
1787:
1788: const char expected@var250 [@expr1073745727 71 ] =@expr1073745728 "struct foo {\nvoid operatordelete ( void * obj , unsigned long sz ) ;\n}"
1789:
1790: ;
1791:
1792: $if $(@expr1073745729 $!@expr1073745730 $assertEquals $(@expr1073745731 "cppcheck-2.8/test/testtokenize.cpp" $, 1792 $, expected@var250 $, actual@var249 $) $) { $return ; }
1793: }
1794:
1795: void removeParentheses9 ( ) {
1796: $if $(@expr1073745732 $!@expr1073745733 $assertEquals $(@expr1073745734 "cppcheck-2.8/test/testtokenize.cpp" $, 1796 $, "void delete ( double num ) ;" $, $tokenizeAndStringify_ $(@expr1073745735 "cppcheck-2.8/test/testtokenize.cpp" $, 1796 $, "void delete(double num);" $) $) $) { $return ; }
1797: }
1798:
1799: void removeParentheses10 ( ) {
1800: $if $(@expr1073745736 $!@expr1073745737 $assertEquals $(@expr1073745738 "cppcheck-2.8/test/testtokenize.cpp" $, 1800 $, "p = buf + 8 ;" $, $tokenizeAndStringify_ $(@expr1073745739 "cppcheck-2.8/test/testtokenize.cpp" $, 1800 $, "p = (buf + 8);" $) $) $) { $return ; }
1801: }
1802:
1803: void removeParentheses11 ( ) {
1804:
1805: $if $(@expr1073745740 $!@expr1073745741 $assertEquals $(@expr1073745742 "cppcheck-2.8/test/testtokenize.cpp" $, 1805 $, "{ } x ( ) ;" $, $tokenizeAndStringify_ $(@expr1073745743 "cppcheck-2.8/test/testtokenize.cpp" $, 1805 $, "{}(x());" $) $) $) { $return ; }
1806: }
1807:
1808: void removeParentheses12 ( ) {
1809:
1810: $if $(@expr1073745744 $!@expr1073745745 $assertEquals $(@expr1073745746 "cppcheck-2.8/test/testtokenize.cpp" $, 1810 $, ", x = 0 ;" $, $tokenizeAndStringify_ $(@expr1073745747 "cppcheck-2.8/test/testtokenize.cpp" $, 1810 $, ",(x)=0;" $) $) $) { $return ; }
1811: }
1812:
1813: void removeParentheses13 ( ) {
1814: $if $(@expr1073745748 $!@expr1073745749 $assertEquals $(@expr1073745750 "cppcheck-2.8/test/testtokenize.cpp" $, 1814 $, "; f ( a + b , c ) ;" $, $tokenizeAndStringify_ $(@expr1073745751 "cppcheck-2.8/test/testtokenize.cpp" $, 1814 $, ";f((a+b),c);" $) $) $) { $return ; }
1815: $if $(@expr1073745752 $!@expr1073745753 $assertEquals $(@expr1073745754 "cppcheck-2.8/test/testtokenize.cpp" $, 1815 $, "; x = y [ a + b ] ;" $, $tokenizeAndStringify_ $(@expr1073745755 "cppcheck-2.8/test/testtokenize.cpp" $, 1815 $, ";x=y[(a+b)];" $) $) $) { $return ; }
1816: }
1817:
1818: void removeParentheses14 ( ) {
1819: $if $(@expr1073745756 $!@expr1073745757 $assertEquals $(@expr1073745758 "cppcheck-2.8/test/testtokenize.cpp" $, 1819 $, "{ if ( ( i & 1 ) == 0 ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073745759 "cppcheck-2.8/test/testtokenize.cpp" $, 1819 $, "{ if ( (i & 1) == 0 ); }" $) $) $) { $return ; }
1820: }
1821:
1822: void removeParentheses15 ( ) {
1823: $if $(@expr1073745760 $!@expr1073745761 $assertEquals $(@expr1073745762 "cppcheck-2.8/test/testtokenize.cpp" $, 1823 $, "a = b ? c : 123 ;" $, $tokenizeAndStringify_ $(@expr1073745763 "cppcheck-2.8/test/testtokenize.cpp" $, 1823 $, "a = b ? c : (123);" $) $) $) { $return ; }
1824: $if $(@expr1073745764 $!@expr1073745765 $assertEquals $(@expr1073745766 "cppcheck-2.8/test/testtokenize.cpp" $, 1824 $, "a = b ? c : ( 123 + 456 ) ;" $, $tokenizeAndStringify_ $(@expr1073745767 "cppcheck-2.8/test/testtokenize.cpp" $, 1824 $, "a = b ? c : ((123)+(456));" $) $) $) { $return ; }
1825: $if $(@expr1073745768 $!@expr1073745769 $assertEquals $(@expr1073745770 "cppcheck-2.8/test/testtokenize.cpp" $, 1825 $, "a = b ? 123 : c ;" $, $tokenizeAndStringify_ $(@expr1073745771 "cppcheck-2.8/test/testtokenize.cpp" $, 1825 $, "a = b ? (123) : c;" $) $) $) { $return ; }
1826:
1827:
1828: $if $(@expr1073745772 $!@expr1073745773 $assertEquals $(@expr1073745774 "cppcheck-2.8/test/testtokenize.cpp" $, 1828 $, "a = b ? c : ( d = 1 , 0 ) ;" $, $tokenizeAndStringify_ $(@expr1073745775 "cppcheck-2.8/test/testtokenize.cpp" $, 1828 $, "a = b ? c : (d=1,0);" $) $) $) { $return ; }
1829: }
1830:
1831: void removeParentheses16 ( ) {
1832:
1833: $if $(@expr1073745776 $!@expr1073745777 $assertEquals $(@expr1073745778 "cppcheck-2.8/test/testtokenize.cpp" $, 1833 $, "; * x = 0 ;" $, $tokenizeAndStringify_ $(@expr1073745779 "cppcheck-2.8/test/testtokenize.cpp" $, 1833 $, ";*(x)=0;" $) $) $) { $return ; }
1834: $if $(@expr1073745780 $!@expr1073745781 $assertEquals $(@expr1073745782 "cppcheck-2.8/test/testtokenize.cpp" $, 1834 $, "; * x . y = 0 ;" $, $tokenizeAndStringify_ $(@expr1073745783 "cppcheck-2.8/test/testtokenize.cpp" $, 1834 $, ";*(x.y)=0;" $) $) $) { $return ; }
1835: }
1836:
1837: void removeParentheses17 ( ) {
1838: $if $(@expr1073745784 $!@expr1073745785 $assertEquals $(@expr1073745786 "cppcheck-2.8/test/testtokenize.cpp" $, 1838 $, "a ? b : ( c > 0 ? d : e ) ;" $, $tokenizeAndStringify_ $(@expr1073745787 "cppcheck-2.8/test/testtokenize.cpp" $, 1838 $, "a?b:(c>0?d:e);" $) $) $) { $return ; }
1839: }
1840:
1841: void removeParentheses18 ( ) {
1842: $if $(@expr1073745788 $!@expr1073745789 $assertEquals $(@expr1073745790 "cppcheck-2.8/test/testtokenize.cpp" $, 1842 $, "float ( * a ) [ 2 ] ;" $, $tokenizeAndStringify_ $(@expr1073745791 "cppcheck-2.8/test/testtokenize.cpp" $, 1842 $, "float(*a)[2];" $) $) $) { $return ; }
1843: }
1844:
1845: void removeParentheses19 ( ) {
1846: $if $(@expr1073745792 $!@expr1073745793 $assertEquals $(@expr1073745794 "cppcheck-2.8/test/testtokenize.cpp" $, 1846 $, "( ( ( typeof ( X ) ) * ) 0 ) ;" $, $tokenizeAndStringify_ $(@expr1073745795 "cppcheck-2.8/test/testtokenize.cpp" $, 1846 $, "(((typeof(X))*)0);" $) $) $) { $return ; }
1847: }
1848:
1849: void removeParentheses20 ( ) {
1850: $if $(@expr1073745796 $!@expr1073745797 $assertEquals $(@expr1073745798 "cppcheck-2.8/test/testtokenize.cpp" $, 1850 $, "a < b < int > > ( 2 ) ;" $, $tokenizeAndStringify_ $(@expr1073745799 "cppcheck-2.8/test/testtokenize.cpp" $, 1850 $, "a<b<int>>(2);" $) $) $) { $return ; }
1851: }
1852:
1853: void removeParentheses21 ( ) {
1854: $if $(@expr1073745800 $!@expr1073745801 $assertEquals $(@expr1073745802 "cppcheck-2.8/test/testtokenize.cpp" $, 1854 $, "a = ( int ) - b ;" $, $tokenizeAndStringify_ $(@expr1073745803 "cppcheck-2.8/test/testtokenize.cpp" $, 1854 $, "a = ((int)-b);" $) $) $) { $return ; }
1855: }
1856:
1857: void removeParentheses22 ( ) {
1858: static char code@var251 [@expr1073745804 61 ] =@expr1073745805 "struct S { char *(a); char &(b); const static char *(c); } ;"
1859:
1860:
1861:
1862: ;
1863: static char exp@var252 [@expr1073745806 61 ] =@expr1073745807 "struct S { char * a ; char & b ; static const char * c ; } ;"
1864:
1865:
1866:
1867: ;
1868: $if $(@expr1073745808 $!@expr1073745809 $assertEquals $(@expr1073745810 "cppcheck-2.8/test/testtokenize.cpp" $, 1868 $, exp@var252 $, $tokenizeAndStringify_ $(@expr1073745811 "cppcheck-2.8/test/testtokenize.cpp" $, 1868 $, code@var251 $) $) $) { $return ; }
1869: }
1870:
1871: void removeParentheses23 ( ) {
1872:
1873: {
1874: static char code@var253 [@expr1073745812 51 ] =@expr1073745813 "; * * p f ( ) int = { new int ( * [ 2 ] ) ; void }" ;
1875: static char exp@var254 [@expr1073745814 51 ] =@expr1073745815 "; * * p f ( ) int = { new int ( * [ 2 ] ) ; void }" ;
1876: $if $(@expr1073745816 $!@expr1073745817 $assertEquals $(@expr1073745818 "cppcheck-2.8/test/testtokenize.cpp" $, 1876 $, exp@var254 $, $tokenizeAndStringify_ $(@expr1073745819 "cppcheck-2.8/test/testtokenize.cpp" $, 1876 $, code@var253 $) $) $) { $return ; }
1877: }
1878:
1879: {
1880: static char code@var255 [@expr1073745820 34 ] =@expr1073745821 "int * f [ 1 ] = { new ( int ) } ;" ;
1881: static char exp@var256 [@expr1073745822 30 ] =@expr1073745823 "int * f [ 1 ] = { new int } ;" ;
1882: $if $(@expr1073745824 $!@expr1073745825 $assertEquals $(@expr1073745826 "cppcheck-2.8/test/testtokenize.cpp" $, 1882 $, exp@var256 $, $tokenizeAndStringify_ $(@expr1073745827 "cppcheck-2.8/test/testtokenize.cpp" $, 1882 $, code@var255 $) $) $) { $return ; }
1883: }
1884: {
1885: static char code@var257 [@expr1073745828 42 ] =@expr1073745829 "int * * f [ 1 ] = { new ( int ) [ 1 ] } ;" ;
1886: static char exp@var258 [@expr1073745830 38 ] =@expr1073745831 "int * * f [ 1 ] = { new int [ 1 ] } ;" ;
1887: $if $(@expr1073745832 $!@expr1073745833 $assertEquals $(@expr1073745834 "cppcheck-2.8/test/testtokenize.cpp" $, 1887 $, exp@var258 $, $tokenizeAndStringify_ $(@expr1073745835 "cppcheck-2.8/test/testtokenize.cpp" $, 1887 $, code@var257 $) $) $) { $return ; }
1888: }
1889: {
1890: static char code@var259 [@expr1073745836 52 ] =@expr1073745837 "list < int > * f [ 1 ] = { new ( list < int > ) } ;" ;
1891: static char exp@var260 [@expr1073745838 48 ] =@expr1073745839 "list < int > * f [ 1 ] = { new list < int > } ;" ;
1892: $if $(@expr1073745840 $!@expr1073745841 $assertEquals $(@expr1073745842 "cppcheck-2.8/test/testtokenize.cpp" $, 1892 $, exp@var260 $, $tokenizeAndStringify_ $(@expr1073745843 "cppcheck-2.8/test/testtokenize.cpp" $, 1892 $, code@var259 $) $) $) { $return ; }
1893: }
1894:
1895: {
1896: static char code@var261 [@expr1073745844 40 ] =@expr1073745845 "void *operator new(__SIZE_TYPE__, int);" ;
1897: static char exp@var262 [@expr1073745846 45 ] =@expr1073745847 "void * operatornew ( __SIZE_TYPE__ , int ) ;" ;
1898: $if $(@expr1073745848 $!@expr1073745849 $assertEquals $(@expr1073745850 "cppcheck-2.8/test/testtokenize.cpp" $, 1898 $, exp@var262 $, $tokenizeAndStringify_ $(@expr1073745851 "cppcheck-2.8/test/testtokenize.cpp" $, 1898 $, code@var261 $) $) $) { $return ; }
1899: }
1900: }
1901:
1902: void removeParentheses24 ( ) {
1903: static char code@var263 [@expr1073745852 41 ] =@expr1073745853 "std::hash<decltype(t._data)>()(t._data);" ;
1904: static char exp@var264 [@expr1073745854 59 ] =@expr1073745855 "std :: hash < decltype ( t . _data ) > ( ) ( t . _data ) ;" ;
1905: $if $(@expr1073745856 $!@expr1073745857 $assertEquals $(@expr1073745858 "cppcheck-2.8/test/testtokenize.cpp" $, 1905 $, exp@var264 $, $tokenizeAndStringify_ $(@expr1073745859 "cppcheck-2.8/test/testtokenize.cpp" $, 1905 $, code@var263 $) $) $) { $return ; }
1906: }
1907:
1908: void removeParentheses25 ( ) {
1909: static char code@var265 [@expr1073745860 9 ] =@expr1073745861 "a=(b,c);" ;
1910: static char exp@var266 [@expr1073745862 16 ] =@expr1073745863 "a = ( b , c ) ;" ;
1911: $if $(@expr1073745864 $!@expr1073745865 $assertEquals $(@expr1073745866 "cppcheck-2.8/test/testtokenize.cpp" $, 1911 $, exp@var266 $, $tokenizeAndStringify_ $(@expr1073745867 "cppcheck-2.8/test/testtokenize.cpp" $, 1911 $, code@var265 $) $) $) { $return ; }
1912: }
1913:
1914: void removeParentheses26 ( ) {
1915: static char code@var267 [@expr1073745868 9 ] =@expr1073745869 "a[0](0);" ;
1916: static char exp@var268 [@expr1073745870 16 ] =@expr1073745871 "a [ 0 ] ( 0 ) ;" ;
1917: $if $(@expr1073745872 $!@expr1073745873 $assertEquals $(@expr1073745874 "cppcheck-2.8/test/testtokenize.cpp" $, 1917 $, exp@var268 $, $tokenizeAndStringify_ $(@expr1073745875 "cppcheck-2.8/test/testtokenize.cpp" $, 1917 $, code@var267 $) $) $) { $return ; }
1918: }
1919:
1920: void tokenize_double ( ) {
1921: const char code@var269 [@expr1073745876 118 ] =@expr1073745877 "void f() {\n    double a = 4.2;\n    float b = 4.2f;\n    double c = 4.2e+10;\n    double d = 4.2e-10;\n    int e = 4+2;\n}"
1922:
|
1926:
1927: ;
1928: $if $(@expr1073745878 $!@expr1073745879 $assertEquals $(@expr1073745880 "cppcheck-2.8/test/testtokenize.cpp" $, 1928 $, "void f ( ) {\ndouble a ; a = 4.2 ;\nfloat b ; b = 4.2f ;\ndouble c ; c = 4.2e+10 ;\ndouble d ; d = 4.2e-10 ;\nint e ; e = 4 + 2 ;\n}" $, $tokenizeAndStringify_ $(@expr1073745881 "cppcheck-2.8/test/testtokenize.cpp" $, 1928 $, code@var269 $) $) $) { $return
1929:
|
1933:
1934: ; }
1935: }
1936:
1937: void tokenize_strings ( ) {
1938: const char code@var270 [@expr1073745882 59 ] =@expr1073745883 "void f() {\nconst char *a =\n{\n\"hello \"\n\"more \"\n\"world\"\n};\n}"
1939:
|
1944:
1945: ;
1946: $if $(@expr1073745884 $!@expr1073745885 $assertEquals $(@expr1073745886 "cppcheck-2.8/test/testtokenize.cpp" $, 1946 $, "void f ( ) {\nconst char * a ; a =\n{\n\"hello more world\"\n\n\n} ;\n}" $, $tokenizeAndStringify_ $(@expr1073745887 "cppcheck-2.8/test/testtokenize.cpp" $, 1946 $, code@var270 $) $) $) { $return
1947:
|
1952:
1953: ; }
1954: }
1955:
1956: void simplifyStructDecl ( ) {
1957: const char code@var271 [@expr1073745888 36 ] =@expr1073745889 "const struct A { int a; int b; } a;" ;
1958: $if $(@expr1073745890 $!@expr1073745891 $assertEquals $(@expr1073745892 "cppcheck-2.8/test/testtokenize.cpp" $, 1958 $, "struct A { int a ; int b ; } ; const struct A a ;" $, $tokenizeAndStringify_ $(@expr1073745893 "cppcheck-2.8/test/testtokenize.cpp" $, 1958 $, code@var271 $) $) $) { $return ; }
1959:
1960:
1961: const char code2@var272 [@expr1073745894 15 ] =@expr1073745895 "enum A {} (a);" ;
1962: const char expected2@var273 [@expr1073745896 24 ] =@expr1073745897 "enum A { } ; enum A a ;" ;
1963: $if $(@expr1073745898 $!@expr1073745899 $assertEquals $(@expr1073745900 "cppcheck-2.8/test/testtokenize.cpp" $, 1963 $, expected2@var273 $, $tokenizeAndStringify_ $(@expr1073745901 "cppcheck-2.8/test/testtokenize.cpp" $, 1963 $, code2@var272 $) $) $) { $return ; }
1964:
1965:
1966: const char code3@var274 [@expr1073745902 33 ] =@expr1073745903 "struct a { int b; } static e[1];" ;
1967: const char expected3@var275 [@expr1073745904 49 ] =@expr1073745905 "struct a { int b ; } ; struct a static e [ 1 ] ;" ;
1968: $if $(@expr1073745906 $!@expr1073745907 $assertEquals $(@expr1073745908 "cppcheck-2.8/test/testtokenize.cpp" $, 1968 $, expected3@var275 $, $tokenizeAndStringify_ $(@expr1073745909 "cppcheck-2.8/test/testtokenize.cpp" $, 1968 $, code3@var274 $) $) $) { $return ; }
1969: }
1970:
1971: void vardecl1 ( ) {
1972: const char code@var276 [@expr1073745910 19 ] =@expr1073745911 "unsigned int a, b;" ;
1973:
1974: const std ::@expr1073745912 string actual@var277 (@expr1073745913 $tokenizeAndStringify_ $(@expr1073745914 "cppcheck-2.8/test/testtokenize.cpp" $, 1974 $, code@var276 $) ) ;
1975:
1976: $if $(@expr1073745915 $!@expr1073745916 $assertEquals $(@expr1073745917 "cppcheck-2.8/test/testtokenize.cpp" $, 1976 $, "unsigned int a ; unsigned int b ;" $, actual@var277 $) $) { $return ; }
1977: }
1978:
1979: void vardecl2 ( ) {
1980: const char code@var278 [@expr1073745918 37 ] =@expr1073745919 "void foo(a,b) unsigned int a, b; { }" ;
1981:
1982: const std ::@expr1073745920 string actual@var279 (@expr1073745921 $tokenizeAndStringify_ $(@expr1073745922 "cppcheck-2.8/test/testtokenize.cpp" $, 1982 $, code@var278 $) ) ;
1983:
1984: $if $(@expr1073745923 $!@expr1073745924 $assertEquals $(@expr1073745925 "cppcheck-2.8/test/testtokenize.cpp" $, 1984 $, "void foo ( unsigned int a , unsigned int b ) { }" $, actual@var279 $) $) { $return ; }
1985: }
1986:
1987: void vardecl3 ( ) {
1988: const char code@var280 [@expr1073745926 40 ] =@expr1073745927 "void f() { char * p = foo<10,char>(); }" ;
1989: const std ::@expr1073745928 string actual@var281 (@expr1073745929 $tokenizeAndStringify_ $(@expr1073745930 "cppcheck-2.8/test/testtokenize.cpp" $, 1989 $, code@var280 $) ) ;
1990: $if $(@expr1073745931 $!@expr1073745932 $assertEquals $(@expr1073745933 "cppcheck-2.8/test/testtokenize.cpp" $, 1990 $, "void f ( ) { char * p ; p = foo < 10 , char > ( ) ; }" $, actual@var281 $) $) { $return ; }
1991: }
1992:
1993: void vardecl4 ( ) {
1994:
1995:
1996: const char code1@var282 [@expr1073745934 16 ] =@expr1073745935 "void *p = NULL;" ;
1997: const char res1@var283 [@expr1073745936 22 ] =@expr1073745937 "void * p ; p = NULL ;" ;
1998: $if $(@expr1073745938 $!@expr1073745939 $assertEquals $(@expr1073745940 "cppcheck-2.8/test/testtokenize.cpp" $, 1998 $, res1@var283 $, $tokenizeAndStringify_ $(@expr1073745941 "cppcheck-2.8/test/testtokenize.cpp" $, 1998 $, code1@var282 $) $) $) { $return ; }
1999:
2000: const char code2@var284 [@expr1073745942 22 ] =@expr1073745943 "const void *p = NULL;" ;
2001: const char res2@var285 [@expr1073745944 28 ] =@expr1073745945 "const void * p ; p = NULL ;" ;
2002: $if $(@expr1073745946 $!@expr1073745947 $assertEquals $(@expr1073745948 "cppcheck-2.8/test/testtokenize.cpp" $, 2002 $, res2@var285 $, $tokenizeAndStringify_ $(@expr1073745949 "cppcheck-2.8/test/testtokenize.cpp" $, 2002 $, code2@var284 $) $) $) { $return ; }
2003:
2004: const char code3@var286 [@expr1073745950 23 ] =@expr1073745951 "void * const p = NULL;" ;
2005: const char res3@var287 [@expr1073745952 28 ] =@expr1073745953 "void * const p ; p = NULL ;" ;
2006: $if $(@expr1073745954 $!@expr1073745955 $assertEquals $(@expr1073745956 "cppcheck-2.8/test/testtokenize.cpp" $, 2006 $, res3@var287 $, $tokenizeAndStringify_ $(@expr1073745957 "cppcheck-2.8/test/testtokenize.cpp" $, 2006 $, code3@var286 $) $) $) { $return ; }
2007:
2008: const char code4@var288 [@expr1073745958 29 ] =@expr1073745959 "const void * const p = NULL;" ;
2009: const char res4@var289 [@expr1073745960 34 ] =@expr1073745961 "const void * const p ; p = NULL ;" ;
2010: $if $(@expr1073745962 $!@expr1073745963 $assertEquals $(@expr1073745964 "cppcheck-2.8/test/testtokenize.cpp" $, 2010 $, res4@var289 $, $tokenizeAndStringify_ $(@expr1073745965 "cppcheck-2.8/test/testtokenize.cpp" $, 2010 $, code4@var288 $) $) $) { $return ; }
2011:
2012: const char code5@var290 [@expr1073745966 32 ] =@expr1073745967 "const void * volatile p = NULL;" ;
2013: const char res5@var291 [@expr1073745968 37 ] =@expr1073745969 "const void * volatile p ; p = NULL ;" ;
2014: $if $(@expr1073745970 $!@expr1073745971 $assertEquals $(@expr1073745972 "cppcheck-2.8/test/testtokenize.cpp" $, 2014 $, res5@var291 $, $tokenizeAndStringify_ $(@expr1073745973 "cppcheck-2.8/test/testtokenize.cpp" $, 2014 $, code5@var290 $) $) $) { $return ; }
2015: }
2016:
2017: void vardecl5 ( ) {
2018: $if $(@expr1073745974 $!@expr1073745975 $assertEquals $(@expr1073745976 "cppcheck-2.8/test/testtokenize.cpp" $, 2018 $, "void foo ( int nX ) {\nint addI ; addI = frontPoint == 2 || frontPoint == 1 ? ( i = 0 , 1 ) : ( i = nX - 2 , -1 ) ;\n}" $, $tokenizeAndStringify_ $(@expr1073745977 "cppcheck-2.8/test/testtokenize.cpp" $, 2018 $, "void foo(int nX) {\n    int addI = frontPoint == 2 || frontPoint == 1 ? i = 0, 1 : (i = nX - 2, -1);\n}" $) $) $) { $return
2019:
2020:
2021:
2022: ; }
2023: }
2024:
2025: void vardecl_stl_1 ( ) {
2026:
2027:
2028: const char code1@var292 [@expr1073745978 30 ] =@expr1073745979 "std::vector<std::string>a, b;" ;
2029: const char res1@var293 [@expr1073745980 72 ] =@expr1073745981 "std :: vector < std :: string > a ; std :: vector < std :: string > b ;" ;
2030: $if $(@expr1073745982 $!@expr1073745983 $assertEquals $(@expr1073745984 "cppcheck-2.8/test/testtokenize.cpp" $, 2030 $, res1@var293 $, $tokenizeAndStringify_ $(@expr1073745985 "cppcheck-2.8/test/testtokenize.cpp" $, 2030 $, code1@var292 $) $) $) { $return ; }
2031:
2032: const char code2@var294 [@expr1073745986 50 ] =@expr1073745987 "std::vector<std::string>::const_iterator it, cit;" ;
2033: const char res2@var295 [@expr1073745988 111 ] =@expr1073745989 "std :: vector < std :: string > :: const_iterator it ; std :: vector < std :: string > :: const_iterator cit ;" ;
2034: $if $(@expr1073745990 $!@expr1073745991 $assertEquals $(@expr1073745992 "cppcheck-2.8/test/testtokenize.cpp" $, 2034 $, res2@var295 $, $tokenizeAndStringify_ $(@expr1073745993 "cppcheck-2.8/test/testtokenize.cpp" $, 2034 $, code2@var294 $) $) $) { $return ; }
2035:
2036: const char code3@var296 [@expr1073745994 58 ] =@expr1073745995 "std::vector<std::pair<std::string, std::string > > *c, d;" ;
2037: const char res3@var297 [@expr1073745996 138 ] =@expr1073745997 "std :: vector < std :: pair < std :: string , std :: string > > * c ; std :: vector < std :: pair < std :: string , std :: string > > d ;" ;
2038: $if $(@expr1073745998 $!@expr1073745999 $assertEquals $(@expr1073746000 "cppcheck-2.8/test/testtokenize.cpp" $, 2038 $, res3@var297 $, $tokenizeAndStringify_ $(@expr1073746001 "cppcheck-2.8/test/testtokenize.cpp" $, 2038 $, code3@var296 $) $) $) { $return ; }
2039: }
2040:
2041: void vardecl_stl_2 ( ) {
2042: const char code1@var298 [@expr1073746002 27 ] =@expr1073746003 "{ std::string x = \"abc\"; }" ;
2043: $if $(@expr1073746004 $!@expr1073746005 $assertEquals $(@expr1073746006 "cppcheck-2.8/test/testtokenize.cpp" $, 2043 $, "{ std :: string x ; x = \"abc\" ; }" $, $tokenizeAndStringify_ $(@expr1073746007 "cppcheck-2.8/test/testtokenize.cpp" $, 2043 $, code1@var298 $) $) $) { $return ; }
2044:
2045: const char code2@var299 [@expr1073746008 28 ] =@expr1073746009 "{ std::vector<int> x = y; }" ;
2046: $if $(@expr1073746010 $!@expr1073746011 $assertEquals $(@expr1073746012 "cppcheck-2.8/test/testtokenize.cpp" $, 2046 $, "{ std :: vector < int > x ; x = y ; }" $, $tokenizeAndStringify_ $(@expr1073746013 "cppcheck-2.8/test/testtokenize.cpp" $, 2046 $, code2@var299 $) $) $) { $return ; }
2047: }
2048:
2049: void vardecl_stl_3 ( )
2050: {
2051: const char code1@var300 [@expr1073746014 33 ] =@expr1073746015 "{ std::string const x = \"abc\"; }" ;
2052: $if $(@expr1073746016 $!@expr1073746017 $assertEquals $(@expr1073746018 "cppcheck-2.8/test/testtokenize.cpp" $, 2052 $, "{ const std :: string x = \"abc\" ; }" $, $tokenizeAndStringify_ $(@expr1073746019 "cppcheck-2.8/test/testtokenize.cpp" $, 2052 $, code1@var300 $) $) $) { $return ; }
2053:
2054: const char code2@var301 [@expr1073746020 34 ] =@expr1073746021 "{ std::vector<int> const x = y; }" ;
2055: $if $(@expr1073746022 $!@expr1073746023 $assertEquals $(@expr1073746024 "cppcheck-2.8/test/testtokenize.cpp" $, 2055 $, "{ const std :: vector < int > x = y ; }" $, $tokenizeAndStringify_ $(@expr1073746025 "cppcheck-2.8/test/testtokenize.cpp" $, 2055 $, code2@var301 $) $) $) { $return ; }
2056: }
2057:
2058: void vardecl_template_1 ( ) {
2059:
2060: const char code1@var302 [@expr1073746026 23 ] =@expr1073746027 "b<(1<<24),10,24> u, v;" ;
2061: const char res1@var303 [@expr1073746028 58 ] =@expr1073746029 "b < 16777216 , 10 , 24 > u ; b < 16777216 , 10 , 24 > v ;" ;
2062: $if $(@expr1073746030 $!@expr1073746031 $assertEquals $(@expr1073746032 "cppcheck-2.8/test/testtokenize.cpp" $, 2062 $, res1@var303 $, $tokenizeAndStringify_ $(@expr1073746033 "cppcheck-2.8/test/testtokenize.cpp" $, 2062 $, code1@var302 $) $) $) { $return ; }
2063:
2064: $tokenizeAndStringify_ $(@expr1073746034 "cppcheck-2.8/test/testtokenize.cpp" $, 2064 $, "template <int i = (3>4) > class X4 {};" $) ;
2065: }
2066:
2067: void vardecl_template_2 ( ) {
2068:
2069: const char code@var304 [@expr1073746035 31 ] =@expr1073746036 "const string str = x<8,int>();" ;
2070: const char expected@var305 [@expr1073746037 39 ] =@expr1073746038 "const string str = x < 8 , int > ( ) ;" ;
2071: $if $(@expr1073746039 $!@expr1073746040 $assertEquals $(@expr1073746041 "cppcheck-2.8/test/testtokenize.cpp" $, 2071 $, expected@var305 $, $tokenizeAndStringify_ $(@expr1073746042 "cppcheck-2.8/test/testtokenize.cpp" $, 2071 $, code@var304 $) $) $) { $return ; }
2072: }
2073:
2074: void vardecl_union ( ) {
2075:
2076: const char code1@var306 [@expr1073746043 53 ] =@expr1073746044 "class Fred { public: union { int a ; int b ; } ; } ;" ;
2077: $if $(@expr1073746045 $!@expr1073746046 $assertEquals $(@expr1073746047 "cppcheck-2.8/test/testtokenize.cpp" $, 2077 $, code1@var306 $, $tokenizeAndStringify_ $(@expr1073746048 "cppcheck-2.8/test/testtokenize.cpp" $, 2077 $, code1@var306 $) $) $) { $return ; }
2078:
2079:
2080: const char code2@var307 [@expr1073746049 67 ] =@expr1073746050 "void f() {\n     union {\n         int x;\n         long y;\n     };\n}"
2081:
|
2084:
2085: ;
2086: $if $(@expr1073746051 $!@expr1073746052 $assertEquals $(@expr1073746053 "cppcheck-2.8/test/testtokenize.cpp" $, 2086 $, "void f ( ) {\n\nint x ;\nlong & y = x ;\n\n}" $, $tokenizeAndStringify_ $(@expr1073746054 "cppcheck-2.8/test/testtokenize.cpp" $, 2086 $, code2@var307 $) $) $) { $return ; }
2087:
2088:
2089: const char code3@var308 [@expr1073746055 20 ] =@expr1073746056 "union xy *p = NULL;" ;
2090: $if $(@expr1073746057 $!@expr1073746058 $assertEquals $(@expr1073746059 "cppcheck-2.8/test/testtokenize.cpp" $, 2090 $, "union xy * p ; p = NULL ;" $, $tokenizeAndStringify_ $(@expr1073746060 "cppcheck-2.8/test/testtokenize.cpp" $, 2090 $, code3@var308 $) $) $) { $return ; }
2091: }
2092:
2093: void vardecl_par ( ) {
2094:
2095: const char code@var309 [@expr1073746061 33 ] =@expr1073746062 "Fred<int(*)()> fred1=a, fred2=b;" ;
2096: $if $(@expr1073746063 $!@expr1073746064 $assertEquals $(@expr1073746065 "cppcheck-2.8/test/testtokenize.cpp" $, 2096 $, "Fred < int ( * ) ( ) > fred1 ; fred1 = a ; Fred < int ( * ) ( ) > fred2 ; fred2 = b ;" $, $tokenizeAndStringify_ $(@expr1073746066 "cppcheck-2.8/test/testtokenize.cpp" $, 2096 $, code@var309 $) $) $) { $return ; }
2097: }
2098:
2099: void vardecl_par2 ( ) {
2100:
2101: const char code@var310 [@expr1073746067 40 ] =@expr1073746068 "function<void (shared_ptr<MyClass>)> v;" ;
2102: $if $(@expr1073746069 $!@expr1073746070 $assertEquals $(@expr1073746071 "cppcheck-2.8/test/testtokenize.cpp" $, 2102 $, "function < void ( shared_ptr < MyClass > ) > v ;" $, $tokenizeAndStringify_ $(@expr1073746072 "cppcheck-2.8/test/testtokenize.cpp" $, 2102 $, code@var310 $) $) $) { $return ; }
2103: }
2104:
2105: void vardecl_par3 ( ) {
2106:
2107: const char code@var311 [@expr1073746073 19 ] =@expr1073746074 "Fred x1(a), x2(b);" ;
2108: $if $(@expr1073746075 $!@expr1073746076 $assertEquals $(@expr1073746077 "cppcheck-2.8/test/testtokenize.cpp" $, 2108 $, "Fred x1 ( a ) ; Fred x2 ( b ) ;" $, $tokenizeAndStringify_ $(@expr1073746078 "cppcheck-2.8/test/testtokenize.cpp" $, 2108 $, code@var311 $) $) $) { $return ; }
2109: }
2110:
2111: void vardecl_class_ref ( ) {
2112: const char code@var312 [@expr1073746079 24 ] =@expr1073746080 "class A { B &b1,&b2; };" ;
2113: $if $(@expr1073746081 $!@expr1073746082 $assertEquals $(@expr1073746083 "cppcheck-2.8/test/testtokenize.cpp" $, 2113 $, "class A { B & b1 ; B & b2 ; } ;" $, $tokenizeAndStringify_ $(@expr1073746084 "cppcheck-2.8/test/testtokenize.cpp" $, 2113 $, code@var312 $) $) $) { $return ; }
2114: }
2115:
2116: void vardec_static ( ) {
2117: {
2118:
2119:
2120: const char code@var313 [@expr1073746085 19 ] =@expr1073746086 "static int i = 0 ;" ;
2121: $if $(@expr1073746087 $!@expr1073746088 $assertEquals $(@expr1073746089 "cppcheck-2.8/test/testtokenize.cpp" $, 2121 $, code@var313 $, $tokenizeAndStringify_ $(@expr1073746090 "cppcheck-2.8/test/testtokenize.cpp" $, 2121 $, code@var313 $) $) $) { $return ; }
2122: }
2123:
2124: {
2125: const char code@var314 [@expr1073746091 17 ] =@expr1073746092 "static int a, b;" ;
2126: $if $(@expr1073746093 $!@expr1073746094 $assertEquals $(@expr1073746095 "cppcheck-2.8/test/testtokenize.cpp" $, 2126 $, "static int a ; static int b ;" $, $tokenizeAndStringify_ $(@expr1073746096 "cppcheck-2.8/test/testtokenize.cpp" $, 2126 $, code@var314 $) $) $) { $return ; }
2127: }
2128:
2129: {
2130: const char code@var315 [@expr1073746097 26 ] =@expr1073746098 "static unsigned int a, b;" ;
2131: $if $(@expr1073746099 $!@expr1073746100 $assertEquals $(@expr1073746101 "cppcheck-2.8/test/testtokenize.cpp" $, 2131 $, "static unsigned int a ; static unsigned int b ;" $, $tokenizeAndStringify_ $(@expr1073746102 "cppcheck-2.8/test/testtokenize.cpp" $, 2131 $, code@var315 $) $) $) { $return ; }
2132: }
2133:
2134: {
2135: const char code@var316 [@expr1073746103 21 ] =@expr1073746104 "static int a=1, b=1;" ;
2136: $if $(@expr1073746105 $!@expr1073746106 $assertEquals $(@expr1073746107 "cppcheck-2.8/test/testtokenize.cpp" $, 2136 $, "static int a = 1 ; static int b = 1 ;" $, $tokenizeAndStringify_ $(@expr1073746108 "cppcheck-2.8/test/testtokenize.cpp" $, 2136 $, code@var316 $) $) $) { $return ; }
2137: }
2138:
2139: {
2140: const char code@var317 [@expr1073746109 19 ] =@expr1073746110 "static int *a, *b;" ;
2141: $if $(@expr1073746111 $!@expr1073746112 $assertEquals $(@expr1073746113 "cppcheck-2.8/test/testtokenize.cpp" $, 2141 $, "static int * a ; static int * b ;" $, $tokenizeAndStringify_ $(@expr1073746114 "cppcheck-2.8/test/testtokenize.cpp" $, 2141 $, code@var317 $) $) $) { $return ; }
2142: }
2143:
2144: {
2145: const char code@var318 [@expr1073746115 32 ] =@expr1073746116 "static unsigned int *a=0, *b=0;" ;
2146: $if $(@expr1073746117 $!@expr1073746118 $assertEquals $(@expr1073746119 "cppcheck-2.8/test/testtokenize.cpp" $, 2146 $, "static unsigned int * a = 0 ; static unsigned int * b = 0 ;" $, $tokenizeAndStringify_ $(@expr1073746120 "cppcheck-2.8/test/testtokenize.cpp" $, 2146 $, code@var318 $) $) $) { $return ; }
2147: }
2148:
2149: {
2150:
2151: const char code@var319 [@expr1073746121 68 ] =@expr1073746122 "static int large_eeprom_type = (13 | (5)), default_flash_type = 42;"
2152: ;
2153: $if $(@expr1073746123 $!@expr1073746124 $assertEquals $(@expr1073746125 "cppcheck-2.8/test/testtokenize.cpp" $, 2153 $, "static int large_eeprom_type = 13 | 5 ; static int default_flash_type = 42 ;" $, $tokenizeAndStringify_ $(@expr1073746126 "cppcheck-2.8/test/testtokenize.cpp" $, 2153 $, code@var319 $) $) $) { $return
2154: ; }
2155: }
2156:
2157: {
2158:
2159: const char code@var320 [@expr1073746127 114 ] =@expr1073746128 "unsigned int x;static const unsigned int A = 1, B = A, C = 0, D = (A), E = 0;void f() {  unsigned int *foo = &x;}"
2160:
2161:
2162:
2163: ;
2164: $if $(@expr1073746129 $!@expr1073746130 $assertEquals $(@expr1073746131 "cppcheck-2.8/test/testtokenize.cpp" $, 2164 $, "unsigned int x ; static const unsigned int A = 1 ; static const unsigned int B = A ; static const unsigned int C = 0 ; static const unsigned int D = A ; static const unsigned int E = 0 ; void f ( ) { unsigned int * foo ; foo = & x ; }" $, $tokenizeAndStringify_ $(@expr1073746132 "cppcheck-2.8/test/testtokenize.cpp" $, 2164 $, code@var320 $) $) $) { $return
2165:
|
2173:
2174: ; }
2175: }
2176:
2177: {
2178:
2179: const char code@var321 [@expr1073746133 121 ] =@expr1073746134 "class Machine {\n  static int const STACK_ORDER = 10, STACK_MAX = 1 << STACK_ORDER,                   STACK_GUARD = 2;\n};"
2180:
2181:
2182: ;
2183: $if $(@expr1073746135 $!@expr1073746136 $assertEquals $(@expr1073746137 "cppcheck-2.8/test/testtokenize.cpp" $, 2183 $, "class Machine {\nstatic const int STACK_ORDER = 10 ; static const int STACK_MAX = 1 << STACK_ORDER ; static const int STACK_GUARD = 2 ;\n} ;" $, $tokenizeAndStringify_ $(@expr1073746138 "cppcheck-2.8/test/testtokenize.cpp" $, 2183 $, code@var321 $) $) $) { $return
2184:
2185:
2186:
2187: ; }
2188: }
2189:
2190: {
2191:
2192: const char code@var322 [@expr1073746139 51 ] =@expr1073746140 "void(a)(void) {\n    static int b;\n    if (b) {}\n}\n"
2193:
2194:
2195: ;
2196: $if $(@expr1073746141 $!@expr1073746142 $assertEquals $(@expr1073746143 "cppcheck-2.8/test/testtokenize.cpp" $, 2196 $, "void ( a ) ( void ) {\nstatic int b ;\nif ( b ) { }\n}" $, $tokenizeAndStringify_ $(@expr1073746144 "cppcheck-2.8/test/testtokenize.cpp" $, 2196 $, code@var322 $) $) $) { $return
2197:
2198:
2199:
2200: ; }
2201: }
2202: }
2203:
2204: void vardecl6 ( ) {
2205:
2206:
2207: const char code1@var323 [@expr1073746145 17 ] =@expr1073746146 "int z = x >> 16;" ;
2208: const char res1@var324 [@expr1073746147 22 ] =@expr1073746148 "int z ; z = x >> 16 ;" ;
2209: $if $(@expr1073746149 $!@expr1073746150 $assertEquals $(@expr1073746151 "cppcheck-2.8/test/testtokenize.cpp" $, 2209 $, res1@var324 $, $tokenizeAndStringify_ $(@expr1073746152 "cppcheck-2.8/test/testtokenize.cpp" $, 2209 $, code1@var323 $) $) $) { $return ; }
2210: }
2211:
2212: void vardecl7 ( ) {
2213:
2214: const char code@var325 [@expr1073746153 78 ] =@expr1073746154 "void f() {\n    for (int c = 0; c < 0; ++c) {}\n    int t;\n    D(3 > t, \"T\");\n}"
2215:
2216:
2217:
2218: ;
2219: const char res@var326 [@expr1073746155 80 ] =@expr1073746156 "void f ( ) {\nfor ( int c = 0 ; c < 0 ; ++ c ) { }\nint t ;\nD ( 3 > t , \"T\" ) ;\n}"
2220:
2221:
2222:
2223: ;
2224:
2225: $if $(@expr1073746157 $!@expr1073746158 $assertEquals $(@expr1073746159 "cppcheck-2.8/test/testtokenize.cpp" $, 2225 $, res@var326 $, $tokenizeAndStringify_ $(@expr1073746160 "cppcheck-2.8/test/testtokenize.cpp" $, 2225 $, code@var325 $) $) $) { $return ; }
2226: }
2227:
2228: void vardecl8 ( ) {
2229:
2230: const char code@var327 [@expr1073746161 33 ] =@expr1073746162 "char a[10]={'\\0'}, b[10]={'\\0'};" ;
2231: const char res@var328 [@expr1073746163 54 ] =@expr1073746164 "char a [ 10 ] = { '\\0' } ; char b [ 10 ] = { '\\0' } ;" ;
2232: $if $(@expr1073746165 $!@expr1073746166 $assertEquals $(@expr1073746167 "cppcheck-2.8/test/testtokenize.cpp" $, 2232 $, res@var328 $, $tokenizeAndStringify_ $(@expr1073746168 "cppcheck-2.8/test/testtokenize.cpp" $, 2232 $, code@var327 $) $) $) { $return ; }
2233: }
2234:
2235: void vardecl9 ( ) {
2236: const char code@var329 [@expr1073746169 45 ] =@expr1073746170 "char a[2] = {'A', '\\0'}, b[2] = {'B', '\\0'};" ;
2237: const char res@var330 [@expr1073746171 64 ] =@expr1073746172 "char a [ 2 ] = { 'A' , '\\0' } ; char b [ 2 ] = { 'B' , '\\0' } ;" ;
2238: $if $(@expr1073746173 $!@expr1073746174 $assertEquals $(@expr1073746175 "cppcheck-2.8/test/testtokenize.cpp" $, 2238 $, res@var330 $, $tokenizeAndStringify_ $(@expr1073746176 "cppcheck-2.8/test/testtokenize.cpp" $, 2238 $, code@var329 $) $) $) { $return ; }
2239: }
2240:
2241: void vardecl10 ( ) {
2242:
2243: const char code@var331 [@expr1073746177 61 ] =@expr1073746178 "char a [ 2 ] = { '-' } ; memset ( a , '-' , sizeof ( a ) ) ;" ;
2244: $if $(@expr1073746179 $!@expr1073746180 $assertEquals $(@expr1073746181 "cppcheck-2.8/test/testtokenize.cpp" $, 2244 $, code@var331 $, $tokenizeAndStringify_ $(@expr1073746182 "cppcheck-2.8/test/testtokenize.cpp" $, 2244 $, code@var331 $) $) $) { $return ; }
2245: }
2246:
2247: void vardecl11 ( ) {
2248:
2249: const char code@var332 [@expr1073746183 23 ] =@expr1073746184 "char a[5][8], b[5][8];" ;
2250: $if $(@expr1073746185 $!@expr1073746186 $assertEquals $(@expr1073746187 "cppcheck-2.8/test/testtokenize.cpp" $, 2250 $, "char a [ 5 ] [ 8 ] ; char b [ 5 ] [ 8 ] ;" $, $tokenizeAndStringify_ $(@expr1073746188 "cppcheck-2.8/test/testtokenize.cpp" $, 2250 $, code@var332 $) $) $) { $return ; }
2251: }
2252:
2253: void vardecl12 ( ) {
2254: const char code@var333 [@expr1073746189 36 ] =@expr1073746190 "struct A { public: B a, b, c, d; };" ;
2255: $if $(@expr1073746191 $!@expr1073746192 $assertEquals $(@expr1073746193 "cppcheck-2.8/test/testtokenize.cpp" $, 2255 $, "struct A { public: B a ; B b ; B c ; B d ; } ;" $, $tokenizeAndStringify_ $(@expr1073746194 "cppcheck-2.8/test/testtokenize.cpp" $, 2255 $, code@var333 $) $) $) { $return ; }
2256: }
2257:
2258: void vardecl13 ( ) {
2259: const char code@var334 [@expr1073746195 42 ] =@expr1073746196 "void f() {\n    int a = (x < y) ? 1 : 0;\n}"
2260:
2261: ;
2262: $if $(@expr1073746197 $!@expr1073746198 $assertEquals $(@expr1073746199 "cppcheck-2.8/test/testtokenize.cpp" $, 2262 $, "void f ( ) {\nint a ; a = ( x < y ) ? 1 : 0 ;\n}" $, $tokenizeAndStringify_ $(@expr1073746200 "cppcheck-2.8/test/testtokenize.cpp" $, 2262 $, code@var334 $) $) $) { $return ; }
2263: }
2264:
2265: void vardecl14 ( ) {
2266: const char code@var335 [@expr1073746202 43 ] =@expr1073746203 "::std::tr1::shared_ptr<int> pNum1, pNum2;\n" ;
2267: $if $(@expr1073746204 $!@expr1073746205 $assertEquals $(@expr1073746206 "cppcheck-2.8/test/testtokenize.cpp" $, 2267 $, ":: std :: tr1 :: shared_ptr < int > pNum1 ; :: std :: tr1 :: shared_ptr < int > pNum2 ;" $, $tokenizeAndStringify_ $(@expr1073746207 "cppcheck-2.8/test/testtokenize.cpp" $, 2267 $, code@var335 , false , Settings ::@expr1073746208 Native@expr1073746201 , "test.cpp" , false $) $) $) { $return ; }
2268: }
2269:
2270: void vardecl15 ( ) {
2271: const char code@var336 [@expr1073746209 38 ] =@expr1073746210 "const char x[] = \"foo\", y[] = \"bar\";\n" ;
2272: $if $(@expr1073746211 $!@expr1073746212 $assertEquals $(@expr1073746213 "cppcheck-2.8/test/testtokenize.cpp" $, 2272 $, "const char x [ 4 ] = \"foo\" ; const char y [ 4 ] = \"bar\" ;" $, $tokenizeAndStringify_ $(@expr1073746214 "cppcheck-2.8/test/testtokenize.cpp" $, 2272 $, code@var336 $) $) $) { $return ; }
2273: }
2274:
2275: void vardecl16 ( ) {
2276: {
2277: const char code@var337 [@expr1073746215 64 ] =@expr1073746216 "const a::b<c,d(e),f>::g::h<i>::l *x [] = foo(),y [][] = bar();\n" ;
2278: $if $(@expr1073746217 $!@expr1073746218 $assertEquals $(@expr1073746219 "cppcheck-2.8/test/testtokenize.cpp" $, 2278 $, "const a :: b < c , d ( e ) , f > :: g :: h < i > :: l * x [ ] = foo ( ) ; const a :: b < c , d ( e ) , f > :: g :: h < i > :: l y [ ] [ ] = bar ( ) ;" $, $tokenizeAndStringify_ $(@expr1073746220 "cppcheck-2.8/test/testtokenize.cpp" $, 2278 $, code@var337 $) $) $) { $return
2279: ; }
2280: }
2281:
2282: {
2283: const char code@var338 [@expr1073746221 63 ] =@expr1073746222 "const ::b<c,d(e),f>::g::h<i>::l *x [] = foo(),y [][] = bar();\n" ;
2284: $if $(@expr1073746223 $!@expr1073746224 $assertEquals $(@expr1073746225 "cppcheck-2.8/test/testtokenize.cpp" $, 2284 $, "const :: b < c , d ( e ) , f > :: g :: h < i > :: l * x [ ] = foo ( ) ; const :: b < c , d ( e ) , f > :: g :: h < i > :: l y [ ] [ ] = bar ( ) ;" $, $tokenizeAndStringify_ $(@expr1073746226 "cppcheck-2.8/test/testtokenize.cpp" $, 2284 $, code@var338 $) $) $) { $return
2285: ; }
2286: }
2287: }
2288:
2289: void vardecl17 ( ) {
2290: const char code@var339 [@expr1073746227 52 ] =@expr1073746228 "a < b > :: c :: d :: e < f > x = foo(), y = bar();\n" ;
2291: $if $(@expr1073746229 $!@expr1073746230 $assertEquals $(@expr1073746231 "cppcheck-2.8/test/testtokenize.cpp" $, 2291 $, "a < b > :: c :: d :: e < f > x ; x = foo ( ) ; a < b > :: c :: d :: e < f > y ; y = bar ( ) ;" $, $tokenizeAndStringify_ $(@expr1073746232 "cppcheck-2.8/test/testtokenize.cpp" $, 2291 $, code@var339 $) $) $) { $return
2292: ; }
2293: }
2294:
2295: void vardecl18 ( ) {
2296: const char code@var340 [@expr1073746233 44 ] =@expr1073746234 "void f() {\n    g((double)v1*v2, v3, v4);\n}\n"
2297:
2298: ;
2299:
2300: $if $(@expr1073746235 $!@expr1073746236 $assertEquals $(@expr1073746237 "cppcheck-2.8/test/testtokenize.cpp" $, 2300 $, "void f ( ) {\ng ( ( double ) v1 * v2 , v3 , v4 ) ;\n}" $, $tokenizeAndStringify_ $(@expr1073746238 "cppcheck-2.8/test/testtokenize.cpp" $, 2300 $, code@var340 $) $) $) { $return
2301:
2302: ; }
2303: }
2304:
2305: void vardecl19 ( ) {
2306: {
2307: const char code@var341 [@expr1073746239 40 ] =@expr1073746240 "void func(in, r, m)\nint in;int r,m;{\n}\n"
2308:
2309:
2310:
2311: ;
2312:
2313: $if $(@expr1073746241 $!@expr1073746242 $assertEquals $(@expr1073746243 "cppcheck-2.8/test/testtokenize.cpp" $, 2313 $, "void func (\nint in , int r , int m\n)\n{\n}" $, $tokenizeAndStringify_ $(@expr1073746244 "cppcheck-2.8/test/testtokenize.cpp" $, 2313 $, code@var341 $) $) $) { $return
2314:
2315:
2316:
2317: ; }
2318: }
2319: {
2320: const char code@var342 [@expr1073746245 26 ] =@expr1073746246 "void f(r,f)\nchar *r;\n{\n}\n"
2321:
2322:
2323: ;
2324:
2325: $if $(@expr1073746247 $!@expr1073746248 $assertEquals $(@expr1073746249 "cppcheck-2.8/test/testtokenize.cpp" $, 2325 $, "void f (\nchar * r\n)\n\n{\n}" $, $tokenizeAndStringify_ $(@expr1073746250 "cppcheck-2.8/test/testtokenize.cpp" $, 2325 $, code@var342 $) $) $) { $return
2326:
|
2329:
2330: ; }
2331: }
2332: {
2333: const char code@var343 [@expr1073746251 15 ] =@expr1073746252 "void f(f)\n{\n}\n"
2334:
2335: ;
2336:
2337: $if $(@expr1073746253 $!@expr1073746254 $assertEquals $(@expr1073746255 "cppcheck-2.8/test/testtokenize.cpp" $, 2337 $, "void f ( )\n{\n}" $, $tokenizeAndStringify_ $(@expr1073746256 "cppcheck-2.8/test/testtokenize.cpp" $, 2337 $, code@var343 $) $) $) { $return
2338:
2339: ; }
2340: }
2341: {
2342: const char code@var344 [@expr1073746257 26 ] =@expr1073746258 "void f(f,r)\nchar *r;\n{\n}\n"
2343:
2344:
2345: ;
2346:
2347: $if $(@expr1073746259 $!@expr1073746260 $assertEquals $(@expr1073746261 "cppcheck-2.8/test/testtokenize.cpp" $, 2347 $, "void f (\nchar * r\n)\n\n{\n}" $, $tokenizeAndStringify_ $(@expr1073746262 "cppcheck-2.8/test/testtokenize.cpp" $, 2347 $, code@var344 $) $) $) { $return
2348:
|
2351:
2352: ; }
2353: }
2354: {
2355: const char code@var345 [@expr1073746263 37 ] =@expr1073746264 "void f(r,f,s)\nchar *r;\nchar *s;\n{\n}\n"
2356:
2357:
2358:
2359: ;
2360:
2361: $if $(@expr1073746265 $!@expr1073746266 $assertEquals $(@expr1073746267 "cppcheck-2.8/test/testtokenize.cpp" $, 2361 $, "void f (\nchar * r ,\nchar * s\n)\n\n\n{\n}" $, $tokenizeAndStringify_ $(@expr1073746268 "cppcheck-2.8/test/testtokenize.cpp" $, 2361 $, code@var345 $) $) $) { $return
2362:
|
2367:
2368: ; }
2369: }
2370: {
2371: const char code@var346 [@expr1073746269 34 ] =@expr1073746270 "void f(r,s,t)\nchar *r,*s,*t;\n{\n}\n"
2372:
2373:
2374: ;
2375:
2376: $if $(@expr1073746271 $!@expr1073746272 $assertEquals $(@expr1073746273 "cppcheck-2.8/test/testtokenize.cpp" $, 2376 $, "void f (\nchar * r , char * s , char * t\n)\n\n{\n}" $, $tokenizeAndStringify_ $(@expr1073746274 "cppcheck-2.8/test/testtokenize.cpp" $, 2376 $, code@var346 $) $) $) { $return
2377:
|
2380:
2381: ; }
2382: }
2383: {
2384: const char code@var347 [@expr1073746275 40 ] =@expr1073746276 "void f(a, b) register char *a, *b;\n{\n}\n"
2385:
2386: ;
2387:
2388: $if $(@expr1073746277 $!@expr1073746278 $assertEquals $(@expr1073746279 "cppcheck-2.8/test/testtokenize.cpp" $, 2388 $, "void f ( char * a , char * b )\n{\n}" $, $tokenizeAndStringify_ $(@expr1073746280 "cppcheck-2.8/test/testtokenize.cpp" $, 2388 $, code@var347 $) $) $) { $return
2389:
2390: ; }
2391: }
2392: }
2393:
2394: void vardecl20 ( ) {
2395:
2396: const char code@var348 [@expr1073746281 53 ] =@expr1073746282 "void a::b() const\n{\n    register const int X = 0;\n}\n"
2397:
2398:
2399: ;
2400: $if $(@expr1073746283 $!@expr1073746284 $assertEquals $(@expr1073746285 "cppcheck-2.8/test/testtokenize.cpp" $, 2400 $, "void a :: b ( ) const\n{\nconst int X = 0 ;\n}" $, $tokenizeAndStringify_ $(@expr1073746286 "cppcheck-2.8/test/testtokenize.cpp" $, 2400 $, code@var348 $) $) $) { $return
2401:
2402:
2403: ; }
2404: }
2405:
2406: void vardecl21 ( ) {
2407:
2408: const char code1@var349 [@expr1073746287 37 ] =@expr1073746288 "void f() {\n    a::b const *p = 0;\n}\n"
2409:
2410: ;
2411: $if $(@expr1073746289 $!@expr1073746290 $assertEquals $(@expr1073746291 "cppcheck-2.8/test/testtokenize.cpp" $, 2411 $, "void f ( ) {\nconst a :: b * p ; p = 0 ;\n}" $, $tokenizeAndStringify_ $(@expr1073746292 "cppcheck-2.8/test/testtokenize.cpp" $, 2411 $, code1@var349 $) $) $) { $return
2412:
2413:
2414: ; }
2415:
2416:
2417: const char code2@var350 [@expr1073746293 39 ] =@expr1073746294 "void f() {\n    ::a::b const *p = 0;\n}\n"
2418:
2419: ;
2420: $if $(@expr1073746295 $!@expr1073746296 $assertEquals $(@expr1073746297 "cppcheck-2.8/test/testtokenize.cpp" $, 2420 $, "void f ( ) {\nconst :: a :: b * p ; p = 0 ;\n}" $, $tokenizeAndStringify_ $(@expr1073746298 "cppcheck-2.8/test/testtokenize.cpp" $, 2420 $, code2@var350 $) $) $) { $return
2421:
2422:
2423: ; }
2424: }
2425:
2426: void vardecl22 ( ) {
2427: $tokenizeAndStringify_ $(@expr1073746299 "cppcheck-2.8/test/testtokenize.cpp" $, 2427 $, "A<B<C<int>> >* p = 0;" $) ;
2428: }
2429:
2430: void vardecl23 ( ) {
2431: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073746300 "cppcheck-2.8/test/testtokenize.cpp" $, 2431 $, "class a { protected : template < class int x = 1 ; public : int f ( ) ; }" $) $; $assertThrowFail $(@expr1073746301 "cppcheck-2.8/test/testtokenize.cpp" $, 2431 $) $; $} $catch $(@expr1073746302 $const InternalError $&@expr1073746303 $) ${ $} $catch $(@expr1073746304 $... $) ${ $assertThrowFail $(@expr1073746305 "cppcheck-2.8/test/testtokenize.cpp" $, 2431 $) $; $} $} $while $(@expr1073746306 $false $) ;
2432: }
2433:
2434: void vardecl24 ( ) {
2435: const char code1@var351 [@expr1073746307 105 ] =@expr1073746308 "void f() {\n    std::for_each(ints.begin(), ints.end(), [](int val)\n    {\n        int temp = 0;\n    });\n}"
2436:
|
2439:
2440: ;
2441:
2442: const char expected1@var352 [@expr1073746309 115 ] =@expr1073746310 "void f ( ) {\nstd :: for_each ( ints . begin ( ) , ints . end ( ) , [ ] ( int val )\n{\nint temp ; temp = 0 ;\n} ) ;\n}"
2443:
|
2446:
2447: ;
2448:
2449: $if $(@expr1073746311 $!@expr1073746312 $assertEquals $(@expr1073746313 "cppcheck-2.8/test/testtokenize.cpp" $, 2449 $, expected1@var352 $, $tokenizeAndStringify_ $(@expr1073746314 "cppcheck-2.8/test/testtokenize.cpp" $, 2449 $, code1@var351 $) $) $) { $return ; }
2450:
2451: const char code2@var353 [@expr1073746315 52 ] =@expr1073746316 "void f(int j) {\n    g( [](){int temp = 0;} , j );\n}"
2452:
2453: ;
2454:
2455: const char expected2@var354 [@expr1073746317 67 ] =@expr1073746318 "void f ( int j ) {\ng ( [ ] ( ) { int temp ; temp = 0 ; } , j ) ;\n}"
2456:
2457: ;
2458:
2459: $if $(@expr1073746319 $!@expr1073746320 $assertEquals $(@expr1073746321 "cppcheck-2.8/test/testtokenize.cpp" $, 2459 $, expected2@var354 $, $tokenizeAndStringify_ $(@expr1073746322 "cppcheck-2.8/test/testtokenize.cpp" $, 2459 $, code2@var353 $) $) $) { $return ; }
2460: }
2461:
2462: void vardecl25 ( ) {
2463: $tokenizeAndStringify_ $(@expr1073746323 "cppcheck-2.8/test/testtokenize.cpp" $, 2463 $, "void A::func(P g) const {}\nvoid A::a() {\n   b = new d(  [this]( const P & p) -> double { return this->func(p);}  );\n}" $)
2464:
2465:
2466: ;
2467: }
2468:
2469: void vardecl26 ( ) {
2470: const char code@var355 [@expr1073746325 30 ] =@expr1073746326 "extern int *new, obj, player;" ;
2471: const char expected@var356 [@expr1073746327 56 ] =@expr1073746328 "extern int * new ; extern int obj ; extern int player ;" ;
2472: $if $(@expr1073746329 $!@expr1073746330 $assertEquals $(@expr1073746331 "cppcheck-2.8/test/testtokenize.cpp" $, 2472 $, expected@var356 $, $tokenizeAndStringify_ $(@expr1073746332 "cppcheck-2.8/test/testtokenize.cpp" $, 2472 $, code@var355 , true , Settings ::@expr1073746333 Native@expr1073746324 , "test.c" $) $) $) { $return ; }
2473: $if $(@expr1073746334 $!@expr1073746335 $assertEquals $(@expr1073746336 "cppcheck-2.8/test/testtokenize.cpp" $, 2473 $, expected@var356 $, $tokenizeAndStringify_ $(@expr1073746337 "cppcheck-2.8/test/testtokenize.cpp" $, 2473 $, code@var355 $) $) $) { $return ; }
2474: }
2475:
2476: void vardecl27 ( ) {
2477: const char code@var357 [@expr1073746339 86 ] =@expr1073746340 "extern int foo(char);\nvoid* class(char c) {\n  if (foo(c))\n    return 0;\n  return 0;\n}"
2478:
|
2481:
2482: ;
2483: $tokenizeAndStringify_ $(@expr1073746341 "cppcheck-2.8/test/testtokenize.cpp" $, 2483 $, code@var357 , true , Settings ::@expr1073746342 Native@expr1073746338 , "test.c" $) ;
2484: }
2485:
2486: void vardecl28 ( ) {
2487: const char code@var358 [@expr1073746344 77 ] =@expr1073746345 "unsigned short f(void) {\n    unsigned short const int x = 1;\n    return x;\n}"
2488:
2489:
2490: ;
2491: $if $(@expr1073746346 $!@expr1073746347 $assertEquals $(@expr1073746348 "cppcheck-2.8/test/testtokenize.cpp" $, 2491 $, "unsigned short f ( ) {\nconst unsigned short x ; x = 1 ;\nreturn x ;\n}" $, $tokenizeAndStringify_ $(@expr1073746349 "cppcheck-2.8/test/testtokenize.cpp" $, 2491 $, code@var358 , true , Settings ::@expr1073746350 Native@expr1073746343 , "test.c" $) $) $) { $return
2492:
2493:
2494:
2495: ; }
2496: }
2497:
2498: void volatile_variables ( ) {
2499: {
2500: const char code@var359 [@expr1073746351 55 ] =@expr1073746352 "volatile int a=0;\nvolatile int b=0;\nvolatile int c=0;\n"
2501:
2502: ;
2503:
2504: const std ::@expr1073746353 string actual@var360 (@expr1073746354 $tokenizeAndStringify_ $(@expr1073746355 "cppcheck-2.8/test/testtokenize.cpp" $, 2504 $, code@var359 $) ) ;
2505:
2506: $if $(@expr1073746356 $!@expr1073746357 $assertEquals $(@expr1073746358 "cppcheck-2.8/test/testtokenize.cpp" $, 2506 $, "volatile int a ; a = 0 ;\nvolatile int b ; b = 0 ;\nvolatile int c ; c = 0 ;" $, actual@var360 $) $) { $return ; }
2507: }
2508: {
2509: const char code@var361 [@expr1073746359 34 ] =@expr1073746360 "char *volatile s1, *volatile s2;\n" ;
2510:
2511: const std ::@expr1073746361 string actual@var362 (@expr1073746362 $tokenizeAndStringify_ $(@expr1073746363 "cppcheck-2.8/test/testtokenize.cpp" $, 2511 $, code@var361 $) ) ;
2512:
2513: $if $(@expr1073746364 $!@expr1073746365 $assertEquals $(@expr1073746366 "cppcheck-2.8/test/testtokenize.cpp" $, 2513 $, "char * volatile s1 ; char * volatile s2 ;" $, actual@var362 $) $) { $return ; }
2514: }
2515: }
2516:
2517:
2518: void simplifyKeyword ( ) {
2519: {
2520: const char code@var363 [@expr1073746367 29 ] =@expr1073746368 "void f (int a [ static 5] );" ;
2521: $if $(@expr1073746369 $!@expr1073746370 $assertEquals $(@expr1073746371 "cppcheck-2.8/test/testtokenize.cpp" $, 2521 $, "void f ( int a [ 5 ] ) ;" $, $tokenizeAndStringify_ $(@expr1073746372 "cppcheck-2.8/test/testtokenize.cpp" $, 2521 $, code@var363 $) $) $) { $return ; }
2522: }
2523: {
2524: const char in4@var364 [@expr1073746373 36 ] =@expr1073746374 "struct B final : A { void foo(); };" ;
2525: const char out4@var365 [@expr1073746375 34 ] =@expr1073746376 "struct B : A { void foo ( ) ; } ;" ;
2526: $if $(@expr1073746377 $!@expr1073746378 $assertEquals $(@expr1073746379 "cppcheck-2.8/test/testtokenize.cpp" $, 2526 $, out4@var365 $, $tokenizeAndStringify_ $(@expr1073746380 "cppcheck-2.8/test/testtokenize.cpp" $, 2526 $, in4@var364 $) $) $) { $return ; }
2527:
2528: const char in5@var366 [@expr1073746381 164 ] =@expr1073746382 "struct ArrayItemsValidator final {\n    SchemaError validate() const override {\n        for (; pos < value.size(); ++pos) {\n        }\n        return none;\n    }\n};\n"
2529:
|
2533:
2534: ;
2535: const char out5@var367 [@expr1073746383 137 ] =@expr1073746384
2536: "struct ArrayItemsValidator {\nSchemaError validate ( ) const override {\nfor ( ; pos < value . size ( ) ; ++ pos ) {\n}\nreturn none ;\n}\n} ;"
2537:
|
2541:
2542: ;
2543:
2544: $if $(@expr1073746385 $!@expr1073746386 $assertEquals $(@expr1073746387 "cppcheck-2.8/test/testtokenize.cpp" $, 2544 $, out5@var367 $, $tokenizeAndStringify_ $(@expr1073746388 "cppcheck-2.8/test/testtokenize.cpp" $, 2544 $, in5@var366 $) $) $) { $return ; }
2545: }
2546: {
2547:
2548: const char code@var368 [@expr1073746389 72 ] =@expr1073746390 "thread_local void *thread_local_var; __thread void *thread_local_var_2;"
2549: ;
2550: $if $(@expr1073746391 $!@expr1073746392 $assertEquals $(@expr1073746393 "cppcheck-2.8/test/testtokenize.cpp" $, 2550 $, "static void * thread_local_var ; void * thread_local_var_2 ;" $, $tokenizeAndStringify_ $(@expr1073746394 "cppcheck-2.8/test/testtokenize.cpp" $, 2550 $, code@var368 $) $) $) { $return
2551: ; }
2552: }
2553: }
2554:
2555: void implicitIntConst ( ) {
2556: $if $(@expr1073746395 $!@expr1073746396 $assertEquals $(@expr1073746397 "cppcheck-2.8/test/testtokenize.cpp" $, 2556 $, "const int x ;" $, $tokenizeAndStringify_ $(@expr1073746398 "cppcheck-2.8/test/testtokenize.cpp" $, 2556 $, "const x;" $) $) $) { $return ; }
2557: $if $(@expr1073746399 $!@expr1073746400 $assertEquals $(@expr1073746401 "cppcheck-2.8/test/testtokenize.cpp" $, 2557 $, "const int * x ;" $, $tokenizeAndStringify_ $(@expr1073746402 "cppcheck-2.8/test/testtokenize.cpp" $, 2557 $, "const *x;" $) $) $) { $return ; }
2558: $if $(@expr1073746403 $!@expr1073746404 $assertEquals $(@expr1073746405 "cppcheck-2.8/test/testtokenize.cpp" $, 2558 $, "const int * f ( ) ;" $, $tokenizeAndStringify_ $(@expr1073746406 "cppcheck-2.8/test/testtokenize.cpp" $, 2558 $, "const *f();" $) $) $) { $return ; }
2559: }
2560:
2561: void implicitIntExtern ( ) {
2562: $if $(@expr1073746407 $!@expr1073746408 $assertEquals $(@expr1073746409 "cppcheck-2.8/test/testtokenize.cpp" $, 2562 $, "extern int x ;" $, $tokenizeAndStringify_ $(@expr1073746410 "cppcheck-2.8/test/testtokenize.cpp" $, 2562 $, "extern x;" $) $) $) { $return ; }
2563: $if $(@expr1073746411 $!@expr1073746412 $assertEquals $(@expr1073746413 "cppcheck-2.8/test/testtokenize.cpp" $, 2563 $, "extern int * x ;" $, $tokenizeAndStringify_ $(@expr1073746414 "cppcheck-2.8/test/testtokenize.cpp" $, 2563 $, "extern *x;" $) $) $) { $return ; }
2564: $if $(@expr1073746415 $!@expr1073746416 $assertEquals $(@expr1073746417 "cppcheck-2.8/test/testtokenize.cpp" $, 2564 $, "const int * f ( ) ;" $, $tokenizeAndStringify_ $(@expr1073746418 "cppcheck-2.8/test/testtokenize.cpp" $, 2564 $, "const *f();" $) $) $) { $return ; }
2565: }
2566:
|
2569:
2570: void implicitIntSigned1 ( ) {
2571: {
2572: const char code1@var369 [@expr1073746419 34 ] =@expr1073746420 "void foo ( signed int , float ) ;" ;
2573: $if $(@expr1073746421 $!@expr1073746422 $assertEquals $(@expr1073746423 "cppcheck-2.8/test/testtokenize.cpp" $, 2573 $, code1@var369 $, $tokenizeAndStringify_ $(@expr1073746424 "cppcheck-2.8/test/testtokenize.cpp" $, 2573 $, code1@var369 $) $) $) { $return ; }
2574: }
2575:
2576: {
2577: const char code1@var370 [@expr1073746425 11 ] =@expr1073746426 "signed i ;" ;
2578: const char code2@var371 [@expr1073746427 15 ] =@expr1073746428 "signed int i ;" ;
2579: $if $(@expr1073746429 $!@expr1073746430 $assertEquals $(@expr1073746431 "cppcheck-2.8/test/testtokenize.cpp" $, 2579 $, code2@var371 $, $tokenizeAndStringify_ $(@expr1073746432 "cppcheck-2.8/test/testtokenize.cpp" $, 2579 $, code1@var370 $) $) $) { $return ; }
2580: }
2581:
2582: {
2583: const char code1@var372 [@expr1073746433 15 ] =@expr1073746434 "signed int i ;" ;
2584: $if $(@expr1073746435 $!@expr1073746436 $assertEquals $(@expr1073746437 "cppcheck-2.8/test/testtokenize.cpp" $, 2584 $, code1@var372 $, $tokenizeAndStringify_ $(@expr1073746438 "cppcheck-2.8/test/testtokenize.cpp" $, 2584 $, code1@var372 $) $) $) { $return ; }
2585: }
2586:
2587: {
2588: const char code1@var373 [@expr1073746439 15 ] =@expr1073746440 "int signed i ;" ;
2589: const char code2@var374 [@expr1073746441 15 ] =@expr1073746442 "signed int i ;" ;
2590: $if $(@expr1073746443 $!@expr1073746444 $assertEquals $(@expr1073746445 "cppcheck-2.8/test/testtokenize.cpp" $, 2590 $, code2@var374 $, $tokenizeAndStringify_ $(@expr1073746446 "cppcheck-2.8/test/testtokenize.cpp" $, 2590 $, code1@var373 $) $) $) { $return ; }
2591: }
2592:
2593: {
2594: const char code1@var375 [@expr1073746447 44 ] =@expr1073746448 "void f() { for (signed i=0; i<10; i++) {} }" ;
2595: const char code2@var376 [@expr1073746449 60 ] =@expr1073746450 "void f ( ) { for ( signed int i = 0 ; i < 10 ; i ++ ) { } }" ;
2596: $if $(@expr1073746451 $!@expr1073746452 $assertEquals $(@expr1073746453 "cppcheck-2.8/test/testtokenize.cpp" $, 2596 $, code2@var376 $, $tokenizeAndStringify_ $(@expr1073746454 "cppcheck-2.8/test/testtokenize.cpp" $, 2596 $, code1@var375 $) $) $) { $return ; }
2597: }
2598: }
2599:
|
2603:
2604: void implicitIntUnsigned1 ( ) {
2605:
2606: {
2607: const char code@var377 [@expr1073746455 36 ] =@expr1073746456 "void foo ( unsigned int , float ) ;" ;
2608: $if $(@expr1073746457 $!@expr1073746458 $assertEquals $(@expr1073746459 "cppcheck-2.8/test/testtokenize.cpp" $, 2608 $, code@var377 $, $tokenizeAndStringify_ $(@expr1073746460 "cppcheck-2.8/test/testtokenize.cpp" $, 2608 $, code@var377 $) $) $) { $return ; }
2609: }
2610:
2611:
2612: {
2613: const char code1@var378 [@expr1073746461 13 ] =@expr1073746462 "unsigned i ;" ;
2614: const char code2@var379 [@expr1073746463 17 ] =@expr1073746464 "unsigned int i ;" ;
2615: $if $(@expr1073746465 $!@expr1073746466 $assertEquals $(@expr1073746467 "cppcheck-2.8/test/testtokenize.cpp" $, 2615 $, code2@var379 $, $tokenizeAndStringify_ $(@expr1073746468 "cppcheck-2.8/test/testtokenize.cpp" $, 2615 $, code1@var378 $) $) $) { $return ; }
2616: }
2617:
2618: {
2619: const char code1@var380 [@expr1073746469 17 ] =@expr1073746470 "int unsigned i ;" ;
2620: const char code2@var381 [@expr1073746471 17 ] =@expr1073746472 "unsigned int i ;" ;
2621: $if $(@expr1073746473 $!@expr1073746474 $assertEquals $(@expr1073746475 "cppcheck-2.8/test/testtokenize.cpp" $, 2621 $, code2@var381 $, $tokenizeAndStringify_ $(@expr1073746476 "cppcheck-2.8/test/testtokenize.cpp" $, 2621 $, code1@var380 $) $) $) { $return ; }
2622: }
2623:
2624:
2625: {
2626: const char code1@var382 [@expr1073746477 46 ] =@expr1073746478 "void f() { for (unsigned i=0; i<10; i++) {} }" ;
2627: const char code2@var383 [@expr1073746479 62 ] =@expr1073746480 "void f ( ) { for ( unsigned int i = 0 ; i < 10 ; i ++ ) { } }" ;
2628: $if $(@expr1073746481 $!@expr1073746482 $assertEquals $(@expr1073746483 "cppcheck-2.8/test/testtokenize.cpp" $, 2628 $, code2@var383 $, $tokenizeAndStringify_ $(@expr1073746484 "cppcheck-2.8/test/testtokenize.cpp" $, 2628 $, code1@var382 $) $) $) { $return ; }
2629: }
2630:
2631:
2632: {
2633: const char code1@var384 [@expr1073746485 21 ] =@expr1073746486 "; extern unsigned x;" ;
2634: const char code2@var385 [@expr1073746487 26 ] =@expr1073746488 "; extern unsigned int x ;" ;
2635: $if $(@expr1073746489 $!@expr1073746490 $assertEquals $(@expr1073746491 "cppcheck-2.8/test/testtokenize.cpp" $, 2635 $, code2@var385 $, $tokenizeAndStringify_ $(@expr1073746492 "cppcheck-2.8/test/testtokenize.cpp" $, 2635 $, code1@var384 $) $) $) { $return ; }
2636: }
2637: }
2638:
2639: void implicitIntUnsigned2 ( ) {
2640: const char code@var386 [@expr1073746493 17 ] =@expr1073746494 "i = (unsigned)j;" ;
2641: const char expected@var387 [@expr1073746495 25 ] =@expr1073746496 "i = ( unsigned int ) j ;" ;
2642: $if $(@expr1073746497 $!@expr1073746498 $assertEquals $(@expr1073746499 "cppcheck-2.8/test/testtokenize.cpp" $, 2642 $, expected@var387 $, $tokenizeAndStringify_ $(@expr1073746500 "cppcheck-2.8/test/testtokenize.cpp" $, 2642 $, code@var386 $) $) $) { $return ; }
2643: }
2644:
2645:
2646: void implicitIntUnsigned3 ( ) {
2647: {
2648: const char code@var388 [@expr1073746501 19 ] =@expr1073746502 "; foo<unsigned>();" ;
2649: const char expected@var389 [@expr1073746503 29 ] =@expr1073746504 "; foo < unsigned int > ( ) ;" ;
2650: $if $(@expr1073746505 $!@expr1073746506 $assertEquals $(@expr1073746507 "cppcheck-2.8/test/testtokenize.cpp" $, 2650 $, expected@var389 $, $tokenizeAndStringify_ $(@expr1073746508 "cppcheck-2.8/test/testtokenize.cpp" $, 2650 $, code@var388 $) $) $) { $return ; }
2651: }
2652:
2653: {
2654: const char code@var390 [@expr1073746509 23 ] =@expr1073746510 "; foo<unsigned int>();" ;
2655: const char expected@var391 [@expr1073746511 29 ] =@expr1073746512 "; foo < unsigned int > ( ) ;" ;
2656: $if $(@expr1073746513 $!@expr1073746514 $assertEquals $(@expr1073746515 "cppcheck-2.8/test/testtokenize.cpp" $, 2656 $, expected@var391 $, $tokenizeAndStringify_ $(@expr1073746516 "cppcheck-2.8/test/testtokenize.cpp" $, 2656 $, code@var390 $) $) $) { $return ; }
2657: }
2658: }
2659:
2660: void simplifyStdType ( ) {
2661:
2662: {
2663: const char code@var392 [@expr1073746517 26 ] =@expr1073746518 "long long unsigned int x;" ;
2664: const char expected@var393 [@expr1073746519 23 ] =@expr1073746520 "unsigned long long x ;" ;
2665: $if $(@expr1073746521 $!@expr1073746522 $assertEquals $(@expr1073746523 "cppcheck-2.8/test/testtokenize.cpp" $, 2665 $, expected@var393 $, $tokenizeAndStringify_ $(@expr1073746524 "cppcheck-2.8/test/testtokenize.cpp" $, 2665 $, code@var392 $) $) $) { $return ; }
2666: }
2667: {
2668: const char code@var394 [@expr1073746525 26 ] =@expr1073746526 "long long int unsigned x;" ;
2669: const char expected@var395 [@expr1073746527 23 ] =@expr1073746528 "unsigned long long x ;" ;
2670: $if $(@expr1073746529 $!@expr1073746530 $assertEquals $(@expr1073746531 "cppcheck-2.8/test/testtokenize.cpp" $, 2670 $, expected@var395 $, $tokenizeAndStringify_ $(@expr1073746532 "cppcheck-2.8/test/testtokenize.cpp" $, 2670 $, code@var394 $) $) $) { $return ; }
2671: }
2672: {
2673: const char code@var396 [@expr1073746533 26 ] =@expr1073746534 "unsigned long long int x;" ;
2674: const char expected@var397 [@expr1073746535 23 ] =@expr1073746536 "unsigned long long x ;" ;
2675: $if $(@expr1073746537 $!@expr1073746538 $assertEquals $(@expr1073746539 "cppcheck-2.8/test/testtokenize.cpp" $, 2675 $, expected@var397 $, $tokenizeAndStringify_ $(@expr1073746540 "cppcheck-2.8/test/testtokenize.cpp" $, 2675 $, code@var396 $) $) $) { $return ; }
2676: }
2677: {
2678: const char code@var398 [@expr1073746541 26 ] =@expr1073746542 "unsigned int long long x;" ;
2679: const char expected@var399 [@expr1073746543 23 ] =@expr1073746544 "unsigned long long x ;" ;
2680: $if $(@expr1073746545 $!@expr1073746546 $assertEquals $(@expr1073746547 "cppcheck-2.8/test/testtokenize.cpp" $, 2680 $, expected@var399 $, $tokenizeAndStringify_ $(@expr1073746548 "cppcheck-2.8/test/testtokenize.cpp" $, 2680 $, code@var398 $) $) $) { $return ; }
2681: }
2682: {
2683: const char code@var400 [@expr1073746549 26 ] =@expr1073746550 "int unsigned long long x;" ;
2684: const char expected@var401 [@expr1073746551 23 ] =@expr1073746552 "unsigned long long x ;" ;
2685: $if $(@expr1073746553 $!@expr1073746554 $assertEquals $(@expr1073746555 "cppcheck-2.8/test/testtokenize.cpp" $, 2685 $, expected@var401 $, $tokenizeAndStringify_ $(@expr1073746556 "cppcheck-2.8/test/testtokenize.cpp" $, 2685 $, code@var400 $) $) $) { $return ; }
2686: }
2687: {
2688: const char code@var402 [@expr1073746557 26 ] =@expr1073746558 "int long long unsigned x;" ;
2689: const char expected@var403 [@expr1073746559 23 ] =@expr1073746560 "unsigned long long x ;" ;
2690: $if $(@expr1073746561 $!@expr1073746562 $assertEquals $(@expr1073746563 "cppcheck-2.8/test/testtokenize.cpp" $, 2690 $, expected@var403 $, $tokenizeAndStringify_ $(@expr1073746564 "cppcheck-2.8/test/testtokenize.cpp" $, 2690 $, code@var402 $) $) $) { $return ; }
2691: }
2692:
2693: {
2694: const char code@var404 [@expr1073746565 24 ] =@expr1073746566 "long long signed int x;" ;
2695: const char expected@var405 [@expr1073746567 21 ] =@expr1073746568 "signed long long x ;" ;
2696: $if $(@expr1073746569 $!@expr1073746570 $assertEquals $(@expr1073746571 "cppcheck-2.8/test/testtokenize.cpp" $, 2696 $, expected@var405 $, $tokenizeAndStringify_ $(@expr1073746572 "cppcheck-2.8/test/testtokenize.cpp" $, 2696 $, code@var404 $) $) $) { $return ; }
2697: }
2698: {
2699: const char code@var406 [@expr1073746573 24 ] =@expr1073746574 "long long int signed x;" ;
2700: const char expected@var407 [@expr1073746575 21 ] =@expr1073746576 "signed long long x ;" ;
2701: $if $(@expr1073746577 $!@expr1073746578 $assertEquals $(@expr1073746579 "cppcheck-2.8/test/testtokenize.cpp" $, 2701 $, expected@var407 $, $tokenizeAndStringify_ $(@expr1073746580 "cppcheck-2.8/test/testtokenize.cpp" $, 2701 $, code@var406 $) $) $) { $return ; }
2702: }
2703: {
2704: const char code@var408 [@expr1073746581 24 ] =@expr1073746582 "signed long long int x;" ;
2705: const char expected@var409 [@expr1073746583 21 ] =@expr1073746584 "signed long long x ;" ;
2706: $if $(@expr1073746585 $!@expr1073746586 $assertEquals $(@expr1073746587 "cppcheck-2.8/test/testtokenize.cpp" $, 2706 $, expected@var409 $, $tokenizeAndStringify_ $(@expr1073746588 "cppcheck-2.8/test/testtokenize.cpp" $, 2706 $, code@var408 $) $) $) { $return ; }
2707: }
2708: {
2709: const char code@var410 [@expr1073746589 24 ] =@expr1073746590 "signed int long long x;" ;
2710: const char expected@var411 [@expr1073746591 21 ] =@expr1073746592 "signed long long x ;" ;
2711: $if $(@expr1073746593 $!@expr1073746594 $assertEquals $(@expr1073746595 "cppcheck-2.8/test/testtokenize.cpp" $, 2711 $, expected@var411 $, $tokenizeAndStringify_ $(@expr1073746596 "cppcheck-2.8/test/testtokenize.cpp" $, 2711 $, code@var410 $) $) $) { $return ; }
2712: }
2713: {
2714: const char code@var412 [@expr1073746597 24 ] =@expr1073746598 "int signed long long x;" ;
2715: const char expected@var413 [@expr1073746599 21 ] =@expr1073746600 "signed long long x ;" ;
2716: $if $(@expr1073746601 $!@expr1073746602 $assertEquals $(@expr1073746603 "cppcheck-2.8/test/testtokenize.cpp" $, 2716 $, expected@var413 $, $tokenizeAndStringify_ $(@expr1073746604 "cppcheck-2.8/test/testtokenize.cpp" $, 2716 $, code@var412 $) $) $) { $return ; }
2717: }
2718: {
2719: const char code@var414 [@expr1073746605 24 ] =@expr1073746606 "int long long signed x;" ;
2720: const char expected@var415 [@expr1073746607 21 ] =@expr1073746608 "signed long long x ;" ;
2721: $if $(@expr1073746609 $!@expr1073746610 $assertEquals $(@expr1073746611 "cppcheck-2.8/test/testtokenize.cpp" $, 2721 $, expected@var415 $, $tokenizeAndStringify_ $(@expr1073746612 "cppcheck-2.8/test/testtokenize.cpp" $, 2721 $, code@var414 $) $) $) { $return ; }
2722: }
2723:
2724: {
2725: const char code@var416 [@expr1073746613 22 ] =@expr1073746614 "short unsigned int x;" ;
2726: const char expected@var417 [@expr1073746615 19 ] =@expr1073746616 "unsigned short x ;" ;
2727: $if $(@expr1073746617 $!@expr1073746618 $assertEquals $(@expr1073746619 "cppcheck-2.8/test/testtokenize.cpp" $, 2727 $, expected@var417 $, $tokenizeAndStringify_ $(@expr1073746620 "cppcheck-2.8/test/testtokenize.cpp" $, 2727 $, code@var416 $) $) $) { $return ; }
2728: }
2729: {
2730: const char code@var418 [@expr1073746621 22 ] =@expr1073746622 "short int unsigned x;" ;
2731: const char expected@var419 [@expr1073746623 19 ] =@expr1073746624 "unsigned short x ;" ;
2732: $if $(@expr1073746625 $!@expr1073746626 $assertEquals $(@expr1073746627 "cppcheck-2.8/test/testtokenize.cpp" $, 2732 $, expected@var419 $, $tokenizeAndStringify_ $(@expr1073746628 "cppcheck-2.8/test/testtokenize.cpp" $, 2732 $, code@var418 $) $) $) { $return ; }
2733: }
2734: {
2735: const char code@var420 [@expr1073746629 22 ] =@expr1073746630 "unsigned short int x;" ;
2736: const char expected@var421 [@expr1073746631 19 ] =@expr1073746632 "unsigned short x ;" ;
2737: $if $(@expr1073746633 $!@expr1073746634 $assertEquals $(@expr1073746635 "cppcheck-2.8/test/testtokenize.cpp" $, 2737 $, expected@var421 $, $tokenizeAndStringify_ $(@expr1073746636 "cppcheck-2.8/test/testtokenize.cpp" $, 2737 $, code@var420 $) $) $) { $return ; }
2738: }
2739: {
2740: const char code@var422 [@expr1073746637 22 ] =@expr1073746638 "unsigned int short x;" ;
2741: const char expected@var423 [@expr1073746639 19 ] =@expr1073746640 "unsigned short x ;" ;
2742: $if $(@expr1073746641 $!@expr1073746642 $assertEquals $(@expr1073746643 "cppcheck-2.8/test/testtokenize.cpp" $, 2742 $, expected@var423 $, $tokenizeAndStringify_ $(@expr1073746644 "cppcheck-2.8/test/testtokenize.cpp" $, 2742 $, code@var422 $) $) $) { $return ; }
2743: }
2744: {
2745: const char code@var424 [@expr1073746645 22 ] =@expr1073746646 "int unsigned short x;" ;
2746: const char expected@var425 [@expr1073746647 19 ] =@expr1073746648 "unsigned short x ;" ;
2747: $if $(@expr1073746649 $!@expr1073746650 $assertEquals $(@expr1073746651 "cppcheck-2.8/test/testtokenize.cpp" $, 2747 $, expected@var425 $, $tokenizeAndStringify_ $(@expr1073746652 "cppcheck-2.8/test/testtokenize.cpp" $, 2747 $, code@var424 $) $) $) { $return ; }
2748: }
2749: {
2750: const char code@var426 [@expr1073746653 22 ] =@expr1073746654 "int short unsigned x;" ;
2751: const char expected@var427 [@expr1073746655 19 ] =@expr1073746656 "unsigned short x ;" ;
2752: $if $(@expr1073746657 $!@expr1073746658 $assertEquals $(@expr1073746659 "cppcheck-2.8/test/testtokenize.cpp" $, 2752 $, expected@var427 $, $tokenizeAndStringify_ $(@expr1073746660 "cppcheck-2.8/test/testtokenize.cpp" $, 2752 $, code@var426 $) $) $) { $return ; }
2753: }
2754:
2755: {
2756: const char code@var428 [@expr1073746661 20 ] =@expr1073746662 "short signed int x;" ;
2757: const char expected@var429 [@expr1073746663 17 ] =@expr1073746664 "signed short x ;" ;
2758: $if $(@expr1073746665 $!@expr1073746666 $assertEquals $(@expr1073746667 "cppcheck-2.8/test/testtokenize.cpp" $, 2758 $, expected@var429 $, $tokenizeAndStringify_ $(@expr1073746668 "cppcheck-2.8/test/testtokenize.cpp" $, 2758 $, code@var428 $) $) $) { $return ; }
2759: }
2760: {
2761: const char code@var430 [@expr1073746669 20 ] =@expr1073746670 "short int signed x;" ;
2762: const char expected@var431 [@expr1073746671 17 ] =@expr1073746672 "signed short x ;" ;
2763: $if $(@expr1073746673 $!@expr1073746674 $assertEquals $(@expr1073746675 "cppcheck-2.8/test/testtokenize.cpp" $, 2763 $, expected@var431 $, $tokenizeAndStringify_ $(@expr1073746676 "cppcheck-2.8/test/testtokenize.cpp" $, 2763 $, code@var430 $) $) $) { $return ; }
2764: }
2765: {
2766: const char code@var432 [@expr1073746677 20 ] =@expr1073746678 "signed short int x;" ;
2767: const char expected@var433 [@expr1073746679 17 ] =@expr1073746680 "signed short x ;" ;
2768: $if $(@expr1073746681 $!@expr1073746682 $assertEquals $(@expr1073746683 "cppcheck-2.8/test/testtokenize.cpp" $, 2768 $, expected@var433 $, $tokenizeAndStringify_ $(@expr1073746684 "cppcheck-2.8/test/testtokenize.cpp" $, 2768 $, code@var432 $) $) $) { $return ; }
2769: }
2770: {
2771: const char code@var434 [@expr1073746685 20 ] =@expr1073746686 "signed int short x;" ;
2772: const char expected@var435 [@expr1073746687 17 ] =@expr1073746688 "signed short x ;" ;
2773: $if $(@expr1073746689 $!@expr1073746690 $assertEquals $(@expr1073746691 "cppcheck-2.8/test/testtokenize.cpp" $, 2773 $, expected@var435 $, $tokenizeAndStringify_ $(@expr1073746692 "cppcheck-2.8/test/testtokenize.cpp" $, 2773 $, code@var434 $) $) $) { $return ; }
2774: }
2775: {
2776: const char code@var436 [@expr1073746693 20 ] =@expr1073746694 "int signed short x;" ;
2777: const char expected@var437 [@expr1073746695 17 ] =@expr1073746696 "signed short x ;" ;
2778: $if $(@expr1073746697 $!@expr1073746698 $assertEquals $(@expr1073746699 "cppcheck-2.8/test/testtokenize.cpp" $, 2778 $, expected@var437 $, $tokenizeAndStringify_ $(@expr1073746700 "cppcheck-2.8/test/testtokenize.cpp" $, 2778 $, code@var436 $) $) $) { $return ; }
2779: }
2780: {
2781: const char code@var438 [@expr1073746701 20 ] =@expr1073746702 "int short signed x;" ;
2782: const char expected@var439 [@expr1073746703 17 ] =@expr1073746704 "signed short x ;" ;
2783: $if $(@expr1073746705 $!@expr1073746706 $assertEquals $(@expr1073746707 "cppcheck-2.8/test/testtokenize.cpp" $, 2783 $, expected@var439 $, $tokenizeAndStringify_ $(@expr1073746708 "cppcheck-2.8/test/testtokenize.cpp" $, 2783 $, code@var438 $) $) $) { $return ; }
2784: }
2785: {
2786: const char code@var440 [@expr1073746709 35 ] =@expr1073746710 "unsigned static short const int i;" ;
2787: const char expected@var441 [@expr1073746711 32 ] =@expr1073746712 "static const unsigned short i ;" ;
2788: $if $(@expr1073746713 $!@expr1073746714 $assertEquals $(@expr1073746715 "cppcheck-2.8/test/testtokenize.cpp" $, 2788 $, expected@var441 $, $tokenizeAndStringify_ $(@expr1073746716 "cppcheck-2.8/test/testtokenize.cpp" $, 2788 $, code@var440 $) $) $) { $return ; }
2789: }
2790: {
2791: const char code@var442 [@expr1073746717 17 ] =@expr1073746718 "float complex x;" ;
2792: const char expected@var443 [@expr1073746719 19 ] =@expr1073746720 "_Complex float x ;" ;
2793: $if $(@expr1073746721 $!@expr1073746722 $assertEquals $(@expr1073746723 "cppcheck-2.8/test/testtokenize.cpp" $, 2793 $, expected@var443 $, $tokenizeAndStringify_ $(@expr1073746724 "cppcheck-2.8/test/testtokenize.cpp" $, 2793 $, code@var442 $) $) $) { $return ; }
2794: }
2795: {
2796: const char code@var444 [@expr1073746725 17 ] =@expr1073746726 "complex float x;" ;
2797: const char expected@var445 [@expr1073746727 19 ] =@expr1073746728 "_Complex float x ;" ;
2798: $if $(@expr1073746729 $!@expr1073746730 $assertEquals $(@expr1073746731 "cppcheck-2.8/test/testtokenize.cpp" $, 2798 $, expected@var445 $, $tokenizeAndStringify_ $(@expr1073746732 "cppcheck-2.8/test/testtokenize.cpp" $, 2798 $, code@var444 $) $) $) { $return ; }
2799: }
2800: {
2801: const char code@var446 [@expr1073746733 23 ] =@expr1073746734 "complex long double x;" ;
2802: const char expected@var447 [@expr1073746735 25 ] =@expr1073746736 "_Complex long double x ;" ;
2803: $if $(@expr1073746737 $!@expr1073746738 $assertEquals $(@expr1073746739 "cppcheck-2.8/test/testtokenize.cpp" $, 2803 $, expected@var447 $, $tokenizeAndStringify_ $(@expr1073746740 "cppcheck-2.8/test/testtokenize.cpp" $, 2803 $, code@var446 $) $) $) { $return ; }
2804: }
2805: {
2806: const char code@var448 [@expr1073746741 23 ] =@expr1073746742 "long double complex x;" ;
2807: const char expected@var449 [@expr1073746743 25 ] =@expr1073746744 "_Complex long double x ;" ;
2808: $if $(@expr1073746745 $!@expr1073746746 $assertEquals $(@expr1073746747 "cppcheck-2.8/test/testtokenize.cpp" $, 2808 $, expected@var449 $, $tokenizeAndStringify_ $(@expr1073746748 "cppcheck-2.8/test/testtokenize.cpp" $, 2808 $, code@var448 $) $) $) { $return ; }
2809: }
2810: {
2811: const char code@var450 [@expr1073746749 16 ] =@expr1073746750 "double complex;" ;
2812: const char expected@var451 [@expr1073746751 17 ] =@expr1073746752 "double complex ;" ;
2813: $if $(@expr1073746753 $!@expr1073746754 $assertEquals $(@expr1073746755 "cppcheck-2.8/test/testtokenize.cpp" $, 2813 $, expected@var451 $, $tokenizeAndStringify_ $(@expr1073746756 "cppcheck-2.8/test/testtokenize.cpp" $, 2813 $, code@var450 $) $) $) { $return ; }
2814: }
2815: }
2816:
2817: void createLinks ( ) {
2818: {
2819: const char code@var452 [@expr1073746757 25 ] =@expr1073746758 "class A{\n void f() {}\n};"
2820:
2821: ;
2822: errout@var100 .@expr4935 str (@expr4936 "" ) ;
2823: Tokenizer tokenizer@var453 (@expr1073746761 &@expr4938 settings0@var102 , this@expr4939 ) ;
2824: std ::@expr1073746764 istringstream istr@var454 (@expr1073746765 code@var452 ) ;
2825: $if $(@expr1073746766 $!@expr1073746767 $assert_ $(@expr1073746768 "cppcheck-2.8/test/testtokenize.cpp" $, 2825 $, $(@expr1073746769 tokenizer@var453 .@expr1073746770 tokenize (@expr1073746771 istr@var454 , "test.cpp" ) $) $) $) { $return ; }
2826: const Token * tok@var455 ; tok@var455 =@expr1073746772 tokenizer@var453 .@expr1073746773 tokens (@expr1073746774 ) ;
2827:
2828: $if $(@expr1073746775 $!@expr1073746776 $assertEquals $(@expr1073746777 "cppcheck-2.8/test/testtokenize.cpp" $, 2828 $, true $, tok@var455 .@expr4954 linkAt (@expr1073746779 2 ) ==@expr1073746780 tok@var455 .@expr4957 tokAt (@expr1073746782 9 ) $) $) { $return ; }
2829: $if $(@expr1073746783 $!@expr1073746784 $assertEquals $(@expr1073746785 "cppcheck-2.8/test/testtokenize.cpp" $, 2829 $, true $, tok@var455 .@expr4954 linkAt (@expr1073746787 9 ) ==@expr1073746788 tok@var455 .@expr4957 tokAt (@expr1073746790 2 ) $) $) { $return ; }
2830:
2831:
2832: $if $(@expr1073746791 $!@expr1073746792 $assertEquals $(@expr1073746793 "cppcheck-2.8/test/testtokenize.cpp" $, 2832 $, true $, tok@var455 .@expr4954 linkAt (@expr1073746795 7 ) ==@expr1073746796 tok@var455 .@expr4957 tokAt (@expr1073746798 8 ) $) $) { $return ; }
2833: $if $(@expr1073746799 $!@expr1073746800 $assertEquals $(@expr1073746801 "cppcheck-2.8/test/testtokenize.cpp" $, 2833 $, true $, tok@var455 .@expr4954 linkAt (@expr1073746803 8 ) ==@expr1073746804 tok@var455 .@expr4957 tokAt (@expr1073746806 7 ) $) $) { $return ; }
2834:
2835:
2836: $if $(@expr1073746807 $!@expr1073746808 $assertEquals $(@expr1073746809 "cppcheck-2.8/test/testtokenize.cpp" $, 2836 $, true $, tok@var455 .@expr4954 linkAt (@expr1073746811 5 ) ==@expr1073746812 tok@var455 .@expr4957 tokAt (@expr1073746814 6 ) $) $) { $return ; }
2837: $if $(@expr1073746815 $!@expr1073746816 $assertEquals $(@expr1073746817 "cppcheck-2.8/test/testtokenize.cpp" $, 2837 $, true $, tok@var455 .@expr4954 linkAt (@expr1073746819 6 ) ==@expr1073746820 tok@var455 .@expr4957 tokAt (@expr1073746822 5 ) $) $) { $return ; }
2838:
2839: $if $(@expr1073746823 $!@expr1073746824 $assertEquals $(@expr1073746825 "cppcheck-2.8/test/testtokenize.cpp" $, 2839 $, "" $, errout@var100 .@expr4935 str (@expr5003 ) $) $) { $return ; }
2840: }
2841:
2842: {
2843: const char code@var456 [@expr1073746828 57 ] =@expr1073746829 "void f(){\n char a[10];\n char *b ; b = new char[a[0]];\n};"
2844:
2845:
2846: ;
2847: errout@var100 .@expr4935 str (@expr4936 "" ) ;
2848: Tokenizer tokenizer@var457 (@expr1073746832 &@expr4938 settings0@var102 , this@expr4939 ) ;
2849: std ::@expr1073746834 istringstream istr@var458 (@expr1073746835 code@var456 ) ;
2850: $if $(@expr1073746836 $!@expr1073746837 $assert_ $(@expr1073746838 "cppcheck-2.8/test/testtokenize.cpp" $, 2850 $, $(@expr1073746839 tokenizer@var457 .@expr1073746840 tokenize (@expr1073746841 istr@var458 , "test.cpp" ) $) $) $) { $return ; }
2851: const Token * tok@var459 ; tok@var459 =@expr1073746842 tokenizer@var457 .@expr1073746843 tokens (@expr1073746844 ) ;
2852:
2853: $if $(@expr1073746845 $!@expr1073746846 $assertEquals $(@expr1073746847 "cppcheck-2.8/test/testtokenize.cpp" $, 2853 $, true $, tok@var459 .@expr5024 linkAt (@expr1073746849 7 ) ==@expr1073746850 tok@var459 .@expr5027 tokAt (@expr1073746852 9 ) $) $) { $return ; }
2854: $if $(@expr1073746853 $!@expr1073746854 $assertEquals $(@expr1073746855 "cppcheck-2.8/test/testtokenize.cpp" $, 2854 $, true $, tok@var459 .@expr5024 linkAt (@expr1073746857 9 ) ==@expr1073746858 tok@var459 .@expr5027 tokAt (@expr1073746860 7 ) $) $) { $return ; }
2855:
2856:
2857: $if $(@expr1073746861 $!@expr1073746862 $assertEquals $(@expr1073746863 "cppcheck-2.8/test/testtokenize.cpp" $, 2857 $, true $, tok@var459 .@expr5024 linkAt (@expr1073746865 19 ) ==@expr1073746866 tok@var459 .@expr5027 tokAt (@expr1073746868 24 ) $) $) { $return ; }
2858: $if $(@expr1073746869 $!@expr1073746870 $assertEquals $(@expr1073746871 "cppcheck-2.8/test/testtokenize.cpp" $, 2858 $, true $, tok@var459 .@expr5024 linkAt (@expr1073746873 24 ) ==@expr1073746874 tok@var459 .@expr5027 tokAt (@expr1073746876 19 ) $) $) { $return ; }
2859:
2860:
2861: $if $(@expr1073746877 $!@expr1073746878 $assertEquals $(@expr1073746879 "cppcheck-2.8/test/testtokenize.cpp" $, 2861 $, true $, tok@var459 .@expr5024 linkAt (@expr1073746881 21 ) ==@expr1073746882 tok@var459 .@expr5027 tokAt (@expr1073746884 23 ) $) $) { $return ; }
2862: $if $(@expr1073746885 $!@expr1073746886 $assertEquals $(@expr1073746887 "cppcheck-2.8/test/testtokenize.cpp" $, 2862 $, true $, tok@var459 .@expr5024 linkAt (@expr1073746889 23 ) ==@expr1073746890 tok@var459 .@expr5027 tokAt (@expr1073746892 21 ) $) $) { $return ; }
2863:
2864: $if $(@expr1073746893 $!@expr1073746894 $assertEquals $(@expr1073746895 "cppcheck-2.8/test/testtokenize.cpp" $, 2864 $, "" $, errout@var100 .@expr4935 str (@expr5003 ) $) $) { $return ; }
2865: }
2866:
2867: {
2868: const char code@var460 [@expr1073746898 24 ] =@expr1073746899 "void f(){\n foo(g());\n};"
2869:
2870: ;
2871: errout@var100 .@expr4935 str (@expr4936 "" ) ;
2872: Tokenizer tokenizer@var461 (@expr1073746902 &@expr4938 settings0@var102 , this@expr4939 ) ;
2873: std ::@expr1073746904 istringstream istr@var462 (@expr1073746905 code@var460 ) ;
2874: $if $(@expr1073746906 $!@expr1073746907 $assert_ $(@expr1073746908 "cppcheck-2.8/test/testtokenize.cpp" $, 2874 $, $(@expr1073746909 tokenizer@var461 .@expr1073746910 tokenize (@expr1073746911 istr@var462 , "test.cpp" ) $) $) $) { $return ; }
2875: const Token * tok@var463 ; tok@var463 =@expr1073746912 tokenizer@var461 .@expr1073746913 tokens (@expr1073746914 ) ;
2876:
2877: $if $(@expr1073746915 $!@expr1073746916 $assertEquals $(@expr1073746917 "cppcheck-2.8/test/testtokenize.cpp" $, 2877 $, true $, tok@var463 .@expr5094 linkAt (@expr1073746919 6 ) ==@expr1073746920 tok@var463 .@expr5097 tokAt (@expr1073746922 10 ) $) $) { $return ; }
2878: $if $(@expr1073746923 $!@expr1073746924 $assertEquals $(@expr1073746925 "cppcheck-2.8/test/testtokenize.cpp" $, 2878 $, true $, tok@var463 .@expr5094 linkAt (@expr1073746927 10 ) ==@expr1073746928 tok@var463 .@expr5097 tokAt (@expr1073746930 6 ) $) $) { $return ; }
2879:
2880:
2881: $if $(@expr1073746931 $!@expr1073746932 $assertEquals $(@expr1073746933 "cppcheck-2.8/test/testtokenize.cpp" $, 2881 $, true $, tok@var463 .@expr5094 linkAt (@expr1073746935 8 ) ==@expr1073746936 tok@var463 .@expr5097 tokAt (@expr1073746938 9 ) $) $) { $return ; }
2882: $if $(@expr1073746939 $!@expr1073746940 $assertEquals $(@expr1073746941 "cppcheck-2.8/test/testtokenize.cpp" $, 2882 $, true $, tok@var463 .@expr5094 linkAt (@expr1073746943 9 ) ==@expr1073746944 tok@var463 .@expr5097 tokAt (@expr1073746946 8 ) $) $) { $return ; }
2883:
2884: $if $(@expr1073746947 $!@expr1073746948 $assertEquals $(@expr1073746949 "cppcheck-2.8/test/testtokenize.cpp" $, 2884 $, "" $, errout@var100 .@expr4935 str (@expr5003 ) $) $) { $return ; }
2885: }
2886:
2887: {
2888: const char code@var464 [@expr1073746952 75 ] =@expr1073746953 "bool foo(C<z> a, bar<int, x<float>>& f, int b) {\n    return(a<b && b>f);\n}"
2889:
2890: ;
2891: errout@var100 .@expr4935 str (@expr4936 "" ) ;
2892: Tokenizer tokenizer@var465 (@expr1073746956 &@expr4938 settings0@var102 , this@expr4939 ) ;
2893: std ::@expr1073746958 istringstream istr@var466 (@expr1073746959 code@var464 ) ;
2894: $if $(@expr1073746960 $!@expr1073746961 $assert_ $(@expr1073746962 "cppcheck-2.8/test/testtokenize.cpp" $, 2894 $, $(@expr1073746963 tokenizer@var465 .@expr1073746964 tokenize (@expr1073746965 istr@var466 , "test.cpp" ) $) $) $) { $return ; }
2895: const Token * tok@var467 ; tok@var467 =@expr1073746966 tokenizer@var465 .@expr1073746967 tokens (@expr1073746968 ) ;
2896:
2897: $if $(@expr1073746969 $!@expr1073746970 $assertEquals $(@expr1073746971 "cppcheck-2.8/test/testtokenize.cpp" $, 2897 $, true $, tok@var467 .@expr5148 tokAt (@expr1073746973 6 ) ==@expr1073746974 tok@var467 .@expr5151 linkAt (@expr1073746976 4 ) $) $) { $return ; }
2898: $if $(@expr1073746977 $!@expr1073746978 $assertEquals $(@expr1073746979 "cppcheck-2.8/test/testtokenize.cpp" $, 2898 $, true $, tok@var467 .@expr5148 tokAt (@expr1073746981 4 ) ==@expr1073746982 tok@var467 .@expr5151 linkAt (@expr1073746984 6 ) $) $) { $return ; }
2899:
2900:
2901: $if $(@expr1073746985 $!@expr1073746986 $assertEquals $(@expr1073746987 "cppcheck-2.8/test/testtokenize.cpp" $, 2901 $, true $, tok@var467 .@expr5148 tokAt (@expr1073746989 17 ) ==@expr1073746990 tok@var467 .@expr5151 linkAt (@expr1073746992 10 ) $) $) { $return ; }
2902: $if $(@expr1073746993 $!@expr1073746994 $assertEquals $(@expr1073746995 "cppcheck-2.8/test/testtokenize.cpp" $, 2902 $, true $, tok@var467 .@expr5148 tokAt (@expr1073746997 10 ) ==@expr1073746998 tok@var467 .@expr5151 linkAt (@expr1073747000 17 ) $) $) { $return ; }
2903:
2904:
2905: $if $(@expr1073747001 $!@expr1073747002 $assertEquals $(@expr1073747003 "cppcheck-2.8/test/testtokenize.cpp" $, 2905 $, true $, tok@var467 .@expr5148 tokAt (@expr1073747005 16 ) ==@expr1073747006 tok@var467 .@expr5151 linkAt (@expr1073747008 14 ) $) $) { $return ; }
2906: $if $(@expr1073747009 $!@expr1073747010 $assertEquals $(@expr1073747011 "cppcheck-2.8/test/testtokenize.cpp" $, 2906 $, true $, tok@var467 .@expr5148 tokAt (@expr1073747013 14 ) ==@expr1073747014 tok@var467 .@expr5151 linkAt (@expr1073747016 16 ) $) $) { $return ; }
2907:
2908:
2909: $if $(@expr1073747017 $!@expr1073747018 $assertEquals $(@expr1073747019 "cppcheck-2.8/test/testtokenize.cpp" $, 2909 $, true $, nullptr ==@expr1073747020 tok@var467 .@expr5151 linkAt (@expr1073747022 28 ) $) $) { $return ; }
2910: $if $(@expr1073747023 $!@expr1073747024 $assertEquals $(@expr1073747025 "cppcheck-2.8/test/testtokenize.cpp" $, 2910 $, true $, nullptr ==@expr1073747026 tok@var467 .@expr5151 linkAt (@expr1073747028 32 ) $) $) { $return ; }
2911:
2912: $if $(@expr1073747029 $!@expr1073747030 $assertEquals $(@expr1073747031 "cppcheck-2.8/test/testtokenize.cpp" $, 2912 $, "" $, errout@var100 .@expr4935 str (@expr5003 ) $) $) { $return ; }
2913: }
2914:
2915: {
2916: const char code@var468 [@expr1073747034 47 ] =@expr1073747035 "void foo() {\n    return static_cast<bar>(a);\n}"
2917:
2918: ;
2919: errout@var100 .@expr4935 str (@expr4936 "" ) ;
2920: Tokenizer tokenizer@var469 (@expr1073747038 &@expr4938 settings0@var102 , this@expr4939 ) ;
2921: std ::@expr1073747040 istringstream istr@var470 (@expr1073747041 code@var468 ) ;
2922: $if $(@expr1073747042 $!@expr1073747043 $assert_ $(@expr1073747044 "cppcheck-2.8/test/testtokenize.cpp" $, 2922 $, $(@expr1073747045 tokenizer@var469 .@expr1073747046 tokenize (@expr1073747047 istr@var470 , "test.cpp" ) $) $) $) { $return ; }
2923: const Token * tok@var471 ; tok@var471 =@expr1073747048 tokenizer@var469 .@expr1073747049 tokens (@expr1073747050 ) ;
2924:
2925:
2926: $if $(@expr1073747051 $!@expr1073747052 $assertEquals $(@expr1073747053 "cppcheck-2.8/test/testtokenize.cpp" $, 2926 $, true $, tok@var471 .@expr5230 tokAt (@expr1073747055 9 ) ==@expr1073747056 tok@var471 .@expr5233 linkAt (@expr1073747058 7 ) $) $) { $return ; }
2927: $if $(@expr1073747059 $!@expr1073747060 $assertEquals $(@expr1073747061 "cppcheck-2.8/test/testtokenize.cpp" $, 2927 $, true $, tok@var471 .@expr5230 tokAt (@expr1073747063 7 ) ==@expr1073747064 tok@var471 .@expr5233 linkAt (@expr1073747066 9 ) $) $) { $return ; }
2928:
2929: $if $(@expr1073747067 $!@expr1073747068 $assertEquals $(@expr1073747069 "cppcheck-2.8/test/testtokenize.cpp" $, 2929 $, "" $, errout@var100 .@expr4935 str (@expr5003 ) $) $) { $return ; }
2930: }
2931:
2932: {
2933: const char code@var472 [@expr1073747072 44 ] =@expr1073747073 "void foo() {\n    nvwa<(x > y)> ERROR_nnn;\n}"
2934:
2935: ;
2936: errout@var100 .@expr4935 str (@expr4936 "" ) ;
2937: Tokenizer tokenizer@var473 (@expr1073747076 &@expr4938 settings0@var102 , this@expr4939 ) ;
2938: std ::@expr1073747078 istringstream istr@var474 (@expr1073747079 code@var472 ) ;
2939: $if $(@expr1073747080 $!@expr1073747081 $assert_ $(@expr1073747082 "cppcheck-2.8/test/testtokenize.cpp" $, 2939 $, $(@expr1073747083 tokenizer@var473 .@expr1073747084 tokenize (@expr1073747085 istr@var474 , "test.cpp" ) $) $) $) { $return ; }
2940: const Token * tok@var475 ; tok@var475 =@expr1073747086 tokenizer@var473 .@expr1073747087 tokens (@expr1073747088 ) ;
2941:
2942:
2943: $if $(@expr1073747089 $!@expr1073747090 $assertEquals $(@expr1073747091 "cppcheck-2.8/test/testtokenize.cpp" $, 2943 $, true $, tok@var475 .@expr5268 tokAt (@expr1073747093 12 ) ==@expr1073747094 tok@var475 .@expr5271 linkAt (@expr1073747096 6 ) $) $) { $return ; }
2944: $if $(@expr1073747097 $!@expr1073747098 $assertEquals $(@expr1073747099 "cppcheck-2.8/test/testtokenize.cpp" $, 2944 $, true $, tok@var475 .@expr5268 tokAt (@expr1073747101 6 ) ==@expr1073747102 tok@var475 .@expr5271 linkAt (@expr1073747104 12 ) $) $) { $return ; }
2945:
2946: $if $(@expr1073747105 $!@expr1073747106 $assertEquals $(@expr1073747107 "cppcheck-2.8/test/testtokenize.cpp" $, 2946 $, "" $, errout@var100 .@expr4935 str (@expr5003 ) $) $) { $return ; }
2947: }
2948:
2949: {
2950:
2951: const char code@var476 [@expr1073747110 28 ] =@expr1073747111 "class A : public B<int> {};" ;
2952: errout@var100 .@expr4935 str (@expr4936 "" ) ;
2953: Tokenizer tokenizer@var477 (@expr1073747114 &@expr4938 settings0@var102 , this@expr4939 ) ;
2954: std ::@expr1073747116 istringstream istr@var478 (@expr1073747117 code@var476 ) ;
2955: $if $(@expr1073747118 $!@expr1073747119 $assert_ $(@expr1073747120 "cppcheck-2.8/test/testtokenize.cpp" $, 2955 $, $(@expr1073747121 tokenizer@var477 .@expr1073747122 tokenize (@expr1073747123 istr@var478 , "test.cpp" ) $) $) $) { $return ; }
2956: const Token * tok@var479 ; tok@var479 =@expr1073747124 tokenizer@var477 .@expr1073747125 tokens (@expr1073747126 ) ;
2957:
2958:
2959: $if $(@expr1073747127 $!@expr1073747128 $assertEquals $(@expr1073747129 "cppcheck-2.8/test/testtokenize.cpp" $, 2959 $, true $, tok@var479 .@expr5306 tokAt (@expr1073747131 5 ) ==@expr1073747132 tok@var479 .@expr5309 linkAt (@expr1073747134 7 ) $) $) { $return ; }
2960: $if $(@expr1073747135 $!@expr1073747136 $assertEquals $(@expr1073747137 "cppcheck-2.8/test/testtokenize.cpp" $, 2960 $, true $, tok@var479 .@expr5309 linkAt (@expr1073747139 5 ) ==@expr1073747140 tok@var479 .@expr5306 tokAt (@expr1073747142 7 ) $) $) { $return ; }
2961:
2962: $if $(@expr1073747143 $!@expr1073747144 $assertEquals $(@expr1073747145 "cppcheck-2.8/test/testtokenize.cpp" $, 2962 $, "" $, errout@var100 .@expr4935 str (@expr5003 ) $) $) { $return ; }
2963: }
2964:
2965: {
2966:
2967: const char code@var480 [@expr1073747148 80 ] =@expr1073747149 "Bar<Typelist< int, Typelist< int, Typelist< int, FooNullType>>>>::set(1, 2, 3);" ;
2968: errout@var100 .@expr4935 str (@expr4936 "" ) ;
2969: Tokenizer tokenizer@var481 (@expr1073747152 &@expr4938 settings0@var102 , this@expr4939 ) ;
2970: std ::@expr1073747154 istringstream istr@var482 (@expr1073747155 code@var480 ) ;
2971: $if $(@expr1073747156 $!@expr1073747157 $assert_ $(@expr1073747158 "cppcheck-2.8/test/testtokenize.cpp" $, 2971 $, $(@expr1073747159 tokenizer@var481 .@expr1073747160 tokenize (@expr1073747161 istr@var482 , "test.cpp" ) $) $) $) { $return ; }
2972: const Token * tok@var483 ; tok@var483 =@expr1073747162 tokenizer@var481 .@expr1073747163 tokens (@expr1073747164 ) ;
2973:
2974: $if $(@expr1073747165 $!@expr1073747166 $assertEquals $(@expr1073747167 "cppcheck-2.8/test/testtokenize.cpp" $, 2974 $, true $, tok@var483 .@expr5344 tokAt (@expr1073747169 1 ) ==@expr1073747170 tok@var483 .@expr5347 linkAt (@expr1073747172 18 ) $) $) { $return ; }
2975: $if $(@expr1073747173 $!@expr1073747174 $assertEquals $(@expr1073747175 "cppcheck-2.8/test/testtokenize.cpp" $, 2975 $, true $, tok@var483 .@expr5344 tokAt (@expr1073747177 3 ) ==@expr1073747178 tok@var483 .@expr5347 linkAt (@expr1073747180 17 ) $) $) { $return ; }
2976: $if $(@expr1073747181 $!@expr1073747182 $assertEquals $(@expr1073747183 "cppcheck-2.8/test/testtokenize.cpp" $, 2976 $, true $, tok@var483 .@expr5344 tokAt (@expr1073747185 7 ) ==@expr1073747186 tok@var483 .@expr5347 linkAt (@expr1073747188 16 ) $) $) { $return ; }
2977: $if $(@expr1073747189 $!@expr1073747190 $assertEquals $(@expr1073747191 "cppcheck-2.8/test/testtokenize.cpp" $, 2977 $, true $, tok@var483 .@expr5344 tokAt (@expr1073747193 11 ) ==@expr1073747194 tok@var483 .@expr5347 linkAt (@expr1073747196 15 ) $) $) { $return ; }
2978:
2979: $if $(@expr1073747197 $!@expr1073747198 $assertEquals $(@expr1073747199 "cppcheck-2.8/test/testtokenize.cpp" $, 2979 $, "" $, errout@var100 .@expr4935 str (@expr5003 ) $) $) { $return ; }
2980: }
2981:
2982: {
2983:
2984: const char code@var484 [@expr1073747202 18 ] =@expr1073747203 "new Foo<Bar>[10];" ;
2985: errout@var100 .@expr4935 str (@expr4936 "" ) ;
2986: Tokenizer tokenizer@var485 (@expr1073747206 &@expr4938 settings0@var102 , this@expr4939 ) ;
2987: std ::@expr1073747208 istringstream istr@var486 (@expr1073747209 code@var484 ) ;
2988: $if $(@expr1073747210 $!@expr1073747211 $assert_ $(@expr1073747212 "cppcheck-2.8/test/testtokenize.cpp" $, 2988 $, $(@expr1073747213 tokenizer@var485 .@expr1073747214 tokenize (@expr1073747215 istr@var486 , "test.cpp" ) $) $) $) { $return ; }
2989: const Token * tok@var487 ; tok@var487 =@expr1073747216 tokenizer@var485 .@expr1073747217 tokens (@expr1073747218 ) ;
2990:
2991: $if $(@expr1073747219 $!@expr1073747220 $assertEquals $(@expr1073747221 "cppcheck-2.8/test/testtokenize.cpp" $, 2991 $, true $, tok@var487 .@expr5398 tokAt (@expr1073747223 2 ) ==@expr1073747224 tok@var487 .@expr5401 linkAt (@expr1073747226 4 ) $) $) { $return ; }
2992: $if $(@expr1073747227 $!@expr1073747228 $assertEquals $(@expr1073747229 "cppcheck-2.8/test/testtokenize.cpp" $, 2992 $, true $, tok@var487 .@expr5398 tokAt (@expr1073747231 4 ) ==@expr1073747232 tok@var487 .@expr5401 linkAt (@expr1073747234 2 ) $) $) { $return ; }
2993: $if $(@expr1073747235 $!@expr1073747236 $assertEquals $(@expr1073747237 "cppcheck-2.8/test/testtokenize.cpp" $, 2993 $, true $, tok@var487 .@expr5398 tokAt (@expr1073747239 5 ) ==@expr1073747240 tok@var487 .@expr5401 linkAt (@expr1073747242 7 ) $) $) { $return ; }
2994: $if $(@expr1073747243 $!@expr1073747244 $assertEquals $(@expr1073747245 "cppcheck-2.8/test/testtokenize.cpp" $, 2994 $, true $, tok@var487 .@expr5398 tokAt (@expr1073747247 7 ) ==@expr1073747248 tok@var487 .@expr5401 linkAt (@expr1073747250 5 ) $) $) { $return ; }
2995:
2996: $if $(@expr1073747251 $!@expr1073747252 $assertEquals $(@expr1073747253 "cppcheck-2.8/test/testtokenize.cpp" $, 2996 $, "" $, errout@var100 .@expr4935 str (@expr5003 ) $) $) { $return ; }
2997: }
2998: {
2999:
3000: const char code@var488 [@expr1073747256 38 ] =@expr1073747257 "func = integral_<uchar, int, double>;" ;
3001: errout@var100 .@expr4935 str (@expr4936 "" ) ;
3002: Tokenizer tokenizer@var489 (@expr1073747260 &@expr4938 settings0@var102 , this@expr4939 ) ;
3003: std ::@expr1073747262 istringstream istr@var490 (@expr1073747263 code@var488 ) ;
3004: $if $(@expr1073747264 $!@expr1073747265 $assert_ $(@expr1073747266 "cppcheck-2.8/test/testtokenize.cpp" $, 3004 $, $(@expr1073747267 tokenizer@var489 .@expr1073747268 tokenize (@expr1073747269 istr@var490 , "test.cpp" ) $) $) $) { $return ; }
3005: const Token * tok@var491 ; tok@var491 =@expr1073747270 tokenizer@var489 .@expr1073747271 tokens (@expr1073747272 ) ;
3006:
3007: $if $(@expr1073747273 $!@expr1073747274 $assertEquals $(@expr1073747275 "cppcheck-2.8/test/testtokenize.cpp" $, 3007 $, true $, tok@var491 .@expr5452 tokAt (@expr1073747277 3 ) ==@expr1073747278 tok@var491 .@expr5455 linkAt (@expr1073747280 9 ) $) $) { $return ; }
3008: $if $(@expr1073747281 $!@expr1073747282 $assertEquals $(@expr1073747283 "cppcheck-2.8/test/testtokenize.cpp" $, 3008 $, true $, tok@var491 .@expr5455 linkAt (@expr1073747285 3 ) ==@expr1073747286 tok@var491 .@expr5452 tokAt (@expr1073747288 9 ) $) $) { $return ; }
3009:
3010: $if $(@expr1073747289 $!@expr1073747290 $assertEquals $(@expr1073747291 "cppcheck-2.8/test/testtokenize.cpp" $, 3010 $, "" $, errout@var100 .@expr4935 str (@expr5003 ) $) $) { $return ; }
3011: }
3012:
3013: {
3014:
3015: const char code@var492 [@expr1073747294 25 ] =@expr1073747295 "{ if (a < b || c > d); }" ;
3016: errout@var100 .@expr4935 str (@expr4936 "" ) ;
3017: Tokenizer tokenizer@var493 (@expr1073747298 &@expr4938 settings0@var102 , this@expr4939 ) ;
3018: std ::@expr1073747300 istringstream istr@var494 (@expr1073747301 code@var492 ) ;
3019: $if $(@expr1073747302 $!@expr1073747303 $assert_ $(@expr1073747304 "cppcheck-2.8/test/testtokenize.cpp" $, 3019 $, $(@expr1073747305 tokenizer@var493 .@expr1073747306 tokenize (@expr1073747307 istr@var494 , "test.cpp" ) $) $) $) { $return ; }
3020: const Token * tok@var495 ; tok@var495 =@expr1073747308 tokenizer@var493 .@expr1073747309 tokens (@expr1073747310 ) ;
3021:
3022: $if $(@expr1073747311 $!@expr1073747312 $assertEquals $(@expr1073747313 "cppcheck-2.8/test/testtokenize.cpp" $, 3022 $, true $, tok@var495 .@expr1073747314 linkAt (@expr1073747315 3 ) ==@expr1073747316 nullptr $) $) { $return ; }
3023: }
3024:
3025: {
3026:
3027: const char code@var496 [@expr1073747317 25 ] =@expr1073747318 "bool f = a < b || c > d;" ;
3028: errout@var100 .@expr4935 str (@expr4936 "" ) ;
3029: Tokenizer tokenizer@var497 (@expr1073747321 &@expr4938 settings0@var102 , this@expr4939 ) ;
3030: std ::@expr1073747323 istringstream istr@var498 (@expr1073747324 code@var496 ) ;
3031: $if $(@expr1073747325 $!@expr1073747326 $assert_ $(@expr1073747327 "cppcheck-2.8/test/testtokenize.cpp" $, 3031 $, $(@expr1073747328 tokenizer@var497 .@expr1073747329 tokenize (@expr1073747330 istr@var498 , "test.cpp" ) $) $) $) { $return ; }
3032: const Token * tok@var499 ; tok@var499 =@expr1073747331 tokenizer@var497 .@expr1073747332 tokens (@expr1073747333 ) ;
3033:
3034: $if $(@expr1073747334 $!@expr1073747335 $assertEquals $(@expr1073747336 "cppcheck-2.8/test/testtokenize.cpp" $, 3034 $, true $, tok@var499 .@expr1073747337 linkAt (@expr1073747338 4 ) ==@expr1073747339 nullptr $) $) { $return ; }
3035: }
3036:
3037: {
3038:
3039: const char code@var500 [@expr1073747340 16 ] =@expr1073747341 "a < b || c > d;" ;
3040: errout@var100 .@expr4935 str (@expr4936 "" ) ;
3041: Tokenizer tokenizer@var501 (@expr1073747344 &@expr4938 settings0@var102 , this@expr4939 ) ;
3042: std ::@expr1073747346 istringstream istr@var502 (@expr1073747347 code@var500 ) ;
3043: $if $(@expr1073747348 $!@expr1073747349 $assert_ $(@expr1073747350 "cppcheck-2.8/test/testtokenize.cpp" $, 3043 $, $(@expr1073747351 tokenizer@var501 .@expr1073747352 tokenize (@expr1073747353 istr@var502 , "test.cpp" ) $) $) $) { $return ; }
3044: const Token * tok@var503 ; tok@var503 =@expr1073747354 tokenizer@var501 .@expr1073747355 tokens (@expr1073747356 ) ;
3045:
3046: $if $(@expr1073747357 $!@expr1073747358 $assertEquals $(@expr1073747359 "cppcheck-2.8/test/testtokenize.cpp" $, 3046 $, true $, tok@var503 .@expr1073747360 linkAt (@expr1073747361 1 ) ==@expr1073747362 tok@var503 .@expr1073747363 tokAt (@expr1073747364 5 ) $) $) { $return ; }
3047: }
3048:
3049: {
3050:
3051: const char code@var504 [@expr1073747365 35 ] =@expr1073747366 "{ if (a < b || c == 3 || d > e); }" ;
3052: errout@var100 .@expr4935 str (@expr4936 "" ) ;
3053: Tokenizer tokenizer@var505 (@expr1073747369 &@expr4938 settings0@var102 , this@expr4939 ) ;
3054: std ::@expr1073747371 istringstream istr@var506 (@expr1073747372 code@var504 ) ;
3055: $if $(@expr1073747373 $!@expr1073747374 $assert_ $(@expr1073747375 "cppcheck-2.8/test/testtokenize.cpp" $, 3055 $, $(@expr1073747376 tokenizer@var505 .@expr1073747377 tokenize (@expr1073747378 istr@var506 , "test.cpp" ) $) $) $) { $return ; }
3056: const Token * tok@var507 ; tok@var507 =@expr1073747379 tokenizer@var505 .@expr1073747380 tokens (@expr1073747381 ) ;
3057:
3058: $if $(@expr1073747382 $!@expr1073747383 $assertEquals $(@expr1073747384 "cppcheck-2.8/test/testtokenize.cpp" $, 3058 $, true $, tok@var507 .@expr1073747385 linkAt (@expr1073747386 3 ) ==@expr1073747387 nullptr $) $) { $return ; }
3059: }
3060:
3061: {
3062:
3063: const char code@var508 [@expr1073747388 16 ] =@expr1073747389 "a<b==3 || c> d;" ;
3064: errout@var100 .@expr4935 str (@expr4936 "" ) ;
3065: Tokenizer tokenizer@var509 (@expr1073747392 &@expr4938 settings0@var102 , this@expr4939 ) ;
3066: std ::@expr1073747394 istringstream istr@var510 (@expr1073747395 code@var508 ) ;
3067: $if $(@expr1073747396 $!@expr1073747397 $assert_ $(@expr1073747398 "cppcheck-2.8/test/testtokenize.cpp" $, 3067 $, $(@expr1073747399 tokenizer@var509 .@expr1073747400 tokenize (@expr1073747401 istr@var510 , "test.cpp" ) $) $) $) { $return ; }
3068: const Token * tok@var511 ; tok@var511 =@expr1073747402 tokenizer@var509 .@expr1073747403 tokens (@expr1073747404 ) ;
3069: $if $(@expr1073747405 $!@expr1073747406 $assertEquals $(@expr1073747407 "cppcheck-2.8/test/testtokenize.cpp" $, 3069 $, true $, tok@var511 .@expr1073747408 linkAt (@expr1073747409 1 ) ==@expr1073747410 tok@var511 .@expr1073747411 tokAt (@expr1073747412 7 ) $) $) { $return ; }
3070: }
3071:
3072: {
3073:
3074: const char code@var512 [@expr1073747413 16 ] =@expr1073747414 "a<b || c==4> d;" ;
3075: errout@var100 .@expr4935 str (@expr4936 "" ) ;
3076: Tokenizer tokenizer@var513 (@expr1073747417 &@expr4938 settings0@var102 , this@expr4939 ) ;
3077: std ::@expr1073747419 istringstream istr@var514 (@expr1073747420 code@var512 ) ;
3078: $if $(@expr1073747421 $!@expr1073747422 $assert_ $(@expr1073747423 "cppcheck-2.8/test/testtokenize.cpp" $, 3078 $, $(@expr1073747424 tokenizer@var513 .@expr1073747425 tokenize (@expr1073747426 istr@var514 , "test.cpp" ) $) $) $) { $return ; }
3079: const Token * tok@var515 ; tok@var515 =@expr1073747427 tokenizer@var513 .@expr1073747428 tokens (@expr1073747429 ) ;
3080: $if $(@expr1073747430 $!@expr1073747431 $assertEquals $(@expr1073747432 "cppcheck-2.8/test/testtokenize.cpp" $, 3080 $, true $, tok@var515 .@expr1073747433 linkAt (@expr1073747434 1 ) ==@expr1073747435 tok@var515 .@expr1073747436 tokAt (@expr1073747437 7 ) $) $) { $return ; }
3081: }
3082:
3083: {
3084: const char code@var516 [@expr1073747438 34 ] =@expr1073747439 "template < f = b || c > struct S;" ;
3085: errout@var100 .@expr4935 str (@expr4936 "" ) ;
3086: Tokenizer tokenizer@var517 (@expr1073747442 &@expr4938 settings0@var102 , this@expr4939 ) ;
3087: std ::@expr1073747444 istringstream istr@var518 (@expr1073747445 code@var516 ) ;
3088: $if $(@expr1073747446 $!@expr1073747447 $assert_ $(@expr1073747448 "cppcheck-2.8/test/testtokenize.cpp" $, 3088 $, $(@expr1073747449 tokenizer@var517 .@expr1073747450 tokenize (@expr1073747451 istr@var518 , "test.cpp" ) $) $) $) { $return ; }
3089: const Token * tok@var519 ; tok@var519 =@expr1073747452 tokenizer@var517 .@expr1073747453 tokens (@expr1073747454 ) ;
3090: $if $(@expr1073747455 $!@expr1073747456 $assertEquals $(@expr1073747457 "cppcheck-2.8/test/testtokenize.cpp" $, 3090 $, true $, tok@var519 .@expr5634 linkAt (@expr1073747459 1 ) ==@expr1073747460 tok@var519 .@expr5637 tokAt (@expr1073747462 7 ) $) $) { $return ; }
3091: $if $(@expr1073747463 $!@expr1073747464 $assertEquals $(@expr1073747465 "cppcheck-2.8/test/testtokenize.cpp" $, 3091 $, true $, tok@var519 .@expr5637 tokAt (@expr1073747467 1 ) ==@expr1073747468 tok@var519 .@expr5634 linkAt (@expr1073747470 7 ) $) $) { $return ; }
3092: }
3093:
3094: {
3095: const char code@var520 [@expr1073747471 23 ] =@expr1073747472 "struct A : B<c&&d> {};" ;
3096: errout@var100 .@expr4935 str (@expr4936 "" ) ;
3097: Tokenizer tokenizer@var521 (@expr1073747475 &@expr4938 settings0@var102 , this@expr4939 ) ;
3098: std ::@expr1073747477 istringstream istr@var522 (@expr1073747478 code@var520 ) ;
3099: $if $(@expr1073747479 $!@expr1073747480 $assert_ $(@expr1073747481 "cppcheck-2.8/test/testtokenize.cpp" $, 3099 $, $(@expr1073747482 tokenizer@var521 .@expr1073747483 tokenize (@expr1073747484 istr@var522 , "test.cpp" ) $) $) $) { $return ; }
3100: const Token * tok@var523 ; tok@var523 =@expr1073747485 tokenizer@var521 .@expr1073747486 tokens (@expr1073747487 ) ;
3101: $if $(@expr1073747488 $!@expr1073747489 $assertEquals $(@expr1073747490 "cppcheck-2.8/test/testtokenize.cpp" $, 3101 $, true $, tok@var523 .@expr5667 linkAt (@expr1073747492 4 ) ==@expr1073747493 tok@var523 .@expr5670 tokAt (@expr1073747495 8 ) $) $) { $return ; }
3102: $if $(@expr1073747496 $!@expr1073747497 $assertEquals $(@expr1073747498 "cppcheck-2.8/test/testtokenize.cpp" $, 3102 $, true $, tok@var523 .@expr5670 tokAt (@expr1073747500 4 ) ==@expr1073747501 tok@var523 .@expr5667 linkAt (@expr1073747503 8 ) $) $) { $return ; }
3103: }
3104:
3105: {
3106: const char code@var524 [@expr1073747504 11 ] =@expr1073747505 "Data<T&&>;" ;
3107: errout@var100 .@expr4935 str (@expr4936 "" ) ;
3108: Tokenizer tokenizer@var525 (@expr1073747508 &@expr4938 settings0@var102 , this@expr4939 ) ;
3109: std ::@expr1073747510 istringstream istr@var526 (@expr1073747511 code@var524 ) ;
3110: $if $(@expr1073747512 $!@expr1073747513 $assert_ $(@expr1073747514 "cppcheck-2.8/test/testtokenize.cpp" $, 3110 $, $(@expr1073747515 tokenizer@var525 .@expr1073747516 tokenize (@expr1073747517 istr@var526 , "test.cpp" ) $) $) $) { $return ; }
3111: const Token * tok@var527 ; tok@var527 =@expr1073747518 tokenizer@var525 .@expr1073747519 tokens (@expr1073747520 ) ;
3112: $if $(@expr1073747521 $!@expr1073747522 $assertEquals $(@expr1073747523 "cppcheck-2.8/test/testtokenize.cpp" $, 3112 $, true $, tok@var527 .@expr5700 linkAt (@expr1073747525 1 ) ==@expr1073747526 tok@var527 .@expr5703 tokAt (@expr1073747528 4 ) $) $) { $return ; }
3113: $if $(@expr1073747529 $!@expr1073747530 $assertEquals $(@expr1073747531 "cppcheck-2.8/test/testtokenize.cpp" $, 3113 $, true $, tok@var527 .@expr5703 tokAt (@expr1073747533 1 ) ==@expr1073747534 tok@var527 .@expr5700 linkAt (@expr1073747536 4 ) $) $) { $return ; }
3114: }
3115:
3116: {
3117:
3118: const char code@var528 [@expr1073747537 63 ] =@expr1073747538 "template<class R> struct FuncType<R(&)()> : FuncType<R()> { };" ;
3119: errout@var100 .@expr4935 str (@expr4936 "" ) ;
3120: Tokenizer tokenizer@var529 (@expr1073747541 &@expr4938 settings0@var102 , this@expr4939 ) ;
3121: std ::@expr1073747543 istringstream istr@var530 (@expr1073747544 code@var528 ) ;
3122: $if $(@expr1073747545 $!@expr1073747546 $assert_ $(@expr1073747547 "cppcheck-2.8/test/testtokenize.cpp" $, 3122 $, $(@expr1073747548 tokenizer@var529 .@expr1073747549 tokenize (@expr1073747550 istr@var530 , "test.cpp" ) $) $) $) { $return ; }
3123: const Token * tok@var531 ; tok@var531 =@expr1073747551 tokenizer@var529 .@expr1073747552 tokens (@expr1073747553 ) ;
3124:
3125: $if $(@expr1073747554 $!@expr1073747555 $assertEquals $(@expr1073747556 "cppcheck-2.8/test/testtokenize.cpp" $, 3125 $, true $, tok@var531 .@expr5733 linkAt (@expr1073747558 1 ) ==@expr1073747559 tok@var531 .@expr5736 tokAt (@expr1073747561 4 ) $) $) { $return ; }
3126: $if $(@expr1073747562 $!@expr1073747563 $assertEquals $(@expr1073747564 "cppcheck-2.8/test/testtokenize.cpp" $, 3126 $, true $, tok@var531 .@expr5733 linkAt (@expr1073747566 7 ) ==@expr1073747567 tok@var531 .@expr5736 tokAt (@expr1073747569 14 ) $) $) { $return ; }
3127: $if $(@expr1073747570 $!@expr1073747571 $assertEquals $(@expr1073747572 "cppcheck-2.8/test/testtokenize.cpp" $, 3127 $, true $, tok@var531 .@expr5733 linkAt (@expr1073747574 9 ) ==@expr1073747575 tok@var531 .@expr5736 tokAt (@expr1073747577 11 ) $) $) { $return ; }
3128: $if $(@expr1073747578 $!@expr1073747579 $assertEquals $(@expr1073747580 "cppcheck-2.8/test/testtokenize.cpp" $, 3128 $, true $, tok@var531 .@expr5733 linkAt (@expr1073747582 12 ) ==@expr1073747583 tok@var531 .@expr5736 tokAt (@expr1073747585 13 ) $) $) { $return ; }
3129: $if $(@expr1073747586 $!@expr1073747587 $assertEquals $(@expr1073747588 "cppcheck-2.8/test/testtokenize.cpp" $, 3129 $, true $, tok@var531 .@expr5733 linkAt (@expr1073747590 17 ) ==@expr1073747591 tok@var531 .@expr5736 tokAt (@expr1073747593 21 ) $) $) { $return ; }
3130: $if $(@expr1073747594 $!@expr1073747595 $assertEquals $(@expr1073747596 "cppcheck-2.8/test/testtokenize.cpp" $, 3130 $, true $, tok@var531 .@expr5733 linkAt (@expr1073747598 19 ) ==@expr1073747599 tok@var531 .@expr5736 tokAt (@expr1073747601 20 ) $) $) { $return ; }
3131: $if $(@expr1073747602 $!@expr1073747603 $assertEquals $(@expr1073747604 "cppcheck-2.8/test/testtokenize.cpp" $, 3131 $, true $, tok@var531 .@expr5733 linkAt (@expr1073747606 22 ) ==@expr1073747607 tok@var531 .@expr5736 tokAt (@expr1073747609 23 ) $) $) { $return ; }
3132: }
3133: }
3134:
3135: void createLinks2 ( ) {
3136: {
3137:
3138: const char code@var532 [@expr1073747610 41 ] =@expr1073747611 "enum { value = boost::mpl::at_c<B, C> };" ;
3139: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3140: Tokenizer tokenizer@var533 (@expr1073747614 &@expr5791 settings0@var102 , this@expr5792 ) ;
3141: std ::@expr1073747617 istringstream istr@var534 (@expr1073747618 code@var532 ) ;
3142: $if $(@expr1073747619 $!@expr1073747620 $assert_ $(@expr1073747621 "cppcheck-2.8/test/testtokenize.cpp" $, 3142 $, $(@expr1073747622 tokenizer@var533 .@expr1073747623 tokenize (@expr1073747624 istr@var534 , "test.cpp" ) $) $) $) { $return ; }
3143: const Token * tok@var535 ; tok@var535 =@expr1073747625 Token ::@expr5802 findsimplematch (@expr1073747627 tokenizer@var533 .@expr1073747628 tokens (@expr1073747629 ) , "<" ) ;
3144: $if $(@expr1073747630 $!@expr1073747631 $assertEquals $(@expr1073747632 "cppcheck-2.8/test/testtokenize.cpp" $, 3144 $, true $, tok@var535 .@expr1073747633 link (@expr1073747634 ) ==@expr1073747635 tok@var535 .@expr1073747636 tokAt (@expr1073747637 4 ) $) $) { $return ; }
3145: $if $(@expr1073747638 $!@expr1073747639 $assertEquals $(@expr1073747640 "cppcheck-2.8/test/testtokenize.cpp" $, 3145 $, true $, tok@var535 .@expr1073747641 linkAt (@expr1073747642 4 ) ==@expr1073747643 tok@var535 $) $) { $return ; }
3146: }
3147:
3148: {
3149:
3150: const char code@var536 [@expr1073747644 168 ] =@expr1073747645 "template <typename T, typename U>\nstruct CheckedDivOp< T, U, typename std::enable_if<std::is_floating_point<T>::value || std::is_floating_point<U>::value>::type> {\n};\n"
3151:
3152: ;
3153: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3154: Tokenizer tokenizer@var537 (@expr1073747648 &@expr5791 settings0@var102 , this@expr5792 ) ;
3155: std ::@expr1073747650 istringstream istr@var538 (@expr1073747651 code@var536 ) ;
3156: $if $(@expr1073747652 $!@expr1073747653 $assert_ $(@expr1073747654 "cppcheck-2.8/test/testtokenize.cpp" $, 3156 $, $(@expr1073747655 tokenizer@var537 .@expr1073747656 tokenize (@expr1073747657 istr@var538 , "test.cpp" ) $) $) $) { $return ; }
3157: const Token * tok1@var539 ; tok1@var539 =@expr1073747658 Token ::@expr5802 findsimplematch (@expr1073747660 tokenizer@var537 .@expr5837 tokens (@expr5838 ) , "struct" ) .@expr1073747663 tokAt (@expr1073747664 2 ) ;
3158: const Token * tok2@var540 ; tok2@var540 =@expr1073747665 Token ::@expr5802 findsimplematch (@expr1073747667 tokenizer@var537 .@expr5837 tokens (@expr5838 ) , "{" ) .@expr1073747670 previous (@expr1073747671 ) ;
3159: $if $(@expr1073747672 $!@expr1073747673 $assertEquals $(@expr1073747674 "cppcheck-2.8/test/testtokenize.cpp" $, 3159 $, true $, tok1@var539 .@expr1073747675 link (@expr1073747676 ) ==@expr1073747677 tok2@var540 $) $) { $return ; }
3160: $if $(@expr1073747678 $!@expr1073747679 $assertEquals $(@expr1073747680 "cppcheck-2.8/test/testtokenize.cpp" $, 3160 $, true $, tok2@var540 .@expr1073747681 link (@expr1073747682 ) ==@expr1073747683 tok1@var539 $) $) { $return ; }
3161: }
3162:
3163: {
3164:
3165: const char code@var541 [@expr1073747684 43 ] =@expr1073747685 "template <class C> X<Y&&Z, C*> copy() {};\n" ;
3166: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3167: Tokenizer tokenizer@var542 (@expr1073747688 &@expr5791 settings0@var102 , this@expr5792 ) ;
3168: std ::@expr1073747690 istringstream istr@var543 (@expr1073747691 code@var541 ) ;
3169: $if $(@expr1073747692 $!@expr1073747693 $assert_ $(@expr1073747694 "cppcheck-2.8/test/testtokenize.cpp" $, 3169 $, $(@expr1073747695 tokenizer@var542 .@expr1073747696 tokenize (@expr1073747697 istr@var543 , "test.cpp" ) $) $) $) { $return ; }
3170: const Token * tok1@var544 ; tok1@var544 =@expr1073747698 Token ::@expr5802 findsimplematch (@expr1073747700 tokenizer@var542 .@expr1073747701 tokens (@expr1073747702 ) , "< Y" ) ;
3171: const Token * tok2@var545 ; tok2@var545 =@expr1073747703 Token ::@expr5802 findsimplematch (@expr1073747705 tok1@var544 , "> copy" ) ;
3172: $if $(@expr1073747706 $!@expr1073747707 $assertEquals $(@expr1073747708 "cppcheck-2.8/test/testtokenize.cpp" $, 3172 $, true $, tok1@var544 .@expr1073747709 link (@expr1073747710 ) ==@expr1073747711 tok2@var545 $) $) { $return ; }
3173: $if $(@expr1073747712 $!@expr1073747713 $assertEquals $(@expr1073747714 "cppcheck-2.8/test/testtokenize.cpp" $, 3173 $, true $, tok2@var545 .@expr1073747715 link (@expr1073747716 ) ==@expr1073747717 tok1@var544 $) $) { $return ; }
3174: }
3175:
3176: {
3177:
3178: const char code@var546 [@expr1073747718 17 ] =@expr1073747719 "C<int> && a = b;" ;
3179: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3180: Tokenizer tokenizer@var547 (@expr1073747722 &@expr5791 settings0@var102 , this@expr5792 ) ;
3181: std ::@expr1073747724 istringstream istr@var548 (@expr1073747725 code@var546 ) ;
3182: $if $(@expr1073747726 $!@expr1073747727 $assert_ $(@expr1073747728 "cppcheck-2.8/test/testtokenize.cpp" $, 3182 $, $(@expr1073747729 tokenizer@var547 .@expr1073747730 tokenize (@expr1073747731 istr@var548 , "test.cpp" ) $) $) $) { $return ; }
3183: const Token * tok1@var549 ; tok1@var549 =@expr1073747732 tokenizer@var547 .@expr1073747733 tokens (@expr1073747734 ) .@expr1073747735 next (@expr1073747736 ) ;
3184: const Token * tok2@var550 ; tok2@var550 =@expr1073747737 tok1@var549 .@expr1073747738 tokAt (@expr1073747739 2 ) ;
3185: $if $(@expr1073747740 $!@expr1073747741 $assertEquals $(@expr1073747742 "cppcheck-2.8/test/testtokenize.cpp" $, 3185 $, true $, tok1@var549 .@expr1073747743 link (@expr1073747744 ) ==@expr1073747745 tok2@var550 $) $) { $return ; }
3186: $if $(@expr1073747746 $!@expr1073747747 $assertEquals $(@expr1073747748 "cppcheck-2.8/test/testtokenize.cpp" $, 3186 $, true $, tok2@var550 .@expr1073747749 link (@expr1073747750 ) ==@expr1073747751 tok1@var549 $) $) { $return ; }
3187: }
3188:
3189: {
3190:
3191: const char code@var551 [@expr1073747752 24 ] =@expr1073747753 "void Test(C<int> && c);" ;
3192: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3193: Tokenizer tokenizer@var552 (@expr1073747756 &@expr5791 settings0@var102 , this@expr5792 ) ;
3194: std ::@expr1073747758 istringstream istr@var553 (@expr1073747759 code@var551 ) ;
3195: $if $(@expr1073747760 $!@expr1073747761 $assert_ $(@expr1073747762 "cppcheck-2.8/test/testtokenize.cpp" $, 3195 $, $(@expr1073747763 tokenizer@var552 .@expr1073747764 tokenize (@expr1073747765 istr@var553 , "test.cpp" ) $) $) $) { $return ; }
3196: const Token * tok1@var554 ; tok1@var554 =@expr1073747766 Token ::@expr5802 findsimplematch (@expr1073747768 tokenizer@var552 .@expr1073747769 tokens (@expr1073747770 ) , "<" ) ;
3197: const Token * tok2@var555 ; tok2@var555 =@expr1073747771 tok1@var554 .@expr1073747772 tokAt (@expr1073747773 2 ) ;
3198: $if $(@expr1073747774 $!@expr1073747775 $assertEquals $(@expr1073747776 "cppcheck-2.8/test/testtokenize.cpp" $, 3198 $, true $, tok1@var554 .@expr1073747777 link (@expr1073747778 ) ==@expr1073747779 tok2@var555 $) $) { $return ; }
3199: $if $(@expr1073747780 $!@expr1073747781 $assertEquals $(@expr1073747782 "cppcheck-2.8/test/testtokenize.cpp" $, 3199 $, true $, tok2@var555 .@expr1073747783 link (@expr1073747784 ) ==@expr1073747785 tok1@var554 $) $) { $return ; }
3200: }
3201: {
3202:
3203: const char code@var556 [@expr1073747786 75 ] =@expr1073747787 "template<int N> struct A {}; template<int... Ns> struct foo : A<Ns>... {};"
3204: ;
3205: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3206: Tokenizer tokenizer@var557 (@expr1073747790 &@expr5791 settings0@var102 , this@expr5792 ) ;
3207: std ::@expr1073747792 istringstream istr@var558 (@expr1073747793 code@var556 ) ;
3208: $if $(@expr1073747794 $!@expr1073747795 $assert_ $(@expr1073747796 "cppcheck-2.8/test/testtokenize.cpp" $, 3208 $, $(@expr1073747797 tokenizer@var557 .@expr1073747798 tokenize (@expr1073747799 istr@var558 , "test.cpp" ) $) $) $) { $return ; }
3209: const Token * A@var559 ; A@var559 =@expr1073747800 Token ::@expr5802 findsimplematch (@expr1073747802 tokenizer@var557 .@expr1073747803 tokens (@expr1073747804 ) , "A <" ) ;
3210: $if $(@expr1073747805 $!@expr1073747806 $assertEquals $(@expr1073747807 "cppcheck-2.8/test/testtokenize.cpp" $, 3210 $, true $, A@var559 .@expr1073747808 next (@expr1073747809 ) .@expr1073747810 link (@expr1073747811 ) ==@expr1073747812 A@var559 .@expr1073747813 tokAt (@expr1073747814 3 ) $) $) { $return ; }
3211: }
3212: {
3213:
3214: const char code@var560 [@expr1073747815 91 ] =@expr1073747816 "template<typename std::enable_if<!(std::value1) && std::value2>::type>void basic_json() {}"
3215: ;
3216: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3217: Tokenizer tokenizer@var561 (@expr1073747819 &@expr5791 settings0@var102 , this@expr5792 ) ;
3218: std ::@expr1073747821 istringstream istr@var562 (@expr1073747822 code@var560 ) ;
3219: $if $(@expr1073747823 $!@expr1073747824 $assert_ $(@expr1073747825 "cppcheck-2.8/test/testtokenize.cpp" $, 3219 $, $(@expr1073747826 tokenizer@var561 .@expr1073747827 tokenize (@expr1073747828 istr@var562 , "test.cpp" ) $) $) $) { $return ; }
3220: $if $(@expr1073747829 $!@expr1073747830 $assertEquals $(@expr1073747831 "cppcheck-2.8/test/testtokenize.cpp" $, 3220 $, true $, $(@expr1073747832 Token ::@expr1073747833 simpleMatch (@expr1073747834 tokenizer@var561 .@expr1073747835 tokens (@expr1073747836 ) .@expr1073747837 next (@expr1073747838 ) .@expr1073747839 link (@expr1073747840 ) , "> void" ) $) $) $) { $return ; }
3221: }
3222:
3223: {
3224:
3225: const char code@var563 [@expr1073747841 21 ] =@expr1073747842 "a = f(x%x<--a==x>x);" ;
3226: Tokenizer tokenizer@var564 (@expr1073747843 &@expr5791 settings0@var102 , this@expr5792 ) ;
3227: std ::@expr1073747845 istringstream istr@var565 (@expr1073747846 code@var563 ) ;
3228: $if $(@expr1073747847 $!@expr1073747848 $assert_ $(@expr1073747849 "cppcheck-2.8/test/testtokenize.cpp" $, 3228 $, $(@expr1073747850 tokenizer@var564 .@expr1073747851 tokenize (@expr1073747852 istr@var565 , "test.cpp" ) $) $) $) { $return ; }
3229: $if $(@expr1073747853 $!@expr1073747854 $assert_ $(@expr1073747855 "cppcheck-2.8/test/testtokenize.cpp" $, 3229 $, $(@expr1073747856 nullptr ==@expr1073747857 Token ::@expr5802 findsimplematch (@expr1073747859 tokenizer@var564 .@expr1073747860 tokens (@expr1073747861 ) , "<" ) .@expr1073747862 link (@expr1073747863 ) $) $) $) { $return ; }
3230: }
3231:
3232: {
3233:
3234: const char code@var566 [@expr1073747864 30 ] =@expr1073747865 "using std::list; list<t *> l;" ;
3235: Tokenizer tokenizer@var567 (@expr1073747866 &@expr5791 settings0@var102 , this@expr5792 ) ;
3236: std ::@expr1073747868 istringstream istr@var568 (@expr1073747869 code@var566 ) ;
3237: $if $(@expr1073747870 $!@expr1073747871 $assert_ $(@expr1073747872 "cppcheck-2.8/test/testtokenize.cpp" $, 3237 $, $(@expr1073747873 tokenizer@var567 .@expr1073747874 tokenize (@expr1073747875 istr@var568 , "test.cpp" ) $) $) $) { $return ; }
3238: $if $(@expr1073747876 $!@expr1073747877 $assert_ $(@expr1073747878 "cppcheck-2.8/test/testtokenize.cpp" $, 3238 $, $(@expr1073747879 nullptr !=@expr1073747880 Token ::@expr5802 findsimplematch (@expr1073747882 tokenizer@var567 .@expr1073747883 tokens (@expr1073747884 ) , "<" ) .@expr1073747885 link (@expr1073747886 ) $) $) $) { $return ; }
3239: }
3240:
3241: {
3242: const char code@var569 [@expr1073747887 120 ] =@expr1073747888 "using std::set;\nvoid foo()\n{\n    for (set<ParticleSource*>::iterator i = sources.begin(); i != sources.end(); ++i) {}\n}"
3243:
3244:
3245:
3246: ;
3247: Tokenizer tokenizer@var570 (@expr1073747889 &@expr5791 settings0@var102 , this@expr5792 ) ;
3248: std ::@expr1073747891 istringstream istr@var571 (@expr1073747892 code@var569 ) ;
3249: $if $(@expr1073747893 $!@expr1073747894 $assert_ $(@expr1073747895 "cppcheck-2.8/test/testtokenize.cpp" $, 3249 $, $(@expr1073747896 tokenizer@var570 .@expr1073747897 tokenize (@expr1073747898 istr@var571 , "test.cpp" ) $) $) $) { $return ; }
3250: $if $(@expr1073747899 $!@expr1073747900 $assert_ $(@expr1073747901 "cppcheck-2.8/test/testtokenize.cpp" $, 3250 $, $(@expr1073747902 nullptr !=@expr1073747903 Token ::@expr5802 findsimplematch (@expr1073747905 tokenizer@var570 .@expr1073747906 tokens (@expr1073747907 ) , "<" ) .@expr1073747908 link (@expr1073747909 ) $) $) $) { $return ; }
3251: }
3252:
3253: {
3254:
3255: const char code@var572 [@expr1073747910 37 ] =@expr1073747911 "void f() {\n  a<> b;\n  b.a<>::c();\n}\n"
3256:
3257:
3258: ;
3259: Tokenizer tokenizer@var573 (@expr1073747912 &@expr5791 settings0@var102 , this@expr5792 ) ;
3260: std ::@expr1073747914 istringstream istr@var574 (@expr1073747915 code@var572 ) ;
3261: $if $(@expr1073747916 $!@expr1073747917 $assert_ $(@expr1073747918 "cppcheck-2.8/test/testtokenize.cpp" $, 3261 $, $(@expr1073747919 tokenizer@var573 .@expr1073747920 tokenize (@expr1073747921 istr@var574 , "test.cpp" ) $) $) $) { $return ; }
3262: $if $(@expr1073747922 $!@expr1073747923 $assert_ $(@expr1073747924 "cppcheck-2.8/test/testtokenize.cpp" $, 3262 $, $(@expr1073747925 nullptr !=@expr1073747926 Token ::@expr5802 findsimplematch (@expr1073747928 tokenizer@var573 .@expr1073747929 tokens (@expr1073747930 ) , "> ::" ) .@expr1073747931 link (@expr1073747932 ) $) $) $) { $return ; }
3263: }
3264:
3265: {
3266:
3267: const char code@var575 [@expr1073747933 89 ] =@expr1073747934 "template <char> char * a;\ntemplate <char... b> struct c {\n  void d() { a<b...>[0]; }\n};\n"
3268:
3269:
3270: ;
3271: Tokenizer tokenizer@var576 (@expr1073747935 &@expr5791 settings0@var102 , this@expr5792 ) ;
3272: std ::@expr1073747937 istringstream istr@var577 (@expr1073747938 code@var575 ) ;
3273: $if $(@expr1073747939 $!@expr1073747940 $assert_ $(@expr1073747941 "cppcheck-2.8/test/testtokenize.cpp" $, 3273 $, $(@expr1073747942 tokenizer@var576 .@expr1073747943 tokenize (@expr1073747944 istr@var577 , "test.cpp" ) $) $) $) { $return ; }
3274: $if $(@expr1073747945 $!@expr1073747946 $assert_ $(@expr1073747947 "cppcheck-2.8/test/testtokenize.cpp" $, 3274 $, $(@expr1073747948 nullptr !=@expr1073747949 Token ::@expr5802 findsimplematch (@expr1073747951 tokenizer@var576 .@expr1073747952 tokens (@expr1073747953 ) , "> [" ) .@expr1073747954 link (@expr1073747955 ) $) $) $) { $return ; }
3275: }
3276:
3277: {
3278:
3279: const char code@var578 [@expr1073747956 235 ] =@expr1073747957 "template <bool> struct a;\ntemplate <bool b, typename> using c = typename a<b>::d;\ntemplate <typename e> using f = c<e() && sizeof(int), int>;\ntemplate <typename e, typename = f<e>> struct g {};\ntemplate <typename e> using baz = g<e>;\n"
3280:
3281:
3282:
3283: ;
3284: Tokenizer tokenizer@var579 (@expr1073747958 &@expr5791 settings0@var102 , this@expr5792 ) ;
3285: std ::@expr1073747960 istringstream istr@var580 (@expr1073747961 code@var578 ) ;
3286: $if $(@expr1073747962 $!@expr1073747963 $assert_ $(@expr1073747964 "cppcheck-2.8/test/testtokenize.cpp" $, 3286 $, $(@expr1073747965 tokenizer@var579 .@expr1073747966 tokenize (@expr1073747967 istr@var580 , "test.cpp" ) $) $) $) { $return ; }
3287: $if $(@expr1073747968 $!@expr1073747969 $assert_ $(@expr1073747970 "cppcheck-2.8/test/testtokenize.cpp" $, 3287 $, $(@expr1073747971 nullptr !=@expr1073747972 Token ::@expr5802 findsimplematch (@expr1073747974 tokenizer@var579 .@expr1073747975 tokens (@expr1073747976 ) , "> ;" ) .@expr1073747977 link (@expr1073747978 ) $) $) $) { $return ; }
3288: }
3289:
3290: {
3291:
3292: const char code@var581 [@expr1073747979 122 ] =@expr1073747980 "struct a {\n  typedef int b;\n  operator b();\n};\ntemplate <int> using c = a;\ntemplate <int d> c<d> e;\nauto f = -e<1> == 0;\n"
3293:
|
3297:
3298: ;
3299: Tokenizer tokenizer@var582 (@expr1073747981 &@expr5791 settings0@var102 , this@expr5792 ) ;
3300: std ::@expr1073747983 istringstream istr@var583 (@expr1073747984 code@var581 ) ;
3301: $if $(@expr1073747985 $!@expr1073747986 $assert_ $(@expr1073747987 "cppcheck-2.8/test/testtokenize.cpp" $, 3301 $, $(@expr1073747988 tokenizer@var582 .@expr1073747989 tokenize (@expr1073747990 istr@var583 , "test.cpp" ) $) $) $) { $return ; }
3302: $if $(@expr1073747991 $!@expr1073747992 $assert_ $(@expr1073747993 "cppcheck-2.8/test/testtokenize.cpp" $, 3302 $, $(@expr1073747994 nullptr !=@expr1073747995 Token ::@expr5802 findsimplematch (@expr1073747997 tokenizer@var582 .@expr1073747998 tokens (@expr1073747999 ) , "> ==" ) .@expr1073748000 link (@expr1073748001 ) $) $) $) { $return ; }
3303: }
3304:
3305: {
3306:
3307: const char code@var584 [@expr1073748002 322 ] =@expr1073748003 "template <typename a, a> struct b {\n  template <typename c> constexpr void operator()(c &&) const;\n};\ntemplate <int d> struct e { b<int, d> f; };\ntemplate <int g> using h = e<g>;\ntemplate <int g> h<g> i;\ntemplate <typename a, a d>\ntemplate <typename c>\nconstexpr void b<a, d>::operator()(c &&) const {\n  i<3>.f([] {});\n}\n"
3308:
|
3316:
3317: ;
3318: Tokenizer tokenizer@var585 (@expr1073748004 &@expr5791 settings0@var102 , this@expr5792 ) ;
3319: std ::@expr1073748006 istringstream istr@var586 (@expr1073748007 code@var584 ) ;
3320: $if $(@expr1073748008 $!@expr1073748009 $assert_ $(@expr1073748010 "cppcheck-2.8/test/testtokenize.cpp" $, 3320 $, $(@expr1073748011 tokenizer@var585 .@expr1073748012 tokenize (@expr1073748013 istr@var586 , "test.cpp" ) $) $) $) { $return ; }
3321: $if $(@expr1073748014 $!@expr1073748015 $assert_ $(@expr1073748016 "cppcheck-2.8/test/testtokenize.cpp" $, 3321 $, $(@expr1073748017 nullptr !=@expr1073748018 Token ::@expr5802 findsimplematch (@expr1073748020 tokenizer@var585 .@expr1073748021 tokens (@expr1073748022 ) , "> . f (" ) .@expr1073748023 link (@expr1073748024 ) $) $) $) { $return ; }
3322: }
3323:
3324: {
3325:
3326: const char code@var587 [@expr1073748025 45 ] =@expr1073748026 "template <template <class> class> struct a;\n" ;
3327: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3328: Tokenizer tokenizer@var588 (@expr1073748029 &@expr5791 settings0@var102 , this@expr5792 ) ;
3329: std ::@expr1073748031 istringstream istr@var589 (@expr1073748032 code@var587 ) ;
3330: $if $(@expr1073748033 $!@expr1073748034 $assert_ $(@expr1073748035 "cppcheck-2.8/test/testtokenize.cpp" $, 3330 $, $(@expr1073748036 tokenizer@var588 .@expr1073748037 tokenize (@expr1073748038 istr@var589 , "test.cpp" ) $) $) $) { $return ; }
3331: const Token * tok1@var590 ; tok1@var590 =@expr1073748039 Token ::@expr5802 findsimplematch (@expr1073748041 tokenizer@var588 .@expr1073748042 tokens (@expr1073748043 ) , "< class" ) ;
3332: const Token * tok2@var591 ; tok2@var591 =@expr1073748044 Token ::@expr5802 findsimplematch (@expr1073748046 tok1@var590 , "> class" ) ;
3333: $if $(@expr1073748047 $!@expr1073748048 $assertEquals $(@expr1073748049 "cppcheck-2.8/test/testtokenize.cpp" $, 3333 $, true $, tok1@var590 .@expr1073748050 link (@expr1073748051 ) ==@expr1073748052 tok2@var591 $) $) { $return ; }
3334: $if $(@expr1073748053 $!@expr1073748054 $assertEquals $(@expr1073748055 "cppcheck-2.8/test/testtokenize.cpp" $, 3334 $, true $, tok2@var591 .@expr1073748056 link (@expr1073748057 ) ==@expr1073748058 tok1@var590 $) $) { $return ; }
3335: }
3336:
3337: {
3338:
3339: const char code@var592 [@expr1073748059 45 ] =@expr1073748060 "template <template <class> class> struct a;\n" ;
3340: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3341: Tokenizer tokenizer@var593 (@expr1073748063 &@expr5791 settings0@var102 , this@expr5792 ) ;
3342: std ::@expr1073748065 istringstream istr@var594 (@expr1073748066 code@var592 ) ;
3343: $if $(@expr1073748067 $!@expr1073748068 $assert_ $(@expr1073748069 "cppcheck-2.8/test/testtokenize.cpp" $, 3343 $, $(@expr1073748070 tokenizer@var593 .@expr1073748071 tokenize (@expr1073748072 istr@var594 , "test.cpp" ) $) $) $) { $return ; }
3344: const Token * tok1@var595 ; tok1@var595 =@expr1073748073 Token ::@expr5802 findsimplematch (@expr1073748075 tokenizer@var593 .@expr1073748076 tokens (@expr1073748077 ) , "< template" ) ;
3345: const Token * tok2@var596 ; tok2@var596 =@expr1073748078 Token ::@expr5802 findsimplematch (@expr1073748080 tok1@var595 , "> struct" ) ;
3346: $if $(@expr1073748081 $!@expr1073748082 $assertEquals $(@expr1073748083 "cppcheck-2.8/test/testtokenize.cpp" $, 3346 $, true $, tok1@var595 .@expr1073748084 link (@expr1073748085 ) ==@expr1073748086 tok2@var596 $) $) { $return ; }
3347: $if $(@expr1073748087 $!@expr1073748088 $assertEquals $(@expr1073748089 "cppcheck-2.8/test/testtokenize.cpp" $, 3347 $, true $, tok2@var596 .@expr1073748090 link (@expr1073748091 ) ==@expr1073748092 tok1@var595 $) $) { $return ; }
3348: }
3349:
3350: {
3351:
3352: const char code@var597 [@expr1073748093 28 ] =@expr1073748094 "v.value<QPair<int, int>>()\n" ;
3353: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3354: Tokenizer tokenizer@var598 (@expr1073748097 &@expr5791 settings0@var102 , this@expr5792 ) ;
3355: std ::@expr1073748099 istringstream istr@var599 (@expr1073748100 code@var597 ) ;
3356: $if $(@expr1073748101 $!@expr1073748102 $assert_ $(@expr1073748103 "cppcheck-2.8/test/testtokenize.cpp" $, 3356 $, $(@expr1073748104 tokenizer@var598 .@expr1073748105 tokenize (@expr1073748106 istr@var599 , "test.cpp" ) $) $) $) { $return ; }
3357: const Token * tok1@var600 ; tok1@var600 =@expr1073748107 Token ::@expr5802 findsimplematch (@expr1073748109 tokenizer@var598 .@expr1073748110 tokens (@expr1073748111 ) , "< QPair" ) ;
3358: const Token * tok2@var601 ; tok2@var601 =@expr1073748112 Token ::@expr5802 findsimplematch (@expr1073748114 tok1@var600 , "> (" ) ;
3359: $if $(@expr1073748115 $!@expr1073748116 $assertEquals $(@expr1073748117 "cppcheck-2.8/test/testtokenize.cpp" $, 3359 $, true $, tok1@var600 .@expr1073748118 link (@expr1073748119 ) ==@expr1073748120 tok2@var601 $) $) { $return ; }
3360: $if $(@expr1073748121 $!@expr1073748122 $assertEquals $(@expr1073748123 "cppcheck-2.8/test/testtokenize.cpp" $, 3360 $, true $, tok2@var601 .@expr1073748124 link (@expr1073748125 ) ==@expr1073748126 tok1@var600 $) $) { $return ; }
3361: }
3362:
3363: {
3364:
3365: const char code@var602 [@expr1073748127 28 ] =@expr1073748128 "v.value<QPair<int, int>>()\n" ;
3366: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3367: Tokenizer tokenizer@var603 (@expr1073748131 &@expr5791 settings0@var102 , this@expr5792 ) ;
3368: std ::@expr1073748133 istringstream istr@var604 (@expr1073748134 code@var602 ) ;
3369: $if $(@expr1073748135 $!@expr1073748136 $assert_ $(@expr1073748137 "cppcheck-2.8/test/testtokenize.cpp" $, 3369 $, $(@expr1073748138 tokenizer@var603 .@expr1073748139 tokenize (@expr1073748140 istr@var604 , "test.cpp" ) $) $) $) { $return ; }
3370: const Token * tok1@var605 ; tok1@var605 =@expr1073748141 Token ::@expr5802 findsimplematch (@expr1073748143 tokenizer@var603 .@expr1073748144 tokens (@expr1073748145 ) , "< int" ) ;
3371: const Token * tok2@var606 ; tok2@var606 =@expr1073748146 Token ::@expr5802 findsimplematch (@expr1073748148 tok1@var605 , "> > (" ) ;
3372: $if $(@expr1073748149 $!@expr1073748150 $assertEquals $(@expr1073748151 "cppcheck-2.8/test/testtokenize.cpp" $, 3372 $, true $, tok1@var605 .@expr1073748152 link (@expr1073748153 ) ==@expr1073748154 tok2@var606 $) $) { $return ; }
3373: $if $(@expr1073748155 $!@expr1073748156 $assertEquals $(@expr1073748157 "cppcheck-2.8/test/testtokenize.cpp" $, 3373 $, true $, tok2@var606 .@expr1073748158 link (@expr1073748159 ) ==@expr1073748160 tok1@var605 $) $) { $return ; }
3374: }
3375:
3376: {
3377:
3378: const char code@var607 [@expr1073748161 46 ] =@expr1073748162 "struct A : public B<__is_constructible()>{};\n" ;
3379: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3380: Tokenizer tokenizer@var608 (@expr1073748165 &@expr5791 settings0@var102 , this@expr5792 ) ;
3381: std ::@expr1073748167 istringstream istr@var609 (@expr1073748168 code@var607 ) ;
3382: $if $(@expr1073748169 $!@expr1073748170 $assert_ $(@expr1073748171 "cppcheck-2.8/test/testtokenize.cpp" $, 3382 $, $(@expr1073748172 tokenizer@var608 .@expr1073748173 tokenize (@expr1073748174 istr@var609 , "test.cpp" ) $) $) $) { $return ; }
3383: const Token * tok1@var610 ; tok1@var610 =@expr1073748175 Token ::@expr5802 findsimplematch (@expr1073748177 tokenizer@var608 .@expr1073748178 tokens (@expr1073748179 ) , "< >" ) ;
3384: const Token * tok2@var611 ; tok2@var611 =@expr1073748180 Token ::@expr5802 findsimplematch (@expr1073748182 tok1@var610 , "> { } >" ) ;
3385: $if $(@expr1073748183 $!@expr1073748184 $assertEquals $(@expr1073748185 "cppcheck-2.8/test/testtokenize.cpp" $, 3385 $, true $, tok1@var610 .@expr1073748186 link (@expr1073748187 ) ==@expr1073748188 tok2@var611 $) $) { $return ; }
3386: $if $(@expr1073748189 $!@expr1073748190 $assertEquals $(@expr1073748191 "cppcheck-2.8/test/testtokenize.cpp" $, 3386 $, true $, tok2@var611 .@expr1073748192 link (@expr1073748193 ) ==@expr1073748194 tok1@var610 $) $) { $return ; }
3387: }
3388:
3389: {
3390:
3391: const char code@var612 [@expr1073748195 39 ] =@expr1073748196 "class C1 : public T1<D2<C2>const> {};\n" ;
3392: errout@var100 .@expr5788 str (@expr5789 "" ) ;
3393: Tokenizer tokenizer@var613 (@expr1073748199 &@expr5791 settings0@var102 , this@expr5792 ) ;
3394: std ::@expr1073748201 istringstream istr@var614 (@expr1073748202 code@var612 ) ;
3395: $if $(@expr1073748203 $!@expr1073748204 $assert_ $(@expr1073748205 "cppcheck-2.8/test/testtokenize.cpp" $, 3395 $, $(@expr1073748206 tokenizer@var613 .@expr1073748207 tokenize (@expr1073748208 istr@var614 , "test.cpp" ) $) $) $) { $return ; }
3396: const Token * tok1@var615 ; tok1@var615 =@expr1073748209 Token ::@expr5802 findsimplematch (@expr1073748211 tokenizer@var613 .@expr1073748212 tokens (@expr1073748213 ) , "< C2" ) ;
3397: const Token * tok2@var616 ; tok2@var616 =@expr1073748214 Token ::@expr5802 findsimplematch (@expr1073748216 tok1@var615 , "> const" ) ;
3398: $if $(@expr1073748217 $!@expr1073748218 $assertEquals $(@expr1073748219 "cppcheck-2.8/test/testtokenize.cpp" $, 3398 $, true $, tok1@var615 .@expr1073748220 link (@expr1073748221 ) ==@expr1073748222 tok2@var616 $) $) { $return ; }
3399: $if $(@expr1073748223 $!@expr1073748224 $assertEquals $(@expr1073748225 "cppcheck-2.8/test/testtokenize.cpp" $, 3399 $, true $, tok2@var616 .@expr1073748226 link (@expr1073748227 ) ==@expr1073748228 tok1@var615 $) $) { $return ; }
3400: }
3401: }
3402:
3403: void simplifyString ( ) {
3404: errout@var100 .@expr1073748229 str (@expr1073748230 "" ) ;
3405: Tokenizer tokenizer@var617 (@expr1073748231 &@expr1073748232 settings0@var102 , this@expr1073748233 ) ;
3406: $if $(@expr1073748234 $!@expr1073748235 $assertEquals $(@expr1073748236 "cppcheck-2.8/test/testtokenize.cpp" $, 3406 $, "\"abc\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748238 "\"abc\"" ) $) $) { $return ; }
3407: $if $(@expr1073748239 $!@expr1073748240 $assertEquals $(@expr1073748241 "cppcheck-2.8/test/testtokenize.cpp" $, 3407 $, "\"\n\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748243 "\"\\xa\"" ) $) $) { $return ; }
3408: $if $(@expr1073748244 $!@expr1073748245 $assertEquals $(@expr1073748246 "cppcheck-2.8/test/testtokenize.cpp" $, 3408 $, "\"3\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr6424 "\"\\x33\"" ) $) $) { $return ; }
3409: $if $(@expr1073748249 $!@expr1073748250 $assertEquals $(@expr1073748251 "cppcheck-2.8/test/testtokenize.cpp" $, 3409 $, "\"33\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748253 "\"\\x333\"" ) $) $) { $return ; }
3410:
3411: $if $(@expr1073748254 $!@expr1073748255 $assertEquals $(@expr1073748256 "cppcheck-2.8/test/testtokenize.cpp" $, 3411 $, "\"a\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748258 "\"\\x61\"" ) $) $) { $return ; }
3412: $if $(@expr1073748259 $!@expr1073748260 $assertEquals $(@expr1073748261 "cppcheck-2.8/test/testtokenize.cpp" $, 3412 $, "\"\n1\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748263 "\"\\0121\"" ) $) $) { $return ; }
3413:
3414: $if $(@expr1073748264 $!@expr1073748265 $assertEquals $(@expr1073748266 "cppcheck-2.8/test/testtokenize.cpp" $, 3414 $, "\"3\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr6424 "\"\\x33\"" ) $) $) { $return ; }
3415: $if $(@expr1073748269 $!@expr1073748270 $assertEquals $(@expr1073748271 "cppcheck-2.8/test/testtokenize.cpp" $, 3415 $, "\" 0\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748273 "\"\\0400\"" ) $) $) { $return ; }
3416:
3417: $if $(@expr1073748274 $!@expr1073748275 $assertEquals $(@expr1073748276 "cppcheck-2.8/test/testtokenize.cpp" $, 3417 $, "\"\\nhello\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748278 "\"\\nhello\"" ) $) $) { $return ; }
3418:
3419: $if $(@expr1073748279 $!@expr1073748280 $assertEquals $(@expr1073748281 "cppcheck-2.8/test/testtokenize.cpp" $, 3419 $, "\"aaa\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748283 "\"\\x61\\x61\\x61\"" ) $) $) { $return ; }
3420: $if $(@expr1073748284 $!@expr1073748285 $assertEquals $(@expr1073748286 "cppcheck-2.8/test/testtokenize.cpp" $, 3420 $, "\"\n1\n1\n1\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748288 "\"\\0121\\0121\\0121\"" ) $) $) { $return ; }
3421:
3422: $if $(@expr1073748289 $!@expr1073748290 $assertEquals $(@expr1073748291 "cppcheck-2.8/test/testtokenize.cpp" $, 3422 $, "\"\\\\x61\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748293 "\"\\\\x61\"" ) $) $) { $return ; }
3423: $if $(@expr1073748294 $!@expr1073748295 $assertEquals $(@expr1073748296 "cppcheck-2.8/test/testtokenize.cpp" $, 3423 $, "\"b\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748298 "\"\\x62\"" ) $) $) { $return ; }
3424: $if $(@expr1073748299 $!@expr1073748300 $assertEquals $(@expr1073748301 "cppcheck-2.8/test/testtokenize.cpp" $, 3424 $, "\" 7\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748303 "\"\\0407\"" ) $) $) { $return ; }
3425:
3426:
3427: $if $(@expr1073748304 $!@expr1073748305 $assertEquals $(@expr1073748306 "cppcheck-2.8/test/testtokenize.cpp" $, 3427 $, std ::@expr1073748307 string (@expr1073748308 "\"a" ) +@expr1073748309 '\0' +@expr1073748310 "\"" $, tokenizer@var617 .@expr6413 simplifyString (@expr1073748312 "\"a\\0\"" ) $) $) { $return ; }
3428: }
3429:
3430: void simplifyConst ( ) {
3431: $if $(@expr1073748313 $!@expr1073748314 $assertEquals $(@expr1073748315 "cppcheck-2.8/test/testtokenize.cpp" $, 3431 $, "void foo ( ) { const int x ; }" $, $tokenizeAndStringify_ $(@expr1073748316 "cppcheck-2.8/test/testtokenize.cpp" $, 3431 $, "void foo(){ int const x;}" $) $) $) { $return
3432: ; }
3433:
3434: $if $(@expr1073748317 $!@expr1073748318 $assertEquals $(@expr1073748319 "cppcheck-2.8/test/testtokenize.cpp" $, 3434 $, "void foo ( ) { { } const long x ; }" $, $tokenizeAndStringify_ $(@expr1073748320 "cppcheck-2.8/test/testtokenize.cpp" $, 3434 $, "void foo(){ {} long const x;}" $) $) $) { $return
3435: ; }
3436:
3437: $if $(@expr1073748321 $!@expr1073748322 $assertEquals $(@expr1073748323 "cppcheck-2.8/test/testtokenize.cpp" $, 3437 $, "void foo ( int b , const unsigned int x ) { }" $, $tokenizeAndStringify_ $(@expr1073748324 "cppcheck-2.8/test/testtokenize.cpp" $, 3437 $, "void foo(int b,unsigned const x){}" $) $) $) { $return
3438: ; }
3439:
3440: $if $(@expr1073748325 $!@expr1073748326 $assertEquals $(@expr1073748327 "cppcheck-2.8/test/testtokenize.cpp" $, 3440 $, "void foo ( ) { bar ( ) ; const char x ; }" $, $tokenizeAndStringify_ $(@expr1073748328 "cppcheck-2.8/test/testtokenize.cpp" $, 3440 $, "void foo(){ bar(); char const x;}" $) $) $) { $return
3441: ; }
3442:
3443: $if $(@expr1073748329 $!@expr1073748330 $assertEquals $(@expr1073748331 "cppcheck-2.8/test/testtokenize.cpp" $, 3443 $, "void foo ( const char x ) { }" $, $tokenizeAndStringify_ $(@expr1073748332 "cppcheck-2.8/test/testtokenize.cpp" $, 3443 $, "void foo(char const x){}" $) $) $) { $return
3444: ; }
3445:
3446: $if $(@expr1073748333 $!@expr1073748334 $assertEquals $(@expr1073748335 "cppcheck-2.8/test/testtokenize.cpp" $, 3446 $, "void foo ( int b , const char x ) { }" $, $tokenizeAndStringify_ $(@expr1073748336 "cppcheck-2.8/test/testtokenize.cpp" $, 3446 $, "void foo(int b,char const x){}" $) $) $) { $return
3447: ; }
3448:
3449: $if $(@expr1073748337 $!@expr1073748338 $assertEquals $(@expr1073748339 "cppcheck-2.8/test/testtokenize.cpp" $, 3449 $, "void foo ( ) { int * const x ; }" $, $tokenizeAndStringify_ $(@expr1073748340 "cppcheck-2.8/test/testtokenize.cpp" $, 3449 $, "void foo(){ int * const x;}" $) $) $) { $return
3450: ; }
3451:
3452: $if $(@expr1073748341 $!@expr1073748342 $assertEquals $(@expr1073748343 "cppcheck-2.8/test/testtokenize.cpp" $, 3452 $, "const int foo ( ) ;" $, $tokenizeAndStringify_ $(@expr1073748344 "cppcheck-2.8/test/testtokenize.cpp" $, 3452 $, "int const foo ();" $) $) $) { $return ; }
3453:
3454: $if $(@expr1073748345 $!@expr1073748346 $assertEquals $(@expr1073748347 "cppcheck-2.8/test/testtokenize.cpp" $, 3454 $, "const int x ;" $, $tokenizeAndStringify_ $(@expr1073748348 "cppcheck-2.8/test/testtokenize.cpp" $, 3454 $, "int const x;" $) $) $) { $return ; }
3455: $if $(@expr1073748349 $!@expr1073748350 $assertEquals $(@expr1073748351 "cppcheck-2.8/test/testtokenize.cpp" $, 3455 $, "const unsigned int x ;" $, $tokenizeAndStringify_ $(@expr1073748352 "cppcheck-2.8/test/testtokenize.cpp" $, 3455 $, "unsigned const x;" $) $) $) { $return ; }
3456: $if $(@expr1073748353 $!@expr1073748354 $assertEquals $(@expr1073748355 "cppcheck-2.8/test/testtokenize.cpp" $, 3456 $, "const struct X x ;" $, $tokenizeAndStringify_ $(@expr1073748356 "cppcheck-2.8/test/testtokenize.cpp" $, 3456 $, "struct X const x;" $) $) $) { $return ; }
3457: }
3458:
3459: void switchCase ( ) {
3460: $if $(@expr1073748357 $!@expr1073748358 $assertEquals $(@expr1073748359 "cppcheck-2.8/test/testtokenize.cpp" $, 3460 $, "void foo ( int i ) { switch ( i ) { case -1 : ; break ; } }" $, $tokenizeAndStringify_ $(@expr1073748360 "cppcheck-2.8/test/testtokenize.cpp" $, 3460 $, "void foo (int i) { switch(i) { case -1: break; } }" $) $) $) { $return
3461: ; }
3462:
3463: $if $(@expr1073748361 $!@expr1073748362 $assertEquals $(@expr1073748363 "cppcheck-2.8/test/testtokenize.cpp" $, 3463 $, "void foo ( ) { switch ( n ) { label : ; case 1 : ; label1 : ; label2 : ; break ; } }" $, $tokenizeAndStringify_ $(@expr1073748364 "cppcheck-2.8/test/testtokenize.cpp" $, 3463 $, "void foo(){ switch (n){ label: case 1: label1: label2: break; }}" $) $) $) { $return
3464: ; }
3465:
3466: $if $(@expr1073748365 $!@expr1073748366 $assertEquals $(@expr1073748367 "cppcheck-2.8/test/testtokenize.cpp" $, 3466 $, "void foo ( ) { switch ( 0 ) { case 0 : ; default : ; } }" $, $tokenizeAndStringify_ $(@expr1073748368 "cppcheck-2.8/test/testtokenize.cpp" $, 3466 $, "void foo () { switch(0) case 0 : default : ; }" $) $) $) { $return
3467: ; }
3468:
3469: $if $(@expr1073748369 $!@expr1073748370 $assertEquals $(@expr1073748371 "cppcheck-2.8/test/testtokenize.cpp" $, 3469 $, "void foo ( ) { enum Anonymous0 : int { Six = 6 } ; return Six ; }" $, $tokenizeAndStringify_ $(@expr1073748372 "cppcheck-2.8/test/testtokenize.cpp" $, 3469 $, "void foo () { enum : int { Six = 6 } ; return Six ; }" $) $) $) { $return
3470: ; }
3471:
3472: $tokenizeAndStringify_ $(@expr1073748373 "cppcheck-2.8/test/testtokenize.cpp" $, 3472 $, "void lzma_decode(int i) {   bool state;   switch (i)   while (true) {      state=false;    case 1:       ;   }}" $)
3473:
|
3479:
3480: ;
3481:
3482: $tokenizeAndStringify_ $(@expr1073748374 "cppcheck-2.8/test/testtokenize.cpp" $, 3482 $, "void printOwnedAttributes(int mode) {   switch(mode) case 0: { break; } }" $)
3483:
3484: ;
3485: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073748375 "cppcheck-2.8/test/testtokenize.cpp" $, 3485 $, "void printOwnedAttributes(int mode) {   switch(mode) case 0: { break; } case 1: ; }" $) $; $assertThrowFail $(@expr1073748376 "cppcheck-2.8/test/testtokenize.cpp" $, 3485 $) $; $} $catch $(@expr1073748377 $const InternalError $&@expr1073748378 $) ${ $} $catch $(@expr1073748379 $... $) ${ $assertThrowFail $(@expr1073748380 "cppcheck-2.8/test/testtokenize.cpp" $, 3485 $) $; $} $} $while $(@expr1073748381 $false $)
3486:
3487:
3488: ;
3489: }
3490:
3491: void simplifyPointerToStandardType ( ) {
3492:
3493: $if $(@expr1073748383 $!@expr1073748384 $assertEquals $(@expr1073748385 "cppcheck-2.8/test/testtokenize.cpp" $, 3493 $, "char buf [ 100 ] ; readlink ( path , buf , 99 ) ;" $, $tokenizeAndStringify_ $(@expr1073748386 "cppcheck-2.8/test/testtokenize.cpp" $, 3493 $, "char buf[100] ; readlink(path, &buf[0], 99);" , true , Settings ::@expr6563 Native@expr6558 , "test.c" $) $) $) { $return
3494:
3495: ; }
3496:
3497: $if $(@expr1073748388 $!@expr1073748389 $assertEquals $(@expr1073748390 "cppcheck-2.8/test/testtokenize.cpp" $, 3497 $, "void foo ( char * c ) { if ( 1 == ( 1 & c [ 0 ] ) ) { } }" $, $tokenizeAndStringify_ $(@expr1073748391 "cppcheck-2.8/test/testtokenize.cpp" $, 3497 $, "void foo(char *c) { if (1==(1 & c[0])) {} }" , true , Settings ::@expr6563 Native@expr6558 , "test.c" $) $) $) { $return
3498:
3499: ; }
3500:
3501:
3502: $if $(@expr1073748393 $!@expr1073748394 $assertEquals $(@expr1073748395 "cppcheck-2.8/test/testtokenize.cpp" $, 3502 $, "foo data [ 100 ] ; something ( foo ) ;" $, $tokenizeAndStringify_ $(@expr1073748396 "cppcheck-2.8/test/testtokenize.cpp" $, 3502 $, "foo data[100]; something(&foo[0]);" , true , Settings ::@expr6563 Native@expr6558 , "test.c" $) $) $) { $return
3503: ; }
3504:
3505:
3506: $if $(@expr1073748398 $!@expr1073748399 $assertEquals $(@expr1073748400 "cppcheck-2.8/test/testtokenize.cpp" $, 3506 $, "foo data [ 100 ] ; something ( & foo [ 0 ] ) ;" $, $tokenizeAndStringify_ $(@expr1073748401 "cppcheck-2.8/test/testtokenize.cpp" $, 3506 $, "foo data[100]; something(&foo[0]);" $) $) $) { $return
3507: ; }
3508: }
3509:
3510: void simplifyFunctionPointers1 ( ) {
3511: $if $(@expr1073748402 $!@expr1073748403 $assertEquals $(@expr1073748404 "cppcheck-2.8/test/testtokenize.cpp" $, 3511 $, "void ( * f ) ( ) ;" $, $tokenizeAndStringify_ $(@expr1073748405 "cppcheck-2.8/test/testtokenize.cpp" $, 3511 $, "void (*f)();" $) $) $) { $return ; }
3512: $if $(@expr1073748406 $!@expr1073748407 $assertEquals $(@expr1073748408 "cppcheck-2.8/test/testtokenize.cpp" $, 3512 $, "void * ( * f ) ( ) ;" $, $tokenizeAndStringify_ $(@expr1073748409 "cppcheck-2.8/test/testtokenize.cpp" $, 3512 $, "void *(*f)();" $) $) $) { $return ; }
3513: $if $(@expr1073748410 $!@expr1073748411 $assertEquals $(@expr1073748412 "cppcheck-2.8/test/testtokenize.cpp" $, 3513 $, "unsigned int ( * f ) ( ) ;" $, $tokenizeAndStringify_ $(@expr1073748413 "cppcheck-2.8/test/testtokenize.cpp" $, 3513 $, "unsigned int (*f)();" $) $) $) { $return ; }
3514: $if $(@expr1073748414 $!@expr1073748415 $assertEquals $(@expr1073748416 "cppcheck-2.8/test/testtokenize.cpp" $, 3514 $, "unsigned int * ( * f ) ( ) ;" $, $tokenizeAndStringify_ $(@expr1073748417 "cppcheck-2.8/test/testtokenize.cpp" $, 3514 $, "unsigned int * (*f)();" $) $) $) { $return ; }
3515: $if $(@expr1073748418 $!@expr1073748419 $assertEquals $(@expr1073748420 "cppcheck-2.8/test/testtokenize.cpp" $, 3515 $, "void ( * f [ 2 ] ) ( ) ;" $, $tokenizeAndStringify_ $(@expr1073748421 "cppcheck-2.8/test/testtokenize.cpp" $, 3515 $, "void (*f[2])();" $) $) $) { $return ; }
3516: $todoAssertEquals $(@expr1073748422 "cppcheck-2.8/test/testtokenize.cpp" $, 3516 $, "void ( * f [ 2 ] ) ( ) ;" $, "void ( * f ) ( ) [ 2 ] ;" $, $tokenizeAndStringify_ $(@expr1073748423 "cppcheck-2.8/test/testtokenize.cpp" $, 3516 $, "typedef void func_t(void); func_t *f[2];" $) $) ;
3517: }
3518:
3519: void simplifyFunctionPointers2 ( ) {
3520: const char code@var618 [@expr1073748424 74 ] =@expr1073748425 "typedef void (* PF)();void f1 ( ) { }PF pf = &f1;PF pfs[] = { &f1, &f1 };"
3521:
3522:
3523: ;
3524: const char expected@var619 [@expr1073748426 91 ] =@expr1073748427 "void f1 ( ) { } void ( * pf ) ( ) ; pf = & f1 ; void ( * pfs [ ] ) ( ) = { & f1 , & f1 } ;"
3525:
3526: ;
3527: $if $(@expr1073748428 $!@expr1073748429 $assertEquals $(@expr1073748430 "cppcheck-2.8/test/testtokenize.cpp" $, 3527 $, expected@var619 $, $tokenizeAndStringify_ $(@expr1073748431 "cppcheck-2.8/test/testtokenize.cpp" $, 3527 $, code@var618 $) $) $) { $return ; }
3528: }
3529:
3530: void simplifyFunctionPointers3 ( ) {
3531:
3532: const char code@var620 [@expr1073748432 32 ] =@expr1073748433 "void f() {\n(void)(xy(*p)(0);)\n}"
3533:
3534: ;
3535: const char expected@var621 [@expr1073748434 47 ] =@expr1073748435 "void f ( ) {\n( void ) ( xy ( * p ) ( 0 ) ; )\n}"
3536:
3537: ;
3538: $if $(@expr1073748436 $!@expr1073748437 $assertEquals $(@expr1073748438 "cppcheck-2.8/test/testtokenize.cpp" $, 3538 $, expected@var621 $, $tokenizeAndStringify_ $(@expr1073748439 "cppcheck-2.8/test/testtokenize.cpp" $, 3538 $, code@var620 $) $) $) { $return ; }
3539: }
3540:
3541: void simplifyFunctionPointers4 ( ) {
3542: const char code@var622 [@expr1073748440 64 ] =@expr1073748441 "struct S\n{\n    typedef void (*FP)();\n    virtual FP getFP();\n};"
3543:
3544:
3545:
3546: ;
3547: const char expected@var623 [@expr1073748442 58 ] =@expr1073748443 "1: struct S\n2: {\n3:\n4: virtual void * getFP ( ) ;\n5: } ;\n"
3548:
3549:
3550:
3551: ;
3552: $if $(@expr1073748444 $!@expr1073748445 $assertEquals $(@expr1073748446 "cppcheck-2.8/test/testtokenize.cpp" $, 3552 $, expected@var623 $, $tokenizeDebugListing_ $(@expr1073748447 "cppcheck-2.8/test/testtokenize.cpp" $, 3552 $, code@var622 $) $) $) { $return ; }
3553: }
3554:
3555: void simplifyFunctionPointers5 ( ) {
3556: const char code@var624 [@expr1073748448 32 ] =@expr1073748449 ";void (*fp[])(int a) = {0,0,0};" ;
3557: const char expected@var625 [@expr1073748450 48 ] =@expr1073748451 "1: ; void ( * fp@1 [ ] ) ( ) = { 0 , 0 , 0 } ;\n" ;
3558: $if $(@expr1073748452 $!@expr1073748453 $assertEquals $(@expr1073748454 "cppcheck-2.8/test/testtokenize.cpp" $, 3558 $, expected@var625 $, $tokenizeDebugListing_ $(@expr1073748455 "cppcheck-2.8/test/testtokenize.cpp" $, 3558 $, code@var624 $) $) $) { $return ; }
3559: }
3560:
3561: void simplifyFunctionPointers6 ( ) {
3562: const char code1@var626 [@expr1073748456 25 ] =@expr1073748457 "void (*fp(void))(int) {}" ;
3563: const char expected1@var627 [@expr1073748458 22 ] =@expr1073748459 "1: void * fp ( ) { }\n" ;
3564: $if $(@expr1073748460 $!@expr1073748461 $assertEquals $(@expr1073748462 "cppcheck-2.8/test/testtokenize.cpp" $, 3564 $, expected1@var627 $, $tokenizeDebugListing_ $(@expr1073748463 "cppcheck-2.8/test/testtokenize.cpp" $, 3564 $, code1@var626 $) $) $) { $return ; }
3565:
3566: const char code2@var628 [@expr1073748464 30 ] =@expr1073748465 "std::string (*fp(void))(int);" ;
3567: const char expected2@var629 [@expr1073748466 29 ] =@expr1073748467 "1: std :: string * fp ( ) ;\n" ;
3568: $if $(@expr1073748468 $!@expr1073748469 $assertEquals $(@expr1073748470 "cppcheck-2.8/test/testtokenize.cpp" $, 3568 $, expected2@var629 $, $tokenizeDebugListing_ $(@expr1073748471 "cppcheck-2.8/test/testtokenize.cpp" $, 3568 $, code2@var628 $) $) $) { $return ; }
3569: }
3570:
3571: void simplifyFunctionPointers7 ( ) {
3572: const char code1@var630 [@expr1073748472 16 ] =@expr1073748473 "void (X::*y)();" ;
3573: const char expected1@var631 [@expr1073748474 25 ] =@expr1073748475 "1: void ( * y@1 ) ( ) ;\n" ;
3574: $if $(@expr1073748476 $!@expr1073748477 $assertEquals $(@expr1073748478 "cppcheck-2.8/test/testtokenize.cpp" $, 3574 $, expected1@var631 $, $tokenizeDebugListing_ $(@expr1073748479 "cppcheck-2.8/test/testtokenize.cpp" $, 3574 $, code1@var630 $) $) $) { $return ; }
3575: }
3576:
3577: void simplifyFunctionPointers8 ( ) {
3578: const char code1@var632 [@expr1073748480 23 ] =@expr1073748481 "int (*f)() throw(int);" ;
3579: const char expected1@var633 [@expr1073748482 24 ] =@expr1073748483 "1: int ( * f@1 ) ( ) ;\n" ;
3580: $if $(@expr1073748484 $!@expr1073748485 $assertEquals $(@expr1073748486 "cppcheck-2.8/test/testtokenize.cpp" $, 3580 $, expected1@var633 $, $tokenizeDebugListing_ $(@expr1073748487 "cppcheck-2.8/test/testtokenize.cpp" $, 3580 $, code1@var632 $) $) $) { $return ; }
3581: }
3582:
3583: void simplifyFunctionPointers9 ( ) {
3584: const char code1@var634 [@expr1073748488 20 ] =@expr1073748489 "int f() { (*f)(); }" ;
3585: const char expected1@var635 [@expr1073748490 32 ] =@expr1073748491 "1: int f ( ) { ( * f ) ( ) ; }\n" ;
3586: $if $(@expr1073748492 $!@expr1073748493 $assertEquals $(@expr1073748494 "cppcheck-2.8/test/testtokenize.cpp" $, 3586 $, expected1@var635 $, $tokenizeDebugListing_ $(@expr1073748495 "cppcheck-2.8/test/testtokenize.cpp" $, 3586 $, code1@var634 $) $) $) { $return ; }
3587:
3588: const char code2@var636 [@expr1073748496 27 ] =@expr1073748497 "int f() { return (*f)(); }" ;
3589: const char expected2@var637 [@expr1073748498 39 ] =@expr1073748499 "1: int f ( ) { return ( * f ) ( ) ; }\n" ;
3590: $if $(@expr1073748500 $!@expr1073748501 $assertEquals $(@expr1073748502 "cppcheck-2.8/test/testtokenize.cpp" $, 3590 $, expected2@var637 $, $tokenizeDebugListing_ $(@expr1073748503 "cppcheck-2.8/test/testtokenize.cpp" $, 3590 $, code2@var636 $) $) $) { $return ; }
3591:
3592: const char code3@var638 [@expr1073748504 26 ] =@expr1073748505 "int f() { throw (*f)(); }" ;
3593: const char expected3@var639 [@expr1073748506 38 ] =@expr1073748507 "1: int f ( ) { throw ( * f ) ( ) ; }\n" ;
3594: $if $(@expr1073748508 $!@expr1073748509 $assertEquals $(@expr1073748510 "cppcheck-2.8/test/testtokenize.cpp" $, 3594 $, expected3@var639 $, $tokenizeDebugListing_ $(@expr1073748511 "cppcheck-2.8/test/testtokenize.cpp" $, 3594 $, code3@var638 $) $) $) { $return ; }
3595: }
3596:
3597: void removedeclspec ( ) {
3598: $if $(@expr1073748512 $!@expr1073748513 $assertEquals $(@expr1073748514 "cppcheck-2.8/test/testtokenize.cpp" $, 3598 $, "a b" $, $tokenizeAndStringify_ $(@expr1073748515 "cppcheck-2.8/test/testtokenize.cpp" $, 3598 $, "a __declspec ( dllexport ) b" $) $) $) { $return ; }
3599: $if $(@expr1073748516 $!@expr1073748517 $assertEquals $(@expr1073748518 "cppcheck-2.8/test/testtokenize.cpp" $, 3599 $, "a b" $, $tokenizeAndStringify_ $(@expr1073748519 "cppcheck-2.8/test/testtokenize.cpp" $, 3599 $, "a _declspec ( dllexport ) b" $) $) $) { $return ; }
3600: $if $(@expr1073748520 $!@expr1073748521 $assertEquals $(@expr1073748522 "cppcheck-2.8/test/testtokenize.cpp" $, 3600 $, "int a ;" $, $tokenizeAndStringify_ $(@expr1073748523 "cppcheck-2.8/test/testtokenize.cpp" $, 3600 $, "__declspec(thread) __declspec(align(32)) int a;" $) $) $) { $return ; }
3601: $if $(@expr1073748524 $!@expr1073748525 $assertEquals $(@expr1073748526 "cppcheck-2.8/test/testtokenize.cpp" $, 3601 $, "int i ;" $, $tokenizeAndStringify_ $(@expr1073748527 "cppcheck-2.8/test/testtokenize.cpp" $, 3601 $, "__declspec(allocate(\"mycode\")) int i;" $) $) $) { $return ; }
3602: $if $(@expr1073748528 $!@expr1073748529 $assertEquals $(@expr1073748530 "cppcheck-2.8/test/testtokenize.cpp" $, 3602 $, "struct IUnknown ;" $, $tokenizeAndStringify_ $(@expr1073748531 "cppcheck-2.8/test/testtokenize.cpp" $, 3602 $, "struct __declspec(uuid(\"00000000-0000-0000-c000-000000000046\")) IUnknown;" $) $) $) { $return ; }
3603: $if $(@expr1073748532 $!@expr1073748533 $assertEquals $(@expr1073748534 "cppcheck-2.8/test/testtokenize.cpp" $, 3603 $, "__property int x [ ] ;" $, $tokenizeAndStringify_ $(@expr1073748535 "cppcheck-2.8/test/testtokenize.cpp" $, 3603 $, "__declspec(property(get=GetX, put=PutX)) int x[];" $) $) $) { $return ; }
3604: }
3605:
3606: void removeattribute ( ) {
3607: $if $(@expr1073748536 $!@expr1073748537 $assertEquals $(@expr1073748538 "cppcheck-2.8/test/testtokenize.cpp" $, 3607 $, "short array [ 3 ] ;" $, $tokenizeAndStringify_ $(@expr1073748539 "cppcheck-2.8/test/testtokenize.cpp" $, 3607 $, "short array[3] __attribute__ ((aligned));" $) $) $) { $return ; }
3608: $if $(@expr1073748540 $!@expr1073748541 $assertEquals $(@expr1073748542 "cppcheck-2.8/test/testtokenize.cpp" $, 3608 $, "int x [ 2 ] ;" $, $tokenizeAndStringify_ $(@expr1073748543 "cppcheck-2.8/test/testtokenize.cpp" $, 3608 $, "int x[2] __attribute__ ((packed));" $) $) $) { $return ; }
3609: $if $(@expr1073748544 $!@expr1073748545 $assertEquals $(@expr1073748546 "cppcheck-2.8/test/testtokenize.cpp" $, 3609 $, "int vecint ;" $, $tokenizeAndStringify_ $(@expr1073748547 "cppcheck-2.8/test/testtokenize.cpp" $, 3609 $, "int __attribute__((mode(SI))) __attribute__((vector_size (16))) vecint;" $) $) $) { $return ; }
3610:
3611:
3612: $if $(@expr1073748548 $!@expr1073748549 $assertEquals $(@expr1073748550 "cppcheck-2.8/test/testtokenize.cpp" $, 3612 $, "short array [ 3 ] ;" $, $tokenizeAndStringify_ $(@expr1073748551 "cppcheck-2.8/test/testtokenize.cpp" $, 3612 $, "short array[3] __attribute ((aligned));" $) $) $) { $return ; }
3613: $if $(@expr1073748552 $!@expr1073748553 $assertEquals $(@expr1073748554 "cppcheck-2.8/test/testtokenize.cpp" $, 3613 $, "int x [ 2 ] ;" $, $tokenizeAndStringify_ $(@expr1073748555 "cppcheck-2.8/test/testtokenize.cpp" $, 3613 $, "int x[2] __attribute ((packed));" $) $) $) { $return ; }
3614: $if $(@expr1073748556 $!@expr1073748557 $assertEquals $(@expr1073748558 "cppcheck-2.8/test/testtokenize.cpp" $, 3614 $, "int vecint ;" $, $tokenizeAndStringify_ $(@expr1073748559 "cppcheck-2.8/test/testtokenize.cpp" $, 3614 $, "int __attribute((mode(SI))) __attribute((vector_size (16))) vecint;" $) $) $) { $return ; }
3615:
3616: $if $(@expr1073748560 $!@expr1073748561 $assertEquals $(@expr1073748562 "cppcheck-2.8/test/testtokenize.cpp" $, 3616 $, "struct Payload_IR_config { uint8_t tap [ 16 ] ; } ;" $, $tokenizeAndStringify_ $(@expr1073748563 "cppcheck-2.8/test/testtokenize.cpp" $, 3616 $, "struct __attribute__((packed, gcc_struct)) Payload_IR_config { uint8_t tap[16]; };" $) $) $) { $return ; }
3617: }
3618:
3619: void functionAttributeBefore1 ( ) {
3620: const char code@var640 [@expr1073748564 400 ] =@expr1073748565 "void __attribute__((pure)) __attribute__((nothrow)) __attribute__((const)) func1();\nvoid __attribute__((__pure__)) __attribute__((__nothrow__)) __attribute__((__const__)) func2();\nvoid __attribute__((nothrow)) __attribute__((pure)) __attribute__((const)) func3();\nvoid __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__const__)) func4();\nvoid __attribute__((noreturn)) func5();"
3621:
3622:
3623:
3624: ;
3625: const char expected@var641 [@expr1073748566 85 ] =@expr1073748567 "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ;" ;
3626:
3627: errout@var100 .@expr1073748568 str (@expr1073748569 "" ) ;
3628:
3629:
3630: Tokenizer tokenizer@var642 (@expr1073748570 &@expr1073748571 settings0@var102 , this@expr1073748572 ) ;
3631: std ::@expr1073748573 istringstream istr@var643 (@expr1073748574 code@var640 ) ;
3632: $if $(@expr1073748575 $!@expr1073748576 $assert_ $(@expr1073748577 "cppcheck-2.8/test/testtokenize.cpp" $, 3632 $, $(@expr1073748578 tokenizer@var642 .@expr1073748579 tokenize (@expr1073748580 istr@var643 , "test.cpp" ) $) $) $) { $return ; }
3633:
3634:
3635: $if $(@expr1073748581 $!@expr1073748582 $assertEquals $(@expr1073748583 "cppcheck-2.8/test/testtokenize.cpp" $, 3635 $, expected@var641 $, $(@expr1073748584 tokenizer@var642 .@expr6761 tokens (@expr6762 ) .@expr1073748587 stringifyList (@expr1073748588 nullptr , false ) $) $) $) { $return ; }
3636:
3637: const Token * func1@var644 ; func1@var644 =@expr1073748589 Token ::@expr6766 findsimplematch (@expr1073748591 tokenizer@var642 .@expr6761 tokens (@expr6762 ) , "func1" ) ;
3638: const Token * func2@var645 ; func2@var645 =@expr1073748594 Token ::@expr6766 findsimplematch (@expr1073748596 tokenizer@var642 .@expr6761 tokens (@expr6762 ) , "func2" ) ;
3639: const Token * func3@var646 ; func3@var646 =@expr1073748599 Token ::@expr6766 findsimplematch (@expr1073748601 tokenizer@var642 .@expr6761 tokens (@expr6762 ) , "func3" ) ;
3640: const Token * func4@var647 ; func4@var647 =@expr1073748604 Token ::@expr6766 findsimplematch (@expr1073748606 tokenizer@var642 .@expr6761 tokens (@expr6762 ) , "func4" ) ;
3641: const Token * func5@var648 ; func5@var648 =@expr1073748609 Token ::@expr6766 findsimplematch (@expr1073748611 tokenizer@var642 .@expr6761 tokens (@expr6762 ) , "func5" ) ;
3642:
3643: $if $(@expr1073748614 $!@expr1073748615 $assert_ $(@expr1073748616 "cppcheck-2.8/test/testtokenize.cpp" $, 3643 $, func1@var644 &&@expr1073748617 func1@var644 .@expr1073748618 isAttributePure (@expr1073748619 ) &&@expr1073748620 func1@var644 .@expr1073748621 isAttributeNothrow (@expr1073748622 ) &&@expr1073748623 func1@var644 .@expr1073748624 isAttributeConst (@expr1073748625 ) $) $) { $return ; }
3644: $if $(@expr1073748626 $!@expr1073748627 $assert_ $(@expr1073748628 "cppcheck-2.8/test/testtokenize.cpp" $, 3644 $, func2@var645 &&@expr1073748629 func2@var645 .@expr1073748630 isAttributePure (@expr1073748631 ) &&@expr1073748632 func2@var645 .@expr1073748633 isAttributeNothrow (@expr1073748634 ) &&@expr1073748635 func2@var645 .@expr1073748636 isAttributeConst (@expr1073748637 ) $) $) { $return ; }
3645: $if $(@expr1073748638 $!@expr1073748639 $assert_ $(@expr1073748640 "cppcheck-2.8/test/testtokenize.cpp" $, 3645 $, func3@var646 &&@expr1073748641 func3@var646 .@expr1073748642 isAttributePure (@expr1073748643 ) &&@expr1073748644 func3@var646 .@expr1073748645 isAttributeNothrow (@expr1073748646 ) &&@expr1073748647 func3@var646 .@expr1073748648 isAttributeConst (@expr1073748649 ) $) $) { $return ; }
3646: $if $(@expr1073748650 $!@expr1073748651 $assert_ $(@expr1073748652 "cppcheck-2.8/test/testtokenize.cpp" $, 3646 $, func4@var647 &&@expr1073748653 func4@var647 .@expr1073748654 isAttributePure (@expr1073748655 ) &&@expr1073748656 func4@var647 .@expr1073748657 isAttributeNothrow (@expr1073748658 ) &&@expr1073748659 func4@var647 .@expr1073748660 isAttributeConst (@expr1073748661 ) $) $) { $return ; }
3647: $if $(@expr1073748662 $!@expr1073748663 $assert_ $(@expr1073748664 "cppcheck-2.8/test/testtokenize.cpp" $, 3647 $, func5@var648 &&@expr1073748665 func5@var648 .@expr1073748666 isAttributeNoreturn (@expr1073748667 ) $) $) { $return ; }
3648: }
3649:
3650: void functionAttributeBefore2 ( ) {
3651: const char code@var649 [@expr1073748668 54 ] =@expr1073748669 "extern vas_f *VAS_Fail __attribute__((__noreturn__));" ;
3652: const char expected@var650 [@expr1073748670 26 ] =@expr1073748671 "extern vas_f * VAS_Fail ;" ;
3653:
3654: errout@var100 .@expr1073748672 str (@expr1073748673 "" ) ;
3655:
3656:
3657: Tokenizer tokenizer@var651 (@expr1073748674 &@expr1073748675 settings0@var102 , this@expr1073748676 ) ;
3658: std ::@expr1073748677 istringstream istr@var652 (@expr1073748678 code@var649 ) ;
3659: $if $(@expr1073748679 $!@expr1073748680 $assert_ $(@expr1073748681 "cppcheck-2.8/test/testtokenize.cpp" $, 3659 $, $(@expr1073748682 tokenizer@var651 .@expr1073748683 tokenize (@expr1073748684 istr@var652 , "test.cpp" ) $) $) $) { $return ; }
3660: $if $(@expr1073748685 $!@expr1073748686 $assertEquals $(@expr1073748687 "cppcheck-2.8/test/testtokenize.cpp" $, 3660 $, expected@var650 $, $(@expr1073748688 tokenizer@var651 .@expr6865 tokens (@expr6866 ) .@expr1073748691 stringifyList (@expr1073748692 nullptr , false ) $) $) $) { $return ; }
3661:
3662: const Token * VAS_Fail@var653 ; VAS_Fail@var653 =@expr1073748693 Token ::@expr1073748694 findsimplematch (@expr1073748695 tokenizer@var651 .@expr6865 tokens (@expr6866 ) , "VAS_Fail" ) ;
3663: $if $(@expr1073748698 $!@expr1073748699 $assert_ $(@expr1073748700 "cppcheck-2.8/test/testtokenize.cpp" $, 3663 $, VAS_Fail@var653 &&@expr1073748701 VAS_Fail@var653 .@expr1073748702 isAttributeNoreturn (@expr1073748703 ) $) $) { $return ; }
3664: }
3665:
3666: void functionAttributeBefore3 ( ) {
3667: const char code@var654 [@expr1073748704 57 ] =@expr1073748705 "void __attribute__((__noreturn__)) (*func_notret)(void);" ;
3668: const char expected@var655 [@expr1073748706 29 ] =@expr1073748707 "void ( * func_notret ) ( ) ;" ;
3669:
3670: errout@var100 .@expr1073748708 str (@expr1073748709 "" ) ;
3671:
3672:
3673: Tokenizer tokenizer@var656 (@expr1073748710 &@expr1073748711 settings0@var102 , this@expr1073748712 ) ;
3674: std ::@expr1073748713 istringstream istr@var657 (@expr1073748714 code@var654 ) ;
3675: $if $(@expr1073748715 $!@expr1073748716 $assert_ $(@expr1073748717 "cppcheck-2.8/test/testtokenize.cpp" $, 3675 $, $(@expr1073748718 tokenizer@var656 .@expr1073748719 tokenize (@expr1073748720 istr@var657 , "test.cpp" ) $) $) $) { $return ; }
3676: $if $(@expr1073748721 $!@expr1073748722 $assertEquals $(@expr1073748723 "cppcheck-2.8/test/testtokenize.cpp" $, 3676 $, expected@var655 $, $(@expr1073748724 tokenizer@var656 .@expr6901 tokens (@expr6902 ) .@expr1073748727 stringifyList (@expr1073748728 nullptr , false ) $) $) $) { $return ; }
3677:
3678: const Token * func_notret@var658 ; func_notret@var658 =@expr1073748729 Token ::@expr1073748730 findsimplematch (@expr1073748731 tokenizer@var656 .@expr6901 tokens (@expr6902 ) , "func_notret" ) ;
3679: $if $(@expr1073748734 $!@expr1073748735 $assert_ $(@expr1073748736 "cppcheck-2.8/test/testtokenize.cpp" $, 3679 $, func_notret@var658 &&@expr1073748737 func_notret@var658 .@expr1073748738 isAttributeNoreturn (@expr1073748739 ) $) $) { $return ; }
3680: }
3681:
3682: void functionAttributeBefore4 ( ) {
3683: const char code@var659 [@expr1073748740 35 ] =@expr1073748741 "__attribute__((const)) int& foo();" ;
3684: const char expected@var660 [@expr1073748742 16 ] =@expr1073748743 "int & foo ( ) ;" ;
3685:
3686: errout@var100 .@expr1073748744 str (@expr1073748745 "" ) ;
3687:
3688:
3689: Tokenizer tokenizer@var661 (@expr1073748746 &@expr1073748747 settings0@var102 , this@expr1073748748 ) ;
3690: std ::@expr1073748749 istringstream istr@var662 (@expr1073748750 code@var659 ) ;
3691: $if $(@expr1073748751 $!@expr1073748752 $assert_ $(@expr1073748753 "cppcheck-2.8/test/testtokenize.cpp" $, 3691 $, $(@expr1073748754 tokenizer@var661 .@expr1073748755 tokenize (@expr1073748756 istr@var662 , "test.cpp" ) $) $) $) { $return ; }
3692: $if $(@expr1073748757 $!@expr1073748758 $assertEquals $(@expr1073748759 "cppcheck-2.8/test/testtokenize.cpp" $, 3692 $, expected@var660 $, $(@expr1073748760 tokenizer@var661 .@expr6937 tokens (@expr6938 ) .@expr1073748763 stringifyList (@expr1073748764 nullptr , false ) $) $) $) { $return ; }
3693:
3694: const Token * foo@var663 ; foo@var663 =@expr1073748765 Token ::@expr1073748766 findsimplematch (@expr1073748767 tokenizer@var661 .@expr6937 tokens (@expr6938 ) , "foo" ) ;
3695: $if $(@expr1073748770 $!@expr1073748771 $assert_ $(@expr1073748772 "cppcheck-2.8/test/testtokenize.cpp" $, 3695 $, foo@var663 &&@expr1073748773 foo@var663 .@expr1073748774 isAttributeConst (@expr1073748775 ) $) $) { $return ; }
3696: }
3697:
3698: void functionAttributeAfter1 ( ) {
3699: const char code@var664 [@expr1073748776 399 ] =@expr1073748777 "void func1() __attribute__((pure)) __attribute__((nothrow)) __attribute__((const));\nvoid func2() __attribute__((__pure__)) __attribute__((__nothrow__)) __attribute__((__const__));\nvoid func3() __attribute__((nothrow)) __attribute__((pure)) __attribute__((const));\nvoid func4() __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__const__));void func5() __attribute__((noreturn));"
3700:
3701:
3702:
3703: ;
3704: const char expected@var665 [@expr1073748778 85 ] =@expr1073748779 "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ;" ;
3705:
3706: errout@var100 .@expr1073748780 str (@expr1073748781 "" ) ;
3707:
3708:
3709: Tokenizer tokenizer@var666 (@expr1073748782 &@expr1073748783 settings0@var102 , this@expr1073748784 ) ;
3710: std ::@expr1073748785 istringstream istr@var667 (@expr1073748786 code@var664 ) ;
3711: $if $(@expr1073748787 $!@expr1073748788 $assert_ $(@expr1073748789 "cppcheck-2.8/test/testtokenize.cpp" $, 3711 $, $(@expr1073748790 tokenizer@var666 .@expr1073748791 tokenize (@expr1073748792 istr@var667 , "test.cpp" ) $) $) $) { $return ; }
3712:
3713:
3714: $if $(@expr1073748793 $!@expr1073748794 $assertEquals $(@expr1073748795 "cppcheck-2.8/test/testtokenize.cpp" $, 3714 $, expected@var665 $, $(@expr1073748796 tokenizer@var666 .@expr6973 tokens (@expr6974 ) .@expr1073748799 stringifyList (@expr1073748800 nullptr , false ) $) $) $) { $return ; }
3715:
3716: const Token * func1@var668 ; func1@var668 =@expr1073748801 Token ::@expr6978 findsimplematch (@expr1073748803 tokenizer@var666 .@expr6973 tokens (@expr6974 ) , "func1" ) ;
3717: const Token * func2@var669 ; func2@var669 =@expr1073748806 Token ::@expr6978 findsimplematch (@expr1073748808 tokenizer@var666 .@expr6973 tokens (@expr6974 ) , "func2" ) ;
3718: const Token * func3@var670 ; func3@var670 =@expr1073748811 Token ::@expr6978 findsimplematch (@expr1073748813 tokenizer@var666 .@expr6973 tokens (@expr6974 ) , "func3" ) ;
3719: const Token * func4@var671 ; func4@var671 =@expr1073748816 Token ::@expr6978 findsimplematch (@expr1073748818 tokenizer@var666 .@expr6973 tokens (@expr6974 ) , "func4" ) ;
3720: const Token * func5@var672 ; func5@var672 =@expr1073748821 Token ::@expr6978 findsimplematch (@expr1073748823 tokenizer@var666 .@expr6973 tokens (@expr6974 ) , "func5" ) ;
3721:
3722: $if $(@expr1073748826 $!@expr1073748827 $assert_ $(@expr1073748828 "cppcheck-2.8/test/testtokenize.cpp" $, 3722 $, func1@var668 &&@expr1073748829 func1@var668 .@expr1073748830 isAttributePure (@expr1073748831 ) &&@expr1073748832 func1@var668 .@expr1073748833 isAttributeNothrow (@expr1073748834 ) &&@expr1073748835 func1@var668 .@expr1073748836 isAttributeConst (@expr1073748837 ) $) $) { $return ; }
3723: $if $(@expr1073748838 $!@expr1073748839 $assert_ $(@expr1073748840 "cppcheck-2.8/test/testtokenize.cpp" $, 3723 $, func2@var669 &&@expr1073748841 func2@var669 .@expr1073748842 isAttributePure (@expr1073748843 ) &&@expr1073748844 func2@var669 .@expr1073748845 isAttributeNothrow (@expr1073748846 ) &&@expr1073748847 func2@var669 .@expr1073748848 isAttributeConst (@expr1073748849 ) $) $) { $return ; }
3724: $if $(@expr1073748850 $!@expr1073748851 $assert_ $(@expr1073748852 "cppcheck-2.8/test/testtokenize.cpp" $, 3724 $, func3@var670 &&@expr1073748853 func3@var670 .@expr1073748854 isAttributePure (@expr1073748855 ) &&@expr1073748856 func3@var670 .@expr1073748857 isAttributeNothrow (@expr1073748858 ) &&@expr1073748859 func3@var670 .@expr1073748860 isAttributeConst (@expr1073748861 ) $) $) { $return ; }
3725: $if $(@expr1073748862 $!@expr1073748863 $assert_ $(@expr1073748864 "cppcheck-2.8/test/testtokenize.cpp" $, 3725 $, func4@var671 &&@expr1073748865 func4@var671 .@expr1073748866 isAttributePure (@expr1073748867 ) &&@expr1073748868 func4@var671 .@expr1073748869 isAttributeNothrow (@expr1073748870 ) &&@expr1073748871 func4@var671 .@expr1073748872 isAttributeConst (@expr1073748873 ) $) $) { $return ; }
3726: $if $(@expr1073748874 $!@expr1073748875 $assert_ $(@expr1073748876 "cppcheck-2.8/test/testtokenize.cpp" $, 3726 $, func5@var672 &&@expr1073748877 func5@var672 .@expr1073748878 isAttributeNoreturn (@expr1073748879 ) $) $) { $return ; }
3727: }
3728:
3729: void functionAttributeAfter2 ( ) {
3730: const char code@var673 [@expr1073748880 83 ] =@expr1073748881 "class foo {\npublic:\n    bool operator==(const foo &) __attribute__((__pure__));\n};"
3731:
3732:
3733: ;
3734: const char expected@var674 [@expr1073748882 58 ] =@expr1073748883 "class foo { public: bool operator== ( const foo & ) ; } ;" ;
3735:
3736: errout@var100 .@expr1073748884 str (@expr1073748885 "" ) ;
3737:
3738:
3739: Tokenizer tokenizer@var675 (@expr1073748886 &@expr1073748887 settings0@var102 , this@expr1073748888 ) ;
3740: std ::@expr1073748889 istringstream istr@var676 (@expr1073748890 code@var673 ) ;
3741: $if $(@expr1073748891 $!@expr1073748892 $assert_ $(@expr1073748893 "cppcheck-2.8/test/testtokenize.cpp" $, 3741 $, $(@expr1073748894 tokenizer@var675 .@expr1073748895 tokenize (@expr1073748896 istr@var676 , "test.cpp" ) $) $) $) { $return ; }
3742:
3743:
3744: $if $(@expr1073748897 $!@expr1073748898 $assertEquals $(@expr1073748899 "cppcheck-2.8/test/testtokenize.cpp" $, 3744 $, expected@var674 $, $(@expr1073748900 tokenizer@var675 .@expr7077 tokens (@expr7078 ) .@expr1073748903 stringifyList (@expr1073748904 nullptr , false ) $) $) $) { $return ; }
3745:
3746: const Token * tok@var677 ; tok@var677 =@expr1073748905 Token ::@expr1073748906 findsimplematch (@expr1073748907 tokenizer@var675 .@expr7077 tokens (@expr7078 ) , "operator==" ) ;
3747: $if $(@expr1073748910 $!@expr1073748911 $assert_ $(@expr1073748912 "cppcheck-2.8/test/testtokenize.cpp" $, 3747 $, tok@var677 &&@expr1073748913 tok@var677 .@expr1073748914 isAttributePure (@expr1073748915 ) $) $) { $return ; }
3748: }
3749:
3750: void functionAttributeListBefore ( ) {
3751: const char code@var678 [@expr1073748916 535 ] =@expr1073748917 "void __attribute__((pure,nothrow,const)) func1();\nvoid __attribute__((__pure__,__nothrow__,__const__)) func2();\nvoid __attribute__((nothrow,pure,const)) func3();\nvoid __attribute__((__nothrow__,__pure__,__const__)) func4();\nvoid __attribute__((noreturn,format(printf,1,2))) func5();\nvoid __attribute__((__nothrow__)) __attribute__((__pure__,__const__)) func6();\nvoid __attribute__((__nothrow__,__pure__)) __attribute__((__const__)) func7();\nvoid __attribute__((noreturn)) __attribute__(()) __attribute__((nothrow,pure,const)) func8();"
3752:
|
3757:
3758: ;
3759: const char expected@var679 [@expr1073748918 136 ] =@expr1073748919 "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ; void func6 ( ) ; void func7 ( ) ; void func8 ( ) ;"
3760: ;
3761:
3762: errout@var100 .@expr1073748920 str (@expr1073748921 "" ) ;
3763:
3764:
3765: Tokenizer tokenizer@var680 (@expr1073748922 &@expr1073748923 settings0@var102 , this@expr1073748924 ) ;
3766: std ::@expr1073748925 istringstream istr@var681 (@expr1073748926 code@var678 ) ;
3767: $if $(@expr1073748927 $!@expr1073748928 $assert_ $(@expr1073748929 "cppcheck-2.8/test/testtokenize.cpp" $, 3767 $, $(@expr1073748930 tokenizer@var680 .@expr1073748931 tokenize (@expr1073748932 istr@var681 , "test.cpp" ) $) $) $) { $return ; }
3768:
3769:
3770: $if $(@expr1073748933 $!@expr1073748934 $assertEquals $(@expr1073748935 "cppcheck-2.8/test/testtokenize.cpp" $, 3770 $, expected@var679 $, $(@expr1073748936 tokenizer@var680 .@expr7113 tokens (@expr7114 ) .@expr1073748939 stringifyList (@expr1073748940 nullptr , false ) $) $) $) { $return ; }
3771:
3772: const Token * func1@var682 ; func1@var682 =@expr1073748941 Token ::@expr7118 findsimplematch (@expr1073748943 tokenizer@var680 .@expr7113 tokens (@expr7114 ) , "func1" ) ;
3773: const Token * func2@var683 ; func2@var683 =@expr1073748946 Token ::@expr7118 findsimplematch (@expr1073748948 tokenizer@var680 .@expr7113 tokens (@expr7114 ) , "func2" ) ;
3774: const Token * func3@var684 ; func3@var684 =@expr1073748951 Token ::@expr7118 findsimplematch (@expr1073748953 tokenizer@var680 .@expr7113 tokens (@expr7114 ) , "func3" ) ;
3775: const Token * func4@var685 ; func4@var685 =@expr1073748956 Token ::@expr7118 findsimplematch (@expr1073748958 tokenizer@var680 .@expr7113 tokens (@expr7114 ) , "func4" ) ;
3776: const Token * func5@var686 ; func5@var686 =@expr1073748961 Token ::@expr7118 findsimplematch (@expr1073748963 tokenizer@var680 .@expr7113 tokens (@expr7114 ) , "func5" ) ;
3777: const Token * func6@var687 ; func6@var687 =@expr1073748966 Token ::@expr7118 findsimplematch (@expr1073748968 tokenizer@var680 .@expr7113 tokens (@expr7114 ) , "func6" ) ;
3778: const Token * func7@var688 ; func7@var688 =@expr1073748971 Token ::@expr7118 findsimplematch (@expr1073748973 tokenizer@var680 .@expr7113 tokens (@expr7114 ) , "func7" ) ;
3779: const Token * func8@var689 ; func8@var689 =@expr1073748976 Token ::@expr7118 findsimplematch (@expr1073748978 tokenizer@var680 .@expr7113 tokens (@expr7114 ) , "func8" ) ;
3780:
3781: $if $(@expr1073748981 $!@expr1073748982 $assert_ $(@expr1073748983 "cppcheck-2.8/test/testtokenize.cpp" $, 3781 $, func1@var682 &&@expr1073748984 func1@var682 .@expr1073748985 isAttributePure (@expr1073748986 ) &&@expr1073748987 func1@var682 .@expr1073748988 isAttributeNothrow (@expr1073748989 ) &&@expr1073748990 func1@var682 .@expr1073748991 isAttributeConst (@expr1073748992 ) $) $) { $return ; }
3782: $if $(@expr1073748993 $!@expr1073748994 $assert_ $(@expr1073748995 "cppcheck-2.8/test/testtokenize.cpp" $, 3782 $, func2@var683 &&@expr1073748996 func2@var683 .@expr1073748997 isAttributePure (@expr1073748998 ) &&@expr1073748999 func2@var683 .@expr1073749000 isAttributeNothrow (@expr1073749001 ) &&@expr1073749002 func2@var683 .@expr1073749003 isAttributeConst (@expr1073749004 ) $) $) { $return ; }
3783: $if $(@expr1073749005 $!@expr1073749006 $assert_ $(@expr1073749007 "cppcheck-2.8/test/testtokenize.cpp" $, 3783 $, func3@var684 &&@expr1073749008 func3@var684 .@expr1073749009 isAttributePure (@expr1073749010 ) &&@expr1073749011 func3@var684 .@expr1073749012 isAttributeNothrow (@expr1073749013 ) &&@expr1073749014 func3@var684 .@expr1073749015 isAttributeConst (@expr1073749016 ) $) $) { $return ; }
3784: $if $(@expr1073749017 $!@expr1073749018 $assert_ $(@expr1073749019 "cppcheck-2.8/test/testtokenize.cpp" $, 3784 $, func4@var685 &&@expr1073749020 func4@var685 .@expr1073749021 isAttributePure (@expr1073749022 ) &&@expr1073749023 func4@var685 .@expr1073749024 isAttributeNothrow (@expr1073749025 ) &&@expr1073749026 func4@var685 .@expr1073749027 isAttributeConst (@expr1073749028 ) $) $) { $return ; }
3785: $if $(@expr1073749029 $!@expr1073749030 $assert_ $(@expr1073749031 "cppcheck-2.8/test/testtokenize.cpp" $, 3785 $, func5@var686 &&@expr1073749032 func5@var686 .@expr1073749033 isAttributeNoreturn (@expr1073749034 ) $) $) { $return ; }
3786: $if $(@expr1073749035 $!@expr1073749036 $assert_ $(@expr1073749037 "cppcheck-2.8/test/testtokenize.cpp" $, 3786 $, func6@var687 &&@expr1073749038 func6@var687 .@expr1073749039 isAttributePure (@expr1073749040 ) &&@expr1073749041 func6@var687 .@expr1073749042 isAttributeNothrow (@expr1073749043 ) &&@expr1073749044 func6@var687 .@expr1073749045 isAttributeConst (@expr1073749046 ) $) $) { $return ; }
3787: $if $(@expr1073749047 $!@expr1073749048 $assert_ $(@expr1073749049 "cppcheck-2.8/test/testtokenize.cpp" $, 3787 $, func7@var688 &&@expr1073749050 func7@var688 .@expr1073749051 isAttributePure (@expr1073749052 ) &&@expr1073749053 func7@var688 .@expr1073749054 isAttributeNothrow (@expr1073749055 ) &&@expr1073749056 func7@var688 .@expr1073749057 isAttributeConst (@expr1073749058 ) $) $) { $return ; }
3788: $if $(@expr1073749059 $!@expr1073749060 $assert_ $(@expr1073749061 "cppcheck-2.8/test/testtokenize.cpp" $, 3788 $, func8@var689 &&@expr1073749062 func8@var689 .@expr1073749063 isAttributeNoreturn (@expr1073749064 ) &&@expr1073749065 func8@var689 .@expr1073749066 isAttributePure (@expr1073749067 ) &&@expr1073749068 func8@var689 .@expr1073749069 isAttributeNothrow (@expr1073749070 ) &&@expr1073749071 func8@var689 .@expr1073749072 isAttributeConst (@expr1073749073 ) $) $) { $return ; }
3789: }
3790:
3791: void functionAttributeListAfter ( ) {
3792: const char code@var690 [@expr1073749074 535 ] =@expr1073749075 "void func1() __attribute__((pure,nothrow,const));\nvoid func2() __attribute__((__pure__,__nothrow__,__const__));\nvoid func3() __attribute__((nothrow,pure,const));\nvoid func4() __attribute__((__nothrow__,__pure__,__const__));\nvoid func5() __attribute__((noreturn,format(printf,1,2)));\nvoid func6() __attribute__((__nothrow__)) __attribute__((__pure__,__const__));\nvoid func7() __attribute__((__nothrow__,__pure__)) __attribute__((__const__));\nvoid func8() __attribute__((noreturn)) __attribute__(()) __attribute__((nothrow,pure,const));"
3793:
|
3798:
3799: ;
3800: const char expected@var691 [@expr1073749076 136 ] =@expr1073749077 "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ; void func6 ( ) ; void func7 ( ) ; void func8 ( ) ;"
3801: ;
3802:
3803: errout@var100 .@expr1073749078 str (@expr1073749079 "" ) ;
3804:
3805:
3806: Tokenizer tokenizer@var692 (@expr1073749080 &@expr1073749081 settings0@var102 , this@expr1073749082 ) ;
3807: std ::@expr1073749083 istringstream istr@var693 (@expr1073749084 code@var690 ) ;
3808: $if $(@expr1073749085 $!@expr1073749086 $assert_ $(@expr1073749087 "cppcheck-2.8/test/testtokenize.cpp" $, 3808 $, $(@expr1073749088 tokenizer@var692 .@expr1073749089 tokenize (@expr1073749090 istr@var693 , "test.cpp" ) $) $) $) { $return ; }
3809:
3810:
3811: $if $(@expr1073749091 $!@expr1073749092 $assertEquals $(@expr1073749093 "cppcheck-2.8/test/testtokenize.cpp" $, 3811 $, expected@var691 $, $(@expr1073749094 tokenizer@var692 .@expr7271 tokens (@expr7272 ) .@expr1073749097 stringifyList (@expr1073749098 nullptr , false ) $) $) $) { $return ; }
3812:
3813: const Token * func1@var694 ; func1@var694 =@expr1073749099 Token ::@expr7276 findsimplematch (@expr1073749101 tokenizer@var692 .@expr7271 tokens (@expr7272 ) , "func1" ) ;
3814: const Token * func2@var695 ; func2@var695 =@expr1073749104 Token ::@expr7276 findsimplematch (@expr1073749106 tokenizer@var692 .@expr7271 tokens (@expr7272 ) , "func2" ) ;
3815: const Token * func3@var696 ; func3@var696 =@expr1073749109 Token ::@expr7276 findsimplematch (@expr1073749111 tokenizer@var692 .@expr7271 tokens (@expr7272 ) , "func3" ) ;
3816: const Token * func4@var697 ; func4@var697 =@expr1073749114 Token ::@expr7276 findsimplematch (@expr1073749116 tokenizer@var692 .@expr7271 tokens (@expr7272 ) , "func4" ) ;
3817: const Token * func5@var698 ; func5@var698 =@expr1073749119 Token ::@expr7276 findsimplematch (@expr1073749121 tokenizer@var692 .@expr7271 tokens (@expr7272 ) , "func5" ) ;
3818: const Token * func6@var699 ; func6@var699 =@expr1073749124 Token ::@expr7276 findsimplematch (@expr1073749126 tokenizer@var692 .@expr7271 tokens (@expr7272 ) , "func6" ) ;
3819: const Token * func7@var700 ; func7@var700 =@expr1073749129 Token ::@expr7276 findsimplematch (@expr1073749131 tokenizer@var692 .@expr7271 tokens (@expr7272 ) , "func7" ) ;
3820: const Token * func8@var701 ; func8@var701 =@expr1073749134 Token ::@expr7276 findsimplematch (@expr1073749136 tokenizer@var692 .@expr7271 tokens (@expr7272 ) , "func8" ) ;
3821:
3822: $if $(@expr1073749139 $!@expr1073749140 $assert_ $(@expr1073749141 "cppcheck-2.8/test/testtokenize.cpp" $, 3822 $, func1@var694 &&@expr1073749142 func1@var694 .@expr1073749143 isAttributePure (@expr1073749144 ) &&@expr1073749145 func1@var694 .@expr1073749146 isAttributeNothrow (@expr1073749147 ) &&@expr1073749148 func1@var694 .@expr1073749149 isAttributeConst (@expr1073749150 ) $) $) { $return ; }
3823: $if $(@expr1073749151 $!@expr1073749152 $assert_ $(@expr1073749153 "cppcheck-2.8/test/testtokenize.cpp" $, 3823 $, func2@var695 &&@expr1073749154 func2@var695 .@expr1073749155 isAttributePure (@expr1073749156 ) &&@expr1073749157 func2@var695 .@expr1073749158 isAttributeNothrow (@expr1073749159 ) &&@expr1073749160 func2@var695 .@expr1073749161 isAttributeConst (@expr1073749162 ) $) $) { $return ; }
3824: $if $(@expr1073749163 $!@expr1073749164 $assert_ $(@expr1073749165 "cppcheck-2.8/test/testtokenize.cpp" $, 3824 $, func3@var696 &&@expr1073749166 func3@var696 .@expr1073749167 isAttributePure (@expr1073749168 ) &&@expr1073749169 func3@var696 .@expr1073749170 isAttributeNothrow (@expr1073749171 ) &&@expr1073749172 func3@var696 .@expr1073749173 isAttributeConst (@expr1073749174 ) $) $) { $return ; }
3825: $if $(@expr1073749175 $!@expr1073749176 $assert_ $(@expr1073749177 "cppcheck-2.8/test/testtokenize.cpp" $, 3825 $, func4@var697 &&@expr1073749178 func4@var697 .@expr1073749179 isAttributePure (@expr1073749180 ) &&@expr1073749181 func4@var697 .@expr1073749182 isAttributeNothrow (@expr1073749183 ) &&@expr1073749184 func4@var697 .@expr1073749185 isAttributeConst (@expr1073749186 ) $) $) { $return ; }
3826: $if $(@expr1073749187 $!@expr1073749188 $assert_ $(@expr1073749189 "cppcheck-2.8/test/testtokenize.cpp" $, 3826 $, func5@var698 &&@expr1073749190 func5@var698 .@expr1073749191 isAttributeNoreturn (@expr1073749192 ) $) $) { $return ; }
3827: $if $(@expr1073749193 $!@expr1073749194 $assert_ $(@expr1073749195 "cppcheck-2.8/test/testtokenize.cpp" $, 3827 $, func6@var699 &&@expr1073749196 func6@var699 .@expr1073749197 isAttributePure (@expr1073749198 ) &&@expr1073749199 func6@var699 .@expr1073749200 isAttributeNothrow (@expr1073749201 ) &&@expr1073749202 func6@var699 .@expr1073749203 isAttributeConst (@expr1073749204 ) $) $) { $return ; }
3828: $if $(@expr1073749205 $!@expr1073749206 $assert_ $(@expr1073749207 "cppcheck-2.8/test/testtokenize.cpp" $, 3828 $, func7@var700 &&@expr1073749208 func7@var700 .@expr1073749209 isAttributePure (@expr1073749210 ) &&@expr1073749211 func7@var700 .@expr1073749212 isAttributeNothrow (@expr1073749213 ) &&@expr1073749214 func7@var700 .@expr1073749215 isAttributeConst (@expr1073749216 ) $) $) { $return ; }
3829: $if $(@expr1073749217 $!@expr1073749218 $assert_ $(@expr1073749219 "cppcheck-2.8/test/testtokenize.cpp" $, 3829 $, func8@var701 &&@expr1073749220 func8@var701 .@expr1073749221 isAttributeNoreturn (@expr1073749222 ) &&@expr1073749223 func8@var701 .@expr1073749224 isAttributePure (@expr1073749225 ) &&@expr1073749226 func8@var701 .@expr1073749227 isAttributeNothrow (@expr1073749228 ) &&@expr1073749229 func8@var701 .@expr1073749230 isAttributeConst (@expr1073749231 ) $) $) { $return ; }
3830: }
3831:
3832:
3833: void splitTemplateRightAngleBrackets ( ) {
3834: {
3835: const char code@var702 [@expr1073749233 31 ] =@expr1073749234 "; z = x < 0 ? x >> y : x >> y;" ;
3836: $if $(@expr1073749235 $!@expr1073749236 $assertEquals $(@expr1073749237 "cppcheck-2.8/test/testtokenize.cpp" $, 3836 $, "; z = x < 0 ? x >> y : x >> y ;" $, $tokenizeAndStringify_ $(@expr1073749238 "cppcheck-2.8/test/testtokenize.cpp" $, 3836 $, code@var702 $) $) $) { $return ; }
3837: }
3838: {
3839:
3840:
3841: const char code@var703 [@expr1073749239 413 ] =@expr1073749240 "void f ( ) {\n    int shift_y = ctx->sprite_shift[0];\n    int shift_c = ctx->sprite_shift[1];\n    if ( shift_c < 0 || shift_y < 0 ||\n         FFABS ( sprite_offset [ 0 ] [ i ] ) >= INT_MAX >> shift_y ||\n         FFABS ( sprite_offset [ 1 ] [ i ] ) >= INT_MAX >> shift_c ||\n         FFABS ( sprite_delta [ 0 ] [ i ] ) >= INT_MAX >> shift_y ||\n         FFABS ( sprite_delta [ 1 ] [ i ] ) >= INT_MAX >> shift_y ) ;\n}"
3842:
|
3848:
3849: ;
3850: $if $(@expr1073749241 $!@expr1073749242 $assertEquals $(@expr1073749243 "cppcheck-2.8/test/testtokenize.cpp" $, 3850 $, std ::@expr1073749244 string ::@expr1073749245 npos@expr1073749232 $, $(@expr1073749246 $tokenizeAndStringify_ $(@expr1073749247 "cppcheck-2.8/test/testtokenize.cpp" $, 3850 $, code@var703 $) .@expr1073749248 find (@expr1073749249 "> >" ) $) $) $) { $return ; }
3851: }
3852: }
3853:
3854: void cpp03template1 ( ) {
3855: {
3856: const char * code@var704 ; code@var704 =@expr1073749250 "template<typename> struct extent {};" ;
3857: $if $(@expr1073749251 $!@expr1073749252 $assertEquals $(@expr1073749253 "cppcheck-2.8/test/testtokenize.cpp" $, 3857 $, "template < typename > struct extent { } ;" $, $tokenizeAndStringify_ $(@expr1073749254 "cppcheck-2.8/test/testtokenize.cpp" $, 3857 $, code@var704 $) $) $) { $return ; }
3858: }
3859: {
3860: const char * code@var705 ; code@var705 =@expr1073749255 "template<typename> struct extent;" ;
3861: $if $(@expr1073749256 $!@expr1073749257 $assertEquals $(@expr1073749258 "cppcheck-2.8/test/testtokenize.cpp" $, 3861 $, "template < typename > struct extent ;" $, $tokenizeAndStringify_ $(@expr1073749259 "cppcheck-2.8/test/testtokenize.cpp" $, 3861 $, code@var705 $) $) $) { $return ; }
3862: }
3863: {
3864: const char * code@var706 ; code@var706 =@expr1073749260 "template<typename, unsigned = 0> struct extent;" ;
3865: $if $(@expr1073749261 $!@expr1073749262 $assertEquals $(@expr1073749263 "cppcheck-2.8/test/testtokenize.cpp" $, 3865 $, "template < typename , unsigned int = 0 > struct extent ;" $, $tokenizeAndStringify_ $(@expr1073749264 "cppcheck-2.8/test/testtokenize.cpp" $, 3865 $, code@var706 $) $) $) { $return ; }
3866: }
3867: }
3868:
3869: void cpp0xtemplate1 ( ) {
3870: const char * code@var707 ; code@var707 =@expr1073749265 "template <class T>\nvoid fn2 (T t = []{return 1;}())\n{}\nint main()\n{\n  fn2<int>();\n}\n"
3871:
|
3875:
3876: ;
3877: $if $(@expr1073749266 $!@expr1073749267 $assertEquals $(@expr1073749268 "cppcheck-2.8/test/testtokenize.cpp" $, 3877 $, "void fn2<int> ( int t = [ ] { return 1 ; } ( ) ) ;\n\nint main ( )\n{\nfn2<int> ( ) ;\n}\nvoid fn2<int> ( int t = [ ] { return 1 ; } ( ) )\n{ }" $, $tokenizeAndStringify_ $(@expr1073749269 "cppcheck-2.8/test/testtokenize.cpp" $, 3877 $, code@var707 $) $) $) { $return
3878:
|
3883:
3884: ; }
3885: }
3886:
3887: void cpp0xtemplate2 ( ) {
3888:
3889: const char * code@var708 ; code@var708 =@expr1073749270 "list<list<int>> ints;\n" ;
3890: $if $(@expr1073749271 $!@expr1073749272 $assertEquals $(@expr1073749273 "cppcheck-2.8/test/testtokenize.cpp" $, 3890 $, "list < list < int > > ints ;" $, $tokenizeAndStringify_ $(@expr1073749274 "cppcheck-2.8/test/testtokenize.cpp" $, 3890 $, code@var708 $) $) $) { $return ; }
3891: }
3892:
3893: void cpp0xtemplate3 ( ) {
3894:
3895: const char * code@var709 ; code@var709 =@expr1073749275 "template<class T, T t = (T)0>\nstruct S\n{};\nS<int> s;\n"
3896:
3897:
3898: ;
3899: $if $(@expr1073749276 $!@expr1073749277 $assertEquals $(@expr1073749278 "cppcheck-2.8/test/testtokenize.cpp" $, 3899 $, "struct S<int,(int)0> ;\n\n\nS<int,(int)0> s ;\nstruct S<int,(int)0>\n{ } ;" $, $tokenizeAndStringify_ $(@expr1073749279 "cppcheck-2.8/test/testtokenize.cpp" $, 3899 $, code@var709 $) $) $) { $return
3900:
|
3904:
3905: ; }
3906: }
3907:
3908: void cpp0xtemplate4 ( ) {
3909: $tokenizeAndStringify_ $(@expr1073749280 "cppcheck-2.8/test/testtokenize.cpp" $, 3909 $, "class A; template <class T> class Disposer; template <typename T, class D = Disposer<T>> class Shim {}; class B : public Shim<A> {};" $)
3910:
3911:
3912: ;
3913: $tokenizeAndStringify_ $(@expr1073749281 "cppcheck-2.8/test/testtokenize.cpp" $, 3913 $, "template <class ELFT> class ELFObjectImage {}; ObjectImage *createObjectImage() {   return new ELFObjectImage<ELFType<little>>(Obj); } void resolveX86_64Relocation() {   reinterpret_cast<int>(0); }" $)
3914:
|
3918:
3919: ;
3920: $tokenizeAndStringify_ $(@expr1073749282 "cppcheck-2.8/test/testtokenize.cpp" $, 3920 $, "template<typename value_type, typename function_type> value_type Base(const value_type x, const value_type dx, function_type func, int type_deriv) {    return 0.0; }; namespace {   template<class DC> class C {     void Fun(int G, const double x);   };   template<class DC> void C<DC>::Fun(int G, const double x) {    Base<double, CDFFunctor<DC>>(2, 2, f, 0);   };   template<class DC> class C2 {}; }" $)
3921:
|
3931:
3932: ;
3933: }
3934:
3935: void cpp0xtemplate5 ( ) {
3936: {
3937: const char * code@var710 ; code@var710 =@expr1073749283 "struct s<x<u...>>;" ;
3938: $if $(@expr1073749284 $!@expr1073749285 $assertEquals $(@expr1073749286 "cppcheck-2.8/test/testtokenize.cpp" $, 3938 $, "struct s < x < u ... > > ;" $, $tokenizeAndStringify_ $(@expr1073749287 "cppcheck-2.8/test/testtokenize.cpp" $, 3938 $, code@var710 $) $) $) { $return
3939: ; }
3940: }
3941: {
3942: const char * code@var711 ; code@var711 =@expr1073749288 "template <class f> using c = e<i<q<f,r>,b...>>;" ;
3943: $if $(@expr1073749289 $!@expr1073749290 $assertEquals $(@expr1073749291 "cppcheck-2.8/test/testtokenize.cpp" $, 3943 $, "template < class f > using c = e < i < q < f , r > , b ... > > ;" $, $tokenizeAndStringify_ $(@expr1073749292 "cppcheck-2.8/test/testtokenize.cpp" $, 3943 $, code@var711 $) $) $) { $return
3944: ; }
3945: }
3946: {
3947: const char * code@var712 ; code@var712 =@expr1073749293 "struct s<x<u...>> { };" ;
3948: $if $(@expr1073749294 $!@expr1073749295 $assertEquals $(@expr1073749296 "cppcheck-2.8/test/testtokenize.cpp" $, 3948 $, "struct s < x < u ... > > { } ;" $, $tokenizeAndStringify_ $(@expr1073749297 "cppcheck-2.8/test/testtokenize.cpp" $, 3948 $, code@var712 $) $) $) { $return
3949: ; }
3950: }
3951: {
3952: const char * code@var713 ; code@var713 =@expr1073749298 "struct q : s<x<u...>> { };" ;
3953: $if $(@expr1073749299 $!@expr1073749300 $assertEquals $(@expr1073749301 "cppcheck-2.8/test/testtokenize.cpp" $, 3953 $, "struct q : s < x < u ... > > { } ;" $, $tokenizeAndStringify_ $(@expr1073749302 "cppcheck-2.8/test/testtokenize.cpp" $, 3953 $, code@var713 $) $) $) { $return
3954: ; }
3955: }
3956: {
3957: const char * code@var714 ; code@var714 =@expr1073749303 "struct q : private s<x<u...>> { };" ;
3958: $if $(@expr1073749304 $!@expr1073749305 $assertEquals $(@expr1073749306 "cppcheck-2.8/test/testtokenize.cpp" $, 3958 $, "struct q : private s < x < u ... > > { } ;" $, $tokenizeAndStringify_ $(@expr1073749307 "cppcheck-2.8/test/testtokenize.cpp" $, 3958 $, code@var714 $) $) $) { $return
3959: ; }
3960: }
3961: }
3962:
3963: void cpp14template ( ) {
3964: $tokenizeAndStringify_ $(@expr1073749308 "cppcheck-2.8/test/testtokenize.cpp" $, 3964 $, "template <typename T> decltype(auto) forward(T& t) { return 0; }" $)
3965: ;
3966: }
3967:
3968: void arraySize ( ) {
3969: $if $(@expr1073749309 $!@expr1073749310 $assertEquals $(@expr1073749311 "cppcheck-2.8/test/testtokenize.cpp" $, 3969 $, "; int a [ 3 ] = { 1 , 2 , 3 } ;" $, $tokenizeAndStringify_ $(@expr1073749312 "cppcheck-2.8/test/testtokenize.cpp" $, 3969 $, ";int a[]={1,2,3};" $) $) $) { $return ; }
3970: $if $(@expr1073749313 $!@expr1073749314 $assertEquals $(@expr1073749315 "cppcheck-2.8/test/testtokenize.cpp" $, 3970 $, "; int a [ 3 ] = { 1 , 2 , 3 } ;" $, $tokenizeAndStringify_ $(@expr1073749316 "cppcheck-2.8/test/testtokenize.cpp" $, 3970 $, ";int a[]={1,2,3,};" $) $) $) { $return ; }
3971: $if $(@expr1073749317 $!@expr1073749318 $assertEquals $(@expr1073749319 "cppcheck-2.8/test/testtokenize.cpp" $, 3971 $, "; foo a [ 3 ] = { { 1 , 2 } , { 3 , 4 } , { 5 , 6 } } ;" $, $tokenizeAndStringify_ $(@expr1073749320 "cppcheck-2.8/test/testtokenize.cpp" $, 3971 $, ";foo a[]={{1,2},{3,4},{5,6}};" $) $) $) { $return ; }
3972: $if $(@expr1073749321 $!@expr1073749322 $assertEquals $(@expr1073749323 "cppcheck-2.8/test/testtokenize.cpp" $, 3972 $, "; int a [ 1 ] = { foo < bar1 , bar2 > ( 123 , 4 ) } ;" $, $tokenizeAndStringify_ $(@expr1073749324 "cppcheck-2.8/test/testtokenize.cpp" $, 3972 $, ";int a[]={foo<bar1,bar2>(123,4)};" $) $) $) { $return ; }
3973: $if $(@expr1073749325 $!@expr1073749326 $assertEquals $(@expr1073749327 "cppcheck-2.8/test/testtokenize.cpp" $, 3973 $, "; int a [ 2 ] = { b > c ? 1 : 2 , 3 } ;" $, $tokenizeAndStringify_ $(@expr1073749328 "cppcheck-2.8/test/testtokenize.cpp" $, 3973 $, ";int a[]={ b>c?1:2,3};" $) $) $) { $return ; }
3974: $if $(@expr1073749329 $!@expr1073749330 $assertEquals $(@expr1073749331 "cppcheck-2.8/test/testtokenize.cpp" $, 3974 $, "int main ( ) { int a [ 2 ] = { b < c ? 1 : 2 , 3 } }" $, $tokenizeAndStringify_ $(@expr1073749332 "cppcheck-2.8/test/testtokenize.cpp" $, 3974 $, "int main(){int a[]={b<c?1:2,3}}" $) $) $) { $return ; }
3975: $if $(@expr1073749333 $!@expr1073749334 $assertEquals $(@expr1073749335 "cppcheck-2.8/test/testtokenize.cpp" $, 3975 $, "; int a [ 3 ] = { ABC , 2 , 3 } ;" $, $tokenizeAndStringify_ $(@expr1073749336 "cppcheck-2.8/test/testtokenize.cpp" $, 3975 $, ";int a[]={ABC,2,3};" $) $) $) { $return ; }
3976: $if $(@expr1073749337 $!@expr1073749338 $assertEquals $(@expr1073749339 "cppcheck-2.8/test/testtokenize.cpp" $, 3976 $, "; int a [ 3 ] = { [ 2 ] = 5 } ;" $, $tokenizeAndStringify_ $(@expr1073749340 "cppcheck-2.8/test/testtokenize.cpp" $, 3976 $, ";int a[]={ [2] = 5 };" $) $) $) { $return ; }
3977: $if $(@expr1073749341 $!@expr1073749342 $assertEquals $(@expr1073749343 "cppcheck-2.8/test/testtokenize.cpp" $, 3977 $, "; int a [ 5 ] = { 1 , 2 , [ 2 ] = 5 , 3 , 4 } ;" $, $tokenizeAndStringify_ $(@expr1073749344 "cppcheck-2.8/test/testtokenize.cpp" $, 3977 $, ";int a[]={ 1, 2, [2] = 5, 3, 4 };" $) $) $) { $return ; }
3978: $if $(@expr1073749345 $!@expr1073749346 $assertEquals $(@expr1073749347 "cppcheck-2.8/test/testtokenize.cpp" $, 3978 $, "; int a [ ] = { 1 , 2 , [ x ] = 5 , 3 , 4 } ;" $, $tokenizeAndStringify_ $(@expr1073749348 "cppcheck-2.8/test/testtokenize.cpp" $, 3978 $, ";int a[]={ 1, 2, [x] = 5, 3, 4 };" $) $) $) { $return ; }
3979: }
3980:
3981: void labels ( ) {
3982: $if $(@expr1073749349 $!@expr1073749350 $assertEquals $(@expr1073749351 "cppcheck-2.8/test/testtokenize.cpp" $, 3982 $, "void f ( ) { ab : ; a = 0 ; }" $, $tokenizeAndStringify_ $(@expr1073749352 "cppcheck-2.8/test/testtokenize.cpp" $, 3982 $, "void f() { ab: a=0; }" $) $) $) { $return ; }
3983:
3984: $if $(@expr1073749353 $!@expr1073749354 $assertEquals $(@expr1073749355 "cppcheck-2.8/test/testtokenize.cpp" $, 3984 $, "void f ( ) { ab : ; ( * func ) ( ) ; }" $, $tokenizeAndStringify_ $(@expr1073749356 "cppcheck-2.8/test/testtokenize.cpp" $, 3984 $, "void f() { ab: (*func)(); }" $) $) $) { $return ; }
3985:
3986: $if $(@expr1073749357 $!@expr1073749358 $assertEquals $(@expr1073749359 "cppcheck-2.8/test/testtokenize.cpp" $, 3986 $, "void f ( ) { ab : ; * b = 0 ; }" $, $tokenizeAndStringify_ $(@expr1073749360 "cppcheck-2.8/test/testtokenize.cpp" $, 3986 $, "void f() { ab: *b=0; }" $) $) $) { $return ; }
3987: $if $(@expr1073749361 $!@expr1073749362 $assertEquals $(@expr1073749363 "cppcheck-2.8/test/testtokenize.cpp" $, 3987 $, "void f ( ) { ab : ; * * b = 0 ; }" $, $tokenizeAndStringify_ $(@expr1073749364 "cppcheck-2.8/test/testtokenize.cpp" $, 3987 $, "void f() { ab: **b=0; }" $) $) $) { $return ; }
3988:
3989: $if $(@expr1073749365 $!@expr1073749366 $assertEquals $(@expr1073749367 "cppcheck-2.8/test/testtokenize.cpp" $, 3989 $, "void f ( ) { ab : ; & b = 0 ; }" $, $tokenizeAndStringify_ $(@expr1073749368 "cppcheck-2.8/test/testtokenize.cpp" $, 3989 $, "void f() { ab: &b=0; }" $) $) $) { $return ; }
3990: $if $(@expr1073749369 $!@expr1073749370 $assertEquals $(@expr1073749371 "cppcheck-2.8/test/testtokenize.cpp" $, 3990 $, "void f ( ) { ab : ; & ( b . x ) = 0 ; }" $, $tokenizeAndStringify_ $(@expr1073749372 "cppcheck-2.8/test/testtokenize.cpp" $, 3990 $, "void f() { ab: &(b->x)=0; }" $) $) $) { $return ; }
3991:
3992: $if $(@expr1073749373 $!@expr1073749374 $assertEquals $(@expr1073749375 "cppcheck-2.8/test/testtokenize.cpp" $, 3992 $, "void f ( ) { ab : ; * ( * b ) . x = 0 ; }" $, $tokenizeAndStringify_ $(@expr1073749376 "cppcheck-2.8/test/testtokenize.cpp" $, 3992 $, "void f() { ab: *(* b)->x=0; }" $) $) $) { $return ; }
3993: $if $(@expr1073749377 $!@expr1073749378 $assertEquals $(@expr1073749379 "cppcheck-2.8/test/testtokenize.cpp" $, 3993 $, "void f ( ) { ab : ; ( * * b ) . x = 0 ; }" $, $tokenizeAndStringify_ $(@expr1073749380 "cppcheck-2.8/test/testtokenize.cpp" $, 3993 $, "void f() { ab: (** b).x=0; }" $) $) $) { $return ; }
3994: $if $(@expr1073749381 $!@expr1073749382 $assertEquals $(@expr1073749383 "cppcheck-2.8/test/testtokenize.cpp" $, 3994 $, "void f ( ) { ab : ; & ( * b . x ) = 0 ; }" $, $tokenizeAndStringify_ $(@expr1073749384 "cppcheck-2.8/test/testtokenize.cpp" $, 3994 $, "void f() { ab: &(*b.x)=0; }" $) $) $) { $return ; }
3995:
3996: $if $(@expr1073749385 $!@expr1073749386 $assertEquals $(@expr1073749387 "cppcheck-2.8/test/testtokenize.cpp" $, 3996 $, "void f ( ) { ab : ; { b = 0 ; } }" $, $tokenizeAndStringify_ $(@expr1073749388 "cppcheck-2.8/test/testtokenize.cpp" $, 3996 $, "void f() { ab: {b=0;} }" $) $) $) { $return ; }
3997: $if $(@expr1073749389 $!@expr1073749390 $assertEquals $(@expr1073749391 "cppcheck-2.8/test/testtokenize.cpp" $, 3997 $, "void f ( ) { ab : ; { * b = 0 ; } }" $, $tokenizeAndStringify_ $(@expr1073749392 "cppcheck-2.8/test/testtokenize.cpp" $, 3997 $, "void f() { ab: { *b=0;} }" $) $) $) { $return ; }
3998: $if $(@expr1073749393 $!@expr1073749394 $assertEquals $(@expr1073749395 "cppcheck-2.8/test/testtokenize.cpp" $, 3998 $, "void f ( ) { ab : ; { & b = 0 ; } }" $, $tokenizeAndStringify_ $(@expr1073749396 "cppcheck-2.8/test/testtokenize.cpp" $, 3998 $, "void f() { ab: { &b=0;} }" $) $) $) { $return ; }
3999: $if $(@expr1073749397 $!@expr1073749398 $assertEquals $(@expr1073749399 "cppcheck-2.8/test/testtokenize.cpp" $, 3999 $, "void f ( ) { ab : ; { & ( * b . x ) = 0 ; } }" $, $tokenizeAndStringify_ $(@expr1073749400 "cppcheck-2.8/test/testtokenize.cpp" $, 3999 $, "void f() { ab: {&(*b.x)=0;} }" $) $) $) { $return ; }
4000:
4001: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073749401 "cppcheck-2.8/test/testtokenize.cpp" $, 4001 $, "void f() { MACRO(ab: b=0;, foo)}" $) $; $assertThrowFail $(@expr1073749402 "cppcheck-2.8/test/testtokenize.cpp" $, 4001 $) $; $} $catch $(@expr1073749403 $const InternalError $&@expr1073749404 $) ${ $} $catch $(@expr1073749405 $... $) ${ $assertThrowFail $(@expr1073749406 "cppcheck-2.8/test/testtokenize.cpp" $, 4001 $) $; $} $} $while $(@expr1073749407 $false $) ;
4002: $if $(@expr1073749408 $!@expr1073749409 $assertEquals $(@expr1073749410 "cppcheck-2.8/test/testtokenize.cpp" $, 4002 $, "void f ( ) { MACRO ( bar , ab : { & ( * b . x ) = 0 ; } ) }" $, $tokenizeAndStringify_ $(@expr1073749411 "cppcheck-2.8/test/testtokenize.cpp" $, 4002 $, "void f() { MACRO(bar, ab: {&(*b.x)=0;})}" $) $) $) { $return ; }
4003: }
4004:
4005: void simplifyInitVar ( ) {
4006: {
4007: const char code@var715 [@expr1073749412 18 ] =@expr1073749413 "int i ; int p(0);" ;
4008: $if $(@expr1073749414 $!@expr1073749415 $assertEquals $(@expr1073749416 "cppcheck-2.8/test/testtokenize.cpp" $, 4008 $, "int i ; int p ; p = 0 ;" $, $tokenizeAndStringify_ $(@expr1073749417 "cppcheck-2.8/test/testtokenize.cpp" $, 4008 $, code@var715 $) $) $) { $return ; }
4009: $if $(@expr1073749418 $!@expr1073749419 $assertEquals $(@expr1073749420 "cppcheck-2.8/test/testtokenize.cpp" $, 4009 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4010: }
4011:
4012: {
4013: const char code@var716 [@expr1073749423 18 ] =@expr1073749424 "int i; int *p(0);" ;
4014: $if $(@expr1073749425 $!@expr1073749426 $assertEquals $(@expr1073749427 "cppcheck-2.8/test/testtokenize.cpp" $, 4014 $, "int i ; int * p ; p = 0 ;" $, $tokenizeAndStringify_ $(@expr1073749428 "cppcheck-2.8/test/testtokenize.cpp" $, 4014 $, code@var716 $) $) $) { $return ; }
4015: $if $(@expr1073749429 $!@expr1073749430 $assertEquals $(@expr1073749431 "cppcheck-2.8/test/testtokenize.cpp" $, 4015 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4016: }
4017:
4018: {
4019: const char code@var717 [@expr1073749434 10 ] =@expr1073749435 "int p(0);" ;
4020: $if $(@expr1073749436 $!@expr1073749437 $assertEquals $(@expr1073749438 "cppcheck-2.8/test/testtokenize.cpp" $, 4020 $, "int p ; p = 0 ;" $, $tokenizeAndStringify_ $(@expr1073749439 "cppcheck-2.8/test/testtokenize.cpp" $, 4020 $, code@var717 $) $) $) { $return ; }
4021: $if $(@expr1073749440 $!@expr1073749441 $assertEquals $(@expr1073749442 "cppcheck-2.8/test/testtokenize.cpp" $, 4021 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4022: }
4023:
4024: {
4025: const char code@var718 [@expr1073749445 11 ] =@expr1073749446 "int *p(0);" ;
4026: $if $(@expr1073749447 $!@expr1073749448 $assertEquals $(@expr1073749449 "cppcheck-2.8/test/testtokenize.cpp" $, 4026 $, "int * p ; p = 0 ;" $, $tokenizeAndStringify_ $(@expr1073749450 "cppcheck-2.8/test/testtokenize.cpp" $, 4026 $, code@var718 $) $) $) { $return ; }
4027: $if $(@expr1073749451 $!@expr1073749452 $assertEquals $(@expr1073749453 "cppcheck-2.8/test/testtokenize.cpp" $, 4027 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4028: }
4029:
4030: {
4031: const char code@var719 [@expr1073749456 18 ] =@expr1073749457 "int i ; int p(i);" ;
4032: $if $(@expr1073749458 $!@expr1073749459 $assertEquals $(@expr1073749460 "cppcheck-2.8/test/testtokenize.cpp" $, 4032 $, "int i ; int p ; p = i ;" $, $tokenizeAndStringify_ $(@expr1073749461 "cppcheck-2.8/test/testtokenize.cpp" $, 4032 $, code@var719 $) $) $) { $return ; }
4033: $if $(@expr1073749462 $!@expr1073749463 $assertEquals $(@expr1073749464 "cppcheck-2.8/test/testtokenize.cpp" $, 4033 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4034: }
4035:
4036: {
4037: const char code@var720 [@expr1073749467 19 ] =@expr1073749468 "int i; int *p(&i);" ;
4038: $if $(@expr1073749469 $!@expr1073749470 $assertEquals $(@expr1073749471 "cppcheck-2.8/test/testtokenize.cpp" $, 4038 $, "int i ; int * p ; p = & i ;" $, $tokenizeAndStringify_ $(@expr1073749472 "cppcheck-2.8/test/testtokenize.cpp" $, 4038 $, code@var720 $) $) $) { $return ; }
4039: $if $(@expr1073749473 $!@expr1073749474 $assertEquals $(@expr1073749475 "cppcheck-2.8/test/testtokenize.cpp" $, 4039 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4040: }
4041:
4042: {
4043: const char code@var721 [@expr1073749478 20 ] =@expr1073749479 "int i; void *p(&i);" ;
4044: $if $(@expr1073749480 $!@expr1073749481 $assertEquals $(@expr1073749482 "cppcheck-2.8/test/testtokenize.cpp" $, 4044 $, "int i ; void * p ; p = & i ;" $, $tokenizeAndStringify_ $(@expr1073749483 "cppcheck-2.8/test/testtokenize.cpp" $, 4044 $, code@var721 $) $) $) { $return ; }
4045: $if $(@expr1073749484 $!@expr1073749485 $assertEquals $(@expr1073749486 "cppcheck-2.8/test/testtokenize.cpp" $, 4045 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4046: }
4047:
4048: {
4049: const char code@var722 [@expr1073749489 43 ] =@expr1073749490 "struct S { }; struct S s; struct S *p(&s);" ;
4050: $if $(@expr1073749491 $!@expr1073749492 $assertEquals $(@expr1073749493 "cppcheck-2.8/test/testtokenize.cpp" $, 4050 $, "struct S { } ; struct S s ; struct S * p ; p = & s ;" $, $tokenizeAndStringify_ $(@expr1073749494 "cppcheck-2.8/test/testtokenize.cpp" $, 4050 $, code@var722 $) $) $) { $return ; }
4051: $if $(@expr1073749495 $!@expr1073749496 $assertEquals $(@expr1073749497 "cppcheck-2.8/test/testtokenize.cpp" $, 4051 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4052: }
4053:
4054: {
4055: const char code@var723 [@expr1073749500 29 ] =@expr1073749501 "struct S { }; S s; S *p(&s);" ;
4056: $if $(@expr1073749502 $!@expr1073749503 $assertEquals $(@expr1073749504 "cppcheck-2.8/test/testtokenize.cpp" $, 4056 $, "struct S { } ; S s ; S * p ; p = & s ;" $, $tokenizeAndStringify_ $(@expr1073749505 "cppcheck-2.8/test/testtokenize.cpp" $, 4056 $, code@var723 $) $) $) { $return ; }
4057: $if $(@expr1073749506 $!@expr1073749507 $assertEquals $(@expr1073749508 "cppcheck-2.8/test/testtokenize.cpp" $, 4057 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4058: }
4059:
4060: {
4061: const char code@var724 [@expr1073749511 56 ] =@expr1073749512 "union S { int i; float f; }; union S s; union S *p(&s);" ;
4062: $if $(@expr1073749513 $!@expr1073749514 $assertEquals $(@expr1073749515 "cppcheck-2.8/test/testtokenize.cpp" $, 4062 $, "union S { int i ; float f ; } ; union S s ; union S * p ; p = & s ;" $, $tokenizeAndStringify_ $(@expr1073749516 "cppcheck-2.8/test/testtokenize.cpp" $, 4062 $, code@var724 $) $) $) { $return ; }
4063: $if $(@expr1073749517 $!@expr1073749518 $assertEquals $(@expr1073749519 "cppcheck-2.8/test/testtokenize.cpp" $, 4063 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4064: }
4065:
4066: {
4067: const char code@var725 [@expr1073749522 44 ] =@expr1073749523 "union S { int i; float f; }; S s; S *p(&s);" ;
4068: $if $(@expr1073749524 $!@expr1073749525 $assertEquals $(@expr1073749526 "cppcheck-2.8/test/testtokenize.cpp" $, 4068 $, "union S { int i ; float f ; } ; S s ; S * p ; p = & s ;" $, $tokenizeAndStringify_ $(@expr1073749527 "cppcheck-2.8/test/testtokenize.cpp" $, 4068 $, code@var725 $) $) $) { $return ; }
4069: $if $(@expr1073749528 $!@expr1073749529 $assertEquals $(@expr1073749530 "cppcheck-2.8/test/testtokenize.cpp" $, 4069 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4070: }
4071:
4072: {
4073: const char code@var726 [@expr1073749533 40 ] =@expr1073749534 "class C { }; class C c; class C *p(&c);" ;
4074: $if $(@expr1073749535 $!@expr1073749536 $assertEquals $(@expr1073749537 "cppcheck-2.8/test/testtokenize.cpp" $, 4074 $, "class C { } ; class C c ; class C * p ; p = & c ;" $, $tokenizeAndStringify_ $(@expr1073749538 "cppcheck-2.8/test/testtokenize.cpp" $, 4074 $, code@var726 $) $) $) { $return ; }
4075: $if $(@expr1073749539 $!@expr1073749540 $assertEquals $(@expr1073749541 "cppcheck-2.8/test/testtokenize.cpp" $, 4075 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4076: }
4077:
4078: {
4079: const char code@var727 [@expr1073749544 28 ] =@expr1073749545 "class C { }; C c; C *p(&c);" ;
4080: $if $(@expr1073749546 $!@expr1073749547 $assertEquals $(@expr1073749548 "cppcheck-2.8/test/testtokenize.cpp" $, 4080 $, "class C { } ; C c ; C * p ; p = & c ;" $, $tokenizeAndStringify_ $(@expr1073749549 "cppcheck-2.8/test/testtokenize.cpp" $, 4080 $, code@var727 $) $) $) { $return ; }
4081: $if $(@expr1073749550 $!@expr1073749551 $assertEquals $(@expr1073749552 "cppcheck-2.8/test/testtokenize.cpp" $, 4081 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4082: }
4083:
4084: {
4085: const char code@var728 [@expr1073749555 42 ] =@expr1073749556 "struct S { }; struct S s; struct S s1(s);" ;
4086: $if $(@expr1073749557 $!@expr1073749558 $assertEquals $(@expr1073749559 "cppcheck-2.8/test/testtokenize.cpp" $, 4086 $, "struct S { } ; struct S s ; struct S s1 ( s ) ;" $, $tokenizeAndStringify_ $(@expr1073749560 "cppcheck-2.8/test/testtokenize.cpp" $, 4086 $, code@var728 $) $) $) { $return ; }
4087: $if $(@expr1073749561 $!@expr1073749562 $assertEquals $(@expr1073749563 "cppcheck-2.8/test/testtokenize.cpp" $, 4087 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4088: }
4089:
4090: {
4091: const char code@var729 [@expr1073749566 28 ] =@expr1073749567 "struct S { }; S s; S s1(s);" ;
4092: $if $(@expr1073749568 $!@expr1073749569 $assertEquals $(@expr1073749570 "cppcheck-2.8/test/testtokenize.cpp" $, 4092 $, "struct S { } ; S s ; S s1 ( s ) ;" $, $tokenizeAndStringify_ $(@expr1073749571 "cppcheck-2.8/test/testtokenize.cpp" $, 4092 $, code@var729 $) $) $) { $return ; }
4093: $if $(@expr1073749572 $!@expr1073749573 $assertEquals $(@expr1073749574 "cppcheck-2.8/test/testtokenize.cpp" $, 4093 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4094: }
4095:
4096: {
4097: const char code@var730 [@expr1073749577 43 ] =@expr1073749578 "struct S { }; struct S s; struct S s1(&s);" ;
4098: $if $(@expr1073749579 $!@expr1073749580 $assertEquals $(@expr1073749581 "cppcheck-2.8/test/testtokenize.cpp" $, 4098 $, "struct S { } ; struct S s ; struct S s1 ( & s ) ;" $, $tokenizeAndStringify_ $(@expr1073749582 "cppcheck-2.8/test/testtokenize.cpp" $, 4098 $, code@var730 $) $) $) { $return ; }
4099: $if $(@expr1073749583 $!@expr1073749584 $assertEquals $(@expr1073749585 "cppcheck-2.8/test/testtokenize.cpp" $, 4099 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4100: }
4101:
4102: {
4103: const char code@var731 [@expr1073749588 29 ] =@expr1073749589 "struct S { }; S s; S s1(&s);" ;
4104: $if $(@expr1073749590 $!@expr1073749591 $assertEquals $(@expr1073749592 "cppcheck-2.8/test/testtokenize.cpp" $, 4104 $, "struct S { } ; S s ; S s1 ( & s ) ;" $, $tokenizeAndStringify_ $(@expr1073749593 "cppcheck-2.8/test/testtokenize.cpp" $, 4104 $, code@var731 $) $) $) { $return ; }
4105: $if $(@expr1073749594 $!@expr1073749595 $assertEquals $(@expr1073749596 "cppcheck-2.8/test/testtokenize.cpp" $, 4105 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4106: }
4107:
4108: {
4109: const char code@var732 [@expr1073749599 29 ] =@expr1073749600 "class S { int function(); };" ;
4110: $if $(@expr1073749601 $!@expr1073749602 $assertEquals $(@expr1073749603 "cppcheck-2.8/test/testtokenize.cpp" $, 4110 $, "class S { int function ( ) ; } ;" $, $tokenizeAndStringify_ $(@expr1073749604 "cppcheck-2.8/test/testtokenize.cpp" $, 4110 $, code@var732 $) $) $) { $return ; }
4111: $if $(@expr1073749605 $!@expr1073749606 $assertEquals $(@expr1073749607 "cppcheck-2.8/test/testtokenize.cpp" $, 4111 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4112: }
4113:
4114: {
4115: const char code@var733 [@expr1073749610 33 ] =@expr1073749611 "class S { int function(void); };" ;
4116: $if $(@expr1073749612 $!@expr1073749613 $assertEquals $(@expr1073749614 "cppcheck-2.8/test/testtokenize.cpp" $, 4116 $, "class S { int function ( ) ; } ;" $, $tokenizeAndStringify_ $(@expr1073749615 "cppcheck-2.8/test/testtokenize.cpp" $, 4116 $, code@var733 $) $) $) { $return ; }
4117: $if $(@expr1073749616 $!@expr1073749617 $assertEquals $(@expr1073749618 "cppcheck-2.8/test/testtokenize.cpp" $, 4117 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4118: }
4119:
4120: {
4121: const char code@var734 [@expr1073749621 32 ] =@expr1073749622 "class S { int function(int); };" ;
4122: $if $(@expr1073749623 $!@expr1073749624 $assertEquals $(@expr1073749625 "cppcheck-2.8/test/testtokenize.cpp" $, 4122 $, "class S { int function ( int ) ; } ;" $, $tokenizeAndStringify_ $(@expr1073749626 "cppcheck-2.8/test/testtokenize.cpp" $, 4122 $, code@var734 $) $) $) { $return ; }
4123: $if $(@expr1073749627 $!@expr1073749628 $assertEquals $(@expr1073749629 "cppcheck-2.8/test/testtokenize.cpp" $, 4123 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4124: }
4125:
4126: {
4127: const char code@var735 [@expr1073749632 20 ] =@expr1073749633 "int function(void);" ;
4128: $if $(@expr1073749634 $!@expr1073749635 $assertEquals $(@expr1073749636 "cppcheck-2.8/test/testtokenize.cpp" $, 4128 $, "int function ( ) ;" $, $tokenizeAndStringify_ $(@expr1073749637 "cppcheck-2.8/test/testtokenize.cpp" $, 4128 $, code@var735 $) $) $) { $return ; }
4129: $if $(@expr1073749638 $!@expr1073749639 $assertEquals $(@expr1073749640 "cppcheck-2.8/test/testtokenize.cpp" $, 4129 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4130: }
4131:
4132: {
4133: const char code@var736 [@expr1073749643 19 ] =@expr1073749644 "int function(int);" ;
4134: $if $(@expr1073749645 $!@expr1073749646 $assertEquals $(@expr1073749647 "cppcheck-2.8/test/testtokenize.cpp" $, 4134 $, "int function ( int ) ;" $, $tokenizeAndStringify_ $(@expr1073749648 "cppcheck-2.8/test/testtokenize.cpp" $, 4134 $, code@var736 $) $) $) { $return ; }
4135: $if $(@expr1073749649 $!@expr1073749650 $assertEquals $(@expr1073749651 "cppcheck-2.8/test/testtokenize.cpp" $, 4135 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4136: }
4137:
4138: {
4139: const char code@var737 [@expr1073749654 27 ] =@expr1073749655 "extern int function(void);" ;
4140: $if $(@expr1073749656 $!@expr1073749657 $assertEquals $(@expr1073749658 "cppcheck-2.8/test/testtokenize.cpp" $, 4140 $, "extern int function ( ) ;" $, $tokenizeAndStringify_ $(@expr1073749659 "cppcheck-2.8/test/testtokenize.cpp" $, 4140 $, code@var737 $) $) $) { $return ; }
4141: $if $(@expr1073749660 $!@expr1073749661 $assertEquals $(@expr1073749662 "cppcheck-2.8/test/testtokenize.cpp" $, 4141 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4142: }
4143:
4144: {
4145: const char code@var738 [@expr1073749665 42 ] =@expr1073749666 "int function1(void); int function2(void);" ;
4146: $if $(@expr1073749667 $!@expr1073749668 $assertEquals $(@expr1073749669 "cppcheck-2.8/test/testtokenize.cpp" $, 4146 $, "int function1 ( ) ; int function2 ( ) ;" $, $tokenizeAndStringify_ $(@expr1073749670 "cppcheck-2.8/test/testtokenize.cpp" $, 4146 $, code@var738 $) $) $) { $return ; }
4147: $if $(@expr1073749671 $!@expr1073749672 $assertEquals $(@expr1073749673 "cppcheck-2.8/test/testtokenize.cpp" $, 4147 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4148: }
4149:
4150: {
4151: const char code@var739 [@expr1073749676 17 ] =@expr1073749677 "int function(A);" ;
4152:
4153:
4154: $if $(@expr1073749678 $!@expr1073749679 $assertEquals $(@expr1073749680 "cppcheck-2.8/test/testtokenize.cpp" $, 4154 $, "int function ( A ) ;" $, $tokenizeAndStringify_ $(@expr1073749681 "cppcheck-2.8/test/testtokenize.cpp" $, 4154 $, code@var739 $) $) $) { $return ; }
4155: $if $(@expr1073749682 $!@expr1073749683 $assertEquals $(@expr1073749684 "cppcheck-2.8/test/testtokenize.cpp" $, 4155 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4156: }
4157:
4158: {
4159: const char code@var740 [@expr1073749687 24 ] =@expr1073749688 "int i; int function(A);" ;
4160: $if $(@expr1073749689 $!@expr1073749690 $assertEquals $(@expr1073749691 "cppcheck-2.8/test/testtokenize.cpp" $, 4160 $, "int i ; int function ( A ) ;" $, $tokenizeAndStringify_ $(@expr1073749692 "cppcheck-2.8/test/testtokenize.cpp" $, 4160 $, code@var740 $) $) $) { $return ; }
4161: $if $(@expr1073749693 $!@expr1073749694 $assertEquals $(@expr1073749695 "cppcheck-2.8/test/testtokenize.cpp" $, 4161 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4162: }
4163:
4164: {
4165: const char code@var741 [@expr1073749698 26 ] =@expr1073749699 "class A { } ; int foo(A);" ;
4166: $if $(@expr1073749700 $!@expr1073749701 $assertEquals $(@expr1073749702 "cppcheck-2.8/test/testtokenize.cpp" $, 4166 $, "class A { } ; int foo ( A ) ;" $, $tokenizeAndStringify_ $(@expr1073749703 "cppcheck-2.8/test/testtokenize.cpp" $, 4166 $, code@var741 $) $) $) { $return ; }
4167: $if $(@expr1073749704 $!@expr1073749705 $assertEquals $(@expr1073749706 "cppcheck-2.8/test/testtokenize.cpp" $, 4167 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4168: }
4169:
4170: {
4171: const char code@var742 [@expr1073749709 31 ] =@expr1073749710 "class A { } ; A a; int foo(a);" ;
4172: $if $(@expr1073749711 $!@expr1073749712 $assertEquals $(@expr1073749713 "cppcheck-2.8/test/testtokenize.cpp" $, 4172 $, "class A { } ; A a ; int foo ; foo = a ;" $, $tokenizeAndStringify_ $(@expr1073749714 "cppcheck-2.8/test/testtokenize.cpp" $, 4172 $, code@var742 $) $) $) { $return ; }
4173: $if $(@expr1073749715 $!@expr1073749716 $assertEquals $(@expr1073749717 "cppcheck-2.8/test/testtokenize.cpp" $, 4173 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4174: }
4175:
4176: {
4177: const char code@var743 [@expr1073749720 12 ] =@expr1073749721 "int x(f());" ;
4178: $if $(@expr1073749722 $!@expr1073749723 $assertEquals $(@expr1073749724 "cppcheck-2.8/test/testtokenize.cpp" $, 4178 $, "int x ; x = f ( ) ;" $, $tokenizeAndStringify_ $(@expr1073749725 "cppcheck-2.8/test/testtokenize.cpp" $, 4178 $, code@var743 $) $) $) { $return ; }
4179: $if $(@expr1073749726 $!@expr1073749727 $assertEquals $(@expr1073749728 "cppcheck-2.8/test/testtokenize.cpp" $, 4179 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4180: }
4181:
4182: {
4183: const char code@var744 [@expr1073749731 30 ] =@expr1073749732 "{ return doSomething(X), 0; }" ;
4184: $if $(@expr1073749733 $!@expr1073749734 $assertEquals $(@expr1073749735 "cppcheck-2.8/test/testtokenize.cpp" $, 4184 $, "{ return doSomething ( X ) , 0 ; }" $, $tokenizeAndStringify_ $(@expr1073749736 "cppcheck-2.8/test/testtokenize.cpp" $, 4184 $, code@var744 $) $) $) { $return ; }
4185: $if $(@expr1073749737 $!@expr1073749738 $assertEquals $(@expr1073749739 "cppcheck-2.8/test/testtokenize.cpp" $, 4185 $, "" $, errout@var100 .@expr7597 str (@expr7598 ) $) $) { $return ; }
4186: }
4187: }
4188:
4189: void simplifyInitVar2 ( ) {
4190:
4191: const char code@var745 [@expr1073749742 41 ] =@expr1073749743 "void f() {\n    unsigned int a(0),b(0);\n}"
4192:
4193: ;
4194: $if $(@expr1073749744 $!@expr1073749745 $assertEquals $(@expr1073749746 "cppcheck-2.8/test/testtokenize.cpp" $, 4194 $, "void f ( ) {\nunsigned int a ; a = 0 ; unsigned int b ; b = 0 ;\n}" $, $tokenizeAndStringify_ $(@expr1073749747 "cppcheck-2.8/test/testtokenize.cpp" $, 4194 $, code@var745 $) $) $) { $return
4195:
4196: ; }
4197: }
4198:
4199: void simplifyInitVar3 ( ) {
4200: const char code@var746 [@expr1073749748 33 ] =@expr1073749749 "void f() {\n    int *a(0),b(0);\n}"
4201:
4202: ;
4203: $if $(@expr1073749750 $!@expr1073749751 $assertEquals $(@expr1073749752 "cppcheck-2.8/test/testtokenize.cpp" $, 4203 $, "void f ( ) {\nint * a ; a = 0 ; int b ; b = 0 ;\n}" $, $tokenizeAndStringify_ $(@expr1073749753 "cppcheck-2.8/test/testtokenize.cpp" $, 4203 $, code@var746 $) $) $) { $return
4204:
4205: ; }
4206: }
4207:
4208: void bitfields1 ( ) {
4209: const char code1@var747 [@expr1073749755 26 ] =@expr1073749756 "struct A { bool x : 1; };" ;
4210: $if $(@expr1073749757 $!@expr1073749758 $assertEquals $(@expr1073749759 "cppcheck-2.8/test/testtokenize.cpp" $, 4210 $, "struct A { bool x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749760 "cppcheck-2.8/test/testtokenize.cpp" $, 4210 $, code1@var747 $) $) $) { $return ; }
4211:
4212: const char code2@var748 [@expr1073749761 26 ] =@expr1073749762 "struct A { char x : 3; };" ;
4213: $if $(@expr1073749763 $!@expr1073749764 $assertEquals $(@expr1073749765 "cppcheck-2.8/test/testtokenize.cpp" $, 4213 $, "struct A { char x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749766 "cppcheck-2.8/test/testtokenize.cpp" $, 4213 $, code2@var748 $) $) $) { $return ; }
4214:
4215: const char code3@var749 [@expr1073749767 27 ] =@expr1073749768 "struct A { short x : 3; };" ;
4216: $if $(@expr1073749769 $!@expr1073749770 $assertEquals $(@expr1073749771 "cppcheck-2.8/test/testtokenize.cpp" $, 4216 $, "struct A { short x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749772 "cppcheck-2.8/test/testtokenize.cpp" $, 4216 $, code3@var749 $) $) $) { $return ; }
4217:
4218: const char code4@var750 [@expr1073749773 25 ] =@expr1073749774 "struct A { int x : 3; };" ;
4219: $if $(@expr1073749775 $!@expr1073749776 $assertEquals $(@expr1073749777 "cppcheck-2.8/test/testtokenize.cpp" $, 4219 $, "struct A { int x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749778 "cppcheck-2.8/test/testtokenize.cpp" $, 4219 $, code4@var750 $) $) $) { $return ; }
4220:
4221: const char code5@var751 [@expr1073749779 26 ] =@expr1073749780 "struct A { long x : 3; };" ;
4222: $if $(@expr1073749781 $!@expr1073749782 $assertEquals $(@expr1073749783 "cppcheck-2.8/test/testtokenize.cpp" $, 4222 $, "struct A { long x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749784 "cppcheck-2.8/test/testtokenize.cpp" $, 4222 $, code5@var751 $) $) $) { $return ; }
4223:
4224: const char code6@var752 [@expr1073749785 28 ] =@expr1073749786 "struct A { __int8 x : 3; };" ;
4225: $if $(@expr1073749787 $!@expr1073749788 $assertEquals $(@expr1073749789 "cppcheck-2.8/test/testtokenize.cpp" $, 4225 $, "struct A { char x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749790 "cppcheck-2.8/test/testtokenize.cpp" $, 4225 $, code6@var752 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4226:
4227: const char code7@var753 [@expr1073749792 29 ] =@expr1073749793 "struct A { __int16 x : 3; };" ;
4228: $if $(@expr1073749794 $!@expr1073749795 $assertEquals $(@expr1073749796 "cppcheck-2.8/test/testtokenize.cpp" $, 4228 $, "struct A { short x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749797 "cppcheck-2.8/test/testtokenize.cpp" $, 4228 $, code7@var753 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4229:
4230: const char code8@var754 [@expr1073749799 29 ] =@expr1073749800 "struct A { __int32 x : 3; };" ;
4231: $if $(@expr1073749801 $!@expr1073749802 $assertEquals $(@expr1073749803 "cppcheck-2.8/test/testtokenize.cpp" $, 4231 $, "struct A { int x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749804 "cppcheck-2.8/test/testtokenize.cpp" $, 4231 $, code8@var754 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4232:
4233: const char code9@var755 [@expr1073749806 29 ] =@expr1073749807 "struct A { __int64 x : 3; };" ;
4234: $if $(@expr1073749808 $!@expr1073749809 $assertEquals $(@expr1073749810 "cppcheck-2.8/test/testtokenize.cpp" $, 4234 $, "struct A { long long x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749811 "cppcheck-2.8/test/testtokenize.cpp" $, 4234 $, code9@var755 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4235:
4236: const char code10@var756 [@expr1073749813 35 ] =@expr1073749814 "struct A { unsigned char x : 3; };" ;
4237: $if $(@expr1073749815 $!@expr1073749816 $assertEquals $(@expr1073749817 "cppcheck-2.8/test/testtokenize.cpp" $, 4237 $, "struct A { unsigned char x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749818 "cppcheck-2.8/test/testtokenize.cpp" $, 4237 $, code10@var756 $) $) $) { $return ; }
4238:
4239: const char code11@var757 [@expr1073749819 36 ] =@expr1073749820 "struct A { unsigned short x : 3; };" ;
4240: $if $(@expr1073749821 $!@expr1073749822 $assertEquals $(@expr1073749823 "cppcheck-2.8/test/testtokenize.cpp" $, 4240 $, "struct A { unsigned short x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749824 "cppcheck-2.8/test/testtokenize.cpp" $, 4240 $, code11@var757 $) $) $) { $return ; }
4241:
4242: const char code12@var758 [@expr1073749825 34 ] =@expr1073749826 "struct A { unsigned int x : 3; };" ;
4243: $if $(@expr1073749827 $!@expr1073749828 $assertEquals $(@expr1073749829 "cppcheck-2.8/test/testtokenize.cpp" $, 4243 $, "struct A { unsigned int x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749830 "cppcheck-2.8/test/testtokenize.cpp" $, 4243 $, code12@var758 $) $) $) { $return ; }
4244:
4245: const char code13@var759 [@expr1073749831 35 ] =@expr1073749832 "struct A { unsigned long x : 3; };" ;
4246: $if $(@expr1073749833 $!@expr1073749834 $assertEquals $(@expr1073749835 "cppcheck-2.8/test/testtokenize.cpp" $, 4246 $, "struct A { unsigned long x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749836 "cppcheck-2.8/test/testtokenize.cpp" $, 4246 $, code13@var759 $) $) $) { $return ; }
4247:
4248: const char code14@var760 [@expr1073749837 37 ] =@expr1073749838 "struct A { unsigned __int8 x : 3; };" ;
4249: $if $(@expr1073749839 $!@expr1073749840 $assertEquals $(@expr1073749841 "cppcheck-2.8/test/testtokenize.cpp" $, 4249 $, "struct A { unsigned char x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749842 "cppcheck-2.8/test/testtokenize.cpp" $, 4249 $, code14@var760 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4250:
4251: const char code15@var761 [@expr1073749844 38 ] =@expr1073749845 "struct A { unsigned __int16 x : 3; };" ;
4252: $if $(@expr1073749846 $!@expr1073749847 $assertEquals $(@expr1073749848 "cppcheck-2.8/test/testtokenize.cpp" $, 4252 $, "struct A { unsigned short x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749849 "cppcheck-2.8/test/testtokenize.cpp" $, 4252 $, code15@var761 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4253:
4254: const char code16@var762 [@expr1073749851 38 ] =@expr1073749852 "struct A { unsigned __int32 x : 3; };" ;
4255: $if $(@expr1073749853 $!@expr1073749854 $assertEquals $(@expr1073749855 "cppcheck-2.8/test/testtokenize.cpp" $, 4255 $, "struct A { unsigned int x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749856 "cppcheck-2.8/test/testtokenize.cpp" $, 4255 $, code16@var762 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4256:
4257: const char code17@var763 [@expr1073749858 38 ] =@expr1073749859 "struct A { unsigned __int64 x : 3; };" ;
4258: $if $(@expr1073749860 $!@expr1073749861 $assertEquals $(@expr1073749862 "cppcheck-2.8/test/testtokenize.cpp" $, 4258 $, "struct A { unsigned long long x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749863 "cppcheck-2.8/test/testtokenize.cpp" $, 4258 $, code17@var763 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4259:
4260: const char code18@var764 [@expr1073749865 33 ] =@expr1073749866 "struct A { signed char x : 3; };" ;
4261: $if $(@expr1073749867 $!@expr1073749868 $assertEquals $(@expr1073749869 "cppcheck-2.8/test/testtokenize.cpp" $, 4261 $, "struct A { signed char x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749870 "cppcheck-2.8/test/testtokenize.cpp" $, 4261 $, code18@var764 $) $) $) { $return ; }
4262:
4263: const char code19@var765 [@expr1073749871 34 ] =@expr1073749872 "struct A { signed short x : 3; };" ;
4264: $if $(@expr1073749873 $!@expr1073749874 $assertEquals $(@expr1073749875 "cppcheck-2.8/test/testtokenize.cpp" $, 4264 $, "struct A { signed short x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749876 "cppcheck-2.8/test/testtokenize.cpp" $, 4264 $, code19@var765 $) $) $) { $return ; }
4265:
4266: const char code20@var766 [@expr1073749877 32 ] =@expr1073749878 "struct A { signed int x : 3; };" ;
4267: $if $(@expr1073749879 $!@expr1073749880 $assertEquals $(@expr1073749881 "cppcheck-2.8/test/testtokenize.cpp" $, 4267 $, "struct A { signed int x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749882 "cppcheck-2.8/test/testtokenize.cpp" $, 4267 $, code20@var766 $) $) $) { $return ; }
4268:
4269: const char code21@var767 [@expr1073749883 33 ] =@expr1073749884 "struct A { signed long x : 3; };" ;
4270: $if $(@expr1073749885 $!@expr1073749886 $assertEquals $(@expr1073749887 "cppcheck-2.8/test/testtokenize.cpp" $, 4270 $, "struct A { signed long x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749888 "cppcheck-2.8/test/testtokenize.cpp" $, 4270 $, code21@var767 $) $) $) { $return ; }
4271:
4272: const char code22@var768 [@expr1073749889 35 ] =@expr1073749890 "struct A { signed __int8 x : 3; };" ;
4273: $if $(@expr1073749891 $!@expr1073749892 $assertEquals $(@expr1073749893 "cppcheck-2.8/test/testtokenize.cpp" $, 4273 $, "struct A { signed char x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749894 "cppcheck-2.8/test/testtokenize.cpp" $, 4273 $, code22@var768 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4274:
4275: const char code23@var769 [@expr1073749896 36 ] =@expr1073749897 "struct A { signed __int16 x : 3; };" ;
4276: $if $(@expr1073749898 $!@expr1073749899 $assertEquals $(@expr1073749900 "cppcheck-2.8/test/testtokenize.cpp" $, 4276 $, "struct A { signed short x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749901 "cppcheck-2.8/test/testtokenize.cpp" $, 4276 $, code23@var769 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4277:
4278: const char code24@var770 [@expr1073749903 36 ] =@expr1073749904 "struct A { signed __int32 x : 3; };" ;
4279: $if $(@expr1073749905 $!@expr1073749906 $assertEquals $(@expr1073749907 "cppcheck-2.8/test/testtokenize.cpp" $, 4279 $, "struct A { signed int x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749908 "cppcheck-2.8/test/testtokenize.cpp" $, 4279 $, code24@var770 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4280:
4281: const char code25@var771 [@expr1073749910 36 ] =@expr1073749911 "struct A { signed __int64 x : 3; };" ;
4282: $if $(@expr1073749912 $!@expr1073749913 $assertEquals $(@expr1073749914 "cppcheck-2.8/test/testtokenize.cpp" $, 4282 $, "struct A { signed long long x ; } ;" $, $tokenizeAndStringifyWindows_ $(@expr1073749915 "cppcheck-2.8/test/testtokenize.cpp" $, 4282 $, code25@var771 , true , Settings ::@expr7967 Win32A@expr7930 $) $) $) { $return ; }
4283: }
4284:
4285: void bitfields2 ( ) {
4286: const char code1@var772 [@expr1073749917 33 ] =@expr1073749918 "struct A { public: int x : 3; };" ;
4287: $if $(@expr1073749919 $!@expr1073749920 $assertEquals $(@expr1073749921 "cppcheck-2.8/test/testtokenize.cpp" $, 4287 $, "struct A { public: int x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749922 "cppcheck-2.8/test/testtokenize.cpp" $, 4287 $, code1@var772 $) $) $) { $return ; }
4288:
4289: const char code2@var773 [@expr1073749923 43 ] =@expr1073749924 "struct A { public: unsigned long x : 3; };" ;
4290: $if $(@expr1073749925 $!@expr1073749926 $assertEquals $(@expr1073749927 "cppcheck-2.8/test/testtokenize.cpp" $, 4290 $, "struct A { public: unsigned long x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749928 "cppcheck-2.8/test/testtokenize.cpp" $, 4290 $, code2@var773 $) $) $) { $return ; }
4291:
4292: const char code3@var774 [@expr1073749929 36 ] =@expr1073749930 "struct A { protected: int x : 3; };" ;
4293: $if $(@expr1073749931 $!@expr1073749932 $assertEquals $(@expr1073749933 "cppcheck-2.8/test/testtokenize.cpp" $, 4293 $, "struct A { protected: int x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749934 "cppcheck-2.8/test/testtokenize.cpp" $, 4293 $, code3@var774 $) $) $) { $return ; }
4294:
4295: const char code4@var775 [@expr1073749935 46 ] =@expr1073749936 "struct A { protected: unsigned long x : 3; };" ;
4296: $if $(@expr1073749937 $!@expr1073749938 $assertEquals $(@expr1073749939 "cppcheck-2.8/test/testtokenize.cpp" $, 4296 $, "struct A { protected: unsigned long x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749940 "cppcheck-2.8/test/testtokenize.cpp" $, 4296 $, code4@var775 $) $) $) { $return ; }
4297:
4298: const char code5@var776 [@expr1073749941 34 ] =@expr1073749942 "struct A { private: int x : 3; };" ;
4299: $if $(@expr1073749943 $!@expr1073749944 $assertEquals $(@expr1073749945 "cppcheck-2.8/test/testtokenize.cpp" $, 4299 $, "struct A { private: int x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749946 "cppcheck-2.8/test/testtokenize.cpp" $, 4299 $, code5@var776 $) $) $) { $return ; }
4300:
4301: const char code6@var777 [@expr1073749947 44 ] =@expr1073749948 "struct A { private: unsigned long x : 3; };" ;
4302: $if $(@expr1073749949 $!@expr1073749950 $assertEquals $(@expr1073749951 "cppcheck-2.8/test/testtokenize.cpp" $, 4302 $, "struct A { private: unsigned long x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749952 "cppcheck-2.8/test/testtokenize.cpp" $, 4302 $, code6@var777 $) $) $) { $return ; }
4303: }
4304:
4305: void bitfields3 ( ) {
4306: const char code1@var778 [@expr1073749953 31 ] =@expr1073749954 "struct A { const int x : 3; };" ;
4307: $if $(@expr1073749955 $!@expr1073749956 $assertEquals $(@expr1073749957 "cppcheck-2.8/test/testtokenize.cpp" $, 4307 $, "struct A { const int x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749958 "cppcheck-2.8/test/testtokenize.cpp" $, 4307 $, code1@var778 $) $) $) { $return ; }
4308:
4309: const char code2@var779 [@expr1073749959 41 ] =@expr1073749960 "struct A { const unsigned long x : 3; };" ;
4310: $if $(@expr1073749961 $!@expr1073749962 $assertEquals $(@expr1073749963 "cppcheck-2.8/test/testtokenize.cpp" $, 4310 $, "struct A { const unsigned long x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749964 "cppcheck-2.8/test/testtokenize.cpp" $, 4310 $, code2@var779 $) $) $) { $return ; }
4311:
4312: const char code3@var780 [@expr1073749965 39 ] =@expr1073749966 "struct A { public: const int x : 3; };" ;
4313: $if $(@expr1073749967 $!@expr1073749968 $assertEquals $(@expr1073749969 "cppcheck-2.8/test/testtokenize.cpp" $, 4313 $, "struct A { public: const int x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749970 "cppcheck-2.8/test/testtokenize.cpp" $, 4313 $, code3@var780 $) $) $) { $return ; }
4314:
4315: const char code4@var781 [@expr1073749971 49 ] =@expr1073749972 "struct A { public: const unsigned long x : 3; };" ;
4316: $if $(@expr1073749973 $!@expr1073749974 $assertEquals $(@expr1073749975 "cppcheck-2.8/test/testtokenize.cpp" $, 4316 $, "struct A { public: const unsigned long x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749976 "cppcheck-2.8/test/testtokenize.cpp" $, 4316 $, code4@var781 $) $) $) { $return ; }
4317: }
4318:
4319: void bitfields4 ( ) {
4320: const char code1@var782 [@expr1073749977 26 ] =@expr1073749978 "struct A { CHAR x : 3; };" ;
4321: $if $(@expr1073749979 $!@expr1073749980 $assertEquals $(@expr1073749981 "cppcheck-2.8/test/testtokenize.cpp" $, 4321 $, "struct A { CHAR x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749982 "cppcheck-2.8/test/testtokenize.cpp" $, 4321 $, code1@var782 $) $) $) { $return ; }
4322:
4323: const char code2@var783 [@expr1073749983 27 ] =@expr1073749984 "struct A { UCHAR x : 3; };" ;
4324: $if $(@expr1073749985 $!@expr1073749986 $assertEquals $(@expr1073749987 "cppcheck-2.8/test/testtokenize.cpp" $, 4324 $, "struct A { UCHAR x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749988 "cppcheck-2.8/test/testtokenize.cpp" $, 4324 $, code2@var783 $) $) $) { $return ; }
4325:
4326: const char code3@var784 [@expr1073749989 26 ] =@expr1073749990 "struct A { BYTE x : 3; };" ;
4327: $if $(@expr1073749991 $!@expr1073749992 $assertEquals $(@expr1073749993 "cppcheck-2.8/test/testtokenize.cpp" $, 4327 $, "struct A { BYTE x ; } ;" $, $tokenizeAndStringify_ $(@expr1073749994 "cppcheck-2.8/test/testtokenize.cpp" $, 4327 $, code3@var784 $) $) $) { $return ; }
4328:
4329: const char code4@var785 [@expr1073749995 26 ] =@expr1073749996 "struct A { WORD x : 3; };" ;
4330: $if $(@expr1073749997 $!@expr1073749998 $assertEquals $(@expr1073749999 "cppcheck-2.8/test/testtokenize.cpp" $, 4330 $, "struct A { WORD x ; } ;" $, $tokenizeAndStringify_ $(@expr1073750000 "cppcheck-2.8/test/testtokenize.cpp" $, 4330 $, code4@var785 $) $) $) { $return ; }
4331:
4332: const char code5@var786 [@expr1073750001 27 ] =@expr1073750002 "struct A { DWORD x : 3; };" ;
4333: $if $(@expr1073750003 $!@expr1073750004 $assertEquals $(@expr1073750005 "cppcheck-2.8/test/testtokenize.cpp" $, 4333 $, "struct A { DWORD x ; } ;" $, $tokenizeAndStringify_ $(@expr1073750006 "cppcheck-2.8/test/testtokenize.cpp" $, 4333 $, code5@var786 $) $) $) { $return ; }
4334:
4335: const char code6@var787 [@expr1073750007 26 ] =@expr1073750008 "struct A { LONG x : 3; };" ;
4336: $if $(@expr1073750009 $!@expr1073750010 $assertEquals $(@expr1073750011 "cppcheck-2.8/test/testtokenize.cpp" $, 4336 $, "struct A { LONG x ; } ;" $, $tokenizeAndStringify_ $(@expr1073750012 "cppcheck-2.8/test/testtokenize.cpp" $, 4336 $, code6@var787 $) $) $) { $return ; }
4337:
4338: const char code7@var788 [@expr1073750013 27 ] =@expr1073750014 "struct A { UINT8 x : 3; };" ;
4339: $if $(@expr1073750015 $!@expr1073750016 $assertEquals $(@expr1073750017 "cppcheck-2.8/test/testtokenize.cpp" $, 4339 $, "struct A { UINT8 x ; } ;" $, $tokenizeAndStringify_ $(@expr1073750018 "cppcheck-2.8/test/testtokenize.cpp" $, 4339 $, code7@var788 $) $) $) { $return ; }
4340:
4341: const char code8@var789 [@expr1073750019 28 ] =@expr1073750020 "struct A { UINT16 x : 3; };" ;
4342: $if $(@expr1073750021 $!@expr1073750022 $assertEquals $(@expr1073750023 "cppcheck-2.8/test/testtokenize.cpp" $, 4342 $, "struct A { UINT16 x ; } ;" $, $tokenizeAndStringify_ $(@expr1073750024 "cppcheck-2.8/test/testtokenize.cpp" $, 4342 $, code8@var789 $) $) $) { $return ; }
4343:
4344: const char code9@var790 [@expr1073750025 28 ] =@expr1073750026 "struct A { UINT32 x : 3; };" ;
4345: $if $(@expr1073750027 $!@expr1073750028 $assertEquals $(@expr1073750029 "cppcheck-2.8/test/testtokenize.cpp" $, 4345 $, "struct A { UINT32 x ; } ;" $, $tokenizeAndStringify_ $(@expr1073750030 "cppcheck-2.8/test/testtokenize.cpp" $, 4345 $, code9@var790 $) $) $) { $return ; }
4346:
4347: const char code10@var791 [@expr1073750031 28 ] =@expr1073750032 "struct A { UINT64 x : 3; };" ;
4348: $if $(@expr1073750033 $!@expr1073750034 $assertEquals $(@expr1073750035 "cppcheck-2.8/test/testtokenize.cpp" $, 4348 $, "struct A { UINT64 x ; } ;" $, $tokenizeAndStringify_ $(@expr1073750036 "cppcheck-2.8/test/testtokenize.cpp" $, 4348 $, code10@var791 $) $) $) { $return ; }
4349: }
4350:
4351: void bitfields5 ( ) {
4352: const char code1@var792 [@expr1073750037 50 ] =@expr1073750038 "struct RGB { unsigned int r : 3, g : 3, b : 2; };" ;
4353: $if $(@expr1073750039 $!@expr1073750040 $assertEquals $(@expr1073750041 "cppcheck-2.8/test/testtokenize.cpp" $, 4353 $, "struct RGB { unsigned int r ; unsigned int g ; unsigned int b ; } ;" $, $tokenizeAndStringify_ $(@expr1073750042 "cppcheck-2.8/test/testtokenize.cpp" $, 4353 $, code1@var792 $) $) $) { $return ; }
4354:
4355: const char code2@var793 [@expr1073750043 45 ] =@expr1073750044 "struct A { int a : 3; int : 3; int c : 3; };" ;
4356: $if $(@expr1073750045 $!@expr1073750046 $assertEquals $(@expr1073750047 "cppcheck-2.8/test/testtokenize.cpp" $, 4356 $, "struct A { int a ; int c ; } ;" $, $tokenizeAndStringify_ $(@expr1073750048 "cppcheck-2.8/test/testtokenize.cpp" $, 4356 $, code2@var793 $) $) $) { $return ; }
4357:
4358: const char code3@var794 [@expr1073750049 46 ] =@expr1073750050 "struct A { virtual void f() {} int f1 : 1; };" ;
4359: $if $(@expr1073750051 $!@expr1073750052 $assertEquals $(@expr1073750053 "cppcheck-2.8/test/testtokenize.cpp" $, 4359 $, "struct A { virtual void f ( ) { } int f1 ; } ;" $, $tokenizeAndStringify_ $(@expr1073750054 "cppcheck-2.8/test/testtokenize.cpp" $, 4359 $, code3@var794 $) $) $) { $return ; }
4360: }
4361:
4362: void bitfields6 ( ) {
4363: const char code1@var795 [@expr1073750055 29 ] =@expr1073750056 "struct A { bool b : true; };" ;
4364: $if $(@expr1073750057 $!@expr1073750058 $assertEquals $(@expr1073750059 "cppcheck-2.8/test/testtokenize.cpp" $, 4364 $, "struct A { bool b ; } ;" $, $tokenizeAndStringify_ $(@expr1073750060 "cppcheck-2.8/test/testtokenize.cpp" $, 4364 $, code1@var795 $) $) $) { $return ; }
4365:
4366: const char code2@var796 [@expr1073750061 39 ] =@expr1073750062 "struct A { bool b : true, c : true; };" ;
4367: $if $(@expr1073750063 $!@expr1073750064 $assertEquals $(@expr1073750065 "cppcheck-2.8/test/testtokenize.cpp" $, 4367 $, "struct A { bool b ; bool c ; } ;" $, $tokenizeAndStringify_ $(@expr1073750066 "cppcheck-2.8/test/testtokenize.cpp" $, 4367 $, code2@var796 $) $) $) { $return ; }
4368:
4369: const char code3@var797 [@expr1073750067 27 ] =@expr1073750068 "struct A { bool : true; };" ;
4370: $if $(@expr1073750069 $!@expr1073750070 $assertEquals $(@expr1073750071 "cppcheck-2.8/test/testtokenize.cpp" $, 4370 $, "struct A { } ;" $, $tokenizeAndStringify_ $(@expr1073750072 "cppcheck-2.8/test/testtokenize.cpp" $, 4370 $, code3@var797 $) $) $) { $return ; }
4371: }
4372:
4373: void bitfields7 ( ) {
4374: const char code@var798 [@expr1073750073 90 ] =@expr1073750074 "typedef struct Descriptor {    unsigned element_size: 8* sizeof( unsigned );} Descriptor;"
4375:
4376: ;
4377: const char expected@var799 [@expr1073750075 52 ] =@expr1073750076 "struct Descriptor { unsigned int element_size ; } ;"
4378:
4379: ;
4380: $if $(@expr1073750077 $!@expr1073750078 $assertEquals $(@expr1073750079 "cppcheck-2.8/test/testtokenize.cpp" $, 4380 $, expected@var799 $, $tokenizeAndStringify_ $(@expr1073750080 "cppcheck-2.8/test/testtokenize.cpp" $, 4380 $, code@var798 $) $) $) { $return ; }
4381: $if $(@expr1073750081 $!@expr1073750082 $assertEquals $(@expr1073750083 "cppcheck-2.8/test/testtokenize.cpp" $, 4381 $, "" $, errout@var100 .@expr1073750084 str (@expr1073750085 ) $) $) { $return ; }
4382: }
4383:
4384: void bitfields8 ( ) {
4385: const char code@var800 [@expr1073750086 51 ] =@expr1073750087 "struct A;class B : virtual public C{    int f();};"
4386:
4387:
4388:
4389: ;
4390: const char expected@var801 [@expr1073750088 56 ] =@expr1073750089 "struct A ; class B : virtual public C { int f ( ) ; } ;"
4391:
4392:
4393:
4394: ;
4395: $if $(@expr1073750090 $!@expr1073750091 $assertEquals $(@expr1073750092 "cppcheck-2.8/test/testtokenize.cpp" $, 4395 $, expected@var801 $, $tokenizeAndStringify_ $(@expr1073750093 "cppcheck-2.8/test/testtokenize.cpp" $, 4395 $, code@var800 $) $) $) { $return ; }
4396: $if $(@expr1073750094 $!@expr1073750095 $assertEquals $(@expr1073750096 "cppcheck-2.8/test/testtokenize.cpp" $, 4396 $, "" $, errout@var100 .@expr1073750097 str (@expr1073750098 ) $) $) { $return ; }
4397: }
4398:
4399: void bitfields9 ( ) {
4400: const char code@var802 [@expr1073750099 57 ] =@expr1073750100 "void f() {\n    goto half;\nhalf:\n    {\n        ;\n    }\n};"
4401:
|
4405:
4406: ;
4407: $tokenizeAndStringify_ $(@expr1073750101 "cppcheck-2.8/test/testtokenize.cpp" $, 4407 $, code@var802 $) ;
4408: $if $(@expr1073750102 $!@expr1073750103 $assertEquals $(@expr1073750104 "cppcheck-2.8/test/testtokenize.cpp" $, 4408 $, "" $, errout@var100 .@expr1073750105 str (@expr1073750106 ) $) $) { $return ; }
4409: }
4410:
4411: void bitfields10 ( ) {
4412: const char code@var803 [@expr1073750107 22 ] =@expr1073750108 "{}MACRO default: { };"
4413:
4414:
4415: ;
4416: $if $(@expr1073750109 $!@expr1073750110 $assertEquals $(@expr1073750111 "cppcheck-2.8/test/testtokenize.cpp" $, 4416 $, "{ } MACRO default : { } ;" $, $tokenizeAndStringify_ $(@expr1073750112 "cppcheck-2.8/test/testtokenize.cpp" $, 4416 $, code@var803 $) $) $) { $return ; }
4417: }
4418:
4419: void bitfields12 ( ) {
4420: const char code@var804 [@expr1073750113 9 ] =@expr1073750114 "{a:1;};\n" ;
4421: $if $(@expr1073750115 $!@expr1073750116 $assertEquals $(@expr1073750117 "cppcheck-2.8/test/testtokenize.cpp" $, 4421 $, "{ } ;" $, $tokenizeAndStringify_ $(@expr1073750118 "cppcheck-2.8/test/testtokenize.cpp" $, 4421 $, code@var804 $) $) $) { $return ; }
4422: }
4423:
4424: void bitfields13 ( ) {
4425: $if $(@expr1073750119 $!@expr1073750120 $assertEquals $(@expr1073750121 "cppcheck-2.8/test/testtokenize.cpp" $, 4425 $, "x y ;" $, $tokenizeAndStringify_ $(@expr1073750122 "cppcheck-2.8/test/testtokenize.cpp" $, 4425 $, "struct{x y:};\n" $) $) $) { $return ; }
4426: }
4427:
4428: void bitfields14 ( ) {
4429: $if $(@expr1073750123 $!@expr1073750124 $assertEquals $(@expr1073750125 "cppcheck-2.8/test/testtokenize.cpp" $, 4429 $, "class x { protected: } ;" $, $tokenizeAndStringify_ $(@expr1073750126 "cppcheck-2.8/test/testtokenize.cpp" $, 4429 $, "class x { signals: };\n" $) $) $) { $return ; }
4430: }
4431:
4432: void bitfields15 ( ) {
4433: $if $(@expr1073750127 $!@expr1073750128 $assertEquals $(@expr1073750129 "cppcheck-2.8/test/testtokenize.cpp" $, 4433 $, "struct AB {\nenum Foo { A , B } ; enum Foo Anonymous ;\n} ;" $, $tokenizeAndStringify_ $(@expr1073750130 "cppcheck-2.8/test/testtokenize.cpp" $, 4433 $, "struct AB {\n  enum Foo {A,B} : 4;\n};" $) $) $) { $return
4434:
|
4437:
4438: ; }
4439: $if $(@expr1073750131 $!@expr1073750132 $assertEquals $(@expr1073750133 "cppcheck-2.8/test/testtokenize.cpp" $, 4439 $, "struct AB {\nenum Foo { A , B } ; enum Foo foo ;\n} ;" $, $tokenizeAndStringify_ $(@expr1073750134 "cppcheck-2.8/test/testtokenize.cpp" $, 4439 $, "struct AB {\n  enum Foo {A,B} foo : 4;\n};" $) $) $) { $return
4440:
|
4443:
4444: ; }
4445: }
4446:
4447: void bitfields16 ( ) {
4448: const char code@var805 [@expr1073750135 34 ] =@expr1073750136 "struct A { unsigned int x : 1; };" ;
4449:
4450: errout@var100 .@expr1073750137 str (@expr1073750138 "" ) ;
4451: Tokenizer tokenizer@var806 (@expr1073750139 &@expr1073750140 settings0@var102 , this@expr1073750141 ) ;
4452: std ::@expr1073750142 istringstream istr@var807 (@expr1073750143 code@var805 ) ;
4453: $if $(@expr1073750144 $!@expr1073750145 $assert_ $(@expr1073750146 "cppcheck-2.8/test/testtokenize.cpp" $, 4453 $, $(@expr1073750147 tokenizer@var806 .@expr1073750148 tokenize (@expr1073750149 istr@var807 , "test.cpp" ) $) $) $) { $return ; }
4454: const Token * x@var808 ; x@var808 =@expr1073750150 Token ::@expr1073750151 findsimplematch (@expr1073750152 tokenizer@var806 .@expr1073750153 tokens (@expr1073750154 ) , "x" ) ;
4455: $if $(@expr1073750155 $!@expr1073750156 $assertEquals $(@expr1073750157 "cppcheck-2.8/test/testtokenize.cpp" $, 4455 $, 1 $, x@var808 .@expr1073750158 bits (@expr1073750159 ) $) $) { $return ; }
4456: }
4457:
4458: void simplifyNamespaceStd ( ) {
4459: const char * code@var809 ; const char * expected@var810 ;
4460:
4461: code@var809 =@expr1073750161 "map<foo, bar> m;" ;
4462: $if $(@expr1073750162 $!@expr1073750163 $assertEquals $(@expr1073750164 "cppcheck-2.8/test/testtokenize.cpp" $, 4462 $, "map < foo , bar > m ;" $, $tokenizeAndStringify_ $(@expr1073750165 "cppcheck-2.8/test/testtokenize.cpp" $, 4462 $, code@var809 $) $) $) { $return ; }
4463:
4464: code@var809 =@expr1073750166 "using namespace std;\nmap<foo, bar> m;"
4465: ;
4466: $if $(@expr1073750167 $!@expr1073750168 $assertEquals $(@expr1073750169 "cppcheck-2.8/test/testtokenize.cpp" $, 4466 $, "std :: map < foo , bar > m ;" $, $tokenizeAndStringify_ $(@expr1073750170 "cppcheck-2.8/test/testtokenize.cpp" $, 4466 $, code@var809 $) $) $) { $return ; }
4467:
4468: code@var809 =@expr1073750171 "using namespace std;\nstring s;"
4469: ;
4470: $if $(@expr1073750172 $!@expr1073750173 $assertEquals $(@expr1073750174 "cppcheck-2.8/test/testtokenize.cpp" $, 4470 $, "std :: string s ;" $, $tokenizeAndStringify_ $(@expr1073750175 "cppcheck-2.8/test/testtokenize.cpp" $, 4470 $, code@var809 $) $) $) { $return ; }
4471:
4472: code@var809 =@expr1073750176 "using namespace std;\nvoid foo() {swap(a, b); }"
4473: ;
4474: $if $(@expr1073750177 $!@expr1073750178 $assertEquals $(@expr1073750179 "cppcheck-2.8/test/testtokenize.cpp" $, 4474 $, "void foo ( ) { std :: swap ( a , b ) ; }" $, $tokenizeAndStringify_ $(@expr1073750180 "cppcheck-2.8/test/testtokenize.cpp" $, 4474 $, code@var809 $) $) $) { $return ; }
4475:
4476: code@var809 =@expr1073750181 "using namespace std;\nvoid search() {}"
4477: ;
4478: $if $(@expr1073750182 $!@expr1073750183 $assertEquals $(@expr1073750184 "cppcheck-2.8/test/testtokenize.cpp" $, 4478 $, "void search ( ) { }" $, $tokenizeAndStringify_ $(@expr1073750185 "cppcheck-2.8/test/testtokenize.cpp" $, 4478 $, code@var809 $) $) $) { $return ; }
4479:
4480: code@var809 =@expr1073750186 "using namespace std;\nvoid search();\nvoid dostuff() { search(); }"
4481:
4482: ;
4483: $if $(@expr1073750187 $!@expr1073750188 $assertEquals $(@expr1073750189 "cppcheck-2.8/test/testtokenize.cpp" $, 4483 $, "void search ( ) ;\nvoid dostuff ( ) { search ( ) ; }" $, $tokenizeAndStringify_ $(@expr1073750190 "cppcheck-2.8/test/testtokenize.cpp" $, 4483 $, code@var809 $) $) $) { $return ; }
4484:
4485: code@var809 =@expr1073750191 "using namespace std;\nvoid foo() {map(a, b); }"
4486: ;
4487: $if $(@expr1073750192 $!@expr1073750193 $assertEquals $(@expr1073750194 "cppcheck-2.8/test/testtokenize.cpp" $, 4487 $, "void foo ( ) { map ( a , b ) ; }" $, $tokenizeAndStringify_ $(@expr1073750195 "cppcheck-2.8/test/testtokenize.cpp" $, 4487 $, code@var809 $) $) $) { $return ; }
4488:
4489: code@var809 =@expr1073750196 "using namespace std;\nstring<wchar_t> s;"
4490: ;
4491: $if $(@expr1073750197 $!@expr1073750198 $assertEquals $(@expr1073750199 "cppcheck-2.8/test/testtokenize.cpp" $, 4491 $, "string < wchar_t > s ;" $, $tokenizeAndStringify_ $(@expr1073750200 "cppcheck-2.8/test/testtokenize.cpp" $, 4491 $, code@var809 $) $) $) { $return ; }
4492:
4493: code@var809 =@expr1073750201 "using namespace std;\nswap s;"
4494: ;
4495: $if $(@expr1073750202 $!@expr1073750203 $assertEquals $(@expr1073750204 "cppcheck-2.8/test/testtokenize.cpp" $, 4495 $, "swap s ;" $, $tokenizeAndStringify_ $(@expr1073750205 "cppcheck-2.8/test/testtokenize.cpp" $, 4495 $, code@var809 $) $) $) { $return ; }
4496:
4497: code@var809 =@expr1073750206 "using namespace std;\nstd::string s;"
4498: ;
4499: $if $(@expr1073750207 $!@expr1073750208 $assertEquals $(@expr1073750209 "cppcheck-2.8/test/testtokenize.cpp" $, 4499 $, "std :: string s ;" $, $tokenizeAndStringify_ $(@expr1073750210 "cppcheck-2.8/test/testtokenize.cpp" $, 4499 $, code@var809 $) $) $) { $return ; }
4500:
4501: code@var809 =@expr1073750211 "using namespace std;\ntr1::function <void(int)> f;"
4502: ;
4503: $if $(@expr1073750212 $!@expr1073750213 $assertEquals $(@expr1073750214 "cppcheck-2.8/test/testtokenize.cpp" $, 4503 $, "tr1 :: function < void ( int ) > f ;" $, $tokenizeAndStringify_ $(@expr1073750215 "cppcheck-2.8/test/testtokenize.cpp" $, 4503 $, code@var809 , true , Settings ::@expr8392 Native@expr8336 , "test.cpp" , false $) $) $) { $return ; }
4504: $if $(@expr1073750217 $!@expr1073750218 $assertEquals $(@expr1073750219 "cppcheck-2.8/test/testtokenize.cpp" $, 4504 $, "std :: function < void ( int ) > f ;" $, $tokenizeAndStringify_ $(@expr1073750220 "cppcheck-2.8/test/testtokenize.cpp" $, 4504 $, code@var809 , true , Settings ::@expr8392 Native@expr8336 , "test.cpp" , true $) $) $) { $return ; }
4505:
4506: code@var809 =@expr1073750222 "std::tr1::function <void(int)> f;" ;
4507: $if $(@expr1073750223 $!@expr1073750224 $assertEquals $(@expr1073750225 "cppcheck-2.8/test/testtokenize.cpp" $, 4507 $, "std :: tr1 :: function < void ( int ) > f ;" $, $tokenizeAndStringify_ $(@expr1073750226 "cppcheck-2.8/test/testtokenize.cpp" $, 4507 $, code@var809 , true , Settings ::@expr8392 Native@expr8336 , "test.cpp" , false $) $) $) { $return ; }
4508: $if $(@expr1073750228 $!@expr1073750229 $assertEquals $(@expr1073750230 "cppcheck-2.8/test/testtokenize.cpp" $, 4508 $, "std :: function < void ( int ) > f ;" $, $tokenizeAndStringify_ $(@expr1073750231 "cppcheck-2.8/test/testtokenize.cpp" $, 4508 $, code@var809 , true , Settings ::@expr8392 Native@expr8336 , "test.cpp" , true $) $) $) { $return ; }
4509:
4510:
4511: code@var809 =@expr1073750233 "using namespace std;\nconst char * string = \"Hi\";"
4512: ;
4513: $if $(@expr1073750234 $!@expr1073750235 $assertEquals $(@expr1073750236 "cppcheck-2.8/test/testtokenize.cpp" $, 4513 $, "const char * string ; string = \"Hi\" ;" $, $tokenizeAndStringify_ $(@expr1073750237 "cppcheck-2.8/test/testtokenize.cpp" $, 4513 $, code@var809 $) $) $) { $return ; }
4514:
4515: code@var809 =@expr1073750238 "using namespace std;\nstring f(const char * string) {\n    cout << string << endl;\n    return string;\n}"
4516:
4517:
4518:
4519: ;
4520: expected@var810 =@expr1073750239 "std :: string f ( const char * string ) {\nstd :: cout << string << std :: endl ;\nreturn string ;\n}"
4521:
4522:
4523: ;
4524: $if $(@expr1073750240 $!@expr1073750241 $assertEquals $(@expr1073750242 "cppcheck-2.8/test/testtokenize.cpp" $, 4524 $, expected@var810 $, $tokenizeAndStringify_ $(@expr1073750243 "cppcheck-2.8/test/testtokenize.cpp" $, 4524 $, code@var809 $) $) $) { $return ; }
4525:
4526: code@var809 =@expr1073750244 "using namespace std;\nvoid f() {\n  try { }\n  catch(std::exception &exception) { }\n}"
4527:
4528:
4529:
4530: ;
4531: expected@var810 =@expr1073750245 "void f ( ) {\ntry { }\ncatch ( std :: exception & exception ) { }\n}"
4532:
4533:
4534: ;
4535: $if $(@expr1073750246 $!@expr1073750247 $assertEquals $(@expr1073750248 "cppcheck-2.8/test/testtokenize.cpp" $, 4535 $, expected@var810 $, $tokenizeAndStringify_ $(@expr1073750249 "cppcheck-2.8/test/testtokenize.cpp" $, 4535 $, code@var809 $) $) $) { $return ; }
4536:
4537:
4538: code@var809 =@expr1073750250 "using namespace std;\nclass C {\n    void search() {}\n    void search() const {}\n    void search() THROW_MACRO {}\n};"
4539:
|
4542:
4543: ;
4544: expected@var810 =@expr1073750251 "class C {\nvoid search ( ) { }\nvoid search ( ) const { }\nvoid search ( ) { }\n} ;"
4545:
4546:
4547:
4548: ;
4549: $if $(@expr1073750252 $!@expr1073750253 $assertEquals $(@expr1073750254 "cppcheck-2.8/test/testtokenize.cpp" $, 4549 $, expected@var810 $, $tokenizeAndStringify_ $(@expr1073750255 "cppcheck-2.8/test/testtokenize.cpp" $, 4549 $, code@var809 $) $) $) { $return ; }
4550:
4551:
4552: $if $(@expr1073750256 $!@expr1073750257 $assertEquals $(@expr1073750258 "cppcheck-2.8/test/testtokenize.cpp" $, 4552 $, "enum Anonymous0 { string } ;" $, $tokenizeAndStringify_ $(@expr1073750259 "cppcheck-2.8/test/testtokenize.cpp" $, 4552 $, "using namespace std; enum { string };" $) $) $) { $return
4553:
4554: ; }
4555: $if $(@expr1073750260 $!@expr1073750261 $assertEquals $(@expr1073750262 "cppcheck-2.8/test/testtokenize.cpp" $, 4555 $, "enum Type { string } ;" $, $tokenizeAndStringify_ $(@expr1073750263 "cppcheck-2.8/test/testtokenize.cpp" $, 4555 $, "using namespace std; enum Type { string } ;" $) $) $) { $return
4556:
4557: ; }
4558: $if $(@expr1073750264 $!@expr1073750265 $assertEquals $(@expr1073750266 "cppcheck-2.8/test/testtokenize.cpp" $, 4558 $, "enum class Type { string } ;" $, $tokenizeAndStringify_ $(@expr1073750267 "cppcheck-2.8/test/testtokenize.cpp" $, 4558 $, "using namespace std; enum class Type { string } ;" $) $) $) { $return
4559:
4560: ; }
4561: $if $(@expr1073750268 $!@expr1073750269 $assertEquals $(@expr1073750270 "cppcheck-2.8/test/testtokenize.cpp" $, 4561 $, "enum struct Type { string } ;" $, $tokenizeAndStringify_ $(@expr1073750271 "cppcheck-2.8/test/testtokenize.cpp" $, 4561 $, "using namespace std; enum struct Type { string } ;" $) $) $) { $return
4562:
4563: ; }
4564: $if $(@expr1073750272 $!@expr1073750273 $assertEquals $(@expr1073750274 "cppcheck-2.8/test/testtokenize.cpp" $, 4564 $, "enum struct Type : int { f = 0 , string } ;" $, $tokenizeAndStringify_ $(@expr1073750275 "cppcheck-2.8/test/testtokenize.cpp" $, 4564 $, "using namespace std; enum struct Type : int { f = 0 , string } ;" $) $) $) { $return
4565:
4566: ; }
4567: $if $(@expr1073750276 $!@expr1073750277 $assertEquals $(@expr1073750278 "cppcheck-2.8/test/testtokenize.cpp" $, 4567 $, "enum Type { a , b } ; void foo ( enum Type , std :: string ) { }" $, $tokenizeAndStringify_ $(@expr1073750279 "cppcheck-2.8/test/testtokenize.cpp" $, 4567 $, "using namespace std; enum Type { a , b } ; void foo ( enum Type , string) {}" $) $) $) { $return
4568:
4569: ; }
4570: $if $(@expr1073750280 $!@expr1073750281 $assertEquals $(@expr1073750282 "cppcheck-2.8/test/testtokenize.cpp" $, 4570 $, "struct T { } ; enum struct Type : int { f = 0 , string } ;" $, $tokenizeAndStringify_ $(@expr1073750283 "cppcheck-2.8/test/testtokenize.cpp" $, 4570 $, "using namespace std; struct T { typedef int type; } ; enum struct Type : T :: type { f = 0 , string } ;" $) $) $) { $return
4571:
4572:
4573: ; }
4574:
4575: $if $(@expr1073750284 $!@expr1073750285 $assertEquals $(@expr1073750286 "cppcheck-2.8/test/testtokenize.cpp" $, 4575 $, "enum E : int ; void foo ( ) { std :: string s ; }" $, $tokenizeAndStringify_ $(@expr1073750287 "cppcheck-2.8/test/testtokenize.cpp" $, 4575 $, "using namespace std; enum E : int ; void foo ( ) { string s ; }" $) $) $) { $return
4576: ; }
4577:
4578: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073750288 "cppcheck-2.8/test/testtokenize.cpp" $, 4578 $, "NS_BEGIN(IMAGEIO_2D_DICOM) using namespace std; NS_END" $) $; $} $catch $(@expr1073750289 $... $) ${ $assertNoThrowFail $(@expr1073750290 "cppcheck-2.8/test/testtokenize.cpp" $, 4578 $) $; $} $} $while $(@expr1073750291 $false $) ;
4579: }
4580:
4581: void microsoftMemory ( ) {
4582: const char code1a@var811 [@expr1073750293 62 ] =@expr1073750294 "void foo() { int a[10], b[10]; CopyMemory(a, b, sizeof(a)); }" ;
4583: $if $(@expr1073750295 $!@expr1073750296 $assertEquals $(@expr1073750297 "cppcheck-2.8/test/testtokenize.cpp" $, 4583 $, "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcpy ( a , b , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750298 "cppcheck-2.8/test/testtokenize.cpp" $, 4583 $, code1a@var811 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4584:
4585: const char code1b@var812 [@expr1073750300 65 ] =@expr1073750301 "void foo() { int a[10], b[10]; RtlCopyMemory(a, b, sizeof(a)); }" ;
4586: $if $(@expr1073750302 $!@expr1073750303 $assertEquals $(@expr1073750304 "cppcheck-2.8/test/testtokenize.cpp" $, 4586 $, "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcpy ( a , b , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750305 "cppcheck-2.8/test/testtokenize.cpp" $, 4586 $, code1b@var812 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4587:
4588: const char code1c@var813 [@expr1073750307 64 ] =@expr1073750308 "void foo() { int a[10], b[10]; RtlCopyBytes(a, b, sizeof(a)); }" ;
4589: $if $(@expr1073750309 $!@expr1073750310 $assertEquals $(@expr1073750311 "cppcheck-2.8/test/testtokenize.cpp" $, 4589 $, "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcpy ( a , b , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750312 "cppcheck-2.8/test/testtokenize.cpp" $, 4589 $, code1c@var813 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4590:
4591: const char code2a@var814 [@expr1073750314 57 ] =@expr1073750315 "void foo() { int a[10]; FillMemory(a, sizeof(a), 255); }" ;
4592: $if $(@expr1073750316 $!@expr1073750317 $assertEquals $(@expr1073750318 "cppcheck-2.8/test/testtokenize.cpp" $, 4592 $, "void foo ( ) { int a [ 10 ] ; memset ( a , 255 , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750319 "cppcheck-2.8/test/testtokenize.cpp" $, 4592 $, code2a@var814 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4593: const char code2b@var815 [@expr1073750321 60 ] =@expr1073750322 "void foo() { int a[10]; RtlFillMemory(a, sizeof(a), 255); }" ;
4594: $if $(@expr1073750323 $!@expr1073750324 $assertEquals $(@expr1073750325 "cppcheck-2.8/test/testtokenize.cpp" $, 4594 $, "void foo ( ) { int a [ 10 ] ; memset ( a , 255 , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750326 "cppcheck-2.8/test/testtokenize.cpp" $, 4594 $, code2b@var815 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4595: const char code2c@var816 [@expr1073750328 59 ] =@expr1073750329 "void foo() { int a[10]; RtlFillBytes(a, sizeof(a), 255); }" ;
4596: $if $(@expr1073750330 $!@expr1073750331 $assertEquals $(@expr1073750332 "cppcheck-2.8/test/testtokenize.cpp" $, 4596 $, "void foo ( ) { int a [ 10 ] ; memset ( a , 255 , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750333 "cppcheck-2.8/test/testtokenize.cpp" $, 4596 $, code2c@var816 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4597:
4598: const char code3a@var817 [@expr1073750335 62 ] =@expr1073750336 "void foo() { int a[10], b[10]; MoveMemory(a, b, sizeof(a)); }" ;
4599: $if $(@expr1073750337 $!@expr1073750338 $assertEquals $(@expr1073750339 "cppcheck-2.8/test/testtokenize.cpp" $, 4599 $, "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memmove ( a , b , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750340 "cppcheck-2.8/test/testtokenize.cpp" $, 4599 $, code3a@var817 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4600: const char code3b@var818 [@expr1073750342 65 ] =@expr1073750343 "void foo() { int a[10], b[10]; RtlMoveMemory(a, b, sizeof(a)); }" ;
4601: $if $(@expr1073750344 $!@expr1073750345 $assertEquals $(@expr1073750346 "cppcheck-2.8/test/testtokenize.cpp" $, 4601 $, "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memmove ( a , b , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750347 "cppcheck-2.8/test/testtokenize.cpp" $, 4601 $, code3b@var818 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4602:
4603: const char code4a@var819 [@expr1073750349 52 ] =@expr1073750350 "void foo() { int a[10]; ZeroMemory(a, sizeof(a)); }" ;
4604: $if $(@expr1073750351 $!@expr1073750352 $assertEquals $(@expr1073750353 "cppcheck-2.8/test/testtokenize.cpp" $, 4604 $, "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750354 "cppcheck-2.8/test/testtokenize.cpp" $, 4604 $, code4a@var819 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4605: const char code4b@var820 [@expr1073750356 55 ] =@expr1073750357 "void foo() { int a[10]; RtlZeroMemory(a, sizeof(a)); }" ;
4606: $if $(@expr1073750358 $!@expr1073750359 $assertEquals $(@expr1073750360 "cppcheck-2.8/test/testtokenize.cpp" $, 4606 $, "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750361 "cppcheck-2.8/test/testtokenize.cpp" $, 4606 $, code4b@var820 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4607: const char code4c@var821 [@expr1073750363 54 ] =@expr1073750364 "void foo() { int a[10]; RtlZeroBytes(a, sizeof(a)); }" ;
4608: $if $(@expr1073750365 $!@expr1073750366 $assertEquals $(@expr1073750367 "cppcheck-2.8/test/testtokenize.cpp" $, 4608 $, "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750368 "cppcheck-2.8/test/testtokenize.cpp" $, 4608 $, code4c@var821 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4609: const char code4d@var822 [@expr1073750370 61 ] =@expr1073750371 "void foo() { int a[10]; RtlSecureZeroMemory(a, sizeof(a)); }" ;
4610: $if $(@expr1073750372 $!@expr1073750373 $assertEquals $(@expr1073750374 "cppcheck-2.8/test/testtokenize.cpp" $, 4610 $, "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750375 "cppcheck-2.8/test/testtokenize.cpp" $, 4610 $, code4d@var822 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4611:
4612: const char code5@var823 [@expr1073750377 68 ] =@expr1073750378 "void foo() { int a[10], b[10]; RtlCompareMemory(a, b, sizeof(a)); }" ;
4613: $if $(@expr1073750379 $!@expr1073750380 $assertEquals $(@expr1073750381 "cppcheck-2.8/test/testtokenize.cpp" $, 4613 $, "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcmp ( a , b , sizeof ( a ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750382 "cppcheck-2.8/test/testtokenize.cpp" $, 4613 $, code5@var823 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4614:
4615: const char code6@var824 [@expr1073750384 57 ] =@expr1073750385 "void foo() { ZeroMemory(f(1, g(a, b)), h(i, j(0, 1))); }" ;
4616: $if $(@expr1073750386 $!@expr1073750387 $assertEquals $(@expr1073750388 "cppcheck-2.8/test/testtokenize.cpp" $, 4616 $, "void foo ( ) { memset ( f ( 1 , g ( a , b ) ) , 0 , h ( i , j ( 0 , 1 ) ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750389 "cppcheck-2.8/test/testtokenize.cpp" $, 4616 $, code6@var824 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4617:
4618: const char code7@var825 [@expr1073750391 62 ] =@expr1073750392 "void foo() { FillMemory(f(1, g(a, b)), h(i, j(0, 1)), 255); }" ;
4619: $if $(@expr1073750393 $!@expr1073750394 $assertEquals $(@expr1073750395 "cppcheck-2.8/test/testtokenize.cpp" $, 4619 $, "void foo ( ) { memset ( f ( 1 , g ( a , b ) ) , 255 , h ( i , j ( 0 , 1 ) ) ) ; }" $, $tokenizeAndStringify_ $(@expr1073750396 "cppcheck-2.8/test/testtokenize.cpp" $, 4619 $, code7@var825 , true , Settings ::@expr8475 Win32A@expr8468 $) $) $) { $return ; }
4620: }
4621:
4622: void microsoftString ( ) {
4623: const char code1a@var826 [@expr1073750401 46 ] =@expr1073750402 "void foo() { _tprintf (_T(\"test\") _T(\"1\")); }" ;
4624: $if $(@expr1073750403 $!@expr1073750404 $assertEquals $(@expr1073750405 "cppcheck-2.8/test/testtokenize.cpp" $, 4624 $, "void foo ( ) { printf ( \"test1\" ) ; }" $, $tokenizeAndStringify_ $(@expr1073750406 "cppcheck-2.8/test/testtokenize.cpp" $, 4624 $, code1a@var826 , true , Settings ::@expr8583 Win32A@expr8574 $) $) $) { $return ; }
4625: const char code1b@var827 [@expr1073750408 52 ] =@expr1073750409 "void foo() { _tprintf (_TEXT(\"test\") _TEXT(\"2\")); }" ;
4626: $if $(@expr1073750410 $!@expr1073750411 $assertEquals $(@expr1073750412 "cppcheck-2.8/test/testtokenize.cpp" $, 4626 $, "void foo ( ) { printf ( \"test2\" ) ; }" $, $tokenizeAndStringify_ $(@expr1073750413 "cppcheck-2.8/test/testtokenize.cpp" $, 4626 $, code1b@var827 , true , Settings ::@expr8583 Win32A@expr8574 $) $) $) { $return ; }
4627: const char code1c@var828 [@expr1073750415 50 ] =@expr1073750416 "void foo() { _tprintf (TEXT(\"test\") TEXT(\"3\")); }" ;
4628: $if $(@expr1073750417 $!@expr1073750418 $assertEquals $(@expr1073750419 "cppcheck-2.8/test/testtokenize.cpp" $, 4628 $, "void foo ( ) { printf ( \"test3\" ) ; }" $, $tokenizeAndStringify_ $(@expr1073750420 "cppcheck-2.8/test/testtokenize.cpp" $, 4628 $, code1c@var828 , true , Settings ::@expr8583 Win32A@expr8574 $) $) $) { $return ; }
4629:
4630: const char code2a@var829 [@expr1073750422 46 ] =@expr1073750423 "void foo() { _tprintf (_T(\"test\") _T(\"1\")); }" ;
4631: $if $(@expr1073750424 $!@expr1073750425 $assertEquals $(@expr1073750426 "cppcheck-2.8/test/testtokenize.cpp" $, 4631 $, "void foo ( ) { wprintf ( L\"test1\" ) ; }" $, $tokenizeAndStringify_ $(@expr1073750427 "cppcheck-2.8/test/testtokenize.cpp" $, 4631 $, code2a@var829 , true , Settings ::@expr8604 Win32W@expr8575 $) $) $) { $return ; }
4632: $if $(@expr1073750429 $!@expr1073750430 $assertEquals $(@expr1073750431 "cppcheck-2.8/test/testtokenize.cpp" $, 4632 $, "void foo ( ) { wprintf ( L\"test1\" ) ; }" $, $tokenizeAndStringify_ $(@expr1073750432 "cppcheck-2.8/test/testtokenize.cpp" $, 4632 $, code2a@var829 , true , Settings ::@expr8609 Win64@expr8576 $) $) $) { $return ; }
4633: const char code2b@var830 [@expr1073750434 52 ] =@expr1073750435 "void foo() { _tprintf (_TEXT(\"test\") _TEXT(\"2\")); }" ;
4634: $if $(@expr1073750436 $!@expr1073750437 $assertEquals $(@expr1073750438 "cppcheck-2.8/test/testtokenize.cpp" $, 4634 $, "void foo ( ) { wprintf ( L\"test2\" ) ; }" $, $tokenizeAndStringify_ $(@expr1073750439 "cppcheck-2.8/test/testtokenize.cpp" $, 4634 $, code2b@var830 , true , Settings ::@expr8604 Win32W@expr8575 $) $) $) { $return ; }
4635: $if $(@expr1073750441 $!@expr1073750442 $assertEquals $(@expr1073750443 "cppcheck-2.8/test/testtokenize.cpp" $, 4635 $, "void foo ( ) { wprintf ( L\"test2\" ) ; }" $, $tokenizeAndStringify_ $(@expr1073750444 "cppcheck-2.8/test/testtokenize.cpp" $, 4635 $, code2b@var830 , true , Settings ::@expr8609 Win64@expr8576 $) $) $) { $return ; }
4636: const char code2c@var831 [@expr1073750446 50 ] =@expr1073750447 "void foo() { _tprintf (TEXT(\"test\") TEXT(\"3\")); }" ;
4637: $if $(@expr1073750448 $!@expr1073750449 $assertEquals $(@expr1073750450 "cppcheck-2.8/test/testtokenize.cpp" $, 4637 $, "void foo ( ) { wprintf ( L\"test3\" ) ; }" $, $tokenizeAndStringify_ $(@expr1073750451 "cppcheck-2.8/test/testtokenize.cpp" $, 4637 $, code2c@var831 , true , Settings ::@expr8604 Win32W@expr8575 $) $) $) { $return ; }
4638: $if $(@expr1073750453 $!@expr1073750454 $assertEquals $(@expr1073750455 "cppcheck-2.8/test/testtokenize.cpp" $, 4638 $, "void foo ( ) { wprintf ( L\"test3\" ) ; }" $, $tokenizeAndStringify_ $(@expr1073750456 "cppcheck-2.8/test/testtokenize.cpp" $, 4638 $, code2c@var831 , true , Settings ::@expr8609 Win64@expr8576 $) $) $) { $return ; }
4639: }
4640:
4641: void borland ( ) {
4642:
4643: $if $(@expr1073750459 $!@expr1073750460 $assertEquals $(@expr1073750461 "cppcheck-2.8/test/testtokenize.cpp" $, 4643 $, "int ( * a ) ( ) ;" $, $tokenizeAndStringify_ $(@expr1073750462 "cppcheck-2.8/test/testtokenize.cpp" $, 4643 $, "int (__closure *a)();" , true , Settings ::@expr8639 Win32A@expr8634 $) $) $) { $return
4644: ; }
4645:
4646:
4647: $if $(@expr1073750464 $!@expr1073750465 $assertEquals $(@expr1073750466 "cppcheck-2.8/test/testtokenize.cpp" $, 4647 $, "class Fred { ; __property ; } ;" $, $tokenizeAndStringify_ $(@expr1073750467 "cppcheck-2.8/test/testtokenize.cpp" $, 4647 $, "class Fred { __property int x = { } };" , true , Settings ::@expr8639 Win32A@expr8634 $) $) $) { $return
4648: ; }
4649: }
4650:
4651: void simplifyQtSignalsSlots1 ( ) {
4652: const char code1@var832 [@expr1073750469 377 ] =@expr1073750470 "class Counter : public QObject {     Q_OBJECT public:     Counter() { m_value = 0; }     int value() const { return m_value; } public slots:     void setValue(int value); signals:     void valueChanged(int newValue); private:     int m_value; }; void Counter::setValue(int value) {     if (value != m_value) {         m_value = value;         emit valueChanged(value);     } }"
4653:
|
4670:
4671: ;
4672:
4673: const char result1@var833 [@expr1073750471 339 ] =@expr1073750472 "class Counter : public QObject { public: Counter ( ) { m_value = 0 ; } int value ( ) const { return m_value ; } public: void setValue ( int value ) ; protected: void valueChanged ( int newValue ) ; private: int m_value ; } ; void Counter :: setValue ( int value ) { if ( value != m_value ) { m_value = value ; valueChanged ( value ) ; } }"
4674:
|
4690:
4691: ;
4692:
4693: $if $(@expr1073750473 $!@expr1073750474 $assertEquals $(@expr1073750475 "cppcheck-2.8/test/testtokenize.cpp" $, 4693 $, result1@var833 $, $tokenizeAndStringify_ $(@expr1073750476 "cppcheck-2.8/test/testtokenize.cpp" $, 4693 $, code1@var832 $) $) $) { $return ; }
4694:
4695: const char code2@var834 [@expr1073750477 380 ] =@expr1073750478 "class Counter : public QObject {     Q_OBJECT public:     Counter() { m_value = 0; }     int value() const { return m_value; } public Q_SLOTS:     void setValue(int value); Q_SIGNALS:     void valueChanged(int newValue); private:     int m_value; };void Counter::setValue(int value) {     if (value != m_value) {         m_value = value;         emit valueChanged(value);     } }"
4696:
|
4713:
4714: ;
4715:
4716: const char result2@var835 [@expr1073750479 339 ] =@expr1073750480 "class Counter : public QObject { public: Counter ( ) { m_value = 0 ; } int value ( ) const { return m_value ; } public: void setValue ( int value ) ; protected: void valueChanged ( int newValue ) ; private: int m_value ; } ; void Counter :: setValue ( int value ) { if ( value != m_value ) { m_value = value ; valueChanged ( value ) ; } }"
4717:
|
4733:
4734: ;
4735:
4736: $if $(@expr1073750481 $!@expr1073750482 $assertEquals $(@expr1073750483 "cppcheck-2.8/test/testtokenize.cpp" $, 4736 $, result2@var835 $, $tokenizeAndStringify_ $(@expr1073750484 "cppcheck-2.8/test/testtokenize.cpp" $, 4736 $, code2@var834 $) $) $) { $return ; }
4737:
4738: const char code3@var836 [@expr1073750485 122 ] =@expr1073750486 "class MyObject : public QObject {    MyObject() {}    ~MyObject() {}    public slots:    signals:        void test() {}};"
4739:
|
4743:
4744: ;
4745: const char result3@var837 [@expr1073750487 111 ] =@expr1073750488 "class MyObject : public QObject { MyObject ( ) { } ~ MyObject ( ) { } public: protected: void test ( ) { } } ;"
4746:
|
4750:
4751: ;
4752:
4753: $if $(@expr1073750489 $!@expr1073750490 $assertEquals $(@expr1073750491 "cppcheck-2.8/test/testtokenize.cpp" $, 4753 $, result3@var837 $, $tokenizeAndStringify_ $(@expr1073750492 "cppcheck-2.8/test/testtokenize.cpp" $, 4753 $, code3@var836 $) $) $) { $return ; }
4754: $if $(@expr1073750493 $!@expr1073750494 $assertEquals $(@expr1073750495 "cppcheck-2.8/test/testtokenize.cpp" $, 4754 $, "" $, errout@var100 .@expr1073750496 str (@expr1073750497 ) $) $) { $return ; }
4755:
4756: const char code4@var838 [@expr1073750498 62 ] =@expr1073750499 "class MyObject : public QObject {    Q_OBJECT public slots:};"
4757:
4758:
4759: ;
4760: const char result4@var839 [@expr1073750500 46 ] =@expr1073750501 "class MyObject : public QObject { public: } ;"
4761:
4762: ;
4763:
4764: $if $(@expr1073750502 $!@expr1073750503 $assertEquals $(@expr1073750504 "cppcheck-2.8/test/testtokenize.cpp" $, 4764 $, result4@var839 $, $tokenizeAndStringify_ $(@expr1073750505 "cppcheck-2.8/test/testtokenize.cpp" $, 4764 $, code4@var838 $) $) $) { $return ; }
4765: }
4766:
4767: void simplifyQtSignalsSlots2 ( ) {
4768: const char code1@var840 [@expr1073750506 51 ] =@expr1073750507 "class Foo::Bar: public QObject { private slots: };" ;
4769: const char result1@var841 [@expr1073750508 49 ] =@expr1073750509 "class Foo :: Bar : public QObject { private: } ;" ;
4770: $if $(@expr1073750510 $!@expr1073750511 $assertEquals $(@expr1073750512 "cppcheck-2.8/test/testtokenize.cpp" $, 4770 $, result1@var841 $, $tokenizeAndStringify_ $(@expr1073750513 "cppcheck-2.8/test/testtokenize.cpp" $, 4770 $, code1@var840 $) $) $) { $return ; }
4771: }
4772:
4773: void simplifySQL ( ) {
4774:
4775:
4776: $if $(@expr1073750514 $!@expr1073750515 $assertEquals $(@expr1073750516 "cppcheck-2.8/test/testtokenize.cpp" $, 4776 $, "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL SELECT A FROM B\"\" ) ;" $, $tokenizeAndStringify_ $(@expr1073750517 "cppcheck-2.8/test/testtokenize.cpp" $, 4776 $, "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL SELECT A FROM B;" $) $) $) { $return ; }
4777: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073750518 "cppcheck-2.8/test/testtokenize.cpp" $, 4777 $, "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL" $) $; $assertThrowFail $(@expr1073750519 "cppcheck-2.8/test/testtokenize.cpp" $, 4777 $) $; $} $catch $(@expr1073750520 $const InternalError $&@expr1073750521 $) ${ $} $catch $(@expr1073750522 $... $) ${ $assertThrowFail $(@expr1073750523 "cppcheck-2.8/test/testtokenize.cpp" $, 4777 $) $; $} $} $while $(@expr1073750524 $false $) ;
4778:
4779: $if $(@expr1073750525 $!@expr1073750526 $assertEquals $(@expr1073750527 "cppcheck-2.8/test/testtokenize.cpp" $, 4779 $, "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1 ( A ) ; END ; END - __CPPCHECK_EMBEDDED_SQL_EXEC__\"\" ) ; asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT\"\" ) ;" $, $tokenizeAndStringify_ $(@expr1073750528 "cppcheck-2.8/test/testtokenize.cpp" $, 4779 $, "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1(A); END; END-__CPPCHECK_EMBEDDED_SQL_EXEC__; __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT;" $) $) $) { $return
4780: ; }
4781: $if $(@expr1073750529 $!@expr1073750530 $assertEquals $(@expr1073750531 "cppcheck-2.8/test/testtokenize.cpp" $, 4781 $, "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL UPDATE A SET B = C\"\" ) ; asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT\"\" ) ;" $, $tokenizeAndStringify_ $(@expr1073750532 "cppcheck-2.8/test/testtokenize.cpp" $, 4781 $, "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL UPDATE A SET B = C; __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT;" $) $) $) { $return
4782: ; }
4783: $if $(@expr1073750533 $!@expr1073750534 $assertEquals $(@expr1073750535 "cppcheck-2.8/test/testtokenize.cpp" $, 4783 $, "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT\"\" ) ; asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1 ( A ) ; END ; END - __CPPCHECK_EMBEDDED_SQL_EXEC__\"\" ) ;" $, $tokenizeAndStringify_ $(@expr1073750536 "cppcheck-2.8/test/testtokenize.cpp" $, 4783 $, "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT; __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1(A); END; END-__CPPCHECK_EMBEDDED_SQL_EXEC__;" $) $) $) { $return
4784: ; }
4785:
4786: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073750537 "cppcheck-2.8/test/testtokenize.cpp" $, 4786 $, "int f(){ __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL } int a;" $) $; $assertThrowFail $(@expr1073750538 "cppcheck-2.8/test/testtokenize.cpp" $, 4786 $) $; $} $catch $(@expr1073750539 $const InternalError $&@expr1073750540 $) ${ $} $catch $(@expr1073750541 $... $) ${ $assertThrowFail $(@expr1073750542 "cppcheck-2.8/test/testtokenize.cpp" $, 4786 $) $; $} $} $while $(@expr1073750543 $false $) ;
4787: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073750544 "cppcheck-2.8/test/testtokenize.cpp" $, 4787 $, "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL int f(){" $) $; $assertThrowFail $(@expr1073750545 "cppcheck-2.8/test/testtokenize.cpp" $, 4787 $) $; $} $catch $(@expr1073750546 $const InternalError $&@expr1073750547 $) ${ $} $catch $(@expr1073750548 $... $) ${ $assertThrowFail $(@expr1073750549 "cppcheck-2.8/test/testtokenize.cpp" $, 4787 $) $; $} $} $while $(@expr1073750550 $false $) ;
4788: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073750551 "cppcheck-2.8/test/testtokenize.cpp" $, 4788 $, "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL END-__CPPCHECK_EMBEDDED_SQL_EXEC__ int a;" $) $; $assertThrowFail $(@expr1073750552 "cppcheck-2.8/test/testtokenize.cpp" $, 4788 $) $; $} $catch $(@expr1073750553 $const InternalError $&@expr1073750554 $) ${ $} $catch $(@expr1073750555 $... $) ${ $assertThrowFail $(@expr1073750556 "cppcheck-2.8/test/testtokenize.cpp" $, 4788 $) $; $} $} $while $(@expr1073750557 $false $) ;
4789: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073750558 "cppcheck-2.8/test/testtokenize.cpp" $, 4789 $, "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL UPDATE A SET B = :&b->b1, C = :c::c1;" $) $; $} $catch $(@expr1073750559 $... $) ${ $assertNoThrowFail $(@expr1073750560 "cppcheck-2.8/test/testtokenize.cpp" $, 4789 $) $; $} $} $while $(@expr1073750561 $false $) ;
4790: }
4791:
4792: void simplifyCAlternativeTokens ( ) {
4793: $if $(@expr1073750563 $!@expr1073750564 $assertEquals $(@expr1073750565 "cppcheck-2.8/test/testtokenize.cpp" $, 4793 $, "void or ( ) ;" $, $tokenizeAndStringify_ $(@expr1073750566 "cppcheck-2.8/test/testtokenize.cpp" $, 4793 $, "void or(void);" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4794: $if $(@expr1073750568 $!@expr1073750569 $assertEquals $(@expr1073750570 "cppcheck-2.8/test/testtokenize.cpp" $, 4794 $, "void f ( ) { if ( a && b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750571 "cppcheck-2.8/test/testtokenize.cpp" $, 4794 $, "void f() { if (a and b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4795: $if $(@expr1073750573 $!@expr1073750574 $assertEquals $(@expr1073750575 "cppcheck-2.8/test/testtokenize.cpp" $, 4795 $, "void f ( ) { if ( a && b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750576 "cppcheck-2.8/test/testtokenize.cpp" $, 4795 $, "void f() { if (a and b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4796: $if $(@expr1073750578 $!@expr1073750579 $assertEquals $(@expr1073750580 "cppcheck-2.8/test/testtokenize.cpp" $, 4796 $, "void f ( ) { if ( a || b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750581 "cppcheck-2.8/test/testtokenize.cpp" $, 4796 $, "void f() { if (a or b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4797: $if $(@expr1073750583 $!@expr1073750584 $assertEquals $(@expr1073750585 "cppcheck-2.8/test/testtokenize.cpp" $, 4797 $, "void f ( ) { if ( a || b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750586 "cppcheck-2.8/test/testtokenize.cpp" $, 4797 $, "void f() { if (a or b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4798: $if $(@expr1073750588 $!@expr1073750589 $assertEquals $(@expr1073750590 "cppcheck-2.8/test/testtokenize.cpp" $, 4798 $, "void f ( ) { if ( a & b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750591 "cppcheck-2.8/test/testtokenize.cpp" $, 4798 $, "void f() { if (a bitand b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4799: $if $(@expr1073750593 $!@expr1073750594 $assertEquals $(@expr1073750595 "cppcheck-2.8/test/testtokenize.cpp" $, 4799 $, "void f ( ) { if ( a & b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750596 "cppcheck-2.8/test/testtokenize.cpp" $, 4799 $, "void f() { if (a bitand b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4800: $if $(@expr1073750598 $!@expr1073750599 $assertEquals $(@expr1073750600 "cppcheck-2.8/test/testtokenize.cpp" $, 4800 $, "void f ( ) { if ( a | b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750601 "cppcheck-2.8/test/testtokenize.cpp" $, 4800 $, "void f() { if (a bitor b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4801: $if $(@expr1073750603 $!@expr1073750604 $assertEquals $(@expr1073750605 "cppcheck-2.8/test/testtokenize.cpp" $, 4801 $, "void f ( ) { if ( a | b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750606 "cppcheck-2.8/test/testtokenize.cpp" $, 4801 $, "void f() { if (a bitor b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4802: $if $(@expr1073750608 $!@expr1073750609 $assertEquals $(@expr1073750610 "cppcheck-2.8/test/testtokenize.cpp" $, 4802 $, "void f ( ) { if ( a ^ b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750611 "cppcheck-2.8/test/testtokenize.cpp" $, 4802 $, "void f() { if (a xor b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4803: $if $(@expr1073750613 $!@expr1073750614 $assertEquals $(@expr1073750615 "cppcheck-2.8/test/testtokenize.cpp" $, 4803 $, "void f ( ) { if ( a ^ b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750616 "cppcheck-2.8/test/testtokenize.cpp" $, 4803 $, "void f() { if (a xor b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4804: $if $(@expr1073750618 $!@expr1073750619 $assertEquals $(@expr1073750620 "cppcheck-2.8/test/testtokenize.cpp" $, 4804 $, "void f ( ) { if ( ~ b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750621 "cppcheck-2.8/test/testtokenize.cpp" $, 4804 $, "void f() { if (compl b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4805: $if $(@expr1073750623 $!@expr1073750624 $assertEquals $(@expr1073750625 "cppcheck-2.8/test/testtokenize.cpp" $, 4805 $, "void f ( ) { if ( ~ b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750626 "cppcheck-2.8/test/testtokenize.cpp" $, 4805 $, "void f() { if (compl b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4806: $if $(@expr1073750628 $!@expr1073750629 $assertEquals $(@expr1073750630 "cppcheck-2.8/test/testtokenize.cpp" $, 4806 $, "void f ( ) { if ( ! b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750631 "cppcheck-2.8/test/testtokenize.cpp" $, 4806 $, "void f() { if (not b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4807: $if $(@expr1073750633 $!@expr1073750634 $assertEquals $(@expr1073750635 "cppcheck-2.8/test/testtokenize.cpp" $, 4807 $, "void f ( ) { if ( ! b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750636 "cppcheck-2.8/test/testtokenize.cpp" $, 4807 $, "void f() { if (not b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4808: $if $(@expr1073750638 $!@expr1073750639 $assertEquals $(@expr1073750640 "cppcheck-2.8/test/testtokenize.cpp" $, 4808 $, "void f ( ) const { if ( ! b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750641 "cppcheck-2.8/test/testtokenize.cpp" $, 4808 $, "void f() const { if (not b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4809: $if $(@expr1073750643 $!@expr1073750644 $assertEquals $(@expr1073750645 "cppcheck-2.8/test/testtokenize.cpp" $, 4809 $, "void f ( ) { if ( a != b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750646 "cppcheck-2.8/test/testtokenize.cpp" $, 4809 $, "void f() { if (a not_eq b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4810: $if $(@expr1073750648 $!@expr1073750649 $assertEquals $(@expr1073750650 "cppcheck-2.8/test/testtokenize.cpp" $, 4810 $, "void f ( ) { if ( a != b ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750651 "cppcheck-2.8/test/testtokenize.cpp" $, 4810 $, "void f() { if (a not_eq b); }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4811:
4812: $if $(@expr1073750653 $!@expr1073750654 $assertEquals $(@expr1073750655 "cppcheck-2.8/test/testtokenize.cpp" $, 4812 $, "void f ( ) { if ( ! c || ! memcmp ( a , b , s ) ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750656 "cppcheck-2.8/test/testtokenize.cpp" $, 4812 $, "void f() { if (!c or !memcmp(a, b, s)); }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4813: $if $(@expr1073750658 $!@expr1073750659 $assertEquals $(@expr1073750660 "cppcheck-2.8/test/testtokenize.cpp" $, 4813 $, "void f ( ) { if ( ! c || ! memcmp ( a , b , s ) ) { ; } }" $, $tokenizeAndStringify_ $(@expr1073750661 "cppcheck-2.8/test/testtokenize.cpp" $, 4813 $, "void f() { if (!c or !memcmp(a, b, s)); }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4814:
4815: $if $(@expr1073750663 $!@expr1073750664 $assertEquals $(@expr1073750665 "cppcheck-2.8/test/testtokenize.cpp" $, 4815 $, "void f ( ) { if ( ! b ) { } }" $, $tokenizeAndStringify_ $(@expr1073750666 "cppcheck-2.8/test/testtokenize.cpp" $, 4815 $, "void f() { if (not b){} }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4816: $if $(@expr1073750668 $!@expr1073750669 $assertEquals $(@expr1073750670 "cppcheck-2.8/test/testtokenize.cpp" $, 4816 $, "void f ( ) { if ( ! b ) { } }" $, $tokenizeAndStringify_ $(@expr1073750671 "cppcheck-2.8/test/testtokenize.cpp" $, 4816 $, "void f() { if (not b){} }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4817:
4818: $if $(@expr1073750673 $!@expr1073750674 $assertEquals $(@expr1073750675 "cppcheck-2.8/test/testtokenize.cpp" $, 4818 $, "void f ( ) { if ( not = x ) { } }" $, $tokenizeAndStringify_ $(@expr1073750676 "cppcheck-2.8/test/testtokenize.cpp" $, 4818 $, "void f() { if (not=x){} }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4819: $if $(@expr1073750678 $!@expr1073750679 $assertEquals $(@expr1073750680 "cppcheck-2.8/test/testtokenize.cpp" $, 4819 $, "void f ( ) { if ( not = x ) { } }" $, $tokenizeAndStringify_ $(@expr1073750681 "cppcheck-2.8/test/testtokenize.cpp" $, 4819 $, "void f() { if (not=x){} }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4820:
4821: $if $(@expr1073750683 $!@expr1073750684 $assertEquals $(@expr1073750685 "cppcheck-2.8/test/testtokenize.cpp" $, 4821 $, "void f ( struct S * s ) { x = s . and + 1 ; }" $, $tokenizeAndStringify_ $(@expr1073750686 "cppcheck-2.8/test/testtokenize.cpp" $, 4821 $, "void f(struct S *s) { x = s->and + 1; }" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4822:
4823: $if $(@expr1073750688 $!@expr1073750689 $assertEquals $(@expr1073750690 "cppcheck-2.8/test/testtokenize.cpp" $, 4823 $, "void f ( ) { if ( x ) { or = 0 ; } }" $, $tokenizeAndStringify_ $(@expr1073750691 "cppcheck-2.8/test/testtokenize.cpp" $, 4823 $, "void f() { if (x) or = 0; }" $) $) $) { $return ; }
4824:
4825: $if $(@expr1073750692 $!@expr1073750693 $assertEquals $(@expr1073750694 "cppcheck-2.8/test/testtokenize.cpp" $, 4825 $, "void f ( const char * str ) { while ( * str == '!' || * str == '[' ) { } }" $, $tokenizeAndStringify_ $(@expr1073750695 "cppcheck-2.8/test/testtokenize.cpp" $, 4825 $, "void f(const char *str) { while (*str=='!' or *str=='['){} }" $) $) $) { $return
4826: ; }
4827:
4828: $if $(@expr1073750696 $!@expr1073750697 $assertEquals $(@expr1073750698 "cppcheck-2.8/test/testtokenize.cpp" $, 4828 $, "result = ch != s . end ( ) && * ch == ':' ;" $, $tokenizeAndStringify_ $(@expr1073750699 "cppcheck-2.8/test/testtokenize.cpp" $, 4828 $, "result = ch != s.end() and *ch == ':';" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return ; }
4829:
4830:
4831: $if $(@expr1073750701 $!@expr1073750702 $assertEquals $(@expr1073750703 "cppcheck-2.8/test/testtokenize.cpp" $, 4831 $, "void foo ( ) {\nchar * or ;\nwhile ( ( * or != 0 ) && ( * or != '|' ) ) { or ++ ; }\n}" $, $tokenizeAndStringify_ $(@expr1073750704 "cppcheck-2.8/test/testtokenize.cpp" $, 4831 $, "void foo() {\n  char *or;\n  while ((*or != 0) && (*or != '|')) or++;\n}" , true , Settings ::@expr8743 Native@expr8738 , "test.c" $) $) $) { $return
4832:
|
4838:
4839: ; }
4840:
4841: $if $(@expr1073750706 $!@expr1073750707 $assertEquals $(@expr1073750708 "cppcheck-2.8/test/testtokenize.cpp" $, 4841 $, "void f ( ) { x = ! 123 ; }" $, $tokenizeAndStringify_ $(@expr1073750709 "cppcheck-2.8/test/testtokenize.cpp" $, 4841 $, "void f() { x = not 123; }" , true , Settings ::@expr8743 Native@expr8738 , "test.cpp" $) $) $) { $return ; }
4842: }
4843:
4844: void simplifyRoundCurlyParentheses ( ) {
4845: $if $(@expr1073750711 $!@expr1073750712 $assertEquals $(@expr1073750713 "cppcheck-2.8/test/testtokenize.cpp" $, 4845 $, "; x = 123 ;" $, $tokenizeAndStringify_ $(@expr1073750714 "cppcheck-2.8/test/testtokenize.cpp" $, 4845 $, ";x=({123;});" $) $) $) { $return ; }
4846: $if $(@expr1073750715 $!@expr1073750716 $assertEquals $(@expr1073750717 "cppcheck-2.8/test/testtokenize.cpp" $, 4846 $, "; x = y ;" $, $tokenizeAndStringify_ $(@expr1073750718 "cppcheck-2.8/test/testtokenize.cpp" $, 4846 $, ";x=({y;});" $) $) $) { $return ; }
4847: }
4848:
4849: void simplifyOperatorName1 ( ) {
4850:
4851: const char code@var842 [@expr1073750720 47 ] =@expr1073750721 "void operator () {}int main(){    operator();}"
4852:
4853:
4854:
4855: ;
4856:
4857: const char result@var843 [@expr1073750722 54 ] =@expr1073750723 "void operator ( ) { } int main ( ) { operator ( ) ; }"
4858:
4859:
4860:
4861: ;
4862:
4863: $if $(@expr1073750724 $!@expr1073750725 $assertEquals $(@expr1073750726 "cppcheck-2.8/test/testtokenize.cpp" $, 4863 $, result@var843 $, $tokenizeAndStringify_ $(@expr1073750727 "cppcheck-2.8/test/testtokenize.cpp" $, 4863 $, code@var842 , true , Settings ::@expr1073750728 Native@expr1073750719 , "test.c" $) $) $) { $return ; }
4864: }
4865:
4866: void simplifyOperatorName2 ( ) {
4867: const char code@var844 [@expr1073750729 75 ] =@expr1073750730 "class Fred{    Fred(const Fred & f) { operator = (f); }    operator = ();}"
4868:
4869:
4870:
4871: ;
4872:
4873: const char result@var845 [@expr1073750731 77 ] =@expr1073750732 "class Fred { Fred ( const Fred & f ) { operator= ( f ) ; } operator= ( ) ; }"
4874:
4875:
4876:
4877: ;
4878:
4879: $if $(@expr1073750733 $!@expr1073750734 $assertEquals $(@expr1073750735 "cppcheck-2.8/test/testtokenize.cpp" $, 4879 $, result@var845 $, $tokenizeAndStringify_ $(@expr1073750736 "cppcheck-2.8/test/testtokenize.cpp" $, 4879 $, code@var844 $) $) $) { $return ; }
4880: }
4881:
4882: void simplifyOperatorName3 ( ) {
4883:
4884: const char code@var846 [@expr1073750737 69 ] =@expr1073750738 "void f() {static_cast<ScToken*>(xResult.operator->())->GetMatrix();}"
4885:
4886: ;
4887: const char result@var847 [@expr1073750739 87 ] =@expr1073750740 "void f ( ) { static_cast < ScToken * > ( xResult . operator. ( ) ) . GetMatrix ( ) ; }" ;
4888: $if $(@expr1073750741 $!@expr1073750742 $assertEquals $(@expr1073750743 "cppcheck-2.8/test/testtokenize.cpp" $, 4888 $, result@var847 $, $tokenizeAndStringify_ $(@expr1073750744 "cppcheck-2.8/test/testtokenize.cpp" $, 4888 $, code@var846 $) $) $) { $return ; }
4889: }
4890:
4891: void simplifyOperatorName4 ( ) {
4892: const char code@var848 [@expr1073750745 22 ] =@expr1073750746 "void operator==() { }" ;
4893: const char result@var849 [@expr1073750747 24 ] =@expr1073750748 "void operator== ( ) { }" ;
4894: $if $(@expr1073750749 $!@expr1073750750 $assertEquals $(@expr1073750751 "cppcheck-2.8/test/testtokenize.cpp" $, 4894 $, result@var849 $, $tokenizeAndStringify_ $(@expr1073750752 "cppcheck-2.8/test/testtokenize.cpp" $, 4894 $, code@var848 $) $) $) { $return ; }
4895: }
4896:
4897: void simplifyOperatorName5 ( ) {
4898: const char code1@var850 [@expr1073750753 56 ] =@expr1073750754 "std::istream & operator >> (std::istream & s, Fred &f);" ;
4899: const char result1@var851 [@expr1073750755 64 ] =@expr1073750756 "std :: istream & operator>> ( std :: istream & s , Fred & f ) ;" ;
4900: $if $(@expr1073750757 $!@expr1073750758 $assertEquals $(@expr1073750759 "cppcheck-2.8/test/testtokenize.cpp" $, 4900 $, result1@var851 $, $tokenizeAndStringify_ $(@expr1073750760 "cppcheck-2.8/test/testtokenize.cpp" $, 4900 $, code1@var850 $) $) $) { $return ; }
4901:
4902: const char code2@var852 [@expr1073750761 62 ] =@expr1073750762 "std::ostream & operator << (std::ostream & s, const Fred &f);" ;
4903: const char result2@var853 [@expr1073750763 70 ] =@expr1073750764 "std :: ostream & operator<< ( std :: ostream & s , const Fred & f ) ;" ;
4904: $if $(@expr1073750765 $!@expr1073750766 $assertEquals $(@expr1073750767 "cppcheck-2.8/test/testtokenize.cpp" $, 4904 $, result2@var853 $, $tokenizeAndStringify_ $(@expr1073750768 "cppcheck-2.8/test/testtokenize.cpp" $, 4904 $, code2@var852 $) $) $) { $return ; }
4905: }
4906:
4907: void simplifyOperatorName6 ( ) {
4908: const char code1@var854 [@expr1073750769 32 ] =@expr1073750770 "value_type * operator ++ (int);" ;
4909: const char result1@var855 [@expr1073750771 34 ] =@expr1073750772 "value_type * operator++ ( int ) ;" ;
4910: $if $(@expr1073750773 $!@expr1073750774 $assertEquals $(@expr1073750775 "cppcheck-2.8/test/testtokenize.cpp" $, 4910 $, result1@var855 $, $tokenizeAndStringify_ $(@expr1073750776 "cppcheck-2.8/test/testtokenize.cpp" $, 4910 $, code1@var854 $) $) $) { $return ; }
4911:
4912: const char code2@var856 [@expr1073750777 32 ] =@expr1073750778 "value_type * operator -- (int);" ;
4913: const char result2@var857 [@expr1073750779 34 ] =@expr1073750780 "value_type * operator-- ( int ) ;" ;
4914: $if $(@expr1073750781 $!@expr1073750782 $assertEquals $(@expr1073750783 "cppcheck-2.8/test/testtokenize.cpp" $, 4914 $, result2@var857 $, $tokenizeAndStringify_ $(@expr1073750784 "cppcheck-2.8/test/testtokenize.cpp" $, 4914 $, code2@var856 $) $) $) { $return ; }
4915: }
4916:
4917: void simplifyOperatorName7 ( ) {
4918: const char code1@var858 [@expr1073750785 32 ] =@expr1073750786 "value_type * operator += (int);" ;
4919: const char result1@var859 [@expr1073750787 34 ] =@expr1073750788 "value_type * operator+= ( int ) ;" ;
4920: $if $(@expr1073750789 $!@expr1073750790 $assertEquals $(@expr1073750791 "cppcheck-2.8/test/testtokenize.cpp" $, 4920 $, result1@var859 $, $tokenizeAndStringify_ $(@expr1073750792 "cppcheck-2.8/test/testtokenize.cpp" $, 4920 $, code1@var858 $) $) $) { $return ; }
4921: }
4922:
4923: void simplifyOperatorName8 ( ) {
4924: const char code1@var860 [@expr1073750793 42 ] =@expr1073750794 "value_type * operator += (int) noexcept ;" ;
4925: const char result1@var861 [@expr1073750795 52 ] =@expr1073750796 "value_type * operator+= ( int ) noexcept ( true ) ;" ;
4926: $if $(@expr1073750797 $!@expr1073750798 $assertEquals $(@expr1073750799 "cppcheck-2.8/test/testtokenize.cpp" $, 4926 $, result1@var861 $, $tokenizeAndStringify_ $(@expr1073750800 "cppcheck-2.8/test/testtokenize.cpp" $, 4926 $, code1@var860 $) $) $) { $return ; }
4927:
4928: const char code2@var862 [@expr1073750801 51 ] =@expr1073750802 "value_type * operator += (int) noexcept ( true ) ;" ;
4929: const char result2@var863 [@expr1073750803 52 ] =@expr1073750804 "value_type * operator+= ( int ) noexcept ( true ) ;" ;
4930: $if $(@expr1073750805 $!@expr1073750806 $assertEquals $(@expr1073750807 "cppcheck-2.8/test/testtokenize.cpp" $, 4930 $, result2@var863 $, $tokenizeAndStringify_ $(@expr1073750808 "cppcheck-2.8/test/testtokenize.cpp" $, 4930 $, code2@var862 $) $) $) { $return ; }
4931:
4932: const char code3@var864 [@expr1073750809 43 ] =@expr1073750810 "value_type * operator += (int) throw ( ) ;" ;
4933: const char result3@var865 [@expr1073750811 44 ] =@expr1073750812 "value_type * operator+= ( int ) throw ( ) ;" ;
4934: $if $(@expr1073750813 $!@expr1073750814 $assertEquals $(@expr1073750815 "cppcheck-2.8/test/testtokenize.cpp" $, 4934 $, result3@var865 $, $tokenizeAndStringify_ $(@expr1073750816 "cppcheck-2.8/test/testtokenize.cpp" $, 4934 $, code3@var864 $) $) $) { $return ; }
4935:
4936: const char code4@var866 [@expr1073750817 48 ] =@expr1073750818 "value_type * operator += (int) const noexcept ;" ;
4937: const char result4@var867 [@expr1073750819 49 ] =@expr1073750820 "value_type * operator+= ( int ) const noexcept ;" ;
4938: $if $(@expr1073750821 $!@expr1073750822 $assertEquals $(@expr1073750823 "cppcheck-2.8/test/testtokenize.cpp" $, 4938 $, result4@var867 $, $tokenizeAndStringify_ $(@expr1073750824 "cppcheck-2.8/test/testtokenize.cpp" $, 4938 $, code4@var866 $) $) $) { $return ; }
4939:
4940: const char code5@var868 [@expr1073750825 57 ] =@expr1073750826 "value_type * operator += (int) const noexcept ( true ) ;" ;
4941: const char result5@var869 [@expr1073750827 58 ] =@expr1073750828 "value_type * operator+= ( int ) const noexcept ( true ) ;" ;
4942: $if $(@expr1073750829 $!@expr1073750830 $assertEquals $(@expr1073750831 "cppcheck-2.8/test/testtokenize.cpp" $, 4942 $, result5@var869 $, $tokenizeAndStringify_ $(@expr1073750832 "cppcheck-2.8/test/testtokenize.cpp" $, 4942 $, code5@var868 $) $) $) { $return ; }
4943:
4944: const char code6@var870 [@expr1073750833 49 ] =@expr1073750834 "value_type * operator += (int) const throw ( ) ;" ;
4945: const char result6@var871 [@expr1073750835 50 ] =@expr1073750836 "value_type * operator+= ( int ) const throw ( ) ;" ;
4946: $if $(@expr1073750837 $!@expr1073750838 $assertEquals $(@expr1073750839 "cppcheck-2.8/test/testtokenize.cpp" $, 4946 $, result6@var871 $, $tokenizeAndStringify_ $(@expr1073750840 "cppcheck-2.8/test/testtokenize.cpp" $, 4946 $, code6@var870 $) $) $) { $return ; }
4947:
4948: const char code7@var872 [@expr1073750841 58 ] =@expr1073750842 "value_type * operator += (int) const noexcept ( false ) ;" ;
4949: const char result7@var873 [@expr1073750843 59 ] =@expr1073750844 "value_type * operator+= ( int ) const noexcept ( false ) ;" ;
4950: $if $(@expr1073750845 $!@expr1073750846 $assertEquals $(@expr1073750847 "cppcheck-2.8/test/testtokenize.cpp" $, 4950 $, result7@var873 $, $tokenizeAndStringify_ $(@expr1073750848 "cppcheck-2.8/test/testtokenize.cpp" $, 4950 $, code7@var872 $) $) $) { $return ; }
4951:
4952: }
4953:
4954: void simplifyOperatorName9 ( ) {
4955: const char code@var874 [@expr1073750849 37 ] =@expr1073750850 "struct R { R operator, ( R b ) ; } ;" ;
4956: $if $(@expr1073750851 $!@expr1073750852 $assertEquals $(@expr1073750853 "cppcheck-2.8/test/testtokenize.cpp" $, 4956 $, code@var874 $, $tokenizeAndStringify_ $(@expr1073750854 "cppcheck-2.8/test/testtokenize.cpp" $, 4956 $, code@var874 $) $) $) { $return ; }
4957: }
4958:
4959: void simplifyOperatorName31 ( ) {
4960: const char code@var875 [@expr1073750855 100 ] =@expr1073750856 "template <typename T>\nstruct B {\n    typedef T A[3];\n    operator A& () { return x_; }\n    A x_;\n};"
4961:
|
4964:
4965: ;
4966: $if $(@expr1073750857 $!@expr1073750858 $assertEquals $(@expr1073750859 "cppcheck-2.8/test/testtokenize.cpp" $, 4966 $, "template < typename T >\nstruct B {\n\noperatorT ( & ( ) ) [ 3 ] { return x_ ; }\nT x_ [ 3 ] ;\n} ;" $, $tokenizeAndStringify_ $(@expr1073750860 "cppcheck-2.8/test/testtokenize.cpp" $, 4966 $, code@var875 $) $) $) { $return ; }
4967: $if $(@expr1073750861 $!@expr1073750862 $assertEquals $(@expr1073750863 "cppcheck-2.8/test/testtokenize.cpp" $, 4967 $, "" $, errout@var100 .@expr1073750864 str (@expr1073750865 ) $) $) { $return ; }
4968: }
4969:
4970: void simplifyOperatorName32 ( ) {
4971: const char code@var876 [@expr1073750866 27 ] =@expr1073750867 "void f(int* = nullptr) {}\n" ;
4972: $if $(@expr1073750868 $!@expr1073750869 $assertEquals $(@expr1073750870 "cppcheck-2.8/test/testtokenize.cpp" $, 4972 $, "void f ( int * = nullptr ) { }" $, $tokenizeAndStringify_ $(@expr1073750871 "cppcheck-2.8/test/testtokenize.cpp" $, 4972 $, code@var876 $) $) $) { $return ; }
4973: $if $(@expr1073750872 $!@expr1073750873 $assertEquals $(@expr1073750874 "cppcheck-2.8/test/testtokenize.cpp" $, 4973 $, "" $, errout@var100 .@expr1073750875 str (@expr1073750876 ) $) $) { $return ; }
4974: }
4975:
4976: void simplifyOperatorName10 ( ) {
4977: const char code1@var877 [@expr1073750877 20 ] =@expr1073750878 "using a::operator=;" ;
4978: $if $(@expr1073750879 $!@expr1073750880 $assertEquals $(@expr1073750881 "cppcheck-2.8/test/testtokenize.cpp" $, 4978 $, "using a :: operator= ;" $, $tokenizeAndStringify_ $(@expr1073750882 "cppcheck-2.8/test/testtokenize.cpp" $, 4978 $, code1@var877 $) $) $) { $return ; }
4979:
4980: const char code2@var878 [@expr1073750883 30 ] =@expr1073750884 "{ return &Fred::operator!=; }" ;
4981: $if $(@expr1073750885 $!@expr1073750886 $assertEquals $(@expr1073750887 "cppcheck-2.8/test/testtokenize.cpp" $, 4981 $, "{ return & Fred :: operator!= ; }" $, $tokenizeAndStringify_ $(@expr1073750888 "cppcheck-2.8/test/testtokenize.cpp" $, 4981 $, code2@var878 $) $) $) { $return ; }
4982: }
4983:
4984: void simplifyOperatorName11 ( ) {
4985: const char code@var879 [@expr1073750889 49 ] =@expr1073750890 "auto operator = (const Fred & other) -> Fred & ;" ;
4986: $if $(@expr1073750891 $!@expr1073750892 $assertEquals $(@expr1073750893 "cppcheck-2.8/test/testtokenize.cpp" $, 4986 $, "auto operator= ( const Fred & other ) . Fred & ;" $, $tokenizeAndStringify_ $(@expr1073750894 "cppcheck-2.8/test/testtokenize.cpp" $, 4986 $, code@var879 $) $) $) { $return ; }
4987:
4988: const char code1@var880 [@expr1073750895 51 ] =@expr1073750896 "auto operator = (const Fred & other) -> Fred & { }" ;
4989: $if $(@expr1073750897 $!@expr1073750898 $assertEquals $(@expr1073750899 "cppcheck-2.8/test/testtokenize.cpp" $, 4989 $, "auto operator= ( const Fred & other ) . Fred & { }" $, $tokenizeAndStringify_ $(@expr1073750900 "cppcheck-2.8/test/testtokenize.cpp" $, 4989 $, code1@var880 $) $) $) { $return ; }
4990:
4991: const char code2@var881 [@expr1073750901 51 ] =@expr1073750902 "template <typename T> void g(S<&T::operator+ >) {}" ;
4992: $if $(@expr1073750903 $!@expr1073750904 $assertEquals $(@expr1073750905 "cppcheck-2.8/test/testtokenize.cpp" $, 4992 $, "template < typename T > void g ( S < & T :: operator+ > ) { }" $, $tokenizeAndStringify_ $(@expr1073750906 "cppcheck-2.8/test/testtokenize.cpp" $, 4992 $, code2@var881 $) $) $) { $return ; }
4993:
4994: const char code3@var882 [@expr1073750907 53 ] =@expr1073750908 "template <typename T> void g(S<&T::operator int>) {}" ;
4995: $if $(@expr1073750909 $!@expr1073750910 $assertEquals $(@expr1073750911 "cppcheck-2.8/test/testtokenize.cpp" $, 4995 $, "template < typename T > void g ( S < & T :: operatorint > ) { }" $, $tokenizeAndStringify_ $(@expr1073750912 "cppcheck-2.8/test/testtokenize.cpp" $, 4995 $, code3@var882 $) $) $) { $return ; }
4996:
4997: const char code4@var883 [@expr1073750913 69 ] =@expr1073750914 "template <typename T> void g(S<&T::template operator- <double> >) {}" ;
4998: $if $(@expr1073750915 $!@expr1073750916 $assertEquals $(@expr1073750917 "cppcheck-2.8/test/testtokenize.cpp" $, 4998 $, "template < typename T > void g ( S < & T :: operator- < double > > ) { }" $, $tokenizeAndStringify_ $(@expr1073750918 "cppcheck-2.8/test/testtokenize.cpp" $, 4998 $, code4@var883 $) $) $) { $return ; }
4999: }
5000:
5001: void simplifyOperatorName12 ( ) {
5002: const char code@var884 [@expr1073750919 74 ] =@expr1073750920 "namespace a {template <typename b> void operator+(b);}using a::operator+;"
5003:
5004:
5005: ;
5006: $if $(@expr1073750921 $!@expr1073750922 $assertEquals $(@expr1073750923 "cppcheck-2.8/test/testtokenize.cpp" $, 5006 $, "namespace a { template < typename b > void operator+ ( b ) ; } using a :: operator+ ;" $, $tokenizeAndStringify_ $(@expr1073750924 "cppcheck-2.8/test/testtokenize.cpp" $, 5006 $, code@var884 $) $) $) { $return
5007:
5008:
5009:
5010: ; }
5011: }
5012:
5013: void simplifyOperatorName13 ( ) {
5014: const char code@var885 [@expr1073750925 68 ] =@expr1073750926 "unsigned long operator\"\"_numch(const char *ch, unsigned long size);" ;
5015: $if $(@expr1073750927 $!@expr1073750928 $assertEquals $(@expr1073750929 "cppcheck-2.8/test/testtokenize.cpp" $, 5015 $, "unsigned long operator\"\"_numch ( const char * ch , unsigned long size ) ;" $, $tokenizeAndStringify_ $(@expr1073750930 "cppcheck-2.8/test/testtokenize.cpp" $, 5015 $, code@var885 $) $) $) { $return
5016: ; }
5017: }
5018:
5019: void simplifyOperatorName14 ( ) {
5020: {
5021: const char code@var886 [@expr1073750931 63 ] =@expr1073750932 "constexpr std::complex<float> operator\"\"if(long double __num);" ;
5022: $if $(@expr1073750933 $!@expr1073750934 $assertEquals $(@expr1073750935 "cppcheck-2.8/test/testtokenize.cpp" $, 5022 $, "constexpr std :: complex < float > operator\"\"if ( long double __num ) ;" $, $tokenizeAndStringify_ $(@expr1073750936 "cppcheck-2.8/test/testtokenize.cpp" $, 5022 $, code@var886 $) $) $) { $return
5023: ; }
5024: }
5025: {
5026: const char code@var887 [@expr1073750937 66 ] =@expr1073750938 "constexpr std::complex<float> operator\"\"if(long double __num) { }" ;
5027: $if $(@expr1073750939 $!@expr1073750940 $assertEquals $(@expr1073750941 "cppcheck-2.8/test/testtokenize.cpp" $, 5027 $, "constexpr std :: complex < float > operator\"\"if ( long double __num ) { }" $, $tokenizeAndStringify_ $(@expr1073750942 "cppcheck-2.8/test/testtokenize.cpp" $, 5027 $, code@var887 $) $) $) { $return
5028: ; }
5029: }
5030: }
5031:
5032: void simplifyOperatorName15 ( ) {
5033: const char code@var888 [@expr1073750943 159 ] =@expr1073750944 "template <typename> struct a;template <typename> struct b {  typedef char c;  operator c();};template <> struct a<char> : b<char> { using b::operator char; };"
5034:
|
5037:
5038: ;
5039: $if $(@expr1073750945 $!@expr1073750946 $assertEquals $(@expr1073750947 "cppcheck-2.8/test/testtokenize.cpp" $, 5039 $, "struct a<char> ; template < typename > struct a ; struct b<char> ; struct a<char> : b<char> { using b :: operatorchar ; } ; struct b<char> { operatorchar ( ) ; } ;" $, $tokenizeAndStringify_ $(@expr1073750948 "cppcheck-2.8/test/testtokenize.cpp" $, 5039 $, code@var888 $) $) $) { $return
5040:
|
5043:
5044: ; }
5045: }
5046:
5047: void simplifyOperatorName16 ( ) {
5048: {
5049: const char code@var889 [@expr1073750949 57 ] =@expr1073750950 "class I : public A { iterator& operator++() override; };" ;
5050: $if $(@expr1073750951 $!@expr1073750952 $assertEquals $(@expr1073750953 "cppcheck-2.8/test/testtokenize.cpp" $, 5050 $, "class I : public A { iterator & operator++ ( ) override ; } ;" $, $tokenizeAndStringify_ $(@expr1073750954 "cppcheck-2.8/test/testtokenize.cpp" $, 5050 $, code@var889 $) $) $) { $return
5051: ; }
5052: }
5053: {
5054: const char code@var890 [@expr1073750955 60 ] =@expr1073750956 "class I : public A { iterator& operator++() override { } };" ;
5055: $if $(@expr1073750957 $!@expr1073750958 $assertEquals $(@expr1073750959 "cppcheck-2.8/test/testtokenize.cpp" $, 5055 $, "class I : public A { iterator & operator++ ( ) override { } } ;" $, $tokenizeAndStringify_ $(@expr1073750960 "cppcheck-2.8/test/testtokenize.cpp" $, 5055 $, code@var890 $) $) $) { $return
5056: ; }
5057: }
5058: }
5059:
5060: void simplifyOperatorName17 ( ) {
5061: {
5062: const char code@var891 [@expr1073750961 60 ] =@expr1073750962 "template <class a> void b(a c, a d) { c.operator>() == d; }" ;
5063: $if $(@expr1073750963 $!@expr1073750964 $assertEquals $(@expr1073750965 "cppcheck-2.8/test/testtokenize.cpp" $, 5063 $, "template < class a > void b ( a c , a d ) { c . operator> ( ) == d ; }" $, $tokenizeAndStringify_ $(@expr1073750966 "cppcheck-2.8/test/testtokenize.cpp" $, 5063 $, code@var891 $) $) $) { $return
5064: ; }
5065: }
5066: {
5067: const char code@var892 [@expr1073750967 66 ] =@expr1073750968 "template <class a> void b(a c, a d) { c.operator>() == (d + 1); }" ;
5068: $if $(@expr1073750969 $!@expr1073750970 $assertEquals $(@expr1073750971 "cppcheck-2.8/test/testtokenize.cpp" $, 5068 $, "template < class a > void b ( a c , a d ) { c . operator> ( ) == ( d + 1 ) ; }" $, $tokenizeAndStringify_ $(@expr1073750972 "cppcheck-2.8/test/testtokenize.cpp" $, 5068 $, code@var892 $) $) $) { $return
5069: ; }
5070: }
5071: {
5072: const char code@var893 [@expr1073750973 60 ] =@expr1073750974 "template <class a> void b(a c, a d) { c.operator<() == d; }" ;
5073: $if $(@expr1073750975 $!@expr1073750976 $assertEquals $(@expr1073750977 "cppcheck-2.8/test/testtokenize.cpp" $, 5073 $, "template < class a > void b ( a c , a d ) { c . operator< ( ) == d ; }" $, $tokenizeAndStringify_ $(@expr1073750978 "cppcheck-2.8/test/testtokenize.cpp" $, 5073 $, code@var893 $) $) $) { $return
5074: ; }
5075: }
5076: {
5077: const char code@var894 [@expr1073750979 66 ] =@expr1073750980 "template <class a> void b(a c, a d) { c.operator>() == (d + 1); }" ;
5078: $if $(@expr1073750981 $!@expr1073750982 $assertEquals $(@expr1073750983 "cppcheck-2.8/test/testtokenize.cpp" $, 5078 $, "template < class a > void b ( a c , a d ) { c . operator> ( ) == ( d + 1 ) ; }" $, $tokenizeAndStringify_ $(@expr1073750984 "cppcheck-2.8/test/testtokenize.cpp" $, 5078 $, code@var894 $) $) $) { $return
5079: ; }
5080: }
5081: {
5082: const char code@var895 [@expr1073750985 61 ] =@expr1073750986 "template <class a> void b(a c, a d) { c.operator++() == d; }" ;
5083: $if $(@expr1073750987 $!@expr1073750988 $assertEquals $(@expr1073750989 "cppcheck-2.8/test/testtokenize.cpp" $, 5083 $, "template < class a > void b ( a c , a d ) { c . operator++ ( ) == d ; }" $, $tokenizeAndStringify_ $(@expr1073750990 "cppcheck-2.8/test/testtokenize.cpp" $, 5083 $, code@var895 $) $) $) { $return
5084: ; }
5085: }
5086: {
5087: const char code@var896 [@expr1073750991 67 ] =@expr1073750992 "template <class a> void b(a c, a d) { c.operator++() == (d + 1); }" ;
5088: $if $(@expr1073750993 $!@expr1073750994 $assertEquals $(@expr1073750995 "cppcheck-2.8/test/testtokenize.cpp" $, 5088 $, "template < class a > void b ( a c , a d ) { c . operator++ ( ) == ( d + 1 ) ; }" $, $tokenizeAndStringify_ $(@expr1073750996 "cppcheck-2.8/test/testtokenize.cpp" $, 5088 $, code@var896 $) $) $) { $return
5089: ; }
5090: }
5091: }
5092:
5093: void simplifyOperatorName18 ( ) {
5094: {
5095: const char code@var897 [@expr1073750997 78 ] =@expr1073750998 "struct Fred { operator std::string() const { return std::string(\"Fred\"); } };" ;
5096: $if $(@expr1073750999 $!@expr1073751000 $assertEquals $(@expr1073751001 "cppcheck-2.8/test/testtokenize.cpp" $, 5096 $, "struct Fred { operatorstd::string ( ) const { return std :: string ( \"Fred\" ) ; } } ;" $, $tokenizeAndStringify_ $(@expr1073751002 "cppcheck-2.8/test/testtokenize.cpp" $, 5096 $, code@var897 $) $) $) { $return
5097: ; }
5098: }
5099: {
5100: const char code@var898 [@expr1073751003 82 ] =@expr1073751004 "struct Fred { operator ::std::string() const { return ::std::string(\"Fred\"); } };" ;
5101: $if $(@expr1073751005 $!@expr1073751006 $assertEquals $(@expr1073751007 "cppcheck-2.8/test/testtokenize.cpp" $, 5101 $, "struct Fred { operator::std::string ( ) const { return :: std :: string ( \"Fred\" ) ; } } ;" $, $tokenizeAndStringify_ $(@expr1073751008 "cppcheck-2.8/test/testtokenize.cpp" $, 5101 $, code@var898 $) $) $) { $return
5102: ; }
5103: }
5104: }
5105:
5106: void simplifyOperatorName19 ( ) {
5107: const char code@var899 [@expr1073751009 178 ] =@expr1073751010 "struct v {};enum E { e };struct s {  operator struct v() { return v(); };  operator enum E() { return e; }};void f() {  (void)&s::operator struct v;  (void)&s::operator enum E;}"
5108:
|
5115:
5116: ;
5117: $if $(@expr1073751011 $!@expr1073751012 $assertEquals $(@expr1073751013 "cppcheck-2.8/test/testtokenize.cpp" $, 5117 $, "struct v { } ; enum E { e } ; struct s { operatorstructv ( ) { return v ( ) ; } ; operatorenumE ( ) { return e ; } } ; void f ( ) { ( void ) & s :: operatorstructv ; ( void ) & s :: operatorenumE ; }" $, $tokenizeAndStringify_ $(@expr1073751014 "cppcheck-2.8/test/testtokenize.cpp" $, 5117 $, code@var899 $) $) $) { $return
5118:
|
5126:
5127: ; }
5128: }
5129:
5130: void simplifyOperatorName20 ( ) {
5131: const char code@var900 [@expr1073751015 110 ] =@expr1073751016 "void operator \"\" _a(const char *);namespace N {  using ::operator \"\" _a;  void operator \"\" _b(const char *);}"
5132:
5133:
5134:
5135: ;
5136: $if $(@expr1073751017 $!@expr1073751018 $assertEquals $(@expr1073751019 "cppcheck-2.8/test/testtokenize.cpp" $, 5136 $, "void operator\"\"_a ( const char * ) ; namespace N { using :: operator\"\"_a ; void operator\"\"_b ( const char * ) ; }" $, $tokenizeAndStringify_ $(@expr1073751020 "cppcheck-2.8/test/testtokenize.cpp" $, 5136 $, code@var900 $) $) $) { $return
5137:
|
5140:
5141: ; }
5142: }
5143:
5144: void simplifyOperatorName21 ( ) {
5145: const char code@var901 [@expr1073751021 144 ] =@expr1073751022 "template<char...> void operator \"\" _h() {}template<> void operator \"\" _h<'a', 'b', 'c'>() {}template void operator \"\" _h<'a', 'b', 'c', 'd'>();"
5146:
5147: ;
5148: $if $(@expr1073751023 $!@expr1073751024 $assertEquals $(@expr1073751025 "cppcheck-2.8/test/testtokenize.cpp" $, 5148 $, "void operator\"\"_h<'a','b','c'> ( ) ; void operator\"\"_h<'a','b','c','d'> ( ) ; void operator\"\"_h<'a','b','c'> ( ) { } void operator\"\"_h<'a','b','c','d'> ( ) { }" $, $tokenizeAndStringify_ $(@expr1073751026 "cppcheck-2.8/test/testtokenize.cpp" $, 5148 $, code@var901 $) $) $) { $return
5149:
5150:
5151:
5152: ; }
5153: }
5154:
5155: void simplifyOperatorName22 ( ) {
5156: const char code@var902 [@expr1073751027 145 ] =@expr1073751028 "static RSLRelOp convertOperator(const Software::ComparisonOperator& op) {  if (op == &Software::operator==) return RSLEqual;return RSLNotEqual;}"
5157:
5158:
5159: ;
5160: $if $(@expr1073751029 $!@expr1073751030 $assertEquals $(@expr1073751031 "cppcheck-2.8/test/testtokenize.cpp" $, 5160 $, "static RSLRelOp convertOperator ( const Software :: ComparisonOperator & op ) { if ( op == & Software :: operator== ) { return RSLEqual ; } return RSLNotEqual ; }" $, $tokenizeAndStringify_ $(@expr1073751032 "cppcheck-2.8/test/testtokenize.cpp" $, 5160 $, code@var902 $) $) $) { $return
5161:
5162:
5163:
5164: ; }
5165: }
5166:
5167: void simplifyOperatorName23 ( ) {
5168: {
5169: const char code@var903 [@expr1073751033 145 ] =@expr1073751034 "double *vtkMatrix3x3::operator[](const unsigned int i) {  VTK_LEGACY_BODY(vtkMatrix3x3::operator[], \"VTK 7.0\");  return &(this->Element[i][0]);}"
5170:
5171:
5172: ;
5173: $if $(@expr1073751035 $!@expr1073751036 $assertEquals $(@expr1073751037 "cppcheck-2.8/test/testtokenize.cpp" $, 5173 $, "double * vtkMatrix3x3 :: operator[] ( const unsigned int i ) { VTK_LEGACY_BODY ( vtkMatrix3x3 :: operator[] , \"VTK 7.0\" ) ; return & ( this . Element [ i ] [ 0 ] ) ; }" $, $tokenizeAndStringify_ $(@expr1073751038 "cppcheck-2.8/test/testtokenize.cpp" $, 5173 $, code@var903 $) $) $) { $return
5174:
5175:
5176:
5177: ; }
5178: }
5179: {
5180: const char code@var904 [@expr1073751039 143 ] =@expr1073751040 "double *vtkMatrix3x3::operator,(const unsigned int i) {  VTK_LEGACY_BODY(vtkMatrix3x3::operator,, \"VTK 7.0\");  return &(this->Element[i][0]);}"
5181:
5182:
5183: ;
5184: $if $(@expr1073751041 $!@expr1073751042 $assertEquals $(@expr1073751043 "cppcheck-2.8/test/testtokenize.cpp" $, 5184 $, "double * vtkMatrix3x3 :: operator, ( const unsigned int i ) { VTK_LEGACY_BODY ( vtkMatrix3x3 :: operator, , \"VTK 7.0\" ) ; return & ( this . Element [ i ] [ 0 ] ) ; }" $, $tokenizeAndStringify_ $(@expr1073751044 "cppcheck-2.8/test/testtokenize.cpp" $, 5184 $, code@var904 $) $) $) { $return
5185:
5186:
5187:
5188: ; }
5189: }
5190: }
5191:
5192: void simplifyOperatorName24 ( ) {
5193: {
5194: const char code@var905 [@expr1073751045 60 ] =@expr1073751046 "void foo() { int i = a.operator++() ? a.operator--() : 0; }" ;
5195: $if $(@expr1073751047 $!@expr1073751048 $assertEquals $(@expr1073751049 "cppcheck-2.8/test/testtokenize.cpp" $, 5195 $, "void foo ( ) { int i ; i = a . operator++ ( ) ? a . operator-- ( ) : 0 ; }" $, $tokenizeAndStringify_ $(@expr1073751050 "cppcheck-2.8/test/testtokenize.cpp" $, 5195 $, code@var905 $) $) $) { $return
5196: ; }
5197: }
5198: {
5199: const char code@var906 [@expr1073751051 62 ] =@expr1073751052 "void foo() { int i = a.operator++(0) ? a.operator--(0) : 0; }" ;
5200: $if $(@expr1073751053 $!@expr1073751054 $assertEquals $(@expr1073751055 "cppcheck-2.8/test/testtokenize.cpp" $, 5200 $, "void foo ( ) { int i ; i = a . operator++ ( 0 ) ? a . operator-- ( 0 ) : 0 ; }" $, $tokenizeAndStringify_ $(@expr1073751056 "cppcheck-2.8/test/testtokenize.cpp" $, 5200 $, code@var906 $) $) $) { $return
5201: ; }
5202: }
5203: }
5204:
5205: void simplifyOperatorName25 ( ) {
5206: const char code@var907 [@expr1073751057 82 ] =@expr1073751058 "bool negative(const Number &num) { return num.operator std::string()[0] == '-'; }" ;
5207: $if $(@expr1073751059 $!@expr1073751060 $assertEquals $(@expr1073751061 "cppcheck-2.8/test/testtokenize.cpp" $, 5207 $, "bool negative ( const Number & num ) { return num . operatorstd::string ( ) [ 0 ] == '-' ; }" $, $tokenizeAndStringify_ $(@expr1073751062 "cppcheck-2.8/test/testtokenize.cpp" $, 5207 $, code@var907 $) $) $) { $return
5208: ; }
5209: }
5210:
5211: void simplifyOperatorName26 ( ) {
5212: const char code@var908 [@expr1073751063 44 ] =@expr1073751064 "void foo() {    x = y.operator *().z[123];}"
5213:
5214: ;
5215: $if $(@expr1073751065 $!@expr1073751066 $assertEquals $(@expr1073751067 "cppcheck-2.8/test/testtokenize.cpp" $, 5215 $, "void foo ( ) { x = y . operator* ( ) . z [ 123 ] ; }" $, $tokenizeAndStringify_ $(@expr1073751068 "cppcheck-2.8/test/testtokenize.cpp" $, 5215 $, code@var908 $) $) $) { $return
5216: ; }
5217: }
5218:
5219: void simplifyOperatorName27 ( ) {
5220: const char code@var909 [@expr1073751069 51 ] =@expr1073751070 "int operator \"\" i (const char *, int);\nx = \"abc\"i;"
5221: ;
5222: $if $(@expr1073751071 $!@expr1073751072 $assertEquals $(@expr1073751073 "cppcheck-2.8/test/testtokenize.cpp" $, 5222 $, "int operator\"\"i ( const char * , int ) ;\nx = operator\"\"i ( \"abc\" , 3 ) ;" $, $tokenizeAndStringify_ $(@expr1073751074 "cppcheck-2.8/test/testtokenize.cpp" $, 5222 $, code@var909 $) $) $) { $return
5223:
5224: ; }
5225: }
5226:
5227: void simplifyOperatorName28 ( ) {
5228: const char code@var910 [@expr1073751075 93 ] =@expr1073751076 "template<class... Ts> struct overloaded : Ts... { using Ts::operator()...; };\nint main() { }"
5229: ;
5230: $if $(@expr1073751077 $!@expr1073751078 $assertEquals $(@expr1073751079 "cppcheck-2.8/test/testtokenize.cpp" $, 5230 $, "template < class ... Ts > struct overloaded : Ts ... { using Ts :: operator ( ) ... ; } ;\nint main ( ) { }" $, $tokenizeAndStringify_ $(@expr1073751080 "cppcheck-2.8/test/testtokenize.cpp" $, 5230 $, code@var910 $) $) $) { $return
5231:
5232: ; }
5233: }
5234:
5235: void simplifyOperatorName29 ( ) {
5236: Settings settings@var911 ;
5237: settings@var911 .@expr1073751082 standards@var912 .@expr1073751083 cpp@var913 =@expr1073751084 Standards ::@expr1073751085 CPP20@expr1073751081 ;
5238: $if $(@expr1073751086 $!@expr1073751087 $assertEquals $(@expr1073751088 "cppcheck-2.8/test/testtokenize.cpp" $, 5238 $, "auto operator<=> ( ) ;" $, $tokenizeAndStringify_ $(@expr1073751089 "cppcheck-2.8/test/testtokenize.cpp" $, 5238 $, "auto operator<=>();" , settings@var911 $) $) $) { $return ; }
5239: }
5240:
5241: void simplifyOverloadedOperators1 ( ) {
5242: const char code@var914 [@expr1073751090 67 ] =@expr1073751091 "struct S { void operator()(int); };\n\nvoid foo(S x) {\n    x(123);\n}"
5243:
5244:
5245:
5246: ;
5247: $if $(@expr1073751092 $!@expr1073751093 $assertEquals $(@expr1073751094 "cppcheck-2.8/test/testtokenize.cpp" $, 5247 $, "struct S { void operator() ( int ) ; } ;\n\nvoid foo ( S x ) {\nx . operator() ( 123 ) ;\n}" $, $tokenizeAndStringify_ $(@expr1073751095 "cppcheck-2.8/test/testtokenize.cpp" $, 5247 $, code@var914 $) $) $) { $return
5248:
|
5251:
5252: ; }
5253: }
5254:
5255: void simplifyOverloadedOperators2 ( ) {
5256: const char code@var915 [@expr1073751096 70 ] =@expr1073751097 "struct S {\n  void operator()(int);\n  void foo() { (*this)(123); }\n};\n"
5257:
5258:
5259: ;
5260: $if $(@expr1073751098 $!@expr1073751099 $assertEquals $(@expr1073751100 "cppcheck-2.8/test/testtokenize.cpp" $, 5260 $, "struct S {\nvoid operator() ( int ) ;\nvoid foo ( ) { ( * this ) . operator() ( 123 ) ; }\n} ;" $, $tokenizeAndStringify_ $(@expr1073751101 "cppcheck-2.8/test/testtokenize.cpp" $, 5260 $, code@var915 $) $) $) { $return
5261:
5262:
5263:
5264: ; }
5265: }
5266:
5267: void simplifyOverloadedOperators3 ( ) {
5268: const char code@var916 [@expr1073751102 146 ] =@expr1073751103 "struct Func { double operator()(double x) const; };\nvoid foo(double, double);\nvoid test() {\n    Func max;\n    double y = 0;\n    foo(0, max(y));\n}"
5269:
|
5273:
5274: ;
5275: $if $(@expr1073751104 $!@expr1073751105 $assertEquals $(@expr1073751106 "cppcheck-2.8/test/testtokenize.cpp" $, 5275 $, "struct Func { double operator() ( double x ) const ; } ;\nvoid foo ( double , double ) ;\nvoid test ( ) {\nFunc max ;\ndouble y ; y = 0 ;\nfoo ( 0 , max . operator() ( y ) ) ;\n}" $, $tokenizeAndStringify_ $(@expr1073751107 "cppcheck-2.8/test/testtokenize.cpp" $, 5275 $, code@var916 $) $) $) { $return
5276:
|
5281:
5282: ; }
5283: }
5284:
5285: void simplifyNullArray ( ) {
5286: $if $(@expr1073751108 $!@expr1073751109 $assertEquals $(@expr1073751110 "cppcheck-2.8/test/testtokenize.cpp" $, 5286 $, "* ( foo . bar [ 5 ] ) = x ;" $, $tokenizeAndStringify_ $(@expr1073751111 "cppcheck-2.8/test/testtokenize.cpp" $, 5286 $, "0[foo.bar[5]] = x;" $) $) $) { $return ; }
5287: }
5288:
5289: void removeMacrosInGlobalScope ( ) {
5290:
5291: $if $(@expr1073751112 $!@expr1073751113 $assertEquals $(@expr1073751114 "cppcheck-2.8/test/testtokenize.cpp" $, 5291 $, "void f ( ) { }" $, $tokenizeAndStringify_ $(@expr1073751115 "cppcheck-2.8/test/testtokenize.cpp" $, 5291 $, "void f() NOTHROW { }" $) $) $) { $return ; }
5292: $if $(@expr1073751116 $!@expr1073751117 $assertEquals $(@expr1073751118 "cppcheck-2.8/test/testtokenize.cpp" $, 5292 $, "struct Foo { } ;" $, $tokenizeAndStringify_ $(@expr1073751119 "cppcheck-2.8/test/testtokenize.cpp" $, 5292 $, "struct __declspec(dllexport) Foo {};" $) $) $) { $return ; }
5293: $if $(@expr1073751120 $!@expr1073751121 $assertEquals $(@expr1073751122 "cppcheck-2.8/test/testtokenize.cpp" $, 5293 $, "namespace { int a ; }" $, $tokenizeAndStringify_ $(@expr1073751123 "cppcheck-2.8/test/testtokenize.cpp" $, 5293 $, "ABA() namespace { int a ; }" $) $) $) { $return ; }
5294:
5295:
5296: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073751124 "cppcheck-2.8/test/testtokenize.cpp" $, 5296 $, "; AB(foo*) foo::foo() { }" $) $; $assertThrowFail $(@expr1073751125 "cppcheck-2.8/test/testtokenize.cpp" $, 5296 $) $; $} $catch $(@expr1073751126 $const InternalError $&@expr1073751127 $) ${ $} $catch $(@expr1073751128 $... $) ${ $assertThrowFail $(@expr1073751129 "cppcheck-2.8/test/testtokenize.cpp" $, 5296 $) $; $} $} $while $(@expr1073751130 $false $) ;
5297:
5298:
5299: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073751131 "cppcheck-2.8/test/testtokenize.cpp" $, 5299 $, "A(B) foo() {}" $) $; $assertThrowFail $(@expr1073751132 "cppcheck-2.8/test/testtokenize.cpp" $, 5299 $) $; $} $catch $(@expr1073751133 $const InternalError $&@expr1073751134 $) ${ $} $catch $(@expr1073751135 $... $) ${ $assertThrowFail $(@expr1073751136 "cppcheck-2.8/test/testtokenize.cpp" $, 5299 $) $; $} $} $while $(@expr1073751137 $false $) ;
5300:
5301:
5302: $if $(@expr1073751138 $!@expr1073751139 $assertEquals $(@expr1073751140 "cppcheck-2.8/test/testtokenize.cpp" $, 5302 $, "; class foo { }" $, $tokenizeAndStringify_ $(@expr1073751141 "cppcheck-2.8/test/testtokenize.cpp" $, 5302 $, "; AB class foo { }" $) $) $) { $return
5303: ; }
5304: $if $(@expr1073751142 $!@expr1073751143 $assertEquals $(@expr1073751144 "cppcheck-2.8/test/testtokenize.cpp" $, 5304 $, "; CONST struct ABC abc ;" $, $tokenizeAndStringify_ $(@expr1073751145 "cppcheck-2.8/test/testtokenize.cpp" $, 5304 $, "; CONST struct ABC abc ;" $) $) $) { $return
5305: ; }
5306:
5307: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073751146 "cppcheck-2.8/test/testtokenize.cpp" $, 5307 $, "class A {\n  UNKNOWN_MACRO(A)\nprivate:\n  int x;\n};" $) $; $} $catch $(@expr1073751147 $... $) ${ $assertNoThrowFail $(@expr1073751148 "cppcheck-2.8/test/testtokenize.cpp" $, 5307 $) $; $} $} $while $(@expr1073751149 $false $)
5308:
5309:
5310:
5311: ;
5312:
5313: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073751150 "cppcheck-2.8/test/testtokenize.cpp" $, 5313 $, "MACRO(test) void test() { }" $) $; $assertThrowFail $(@expr1073751151 "cppcheck-2.8/test/testtokenize.cpp" $, 5313 $) $; $} $catch $(@expr1073751152 $const InternalError $&@expr1073751153 $) ${ $} $catch $(@expr1073751154 $... $) ${ $assertThrowFail $(@expr1073751155 "cppcheck-2.8/test/testtokenize.cpp" $, 5313 $) $; $} $} $while $(@expr1073751156 $false $) ;
5314:
5315: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073751157 "cppcheck-2.8/test/testtokenize.cpp" $, 5315 $, "BEGIN_MESSAGE_MAP(CSetProgsAdvDlg, CResizableStandAloneDialog)\n    ON_BN_CLICKED(IDC_ADDTOOL, OnBnClickedAddtool)\nEND_MESSAGE_MAP()\n\nBOOL CSetProgsAdvDlg::OnInitDialog() {}" $) $; $assertThrowFail $(@expr1073751158 "cppcheck-2.8/test/testtokenize.cpp" $, 5315 $) $; $} $catch $(@expr1073751159 $const InternalError $&@expr1073751160 $) ${ $} $catch $(@expr1073751161 $... $) ${ $assertThrowFail $(@expr1073751162 "cppcheck-2.8/test/testtokenize.cpp" $, 5315 $) $; $} $} $while $(@expr1073751163 $false $)
5316:
|
5319:
5320: ;
5321: }
5322:
5323: void removeMacroInVarDecl ( ) {
5324:
5325: $if $(@expr1073751164 $!@expr1073751165 $assertEquals $(@expr1073751166 "cppcheck-2.8/test/testtokenize.cpp" $, 5325 $, "void f ( ) { PROGMEM int x ; }" $, $tokenizeAndStringify_ $(@expr1073751167 "cppcheck-2.8/test/testtokenize.cpp" $, 5325 $, "void f() { PROGMEM int x ; }" $) $) $) { $return ; }
5326: $if $(@expr1073751168 $!@expr1073751169 $assertEquals $(@expr1073751170 "cppcheck-2.8/test/testtokenize.cpp" $, 5326 $, "void f ( ) { int x ; }" $, $tokenizeAndStringify_ $(@expr1073751171 "cppcheck-2.8/test/testtokenize.cpp" $, 5326 $, "void f() { SECTION(\".data.ro\") int x ; }" $) $) $) { $return ; }
5327:
5328:
5329: $if $(@expr1073751172 $!@expr1073751173 $assertEquals $(@expr1073751174 "cppcheck-2.8/test/testtokenize.cpp" $, 5329 $, "void f ( ) { CONST int x ; }" $, $tokenizeAndStringify_ $(@expr1073751175 "cppcheck-2.8/test/testtokenize.cpp" $, 5329 $, "void f() { SECTION(\".data.ro\") CONST int x ; }" $) $) $) { $return ; }
5330: $if $(@expr1073751176 $!@expr1073751177 $assertEquals $(@expr1073751178 "cppcheck-2.8/test/testtokenize.cpp" $, 5330 $, "void f ( ) { char a [ 4 ] ; }" $, $tokenizeAndStringify_ $(@expr1073751179 "cppcheck-2.8/test/testtokenize.cpp" $, 5330 $, "void f() { SECTION(\".data.ro\") char a[4]; }" $) $) $) { $return ; }
5331: $if $(@expr1073751180 $!@expr1073751181 $assertEquals $(@expr1073751182 "cppcheck-2.8/test/testtokenize.cpp" $, 5331 $, "void f ( ) { const char a [ 4 ] ; }" $, $tokenizeAndStringify_ $(@expr1073751183 "cppcheck-2.8/test/testtokenize.cpp" $, 5331 $, "void f() { SECTION(\".data.ro\") const char a[4]; }" $) $) $) { $return ; }
5332: $if $(@expr1073751184 $!@expr1073751185 $assertEquals $(@expr1073751186 "cppcheck-2.8/test/testtokenize.cpp" $, 5332 $, "void f ( ) { struct ABC abc ; }" $, $tokenizeAndStringify_ $(@expr1073751187 "cppcheck-2.8/test/testtokenize.cpp" $, 5332 $, "void f() { SECTION(\".data.ro\") struct ABC abc; }" $) $) $) { $return ; }
5333: $if $(@expr1073751188 $!@expr1073751189 $assertEquals $(@expr1073751190 "cppcheck-2.8/test/testtokenize.cpp" $, 5333 $, "void f ( ) { CONST struct ABC abc ; }" $, $tokenizeAndStringify_ $(@expr1073751191 "cppcheck-2.8/test/testtokenize.cpp" $, 5333 $, "void f() { SECTION(\".data.ro\") CONST struct ABC abc; }" $) $) $) { $return ; }
5334: }
5335:
5336: void addSemicolonAfterUnknownMacro ( ) {
5337:
5338: $if $(@expr1073751192 $!@expr1073751193 $assertEquals $(@expr1073751194 "cppcheck-2.8/test/testtokenize.cpp" $, 5338 $, "void f ( ) { MACRO ( ) ; try { } }" $, $tokenizeAndStringify_ $(@expr1073751195 "cppcheck-2.8/test/testtokenize.cpp" $, 5338 $, "void f() { MACRO() try {} }" $) $) $) { $return ; }
5339:
5340: $if $(@expr1073751196 $!@expr1073751197 $assertEquals $(@expr1073751198 "cppcheck-2.8/test/testtokenize.cpp" $, 5340 $, "MACRO ( ) ; using namespace foo ;" $, $tokenizeAndStringify_ $(@expr1073751199 "cppcheck-2.8/test/testtokenize.cpp" $, 5340 $, "MACRO() using namespace foo;" $) $) $) { $return ; }
5341: }
5342:
5343: void multipleAssignment ( ) {
5344: $if $(@expr1073751200 $!@expr1073751201 $assertEquals $(@expr1073751202 "cppcheck-2.8/test/testtokenize.cpp" $, 5344 $, "a = b = 0 ;" $, $tokenizeAndStringify_ $(@expr1073751203 "cppcheck-2.8/test/testtokenize.cpp" $, 5344 $, "a=b=0;" $) $) $) { $return ; }
5345: }
5346:
5347: void platformWin ( ) {
5348: const char code@var917 [@expr1073751207 997 ] =@expr1073751208 "BOOL f;BOOLEAN g;BYTE h;CHAR i;DWORD j;FLOAT k;INT l;INT32 m;INT64 n;LONG o;SHORT p;UCHAR q;UINT r;ULONG s;USHORT t;WORD u;VOID *v;LPBOOL w;PBOOL x;LPBYTE y;PBOOLEAN z;PBYTE A;LPCSTR B;PCSTR C;LPCVOID D;LPDWORD E;LPINT F;PINT G;LPLONG H;PLONG I;LPSTR J;PSTR K;PCHAR L;LPVOID M;PVOID N;BOOL _bool;HFILE hfile;LONG32 long32;LCID lcid;LCTYPE lctype;LGRPID lgrpid;LONG64 long64;PUCHAR puchar;LPCOLORREF lpcolorref;PDWORD pdword;PULONG pulong;SERVICE_STATUS_HANDLE service_status_hanlde;SC_LOCK sc_lock;SC_HANDLE sc_handle;HACCEL haccel;HCONV hconv;HCONVLIST hconvlist;HDDEDATA hddedata;HDESK hdesk;HDROP hdrop;HDWP hdwp;HENHMETAFILE henhmetafile;HHOOK hhook;HKL hkl;HMONITOR hmonitor;HSZ hsz;HWINSTA hwinsta;PWCHAR pwchar;PUSHORT pushort;LANGID langid;DWORD64 dword64;ULONG64 ulong64;LPWSTR lpcwstr;LPCWSTR lpcwstr;LPHANDLE lpHandle;PCWSTR pcwStr;PDWORDLONG pdWordLong;PDWORD_PTR pdWordPtr;PDWORD32 pdWord32;PDWORD64 pdWord64;LONGLONG ll;USN usn;PULONG64 puLong64;PULONG32 puLong32;PFLOAT ptrToFloat;"
5349:
|
5426:
5427: ;
5428:
5429: const char expected@var918 [@expr1073751209 1403 ] =@expr1073751210 "int f ; unsigned char g ; unsigned char h ; char i ; unsigned long j ; float k ; int l ; int m ; long long n ; long o ; short p ; unsigned char q ; unsigned int r ; unsigned long s ; unsigned short t ; unsigned short u ; void * v ; int * w ; int * x ; unsigned char * y ; unsigned char * z ; unsigned char * A ; const char * B ; const char * C ; const void * D ; unsigned long * E ; int * F ; int * G ; long * H ; long * I ; char * J ; char * K ; char * L ; void * M ; void * N ; int _bool ; int hfile ; int long32 ; unsigned long lcid ; unsigned long lctype ; unsigned long lgrpid ; long long long64 ; unsigned char * puchar ; unsigned long * lpcolorref ; unsigned long * pdword ; unsigned long * pulong ; void * service_status_hanlde ; void * sc_lock ; void * sc_handle ; void * haccel ; void * hconv ; void * hconvlist ; void * hddedata ; void * hdesk ; void * hdrop ; void * hdwp ; void * henhmetafile ; void * hhook ; void * hkl ; void * hmonitor ; void * hsz ; void * hwinsta ; wchar_t * pwchar ; unsigned short * pushort ; unsigned short langid ; unsigned long long dword64 ; unsigned long long ulong64 ; wchar_t * lpcwstr ; const wchar_t * lpcwstr ; void * lpHandle ; const wchar_t * pcwStr ; long * pdWordLong ; long * pdWordPtr ; unsigned int * pdWord32 ; unsigned long * pdWord64 ; long long ll ; long long usn ; unsigned long long * puLong64 ; unsigned int * puLong32 ; float * ptrToFloat ;"
5430:
|
5507:
5508: ;
5509:
5510:
5511: const std ::@expr1073751211 string win32A@var919 =@expr1073751212 $tokenizeAndStringifyWindows_ $(@expr1073751213 "cppcheck-2.8/test/testtokenize.cpp" $, 5511 $, code@var917 , true , Settings ::@expr1073751214 Win32A@expr1073751204 $) ;
5512: $if $(@expr1073751215 $!@expr1073751216 $assertEquals $(@expr1073751217 "cppcheck-2.8/test/testtokenize.cpp" $, 5512 $, expected@var918 $, win32A@var919 $) $) { $return ; }
5513: $if $(@expr1073751218 $!@expr1073751219 $assertEquals $(@expr1073751220 "cppcheck-2.8/test/testtokenize.cpp" $, 5513 $, win32A@var919 $, $tokenizeAndStringifyWindows_ $(@expr1073751221 "cppcheck-2.8/test/testtokenize.cpp" $, 5513 $, code@var917 , true , Settings ::@expr1073751222 Win32W@expr1073751205 $) $) $) { $return ; }
5514: $if $(@expr1073751223 $!@expr1073751224 $assertEquals $(@expr1073751225 "cppcheck-2.8/test/testtokenize.cpp" $, 5514 $, win32A@var919 $, $tokenizeAndStringifyWindows_ $(@expr1073751226 "cppcheck-2.8/test/testtokenize.cpp" $, 5514 $, code@var917 , true , Settings ::@expr1073751227 Win64@expr1073751206 $) $) $) { $return ; }
5515: }
5516:
5517: void platformWin32A ( ) {
5518: const char code@var920 [@expr1073751229 461 ] =@expr1073751230 "wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;void foo() {    TCHAR tc = _T(\'c\');     TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}TBYTE tbyte;"
5519:
|
5537:
5538: ;
5539: const char expected@var921 [@expr1073751231 484 ] =@expr1073751232 "wchar_t wc ; char c ; char * ptstr ; char * lptstr ; const char * pctstr ; const char * lpctstr ; void foo ( ) { char tc ; tc = \'c\' ; char src [ 10 ] = \"123456789\" ; char dst [ 10 ] ; strcpy ( dst , src ) ; dst [ 0 ] = 0 ; strcat ( dst , src ) ; char * d ; d = strdup ( str ) ; printf ( \"Hello world!\" ) ; sprintf ( dst , \"Hello!\" ) ; _snprintf ( dst , sizeof ( dst ) / sizeof ( char ) , \"Hello world!\" ) ; scanf ( \"%s\" , dst ) ; sscanf ( dst , \"%s\" , dst ) ; } unsigned char tbyte ;"
5540:
|
5558:
5559: ;
5560: $if $(@expr1073751233 $!@expr1073751234 $assertEquals $(@expr1073751235 "cppcheck-2.8/test/testtokenize.cpp" $, 5560 $, expected@var921 $, $tokenizeAndStringifyWindows_ $(@expr1073751236 "cppcheck-2.8/test/testtokenize.cpp" $, 5560 $, code@var920 , true , Settings ::@expr1073751237 Win32A@expr1073751228 $) $) $) { $return ; }
5561: }
5562:
5563: void platformWin32W ( ) {
5564: const char code@var922 [@expr1073751239 460 ] =@expr1073751240 "wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;TBYTE tbyte;void foo() {    TCHAR tc = _T(\'c\');    TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}"
5565:
|
5583:
5584: ;
5585: const char expected@var923 [@expr1073751241 529 ] =@expr1073751242 "wchar_t wc ; wchar_t c ; wchar_t * ptstr ; wchar_t * lptstr ; const wchar_t * pctstr ; const wchar_t * lpctstr ; unsigned wchar_t tbyte ; void foo ( ) { wchar_t tc ; tc = L\'c\' ; wchar_t src [ 10 ] = L\"123456789\" ; wchar_t dst [ 10 ] ; wcscpy ( dst , src ) ; dst [ 0 ] = 0 ; wcscat ( dst , src ) ; wchar_t * d ; d = wcsdup ( str ) ; wprintf ( L\"Hello world!\" ) ; swprintf ( dst , L\"Hello!\" ) ; _snwprintf ( dst , sizeof ( dst ) / sizeof ( wchar_t ) , L\"Hello world!\" ) ; wscanf ( L\"%s\" , dst ) ; swscanf ( dst , L\"%s\" , dst ) ; }"
5586:
|
5604:
5605: ;
5606: $if $(@expr1073751243 $!@expr1073751244 $assertEquals $(@expr1073751245 "cppcheck-2.8/test/testtokenize.cpp" $, 5606 $, expected@var923 $, $tokenizeAndStringifyWindows_ $(@expr1073751246 "cppcheck-2.8/test/testtokenize.cpp" $, 5606 $, code@var922 , true , Settings ::@expr1073751247 Win32W@expr1073751238 $) $) $) { $return ; }
5607: }
5608:
5609: void platformWin32AStringCat ( ) {
5610: const char code@var924 [@expr1073751249 46 ] =@expr1073751250 "TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");" ;
5611: const char expected@var925 [@expr1073751251 33 ] =@expr1073751252 "char text [ 10 ] = \"123456789\" ;" ;
5612: $if $(@expr1073751253 $!@expr1073751254 $assertEquals $(@expr1073751255 "cppcheck-2.8/test/testtokenize.cpp" $, 5612 $, expected@var925 $, $tokenizeAndStringifyWindows_ $(@expr1073751256 "cppcheck-2.8/test/testtokenize.cpp" $, 5612 $, code@var924 , true , Settings ::@expr1073751257 Win32A@expr1073751248 $) $) $) { $return ; }
5613: }
5614:
5615: void platformWin32WStringCat ( ) {
5616: const char code@var926 [@expr1073751259 46 ] =@expr1073751260 "TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");" ;
5617: const char expected@var927 [@expr1073751261 37 ] =@expr1073751262 "wchar_t text [ 10 ] = L\"123456789\" ;" ;
5618: $if $(@expr1073751263 $!@expr1073751264 $assertEquals $(@expr1073751265 "cppcheck-2.8/test/testtokenize.cpp" $, 5618 $, expected@var927 $, $tokenizeAndStringifyWindows_ $(@expr1073751266 "cppcheck-2.8/test/testtokenize.cpp" $, 5618 $, code@var926 , true , Settings ::@expr1073751267 Win32W@expr1073751258 $) $) $) { $return ; }
5619: }
5620:
5621: void platformWinWithNamespace ( ) {
5622: const char code1@var928 [@expr1073751269 37 ] =@expr1073751270 "UINT32 a; ::UINT32 b; foo::UINT32 c;" ;
5623: const char expected1@var929 [@expr1073751271 52 ] =@expr1073751272 "unsigned int a ; unsigned int b ; foo :: UINT32 c ;" ;
5624: $if $(@expr1073751273 $!@expr1073751274 $assertEquals $(@expr1073751275 "cppcheck-2.8/test/testtokenize.cpp" $, 5624 $, expected1@var929 $, $tokenizeAndStringifyWindows_ $(@expr1073751276 "cppcheck-2.8/test/testtokenize.cpp" $, 5624 $, code1@var928 , true , Settings ::@expr9453 Win32A@expr9444 $) $) $) { $return ; }
5625:
5626: const char code2@var930 [@expr1073751278 40 ] =@expr1073751279 "LPCVOID a; ::LPCVOID b; foo::LPCVOID c;" ;
5627: const char expected2@var931 [@expr1073751280 53 ] =@expr1073751281 "const void * a ; const void * b ; foo :: LPCVOID c ;" ;
5628: $if $(@expr1073751282 $!@expr1073751283 $assertEquals $(@expr1073751284 "cppcheck-2.8/test/testtokenize.cpp" $, 5628 $, expected2@var931 $, $tokenizeAndStringifyWindows_ $(@expr1073751285 "cppcheck-2.8/test/testtokenize.cpp" $, 5628 $, code2@var930 , true , Settings ::@expr9453 Win32A@expr9444 $) $) $) { $return ; }
5629: }
5630:
5631: void isZeroNumber ( ) const {
5632: $if $(@expr1073751287 $!@expr1073751288 $assertEquals $(@expr1073751289 "cppcheck-2.8/test/testtokenize.cpp" $, 5632 $, true $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751291 "0.0" ) $) $) { $return ; }
5633: $if $(@expr1073751292 $!@expr1073751293 $assertEquals $(@expr1073751294 "cppcheck-2.8/test/testtokenize.cpp" $, 5633 $, true $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751296 "+0.0" ) $) $) { $return ; }
5634: $if $(@expr1073751297 $!@expr1073751298 $assertEquals $(@expr1073751299 "cppcheck-2.8/test/testtokenize.cpp" $, 5634 $, true $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751301 "-0.0" ) $) $) { $return ; }
5635: $if $(@expr1073751302 $!@expr1073751303 $assertEquals $(@expr1073751304 "cppcheck-2.8/test/testtokenize.cpp" $, 5635 $, true $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751306 "+0L" ) $) $) { $return ; }
5636: $if $(@expr1073751307 $!@expr1073751308 $assertEquals $(@expr1073751309 "cppcheck-2.8/test/testtokenize.cpp" $, 5636 $, true $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751311 "+0" ) $) $) { $return ; }
5637: $if $(@expr1073751312 $!@expr1073751313 $assertEquals $(@expr1073751314 "cppcheck-2.8/test/testtokenize.cpp" $, 5637 $, true $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751316 "-0" ) $) $) { $return ; }
5638: $if $(@expr1073751317 $!@expr1073751318 $assertEquals $(@expr1073751319 "cppcheck-2.8/test/testtokenize.cpp" $, 5638 $, true $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751321 "-0E+0" ) $) $) { $return ; }
5639:
5640: $if $(@expr1073751322 $!@expr1073751323 $assertEquals $(@expr1073751324 "cppcheck-2.8/test/testtokenize.cpp" $, 5640 $, false $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751326 "1.0" ) $) $) { $return ; }
5641: $if $(@expr1073751327 $!@expr1073751328 $assertEquals $(@expr1073751329 "cppcheck-2.8/test/testtokenize.cpp" $, 5641 $, false $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751331 "+1.0" ) $) $) { $return ; }
5642: $if $(@expr1073751332 $!@expr1073751333 $assertEquals $(@expr1073751334 "cppcheck-2.8/test/testtokenize.cpp" $, 5642 $, false $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751336 "-1" ) $) $) { $return ; }
5643: $if $(@expr1073751337 $!@expr1073751338 $assertEquals $(@expr1073751339 "cppcheck-2.8/test/testtokenize.cpp" $, 5643 $, false $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751341 "" ) $) $) { $return ; }
5644: $if $(@expr1073751342 $!@expr1073751343 $assertEquals $(@expr1073751344 "cppcheck-2.8/test/testtokenize.cpp" $, 5644 $, false $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751346 "garbage" ) $) $) { $return ; }
5645: $if $(@expr1073751347 $!@expr1073751348 $assertEquals $(@expr1073751349 "cppcheck-2.8/test/testtokenize.cpp" $, 5645 $, false $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751351 "E2" ) $) $) { $return ; }
5646: $if $(@expr1073751352 $!@expr1073751353 $assertEquals $(@expr1073751354 "cppcheck-2.8/test/testtokenize.cpp" $, 5646 $, false $, Tokenizer ::@expr9466 isZeroNumber (@expr1073751356 "2e" ) $) $) { $return ; }
5647: }
5648:
5649: void isOneNumber ( ) const {
5650: $if $(@expr1073751357 $!@expr1073751358 $assertEquals $(@expr1073751359 "cppcheck-2.8/test/testtokenize.cpp" $, 5650 $, true $, Tokenizer ::@expr9536 isOneNumber (@expr1073751361 "1.0" ) $) $) { $return ; }
5651: $if $(@expr1073751362 $!@expr1073751363 $assertEquals $(@expr1073751364 "cppcheck-2.8/test/testtokenize.cpp" $, 5651 $, true $, Tokenizer ::@expr9536 isOneNumber (@expr1073751366 "+1.0" ) $) $) { $return ; }
5652: $if $(@expr1073751367 $!@expr1073751368 $assertEquals $(@expr1073751369 "cppcheck-2.8/test/testtokenize.cpp" $, 5652 $, true $, Tokenizer ::@expr9536 isOneNumber (@expr1073751371 "1.0e+0" ) $) $) { $return ; }
5653: $if $(@expr1073751372 $!@expr1073751373 $assertEquals $(@expr1073751374 "cppcheck-2.8/test/testtokenize.cpp" $, 5653 $, true $, Tokenizer ::@expr9536 isOneNumber (@expr1073751376 "+1L" ) $) $) { $return ; }
5654: $if $(@expr1073751377 $!@expr1073751378 $assertEquals $(@expr1073751379 "cppcheck-2.8/test/testtokenize.cpp" $, 5654 $, true $, Tokenizer ::@expr9536 isOneNumber (@expr1073751381 "+1" ) $) $) { $return ; }
5655: $if $(@expr1073751382 $!@expr1073751383 $assertEquals $(@expr1073751384 "cppcheck-2.8/test/testtokenize.cpp" $, 5655 $, true $, Tokenizer ::@expr9536 isOneNumber (@expr1073751386 "1" ) $) $) { $return ; }
5656: $if $(@expr1073751387 $!@expr1073751388 $assertEquals $(@expr1073751389 "cppcheck-2.8/test/testtokenize.cpp" $, 5656 $, true $, Tokenizer ::@expr9536 isOneNumber (@expr1073751391 "+1E+0" ) $) $) { $return ; }
5657:
5658: $if $(@expr1073751392 $!@expr1073751393 $assertEquals $(@expr1073751394 "cppcheck-2.8/test/testtokenize.cpp" $, 5658 $, false $, Tokenizer ::@expr9536 isOneNumber (@expr1073751396 "0.0" ) $) $) { $return ; }
5659: $if $(@expr1073751397 $!@expr1073751398 $assertEquals $(@expr1073751399 "cppcheck-2.8/test/testtokenize.cpp" $, 5659 $, false $, Tokenizer ::@expr9536 isOneNumber (@expr1073751401 "+0.0" ) $) $) { $return ; }
5660: $if $(@expr1073751402 $!@expr1073751403 $assertEquals $(@expr1073751404 "cppcheck-2.8/test/testtokenize.cpp" $, 5660 $, false $, Tokenizer ::@expr9536 isOneNumber (@expr1073751406 "-0" ) $) $) { $return ; }
5661: $if $(@expr1073751407 $!@expr1073751408 $assertEquals $(@expr1073751409 "cppcheck-2.8/test/testtokenize.cpp" $, 5661 $, false $, Tokenizer ::@expr9536 isOneNumber (@expr1073751411 "" ) $) $) { $return ; }
5662: $if $(@expr1073751412 $!@expr1073751413 $assertEquals $(@expr1073751414 "cppcheck-2.8/test/testtokenize.cpp" $, 5662 $, false $, Tokenizer ::@expr9536 isOneNumber (@expr1073751416 "garbage" ) $) $) { $return ; }
5663: }
5664:
5665: void isTwoNumber ( ) const {
5666: $if $(@expr1073751417 $!@expr1073751418 $assertEquals $(@expr1073751419 "cppcheck-2.8/test/testtokenize.cpp" $, 5666 $, true $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751421 "2.0" ) $) $) { $return ; }
5667: $if $(@expr1073751422 $!@expr1073751423 $assertEquals $(@expr1073751424 "cppcheck-2.8/test/testtokenize.cpp" $, 5667 $, true $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751426 "+2.0" ) $) $) { $return ; }
5668: $if $(@expr1073751427 $!@expr1073751428 $assertEquals $(@expr1073751429 "cppcheck-2.8/test/testtokenize.cpp" $, 5668 $, true $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751431 "2.0e+0" ) $) $) { $return ; }
5669: $if $(@expr1073751432 $!@expr1073751433 $assertEquals $(@expr1073751434 "cppcheck-2.8/test/testtokenize.cpp" $, 5669 $, true $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751436 "+2L" ) $) $) { $return ; }
5670: $if $(@expr1073751437 $!@expr1073751438 $assertEquals $(@expr1073751439 "cppcheck-2.8/test/testtokenize.cpp" $, 5670 $, true $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751441 "+2" ) $) $) { $return ; }
5671: $if $(@expr1073751442 $!@expr1073751443 $assertEquals $(@expr1073751444 "cppcheck-2.8/test/testtokenize.cpp" $, 5671 $, true $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751446 "2" ) $) $) { $return ; }
5672: $if $(@expr1073751447 $!@expr1073751448 $assertEquals $(@expr1073751449 "cppcheck-2.8/test/testtokenize.cpp" $, 5672 $, true $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751451 "+2E+0" ) $) $) { $return ; }
5673:
5674: $if $(@expr1073751452 $!@expr1073751453 $assertEquals $(@expr1073751454 "cppcheck-2.8/test/testtokenize.cpp" $, 5674 $, false $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751456 "0.0" ) $) $) { $return ; }
5675: $if $(@expr1073751457 $!@expr1073751458 $assertEquals $(@expr1073751459 "cppcheck-2.8/test/testtokenize.cpp" $, 5675 $, false $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751461 "+0.0" ) $) $) { $return ; }
5676: $if $(@expr1073751462 $!@expr1073751463 $assertEquals $(@expr1073751464 "cppcheck-2.8/test/testtokenize.cpp" $, 5676 $, false $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751466 "-0" ) $) $) { $return ; }
5677: $if $(@expr1073751467 $!@expr1073751468 $assertEquals $(@expr1073751469 "cppcheck-2.8/test/testtokenize.cpp" $, 5677 $, false $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751471 "" ) $) $) { $return ; }
5678: $if $(@expr1073751472 $!@expr1073751473 $assertEquals $(@expr1073751474 "cppcheck-2.8/test/testtokenize.cpp" $, 5678 $, false $, Tokenizer ::@expr9596 isTwoNumber (@expr1073751476 "garbage" ) $) $) { $return ; }
5679: }
5680:
5681: void simplifyStaticConst ( ) {
5682: const char code1@var932 [@expr1073751477 44 ] =@expr1073751478 "class foo { public: bool const static c ; }" ;
5683: const char expected1@var933 [@expr1073751479 44 ] =@expr1073751480 "class foo { public: static const bool c ; }" ;
5684: $if $(@expr1073751481 $!@expr1073751482 $assertEquals $(@expr1073751483 "cppcheck-2.8/test/testtokenize.cpp" $, 5684 $, expected1@var933 $, $tokenizeAndStringify_ $(@expr1073751484 "cppcheck-2.8/test/testtokenize.cpp" $, 5684 $, code1@var932 $) $) $) { $return ; }
5685:
5686: const char code2@var934 [@expr1073751485 820 ] =@expr1073751486
5687: "int long long f()\n{\nstatic const long long signed int i1;\nstatic const long long int signed i2;\nstatic const signed long long int i3;\nstatic const signed int long long i4;\nstatic const int signed long long i5;\nstatic const int long long signed i6;\nlong long static const signed int i7;\nlong long static const int signed i8;\nsigned static const long long int i9;\nsigned static const int long long i10;\nint static const signed long long i11;\nint static const long long signed i12;\nlong long signed int static const i13;\nlong long int signed static const i14;\nsigned long long int static const i15;\nsigned int long long static const i16;\nint signed long long static const i17;\nint long long signed static const i18;\nreturn i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12\n+ i13 + i14 + i15 + i16 + i17 + i18;\n}"
5688:
|
5708:
5709: ;
5710: const char expected2@var935 [@expr1073751487 765 ] =@expr1073751488
5711: "long long f ( )\n{\nstatic const signed long long i1 ;\nstatic const signed long long i2 ;\nstatic const signed long long i3 ;\nstatic const signed long long i4 ;\nstatic const signed long long i5 ;\nstatic const signed long long i6 ;\nstatic const signed long long i7 ;\nstatic const signed long long i8 ;\nstatic const signed long long i9 ;\nstatic const signed long long i10 ;\nstatic const signed long long i11 ;\nstatic const signed long long i12 ;\nstatic const signed long long i13 ;\nstatic const signed long long i14 ;\nstatic const signed long long i15 ;\nstatic const signed long long i16 ;\nstatic const signed long long i17 ;\nstatic const signed long long i18 ;\nreturn i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12\n+ i13 + i14 + i15 + i16 + i17 + i18 ;\n}"
5712:
|
5732:
5733: ;
5734: $if $(@expr1073751489 $!@expr1073751490 $assertEquals $(@expr1073751491 "cppcheck-2.8/test/testtokenize.cpp" $, 5734 $, expected2@var935 $, $tokenizeAndStringify_ $(@expr1073751492 "cppcheck-2.8/test/testtokenize.cpp" $, 5734 $, code2@var934 $) $) $) { $return ; }
5735:
5736: const char code3@var936 [@expr1073751493 34 ] =@expr1073751494 "const unsigned long extern int i;" ;
5737: const char expected3@var937 [@expr1073751495 31 ] =@expr1073751496 "extern const unsigned long i ;" ;
5738: $if $(@expr1073751497 $!@expr1073751498 $assertEquals $(@expr1073751499 "cppcheck-2.8/test/testtokenize.cpp" $, 5738 $, expected3@var937 $, $tokenizeAndStringify_ $(@expr1073751500 "cppcheck-2.8/test/testtokenize.cpp" $, 5738 $, code3@var936 $) $) $) { $return ; }
5739: }
5740:
5741: void simplifyCPPAttribute ( ) {
5742: $if $(@expr1073751502 $!@expr1073751503 $assertEquals $(@expr1073751504 "cppcheck-2.8/test/testtokenize.cpp" $, 5742 $, "int f ( ) ;" $, $tokenizeAndStringify_ $(@expr1073751505 "cppcheck-2.8/test/testtokenize.cpp" $, 5742 $, "[[deprecated]] int f();" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5743: ; }
5744:
5745: $if $(@expr1073751507 $!@expr1073751508 $assertEquals $(@expr1073751509 "cppcheck-2.8/test/testtokenize.cpp" $, 5745 $, "[ [ deprecated ] ] int f ( ) ;" $, $tokenizeAndStringify_ $(@expr1073751510 "cppcheck-2.8/test/testtokenize.cpp" $, 5745 $, "[[deprecated]] int f();" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , false $) $) $) { $return
5746: ; }
5747:
5748: $if $(@expr1073751512 $!@expr1073751513 $assertEquals $(@expr1073751514 "cppcheck-2.8/test/testtokenize.cpp" $, 5748 $, "[ [ deprecated ] ] int f ( ) ;" $, $tokenizeAndStringify_ $(@expr1073751515 "cppcheck-2.8/test/testtokenize.cpp" $, 5748 $, "[[deprecated]] int f();" , true , Settings ::@expr9682 Native@expr9677 , "test.c" , true $) $) $) { $return
5749: ; }
5750:
5751: $if $(@expr1073751517 $!@expr1073751518 $assertEquals $(@expr1073751519 "cppcheck-2.8/test/testtokenize.cpp" $, 5751 $, "template < class T > int f ( ) { }" $, $tokenizeAndStringify_ $(@expr1073751520 "cppcheck-2.8/test/testtokenize.cpp" $, 5751 $, "template <class T> [[noreturn]] int f(){}" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5752: ; }
5753:
5754: $if $(@expr1073751522 $!@expr1073751523 $assertEquals $(@expr1073751524 "cppcheck-2.8/test/testtokenize.cpp" $, 5754 $, "int f ( int i ) ;" $, $tokenizeAndStringify_ $(@expr1073751525 "cppcheck-2.8/test/testtokenize.cpp" $, 5754 $, "[[maybe_unused]] int f([[maybe_unused]] int i);" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5755: ; }
5756:
5757: $if $(@expr1073751527 $!@expr1073751528 $assertEquals $(@expr1073751529 "cppcheck-2.8/test/testtokenize.cpp" $, 5757 $, "[ [ maybe_unused ] ] int f ( [ [ maybe_unused ] ] int i ) ;" $, $tokenizeAndStringify_ $(@expr1073751530 "cppcheck-2.8/test/testtokenize.cpp" $, 5757 $, "[[maybe_unused]] int f([[maybe_unused]] int i);" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , false $) $) $) { $return
5758: ; }
5759:
5760: $if $(@expr1073751532 $!@expr1073751533 $assertEquals $(@expr1073751534 "cppcheck-2.8/test/testtokenize.cpp" $, 5760 $, "struct a ;" $, $tokenizeAndStringify_ $(@expr1073751535 "cppcheck-2.8/test/testtokenize.cpp" $, 5760 $, "struct [[]] a;" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5761: ; }
5762:
5763: $if $(@expr1073751537 $!@expr1073751538 $assertEquals $(@expr1073751539 "cppcheck-2.8/test/testtokenize.cpp" $, 5763 $, "struct a ;" $, $tokenizeAndStringify_ $(@expr1073751540 "cppcheck-2.8/test/testtokenize.cpp" $, 5763 $, "struct [[,]] a;" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5764: ; }
5765:
5766: $if $(@expr1073751542 $!@expr1073751543 $assertEquals $(@expr1073751544 "cppcheck-2.8/test/testtokenize.cpp" $, 5766 $, "struct a ;" $, $tokenizeAndStringify_ $(@expr1073751545 "cppcheck-2.8/test/testtokenize.cpp" $, 5766 $, "struct [[deprecated,]] a;" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5767: ; }
5768:
5769: $if $(@expr1073751547 $!@expr1073751548 $assertEquals $(@expr1073751549 "cppcheck-2.8/test/testtokenize.cpp" $, 5769 $, "struct a ;" $, $tokenizeAndStringify_ $(@expr1073751550 "cppcheck-2.8/test/testtokenize.cpp" $, 5769 $, "struct [[,,]] a;" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5770: ; }
5771:
5772: $if $(@expr1073751552 $!@expr1073751553 $assertEquals $(@expr1073751554 "cppcheck-2.8/test/testtokenize.cpp" $, 5772 $, "struct a ;" $, $tokenizeAndStringify_ $(@expr1073751555 "cppcheck-2.8/test/testtokenize.cpp" $, 5772 $, "struct [[deprecated,,]] a;" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5773: ; }
5774:
5775: $if $(@expr1073751557 $!@expr1073751558 $assertEquals $(@expr1073751559 "cppcheck-2.8/test/testtokenize.cpp" $, 5775 $, "struct a ;" $, $tokenizeAndStringify_ $(@expr1073751560 "cppcheck-2.8/test/testtokenize.cpp" $, 5775 $, "struct [[deprecated,maybe_unused,]] a;" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5776: ; }
5777:
5778: $if $(@expr1073751562 $!@expr1073751563 $assertEquals $(@expr1073751564 "cppcheck-2.8/test/testtokenize.cpp" $, 5778 $, "struct a ;" $, $tokenizeAndStringify_ $(@expr1073751565 "cppcheck-2.8/test/testtokenize.cpp" $, 5778 $, "struct [[,,,]] a;" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5779: ; }
5780:
5781: $if $(@expr1073751567 $!@expr1073751568 $assertEquals $(@expr1073751569 "cppcheck-2.8/test/testtokenize.cpp" $, 5781 $, "struct a ;" $, $tokenizeAndStringify_ $(@expr1073751570 "cppcheck-2.8/test/testtokenize.cpp" $, 5781 $, "struct alignas(int) a;" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5782: ; }
5783:
5784: $if $(@expr1073751572 $!@expr1073751573 $assertEquals $(@expr1073751574 "cppcheck-2.8/test/testtokenize.cpp" $, 5784 $, "struct a ;" $, $tokenizeAndStringify_ $(@expr1073751575 "cppcheck-2.8/test/testtokenize.cpp" $, 5784 $, "struct alignas ( alignof ( float ) ) a;" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5785: ; }
5786:
5787: $if $(@expr1073751577 $!@expr1073751578 $assertEquals $(@expr1073751579 "cppcheck-2.8/test/testtokenize.cpp" $, 5787 $, "char a [ 256 ] ;" $, $tokenizeAndStringify_ $(@expr1073751580 "cppcheck-2.8/test/testtokenize.cpp" $, 5787 $, "alignas(256) char a[256];" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5788: ; }
5789:
5790: $if $(@expr1073751582 $!@expr1073751583 $assertEquals $(@expr1073751584 "cppcheck-2.8/test/testtokenize.cpp" $, 5790 $, "struct a ;" $, $tokenizeAndStringify_ $(@expr1073751585 "cppcheck-2.8/test/testtokenize.cpp" $, 5790 $, "struct alignas(float) [[deprecated(reason)]] a;" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5791: ; }
5792:
5793: $if $(@expr1073751587 $!@expr1073751588 $assertEquals $(@expr1073751589 "cppcheck-2.8/test/testtokenize.cpp" $, 5793 $, "struct a ;" $, $tokenizeAndStringify_ $(@expr1073751590 "cppcheck-2.8/test/testtokenize.cpp" $, 5793 $, "struct [[deprecated,maybe_unused]] alignas(double) [[trivial_abi]] a;" , true , Settings ::@expr9682 Native@expr9677 , "test.cpp" , true $) $) $) { $return
5794: ; }
5795: }
5796:
5797: void simplifyCaseRange ( ) {
5798: $if $(@expr1073751592 $!@expr1073751593 $assertEquals $(@expr1073751594 "cppcheck-2.8/test/testtokenize.cpp" $, 5798 $, "void f ( ) { switch ( x ) { case 1 : case 2 : case 3 : case 4 : ; } }" $, $tokenizeAndStringify_ $(@expr1073751595 "cppcheck-2.8/test/testtokenize.cpp" $, 5798 $, "void f() { switch(x) { case 1 ... 4: } }" $) $) $) { $return ; }
5799: $if $(@expr1073751596 $!@expr1073751597 $assertEquals $(@expr1073751598 "cppcheck-2.8/test/testtokenize.cpp" $, 5799 $, "void f ( ) { switch ( x ) { case 4 ... 1 : ; } }" $, $tokenizeAndStringify_ $(@expr1073751599 "cppcheck-2.8/test/testtokenize.cpp" $, 5799 $, "void f() { switch(x) { case 4 ... 1: } }" $) $) $) { $return ; }
5800: $tokenizeAndStringify_ $(@expr1073751600 "cppcheck-2.8/test/testtokenize.cpp" $, 5800 $, "void f() { switch(x) { case 1 ... 1000000: } }" $) ;
5801:
5802: $if $(@expr1073751601 $!@expr1073751602 $assertEquals $(@expr1073751603 "cppcheck-2.8/test/testtokenize.cpp" $, 5802 $, "void f ( ) { switch ( x ) { case 'a' : case 98 : case 'c' : ; } }" $, $tokenizeAndStringify_ $(@expr1073751604 "cppcheck-2.8/test/testtokenize.cpp" $, 5802 $, "void f() { switch(x) { case 'a' ... 'c': } }" $) $) $) { $return ; }
5803: $if $(@expr1073751605 $!@expr1073751606 $assertEquals $(@expr1073751607 "cppcheck-2.8/test/testtokenize.cpp" $, 5803 $, "void f ( ) { switch ( x ) { case 'c' ... 'a' : ; } }" $, $tokenizeAndStringify_ $(@expr1073751608 "cppcheck-2.8/test/testtokenize.cpp" $, 5803 $, "void f() { switch(x) { case 'c' ... 'a': } }" $) $) $) { $return ; }
5804:
5805: $if $(@expr1073751609 $!@expr1073751610 $assertEquals $(@expr1073751611 "cppcheck-2.8/test/testtokenize.cpp" $, 5805 $, "void f ( ) { switch ( x ) { case '[' : case 92 : case ']' : ; } }" $, $tokenizeAndStringify_ $(@expr1073751612 "cppcheck-2.8/test/testtokenize.cpp" $, 5805 $, "void f() { switch(x) { case '[' ... ']': } }" $) $) $) { $return ; }
5806:
5807: $if $(@expr1073751613 $!@expr1073751614 $assertEquals $(@expr1073751615 "cppcheck-2.8/test/testtokenize.cpp" $, 5807 $, "void f ( ) { switch ( x ) { case '&' : case 39 : case '(' : ; } }" $, $tokenizeAndStringify_ $(@expr1073751616 "cppcheck-2.8/test/testtokenize.cpp" $, 5807 $, "void f() { switch(x) { case '&' ... '(': } }" $) $) $) { $return ; }
5808: $if $(@expr1073751617 $!@expr1073751618 $assertEquals $(@expr1073751619 "cppcheck-2.8/test/testtokenize.cpp" $, 5808 $, "void f ( ) { switch ( x ) { case '\\x61' : case 98 : case '\\x63' : ; } }" $, $tokenizeAndStringify_ $(@expr1073751620 "cppcheck-2.8/test/testtokenize.cpp" $, 5808 $, "void f() { switch(x) { case '\\x61' ... '\\x63': } }" $) $) $) { $return ; }
5809: }
5810:
5811: void simplifyEmptyNamespaces ( ) {
5812: $if $(@expr1073751621 $!@expr1073751622 $assertEquals $(@expr1073751623 "cppcheck-2.8/test/testtokenize.cpp" $, 5812 $, ";" $, $tokenizeAndStringify_ $(@expr1073751624 "cppcheck-2.8/test/testtokenize.cpp" $, 5812 $, "namespace { }" $) $) $) { $return ; }
5813: $if $(@expr1073751625 $!@expr1073751626 $assertEquals $(@expr1073751627 "cppcheck-2.8/test/testtokenize.cpp" $, 5813 $, ";" $, $tokenizeAndStringify_ $(@expr1073751628 "cppcheck-2.8/test/testtokenize.cpp" $, 5813 $, "namespace foo { }" $) $) $) { $return ; }
5814: $if $(@expr1073751629 $!@expr1073751630 $assertEquals $(@expr1073751631 "cppcheck-2.8/test/testtokenize.cpp" $, 5814 $, ";" $, $tokenizeAndStringify_ $(@expr1073751632 "cppcheck-2.8/test/testtokenize.cpp" $, 5814 $, "namespace foo { namespace { } }" $) $) $) { $return ; }
5815: $if $(@expr1073751633 $!@expr1073751634 $assertEquals $(@expr1073751635 "cppcheck-2.8/test/testtokenize.cpp" $, 5815 $, ";" $, $tokenizeAndStringify_ $(@expr1073751636 "cppcheck-2.8/test/testtokenize.cpp" $, 5815 $, "namespace { namespace { } }" $) $) $) { $return ; }
5816: $if $(@expr1073751637 $!@expr1073751638 $assertEquals $(@expr1073751639 "cppcheck-2.8/test/testtokenize.cpp" $, 5816 $, ";" $, $tokenizeAndStringify_ $(@expr1073751640 "cppcheck-2.8/test/testtokenize.cpp" $, 5816 $, "namespace foo { namespace bar { } }" $) $) $) { $return ; }
5817: }
5818:
5819: void prepareTernaryOpForAST ( ) {
5820: $if $(@expr1073751641 $!@expr1073751642 $assertEquals $(@expr1073751643 "cppcheck-2.8/test/testtokenize.cpp" $, 5820 $, "a ? b : c ;" $, $tokenizeAndStringify_ $(@expr1073751644 "cppcheck-2.8/test/testtokenize.cpp" $, 5820 $, "a ? b : c;" $) $) $) { $return ; }
5821:
5822: $if $(@expr1073751645 $!@expr1073751646 $assertEquals $(@expr1073751647 "cppcheck-2.8/test/testtokenize.cpp" $, 5822 $, "a ? ( b , c ) : d ;" $, $tokenizeAndStringify_ $(@expr1073751648 "cppcheck-2.8/test/testtokenize.cpp" $, 5822 $, "a ? b , c : d;" $) $) $) { $return ; }
5823: $if $(@expr1073751649 $!@expr1073751650 $assertEquals $(@expr1073751651 "cppcheck-2.8/test/testtokenize.cpp" $, 5823 $, "a ? ( b , c ) : d ;" $, $tokenizeAndStringify_ $(@expr1073751652 "cppcheck-2.8/test/testtokenize.cpp" $, 5823 $, "a ? (b , c) : d;" $) $) $) { $return ; }
5824:
5825: $if $(@expr1073751653 $!@expr1073751654 $assertEquals $(@expr1073751655 "cppcheck-2.8/test/testtokenize.cpp" $, 5825 $, "a ? ( 1 ? ( a , b ) : 3 ) : d ;" $, $tokenizeAndStringify_ $(@expr1073751656 "cppcheck-2.8/test/testtokenize.cpp" $, 5825 $, "a ? 1 ? a, b : 3 : d;" $) $) $) { $return ; }
5826:
5827: $if $(@expr1073751657 $!@expr1073751658 $assertEquals $(@expr1073751659 "cppcheck-2.8/test/testtokenize.cpp" $, 5827 $, "a ? ( std :: map < int , int > ( ) ) : 0 ;" $, $tokenizeAndStringify_ $(@expr1073751660 "cppcheck-2.8/test/testtokenize.cpp" $, 5827 $, "typedef std::map<int,int> mymap; a ? mymap() : 0;" $) $) $) { $return ; }
5828:
5829: $if $(@expr1073751661 $!@expr1073751662 $assertEquals $(@expr1073751663 "cppcheck-2.8/test/testtokenize.cpp" $, 5829 $, "a ? ( b < c ) : d > e" $, $tokenizeAndStringify_ $(@expr1073751664 "cppcheck-2.8/test/testtokenize.cpp" $, 5829 $, "a ? b < c : d > e" $) $) $) { $return ; }
5830: }
5831:
5832: enum class AstStyle {
5833: Simple ,
5834: Z3
5835: } ;
5836:
5837: std :: string testAst ( const char code@var938 [ ] , AstStyle style@var939 = AstStyle :: Simple ) {
5838:
5839: Tokenizer tokenList@var940 (@expr1073751665 &@expr1073751666 settings0@var102 , nullptr ) ;
5840: std ::@expr1073751667 istringstream istr@var941 (@expr1073751668 code@var938 ) ;
5841: if (@expr1073751669 !@expr1073751670 tokenList@var940 .@expr9847 list@var942 .@expr1073751672 createTokens (@expr1073751673 istr@var941 , "test.cpp" ) ) {
5842: return "ERROR" ; }
5843:
5844: tokenList@var940 .@expr1073751674 combineStringAndCharLiterals (@expr1073751675 ) ;
5845: tokenList@var940 .@expr1073751676 combineOperators (@expr1073751677 ) ;
5846: tokenList@var940 .@expr1073751678 simplifySpaceshipOperator (@expr1073751679 ) ;
5847: tokenList@var940 .@expr1073751680 createLinks (@expr1073751681 ) ;
5848: tokenList@var940 .@expr1073751682 createLinks2 (@expr1073751683 ) ;
5849: tokenList@var940 .@expr9847 list@var942 .@expr9861 front (@expr9862 ) .@expr1073751687 assignIndexes (@expr1073751688 ) ;
5850:
5851:
5852: for (@expr1073751689 Token *@expr9866 tok@var943 =@expr1073751691 tokenList@var940 .@expr9847 list@var942 .@expr9861 front (@expr9862 ) ; tok@var943 ; tok@var943 =@expr1073751695 tok@var943 .@expr1073751696 next (@expr1073751697 ) ) {
5853: if (@expr1073751698 tok@var943 .@expr1073751699 str (@expr1073751700 ) ==@expr1073751701 "var" ) {
5854: tok@var943 .@expr1073751702 varId (@expr1073751703 1 ) ; }
5855: }
5856:
5857:
5858: tokenList@var940 .@expr1073751704 prepareTernaryOpForAST (@expr1073751705 ) ;
5859: tokenList@var940 .@expr9847 list@var942 .@expr1073751707 createAst (@expr1073751708 ) ;
5860:
5861: tokenList@var940 .@expr9847 list@var942 .@expr1073751710 validateAst (@expr1073751711 ) ;
5862:
5863:
5864: for (@expr1073751712 const Token *@expr9866 tok@var944 =@expr1073751714 tokenList@var940 .@expr9847 list@var942 .@expr9861 front (@expr9862 ) ; tok@var944 ; tok@var944 =@expr1073751718 tok@var944 .@expr1073751719 next (@expr1073751720 ) ) {
5865: if (@expr1073751721 tok@var944 .@expr1073751722 astOperand2 (@expr1073751723 ) &&@expr1073751724 !@expr1073751725 tok@var944 .@expr1073751726 astOperand1 (@expr1073751727 ) &&@expr1073751728 tok@var944 .@expr9905 str (@expr9906 ) !=@expr1073751731 ";" &&@expr1073751732 tok@var944 .@expr9905 str (@expr9906 ) !=@expr1073751735 ":" ) {
5866: return "Op2 but no Op1 for token: " +@expr1073751736 tok@var944 .@expr9905 str (@expr9906 ) ; }
5867: }
5868:
5869:
5870: if (@expr1073751739 style@var939 ==@expr1073751740 AstStyle ::@expr1073751741 Z3 ) {
5871: return tokenList@var940 .@expr9847 list@var942 .@expr9861 front (@expr9862 ) .@expr1073751745 astTop (@expr1073751746 ) .@expr1073751747 astStringZ3 (@expr1073751748 ) ; }
5872:
5873: std ::@expr1073751749 string ret@var945 ;
5874: std ::@expr1073751750 set < const Token *@expr9866 > astTop@var946 ;
5875: for (@expr1073751752 const Token *@expr9866 tok@var947 =@expr1073751754 tokenList@var940 .@expr9847 list@var942 .@expr9861 front (@expr9862 ) ; tok@var947 ; tok@var947 =@expr1073751758 tok@var947 .@expr1073751759 next (@expr1073751760 ) ) {
5876: if (@expr1073751761 tok@var947 .@expr1073751762 astOperand1 (@expr1073751763 ) &&@expr1073751764 astTop@var946 .@expr1073751765 find (@expr1073751766 tok@var947 .@expr9943 astTop (@expr9944 ) ) ==@expr1073751769 astTop@var946 .@expr1073751770 end (@expr1073751771 ) ) {
5877: astTop@var946 .@expr1073751772 insert (@expr1073751773 tok@var947 .@expr9943 astTop (@expr9944 ) ) ;
5878: if (@expr1073751776 !@expr1073751777 ret@var945 .@expr1073751778 empty (@expr1073751779 ) ) {
5879: ret@var945 =@expr1073751780 ret@var945 +@expr1073751781 " " ; }
5880: ret@var945 +=@expr1073751782 tok@var947 .@expr9943 astTop (@expr9944 ) .@expr1073751785 astString (@expr1073751786 ) ;
5881: }
5882: }
5883: return ret@var945 ;
5884: }
5885:
5886: void astexpr ( ) {
5887: $if $(@expr1073751787 $!@expr1073751788 $assertEquals $(@expr1073751789 "cppcheck-2.8/test/testtokenize.cpp" $, 5887 $, "12+3+" $, testAst (@expr1073751790 "1+2+3" ) $) $) { $return ; }
5888: $if $(@expr1073751791 $!@expr1073751792 $assertEquals $(@expr1073751793 "cppcheck-2.8/test/testtokenize.cpp" $, 5888 $, "12*3+" $, testAst (@expr1073751794 "1*2+3" ) $) $) { $return ; }
5889: $if $(@expr1073751795 $!@expr1073751796 $assertEquals $(@expr1073751797 "cppcheck-2.8/test/testtokenize.cpp" $, 5889 $, "123*+" $, testAst (@expr1073751798 "1+2*3" ) $) $) { $return ; }
5890: $if $(@expr1073751799 $!@expr1073751800 $assertEquals $(@expr1073751801 "cppcheck-2.8/test/testtokenize.cpp" $, 5890 $, "12*34*+" $, testAst (@expr1073751802 "1*2+3*4" ) $) $) { $return ; }
5891: $if $(@expr1073751803 $!@expr1073751804 $assertEquals $(@expr1073751805 "cppcheck-2.8/test/testtokenize.cpp" $, 5891 $, "12*34*5*+" $, testAst (@expr1073751806 "1*2+3*4*5" ) $) $) { $return ; }
5892: $if $(@expr1073751807 $!@expr1073751808 $assertEquals $(@expr1073751809 "cppcheck-2.8/test/testtokenize.cpp" $, 5892 $, "0(r.&" $, testAst (@expr1073751810 "(&((typeof(x))0).r);" ) $) $) { $return ; }
5893: $if $(@expr1073751811 $!@expr1073751812 $assertEquals $(@expr1073751813 "cppcheck-2.8/test/testtokenize.cpp" $, 5893 $, "0(r.&" $, testAst (@expr1073751814 "&((typeof(x))0).r;" ) $) $) { $return ; }
5894: $if $(@expr1073751815 $!@expr1073751816 $assertEquals $(@expr1073751817 "cppcheck-2.8/test/testtokenize.cpp" $, 5894 $, "0f1(||" $, testAst (@expr1073751818 "; 0 || f(1);" ) $) $) { $return ; }
5895:
5896:
5897: $if $(@expr1073751819 $!@expr1073751820 $assertEquals $(@expr1073751821 "cppcheck-2.8/test/testtokenize.cpp" $, 5897 $, "ab::c+" $, testAst (@expr1073751822 "a::b+c" ) $) $) { $return ; }
5898: $if $(@expr1073751823 $!@expr1073751824 $assertEquals $(@expr1073751825 "cppcheck-2.8/test/testtokenize.cpp" $, 5898 $, "abc+=" $, testAst (@expr1073751826 "a=b+c" ) $) $) { $return ; }
5899: $if $(@expr1073751827 $!@expr1073751828 $assertEquals $(@expr1073751829 "cppcheck-2.8/test/testtokenize.cpp" $, 5899 $, "abc=," $, testAst (@expr1073751830 "a,b=c" ) $) $) { $return ; }
5900: $if $(@expr1073751831 $!@expr1073751832 $assertEquals $(@expr1073751833 "cppcheck-2.8/test/testtokenize.cpp" $, 5900 $, "a-1+" $, testAst (@expr1073751834 "-a+1" ) $) $) { $return ; }
5901: $if $(@expr1073751835 $!@expr1073751836 $assertEquals $(@expr1073751837 "cppcheck-2.8/test/testtokenize.cpp" $, 5901 $, "ab++-c-" $, testAst (@expr1073751838 "a-b++-c" ) $) $) { $return ; }
5902: $if $(@expr1073751839 $!@expr1073751840 $assertEquals $(@expr1073751841 "cppcheck-2.8/test/testtokenize.cpp" $, 5902 $, "ab<=>" $, testAst (@expr1073751842 "a<=>b" ) $) $) { $return ; }
5903:
5904:
5905: $if $(@expr1073751843 $!@expr1073751844 $assertEquals $(@expr1073751845 "cppcheck-2.8/test/testtokenize.cpp" $, 5905 $, "ab.sizeof" $, testAst (@expr1073751846 "sizeof a.b" ) $) $) { $return ; }
5906:
5907:
5908: $if $(@expr1073751847 $!@expr1073751848 $assertEquals $(@expr1073751849 "cppcheck-2.8/test/testtokenize.cpp" $, 5908 $, "ab>>=" $, testAst (@expr1073751850 "a>>=b;" ) $) $) { $return ; }
5909: $if $(@expr1073751851 $!@expr1073751852 $assertEquals $(@expr1073751853 "cppcheck-2.8/test/testtokenize.cpp" $, 5909 $, "ab<<=" $, testAst (@expr1073751854 "a<<=b;" ) $) $) { $return ; }
5910: $if $(@expr1073751855 $!@expr1073751856 $assertEquals $(@expr1073751857 "cppcheck-2.8/test/testtokenize.cpp" $, 5910 $, "ab+=" $, testAst (@expr1073751858 "a+=b;" ) $) $) { $return ; }
5911: $if $(@expr1073751859 $!@expr1073751860 $assertEquals $(@expr1073751861 "cppcheck-2.8/test/testtokenize.cpp" $, 5911 $, "ab-=" $, testAst (@expr1073751862 "a-=b;" ) $) $) { $return ; }
5912: $if $(@expr1073751863 $!@expr1073751864 $assertEquals $(@expr1073751865 "cppcheck-2.8/test/testtokenize.cpp" $, 5912 $, "ab*=" $, testAst (@expr1073751866 "a*=b;" ) $) $) { $return ; }
5913: $if $(@expr1073751867 $!@expr1073751868 $assertEquals $(@expr1073751869 "cppcheck-2.8/test/testtokenize.cpp" $, 5913 $, "ab/=" $, testAst (@expr1073751870 "a/=b;" ) $) $) { $return ; }
5914: $if $(@expr1073751871 $!@expr1073751872 $assertEquals $(@expr1073751873 "cppcheck-2.8/test/testtokenize.cpp" $, 5914 $, "ab%=" $, testAst (@expr1073751874 "a%=b;" ) $) $) { $return ; }
5915: $if $(@expr1073751875 $!@expr1073751876 $assertEquals $(@expr1073751877 "cppcheck-2.8/test/testtokenize.cpp" $, 5915 $, "ab&=" $, testAst (@expr1073751878 "a&=b;" ) $) $) { $return ; }
5916: $if $(@expr1073751879 $!@expr1073751880 $assertEquals $(@expr1073751881 "cppcheck-2.8/test/testtokenize.cpp" $, 5916 $, "ab|=" $, testAst (@expr1073751882 "a|=b;" ) $) $) { $return ; }
5917: $if $(@expr1073751883 $!@expr1073751884 $assertEquals $(@expr1073751885 "cppcheck-2.8/test/testtokenize.cpp" $, 5917 $, "ab^=" $, testAst (@expr1073751886 "a^=b;" ) $) $) { $return ; }
5918:
5919: $if $(@expr1073751887 $!@expr1073751888 $assertEquals $(@expr1073751889 "cppcheck-2.8/test/testtokenize.cpp" $, 5919 $, "ab*c*.(+return" $, testAst (@expr1073751890 "return a + ((*b).*c)();" ) $) $) { $return ; }
5920:
5921:
5922: $if $(@expr1073751891 $!@expr1073751892 $assertEquals $(@expr1073751893 "cppcheck-2.8/test/testtokenize.cpp" $, 5922 $, "abc==" $, testAst (@expr1073751894 "a=b=c;" ) $) $) { $return ; }
5923:
5924:
5925: $if $(@expr1073751895 $!@expr1073751896 $assertEquals $(@expr1073751897 "cppcheck-2.8/test/testtokenize.cpp" $, 5925 $, "ab0=c1=:?" $, testAst (@expr1073751898 "a?b=0:c=1;" ) $) $) { $return ; }
5926: $if $(@expr1073751899 $!@expr1073751900 $assertEquals $(@expr1073751901 "cppcheck-2.8/test/testtokenize.cpp" $, 5926 $, "fabc,d:?=e," $, testAst (@expr1073751902 "f = a ? b, c : d, e;" ) $) $) { $return ; }
5927: $if $(@expr1073751903 $!@expr1073751904 $assertEquals $(@expr1073751905 "cppcheck-2.8/test/testtokenize.cpp" $, 5927 $, "fabc,de,:?=" $, testAst (@expr1073751906 "f = (a ? (b, c) : (d, e));" ) $) $) { $return ; }
5928: $if $(@expr1073751907 $!@expr1073751908 $assertEquals $(@expr1073751909 "cppcheck-2.8/test/testtokenize.cpp" $, 5928 $, "fabc,de,:?=" $, testAst (@expr1073751910 "f = (a ? b, c : (d, e));" ) $) $) { $return ; }
5929: $if $(@expr1073751911 $!@expr1073751912 $assertEquals $(@expr1073751913 "cppcheck-2.8/test/testtokenize.cpp" $, 5929 $, "ab35,4:?foo(:?return" $, testAst (@expr1073751914 "return (a ? b ? (3,5) : 4 : foo());" ) $) $) { $return ; }
5930: $if $(@expr1073751915 $!@expr1073751916 $assertEquals $(@expr1073751917 "cppcheck-2.8/test/testtokenize.cpp" $, 5930 $, "check(result_type00,{invalid:?return" $, testAst (@expr1073751918 "return check() ? result_type {0, 0} : invalid;" ) $) $) { $return ; }
5931: $if $(@expr1073751919 $!@expr1073751920 $assertEquals $(@expr1073751921 "cppcheck-2.8/test/testtokenize.cpp" $, 5931 $, "x01:?return" $, testAst (@expr1073751922 "return x ? 0 : 1;" ) $) $) { $return ; }
5932: $if $(@expr1073751923 $!@expr1073751924 $assertEquals $(@expr1073751925 "cppcheck-2.8/test/testtokenize.cpp" $, 5932 $, "x00throw:?return" $, testAst (@expr1073751926 "return x ? 0 : throw 0;" ) $) $) { $return ; }
5933: $if $(@expr1073751927 $!@expr1073751928 $assertEquals $(@expr1073751929 "cppcheck-2.8/test/testtokenize.cpp" $, 5933 $, "val0<1throwval:?return" $, testAst (@expr1073751930 "return val < 0 ? throw 1 : val;" ) $) $) { $return ; }
5934: $if $(@expr1073751931 $!@expr1073751932 $assertEquals $(@expr1073751933 "cppcheck-2.8/test/testtokenize.cpp" $, 5934 $, "ix0<00throw:?=" $, testAst (@expr1073751934 "int i = x < 0 ? 0 : throw 0;" ) $) $) { $return ; }
5935:
5936: $if $(@expr1073751935 $!@expr1073751936 $assertEquals $(@expr1073751937 "cppcheck-2.8/test/testtokenize.cpp" $, 5936 $, "a\"\"=" $, testAst (@expr1073751938 "a=\"\"" ) $) $) { $return ; }
5937: $if $(@expr1073751939 $!@expr1073751940 $assertEquals $(@expr1073751941 "cppcheck-2.8/test/testtokenize.cpp" $, 5937 $, "a\'\'=" $, testAst (@expr1073751942 "a=\'\'" ) $) $) { $return ; }
5938: $if $(@expr1073751943 $!@expr1073751944 $assertEquals $(@expr1073751945 "cppcheck-2.8/test/testtokenize.cpp" $, 5938 $, "'X''a'>" $, testAst (@expr1073751946 "('X' > 'a')" ) $) $) { $return ; }
5939: $if $(@expr1073751947 $!@expr1073751948 $assertEquals $(@expr1073751949 "cppcheck-2.8/test/testtokenize.cpp" $, 5939 $, "L'X'L'a'>" $, testAst (@expr1073751950 "(L'X' > L'a')" ) $) $) { $return ; }
5940: $if $(@expr1073751951 $!@expr1073751952 $assertEquals $(@expr1073751953 "cppcheck-2.8/test/testtokenize.cpp" $, 5940 $, "u'X'u'a'>" $, testAst (@expr1073751954 "(u'X' > u'a')" ) $) $) { $return ; }
5941: $if $(@expr1073751955 $!@expr1073751956 $assertEquals $(@expr1073751957 "cppcheck-2.8/test/testtokenize.cpp" $, 5941 $, "U'X'U'a'>" $, testAst (@expr1073751958 "(U'X' > U'a')" ) $) $) { $return ; }
5942: $if $(@expr1073751959 $!@expr1073751960 $assertEquals $(@expr1073751961 "cppcheck-2.8/test/testtokenize.cpp" $, 5942 $, "u8'X'u8'a'>" $, testAst (@expr1073751962 "(u8'X' > u8'a')" ) $) $) { $return ; }
5943:
5944: $if $(@expr1073751963 $!@expr1073751964 $assertEquals $(@expr1073751965 "cppcheck-2.8/test/testtokenize.cpp" $, 5944 $, "a0>bc/d:?" $, testAst (@expr1073751966 "(a>0) ? (b/(c)) : d;" ) $) $) { $return ; }
5945: $if $(@expr1073751967 $!@expr1073751968 $assertEquals $(@expr1073751969 "cppcheck-2.8/test/testtokenize.cpp" $, 5945 $, "abc/+d+" $, testAst (@expr1073751970 "a + (b/(c)) + d;" ) $) $) { $return ; }
5946: $if $(@expr1073751971 $!@expr1073751972 $assertEquals $(@expr1073751973 "cppcheck-2.8/test/testtokenize.cpp" $, 5946 $, "x1024x/0:?" $, testAst (@expr1073751974 "void f() { x ? 1024 / x : 0; }" ) $) $) { $return ; }
5947:
5948: $if $(@expr1073751975 $!@expr1073751976 $assertEquals $(@expr1073751977 "cppcheck-2.8/test/testtokenize.cpp" $, 5948 $, "absizeofd(ef.+(=" $, testAst (@expr1073751978 "a = b(sizeof(c d) + e.f)" ) $) $) { $return ; }
5949:
5950: $if $(@expr1073751979 $!@expr1073751980 $assertEquals $(@expr1073751981 "cppcheck-2.8/test/testtokenize.cpp" $, 5950 $, "a*b***" $, testAst (@expr1073751982 "*a * **b;" ) $) $) { $return ; }
5951:
5952:
5953: $if $(@expr1073751983 $!@expr1073751984 $assertEquals $(@expr1073751985 "cppcheck-2.8/test/testtokenize.cpp" $, 5953 $, "f\"A\"1,(" $, testAst (@expr1073751986 "f(\"A\" B, 1);" ) $) $) { $return ; }
5954: $if $(@expr1073751987 $!@expr1073751988 $assertEquals $(@expr1073751989 "cppcheck-2.8/test/testtokenize.cpp" $, 5954 $, "fA1,(" $, testAst (@expr1073751990 "f(A \"B\", 1);" ) $) $) { $return ; }
5955:
5956:
5957: $if $(@expr1073751991 $!@expr1073751992 $assertEquals $(@expr1073751993 "cppcheck-2.8/test/testtokenize.cpp" $, 5957 $, "fint(0,(" $, testAst (@expr1073751994 "f(int(),0);" ) $) $) { $return ; }
5958: $if $(@expr1073751995 $!@expr1073751996 $assertEquals $(@expr1073751997 "cppcheck-2.8/test/testtokenize.cpp" $, 5958 $, "f(0,(" $, testAst (@expr1073751998 "f(int *(),0);" ) $) $) { $return ; }
5959: $if $(@expr1073751999 $!@expr1073752000 $assertEquals $(@expr1073752001 "cppcheck-2.8/test/testtokenize.cpp" $, 5959 $, "f((0,(" $, testAst (@expr1073752002 "f((intp)int *(),0);" ) $) $) { $return ; }
5960: $if $(@expr1073752003 $!@expr1073752004 $assertEquals $(@expr1073752005 "cppcheck-2.8/test/testtokenize.cpp" $, 5960 $, "zx1(&y2(&|=" $, testAst (@expr1073752006 "z = (x & (unsigned)1) | (y & (unsigned)2);" ) $) $) { $return ; }
5961:
5962:
5963: $if $(@expr1073752007 $!@expr1073752008 $assertEquals $(@expr1073752009 "cppcheck-2.8/test/testtokenize.cpp" $, 5963 $, "for;;(" $, testAst (@expr1073752010 "for(;;)" ) $) $) { $return ; }
5964: $if $(@expr1073752011 $!@expr1073752012 $assertEquals $(@expr1073752013 "cppcheck-2.8/test/testtokenize.cpp" $, 5964 $, "fora0=a8<a++;;(" $, testAst (@expr1073752014 "for(a=0;a<8;a++)" ) $) $) { $return ; }
5965: $if $(@expr1073752015 $!@expr1073752016 $assertEquals $(@expr1073752017 "cppcheck-2.8/test/testtokenize.cpp" $, 5965 $, "fori1=current0=,iNUM<=i++;;(" $, testAst (@expr1073752018 "for(i = (1), current = 0; i <= (NUM); ++i)" ) $) $) { $return ; }
5966: $if $(@expr1073752019 $!@expr1073752020 $assertEquals $(@expr1073752021 "cppcheck-2.8/test/testtokenize.cpp" $, 5966 $, "foreachxy,((" $, testAst (@expr1073752022 "for(each(x,y)){}" ) $) $) { $return ; }
5967: $if $(@expr1073752023 $!@expr1073752024 $assertEquals $(@expr1073752025 "cppcheck-2.8/test/testtokenize.cpp" $, 5967 $, "forvar1(;;(" $, testAst (@expr1073752026 "for(int var(1);;)" ) $) $) { $return ; }
5968: $if $(@expr1073752027 $!@expr1073752028 $assertEquals $(@expr1073752029 "cppcheck-2.8/test/testtokenize.cpp" $, 5968 $, "forab:(" $, testAst (@expr1073752030 "for (int a : b);" ) $) $) { $return ; }
5969: $if $(@expr1073752031 $!@expr1073752032 $assertEquals $(@expr1073752033 "cppcheck-2.8/test/testtokenize.cpp" $, 5969 $, "forvarb:(" $, testAst (@expr1073752034 "for (int *var : b);" ) $) $) { $return ; }
5970: $if $(@expr1073752035 $!@expr1073752036 $assertEquals $(@expr1073752037 "cppcheck-2.8/test/testtokenize.cpp" $, 5970 $, "forvard:(" $, testAst (@expr1073752038 "for (a<b> var : d);" ) $) $) { $return ; }
5971: $if $(@expr1073752039 $!@expr1073752040 $assertEquals $(@expr1073752041 "cppcheck-2.8/test/testtokenize.cpp" $, 5971 $, "forvare:(" $, testAst (@expr1073752042 "for (a::b<c> var : e);" ) $) $) { $return ; }
5972: $if $(@expr1073752043 $!@expr1073752044 $assertEquals $(@expr1073752045 "cppcheck-2.8/test/testtokenize.cpp" $, 5972 $, "forx*0=yz;;(" $, testAst (@expr1073752046 "for(*x=0;y;z)" ) $) $) { $return ; }
5973: $if $(@expr1073752047 $!@expr1073752048 $assertEquals $(@expr1073752049 "cppcheck-2.8/test/testtokenize.cpp" $, 5973 $, "forx0=y(8<z;;(" $, testAst (@expr1073752050 "for (x=0;(int)y<8;z);" ) $) $) { $return ; }
5974: $if $(@expr1073752051 $!@expr1073752052 $assertEquals $(@expr1073752053 "cppcheck-2.8/test/testtokenize.cpp" $, 5974 $, "forab,c:(" $, testAst (@expr1073752054 "for (auto [a,b]: c);" ) $) $) { $return ; }
5975: $if $(@expr1073752055 $!@expr1073752056 $assertEquals $(@expr1073752057 "cppcheck-2.8/test/testtokenize.cpp" $, 5975 $, "fora*++;;(" $, testAst (@expr1073752058 "for (++(*a);;);" ) $) $) { $return ; }
5976: $if $(@expr1073752059 $!@expr1073752060 $assertEquals $(@expr1073752061 "cppcheck-2.8/test/testtokenize.cpp" $, 5976 $, "foryz:(" $, testAst (@expr1073752062 "for (decltype(x) *y : z);" ) $) $) { $return ; }
5977: $if $(@expr1073752063 $!@expr1073752064 $assertEquals $(@expr1073752065 "cppcheck-2.8/test/testtokenize.cpp" $, 5977 $, "for(tmpNULL!=tmptmpnext.=;;( tmpa=" $, testAst (@expr1073752066 "for ( ({ tmp = a; }) ; tmp != NULL; tmp = tmp->next ) {}" ) $) $) { $return ; }
5978: $if $(@expr1073752067 $!@expr1073752068 $assertEquals $(@expr1073752069 "cppcheck-2.8/test/testtokenize.cpp" $, 5978 $, "forx0=x;;(" $, testAst (@expr1073752070 "for (int x=0; x;);" ) $) $) { $return ; }
5979: $if $(@expr1073752071 $!@expr1073752072 $assertEquals $(@expr1073752073 "cppcheck-2.8/test/testtokenize.cpp" $, 5979 $, "forae*bc.({:(" $, testAst (@expr1073752074 "for (a *e : {b->c()});" ) $) $) { $return ; }
5980: $if $(@expr1073752075 $!@expr1073752076 $assertEquals $(@expr1073752077 "cppcheck-2.8/test/testtokenize.cpp" $, 5980 $, "fori0=iasize.(<i++;;( asize.(" $, testAst (@expr1073752078 "for (decltype(a.size()) i = 0; i < a.size(); ++i);" ) $) $) { $return ; }
5981: $if $(@expr1073752079 $!@expr1073752080 $assertEquals $(@expr1073752081 "cppcheck-2.8/test/testtokenize.cpp" $, 5981 $, "foria:( asize.(" $, testAst (@expr1073752082 "for(decltype(a.size()) i:a);" ) $) $) { $return ; }
5982:
5983:
5984: $if $(@expr1073752083 $!@expr1073752084 $assertEquals $(@expr1073752085 "cppcheck-2.8/test/testtokenize.cpp" $, 5984 $, "forab=ca:;(" $, testAst (@expr1073752086 "for(a=b;int c:a)" ) $) $) { $return ; }
5985:
5986:
5987: $if $(@expr1073752087 $!@expr1073752088 $assertEquals $(@expr1073752089 "cppcheck-2.8/test/testtokenize.cpp" $, 5987 $, "ax( whilex(" $, testAst (@expr1073752090 "a(x) while (x)" ) $) $) { $return ; }
5988: $if $(@expr1073752091 $!@expr1073752092 $assertEquals $(@expr1073752093 "cppcheck-2.8/test/testtokenize.cpp" $, 5988 $, "ifx( i0= whilei(" $, testAst (@expr1073752094 "if (x) { ({ int i = 0; while(i); }) };" ) $) $) { $return ; }
5989: $if $(@expr1073752095 $!@expr1073752096 $assertEquals $(@expr1073752097 "cppcheck-2.8/test/testtokenize.cpp" $, 5989 $, "ifx( BUG_ON{!( i0= whilei(" $, testAst (@expr1073752098 "if (x) { BUG_ON(!({int i=0; while(i);})); }" ) $) $) { $return ; }
5990: $if $(@expr1073752099 $!@expr1073752100 $assertEquals $(@expr1073752101 "cppcheck-2.8/test/testtokenize.cpp" $, 5990 $, "v0= while{0!=( v0= while{0!=( v0=" $, testAst (@expr1073752102 "({ v = 0; }); while (({ v = 0; }) != 0); while (({ v = 0; }) != 0);" ) $) $) { $return ; }
5991:
5992:
5993: $if $(@expr1073752103 $!@expr1073752104 $assertEquals $(@expr1073752105 "cppcheck-2.8/test/testtokenize.cpp" $, 5993 $, "abc.1:?1+bd.1:?+=" $, testAst (@expr1073752106 "a =(b.c ? : 1) + 1 + (b.d ? : 1);" ) $) $) { $return ; }
5994:
5995: $if $(@expr1073752107 $!@expr1073752108 $assertEquals $(@expr1073752109 "cppcheck-2.8/test/testtokenize.cpp" $, 5995 $, "catch...(" $, testAst (@expr1073752110 "try {} catch (...) {}" ) $) $) { $return ; }
5996:
5997: $if $(@expr1073752111 $!@expr1073752112 $assertEquals $(@expr1073752113 "cppcheck-2.8/test/testtokenize.cpp" $, 5997 $, "" $, testAst (@expr1073752114 "void Foo(Bar&);" ) $) $) { $return ; }
5998: $if $(@expr1073752115 $!@expr1073752116 $assertEquals $(@expr1073752117 "cppcheck-2.8/test/testtokenize.cpp" $, 5998 $, "" $, testAst (@expr1073752118 "void Foo(Bar&&);" ) $) $) { $return ; }
5999:
6000: $if $(@expr1073752119 $!@expr1073752120 $assertEquals $(@expr1073752121 "cppcheck-2.8/test/testtokenize.cpp" $, 6000 $, "Barb&" $, testAst (@expr1073752122 "void Foo(Bar& b);" ) $) $) { $return ; }
6001: $if $(@expr1073752123 $!@expr1073752124 $assertEquals $(@expr1073752125 "cppcheck-2.8/test/testtokenize.cpp" $, 6001 $, "Barb&&" $, testAst (@expr1073752126 "void Foo(Bar&& b);" ) $) $) { $return ; }
6002:
6003: $if $(@expr1073752127 $!@expr1073752128 $assertEquals $(@expr1073752129 "cppcheck-2.8/test/testtokenize.cpp" $, 6003 $, "DerivedDerived::(" $, testAst (@expr1073752130 "Derived::~Derived() {}" ) $) $) { $return ; }
6004:
6005: $if $(@expr1073752131 $!@expr1073752132 $assertEquals $(@expr1073752133 "cppcheck-2.8/test/testtokenize.cpp" $, 6005 $, "ifCA_FarReadfilenew(,sizeofobjtype(,(!(" $, testAst (@expr1073752134 "if (!CA_FarRead(file, (void far *)new, sizeof(objtype)))" ) $) $) { $return ; }
6006:
6007:
6008: $if $(@expr1073752135 $!@expr1073752136 $assertEquals $(@expr1073752137 "cppcheck-2.8/test/testtokenize.cpp" $, 6008 $, "ifx3=y;(" $, testAst (@expr1073752138 "if (int x=3; y)" ) $) $) { $return ; }
6009:
6010:
6011: }
6012:
6013: void astexpr2 ( ) {
6014:
6015:
6016: const char code@var948 [@expr1073752139 1111 ] =@expr1073752140 "const char * a(int type) {\n  return (\n   (type == 1) ? \"\"\n : (type == 2) ? \"\"\n : (type == 3) ? \"\"\n : (type == 4) ? \"\"\n : (type == 5) ? \"\"\n : (type == 6) ? \"\"\n : (type == 7) ? \"\"\n : (type == 8) ? \"\"\n : (type == 9) ? \"\"\n : (type == 10) ? \"\"\n : (type == 11) ? \"\"\n : (type == 12) ? \"\"\n : (type == 13) ? \"\"\n : (type == 14) ? \"\"\n : (type == 15) ? \"\"\n : (type == 16) ? \"\"\n : (type == 17) ? \"\"\n : (type == 18) ? \"\"\n : (type == 19) ? \"\"\n : (type == 20) ? \"\"\n : (type == 21) ? \"\"\n : (type == 22) ? \"\"\n : (type == 23) ? \"\"\n : (type == 24) ? \"\"\n : (type == 25) ? \"\"\n : (type == 26) ? \"\"\n : (type == 27) ? \"\"\n : (type == 28) ? \"\"\n : (type == 29) ? \"\"\n : (type == 30) ? \"\"\n : (type == 31) ? \"\"\n : (type == 32) ? \"\"\n : (type == 33) ? \"\"\n : (type == 34) ? \"\"\n : (type == 35) ? \"\"\n : (type == 36) ? \"\"\n : (type == 37) ? \"\"\n : (type == 38) ? \"\"\n : (type == 39) ? \"\"\n : (type == 40) ? \"\"\n : (type == 41) ? \"\"\n : (type == 42) ? \"\"\n : (type == 43) ? \"\"\n : (type == 44) ? \"\"\n : (type == 45) ? \"\"\n : (type == 46) ? \"\"\n : (type == 47) ? \"\"\n : (type == 48) ? \"\"\n : (type == 49) ? \"\"\n : (type == 50) ? \"\"\n : (type == 51) ? \"\"\n : \"\");\n}\n"
6017:
|
6069:
6070: ;
6071:
6072: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073752141 "cppcheck-2.8/test/testtokenize.cpp" $, 6072 $, code@var948 $) $; $} $catch $(@expr1073752142 $const InternalError $&@expr1073752143 $) ${ $} $catch $(@expr1073752144 $... $) ${ $assertThrow $(@expr1073752145 "cppcheck-2.8/test/testtokenize.cpp" $, 6072 $) $; $} $} $while $(@expr1073752146 $false $) ;
6073: }
6074:
6075: void astnewdelete ( ) {
6076: $if $(@expr1073752147 $!@expr1073752148 $assertEquals $(@expr1073752149 "cppcheck-2.8/test/testtokenize.cpp" $, 6076 $, "aintnew=" $, testAst (@expr1073752150 "a = new int;" ) $) $) { $return ; }
6077: $if $(@expr1073752151 $!@expr1073752152 $assertEquals $(@expr1073752153 "cppcheck-2.8/test/testtokenize.cpp" $, 6077 $, "aint4[new=" $, testAst (@expr1073752154 "a = new int[4];" ) $) $) { $return ; }
6078: $if $(@expr1073752155 $!@expr1073752156 $assertEquals $(@expr1073752157 "cppcheck-2.8/test/testtokenize.cpp" $, 6078 $, "aFoobar(new=" $, testAst (@expr10334 "a = new Foo(bar);" ) $) $) { $return ; }
6079: $if $(@expr1073752159 $!@expr1073752160 $assertEquals $(@expr1073752161 "cppcheck-2.8/test/testtokenize.cpp" $, 6079 $, "aFoobar(new=" $, testAst (@expr10334 "a = new Foo(bar);" ) $) $) { $return ; }
6080: $if $(@expr1073752163 $!@expr1073752164 $assertEquals $(@expr1073752165 "cppcheck-2.8/test/testtokenize.cpp" $, 6080 $, "aFoo(new=" $, testAst (@expr1073752166 "a = new Foo<bar>();" ) $) $) { $return ; }
6081: $if $(@expr1073752167 $!@expr1073752168 $assertEquals $(@expr1073752169 "cppcheck-2.8/test/testtokenize.cpp" $, 6081 $, "aXnew(" $, testAst (@expr1073752170 "a (new (X));" ) $) $) { $return ; }
6082: $if $(@expr1073752171 $!@expr1073752172 $assertEquals $(@expr1073752173 "cppcheck-2.8/test/testtokenize.cpp" $, 6082 $, "aXnew5,(" $, testAst (@expr1073752174 "a (new (X), 5);" ) $) $) { $return ; }
6083: $if $(@expr1073752175 $!@expr1073752176 $assertEquals $(@expr1073752177 "cppcheck-2.8/test/testtokenize.cpp" $, 6083 $, "adelete" $, testAst (@expr1073752178 "delete a;" ) $) $) { $return ; }
6084: $if $(@expr1073752179 $!@expr1073752180 $assertEquals $(@expr1073752181 "cppcheck-2.8/test/testtokenize.cpp" $, 6084 $, "adelete" $, testAst (@expr1073752182 "delete (a);" ) $) $) { $return ; }
6085: $if $(@expr1073752183 $!@expr1073752184 $assertEquals $(@expr1073752185 "cppcheck-2.8/test/testtokenize.cpp" $, 6085 $, "adelete" $, testAst (@expr1073752186 "delete[] a;" ) $) $) { $return ; }
6086: $if $(@expr1073752187 $!@expr1073752188 $assertEquals $(@expr1073752189 "cppcheck-2.8/test/testtokenize.cpp" $, 6086 $, "ab.3c-(delete" $, testAst (@expr1073752190 "delete[] a.b(3 - c);" ) $) $) { $return ; }
6087: $if $(@expr1073752191 $!@expr1073752192 $assertEquals $(@expr1073752193 "cppcheck-2.8/test/testtokenize.cpp" $, 6087 $, "aA1(new(bB2(new(," $, testAst (@expr1073752194 "a(new A(1)), b(new B(2))" ) $) $) { $return ; }
6088: $if $(@expr1073752195 $!@expr1073752196 $assertEquals $(@expr1073752197 "cppcheck-2.8/test/testtokenize.cpp" $, 6088 $, "Fred10[new" $, testAst (@expr1073752198 ";new Fred[10];" ) $) $) { $return ; }
6089: $if $(@expr1073752199 $!@expr1073752200 $assertEquals $(@expr1073752201 "cppcheck-2.8/test/testtokenize.cpp" $, 6089 $, "adelete" $, testAst (@expr1073752202 "void f() { delete a; }" ) $) $) { $return ; }
6090: $if $(@expr1073752203 $!@expr1073752204 $assertEquals $(@expr1073752205 "cppcheck-2.8/test/testtokenize.cpp" $, 6090 $, "Aa*A{new=" $, testAst (@expr1073752206 "A* a = new A{};" ) $) $) { $return ; }
6091: $if $(@expr1073752207 $!@expr1073752208 $assertEquals $(@expr1073752209 "cppcheck-2.8/test/testtokenize.cpp" $, 6091 $, "Aa*A12,{new=" $, testAst (@expr1073752210 "A* a = new A{ 1, 2 };" ) $) $) { $return ; }
6092: $if $(@expr1073752211 $!@expr1073752212 $assertEquals $(@expr1073752213 "cppcheck-2.8/test/testtokenize.cpp" $, 6092 $, "Sv0[(new" $, testAst (@expr1073752214 "new S(v[0]);" ) $) $) { $return ; }
6093: $if $(@expr1073752215 $!@expr1073752216 $assertEquals $(@expr1073752217 "cppcheck-2.8/test/testtokenize.cpp" $, 6093 $, "SS::x(px0>intx[{newint1[{new:?(:" $, testAst (@expr1073752218 "S::S(int x) : p(x > 0 ? new int[x]{} : new int[1]{}) {}" ) $) $) { $return ; }
6094:
6095:
6096: $if $(@expr1073752219 $!@expr1073752220 $assertEquals $(@expr1073752221 "cppcheck-2.8/test/testtokenize.cpp" $, 6096 $, "X12,3,(new ab,c," $, testAst (@expr1073752222 "new (a,b,c) X(1,2,3);" ) $) $) { $return ; }
6097: $if $(@expr1073752223 $!@expr1073752224 $assertEquals $(@expr1073752225 "cppcheck-2.8/test/testtokenize.cpp" $, 6097 $, "a::new=" $, testAst (@expr1073752226 "a = new (b) ::X;" ) $) $) { $return ; }
6098: $if $(@expr1073752227 $!@expr1073752228 $assertEquals $(@expr1073752229 "cppcheck-2.8/test/testtokenize.cpp" $, 6098 $, "cCnew= abc:?" $, testAst (@expr1073752230 "c = new(a ? b : c) C;" ) $) $) { $return ; }
6099:
|
6103:
6104: $if $(@expr1073752231 $!@expr1073752232 $assertEquals $(@expr1073752233 "cppcheck-2.8/test/testtokenize.cpp" $, 6104 $, "fxnewy,z,(" $, testAst (@expr1073752234 "f(new (x,y,z));" ) $) $) { $return ; }
6105:
6106:
6107: $if $(@expr1073752235 $!@expr1073752236 $assertEquals $(@expr1073752237 "cppcheck-2.8/test/testtokenize.cpp" $, 6107 $, "const0(new" $, testAst (@expr1073752238 "new const auto (0);" ) $) $) { $return ; }
6108: $if $(@expr1073752239 $!@expr1073752240 $assertEquals $(@expr1073752241 "cppcheck-2.8/test/testtokenize.cpp" $, 6108 $, "autonew" $, testAst (@expr1073752242 "new (auto) (0.0);" ) $) $) { $return ; }
6109: $if $(@expr1073752243 $!@expr1073752244 $assertEquals $(@expr1073752245 "cppcheck-2.8/test/testtokenize.cpp" $, 6109 $, "int3[4[5[new" $, testAst (@expr1073752246 "new (int S::*[3][4][5]) ();" ) $) $) { $return ; }
6110: $if $(@expr1073752247 $!@expr1073752248 $assertEquals $(@expr1073752249 "cppcheck-2.8/test/testtokenize.cpp" $, 6110 $, "pSnew=" $, testAst (@expr1073752250 "p=new (x)(S)(1,2);" ) $) $) { $return ; }
6111: $if $(@expr1073752251 $!@expr1073752252 $assertEquals $(@expr1073752253 "cppcheck-2.8/test/testtokenize.cpp" $, 6111 $, "inti[new(" $, testAst (@expr1073752254 "(void)new (int[i]);" ) $) $) { $return ; }
6112: $if $(@expr1073752255 $!@expr1073752256 $assertEquals $(@expr1073752257 "cppcheck-2.8/test/testtokenize.cpp" $, 6112 $, "intp* pnew malloc4(" $, testAst (@expr1073752258 "int*p; new (p) (malloc(4));" ) $) $) { $return ; }
6113: $if $(@expr1073752259 $!@expr1073752260 $assertEquals $(@expr1073752261 "cppcheck-2.8/test/testtokenize.cpp" $, 6113 $, "intnew" $, testAst (@expr1073752262 "new (&w.x)(int*)(0);" ) $) $) { $return ; }
6114: $if $(@expr1073752263 $!@expr1073752264 $assertEquals $(@expr1073752265 "cppcheck-2.8/test/testtokenize.cpp" $, 6114 $, "&new" $, testAst (@expr1073752266 "new (&w.x)(0);" ) $) $) { $return ; }
6115:
6116:
6117: $if $(@expr1073752267 $!@expr1073752268 $assertEquals $(@expr1073752269 "cppcheck-2.8/test/testtokenize.cpp" $, 6117 $, "char10[new(" $, testAst (@expr1073752270 "(void)new(char*)[10];" ) $) $) { $return ; }
6118: }
6119:
6120: void astpar ( ) {
6121: $if $(@expr1073752271 $!@expr1073752272 $assertEquals $(@expr1073752273 "cppcheck-2.8/test/testtokenize.cpp" $, 6121 $, "12+3*" $, testAst (@expr1073752274 "(1+2)*3" ) $) $) { $return ; }
6122: $if $(@expr1073752275 $!@expr1073752276 $assertEquals $(@expr1073752277 "cppcheck-2.8/test/testtokenize.cpp" $, 6122 $, "123+*" $, testAst (@expr1073752278 "1*(2+3)" ) $) $) { $return ; }
6123: $if $(@expr1073752279 $!@expr1073752280 $assertEquals $(@expr1073752281 "cppcheck-2.8/test/testtokenize.cpp" $, 6123 $, "123+*4*" $, testAst (@expr1073752282 "1*(2+3)*4" ) $) $) { $return ; }
6124: $if $(@expr1073752283 $!@expr1073752284 $assertEquals $(@expr1073752285 "cppcheck-2.8/test/testtokenize.cpp" $, 6124 $, "ifab.c&d==(" $, testAst (@expr1073752286 "if((a.b&c)==d){}" ) $) $) { $return ; }
6125:
6126: $if $(@expr1073752287 $!@expr1073752288 $assertEquals $(@expr1073752289 "cppcheck-2.8/test/testtokenize.cpp" $, 6126 $, "pf.pf.12,(&&" $, testAst (@expr1073752290 "((p.f) && (p.f)(1,2))" ) $) $) { $return ; }
6127:
6128: $if $(@expr1073752291 $!@expr1073752292 $assertEquals $(@expr1073752293 "cppcheck-2.8/test/testtokenize.cpp" $, 6128 $, "forresdirGetFirst.file&_T(,(=;;(" $, testAst (@expr1073752294 "for ((res = dir.GetFirst(&file, _T()));;) {}" ) $) $) { $return ; }
6129:
6130:
6131: $if $(@expr1073752295 $!@expr1073752296 $assertEquals $(@expr1073752297 "cppcheck-2.8/test/testtokenize.cpp" $, 6131 $, "ifa(0[1==(" $, testAst (@expr1073752298 "if(a()[0]==1){}" ) $) $) { $return ; }
6132: $if $(@expr1073752299 $!@expr1073752300 $assertEquals $(@expr1073752301 "cppcheck-2.8/test/testtokenize.cpp" $, 6132 $, "ifbuff0[&(*1==(" $, testAst (@expr1073752302 "if (*((DWORD*)&buff[0])==1){}" ) $) $) { $return ; }
6133: $if $(@expr1073752303 $!@expr1073752304 $assertEquals $(@expr1073752305 "cppcheck-2.8/test/testtokenize.cpp" $, 6133 $, "ifp*0[1==(" $, testAst (@expr1073752306 "if((*p)[0]==1)" ) $) $) { $return ; }
6134: $if $(@expr1073752307 $!@expr1073752308 $assertEquals $(@expr1073752309 "cppcheck-2.8/test/testtokenize.cpp" $, 6134 $, "ifab.cd.[e==(" $, testAst (@expr1073752310 "if(a.b[c.d]==e){}" ) $) $) { $return ; }
6135:
6136: $if $(@expr1073752311 $!@expr1073752312 $assertEquals $(@expr1073752313 "cppcheck-2.8/test/testtokenize.cpp" $, 6136 $, "iftpnote.i1-[note.0==tpnote.i1-[type.4>||(" $, testAst (@expr1073752314 "if ((tp.note[i - 1].note == 0) || (tp.note[i - 1].type > 4)) {}" ) $) $) { $return ; }
6137: $if $(@expr1073752315 $!@expr1073752316 $assertEquals $(@expr1073752317 "cppcheck-2.8/test/testtokenize.cpp" $, 6137 $, "ab.i[j1+[" $, testAst (@expr1073752318 "a.b[i][j+1]" ) $) $) { $return ; }
6138:
6139:
6140: $if $(@expr1073752319 $!@expr1073752320 $assertEquals $(@expr1073752321 "cppcheck-2.8/test/testtokenize.cpp" $, 6140 $, "(= x (( (. ([ a i) f)))" $, testAst (@expr1073752322 "x = ((a[i]).f)();" , AstStyle ::@expr1073752323 Z3 ) $) $) { $return
6141: ; }
6142: $if $(@expr1073752324 $!@expr1073752325 $assertEquals $(@expr1073752326 "cppcheck-2.8/test/testtokenize.cpp" $, 6142 $, "abc.de.++[=" $, testAst (@expr1073752327 "a = b.c[++(d.e)];" ) $) $) { $return ; }
6143: $if $(@expr1073752328 $!@expr1073752329 $assertEquals $(@expr1073752330 "cppcheck-2.8/test/testtokenize.cpp" $, 6143 $, "abc(1+=" $, testAst (@expr1073752331 "a = b(c**)+1;" ) $) $) { $return ; }
6144: $if $(@expr1073752332 $!@expr1073752333 $assertEquals $(@expr1073752334 "cppcheck-2.8/test/testtokenize.cpp" $, 6144 $, "abc.=" $, testAst (@expr1073752335 "a = (b).c;" ) $) $) { $return ; }
6145:
6146:
6147: $if $(@expr1073752336 $!@expr1073752337 $assertEquals $(@expr1073752338 "cppcheck-2.8/test/testtokenize.cpp" $, 6147 $, "a1(2(+=" $, testAst (@expr1073752339 "a=(t)1+(t)2;" ) $) $) { $return ; }
6148: $if $(@expr1073752340 $!@expr1073752341 $assertEquals $(@expr1073752342 "cppcheck-2.8/test/testtokenize.cpp" $, 6148 $, "a1(2+=" $, testAst (@expr1073752343 "a=(t)1+2;" ) $) $) { $return ; }
6149: $if $(@expr1073752344 $!@expr1073752345 $assertEquals $(@expr1073752346 "cppcheck-2.8/test/testtokenize.cpp" $, 6149 $, "a1(2+=" $, testAst (@expr1073752347 "a=(t*)1+2;" ) $) $) { $return ; }
6150: $if $(@expr1073752348 $!@expr1073752349 $assertEquals $(@expr1073752350 "cppcheck-2.8/test/testtokenize.cpp" $, 6150 $, "a1(2+=" $, testAst (@expr1073752351 "a=(t&)1+2;" ) $) $) { $return ; }
6151: $if $(@expr1073752352 $!@expr1073752353 $assertEquals $(@expr1073752354 "cppcheck-2.8/test/testtokenize.cpp" $, 6151 $, "a1(2+=" $, testAst (@expr1073752355 "a=(t&&)1+2;" ) $) $) { $return ; }
6152: $if $(@expr1073752356 $!@expr1073752357 $assertEquals $(@expr1073752358 "cppcheck-2.8/test/testtokenize.cpp" $, 6152 $, "ab::r&c(=" $, testAst (@expr1073752359 "a::b& r = (a::b&)c;" ) $) $) { $return ; }
6153: $if $(@expr1073752360 $!@expr1073752361 $assertEquals $(@expr1073752362 "cppcheck-2.8/test/testtokenize.cpp" $, 6153 $, "ab10:?=" $, testAst (@expr1073752363 "a=(b)?1:0;" ) $) $) { $return ; }
6154: $if $(@expr1073752364 $!@expr1073752365 $assertEquals $(@expr1073752366 "cppcheck-2.8/test/testtokenize.cpp" $, 6154 $, "ac5[new(=" $, testAst (@expr1073752367 "a = (b*)(new c[5]);" ) $) $) { $return ; }
6155: $if $(@expr1073752368 $!@expr1073752369 $assertEquals $(@expr1073752370 "cppcheck-2.8/test/testtokenize.cpp" $, 6155 $, "a(4+" $, testAst (@expr1073752371 "(int)(a) + 4;" ) $) $) { $return ; }
6156:
6157:
6158: $if $(@expr1073752372 $!@expr1073752373 $assertEquals $(@expr1073752374 "cppcheck-2.8/test/testtokenize.cpp" $, 6158 $, "a&{(0[1[5[0=" $, testAst (@expr1073752375 "(int (**)[i]){&a}[0][1][5] = 0;" ) $) $) { $return ; }
6159: $if $(@expr1073752376 $!@expr1073752377 $assertEquals $(@expr1073752378 "cppcheck-2.8/test/testtokenize.cpp" $, 6159 $, "ab12,{(0[,(" $, testAst (@expr1073752379 "a(b, (int []){1,2}[0]);" ) $) $) { $return ; }
6160: $if $(@expr1073752380 $!@expr1073752381 $assertEquals $(@expr1073752382 "cppcheck-2.8/test/testtokenize.cpp" $, 6160 $, "n0=" $, testAst (@expr1073752383 "TrivialDefCtor{[2][2]}[1][1].n = 0;" ) $) $) { $return ; }
6161: $if $(@expr1073752384 $!@expr1073752385 $assertEquals $(@expr1073752386 "cppcheck-2.8/test/testtokenize.cpp" $, 6161 $, "aT12,3,{1[=" $, testAst (@expr1073752387 "a = T{1, 2, 3}[1];" ) $) $) { $return ; }
6162:
6163:
6164: $if $(@expr1073752388 $!@expr1073752389 $assertEquals $(@expr1073752390 "cppcheck-2.8/test/testtokenize.cpp" $, 6164 $, "ab{(=" $, testAst (@expr1073752391 "a=b{}();" ) $) $) { $return ; }
6165: $if $(@expr1073752392 $!@expr1073752393 $assertEquals $(@expr1073752394 "cppcheck-2.8/test/testtokenize.cpp" $, 6165 $, "abc{((=" $, testAst (@expr1073752395 "a=b(c{}());" ) $) $) { $return ; }
6166: $if $(@expr1073752396 $!@expr1073752397 $assertEquals $(@expr1073752398 "cppcheck-2.8/test/testtokenize.cpp" $, 6166 $, "xNULL!=0(x(:?" $, testAst (@expr1073752399 "void f() { {} ((x != NULL) ? (void)0 : x()); }" ) $) $) { $return ; }
6167:
6168:
6169: $if $(@expr1073752400 $!@expr1073752401 $assertEquals $(@expr1073752402 "cppcheck-2.8/test/testtokenize.cpp" $, 6169 $, "a{+d+ bc+" $, testAst (@expr1073752403 "a+({b+c;})+d" ) $) $) { $return ; }
6170: $if $(@expr1073752404 $!@expr1073752405 $assertEquals $(@expr1073752406 "cppcheck-2.8/test/testtokenize.cpp" $, 6170 $, "a{d*+ bc+" $, testAst (@expr1073752407 "a+({b+c;})*d" ) $) $) { $return ; }
6171: $if $(@expr1073752408 $!@expr1073752409 $assertEquals $(@expr1073752410 "cppcheck-2.8/test/testtokenize.cpp" $, 6171 $, "xa{((= bc( yd{((= ef(" $, testAst (@expr1073752411 "x=(int)(a({b(c);}));y=(int)(d({e(f);}));" ) $) $) { $return
6172:
6173: ; }
6174: $if $(@expr1073752412 $!@expr1073752413 $assertEquals $(@expr1073752414 "cppcheck-2.8/test/testtokenize.cpp" $, 6174 $, "A{{,( x0= Bx1={x2={,(" $, testAst (@expr1073752415 "A({},{x=0;});B({x=1},{x=2});" ) $) $) { $return
6175:
6176: ; }
6177: $if $(@expr1073752416 $!@expr1073752417 $assertEquals $(@expr1073752418 "cppcheck-2.8/test/testtokenize.cpp" $, 6177 $, "xMACROtype.T=value.1=,{({=" $, testAst (@expr1073752419 "x = { MACRO( { .type=T, .value=1 } ) }" ) $) $) { $return
6178: ; }
6179: $if $(@expr1073752420 $!@expr1073752421 $assertEquals $(@expr1073752422 "cppcheck-2.8/test/testtokenize.cpp" $, 6179 $, "fori10=i{;;( i--" $, testAst (@expr1073752423 "for (i=10;i;({i--;}) ) {}" ) $) $) { $return ; }
6180: $if $(@expr1073752424 $!@expr1073752425 $assertEquals $(@expr1073752426 "cppcheck-2.8/test/testtokenize.cpp" $, 6180 $, "c{1{,{2.3f{,(" $, testAst (@expr1073752427 "c({{}, {1}}, {2.3f});" ) $) $) { $return
6181: ; }
6182:
6183:
6184: $todoAssertEquals $(@expr1073752428 "cppcheck-2.8/test/testtokenize.cpp" $, 6184 $, "todo" $, "va_argapvoid((,(*0=" $, testAst (@expr1073752429 "*va_arg(ap, void(**) ()) = 0;" ) $) ;
6185:
6186:
6187: $if $(@expr1073752430 $!@expr1073752431 $assertEquals $(@expr1073752432 "cppcheck-2.8/test/testtokenize.cpp" $, 6187 $, "name_bytes[bits~unusedBits>>unusedBits<<{=" $, testAst (@expr1073752433 "const uint8_t name_bytes[] = { (~bits >> unusedBits) << unusedBits };" ) $) $) { $return ; }
6188: $if $(@expr1073752434 $!@expr1073752435 $assertEquals $(@expr1073752436 "cppcheck-2.8/test/testtokenize.cpp" $, 6188 $, "abuf.0{={=" $, testAst (@expr1073752437 "a = { .buf = { 0 } };" ) $) $) { $return ; }
6189: $if $(@expr1073752438 $!@expr1073752439 $assertEquals $(@expr1073752440 "cppcheck-2.8/test/testtokenize.cpp" $, 6189 $, "ab2[a.0=b.0=,{a.0=b.0=,{,{=" $, testAst (@expr1073752441 "struct AB ab[2] = { { .a=0, .b=0 }, { .a=0, .b=0 } };" ) $) $) { $return ; }
6190: $if $(@expr1073752442 $!@expr1073752443 $assertEquals $(@expr1073752444 "cppcheck-2.8/test/testtokenize.cpp" $, 6190 $, "tset{=" $, testAst (@expr1073752445 "struct cgroup_taskset tset = {};" ) $) $) { $return ; }
6191: $if $(@expr1073752446 $!@expr1073752447 $assertEquals $(@expr1073752448 "cppcheck-2.8/test/testtokenize.cpp" $, 6191 $, "s1a&,{2b&,{,{=" $, testAst (@expr1073752449 "s = { {1, &a}, {2, &b} };" ) $) $) { $return ; }
6192: $if $(@expr1073752450 $!@expr1073752451 $assertEquals $(@expr1073752452 "cppcheck-2.8/test/testtokenize.cpp" $, 6192 $, "s0[L.2[x={=" $, testAst (@expr1073752453 "s = { [0].L[2] = x};" ) $) $) { $return ; }
6193: $if $(@expr1073752454 $!@expr1073752455 $assertEquals $(@expr1073752456 "cppcheck-2.8/test/testtokenize.cpp" $, 6193 $, "ac.0={(=" $, testAst (@expr1073752457 "a = (b){.c=0,};" ) $) $) { $return ; }
6194: $if $(@expr1073752458 $!@expr1073752459 $assertEquals $(@expr1073752460 "cppcheck-2.8/test/testtokenize.cpp" $, 6194 $, "xB[1y.z.1={(&=,{={=" $, testAst (@expr1073752461 "x = { [B] = {1, .y = &(struct s) { .z=1 } } };" ) $) $) { $return ; }
6195: $if $(@expr1073752462 $!@expr1073752463 $assertEquals $(@expr1073752464 "cppcheck-2.8/test/testtokenize.cpp" $, 6195 $, "xab,c,{=" $, testAst (@expr1073752465 "x={a,b,(c)};" ) $) $) { $return ; }
6196: $if $(@expr1073752466 $!@expr1073752467 $assertEquals $(@expr1073752468 "cppcheck-2.8/test/testtokenize.cpp" $, 6196 $, "x0fSa.1=b.2=,c.\"\"=,{(||=" $, testAst (@expr1073752469 "x = 0 || f(S{.a = 1, .b = 2, .c = \"\" });" ) $) $) { $return ; }
6197: $if $(@expr1073752470 $!@expr1073752471 $assertEquals $(@expr1073752472 "cppcheck-2.8/test/testtokenize.cpp" $, 6197 $, "x0fSa.1{=b.2{,c.\"\"=,{(||=" $, testAst (@expr1073752473 "x = 0 || f(S{.a = { 1 }, .b { 2 }, .c = \"\" });" ) $) $) { $return ; }
6198: $if $(@expr1073752474 $!@expr1073752475 $assertEquals $(@expr1073752476 "cppcheck-2.8/test/testtokenize.cpp" $, 6198 $, "a0\"\"abc12:?,{{,(" $, testAst (@expr1073752477 "a(0, {{\"\", (abc) ? 1 : 2}});" ) $) $) { $return ; }
6199: $if $(@expr1073752478 $!@expr1073752479 $assertEquals $(@expr1073752480 "cppcheck-2.8/test/testtokenize.cpp" $, 6199 $, "a0\'\'abc12:?,{{,(" $, testAst (@expr1073752481 "a(0, {{\'\', (abc) ? 1 : 2}});" ) $) $) { $return ; }
6200: $if $(@expr1073752482 $!@expr1073752483 $assertEquals $(@expr1073752484 "cppcheck-2.8/test/testtokenize.cpp" $, 6200 $, "x12,{34,{,{56,{78,{,{,{=" $, testAst (@expr1073752485 "x = { { {1,2}, {3,4} }, { {5,6}, {7,8} } };" ) $) $) { $return ; }
6201: $if $(@expr1073752486 $!@expr1073752487 $assertEquals $(@expr1073752488 "cppcheck-2.8/test/testtokenize.cpp" $, 6201 $, "Sa.stdmove::s(=b.1=,{(" $, testAst (@expr1073752489 "S({.a = std::move(s), .b = 1})" ) $) $) { $return ; }
6202:
6203:
6204: $if $(@expr1073752490 $!@expr1073752491 $assertEquals $(@expr1073752492 "cppcheck-2.8/test/testtokenize.cpp" $, 6204 $, "sbar.1{,{(={= forfieldfield++;;(" $, testAst (@expr1073752493 "struct S s = {.bar = (struct foo) { 1, { } } };\nvoid f(struct cmd *) { for (; field; field++) {} }" ) $) $) { $return
6205:
6206: ; }
6207:
6208:
6209: $if $(@expr1073752494 $!@expr1073752495 $assertEquals $(@expr1073752496 "cppcheck-2.8/test/testtokenize.cpp" $, 6209 $, "ab::c(de::(<=return" $, testAst (@expr1073752497 "return a::b(c) <= d<double>::e();" ) $) $) { $return ; }
6210:
6211:
6212: $if $(@expr1073752498 $!@expr1073752499 $assertEquals $(@expr1073752500 "cppcheck-2.8/test/testtokenize.cpp" $, 6212 $, "Class{" $, testAst (@expr1073752501 "Class{};" ) $) $) { $return ; }
6213: $if $(@expr1073752502 $!@expr1073752503 $assertEquals $(@expr1073752504 "cppcheck-2.8/test/testtokenize.cpp" $, 6213 $, "Class12,{" $, testAst (@expr1073752505 "Class{1,2};" ) $) $) { $return ; }
6214: $if $(@expr1073752506 $!@expr1073752507 $assertEquals $(@expr1073752508 "cppcheck-2.8/test/testtokenize.cpp" $, 6214 $, "Class12,{" $, testAst (@expr1073752509 "Class<X>{1,2};" ) $) $) { $return ; }
6215: $if $(@expr1073752510 $!@expr1073752511 $assertEquals $(@expr1073752512 "cppcheck-2.8/test/testtokenize.cpp" $, 6215 $, "abc{d:?=" $, testAst (@expr1073752513 "a=b?c{}:d;" ) $) $) { $return ; }
6216: $if $(@expr1073752514 $!@expr1073752515 $assertEquals $(@expr1073752516 "cppcheck-2.8/test/testtokenize.cpp" $, 6216 $, "abc12,{d:?=" $, testAst (@expr1073752517 "a=b?c{1,2}:d;" ) $) $) { $return ; }
6217: $if $(@expr1073752518 $!@expr1073752519 $assertEquals $(@expr1073752520 "cppcheck-2.8/test/testtokenize.cpp" $, 6217 $, "abc{d:?=" $, testAst (@expr1073752521 "a=b?c<X>{}:d;" ) $) $) { $return ; }
6218: $if $(@expr1073752522 $!@expr1073752523 $assertEquals $(@expr1073752524 "cppcheck-2.8/test/testtokenize.cpp" $, 6218 $, "abc12,{d:?=" $, testAst (@expr1073752525 "a=b?c<X>{1,2}:d;" ) $) $) { $return ; }
6219: $if $(@expr1073752526 $!@expr1073752527 $assertEquals $(@expr1073752528 "cppcheck-2.8/test/testtokenize.cpp" $, 6219 $, "a::12,{" $, testAst (@expr1073752529 "::a{1,2};" ) $) $) { $return ; }
6220: $if $(@expr1073752530 $!@expr1073752531 $assertEquals $(@expr1073752532 "cppcheck-2.8/test/testtokenize.cpp" $, 6220 $, "Abc({newreturn" $, testAst (@expr1073752533 "return new A {b(c)};" ) $) $) { $return ; }
6221: $if $(@expr1073752534 $!@expr1073752535 $assertEquals $(@expr1073752536 "cppcheck-2.8/test/testtokenize.cpp" $, 6221 $, "a{{return" $, testAst (@expr1073752537 "return{{a}};" ) $) $) { $return ; }
6222: $if $(@expr1073752538 $!@expr1073752539 $assertEquals $(@expr1073752540 "cppcheck-2.8/test/testtokenize.cpp" $, 6222 $, "a{b{,{return" $, testAst (@expr1073752541 "return{{a},{b}};" ) $) $) { $return ; }
6223: $if $(@expr1073752542 $!@expr1073752543 $assertEquals $(@expr1073752544 "cppcheck-2.8/test/testtokenize.cpp" $, 6223 $, "stdvector::{{,{return" $, testAst (@expr1073752545 "return std::vector<std::vector<int> >{{},{}};" ) $) $) { $return ; }
6224: $if $(@expr1073752546 $!@expr1073752547 $assertEquals $(@expr1073752548 "cppcheck-2.8/test/testtokenize.cpp" $, 6224 $, "stdvector::{2{,{return" $, testAst (@expr1073752549 "return std::vector<std::vector<int> >{{}, {2}};" ) $) $) { $return ; }
6225: $if $(@expr1073752550 $!@expr1073752551 $assertEquals $(@expr1073752552 "cppcheck-2.8/test/testtokenize.cpp" $, 6225 $, "forbstdvector::{{,{:(" $, testAst (@expr1073752553 "for (auto b : std::vector<std::vector<int> >{{},{}});" ) $) $) { $return ; }
6226: $if $(@expr1073752554 $!@expr1073752555 $assertEquals $(@expr1073752556 "cppcheck-2.8/test/testtokenize.cpp" $, 6226 $, "forbstdvector::{2{,{:(" $, testAst (@expr1073752557 "for (auto b : std::vector<std::vector<int> >{{}, {2}});" ) $) $) { $return ; }
6227: $if $(@expr1073752558 $!@expr1073752559 $assertEquals $(@expr1073752560 "cppcheck-2.8/test/testtokenize.cpp" $, 6227 $, "abR{{,P(,((" $, testAst (@expr1073752561 "a(b(R{},{},P()));" ) $) $) { $return ; }
6228: $if $(@expr1073752562 $!@expr1073752563 $assertEquals $(@expr1073752564 "cppcheck-2.8/test/testtokenize.cpp" $, 6228 $, "f1{2{,3{,{x,(" $, testAst (@expr1073752565 "f({{1},{2},{3}},x);" ) $) $) { $return ; }
6229: $if $(@expr1073752566 $!@expr1073752567 $assertEquals $(@expr1073752568 "cppcheck-2.8/test/testtokenize.cpp" $, 6229 $, "a1{ b2{" $, testAst (@expr1073752569 "auto a{1}; auto b{2};" ) $) $) { $return ; }
6230: $if $(@expr1073752570 $!@expr1073752571 $assertEquals $(@expr1073752572 "cppcheck-2.8/test/testtokenize.cpp" $, 6230 $, "var1ab::23,{,4ab::56,{,{,{{" $, testAst (@expr1073752573 "auto var{{1,a::b{2,3}}, {4,a::b{5,6}}};" ) $) $) { $return ; }
6231: $if $(@expr1073752574 $!@expr1073752575 $assertEquals $(@expr1073752576 "cppcheck-2.8/test/testtokenize.cpp" $, 6231 $, "var{{,{,{{" $, testAst (@expr1073752577 "auto var{ {{},{}}, {} };" ) $) $) { $return ; }
6232: $if $(@expr1073752578 $!@expr1073752579 $assertEquals $(@expr1073752580 "cppcheck-2.8/test/testtokenize.cpp" $, 6232 $, "fXYabcfalse==CD:?,{,{(" $, testAst (@expr1073752581 "f({X, {Y, abc == false ? C : D}});" ) $) $) { $return ; }
6233: $if $(@expr1073752582 $!@expr1073752583 $assertEquals $(@expr1073752584 "cppcheck-2.8/test/testtokenize.cpp" $, 6233 $, "stdvector::p0[{(return" $, testAst (@expr1073752585 "return std::vector<int>({ p[0] });" ) $) $) { $return ; }
6234:
6235:
6236: $if $(@expr1073752586 $!@expr1073752587 $assertEquals $(@expr1073752588 "cppcheck-2.8/test/testtokenize.cpp" $, 6236 $, "decltypex((" $, testAst (@expr1073752589 "decltype(x)();" ) $) $) { $return ; }
6237: $if $(@expr1073752590 $!@expr1073752591 $assertEquals $(@expr1073752592 "cppcheck-2.8/test/testtokenize.cpp" $, 6237 $, "decltypex({" $, testAst (@expr1073752593 "decltype(x){};" ) $) $) { $return ; }
6238: $if $(@expr1073752594 $!@expr1073752595 $assertEquals $(@expr1073752596 "cppcheck-2.8/test/testtokenize.cpp" $, 6238 $, "decltypexy+(yx+(" $, testAst (@expr1073752597 "decltype(x+y)(y+x);" ) $) $) { $return ; }
6239: $if $(@expr1073752598 $!@expr1073752599 $assertEquals $(@expr1073752600 "cppcheck-2.8/test/testtokenize.cpp" $, 6239 $, "decltypexy+(yx+{" $, testAst (@expr1073752601 "decltype(x+y){y+x};" ) $) $) { $return ; }
6240: $if $(@expr1073752602 $!@expr1073752603 $assertEquals $(@expr1073752604 "cppcheck-2.8/test/testtokenize.cpp" $, 6240 $, "adecltypeac::(,decltypead::(," $, testAst (@expr1073752605 "template <typename a> void b(a &, decltype(a::c), decltype(a::d));" ) $) $) { $return
6241: ; }
6242:
6243:
6244: $tokenizeAndStringify_ $(@expr1073752606 "cppcheck-2.8/test/testtokenize.cpp" $, 6244 $, "void foo(const std::vector<std::string>& locations = {\"\"}) {\n    for (int i = 0; i <= 123; ++i)\n        x->emplace_back(y);\n}" $)
6245:
6246:
6247: ;
6248: }
6249:
6250: void astbrackets ( ) {
6251: $if $(@expr1073752607 $!@expr1073752608 $assertEquals $(@expr1073752609 "cppcheck-2.8/test/testtokenize.cpp" $, 6251 $, "a23+[4+" $, testAst (@expr1073752610 "a[2+3]+4" ) $) $) { $return ; }
6252: $if $(@expr1073752611 $!@expr1073752612 $assertEquals $(@expr1073752613 "cppcheck-2.8/test/testtokenize.cpp" $, 6252 $, "a1[0[" $, testAst (@expr1073752614 "a[1][0]" ) $) $) { $return ; }
6253: $if $(@expr1073752615 $!@expr1073752616 $assertEquals $(@expr1073752617 "cppcheck-2.8/test/testtokenize.cpp" $, 6253 $, "ab0[=" $, testAst (@expr1073752618 "a=(b)[0];" ) $) $) { $return ; }
6254: $if $(@expr1073752619 $!@expr1073752620 $assertEquals $(@expr1073752621 "cppcheck-2.8/test/testtokenize.cpp" $, 6254 $, "abc.0[=" $, testAst (@expr1073752622 "a=b.c[0];" ) $) $) { $return ; }
6255: $if $(@expr1073752623 $!@expr1073752624 $assertEquals $(@expr1073752625 "cppcheck-2.8/test/testtokenize.cpp" $, 6255 $, "ab0[1[=" $, testAst (@expr1073752626 "a=b[0][1];" ) $) $) { $return ; }
6256: }
6257:
6258: void astvardecl ( ) {
6259:
6260: $if $(@expr1073752627 $!@expr1073752628 $assertEquals $(@expr1073752629 "cppcheck-2.8/test/testtokenize.cpp" $, 6260 $, "a1[\"\"=" $, testAst (@expr1073752630 "char a[1]=\"\";" ) $) $) { $return ; }
6261: $if $(@expr1073752631 $!@expr1073752632 $assertEquals $(@expr1073752633 "cppcheck-2.8/test/testtokenize.cpp" $, 6261 $, "charp*(3[char5[3[new=" $, testAst (@expr1073752634 "char (*p)[3] = new char[5][3];" ) $) $) { $return ; }
6262: $if $(@expr1073752635 $!@expr1073752636 $assertEquals $(@expr1073752637 "cppcheck-2.8/test/testtokenize.cpp" $, 6262 $, "varp=" $, testAst (@expr1073752638 "const int *var = p;" ) $) $) { $return ; }
6263: $if $(@expr1073752639 $!@expr1073752640 $assertEquals $(@expr1073752641 "cppcheck-2.8/test/testtokenize.cpp" $, 6263 $, "intrp0[*(&" $, testAst (@expr1073752642 "int& r(*p[0]);" ) $) $) { $return ; }
6264:
6265:
6266: const char code1@var949 [@expr1073752643 38 ] =@expr1073752644 "using uno::Ref;\nRef<X> r;\nint var(0);"
6267:
6268: ;
6269: $if $(@expr1073752645 $!@expr1073752646 $assertEquals $(@expr1073752647 "cppcheck-2.8/test/testtokenize.cpp" $, 6269 $, "unoRef:: var0(" $, testAst (@expr1073752648 code1@var949 ) $) $) { $return ; }
6270:
6271: $if $(@expr1073752649 $!@expr1073752650 $assertEquals $(@expr1073752651 "cppcheck-2.8/test/testtokenize.cpp" $, 6271 $, "vary=" $, testAst (@expr1073752652 "std::string var = y;" ) $) $) { $return ; }
6272:
6273:
6274: $if $(@expr1073752653 $!@expr1073752654 $assertEquals $(@expr1073752655 "cppcheck-2.8/test/testtokenize.cpp" $, 6274 $, "decltypex( var1=" $, testAst (@expr1073752656 "decltype(x) var = 1;" ) $) $) { $return ; }
6275: $if $(@expr1073752657 $!@expr1073752658 $assertEquals $(@expr1073752659 "cppcheck-2.8/test/testtokenize.cpp" $, 6275 $, "a1bdecltypet((>2,(" $, testAst (@expr1073752660 "a(1 > b(decltype(t)), 2);" ) $) $) { $return ; }
6276: $if $(@expr1073752661 $!@expr1073752662 $assertEquals $(@expr1073752663 "cppcheck-2.8/test/testtokenize.cpp" $, 6276 $, "decltypex({01:?" $, testAst (@expr1073752664 "decltype(x){} ? 0 : 1;" ) $) $) { $return ; }
6277:
6278: $if $(@expr1073752665 $!@expr1073752666 $assertEquals $(@expr1073752667 "cppcheck-2.8/test/testtokenize.cpp" $, 6278 $, "Tp* Tt* forctp.=;;( tp." $, testAst (@expr1073752668 "struct T { T* p; };\nvoid f(T * t) {\n    for (decltype(t->p) (c) = t->p; ;) {}\n}\n" ) $) $) { $return
6279:
6280:
6281: ; }
6282: $if $(@expr1073752669 $!@expr1073752670 $assertEquals $(@expr1073752671 "cppcheck-2.8/test/testtokenize.cpp" $, 6282 $, "x0=a, stdtie::a(x=" $, testAst (@expr1073752672 "int x = 0, a; std::tie(a) = x;\n" ) $) $) { $return ; }
6283: $if $(@expr1073752673 $!@expr1073752674 $assertEquals $(@expr1073752675 "cppcheck-2.8/test/testtokenize.cpp" $, 6283 $, "tmpa*=a*b*=,b*tmp=," $, testAst (@expr1073752676 "{ ((tmp) = (*a)), ((*a) = (*b)), ((*b) = (tmp)); }" ) $) $) { $return ; }
6284: $if $(@expr1073752677 $!@expr1073752678 $assertEquals $(@expr1073752679 "cppcheck-2.8/test/testtokenize.cpp" $, 6284 $, "a(*v=" $, testAst (@expr1073752680 "(*(volatile unsigned int *)(a) = (v));" ) $) $) { $return ; }
6285: $if $(@expr1073752681 $!@expr1073752682 $assertEquals $(@expr1073752683 "cppcheck-2.8/test/testtokenize.cpp" $, 6285 $, "i(j=" $, testAst (@expr1073752684 "(int&)(i) = j;" ) $) $) { $return ; }
6286: }
6287:
6288: void astunaryop ( ) {
6289: $if $(@expr1073752685 $!@expr1073752686 $assertEquals $(@expr1073752687 "cppcheck-2.8/test/testtokenize.cpp" $, 6289 $, "1a--+" $, testAst (@expr1073752688 "1 + --a" ) $) $) { $return ; }
6290: $if $(@expr1073752689 $!@expr1073752690 $assertEquals $(@expr1073752691 "cppcheck-2.8/test/testtokenize.cpp" $, 6290 $, "1a--+" $, testAst (@expr1073752692 "1 + a--" ) $) $) { $return ; }
6291: $if $(@expr1073752693 $!@expr1073752694 $assertEquals $(@expr1073752695 "cppcheck-2.8/test/testtokenize.cpp" $, 6291 $, "ab+!" $, testAst (@expr1073752696 "!(a+b)" ) $) $) { $return ; }
6292: $if $(@expr1073752697 $!@expr1073752698 $assertEquals $(@expr1073752699 "cppcheck-2.8/test/testtokenize.cpp" $, 6292 $, "ab.++" $, testAst (@expr1073752700 "++a.b;" ) $) $) { $return ; }
6293: $if $(@expr1073752701 $!@expr1073752702 $assertEquals $(@expr1073752703 "cppcheck-2.8/test/testtokenize.cpp" $, 6293 $, "ab.++" $, testAst (@expr1073752704 "a.b++;" ) $) $) { $return ; }
6294: $if $(@expr1073752705 $!@expr1073752706 $assertEquals $(@expr1073752707 "cppcheck-2.8/test/testtokenize.cpp" $, 6294 $, "ab::++" $, testAst (@expr1073752708 "a::b++;" ) $) $) { $return ; }
6295: $if $(@expr1073752709 $!@expr1073752710 $assertEquals $(@expr1073752711 "cppcheck-2.8/test/testtokenize.cpp" $, 6295 $, "c5[--*" $, testAst (@expr1073752712 "*c[5]--;" ) $) $) { $return ; }
6296: $if $(@expr1073752713 $!@expr1073752714 $assertEquals $(@expr1073752715 "cppcheck-2.8/test/testtokenize.cpp" $, 6296 $, "xreturn" $, testAst (@expr1073752716 "return x;" ) $) $) { $return ; }
6297: $if $(@expr1073752717 $!@expr1073752718 $assertEquals $(@expr1073752719 "cppcheck-2.8/test/testtokenize.cpp" $, 6297 $, "x(throw" $, testAst (@expr1073752720 ";throw x();" ) $) $) { $return ; }
6298: $if $(@expr1073752721 $!@expr1073752722 $assertEquals $(@expr1073752723 "cppcheck-2.8/test/testtokenize.cpp" $, 6298 $, "a*bc:?return" $, testAst (@expr1073752724 "return *a ? b : c;" ) $) $) { $return ; }
6299: $if $(@expr1073752725 $!@expr1073752726 $assertEquals $(@expr1073752727 "cppcheck-2.8/test/testtokenize.cpp" $, 6299 $, "xy*--=" $, testAst (@expr1073752728 "x = -- * y;" ) $) $) { $return ; }
6300: $if $(@expr1073752729 $!@expr1073752730 $assertEquals $(@expr1073752731 "cppcheck-2.8/test/testtokenize.cpp" $, 6300 $, "x(throw" $, testAst (@expr1073752732 ";throw (foo) x;" ) $) $) { $return ; }
6301:
6302:
6303: $if $(@expr1073752733 $!@expr1073752734 $assertEquals $(@expr1073752735 "cppcheck-2.8/test/testtokenize.cpp" $, 6303 $, "abcd::12,(e/:?=" $, testAst (@expr1073752736 "a = b ? c : ::d(1,2) / e;" ) $) $) { $return ; }
6304:
6305:
6306: $if $(@expr1073752737 $!@expr1073752738 $assertEquals $(@expr1073752739 "cppcheck-2.8/test/testtokenize.cpp" $, 6306 $, "ab4<<c--+1:?" $, testAst (@expr1073752740 "a ? (b << 4) + --c : 1" ) $) $) { $return ; }
6307: $if $(@expr1073752741 $!@expr1073752742 $assertEquals $(@expr1073752743 "cppcheck-2.8/test/testtokenize.cpp" $, 6307 $, "ab4<<c--+1:?" $, testAst (@expr1073752744 "a ? (b << 4) + c-- : 1" ) $) $) { $return ; }
6308: $if $(@expr1073752745 $!@expr1073752746 $assertEquals $(@expr1073752747 "cppcheck-2.8/test/testtokenize.cpp" $, 6308 $, "ai[i= i--" $, testAst (@expr1073752748 "a[i]=i; --i;" ) $) $) { $return ; }
6309: }
6310:
6311: void astfunction ( ) {
6312: $if $(@expr1073752749 $!@expr1073752750 $assertEquals $(@expr1073752751 "cppcheck-2.8/test/testtokenize.cpp" $, 6312 $, "1f(+2+" $, testAst (@expr1073752752 "1+f()+2" ) $) $) { $return ; }
6313: $if $(@expr1073752753 $!@expr1073752754 $assertEquals $(@expr1073752755 "cppcheck-2.8/test/testtokenize.cpp" $, 6313 $, "1f2(+3+" $, testAst (@expr1073752756 "1+f(2)+3" ) $) $) { $return ; }
6314: $if $(@expr1073752757 $!@expr1073752758 $assertEquals $(@expr1073752759 "cppcheck-2.8/test/testtokenize.cpp" $, 6314 $, "1f23,(+4+" $, testAst (@expr1073752760 "1+f(2,3)+4" ) $) $) { $return ; }
6315: $if $(@expr1073752761 $!@expr1073752762 $assertEquals $(@expr1073752763 "cppcheck-2.8/test/testtokenize.cpp" $, 6315 $, "1f2a&,(+" $, testAst (@expr1073752764 "1+f(2,&a)" ) $) $) { $return ; }
6316: $if $(@expr1073752765 $!@expr1073752766 $assertEquals $(@expr1073752767 "cppcheck-2.8/test/testtokenize.cpp" $, 6316 $, "argv[" $, testAst (@expr1073752768 "int f(char argv[]);" ) $) $) { $return ; }
6317: $if $(@expr1073752769 $!@expr1073752770 $assertEquals $(@expr1073752771 "cppcheck-2.8/test/testtokenize.cpp" $, 6317 $, "" $, testAst (@expr1073752772 "extern unsigned f(const char *);" ) $) $) { $return ; }
6318: $if $(@expr1073752773 $!@expr1073752774 $assertEquals $(@expr1073752775 "cppcheck-2.8/test/testtokenize.cpp" $, 6318 $, "charformat*...," $, testAst (@expr1073752776 "extern void f(const char *format, ...);" ) $) $) { $return ; }
6319: $if $(@expr1073752777 $!@expr1073752778 $assertEquals $(@expr1073752779 "cppcheck-2.8/test/testtokenize.cpp" $, 6319 $, "int((void," $, testAst (@expr1073752780 "extern int for_each_commit_graft(int (*)(int*), void *);" ) $) $) { $return ; }
6320: $if $(@expr1073752781 $!@expr1073752782 $assertEquals $(@expr1073752783 "cppcheck-2.8/test/testtokenize.cpp" $, 6320 $, "for;;(" $, testAst (@expr1073752784 "for (;;) {}" ) $) $) { $return ; }
6321: $if $(@expr1073752785 $!@expr1073752786 $assertEquals $(@expr1073752787 "cppcheck-2.8/test/testtokenize.cpp" $, 6321 $, "xsizeofvoid(=" $, testAst (@expr1073752788 "x=sizeof(void*)" ) $) $) { $return ; }
6322: $if $(@expr1073752789 $!@expr1073752790 $assertEquals $(@expr1073752791 "cppcheck-2.8/test/testtokenize.cpp" $, 6322 $, "abc{d{,{(=" $, testAst (@expr1073752792 "a = b({ c{}, d{} });" ) $) $) { $return ; }
6323: $if $(@expr1073752793 $!@expr1073752794 $assertEquals $(@expr1073752795 "cppcheck-2.8/test/testtokenize.cpp" $, 6323 $, "abc;(" $, testAst (@expr1073752796 "a(b;c)" ) $) $) { $return ; }
6324: $if $(@expr1073752797 $!@expr1073752798 $assertEquals $(@expr1073752799 "cppcheck-2.8/test/testtokenize.cpp" $, 6324 $, "x{( forbc;;(" $, testAst (@expr1073752800 "x({ for(a;b;c){} });" ) $) $) { $return ; }
6325: $if $(@expr1073752801 $!@expr1073752802 $assertEquals $(@expr1073752803 "cppcheck-2.8/test/testtokenize.cpp" $, 6325 $, "PT.(" $, testAst (@expr1073752804 "P->~T();" ) $) $) { $return ; }
6326: }
6327:
6328: void asttemplate ( ) {
6329: $if $(@expr1073752805 $!@expr1073752806 $assertEquals $(@expr1073752807 "cppcheck-2.8/test/testtokenize.cpp" $, 6329 $, "a(3==" $, testAst (@expr1073752808 "a<int>()==3" ) $) $) { $return ; }
6330: $if $(@expr1073752809 $!@expr1073752810 $assertEquals $(@expr1073752811 "cppcheck-2.8/test/testtokenize.cpp" $, 6330 $, "ab(== f(" $, testAst (@expr1073752812 "a == b<c>(); f();" ) $) $) { $return ; }
6331: $if $(@expr1073752813 $!@expr1073752814 $assertEquals $(@expr1073752815 "cppcheck-2.8/test/testtokenize.cpp" $, 6331 $, "static_casta(i[" $, testAst (@expr1073752816 "; static_cast<char*>(a)[i];" ) $) $) { $return ; }
6332: $if $(@expr1073752817 $!@expr1073752818 $assertEquals $(@expr1073752819 "cppcheck-2.8/test/testtokenize.cpp" $, 6332 $, "reinterpret_castreinterpret_castptr(123&(" $, testAst (@expr1073752820 ";reinterpret_cast<void*>(reinterpret_cast<unsigned>(ptr) & 123);" ) $) $) { $return
6333: ; }
6334: $if $(@expr1073752821 $!@expr1073752822 $assertEquals $(@expr1073752823 "cppcheck-2.8/test/testtokenize.cpp" $, 6334 $, "bcd.(=" $, testAst (@expr1073752824 ";a<int> && b = c->d();" ) $) $) { $return ; }
6335:
6336:
6337: $do ${ $try ${ testAst (@expr1073752825 "class C : public ::a::b<bool> { };" ) $; $} $catch $(@expr1073752826 $... $) ${ $assertNoThrowFail $(@expr1073752827 "cppcheck-2.8/test/testtokenize.cpp" $, 6337 $) $; $} $} $while $(@expr1073752828 $false $) ;
6338: $if $(@expr1073752829 $!@expr1073752830 $assertEquals $(@expr1073752831 "cppcheck-2.8/test/testtokenize.cpp" $, 6338 $, "AB: abc+=" $, testAst (@expr1073752832 "struct A : public B<C*> { void f() { a=b+c; } };" ) $) $) { $return ; }
6339:
6340: $if $(@expr1073752833 $!@expr1073752834 $assertEquals $(@expr1073752835 "cppcheck-2.8/test/testtokenize.cpp" $, 6340 $, "xfts(=" $, testAst (@expr1073752836 "; auto x = f(ts...);" ) $) $) { $return ; }
6341: }
6342:
6343: void astcast ( ) {
6344: $if $(@expr1073752837 $!@expr1073752838 $assertEquals $(@expr1073752839 "cppcheck-2.8/test/testtokenize.cpp" $, 6344 $, "ac&(=" $, testAst (@expr1073752840 "a = (long)&c;" ) $) $) { $return ; }
6345: $if $(@expr1073752841 $!@expr1073752842 $assertEquals $(@expr1073752843 "cppcheck-2.8/test/testtokenize.cpp" $, 6345 $, "ac*(=" $, testAst (@expr1073752844 "a = (Foo*)*c;" ) $) $) { $return ; }
6346: $if $(@expr1073752845 $!@expr1073752846 $assertEquals $(@expr1073752847 "cppcheck-2.8/test/testtokenize.cpp" $, 6346 $, "ac-(=" $, testAst (@expr1073752848 "a = (long)-c;" ) $) $) { $return ; }
6347: $if $(@expr1073752849 $!@expr1073752850 $assertEquals $(@expr1073752851 "cppcheck-2.8/test/testtokenize.cpp" $, 6347 $, "ac~(=" $, testAst (@expr1073752852 "a = (b)~c;" ) $) $) { $return ; }
6348: $if $(@expr1073752853 $!@expr1073752854 $assertEquals $(@expr1073752855 "cppcheck-2.8/test/testtokenize.cpp" $, 6348 $, "ac(=" $, testAst (@expr1073752856 "a = (some<strange, type>)c;" ) $) $) { $return ; }
6349: $if $(@expr1073752857 $!@expr1073752858 $assertEquals $(@expr1073752859 "cppcheck-2.8/test/testtokenize.cpp" $, 6349 $, "afoveon_avgimage((foveon_avgimage((+=" $, testAst (@expr1073752860 "a = foveon_avg(((short(*)[4]) image)) + foveon_avg(((short(*)[4]) image));" ) $) $) { $return ; }
6350: $if $(@expr1073752861 $!@expr1073752862 $assertEquals $(@expr1073752863 "cppcheck-2.8/test/testtokenize.cpp" $, 6350 $, "c(40<<return" $, testAst (@expr1073752864 "return (long long)c << 40;" ) $) $) { $return ; }
6351: $if $(@expr1073752865 $!@expr1073752866 $assertEquals $(@expr1073752867 "cppcheck-2.8/test/testtokenize.cpp" $, 6351 $, "ab-(=" $, testAst (@expr1073752868 "a = ((int)-b)" ) $) $) { $return ; }
6352: $if $(@expr1073752869 $!@expr1073752870 $assertEquals $(@expr1073752871 "cppcheck-2.8/test/testtokenize.cpp" $, 6352 $, "xdouble123(i*(=" $, testAst (@expr1073752872 "x = (int)(double(123)*i);" ) $) $) { $return ; }
6353: $if $(@expr1073752873 $!@expr1073752874 $assertEquals $(@expr1073752875 "cppcheck-2.8/test/testtokenize.cpp" $, 6353 $, "ac(=" $, testAst (@expr1073752876 "a = (::b)c;" ) $) $) { $return ; }
6354: $if $(@expr1073752877 $!@expr1073752878 $assertEquals $(@expr1073752879 "cppcheck-2.8/test/testtokenize.cpp" $, 6354 $, "abcd,({(=" $, testAst (@expr1073752880 "a = (s){b(c, d)};" ) $) $) { $return ; }
6355: $if $(@expr1073752881 $!@expr1073752882 $assertEquals $(@expr1073752883 "cppcheck-2.8/test/testtokenize.cpp" $, 6355 $, "xatoistr({(=" $, testAst (@expr1073752884 "x = (struct X){atoi(str)};" ) $) $) { $return ; }
6356: $if $(@expr1073752885 $!@expr1073752886 $assertEquals $(@expr1073752887 "cppcheck-2.8/test/testtokenize.cpp" $, 6356 $, "xa.0=b.0=,c.0=,{(=" $, testAst (@expr1073752888 "x = (struct abc) { .a=0, .b=0, .c=0 };" ) $) $) { $return ; }
6357:
6358: $if $(@expr1073752889 $!@expr1073752890 $assertEquals $(@expr1073752891 "cppcheck-2.8/test/testtokenize.cpp" $, 6358 $, "yz.(return" $, testAst (@expr1073752892 "return (x)(y).z;" ) $) $) { $return ; }
6359:
6360: $if $(@expr1073752893 $!@expr1073752894 $assertEquals $(@expr1073752895 "cppcheck-2.8/test/testtokenize.cpp" $, 6360 $, "fon!(restoring01:?,(" $, testAst (@expr1073752896 "f((long) !on, restoring ? 0 : 1);" ) $) $) { $return ; }
6361:
6362: $if $(@expr1073752897 $!@expr1073752898 $assertEquals $(@expr1073752899 "cppcheck-2.8/test/testtokenize.cpp" $, 6362 $, "esi.!(=" $, testAst (@expr1073752900 "E e = (E)!s->i;" ) $) $) { $return ; }
6363:
6364: $if $(@expr1073752901 $!@expr1073752902 $assertEquals $(@expr1073752903 "cppcheck-2.8/test/testtokenize.cpp" $, 6364 $, "xp(= 12>34:?" $, testAst (@expr1073752904 "x = ( const char ( * ) [ 1 > 2 ? 3 : 4 ] ) p ;" ) $) $) { $return ; }
6365:
6366:
6367: $if $(@expr1073752905 $!@expr1073752906 $assertEquals $(@expr1073752907 "cppcheck-2.8/test/testtokenize.cpp" $, 6367 $, "AB||" $, testAst (@expr1073752908 "(A)||(B)" ) $) $) { $return ; }
6368: $if $(@expr1073752909 $!@expr1073752910 $assertEquals $(@expr1073752911 "cppcheck-2.8/test/testtokenize.cpp" $, 6368 $, "abc[1&=" $, testAst (@expr1073752912 "a = (b[c]) & 1;" ) $) $) { $return ; }
6369: $if $(@expr1073752913 $!@expr1073752914 $assertEquals $(@expr1073752915 "cppcheck-2.8/test/testtokenize.cpp" $, 6369 $, "abc::(=" $, testAst (@expr1073752916 "a = (b::c)();" ) $) $) { $return ; }
6370:
6371: $if $(@expr1073752917 $!@expr1073752918 $assertEquals $(@expr1073752919 "cppcheck-2.8/test/testtokenize.cpp" $, 6371 $, "pcharnew(=" $, testAst (@expr1073752920 "p = (void *)(new char);" ) $) $) { $return ; }
6372: }
6373:
6374: void astlambda ( ) {
6375:
|
6379:
6380: $if $(@expr1073752921 $!@expr1073752922 $assertEquals $(@expr1073752923 "cppcheck-2.8/test/testtokenize.cpp" $, 6380 $, "x{(a&[( ai=" $, testAst (@expr1073752924 "x([&a](int i){a=i;});" ) $) $) { $return ; }
6381: $if $(@expr1073752925 $!@expr1073752926 $assertEquals $(@expr1073752927 "cppcheck-2.8/test/testtokenize.cpp" $, 6381 $, "{([(return 0return" $, testAst (@expr1073752928 "return [](){ return 0; }();" ) $) $) { $return ; }
6382:
6383:
6384: $if $(@expr1073752929 $!@expr1073752930 $assertEquals $(@expr1073752931 "cppcheck-2.8/test/testtokenize.cpp" $, 6384 $, "x{([( ai=" $, testAst (@expr1073752932 "x([](int i) noexcept(true) { a=i; });" ) $) $) { $return ; }
6385: $if $(@expr1073752933 $!@expr1073752934 $assertEquals $(@expr1073752935 "cppcheck-2.8/test/testtokenize.cpp" $, 6385 $, "x{([( ai=" $, testAst (@expr1073752936 "x([](int i) mutable noexcept(true) { a=i; });" ) $) $) { $return ; }
6386: $if $(@expr1073752937 $!@expr1073752938 $assertEquals $(@expr1073752939 "cppcheck-2.8/test/testtokenize.cpp" $, 6386 $, "x{([( ai=" $, testAst (@expr1073752940 "x([](int i) const noexcept(true) { a=i; });" ) $) $) { $return ; }
6387:
6388:
6389: $if $(@expr1073752941 $!@expr1073752942 $assertEquals $(@expr1073752943 "cppcheck-2.8/test/testtokenize.cpp" $, 6389 $, "x{([( ai=" $, testAst (@expr1073752944 "x([](int i) const mutable { a=i; });" ) $) $) { $return ; }
6390: $if $(@expr1073752945 $!@expr1073752946 $assertEquals $(@expr1073752947 "cppcheck-2.8/test/testtokenize.cpp" $, 6390 $, "x{([( ai=" $, testAst (@expr1073752948 "x([](int i) mutable const { a=i; });" ) $) $) { $return ; }
6391: $if $(@expr1073752949 $!@expr1073752950 $assertEquals $(@expr1073752951 "cppcheck-2.8/test/testtokenize.cpp" $, 6391 $, "x{([( ai=" $, testAst (@expr1073752952 "x([](int i) const mutable noexcept(true) { a=i; });" ) $) $) { $return ; }
6392: $if $(@expr1073752953 $!@expr1073752954 $assertEquals $(@expr1073752955 "cppcheck-2.8/test/testtokenize.cpp" $, 6392 $, "x{([( ai=" $, testAst (@expr1073752956 "x([](int i) mutable const noexcept(true) { a=i; });" ) $) $) { $return ; }
6393:
6394:
6395: $if $(@expr1073752957 $!@expr1073752958 $assertEquals $(@expr1073752959 "cppcheck-2.8/test/testtokenize.cpp" $, 6395 $, "{([(return 0return" $, testAst (@expr1073752960 "return []() -> int { return 0; }();" ) $) $) { $return ; }
6396: $if $(@expr1073752961 $!@expr1073752962 $assertEquals $(@expr1073752963 "cppcheck-2.8/test/testtokenize.cpp" $, 6396 $, "{(something[(return 0return" $, testAst (@expr1073752964 "return [something]() -> int { return 0; }();" ) $) $) { $return ; }
6397: $if $(@expr1073752965 $!@expr1073752966 $assertEquals $(@expr1073752967 "cppcheck-2.8/test/testtokenize.cpp" $, 6397 $, "{([cd,(return 0return" $, testAst (@expr1073752968 "return [](int a, int b) -> int { return 0; }(c, d);" ) $) $) { $return ; }
6398: $if $(@expr1073752969 $!@expr1073752970 $assertEquals $(@expr1073752971 "cppcheck-2.8/test/testtokenize.cpp" $, 6398 $, "{([return" $, testAst (@expr1073752972 "return []() -> decltype(0) {};" ) $) $) { $return ; }
6399: $if $(@expr1073752973 $!@expr1073752974 $assertEquals $(@expr1073752975 "cppcheck-2.8/test/testtokenize.cpp" $, 6399 $, "x{(&[=" $, testAst (@expr1073752976 "x = [&]()->std::string const & {};" ) $) $) { $return ; }
6400: $if $(@expr1073752977 $!@expr1073752978 $assertEquals $(@expr1073752979 "cppcheck-2.8/test/testtokenize.cpp" $, 6400 $, "f{([=" $, testAst (@expr1073752980 "f = []() -> foo* {};" ) $) $) { $return ; }
6401: $if $(@expr1073752981 $!@expr1073752982 $assertEquals $(@expr1073752983 "cppcheck-2.8/test/testtokenize.cpp" $, 6401 $, "f{([=" $, testAst (@expr1073752984 "f = []() -> foo&& {};" ) $) $) { $return ; }
6402: $if $(@expr1073752985 $!@expr1073752986 $assertEquals $(@expr1073752987 "cppcheck-2.8/test/testtokenize.cpp" $, 6402 $, "f{([=" $, testAst (@expr1073752988 "f = [](void) mutable -> foo* {};" ) $) $) { $return ; }
6403: $if $(@expr1073752989 $!@expr1073752990 $assertEquals $(@expr1073752991 "cppcheck-2.8/test/testtokenize.cpp" $, 6403 $, "f{([=" $, testAst (@expr1073752992 "f = []() mutable {};" ) $) $) { $return ; }
6404:
6405: $if $(@expr1073752993 $!@expr1073752994 $assertEquals $(@expr1073752995 "cppcheck-2.8/test/testtokenize.cpp" $, 6405 $, "x{([= 0return" $, testAst (@expr1073752996 "x = [](){return 0; };" ) $) $) { $return ; }
6406:
6407: $if $(@expr1073752997 $!@expr1073752998 $assertEquals $(@expr1073752999 "cppcheck-2.8/test/testtokenize.cpp" $, 6407 $, "ab{&[(= cd=" $, testAst (@expr1073753000 "a = b([&]{c=d;});" ) $) $) { $return ; }
6408:
6409:
6410: $if $(@expr1073753001 $!@expr1073753002 $assertEquals $(@expr1073753003 "cppcheck-2.8/test/testtokenize.cpp" $, 6410 $, "f{([( switchx( 1case y++" $, testAst (@expr1073753004 "f([](){switch(x){case 1:{++y;}}});" ) $) $) { $return ; }
6411:
6412: $if $(@expr1073753005 $!@expr1073753006 $assertEquals $(@expr1073753007 "cppcheck-2.8/test/testtokenize.cpp" $, 6412 $, "{(=[{return ab=" $, testAst (@expr1073753008 "return {\n  [=]() {\n    a = b;\n  }\n};\n" ) $) $) { $return
6413:
|
6416:
6417: ; }
6418: $if $(@expr1073753009 $!@expr1073753010 $assertEquals $(@expr1073753011 "cppcheck-2.8/test/testtokenize.cpp" $, 6418 $, "{=[{return ab=" $, testAst (@expr1073753012 "return {\n  [=] {\n    a = b;\n  }\n};\n" ) $) $) { $return
6419:
|
6422:
6423: ; }
6424: $if $(@expr1073753013 $!@expr1073753014 $assertEquals $(@expr1073753015 "cppcheck-2.8/test/testtokenize.cpp" $, 6424 $, "{(=[{return ab=" $, testAst (@expr1073753016 "return {\n  [=]() -> int {\n    a=b;\n  }\n}" ) $) $) { $return
6425:
|
6428:
6429: ; }
6430: $if $(@expr1073753017 $!@expr1073753018 $assertEquals $(@expr1073753019 "cppcheck-2.8/test/testtokenize.cpp" $, 6430 $, "{(=[{return ab=" $, testAst (@expr1073753020 "return {\n  [=]() mutable -> int {\n    a=b;\n  }\n}" ) $) $) { $return
6431:
|
6434:
6435: ; }
6436:
6437:
6438: $if $(@expr1073753021 $!@expr1073753022 $assertEquals $(@expr1073753023 "cppcheck-2.8/test/testtokenize.cpp" $, 6438 $, "a{(&[= 0return b{(=[= fori0=i10!=i++;;(" $, testAst (@expr1073753024 "a = [&]() -> std::pair<int, int> { return 0; };\nb = [=]() { for (i = 0; i != 10; ++i); };" ) $) $) { $return
6439:
6440: ; }
6441:
6442:
6443: $if $(@expr1073753025 $!@expr1073753026 $assertEquals $(@expr1073753027 "cppcheck-2.8/test/testtokenize.cpp" $, 6443 $, "b{[{ stdunique_ptr::0nullptrnullptr:?{" $, testAst (@expr1073753028 "auto b{[] { std::unique_ptr<void *>{0 ? nullptr : nullptr}; }};" ) $) $) { $return ; }
6444: $if $(@expr1073753029 $!@expr1073753030 $assertEquals $(@expr1073753031 "cppcheck-2.8/test/testtokenize.cpp" $, 6444 $, "b{[=" $, testAst (@expr1073753032 "void a() { [b = [] { ; }] {}; }" ) $) $) { $return ; }
6445:
6446:
6447: $if $(@expr1073753033 $!@expr1073753034 $assertEquals $(@expr1073753035 "cppcheck-2.8/test/testtokenize.cpp" $, 6447 $, "a{b1=[= c2=" $, testAst (@expr1073753036 "a = [b=1]{c=2;};" ) $) $) { $return ; }
6448:
6449:
6450: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753037 "cppcheck-2.8/test/testtokenize.cpp" $, 6450 $, "void foo() { bar([]() noexcept { if (0) {} }); }" $) $; $} $catch $(@expr1073753038 $... $) ${ $assertNoThrowFail $(@expr1073753039 "cppcheck-2.8/test/testtokenize.cpp" $, 6450 $) $; $} $} $while $(@expr1073753040 $false $) ;
6451:
6452:
6453: $if $(@expr1073753041 $!@expr1073753042 $assertEquals $(@expr1073753043 "cppcheck-2.8/test/testtokenize.cpp" $, 6453 $, "x{([= yz= switchy(" $, testAst (@expr1073753044 "x = []() -> std::vector<uint8_t> {\n    const auto y = z;\n    switch (y) {}\n};" ) $) $) { $return
6454:
6455:
6456:
6457: ; }
6458: }
6459:
6460: void astcase ( ) {
6461: $if $(@expr1073753045 $!@expr1073753046 $assertEquals $(@expr1073753047 "cppcheck-2.8/test/testtokenize.cpp" $, 6461 $, "0case" $, testAst (@expr1073753048 "case 0:" ) $) $) { $return ; }
6462: $if $(@expr1073753049 $!@expr1073753050 $assertEquals $(@expr1073753051 "cppcheck-2.8/test/testtokenize.cpp" $, 6462 $, "12+case" $, testAst (@expr1073753052 "case 1+2:" ) $) $) { $return ; }
6463: $if $(@expr1073753053 $!@expr1073753054 $assertEquals $(@expr1073753055 "cppcheck-2.8/test/testtokenize.cpp" $, 6463 $, "xyz:?case" $, testAst (@expr1073753056 "case (x?y:z):" ) $) $) { $return ; }
6464: $if $(@expr1073753057 $!@expr1073753058 $assertEquals $(@expr1073753059 "cppcheck-2.8/test/testtokenize.cpp" $, 6464 $, "switchx( 1case y++ 2case" $, testAst (@expr1073753060 "switch(x){case 1:{++y;break;case 2:break;}}" ) $) $) { $return ; }
6465: }
6466:
6467: void astrefqualifier ( ) {
6468: $if $(@expr1073753061 $!@expr1073753062 $assertEquals $(@expr1073753063 "cppcheck-2.8/test/testtokenize.cpp" $, 6468 $, "b(int." $, testAst (@expr1073753064 "class a { auto b() -> int&; };" ) $) $) { $return ; }
6469: $if $(@expr1073753065 $!@expr1073753066 $assertEquals $(@expr1073753067 "cppcheck-2.8/test/testtokenize.cpp" $, 6469 $, "b(int." $, testAst (@expr1073753068 "class a { auto b() -> int&&; };" ) $) $) { $return ; }
6470: $if $(@expr1073753069 $!@expr1073753070 $assertEquals $(@expr1073753071 "cppcheck-2.8/test/testtokenize.cpp" $, 6470 $, "b(" $, testAst (@expr1073753072 "class a { void b() &&; };" ) $) $) { $return ; }
6471: $if $(@expr1073753073 $!@expr1073753074 $assertEquals $(@expr1073753075 "cppcheck-2.8/test/testtokenize.cpp" $, 6471 $, "b(" $, testAst (@expr1073753076 "class a { void b() &; };" ) $) $) { $return ; }
6472: $if $(@expr1073753077 $!@expr1073753078 $assertEquals $(@expr1073753079 "cppcheck-2.8/test/testtokenize.cpp" $, 6472 $, "b(" $, testAst (@expr1073753080 "class a { void b() && {} };" ) $) $) { $return ; }
6473: $if $(@expr1073753081 $!@expr1073753082 $assertEquals $(@expr1073753083 "cppcheck-2.8/test/testtokenize.cpp" $, 6473 $, "b(" $, testAst (@expr1073753084 "class a { void b() & {} };" ) $) $) { $return ; }
6474: }
6475:
6476:
6477:
6478: void astnewscoped ( ) {
6479: $if $(@expr1073753085 $!@expr1073753086 $assertEquals $(@expr1073753087 "cppcheck-2.8/test/testtokenize.cpp" $, 6479 $, "(return (new A))" $, testAst (@expr1073753088 "return new A;" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6480: $if $(@expr1073753090 $!@expr1073753091 $assertEquals $(@expr1073753092 "cppcheck-2.8/test/testtokenize.cpp" $, 6480 $, "(return (new (( A)))" $, testAst (@expr1073753093 "return new A();" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6481: $if $(@expr1073753095 $!@expr1073753096 $assertEquals $(@expr1073753097 "cppcheck-2.8/test/testtokenize.cpp" $, 6481 $, "(return (new (( A true)))" $, testAst (@expr1073753098 "return new A(true);" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6482: $if $(@expr1073753100 $!@expr1073753101 $assertEquals $(@expr1073753102 "cppcheck-2.8/test/testtokenize.cpp" $, 6482 $, "(return (new (:: A B)))" $, testAst (@expr1073753103 "return new A::B;" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6483: $if $(@expr1073753105 $!@expr1073753106 $assertEquals $(@expr1073753107 "cppcheck-2.8/test/testtokenize.cpp" $, 6483 $, "(return (new (( (:: A B))))" $, testAst (@expr1073753108 "return new A::B();" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6484: $if $(@expr1073753110 $!@expr1073753111 $assertEquals $(@expr1073753112 "cppcheck-2.8/test/testtokenize.cpp" $, 6484 $, "(return (new (( (:: A B) true)))" $, testAst (@expr1073753113 "return new A::B(true);" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6485: $if $(@expr1073753115 $!@expr1073753116 $assertEquals $(@expr1073753117 "cppcheck-2.8/test/testtokenize.cpp" $, 6485 $, "(return (new (:: (:: A B) C)))" $, testAst (@expr1073753118 "return new A::B::C;" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6486: $if $(@expr1073753120 $!@expr1073753121 $assertEquals $(@expr1073753122 "cppcheck-2.8/test/testtokenize.cpp" $, 6486 $, "(return (new (( (:: (:: A B) C))))" $, testAst (@expr1073753123 "return new A::B::C();" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6487: $if $(@expr1073753125 $!@expr1073753126 $assertEquals $(@expr1073753127 "cppcheck-2.8/test/testtokenize.cpp" $, 6487 $, "(return (new (( (:: (:: A B) C) true)))" $, testAst (@expr1073753128 "return new A::B::C(true);" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6488: $if $(@expr1073753130 $!@expr1073753131 $assertEquals $(@expr1073753132 "cppcheck-2.8/test/testtokenize.cpp" $, 6488 $, "(return (new (:: (:: (:: A B) C) D)))" $, testAst (@expr1073753133 "return new A::B::C::D;" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6489: $if $(@expr1073753135 $!@expr1073753136 $assertEquals $(@expr1073753137 "cppcheck-2.8/test/testtokenize.cpp" $, 6489 $, "(return (new (( (:: (:: (:: A B) C) D))))" $, testAst (@expr1073753138 "return new A::B::C::D();" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6490: $if $(@expr1073753140 $!@expr1073753141 $assertEquals $(@expr1073753142 "cppcheck-2.8/test/testtokenize.cpp" $, 6490 $, "(return (new (( (:: (:: (:: A B) C) D) true)))" $, testAst (@expr1073753143 "return new A::B::C::D(true);" , AstStyle ::@expr11265 Z3 ) $) $) { $return ; }
6491: }
6492:
6493: void compileLimits ( ) {
6494: const char raw_code@var950 [@expr1073753145 735 ] =@expr1073753146 "#define PTR1 (* (* (* (* (* (* (* (* (* (*\n#define PTR2 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1\n#define PTR3 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2\n#define PTR4 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3\n#define PTR5 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4\n#define PTR6 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5\n\n#define RBR1 ) ) ) ) ) ) ) ) ) )\n#define RBR2 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1\n#define RBR3 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2\n#define RBR4 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3\n#define RBR5 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4\n#define RBR6 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5\n\nint PTR4 q4_var RBR4 = 0;\n"
6495:
|
6507:
6508: ;
6509:
6510:
6511: Preprocessor preprocessor@var951 (@expr1073753147 settings0@var102 ) ;
6512: std ::@expr1073753148 list < std ::@expr11325 string > configurations@var952 ;
6513: std ::@expr1073753150 string filedata@var953 ;
6514: std ::@expr1073753151 istringstream fin@var954 (@expr1073753152 raw_code@var950 ) ;
6515: preprocessor@var951 .@expr1073753153 preprocess (@expr1073753154 fin@var954 , filedata@var953 , configurations@var952 , emptyString , settings0@var102 .@expr1073753155 includePaths@var955 ) ;
6516: const std ::@expr11325 string code@var956 =@expr1073753157 preprocessor@var951 .@expr1073753158 getcode (@expr1073753159 filedata@var953 , emptyString , emptyString ) ;
6517:
6518: $tokenizeAndStringify_ $(@expr1073753160 "cppcheck-2.8/test/testtokenize.cpp" $, 6518 $, code@var956 .@expr1073753161 c_str (@expr1073753162 ) $) ;
6519: }
6520:
6521:
6522: bool isStartOfExecutableScope_ ( int offset@var957 , const char code@var958 [ ] , const char * file@var959 , int line@var960 ) {
6523: Tokenizer tokenizer@var961 (@expr1073753163 &@expr1073753164 settings0@var102 , this@expr1073753165 ) ;
6524: std ::@expr1073753166 istringstream istr@var962 (@expr1073753167 code@var958 ) ;
6525: $assert_ $(@expr1073753168 file@var959 $, line@var960 $, $(@expr1073753169 tokenizer@var961 .@expr1073753170 tokenize (@expr1073753171 istr@var962 , "test.cpp" ) $) $) ;
6526:
6527: return Tokenizer ::@expr1073753172 startOfExecutableScope (@expr1073753173 tokenizer@var961 .@expr1073753174 tokens (@expr1073753175 ) .@expr1073753176 tokAt (@expr1073753177 offset@var957 ) ) !=@expr1073753178 nullptr ;
6528: }
6529:
6530: void startOfExecutableScope ( ) {
6531: $if $(@expr1073753179 $!@expr1073753180 $assert_ $(@expr1073753181 "cppcheck-2.8/test/testtokenize.cpp" $, 6531 $, $isStartOfExecutableScope_ $(@expr1073753182 3 $, "void foo() { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6531 $) $) $) { $return ; }
6532: $if $(@expr1073753183 $!@expr1073753184 $assert_ $(@expr1073753185 "cppcheck-2.8/test/testtokenize.cpp" $, 6532 $, $isStartOfExecutableScope_ $(@expr1073753186 3 $, "void foo() const { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6532 $) $) $) { $return ; }
6533: $if $(@expr1073753187 $!@expr1073753188 $assert_ $(@expr1073753189 "cppcheck-2.8/test/testtokenize.cpp" $, 6533 $, $isStartOfExecutableScope_ $(@expr1073753190 3 $, "void foo() volatile { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6533 $) $) $) { $return ; }
6534: $if $(@expr1073753191 $!@expr1073753192 $assert_ $(@expr1073753193 "cppcheck-2.8/test/testtokenize.cpp" $, 6534 $, $isStartOfExecutableScope_ $(@expr1073753194 3 $, "void foo() override { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6534 $) $) $) { $return ; }
6535: $if $(@expr1073753195 $!@expr1073753196 $assert_ $(@expr1073753197 "cppcheck-2.8/test/testtokenize.cpp" $, 6535 $, $isStartOfExecutableScope_ $(@expr1073753198 3 $, "void foo() noexcept { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6535 $) $) $) { $return ; }
6536: $if $(@expr1073753199 $!@expr1073753200 $assert_ $(@expr1073753201 "cppcheck-2.8/test/testtokenize.cpp" $, 6536 $, $isStartOfExecutableScope_ $(@expr1073753202 3 $, "void foo() NOEXCEPT { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6536 $) $) $) { $return ; }
6537: $if $(@expr1073753203 $!@expr1073753204 $assert_ $(@expr1073753205 "cppcheck-2.8/test/testtokenize.cpp" $, 6537 $, $isStartOfExecutableScope_ $(@expr1073753206 3 $, "void foo() CONST NOEXCEPT { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6537 $) $) $) { $return ; }
6538: $if $(@expr1073753207 $!@expr1073753208 $assert_ $(@expr1073753209 "cppcheck-2.8/test/testtokenize.cpp" $, 6538 $, $isStartOfExecutableScope_ $(@expr1073753210 3 $, "void foo() const noexcept { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6538 $) $) $) { $return ; }
6539: $if $(@expr1073753211 $!@expr1073753212 $assert_ $(@expr1073753213 "cppcheck-2.8/test/testtokenize.cpp" $, 6539 $, $isStartOfExecutableScope_ $(@expr1073753214 3 $, "void foo() noexcept(true) { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6539 $) $) $) { $return ; }
6540: $if $(@expr1073753215 $!@expr1073753216 $assert_ $(@expr1073753217 "cppcheck-2.8/test/testtokenize.cpp" $, 6540 $, $isStartOfExecutableScope_ $(@expr1073753218 3 $, "void foo() const noexcept(true) { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6540 $) $) $) { $return ; }
6541: $if $(@expr1073753219 $!@expr1073753220 $assert_ $(@expr1073753221 "cppcheck-2.8/test/testtokenize.cpp" $, 6541 $, $isStartOfExecutableScope_ $(@expr1073753222 3 $, "void foo() throw() { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6541 $) $) $) { $return ; }
6542: $if $(@expr1073753223 $!@expr1073753224 $assert_ $(@expr1073753225 "cppcheck-2.8/test/testtokenize.cpp" $, 6542 $, $isStartOfExecutableScope_ $(@expr1073753226 3 $, "void foo() THROW() { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6542 $) $) $) { $return ; }
6543: $if $(@expr1073753227 $!@expr1073753228 $assert_ $(@expr1073753229 "cppcheck-2.8/test/testtokenize.cpp" $, 6543 $, $isStartOfExecutableScope_ $(@expr1073753230 3 $, "void foo() CONST THROW() { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6543 $) $) $) { $return ; }
6544: $if $(@expr1073753231 $!@expr1073753232 $assert_ $(@expr1073753233 "cppcheck-2.8/test/testtokenize.cpp" $, 6544 $, $isStartOfExecutableScope_ $(@expr1073753234 3 $, "void foo() const throw() { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6544 $) $) $) { $return ; }
6545: $if $(@expr1073753235 $!@expr1073753236 $assert_ $(@expr1073753237 "cppcheck-2.8/test/testtokenize.cpp" $, 6545 $, $isStartOfExecutableScope_ $(@expr1073753238 3 $, "void foo() throw(int) { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6545 $) $) $) { $return ; }
6546: $if $(@expr1073753239 $!@expr1073753240 $assert_ $(@expr1073753241 "cppcheck-2.8/test/testtokenize.cpp" $, 6546 $, $isStartOfExecutableScope_ $(@expr1073753242 3 $, "void foo() const throw(int) { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6546 $) $) $) { $return ; }
6547: $if $(@expr1073753243 $!@expr1073753244 $assert_ $(@expr1073753245 "cppcheck-2.8/test/testtokenize.cpp" $, 6547 $, $isStartOfExecutableScope_ $(@expr1073753246 2 $, "foo() : a(1) { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6547 $) $) $) { $return ; }
6548: $if $(@expr1073753247 $!@expr1073753248 $assert_ $(@expr1073753249 "cppcheck-2.8/test/testtokenize.cpp" $, 6548 $, $isStartOfExecutableScope_ $(@expr1073753250 2 $, "foo() : a(1), b(2) { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6548 $) $) $) { $return ; }
6549: $if $(@expr1073753251 $!@expr1073753252 $assert_ $(@expr1073753253 "cppcheck-2.8/test/testtokenize.cpp" $, 6549 $, $isStartOfExecutableScope_ $(@expr1073753254 2 $, "foo() : a{1} { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6549 $) $) $) { $return ; }
6550: $if $(@expr1073753255 $!@expr1073753256 $assert_ $(@expr1073753257 "cppcheck-2.8/test/testtokenize.cpp" $, 6550 $, $isStartOfExecutableScope_ $(@expr1073753258 2 $, "foo() : a{1}, b{2} { }" $, "cppcheck-2.8/test/testtokenize.cpp" $, 6550 $) $) $) { $return ; }
6551: }
6552:
6553: void removeMacroInClassDef ( ) {
6554: $if $(@expr1073753260 $!@expr1073753261 $assertEquals $(@expr1073753262 "cppcheck-2.8/test/testtokenize.cpp" $, 6554 $, "class Fred { } ;" $, $tokenizeAndStringify_ $(@expr1073753263 "cppcheck-2.8/test/testtokenize.cpp" $, 6554 $, "class DLLEXPORT Fred { } ;" $) $) $) { $return ; }
6555: $if $(@expr1073753264 $!@expr1073753265 $assertEquals $(@expr1073753266 "cppcheck-2.8/test/testtokenize.cpp" $, 6555 $, "class Fred : Base { } ;" $, $tokenizeAndStringify_ $(@expr1073753267 "cppcheck-2.8/test/testtokenize.cpp" $, 6555 $, "class Fred FINAL : Base { } ;" $) $) $) { $return ; }
6556:
6557: $if $(@expr1073753268 $!@expr1073753269 $assertEquals $(@expr1073753270 "cppcheck-2.8/test/testtokenize.cpp" $, 6557 $, "struct Fred { } ;" $, $tokenizeAndStringify_ $(@expr1073753271 "cppcheck-2.8/test/testtokenize.cpp" $, 6557 $, "struct DLLEXPORT Fred { } ;" , true , Settings ::@expr1073753272 Native@expr1073753259 , "test.c" $) $) $) { $return ; }
6558: }
6559:
6560: void sizeofAddParentheses ( ) {
6561: $if $(@expr1073753273 $!@expr1073753274 $assertEquals $(@expr1073753275 "cppcheck-2.8/test/testtokenize.cpp" $, 6561 $, "sizeof ( sizeof ( 1 ) ) ;" $, $tokenizeAndStringify_ $(@expr1073753276 "cppcheck-2.8/test/testtokenize.cpp" $, 6561 $, "sizeof sizeof 1;" $) $) $) { $return ; }
6562: $if $(@expr1073753277 $!@expr1073753278 $assertEquals $(@expr1073753279 "cppcheck-2.8/test/testtokenize.cpp" $, 6562 $, "sizeof ( a . b ) + 3 ;" $, $tokenizeAndStringify_ $(@expr1073753280 "cppcheck-2.8/test/testtokenize.cpp" $, 6562 $, "sizeof a.b+3;" $) $) $) { $return ; }
6563: $if $(@expr1073753281 $!@expr1073753282 $assertEquals $(@expr1073753283 "cppcheck-2.8/test/testtokenize.cpp" $, 6563 $, "sizeof ( a [ 2 ] . b ) + 3 ;" $, $tokenizeAndStringify_ $(@expr1073753284 "cppcheck-2.8/test/testtokenize.cpp" $, 6563 $, "sizeof a[2].b+3;" $) $) $) { $return ; }
6564: $if $(@expr1073753285 $!@expr1073753286 $assertEquals $(@expr1073753287 "cppcheck-2.8/test/testtokenize.cpp" $, 6564 $, "f ( 0 , sizeof ( ptr . bar ) ) ;" $, $tokenizeAndStringify_ $(@expr1073753288 "cppcheck-2.8/test/testtokenize.cpp" $, 6564 $, "f(0, sizeof ptr->bar );" $) $) $) { $return ; }
6565: $if $(@expr1073753289 $!@expr1073753290 $assertEquals $(@expr1073753291 "cppcheck-2.8/test/testtokenize.cpp" $, 6565 $, "sizeof ( a ) > sizeof ( & main ) ;" $, $tokenizeAndStringify_ $(@expr1073753292 "cppcheck-2.8/test/testtokenize.cpp" $, 6565 $, "sizeof a > sizeof &main;" $) $) $) { $return ; }
6566: }
6567:
6568: void reportUnknownMacros ( ) {
6569: const char code1@var963 [@expr1073753293 105 ] =@expr1073753294 "MY_UNKNOWN_IMP1(IInStream)\nSTDMETHOD(Read)(void *data, UInt32 size, UInt32 *processedSize) { if (ptr); }"
6570: ;
6571: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753295 "cppcheck-2.8/test/testtokenize.cpp" $, 6571 $, code1@var963 $) $; $assertThrowFail $(@expr1073753296 "cppcheck-2.8/test/testtokenize.cpp" $, 6571 $) $; $} $catch $(@expr1073753297 $const InternalError $&@expr1073753298 $) ${ $} $catch $(@expr1073753299 $... $) ${ $assertThrowFail $(@expr1073753300 "cppcheck-2.8/test/testtokenize.cpp" $, 6571 $) $; $} $} $while $(@expr1073753301 $false $) ;
6572:
6573: const char code2@var964 [@expr1073753302 29 ] =@expr1073753303 "void foo() { dostuff(x 0); }" ;
6574: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753304 "cppcheck-2.8/test/testtokenize.cpp" $, 6574 $, code2@var964 $) $; $assertThrowFail $(@expr1073753305 "cppcheck-2.8/test/testtokenize.cpp" $, 6574 $) $; $} $catch $(@expr1073753306 $const InternalError $&@expr1073753307 $) ${ $} $catch $(@expr1073753308 $... $) ${ $assertThrowFail $(@expr1073753309 "cppcheck-2.8/test/testtokenize.cpp" $, 6574 $) $; $} $} $while $(@expr1073753310 $false $) ;
6575:
6576: const char code3@var965 [@expr1073753311 28 ] =@expr1073753312 "f(\"1\" __stringify(48) \"1\");" ;
6577: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753313 "cppcheck-2.8/test/testtokenize.cpp" $, 6577 $, code3@var965 $) $; $assertThrowFail $(@expr1073753314 "cppcheck-2.8/test/testtokenize.cpp" $, 6577 $) $; $} $catch $(@expr1073753315 $const InternalError $&@expr1073753316 $) ${ $} $catch $(@expr1073753317 $... $) ${ $assertThrowFail $(@expr1073753318 "cppcheck-2.8/test/testtokenize.cpp" $, 6577 $) $; $} $} $while $(@expr1073753319 $false $) ;
6578:
6579: const char code4@var966 [@expr1073753320 74 ] =@expr1073753321 "struct Foo {\n  virtual MACRO(int) f1() {}\n  virtual MACRO(int) f2() {}\n};"
6580:
6581:
6582: ;
6583: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753322 "cppcheck-2.8/test/testtokenize.cpp" $, 6583 $, code4@var966 $) $; $assertThrowFail $(@expr1073753323 "cppcheck-2.8/test/testtokenize.cpp" $, 6583 $) $; $} $catch $(@expr1073753324 $const InternalError $&@expr1073753325 $) ${ $} $catch $(@expr1073753326 $... $) ${ $assertThrowFail $(@expr1073753327 "cppcheck-2.8/test/testtokenize.cpp" $, 6583 $) $; $} $} $while $(@expr1073753328 $false $) ;
6584:
6585: const char code5@var967 [@expr1073753329 53 ] =@expr1073753330 "void foo() {\n  EVALUATE(123, int x=a; int y=b+c;);\n}"
6586:
6587: ;
6588: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753331 "cppcheck-2.8/test/testtokenize.cpp" $, 6588 $, code5@var967 $) $; $assertThrowFail $(@expr1073753332 "cppcheck-2.8/test/testtokenize.cpp" $, 6588 $) $; $} $catch $(@expr1073753333 $const InternalError $&@expr1073753334 $) ${ $} $catch $(@expr1073753335 $... $) ${ $assertThrowFail $(@expr1073753336 "cppcheck-2.8/test/testtokenize.cpp" $, 6588 $) $; $} $} $while $(@expr1073753337 $false $) ;
6589:
6590: const char code6@var968 [@expr1073753338 33 ] =@expr1073753339 "void foo() { dostuff(a, .x=0); }" ;
6591: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753340 "cppcheck-2.8/test/testtokenize.cpp" $, 6591 $, code6@var968 $) $; $assertThrowFail $(@expr1073753341 "cppcheck-2.8/test/testtokenize.cpp" $, 6591 $) $; $} $catch $(@expr1073753342 $const InternalError $&@expr1073753343 $) ${ $} $catch $(@expr1073753344 $... $) ${ $assertThrowFail $(@expr1073753345 "cppcheck-2.8/test/testtokenize.cpp" $, 6591 $) $; $} $} $while $(@expr1073753346 $false $) ;
6592:
6593: const char code7@var969 [@expr1073753347 57 ] =@expr1073753348 "void foo() { dostuff(ZEND_NUM_ARGS() TSRMLS_CC, x, y); }" ;
6594: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753349 "cppcheck-2.8/test/testtokenize.cpp" $, 6594 $, code7@var969 $) $; $assertThrowFail $(@expr1073753350 "cppcheck-2.8/test/testtokenize.cpp" $, 6594 $) $; $} $catch $(@expr1073753351 $const InternalError $&@expr1073753352 $) ${ $} $catch $(@expr1073753353 $... $) ${ $assertThrowFail $(@expr1073753354 "cppcheck-2.8/test/testtokenize.cpp" $, 6594 $) $; $} $} $while $(@expr1073753355 $false $) ;
6595:
6596: const char code8@var970 [@expr1073753356 49 ] =@expr1073753357 "void foo() { a = [](int x, decltype(vec) y){}; }" ;
6597: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753358 "cppcheck-2.8/test/testtokenize.cpp" $, 6597 $, code8@var970 $) $; $} $catch $(@expr1073753359 $... $) ${ $assertNoThrowFail $(@expr1073753360 "cppcheck-2.8/test/testtokenize.cpp" $, 6597 $) $; $} $} $while $(@expr1073753361 $false $) ;
6598:
6599: const char code9@var971 [@expr1073753362 46 ] =@expr1073753363 "void f(std::exception c) { b(M() c.what()); }" ;
6600: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753364 "cppcheck-2.8/test/testtokenize.cpp" $, 6600 $, code9@var971 $) $; $assertThrowFail $(@expr1073753365 "cppcheck-2.8/test/testtokenize.cpp" $, 6600 $) $; $} $catch $(@expr1073753366 $const InternalError $&@expr1073753367 $) ${ $} $catch $(@expr1073753368 $... $) ${ $assertThrowFail $(@expr1073753369 "cppcheck-2.8/test/testtokenize.cpp" $, 6600 $) $; $} $} $while $(@expr1073753370 $false $) ;
6601:
6602: const char code10@var972 [@expr1073753371 55 ] =@expr1073753372 "void f(std::exception c) { b(M() M() + N(c.what())); }" ;
6603: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753373 "cppcheck-2.8/test/testtokenize.cpp" $, 6603 $, code10@var972 $) $; $assertThrowFail $(@expr1073753374 "cppcheck-2.8/test/testtokenize.cpp" $, 6603 $) $; $} $catch $(@expr1073753375 $const InternalError $&@expr1073753376 $) ${ $} $catch $(@expr1073753377 $... $) ${ $assertThrowFail $(@expr1073753378 "cppcheck-2.8/test/testtokenize.cpp" $, 6603 $) $; $} $} $while $(@expr1073753379 $false $) ;
6604:
6605: const char code11@var973 [@expr1073753380 50 ] =@expr1073753381 "struct B { B(B&&) noexcept {} ~B() noexcept {} };" ;
6606: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753382 "cppcheck-2.8/test/testtokenize.cpp" $, 6606 $, code11@var973 $) $; $} $catch $(@expr1073753383 $... $) ${ $assertNoThrowFail $(@expr1073753384 "cppcheck-2.8/test/testtokenize.cpp" $, 6606 $) $; $} $} $while $(@expr1073753385 $false $) ;
6607: }
6608:
6609: void findGarbageCode ( ) {
6610:
6611: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753387 "cppcheck-2.8/test/testtokenize.cpp" $, 6611 $, "try { }" $) $; $assertThrowFail $(@expr1073753388 "cppcheck-2.8/test/testtokenize.cpp" $, 6611 $) $; $} $catch $(@expr1073753389 $const InternalError $& $e@var974 $) ${ $assertEquals $(@expr1073753390 "cppcheck-2.8/test/testtokenize.cpp" $, 6611 $, "syntax error: keyword 'try' is not allowed in global scope" $, $e@var974 $.@expr1073753391 $errorMessage@var975 $) $; $} $catch $(@expr1073753392 $... $) ${ $assertThrowFail $(@expr1073753393 "cppcheck-2.8/test/testtokenize.cpp" $, 6611 $) $; $} $} $while $(@expr1073753394 $false $) ;
6612: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753395 "cppcheck-2.8/test/testtokenize.cpp" $, 6612 $, "void f() try { } catch (int) { }" $) $; $} $catch $(@expr1073753396 $... $) ${ $assertNoThrowFail $(@expr1073753397 "cppcheck-2.8/test/testtokenize.cpp" $, 6612 $) $; $} $} $while $(@expr1073753398 $false $) ;
6613:
6614:
6615: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753399 "cppcheck-2.8/test/testtokenize.cpp" $, 6615 $, "void f() { do switch (a) {} while (1); }" $) $; $} $catch $(@expr1073753400 $... $) ${ $assertNoThrowFail $(@expr1073753401 "cppcheck-2.8/test/testtokenize.cpp" $, 6615 $) $; $} $} $while $(@expr1073753402 $false $) ;
6616: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753403 "cppcheck-2.8/test/testtokenize.cpp" $, 6616 $, "void f() { label: switch (a) {} }" $) $; $} $catch $(@expr1073753404 $... $) ${ $assertNoThrowFail $(@expr1073753405 "cppcheck-2.8/test/testtokenize.cpp" $, 6616 $) $; $} $} $while $(@expr1073753406 $false $) ;
6617: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753407 "cppcheck-2.8/test/testtokenize.cpp" $, 6617 $, "void f() { UNKNOWN_MACRO if (a) {} }" $) $; $} $catch $(@expr1073753408 $... $) ${ $assertNoThrowFail $(@expr1073753409 "cppcheck-2.8/test/testtokenize.cpp" $, 6617 $) $; $} $} $while $(@expr1073753410 $false $) ;
6618: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753411 "cppcheck-2.8/test/testtokenize.cpp" $, 6618 $, "void f() { []() -> int * {}; }" $) $; $} $catch $(@expr1073753412 $... $) ${ $assertNoThrowFail $(@expr1073753413 "cppcheck-2.8/test/testtokenize.cpp" $, 6618 $) $; $} $} $while $(@expr1073753414 $false $) ;
6619: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753415 "cppcheck-2.8/test/testtokenize.cpp" $, 6619 $, "void f() { const char* var = \"1\" \"2\"; }" $) $; $} $catch $(@expr1073753416 $... $) ${ $assertNoThrowFail $(@expr1073753417 "cppcheck-2.8/test/testtokenize.cpp" $, 6619 $) $; $} $} $while $(@expr1073753418 $false $) ;
6620:
6621: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753419 "cppcheck-2.8/test/testtokenize.cpp" $, 6621 $, "void f() { MACRO(switch); }" $) $; $assertThrowFail $(@expr1073753420 "cppcheck-2.8/test/testtokenize.cpp" $, 6621 $) $; $} $catch $(@expr1073753421 $const InternalError $&@expr1073753422 $) ${ $} $catch $(@expr1073753423 $... $) ${ $assertThrowFail $(@expr1073753424 "cppcheck-2.8/test/testtokenize.cpp" $, 6621 $) $; $} $} $while $(@expr1073753425 $false $) ;
6622: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753426 "cppcheck-2.8/test/testtokenize.cpp" $, 6622 $, "void f() { MACRO(x,switch); }" $) $; $assertThrowFail $(@expr1073753427 "cppcheck-2.8/test/testtokenize.cpp" $, 6622 $) $; $} $catch $(@expr1073753428 $const InternalError $&@expr1073753429 $) ${ $} $catch $(@expr1073753430 $... $) ${ $assertThrowFail $(@expr1073753431 "cppcheck-2.8/test/testtokenize.cpp" $, 6622 $) $; $} $} $while $(@expr1073753432 $false $) ;
6623: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753433 "cppcheck-2.8/test/testtokenize.cpp" $, 6623 $, "void foo() { for_chain( if (!done) done = 1); }" $) $; $assertThrowFail $(@expr1073753434 "cppcheck-2.8/test/testtokenize.cpp" $, 6623 $) $; $} $catch $(@expr1073753435 $const InternalError $&@expr1073753436 $) ${ $} $catch $(@expr1073753437 $... $) ${ $assertThrowFail $(@expr1073753438 "cppcheck-2.8/test/testtokenize.cpp" $, 6623 $) $; $} $} $while $(@expr1073753439 $false $) ;
6624: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753440 "cppcheck-2.8/test/testtokenize.cpp" $, 6624 $, "void foo() { for_chain( a, b, if (!done) done = 1); }" $) $; $assertThrowFail $(@expr1073753441 "cppcheck-2.8/test/testtokenize.cpp" $, 6624 $) $; $} $catch $(@expr1073753442 $const InternalError $&@expr1073753443 $) ${ $} $catch $(@expr1073753444 $... $) ${ $assertThrowFail $(@expr1073753445 "cppcheck-2.8/test/testtokenize.cpp" $, 6624 $) $; $} $} $while $(@expr1073753446 $false $) ;
6625:
6626: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753447 "cppcheck-2.8/test/testtokenize.cpp" $, 6626 $, "void f() { if (retval==){} }" $) $; $assertThrowFail $(@expr1073753448 "cppcheck-2.8/test/testtokenize.cpp" $, 6626 $) $; $} $catch $(@expr1073753449 $const InternalError $& $e@var976 $) ${ $assertEquals $(@expr1073753450 "cppcheck-2.8/test/testtokenize.cpp" $, 6626 $, "syntax error: ==)" $, $e@var976 $.@expr1073753451 $errorMessage@var977 $) $; $} $catch $(@expr1073753452 $... $) ${ $assertThrowFail $(@expr1073753453 "cppcheck-2.8/test/testtokenize.cpp" $, 6626 $) $; $} $} $while $(@expr1073753454 $false $) ;
6627:
6628:
6629: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753455 "cppcheck-2.8/test/testtokenize.cpp" $, 6629 $, "void f() { switch (a) int b; }" $) $; $} $catch $(@expr1073753456 $... $) ${ $assertNoThrowFail $(@expr1073753457 "cppcheck-2.8/test/testtokenize.cpp" $, 6629 $) $; $} $} $while $(@expr1073753458 $false $) ;
6630:
6631: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753459 "cppcheck-2.8/test/testtokenize.cpp" $, 6631 $, "S s = { .x=2, .y[0]=3 };" $) $; $} $catch $(@expr1073753460 $... $) ${ $assertNoThrowFail $(@expr1073753461 "cppcheck-2.8/test/testtokenize.cpp" $, 6631 $) $; $} $} $while $(@expr1073753462 $false $) ;
6632: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753463 "cppcheck-2.8/test/testtokenize.cpp" $, 6632 $, "S s = { .ab.a=2, .ab.b=3 };" $) $; $} $catch $(@expr1073753464 $... $) ${ $assertNoThrowFail $(@expr1073753465 "cppcheck-2.8/test/testtokenize.cpp" $, 6632 $) $; $} $} $while $(@expr1073753466 $false $) ;
6633:
6634: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753467 "cppcheck-2.8/test/testtokenize.cpp" $, 6634 $, "extern \"C\" typedef void FUNC();" $) $; $} $catch $(@expr1073753468 $... $) ${ $assertNoThrowFail $(@expr1073753469 "cppcheck-2.8/test/testtokenize.cpp" $, 6634 $) $; $} $} $while $(@expr1073753470 $false $) ;
6635:
6636:
6637: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753471 "cppcheck-2.8/test/testtokenize.cpp" $, 6637 $, "struct poc {   struct { int d; } port[1]; }; struct poc p = { .port[0] = {.d = 3} };" $) $; $} $catch $(@expr1073753472 $... $) ${ $assertNoThrowFail $(@expr1073753473 "cppcheck-2.8/test/testtokenize.cpp" $, 6637 $) $; $} $} $while $(@expr1073753474 $false $)
6638:
6639:
6640: ;
6641:
6642:
6643: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753475 "cppcheck-2.8/test/testtokenize.cpp" $, 6643 $, "void f() { dostuff (x==>y); }" $) $; $assertThrowFail $(@expr1073753476 "cppcheck-2.8/test/testtokenize.cpp" $, 6643 $) $; $} $catch $(@expr1073753477 $const InternalError $& $e@var978 $) ${ $assertEquals $(@expr1073753478 "cppcheck-2.8/test/testtokenize.cpp" $, 6643 $, "syntax error: == >" $, $e@var978 $.@expr1073753479 $errorMessage@var979 $) $; $} $catch $(@expr1073753480 $... $) ${ $assertThrowFail $(@expr1073753481 "cppcheck-2.8/test/testtokenize.cpp" $, 6643 $) $; $} $} $while $(@expr1073753482 $false $) ;
6644:
6645:
6646: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753483 "cppcheck-2.8/test/testtokenize.cpp" $, 6646 $, "S s = { .x { 2 }, .y[0] { 3 } };" $) $; $} $catch $(@expr1073753484 $... $) ${ $assertNoThrowFail $(@expr1073753485 "cppcheck-2.8/test/testtokenize.cpp" $, 6646 $) $; $} $} $while $(@expr1073753486 $false $) ;
6647:
6648: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753487 "cppcheck-2.8/test/testtokenize.cpp" $, 6648 $, "void f() { assert(a==()); }" $) $; $assertThrowFail $(@expr1073753488 "cppcheck-2.8/test/testtokenize.cpp" $, 6648 $) $; $} $catch $(@expr1073753489 $const InternalError $& $e@var980 $) ${ $assertEquals $(@expr1073753490 "cppcheck-2.8/test/testtokenize.cpp" $, 6648 $, "syntax error: ==()" $, $e@var980 $.@expr1073753491 $errorMessage@var981 $) $; $} $catch $(@expr1073753492 $... $) ${ $assertThrowFail $(@expr1073753493 "cppcheck-2.8/test/testtokenize.cpp" $, 6648 $) $; $} $} $while $(@expr1073753494 $false $) ;
6649: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753495 "cppcheck-2.8/test/testtokenize.cpp" $, 6649 $, "void f() { assert(a+()); }" $) $; $assertThrowFail $(@expr1073753496 "cppcheck-2.8/test/testtokenize.cpp" $, 6649 $) $; $} $catch $(@expr1073753497 $const InternalError $& $e@var982 $) ${ $assertEquals $(@expr1073753498 "cppcheck-2.8/test/testtokenize.cpp" $, 6649 $, "syntax error: +()" $, $e@var982 $.@expr1073753499 $errorMessage@var983 $) $; $} $catch $(@expr1073753500 $... $) ${ $assertThrowFail $(@expr1073753501 "cppcheck-2.8/test/testtokenize.cpp" $, 6649 $) $; $} $} $while $(@expr1073753502 $false $) ;
6650:
6651:
6652: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753503 "cppcheck-2.8/test/testtokenize.cpp" $, 6652 $, "void foo() { char *typeof, *value; }" , false , Settings ::@expr1073753504 Native@expr1073753386 , "test.c" $) $; $} $catch $(@expr1073753505 $... $) ${ $assertNoThrowFail $(@expr1073753506 "cppcheck-2.8/test/testtokenize.cpp" $, 6652 $) $; $} $} $while $(@expr1073753507 $false $) ;
6653: }
6654:
6655:
6656: void checkEnableIf ( ) {
6657: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753508 "cppcheck-2.8/test/testtokenize.cpp" $, 6657 $, "template<\n    typename U,\n    typename std::enable_if<\n        std::is_convertible<U, T>{}>::type* = nullptr>\nvoid foo(U x);\n" $) $; $} $catch $(@expr1073753509 $... $) ${ $assertNoThrowFail $(@expr1073753510 "cppcheck-2.8/test/testtokenize.cpp" $, 6657 $) $; $} $} $while $(@expr1073753511 $false $)
6658:
|
6661:
6662: ;
6663:
6664: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753512 "cppcheck-2.8/test/testtokenize.cpp" $, 6664 $, "template<class t>\nT f(const T a, const T b) {\n    return a < b ? b : a;\n}\n" $) $; $} $catch $(@expr1073753513 $... $) ${ $assertNoThrowFail $(@expr1073753514 "cppcheck-2.8/test/testtokenize.cpp" $, 6664 $) $; $} $} $while $(@expr1073753515 $false $)
6665:
6666:
6667:
6668: ;
6669:
6670: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753516 "cppcheck-2.8/test/testtokenize.cpp" $, 6670 $, "template<class T>\nstruct A {\n    T f(const T a, const T b) {\n        return a < b ? b : a;\n    }\n};\n" $) $; $} $catch $(@expr1073753517 $... $) ${ $assertNoThrowFail $(@expr1073753518 "cppcheck-2.8/test/testtokenize.cpp" $, 6670 $) $; $} $} $while $(@expr1073753519 $false $)
6671:
|
6675:
6676: ;
6677:
6678: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753520 "cppcheck-2.8/test/testtokenize.cpp" $, 6678 $, "const int a = 1;\nconst int b = 2;\ntemplate<class T>\nstruct A {\n    int x = a < b ? b : a;};\n" $) $; $} $catch $(@expr1073753521 $... $) ${ $assertNoThrowFail $(@expr1073753522 "cppcheck-2.8/test/testtokenize.cpp" $, 6678 $) $; $} $} $while $(@expr1073753523 $false $)
6679:
|
6683:
6684: ;
6685:
6686:
6687: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753524 "cppcheck-2.8/test/testtokenize.cpp" $, 6687 $, "template<typename F>\nvoid foo(std::enable_if_t<value<F>>* = 0) {}\n" $) $; $} $catch $(@expr1073753525 $... $) ${ $assertNoThrowFail $(@expr1073753526 "cppcheck-2.8/test/testtokenize.cpp" $, 6687 $) $; $} $} $while $(@expr1073753527 $false $)
6688: ;
6689:
6690:
6691: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753528 "cppcheck-2.8/test/testtokenize.cpp" $, 6691 $, "struct a {\n  int c;\n  template <class b> void d(b e) const { c < e ? c : e; }\n};\n" $) $; $} $catch $(@expr1073753529 $... $) ${ $assertNoThrowFail $(@expr1073753530 "cppcheck-2.8/test/testtokenize.cpp" $, 6691 $) $; $} $} $while $(@expr1073753531 $false $)
6692:
6693:
6694: ;
6695:
6696: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753532 "cppcheck-2.8/test/testtokenize.cpp" $, 6696 $, "struct a {\n  int c;\n  template <class b> void d(b e) const { c > e ? c : e; }\n};\n" $) $; $} $catch $(@expr1073753533 $... $) ${ $assertNoThrowFail $(@expr1073753534 "cppcheck-2.8/test/testtokenize.cpp" $, 6696 $) $; $} $} $while $(@expr1073753535 $false $)
6697:
6698:
6699: ;
6700: }
6701:
6702: void checkTemplates ( ) {
6703:
6704: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753536 "cppcheck-2.8/test/testtokenize.cpp" $, 6704 $, "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a< b<typename c<d>::g> >;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}\n" $) $; $} $catch $(@expr1073753537 $... $) ${ $assertNoThrowFail $(@expr1073753538 "cppcheck-2.8/test/testtokenize.cpp" $, 6704 $) $; $} $} $while $(@expr1073753539 $false $)
6705:
|
6715:
6716: ;
6717:
6718: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753540 "cppcheck-2.8/test/testtokenize.cpp" $, 6718 $, "template <typename = void> struct a {\n  void c();\n};\nvoid f() {\n  a<> b;\n  b.a<>::c();\n}\n" $) $; $} $catch $(@expr1073753541 $... $) ${ $assertNoThrowFail $(@expr1073753542 "cppcheck-2.8/test/testtokenize.cpp" $, 6718 $) $; $} $} $while $(@expr1073753543 $false $)
6719:
|
6724:
6725: ;
6726:
6727:
6728: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753544 "cppcheck-2.8/test/testtokenize.cpp" $, 6728 $, "template <typename> struct a;\ntemplate <bool> using c = int;\ntemplate <bool b> c<b> d;\ntemplate <> struct a<int> {\ntemplate <typename e> constexpr auto g() { d<0 || e::f>; return 0; }\n};\n" $) $; $} $catch $(@expr1073753545 $... $) ${ $assertNoThrowFail $(@expr1073753546 "cppcheck-2.8/test/testtokenize.cpp" $, 6728 $) $; $} $} $while $(@expr1073753547 $false $)
6729:
|
6733:
6734: ;
6735:
6736:
6737: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753548 "cppcheck-2.8/test/testtokenize.cpp" $, 6737 $, "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\nnamespace boost {\nusing a::c;\n}\nnamespace d = boost;\nusing d::c;\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n" $) $; $} $catch $(@expr1073753549 $... $) ${ $assertNoThrowFail $(@expr1073753550 "cppcheck-2.8/test/testtokenize.cpp" $, 6737 $) $; $} $} $while $(@expr1073753551 $false $)
6738:
|
6746:
6747: ;
6748:
6749:
6750: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753552 "cppcheck-2.8/test/testtokenize.cpp" $, 6750 $, "template <int> struct a;\ntemplate <class, class b> using c = typename a<int{b::d}>::e;\ntemplate <class> struct f;\ntemplate <class b> using g = typename f<c<int, b>>::e;\n" $) $; $} $catch $(@expr1073753553 $... $) ${ $assertNoThrowFail $(@expr1073753554 "cppcheck-2.8/test/testtokenize.cpp" $, 6750 $) $; $} $} $while $(@expr1073753555 $false $)
6751:
6752:
6753:
6754: ;
6755:
6756:
6757: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753556 "cppcheck-2.8/test/testtokenize.cpp" $, 6757 $, "namespace {\ntemplate <class> struct a;\n}\nnamespace {\nnamespace b {\ntemplate <int c> struct B { using B<c / 2>::d; };\n}\ntemplate <class, class> using e = typename b::B<int{}>;\nnamespace b {\ntemplate <class> struct f;\n}\ntemplate <class c> using g = b::f<e<int, c>>;\n}\n" $) $; $} $catch $(@expr1073753557 $... $) ${ $assertNoThrowFail $(@expr1073753558 "cppcheck-2.8/test/testtokenize.cpp" $, 6757 $) $; $} $} $while $(@expr1073753559 $false $)
6758:
|
6769:
6770: ;
6771:
6772:
6773: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753560 "cppcheck-2.8/test/testtokenize.cpp" $, 6773 $, "template <bool> using a = int;\ntemplate <class b> using aa = a<b::c>;\ntemplate <class...> struct A;\ntemplate <class> struct d;\ntemplate <class... f> using e = typename d<f...>::g;\ntemplate <class> struct h;\ntemplate <class, class... b> using i = typename h<b...>::g;\ntemplate <class f, template <class> class j> using k = typename f::g;\ntemplate <class... b> using l = a<k<A<b...>, aa>::c>;\ntemplate <int> struct m;\ntemplate <class, class n> using o = typename m<int{n::c}>::g;\ntemplate <class> struct p;\ntemplate <class, class n> using q = typename p<o<A<>, n>>::g;\ntemplate <class f, class r, class... b> using c = e<i<q<f, r>, b...>>;\ntemplate <class, class> struct s;\ntemplate <template <class> class t, class... w, template <class> class x,\n          class... u>\nstruct s<t<w...>, x<u...>>;\n" $) $; $} $catch $(@expr1073753561 $... $) ${ $assertNoThrowFail $(@expr1073753562 "cppcheck-2.8/test/testtokenize.cpp" $, 6773 $) $; $} $} $while $(@expr1073753563 $false $)
6774:
|
6790:
6791: ;
6792:
6793:
6794: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753564 "cppcheck-2.8/test/testtokenize.cpp" $, 6794 $, "template <typename> struct a;\ntemplate <bool> struct b;\ntemplate <class k, class> using d = typename b<k::c>::e;\ntemplate <class> struct f;\ntemplate <template <class> class, class... g> using i = typename f<g...>::e;\ntemplate <template <class> class h, class... g> using ab = d<i<h, g...>, int>;\ntemplate <template <class> class h, class... g> struct j {\n  template <class... ag> using ah = typename ab<h, ag..., g...>::e;\n};\ntemplate <class> struct F;\nint main() { using T = void (*)(a<j<F, char[]>>); }\n" $) $; $} $catch $(@expr1073753565 $... $) ${ $assertNoThrowFail $(@expr1073753566 "cppcheck-2.8/test/testtokenize.cpp" $, 6794 $) $; $} $} $while $(@expr1073753567 $false $)
6795:
|
6804:
6805: ;
6806:
6807:
6808: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753568 "cppcheck-2.8/test/testtokenize.cpp" $, 6808 $, "struct a {\n  typedef int b;\n  operator b();\n};\ntemplate <int> using c = a;\ntemplate <int d> c<d> e;\nauto f = ((e<4> | 0));\n" $) $; $} $catch $(@expr1073753569 $... $) ${ $assertNoThrowFail $(@expr1073753570 "cppcheck-2.8/test/testtokenize.cpp" $, 6808 $) $; $} $} $while $(@expr1073753571 $false $)
6809:
|
6813:
6814: ;
6815:
6816:
6817: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753572 "cppcheck-2.8/test/testtokenize.cpp" $, 6817 $, "struct a {\n  template <class... b> void c(b... p1) {\n    using d = a;\n    d e = {(p1)...};\n  }\n};\n" $) $; $} $catch $(@expr1073753573 $... $) ${ $assertNoThrowFail $(@expr1073753574 "cppcheck-2.8/test/testtokenize.cpp" $, 6817 $) $; $} $} $while $(@expr1073753575 $false $)
6818:
|
6822:
6823: ;
6824:
6825:
6826: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753576 "cppcheck-2.8/test/testtokenize.cpp" $, 6826 $, "template <int> struct a;\ntemplate <long b> using c = a<b>;\ntemplate <long b> c<b> d;\ntemplate <typename> struct e {\n  template <typename... f> void g() const { d<e<f &&...>::h>; }\n};\n" $) $; $} $catch $(@expr1073753577 $... $) ${ $assertNoThrowFail $(@expr1073753578 "cppcheck-2.8/test/testtokenize.cpp" $, 6826 $) $; $} $} $while $(@expr1073753579 $false $)
6827:
|
6830:
6831: ;
6832:
6833:
6834: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753580 "cppcheck-2.8/test/testtokenize.cpp" $, 6834 $, "struct a {\n  struct b {};\n};\nvoid c(a::b, a::b);\nvoid g(a::b f) { c(f, {a::b{}}); }\ntemplate <class> void h() {\n  int e;\n  for (int d = 0; d < e; d++)\n    ;\n}\n" $) $; $} $catch $(@expr1073753581 $... $) ${ $assertNoThrowFail $(@expr1073753582 "cppcheck-2.8/test/testtokenize.cpp" $, 6834 $) $; $} $} $while $(@expr1073753583 $false $)
6835:
|
6843:
6844: ;
6845:
6846:
6847: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753584 "cppcheck-2.8/test/testtokenize.cpp" $, 6847 $, "void func() {\n    if (std::is_same_v<int, int> || 1)\n        ;\n}\n" $) $; $} $catch $(@expr1073753585 $... $) ${ $assertNoThrowFail $(@expr1073753586 "cppcheck-2.8/test/testtokenize.cpp" $, 6847 $) $; $} $} $while $(@expr1073753587 $false $)
6848:
6849:
6850:
6851: ;
6852:
6853:
6854: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753588 "cppcheck-2.8/test/testtokenize.cpp" $, 6854 $, "using a = void *;\nvoid b() {\n  std::unique_ptr<a, void (*)(a *)>(new a(0), [](a *c) {\n    if (c)\n      ;\n  });\n}\n" $) $; $} $catch $(@expr1073753589 $... $) ${ $assertNoThrowFail $(@expr1073753590 "cppcheck-2.8/test/testtokenize.cpp" $, 6854 $) $; $} $} $while $(@expr1073753591 $false $)
6855:
|
6860:
6861: ;
6862:
6863: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753592 "cppcheck-2.8/test/testtokenize.cpp" $, 6863 $, "a<b?0:1>()==3;" $) $; $} $catch $(@expr1073753593 $... $) ${ $assertNoThrowFail $(@expr1073753594 "cppcheck-2.8/test/testtokenize.cpp" $, 6863 $) $; $} $} $while $(@expr1073753595 $false $) ;
6864:
6865:
6866: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753596 "cppcheck-2.8/test/testtokenize.cpp" $, 6866 $, "struct a {\n  template <class b> a(b);\n};\nstruct c;\nvoid fn1(int, a);\nvoid f() { fn1(0, {a{0}}); }\ntemplate <class> std::vector<c> g() {\n  int d;\n  for (size_t e = 0; e < d; e++)\n    ;\n}\n" $) $; $} $catch $(@expr1073753597 $... $) ${ $assertNoThrowFail $(@expr1073753598 "cppcheck-2.8/test/testtokenize.cpp" $, 6866 $) $; $} $} $while $(@expr1073753599 $false $)
6867:
|
6875:
6876: ;
6877:
6878:
6879: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753600 "cppcheck-2.8/test/testtokenize.cpp" $, 6879 $, "template <int> struct a;\ntemplate <typename, typename> struct b;\ntemplate <typename c> struct b<c, typename a<c{} && 0>::d> {\n  void e() {\n    if (0) {}\n  }\n};\n" $) $; $} $catch $(@expr1073753601 $... $) ${ $assertNoThrowFail $(@expr1073753602 "cppcheck-2.8/test/testtokenize.cpp" $, 6879 $) $; $} $} $while $(@expr1073753603 $false $)
6880:
|
6885:
6886: ;
6887:
6888: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753604 "cppcheck-2.8/test/testtokenize.cpp" $, 6888 $, "template <std::size_t First, std::size_t... Indices, typename Functor>\nconstexpr void constexpr_for_fold_impl([[maybe_unused]] Functor&& f, std::index_sequence<Indices...>) noexcept {\n    (std::forward<Functor>(f).template operator() < First + Indices > (), ...);\n}\n" $) $; $} $catch $(@expr1073753605 $... $) ${ $assertNoThrowFail $(@expr1073753606 "cppcheck-2.8/test/testtokenize.cpp" $, 6888 $) $; $} $} $while $(@expr1073753607 $false $)
6889:
6890:
6891:
6892: ;
6893:
6894:
6895: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753608 "cppcheck-2.8/test/testtokenize.cpp" $, 6895 $, "template <typename> constexpr char x[] = \"\";\ntemplate <> constexpr char x<int>[] = \"\";\n" $) $; $} $catch $(@expr1073753609 $... $) ${ $assertNoThrowFail $(@expr1073753610 "cppcheck-2.8/test/testtokenize.cpp" $, 6895 $) $; $} $} $while $(@expr1073753611 $false $)
6896: ;
6897:
6898:
6899: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753612 "cppcheck-2.8/test/testtokenize.cpp" $, 6899 $, "struct a {\n  template <class> static void b() {}\n  ~a();\n};\nvoid d() { a::b<int>(); }\n" $) $; $} $catch $(@expr1073753613 $... $) ${ $assertNoThrowFail $(@expr1073753614 "cppcheck-2.8/test/testtokenize.cpp" $, 6899 $) $; $} $} $while $(@expr1073753615 $false $)
6900:
6901:
6902:
6903: ;
6904:
6905:
6906: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753616 "cppcheck-2.8/test/testtokenize.cpp" $, 6906 $, "using a = char;\nusing c = int;\ntemplate <typename = void> struct d {};\nusing b = c;\ntemplate <> struct d<b> : d<a> {};\ntemplate <> struct d<> : d<a> {};\n" $) $; $} $catch $(@expr1073753617 $... $) ${ $assertNoThrowFail $(@expr1073753618 "cppcheck-2.8/test/testtokenize.cpp" $, 6906 $) $; $} $} $while $(@expr1073753619 $false $)
6907:
|
6910:
6911: ;
6912: }
6913:
6914: void checkNamespaces ( ) {
6915: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753620 "cppcheck-2.8/test/testtokenize.cpp" $, 6915 $, "namespace x { namespace y { namespace z {}}}" $) $; $} $catch $(@expr1073753621 $... $) ${ $assertNoThrowFail $(@expr1073753622 "cppcheck-2.8/test/testtokenize.cpp" $, 6915 $) $; $} $} $while $(@expr1073753623 $false $) ;
6916: }
6917:
6918: void checkLambdas ( ) {
6919: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753624 "cppcheck-2.8/test/testtokenize.cpp" $, 6919 $, "auto f(int& i) { return [=, &i] {}; }" $) $; $} $catch $(@expr1073753625 $... $) ${ $assertNoThrowFail $(@expr1073753626 "cppcheck-2.8/test/testtokenize.cpp" $, 6919 $) $; $} $} $while $(@expr1073753627 $false $) ;
6920: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753628 "cppcheck-2.8/test/testtokenize.cpp" $, 6920 $, "auto f(int& i) { return [&, i] {}; }" $) $; $} $catch $(@expr1073753629 $... $) ${ $assertNoThrowFail $(@expr1073753630 "cppcheck-2.8/test/testtokenize.cpp" $, 6920 $) $; $} $} $while $(@expr1073753631 $false $) ;
6921: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753632 "cppcheck-2.8/test/testtokenize.cpp" $, 6921 $, "auto f(int& i) { return [&, i = std::move(i)] {}; }" $) $; $} $catch $(@expr1073753633 $... $) ${ $assertNoThrowFail $(@expr1073753634 "cppcheck-2.8/test/testtokenize.cpp" $, 6921 $) $; $} $} $while $(@expr1073753635 $false $) ;
6922: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753636 "cppcheck-2.8/test/testtokenize.cpp" $, 6922 $, "auto f(int& i) { return [=, i = std::move(i)] {}; }" $) $; $} $catch $(@expr1073753637 $... $) ${ $assertNoThrowFail $(@expr1073753638 "cppcheck-2.8/test/testtokenize.cpp" $, 6922 $) $; $} $} $while $(@expr1073753639 $false $) ;
6923: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753640 "cppcheck-2.8/test/testtokenize.cpp" $, 6923 $, "struct c {\n  void d() {\n    int a;\n    auto b = [this, a] {};\n  }\n};\n" $) $; $} $catch $(@expr1073753641 $... $) ${ $assertNoThrowFail $(@expr1073753642 "cppcheck-2.8/test/testtokenize.cpp" $, 6923 $) $; $} $} $while $(@expr1073753643 $false $)
6924:
|
6927:
6928: ;
6929:
6930:
6931: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753644 "cppcheck-2.8/test/testtokenize.cpp" $, 6931 $, "struct a {\n  template <class b> a(b) {}\n};\nauto c() -> a {\n  return {[] {\n    if (0) {}\n  }};\n}\n" $) $; $} $catch $(@expr1073753645 $... $) ${ $assertNoThrowFail $(@expr1073753646 "cppcheck-2.8/test/testtokenize.cpp" $, 6931 $) $; $} $} $while $(@expr1073753647 $false $)
6932:
|
6937:
6938: ;
6939: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753648 "cppcheck-2.8/test/testtokenize.cpp" $, 6939 $, "struct a {\n  template <class b> a(b) {}\n};\nauto c() -> a {\n  return {[]() -> int {\n    if (0) {}\n    return 0;\n  }};\n}\n" $) $; $} $catch $(@expr1073753649 $... $) ${ $assertNoThrowFail $(@expr1073753650 "cppcheck-2.8/test/testtokenize.cpp" $, 6939 $) $; $} $} $while $(@expr1073753651 $false $)
6940:
|
6946:
6947: ;
6948: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753652 "cppcheck-2.8/test/testtokenize.cpp" $, 6948 $, "struct a {\n  template <class b> a(b) {}\n};\nauto c() -> a {\n  return {[]() mutable -> int {\n    if (0) {}\n    return 0;\n  }};\n}\n" $) $; $} $catch $(@expr1073753653 $... $) ${ $assertNoThrowFail $(@expr1073753654 "cppcheck-2.8/test/testtokenize.cpp" $, 6948 $) $; $} $} $while $(@expr1073753655 $false $)
6949:
|
6955:
6956: ;
6957:
6958: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753656 "cppcheck-2.8/test/testtokenize.cpp" $, 6958 $, "template <typename, typename> struct a;\ntemplate <typename, typename b> void c() {\n  ([]() -> decltype(0) {\n    if (a<b, decltype(0)>::d) {}\n  });\n}\n" $) $; $} $catch $(@expr1073753657 $... $) ${ $assertNoThrowFail $(@expr1073753658 "cppcheck-2.8/test/testtokenize.cpp" $, 6958 $) $; $} $} $while $(@expr1073753659 $false $)
6959:
|
6962:
6963: ;
6964:
6965:
6966: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753660 "cppcheck-2.8/test/testtokenize.cpp" $, 6966 $, "template <typename> struct a;\ntemplate <typename b, typename... c> struct a<b(c...)> {\n  template <typename d> a(d);\n};\nvoid e(\n    int, a<void()> f = [] {});\n" $) $; $} $catch $(@expr1073753661 $... $) ${ $assertNoThrowFail $(@expr1073753662 "cppcheck-2.8/test/testtokenize.cpp" $, 6966 $) $; $} $} $while $(@expr1073753663 $false $)
6967:
|
6970:
6971: ;
6972:
6973:
6974: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753664 "cppcheck-2.8/test/testtokenize.cpp" $, 6974 $, "void a() {\n  char b[]{};\n  auto c = [](int d) {\n    for (char e = 0; d;) {}\n  };\n}\n" $) $; $} $catch $(@expr1073753665 $... $) ${ $assertNoThrowFail $(@expr1073753666 "cppcheck-2.8/test/testtokenize.cpp" $, 6974 $) $; $} $} $while $(@expr1073753667 $false $)
6975:
|
6978:
6979: ;
6980:
6981: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753668 "cppcheck-2.8/test/testtokenize.cpp" $, 6981 $, "struct a {\n  template <typename b> a(b) {}\n};\na c{[] {\n  if (0) {}\n}};\n" $) $; $} $catch $(@expr1073753669 $... $) ${ $assertNoThrowFail $(@expr1073753670 "cppcheck-2.8/test/testtokenize.cpp" $, 6981 $) $; $} $} $while $(@expr1073753671 $false $)
6982:
|
6985:
6986: ;
6987:
6988: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753672 "cppcheck-2.8/test/testtokenize.cpp" $, 6988 $, "void a() {\n  [b = [] { ; }] {};\n}\n" $) $; $} $catch $(@expr1073753673 $... $) ${ $assertNoThrowFail $(@expr1073753674 "cppcheck-2.8/test/testtokenize.cpp" $, 6988 $) $; $} $} $while $(@expr1073753675 $false $)
6989:
6990: ;
6991:
6992:
6993: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753676 "cppcheck-2.8/test/testtokenize.cpp" $, 6993 $, "struct a {\n  std::vector<int> b;\n};\nvoid c() {\n  a bar;\n  (decltype(bar.b)::value_type){};\n}\n" $) $; $} $catch $(@expr1073753677 $... $) ${ $assertNoThrowFail $(@expr1073753678 "cppcheck-2.8/test/testtokenize.cpp" $, 6993 $) $; $} $} $while $(@expr1073753679 $false $)
6994:
|
6998:
6999: ;
7000: }
7001: void checkIfCppCast ( ) {
7002: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753680 "cppcheck-2.8/test/testtokenize.cpp" $, 7002 $, "struct a {\n  int b();\n};\nstruct c {\n  bool d() const;\n  a e;\n};\nbool c::d() const {\n  int f = 0;\n  if (!const_cast<a *>(&e)->b()) {}\n  return f;\n}\n" $) $; $} $catch $(@expr1073753681 $... $) ${ $assertNoThrowFail $(@expr1073753682 "cppcheck-2.8/test/testtokenize.cpp" $, 7002 $) $; $} $} $while $(@expr1073753683 $false $)
7003:
|
7012:
7013: ;
7014: }
7015:
7016: void checkRefQualifiers ( ) {
7017:
7018: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753684 "cppcheck-2.8/test/testtokenize.cpp" $, 7018 $, "class a {\n  void b() && {\n    if (this) {}\n  }\n};\n" $) $; $} $catch $(@expr1073753685 $... $) ${ $assertNoThrowFail $(@expr1073753686 "cppcheck-2.8/test/testtokenize.cpp" $, 7018 $) $; $} $} $while $(@expr1073753687 $false $)
7019:
7020:
7021:
7022: ;
7023: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753688 "cppcheck-2.8/test/testtokenize.cpp" $, 7023 $, "class a {\n  void b() & {\n    if (this) {}\n  }\n};\n" $) $; $} $catch $(@expr1073753689 $... $) ${ $assertNoThrowFail $(@expr1073753690 "cppcheck-2.8/test/testtokenize.cpp" $, 7023 $) $; $} $} $while $(@expr1073753691 $false $)
7024:
7025:
7026:
7027: ;
7028: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753692 "cppcheck-2.8/test/testtokenize.cpp" $, 7028 $, "class a {\n  auto b() && -> void {\n    if (this) {}\n  }\n};\n" $) $; $} $catch $(@expr1073753693 $... $) ${ $assertNoThrowFail $(@expr1073753694 "cppcheck-2.8/test/testtokenize.cpp" $, 7028 $) $; $} $} $while $(@expr1073753695 $false $)
7029:
7030:
7031:
7032: ;
7033: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753696 "cppcheck-2.8/test/testtokenize.cpp" $, 7033 $, "class a {\n  auto b() & -> void {\n    if (this) {}\n  }\n};\n" $) $; $} $catch $(@expr1073753697 $... $) ${ $assertNoThrowFail $(@expr1073753698 "cppcheck-2.8/test/testtokenize.cpp" $, 7033 $) $; $} $} $while $(@expr1073753699 $false $)
7034:
7035:
7036:
7037: ;
7038: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753700 "cppcheck-2.8/test/testtokenize.cpp" $, 7038 $, "class a {\n  auto b(int& x) -> int& {\n    if (this) {}\n    return x;\n  }\n};\n" $) $; $} $catch $(@expr1073753701 $... $) ${ $assertNoThrowFail $(@expr1073753702 "cppcheck-2.8/test/testtokenize.cpp" $, 7038 $) $; $} $} $while $(@expr1073753703 $false $)
7039:
|
7042:
7043: ;
7044: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753704 "cppcheck-2.8/test/testtokenize.cpp" $, 7044 $, "class a {\n  auto b(int& x) -> int&& {\n    if (this) {}\n    return x;\n  }\n};\n" $) $; $} $catch $(@expr1073753705 $... $) ${ $assertNoThrowFail $(@expr1073753706 "cppcheck-2.8/test/testtokenize.cpp" $, 7044 $) $; $} $} $while $(@expr1073753707 $false $)
7045:
|
7048:
7049: ;
7050: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753708 "cppcheck-2.8/test/testtokenize.cpp" $, 7050 $, "class a {\n  auto b(int& x) && -> int& {\n    if (this) {}\n    return x;\n  }\n};\n" $) $; $} $catch $(@expr1073753709 $... $) ${ $assertNoThrowFail $(@expr1073753710 "cppcheck-2.8/test/testtokenize.cpp" $, 7050 $) $; $} $} $while $(@expr1073753711 $false $)
7051:
|
7054:
7055: ;
7056:
7057: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753712 "cppcheck-2.8/test/testtokenize.cpp" $, 7057 $, "auto f() -> int* {\n  if (0) {}\n  return 0;\n};\n" $) $; $} $catch $(@expr1073753713 $... $) ${ $assertNoThrowFail $(@expr1073753714 "cppcheck-2.8/test/testtokenize.cpp" $, 7057 $) $; $} $} $while $(@expr1073753715 $false $)
7058:
7059:
7060: ;
7061: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753716 "cppcheck-2.8/test/testtokenize.cpp" $, 7061 $, "auto f() -> int** {\n  if (0) {}\n  return 0;\n};\n" $) $; $} $catch $(@expr1073753717 $... $) ${ $assertNoThrowFail $(@expr1073753718 "cppcheck-2.8/test/testtokenize.cpp" $, 7061 $) $; $} $} $while $(@expr1073753719 $false $)
7062:
7063:
7064: ;
7065:
7066: }
7067:
7068: void checkConditionBlock ( ) {
7069: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753720 "cppcheck-2.8/test/testtokenize.cpp" $, 7069 $, "void a() {\n  for (auto b : std::vector<std::vector<int>>{{}, {}}) {}\n}\n" $) $; $} $catch $(@expr1073753721 $... $) ${ $assertNoThrowFail $(@expr1073753722 "cppcheck-2.8/test/testtokenize.cpp" $, 7069 $) $; $} $} $while $(@expr1073753723 $false $)
7070:
7071: ;
7072: }
7073:
7074: void checkUnknownCircularVar ( )
7075: {
7076: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753724 "cppcheck-2.8/test/testtokenize.cpp" $, 7076 $, "void execute() {\n    const auto &bias = GEMM_CTX_ARG_STORAGE(bias);\n    auto &c = GEMM_CTX_ARG_STORAGE(c);\n}\n" $) $; $} $catch $(@expr1073753725 $... $) ${ $assertNoThrowFail $(@expr1073753726 "cppcheck-2.8/test/testtokenize.cpp" $, 7076 $) $; $} $} $while $(@expr1073753727 $false $)
7077:
7078:
7079: ;
7080: }
7081:
7082: void noCrash1 ( ) {
7083: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753728 "cppcheck-2.8/test/testtokenize.cpp" $, 7083 $, "struct A {\n  A( const std::string &name =  );\n};\nA::A( const std::string &name ) { return; }\n" $) $; $} $catch $(@expr1073753729 $... $) ${ $assertNoThrowFail $(@expr1073753730 "cppcheck-2.8/test/testtokenize.cpp" $, 7083 $) $; $} $} $while $(@expr1073753731 $false $)
7084:
7085:
7086:
7087: ;
7088: }
7089:
7090:
7091: void noCrash2 ( ) {
7092: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753732 "cppcheck-2.8/test/testtokenize.cpp" $, 7092 $, "class a {\npublic:\n  enum b {};\n};\nstruct c;\ntemplate <class> class d {\n  d(const int &, a::b, double, double);\n  d(const d &);\n};\ntemplate <> d<int>::d(const int &, a::b, double, double);\ntemplate <> d<int>::d(const d &) {}\ntemplate <> d<c>::d(const d &) {}\n" $) $; $} $catch $(@expr1073753733 $... $) ${ $assertNoThrowFail $(@expr1073753734 "cppcheck-2.8/test/testtokenize.cpp" $, 7092 $) $; $} $} $while $(@expr1073753735 $false $)
7093:
|
7103:
7104: ;
7105: }
7106:
7107: void noCrash3 ( ) {
7108: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753736 "cppcheck-2.8/test/testtokenize.cpp" $, 7108 $, "void a(X<int> x, typename Y1::Y2<int, A::B::C, 2> y, Z z = []{});" $) $; $} $catch $(@expr1073753737 $... $) ${ $assertNoThrowFail $(@expr1073753738 "cppcheck-2.8/test/testtokenize.cpp" $, 7108 $) $; $} $} $while $(@expr1073753739 $false $) ;
7109: }
7110:
7111: void noCrash4 ( )
7112: {
7113: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753740 "cppcheck-2.8/test/testtokenize.cpp" $, 7113 $, "static int foo() {\n    zval ref ;\n    p = &(ref).value;\n    return result ;\n}\n" $) $; $} $catch $(@expr1073753741 $... $) ${ $assertNoThrowFail $(@expr1073753742 "cppcheck-2.8/test/testtokenize.cpp" $, 7113 $) $; $} $} $while $(@expr1073753743 $false $)
7114:
7115:
7116:
7117: ;
7118: }
7119:
7120: void checkConfig ( const char code@var984 [ ] ) {
7121: errout@var100 .@expr1073753744 str (@expr1073753745 "" ) ;
7122:
7123: Settings s@var985 ;
7124: s@var985 .@expr1073753746 checkConfiguration@var986 =@expr1073753747 true ;
7125:
7126:
7127: Tokenizer tokenizer@var987 (@expr1073753748 &@expr1073753749 s@var985 , this@expr1073753750 ) ;
7128: std ::@expr1073753751 istringstream istr@var988 (@expr1073753752 code@var984 ) ;
7129: $if $(@expr1073753753 $!@expr1073753754 $assert_ $(@expr1073753755 "cppcheck-2.8/test/testtokenize.cpp" $, 7129 $, $(@expr1073753756 tokenizer@var987 .@expr1073753757 tokenize (@expr1073753758 istr@var988 , "test.cpp" ) $) $) $) { $return ; }
7130: }
7131:
7132: void checkConfiguration ( ) {
7133: $do ${ $try ${ checkConfig (@expr1073753759 "void f() { DEBUG(x();y()); }" ) $; $assertThrowFail $(@expr1073753760 "cppcheck-2.8/test/testtokenize.cpp" $, 7133 $) $; $} $catch $(@expr1073753761 $const InternalError $&@expr1073753762 $) ${ $} $catch $(@expr1073753763 $... $) ${ $assertThrowFail $(@expr1073753764 "cppcheck-2.8/test/testtokenize.cpp" $, 7133 $) $; $} $} $while $(@expr1073753765 $false $) ;
7134:
7135: }
7136:
7137: void unknownType ( ) {
7138:
7139: errout@var100 .@expr11942 str (@expr1073753767 "" ) ;
7140: Settings settings@var989 ;
7141: settings@var989 .@expr1073753768 debugwarnings@var990 =@expr1073753769 true ;
7142:
7143: char code@var991 [@expr1073753770 73 ] =@expr1073753771 "class A {\npublic:\n    enum Type { Null };\n};\nusing V = A;\nV::Type value;"
7144:
|
7147:
7148: ;
7149:
7150:
7151: Tokenizer tokenizer@var992 (@expr1073753772 &@expr1073753773 settings@var989 , this@expr1073753774 ) ;
7152: std ::@expr1073753775 istringstream istr@var993 (@expr1073753776 code@var991 ) ;
7153: $if $(@expr1073753777 $!@expr1073753778 $assert_ $(@expr1073753779 "cppcheck-2.8/test/testtokenize.cpp" $, 7153 $, $(@expr1073753780 tokenizer@var992 .@expr1073753781 tokenize (@expr1073753782 istr@var993 , "test.cpp" ) $) $) $) { $return ; }
7154:
7155: tokenizer@var992 .@expr1073753783 printUnknownTypes (@expr1073753784 ) ;
7156:
7157: $if $(@expr1073753785 $!@expr1073753786 $assertEquals $(@expr1073753787 "cppcheck-2.8/test/testtokenize.cpp" $, 7157 $, "" $, errout@var100 .@expr11942 str (@expr1073753789 ) $) $) { $return ; }
7158: }
7159:
7160: void unknownMacroBeforeReturn ( ) {
7161: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073753790 "cppcheck-2.8/test/testtokenize.cpp" $, 7161 $, "int f() { X return 0; }" $) $; $assertThrowFail $(@expr1073753791 "cppcheck-2.8/test/testtokenize.cpp" $, 7161 $) $; $} $catch $(@expr1073753792 $const InternalError $&@expr1073753793 $) ${ $} $catch $(@expr1073753794 $... $) ${ $assertThrowFail $(@expr1073753795 "cppcheck-2.8/test/testtokenize.cpp" $, 7161 $) $; $} $} $while $(@expr1073753796 $false $) ;
7162: }
7163:
7164: void cppcast ( ) {
7165: const char code@var994 [@expr1073753797 106 ] =@expr1073753798 "a = const_cast<int>(x);\na = dynamic_cast<int>(x);\na = reinterpret_cast<int>(x);\na = static_cast<int>(x);\n"
7166:
7167:
7168: ;
7169:
7170: Settings settings@var995 ;
7171: Tokenizer tokenizer@var996 (@expr1073753799 &@expr1073753800 settings@var995 , this@expr1073753801 ) ;
7172: std ::@expr1073753802 istringstream istr@var997 (@expr1073753803 code@var994 ) ;
7173: $if $(@expr1073753804 $!@expr1073753805 $assert_ $(@expr1073753806 "cppcheck-2.8/test/testtokenize.cpp" $, 7173 $, $(@expr1073753807 tokenizer@var996 .@expr1073753808 tokenize (@expr1073753809 istr@var997 , "test.cpp" ) $) $) $) { $return ; }
7174:
7175: for (@expr1073753810 const Token *@expr1073753811 tok@var998 =@expr1073753812 tokenizer@var996 .@expr1073753813 tokens (@expr1073753814 ) ; tok@var998 ; tok@var998 =@expr1073753815 tok@var998 .@expr1073753816 next (@expr1073753817 ) ) {
7176: $if $(@expr1073753818 $!@expr1073753819 $assertEquals $(@expr1073753820 "cppcheck-2.8/test/testtokenize.cpp" $, 7176 $, tok@var998 .@expr1073753821 str (@expr1073753822 ) ==@expr1073753823 "(" $, tok@var998 .@expr1073753824 isCast (@expr1073753825 ) $) $) { $return ; }
7177: }
7178: }
7179:
7180: std :: string checkHeaders ( const char code@var999 [ ] , bool checkHeadersFlag@var1000 ) {
7181:
7182: errout@var100 .@expr1073753826 str (@expr1073753827 "" ) ;
7183:
7184: Settings settings@var1001 ;
7185: settings@var1001 .@expr1073753828 checkHeaders@var1002 =@expr1073753829 checkHeadersFlag@var1000 ;
7186:
7187:
7188: std ::@expr1073753830 vector < std ::@expr12007 string > files@var1003 (@expr1073753832 1 , "test.cpp" ) ;
7189: std ::@expr1073753833 istringstream istr@var1004 (@expr1073753834 code@var999 ) ;
7190: const simplecpp ::@expr1073753835 TokenList tokens1@var1005 (@expr1073753836 istr@var1004 , files@var1003 , files@var1003 [@expr1073753837 0 ] ) ;
7191:
7192:
7193: simplecpp ::@expr1073753838 TokenList tokens2@var1006 (@expr1073753839 files@var1003 ) ;
7194: std ::@expr1073753840 map < std ::@expr12007 string , simplecpp ::@expr12007 TokenList *@expr1073753843 > filedata@var1007 ;
7195: simplecpp ::@expr1073753844 preprocess (@expr1073753845 tokens2@var1006 , tokens1@var1005 , files@var1003 , filedata@var1007 , simplecpp ::@expr1073753846 DUI (@expr1073753847 ) ) ;
7196:
7197: Preprocessor preprocessor@var1008 (@expr1073753848 settings0@var102 , nullptr ) ;
7198: preprocessor@var1008 .@expr1073753849 setDirectives (@expr1073753850 tokens1@var1005 ) ;
7199:
7200:
7201: Tokenizer tokenizer@var1009 (@expr1073753851 &@expr1073753852 settings@var1001 , this@expr1073753853 ) ;
7202: tokenizer@var1009 .@expr1073753854 createTokens (@expr1073753855 std ::@expr1073753856 move (@expr1073753857 tokens2@var1006 ) ) ;
7203: tokenizer@var1009 .@expr1073753858 simplifyTokens1 (@expr1073753859 "" ) ;
7204:
7205: return tokenizer@var1009 .@expr1073753860 tokens (@expr1073753861 ) .@expr1073753862 stringifyList (@expr1073753863 ) ;
7206: }
7207:
7208: void checkHeader1 ( ) {
7209:
7210: const char code@var1010 [@expr1073753864 114 ] =@expr1073753865 "# 1 \"test.h\"\nstruct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};"
7211:
|
7214:
7215: ;
7216:
7217: $if $(@expr1073753866 $!@expr1073753867 $assertEquals $(@expr1073753868 "cppcheck-2.8/test/testtokenize.cpp" $, 7217 $, "\n\n##file 1\n1: struct A {\n2: int a ; a = 1 ;\n3: void f ( ) { g<int> ( 1 ) ; }\n4: void g<int> ( int x ) ;\n5: } ;\n4: void A :: g<int> ( int x ) { a = 2 ; }\n" $, checkHeaders (@expr1073753869 code@var1010 , true ) $) $) { $return
7218:
|
7223:
7224: ; }
7225:
7226: $if $(@expr1073753870 $!@expr1073753871 $assertEquals $(@expr1073753872 "cppcheck-2.8/test/testtokenize.cpp" $, 7226 $, "\n\n##file 1\n\n1:\n|\n4:\n5: ;\n" $, checkHeaders (@expr1073753873 code@var1010 , false ) $) $) { $return
7227:
|
7230:
7231: ; }
7232: }
7233:
7234: void removeExtraTemplateKeywords ( ) {
7235: const char code1@var1011 [@expr1073753874 57 ] =@expr1073753875 "typename GridView::template Codim<0>::Iterator iterator;" ;
7236: const char expected1@var1012 [@expr1073753876 47 ] =@expr1073753877 "GridView :: Codim < 0 > :: Iterator iterator ;" ;
7237: $if $(@expr1073753878 $!@expr1073753879 $assertEquals $(@expr1073753880 "cppcheck-2.8/test/testtokenize.cpp" $, 7237 $, expected1@var1012 $, $tokenizeAndStringify_ $(@expr1073753881 "cppcheck-2.8/test/testtokenize.cpp" $, 7237 $, code1@var1011 $) $) $) { $return ; }
7238:
7239: const char code2@var1013 [@expr1073753882 76 ] =@expr1073753883 "typename GridView::template Codim<0>::Iterator it = gv.template begin<0>();" ;
7240: const char expected2@var1014 [@expr1073753884 69 ] =@expr1073753885 "GridView :: Codim < 0 > :: Iterator it ; it = gv . begin < 0 > ( ) ;" ;
7241: $if $(@expr1073753886 $!@expr1073753887 $assertEquals $(@expr1073753888 "cppcheck-2.8/test/testtokenize.cpp" $, 7241 $, expected2@var1014 $, $tokenizeAndStringify_ $(@expr1073753889 "cppcheck-2.8/test/testtokenize.cpp" $, 7241 $, code2@var1013 $) $) $) { $return ; }
7242: }
7243:
7244: void removeAlignas1 ( ) {
7245: const char code@var1015 [@expr1073753890 47 ] =@expr1073753891 "alignas(float) unsigned char c[sizeof(float)];" ;
7246: const char expected@var1016 [@expr1073753892 39 ] =@expr1073753893 "unsigned char c [ sizeof ( float ) ] ;" ;
7247: $if $(@expr1073753894 $!@expr1073753895 $assertEquals $(@expr1073753896 "cppcheck-2.8/test/testtokenize.cpp" $, 7247 $, expected@var1016 $, $tokenizeAndStringify_ $(@expr1073753897 "cppcheck-2.8/test/testtokenize.cpp" $, 7247 $, code@var1015 $) $) $) { $return ; }
7248: }
7249:
7250: void removeAlignas2 ( ) {
7251: const char code@var1017 [@expr1073753898 42 ] =@expr1073753899 "static_assert( alignof( VertexC ) == 4 );" ;
7252: const char expected@var1018 [@expr1073753900 45 ] =@expr1073753901 "static_assert ( alignof ( VertexC ) == 4 ) ;" ;
7253: $if $(@expr1073753902 $!@expr1073753903 $assertEquals $(@expr1073753904 "cppcheck-2.8/test/testtokenize.cpp" $, 7253 $, expected@var1018 $, $tokenizeAndStringify_ $(@expr1073753905 "cppcheck-2.8/test/testtokenize.cpp" $, 7253 $, code@var1017 $) $) $) { $return ; }
7254: }
7255:
7256: void simplifyCoroutines ( ) {
7257: Settings settings@var1019 ;
7258: settings@var1019 .@expr1073753907 standards@var1020 .@expr1073753908 cpp@var1021 =@expr1073753909 Standards ::@expr1073753910 CPP20@expr1073753906 ;
7259:
7260: const char code1@var1022 [@expr1073753911 41 ] =@expr1073753912 "generator<int> f() { co_yield start++; }" ;
7261: const char expected1@var1023 [@expr1073753913 52 ] =@expr1073753914 "generator < int > f ( ) { co_yield ( start ++ ) ; }" ;
7262: $if $(@expr1073753915 $!@expr1073753916 $assertEquals $(@expr1073753917 "cppcheck-2.8/test/testtokenize.cpp" $, 7262 $, expected1@var1023 $, $tokenizeAndStringify_ $(@expr1073753918 "cppcheck-2.8/test/testtokenize.cpp" $, 7262 $, code1@var1022 , settings@var1019 $) $) $) { $return ; }
7263:
7264: const char code2@var1024 [@expr1073753919 31 ] =@expr1073753920 "task<> f() { co_await foo(); }" ;
7265: const char expected2@var1025 [@expr1073753921 42 ] =@expr1073753922 "task < > f ( ) { co_await ( foo ( ) ) ; }" ;
7266: $if $(@expr1073753923 $!@expr1073753924 $assertEquals $(@expr1073753925 "cppcheck-2.8/test/testtokenize.cpp" $, 7266 $, expected2@var1025 $, $tokenizeAndStringify_ $(@expr1073753926 "cppcheck-2.8/test/testtokenize.cpp" $, 7266 $, code2@var1024 , settings@var1019 $) $) $) { $return ; }
7267:
7268: const char code3@var1026 [@expr1073753927 36 ] =@expr1073753928 "generator<int> f() { co_return 7; }" ;
7269: const char expected3@var1027 [@expr1073753929 46 ] =@expr1073753930 "generator < int > f ( ) { co_return ( 7 ) ; }" ;
7270: $if $(@expr1073753931 $!@expr1073753932 $assertEquals $(@expr1073753933 "cppcheck-2.8/test/testtokenize.cpp" $, 7270 $, expected3@var1027 $, $tokenizeAndStringify_ $(@expr1073753934 "cppcheck-2.8/test/testtokenize.cpp" $, 7270 $, code3@var1026 , settings@var1019 $) $) $) { $return ; }
7271: }
7272:
7273: void simplifySpaceshipOperator ( ) {
7274: Settings settings@var1028 ;
7275: settings@var1028 .@expr1073753936 standards@var1029 .@expr1073753937 cpp@var1030 =@expr1073753938 Standards ::@expr1073753939 CPP20@expr1073753935 ;
7276:
7277: $if $(@expr1073753940 $!@expr1073753941 $assertEquals $(@expr1073753942 "cppcheck-2.8/test/testtokenize.cpp" $, 7277 $, "; x <=> y ;" $, $tokenizeAndStringify_ $(@expr1073753943 "cppcheck-2.8/test/testtokenize.cpp" $, 7277 $, ";x<=>y;" , settings@var1028 $) $) $) { $return ; }
7278: }
7279:
7280: void simplifyIfSwitchForInit1 ( ) {
7281: Settings settings@var1031 ;
7282: settings@var1031 .@expr1073753945 standards@var1032 .@expr1073753946 cpp@var1033 =@expr1073753947 Standards ::@expr1073753948 CPP17@expr1073753944 ;
7283: const char code@var1034 [@expr1073753949 25 ] =@expr1073753950 "void f() { if (a;b) {} }" ;
7284: $if $(@expr1073753951 $!@expr1073753952 $assertEquals $(@expr1073753953 "cppcheck-2.8/test/testtokenize.cpp" $, 7284 $, "void f ( ) { { a ; if ( b ) { } } }" $, $tokenizeAndStringify_ $(@expr1073753954 "cppcheck-2.8/test/testtokenize.cpp" $, 7284 $, code@var1034 , settings@var1031 $) $) $) { $return ; }
7285: }
7286:
7287: void simplifyIfSwitchForInit2 ( ) {
7288: Settings settings@var1035 ;
7289: settings@var1035 .@expr1073753956 standards@var1036 .@expr1073753957 cpp@var1037 =@expr1073753958 Standards ::@expr1073753959 CPP20@expr1073753955 ;
7290: const char code@var1038 [@expr1073753960 33 ] =@expr1073753961 "void f() { if (a;b) {} else {} }" ;
7291: $if $(@expr1073753962 $!@expr1073753963 $assertEquals $(@expr1073753964 "cppcheck-2.8/test/testtokenize.cpp" $, 7291 $, "void f ( ) { { a ; if ( b ) { } else { } } }" $, $tokenizeAndStringify_ $(@expr1073753965 "cppcheck-2.8/test/testtokenize.cpp" $, 7291 $, code@var1038 , settings@var1035 $) $) $) { $return ; }
7292: }
7293:
7294: void simplifyIfSwitchForInit3 ( ) {
7295: Settings settings@var1039 ;
7296: settings@var1039 .@expr1073753967 standards@var1040 .@expr1073753968 cpp@var1041 =@expr1073753969 Standards ::@expr1073753970 CPP20@expr1073753966 ;
7297: const char code@var1042 [@expr1073753971 29 ] =@expr1073753972 "void f() { switch (a;b) {} }" ;
7298: $if $(@expr1073753973 $!@expr1073753974 $assertEquals $(@expr1073753975 "cppcheck-2.8/test/testtokenize.cpp" $, 7298 $, "void f ( ) { { a ; switch ( b ) { } } }" $, $tokenizeAndStringify_ $(@expr1073753976 "cppcheck-2.8/test/testtokenize.cpp" $, 7298 $, code@var1042 , settings@var1039 $) $) $) { $return ; }
7299: }
7300:
7301: void simplifyIfSwitchForInit4 ( ) {
7302: Settings settings@var1043 ;
7303: settings@var1043 .@expr1073753978 standards@var1044 .@expr1073753979 cpp@var1045 =@expr1073753980 Standards ::@expr1073753981 CPP20@expr1073753977 ;
7304: const char code@var1046 [@expr1073753982 28 ] =@expr1073753983 "void f() { for (a;b:c) {} }" ;
7305: $if $(@expr1073753984 $!@expr1073753985 $assertEquals $(@expr1073753986 "cppcheck-2.8/test/testtokenize.cpp" $, 7305 $, "void f ( ) { { a ; for ( b : c ) { } } }" $, $tokenizeAndStringify_ $(@expr1073753987 "cppcheck-2.8/test/testtokenize.cpp" $, 7305 $, code@var1046 , settings@var1043 $) $) $) { $return ; }
7306: }
7307:
7308: void simplifyIfSwitchForInit5 ( ) {
7309: Settings settings@var1047 ;
7310: settings@var1047 .@expr1073753989 standards@var1048 .@expr1073753990 cpp@var1049 =@expr1073753991 Standards ::@expr1073753992 CPP20@expr1073753988 ;
7311: const char code@var1050 [@expr1073753993 30 ] =@expr1073753994 "void f() { if ([] { ; }) {} }" ;
7312: $if $(@expr1073753995 $!@expr1073753996 $assertEquals $(@expr1073753997 "cppcheck-2.8/test/testtokenize.cpp" $, 7312 $, "void f ( ) { if ( [ ] { ; } ) { } }" $, $tokenizeAndStringify_ $(@expr1073753998 "cppcheck-2.8/test/testtokenize.cpp" $, 7312 $, code@var1050 , settings@var1047 $) $) $) { $return ; }
7313: }
7314:
7315: void cpp20_default_bitfield_initializer ( ) {
7316: Settings settings@var1051 ;
7317: const char code@var1052 [@expr1073754001 27 ] =@expr1073754002 "struct S { int a:2 = 0; };" ;
7318: settings@var1051 .@expr12179 standards@var1053 .@expr12180 cpp@var1054 =@expr1073754005 Standards ::@expr1073754006 CPP20@expr1073753999 ;
7319: $if $(@expr1073754007 $!@expr1073754008 $assertEquals $(@expr1073754009 "cppcheck-2.8/test/testtokenize.cpp" $, 7319 $, "struct S { int a ; a = 0 ; } ;" $, $tokenizeAndStringify_ $(@expr1073754010 "cppcheck-2.8/test/testtokenize.cpp" $, 7319 $, code@var1052 , settings@var1051 $) $) $) { $return ; }
7320: settings@var1051 .@expr12179 standards@var1053 .@expr12180 cpp@var1054 =@expr1073754013 Standards ::@expr1073754014 CPP17@expr1073754000 ;
7321: $do ${ $try ${ $tokenizeAndStringify_ $(@expr1073754015 "cppcheck-2.8/test/testtokenize.cpp" $, 7321 $, code@var1052 , settings@var1051 $) $; $assertThrowFail $(@expr1073754016 "cppcheck-2.8/test/testtokenize.cpp" $, 7321 $) $; $} $catch $(@expr1073754017 $const InternalError $&@expr1073754018 $) ${ $} $catch $(@expr1073754019 $... $) ${ $assertThrowFail $(@expr1073754020 "cppcheck-2.8/test/testtokenize.cpp" $, 7321 $) $; $} $} $while $(@expr1073754021 $false $) ;
7322: }
7323: } ;
7324:
7325: $namespace ${ TestTokenizer instance_TestTokenizer@var1055 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@177}
  v {!<=-1,!>=2,0@177}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 43
  "TestTokenizer" always "TestTokenizer"
Line 52
  ( {lifetime[Object]=(exename),!0}
  "windows.cfg" always "windows.cfg"
  != always {!<=-1,!>=2}
  "windows.cfg" always "windows.cfg"
  false always 0
Line 55
  = always 1
  true always 1
Line 56
  = always 1
  true always 1
Line 57
  = always 1
  true always 1
Line 58
  = always 1
  true always 1
Line 60
  ( always {!<=-1,!>=2}
  "tokenize1" always "tokenize1"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "tokenize2" always "tokenize2"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "tokenize4" always "tokenize4"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "tokenize5" always "tokenize5"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "tokenize7" always "tokenize7"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "tokenize8" always "tokenize8"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "tokenize9" always "tokenize9"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "tokenize11" always "tokenize11"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "tokenize13" always "tokenize13"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "tokenize14" always "tokenize14"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "tokenizeHexWithSuffix" always "tokenizeHexWithSuffix"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "tokenize15" always "tokenize15"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "tokenize17" always "tokenize17"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "tokenize18" always "tokenize18"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "tokenize19" always "tokenize19"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "tokenize21" always "tokenize21"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "tokenize22" always "tokenize22"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "tokenize25" always "tokenize25"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "tokenize26" always "tokenize26"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "tokenize27" always "tokenize27"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "tokenize31" always "tokenize31"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "tokenize32" always "tokenize32"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "tokenize33" always "tokenize33"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "tokenize34" always "tokenize34"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "tokenize35" always "tokenize35"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "tokenize36" always "tokenize36"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "tokenize37" always "tokenize37"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "tokenize38" always "tokenize38"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "tokenize39" always "tokenize39"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "validate" always "validate"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "objectiveC" always "objectiveC"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "syntax_case_default" always "syntax_case_default"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "removePragma" always "removePragma"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "foreach" always "foreach"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "ifconstexpr" always "ifconstexpr"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "combineOperators" always "combineOperators"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "concatenateNegativeNumber" always "concatenateNegativeNumber"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "longtok" always "longtok"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "simplifyHeadersAndUnusedTemplates1" always "simplifyHeadersAndUnusedTemplates1"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "simplifyHeadersAndUnusedTemplates2" always "simplifyHeadersAndUnusedTemplates2"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "simplifyAt" always "simplifyAt"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "inlineasm" always "inlineasm"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "simplifyAsm2" always "simplifyAsm2"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "ifAddBraces1" always "ifAddBraces1"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "ifAddBraces2" always "ifAddBraces2"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "ifAddBraces3" always "ifAddBraces3"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "ifAddBraces4" always "ifAddBraces4"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "ifAddBraces5" always "ifAddBraces5"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "ifAddBraces7" always "ifAddBraces7"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "ifAddBraces9" always "ifAddBraces9"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "ifAddBraces11" always "ifAddBraces11"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "ifAddBraces12" always "ifAddBraces12"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "ifAddBraces13" always "ifAddBraces13"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "ifAddBraces15" always "ifAddBraces15"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "ifAddBraces16" always "ifAddBraces16"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "ifAddBraces17" always "ifAddBraces17"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "ifAddBraces18" always "ifAddBraces18"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "ifAddBraces19" always "ifAddBraces19"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "ifAddBraces20" always "ifAddBraces20"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "ifAddBracesLabels" always "ifAddBracesLabels"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "switchAddBracesLabels" always "switchAddBracesLabels"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "whileAddBraces" always "whileAddBraces"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "whileAddBracesLabels" always "whileAddBracesLabels"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "doWhileAddBraces" always "doWhileAddBraces"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "doWhileAddBracesLabels" always "doWhileAddBracesLabels"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "forAddBraces1" always "forAddBraces1"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "forAddBraces2" always "forAddBraces2"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "forAddBracesLabels" always "forAddBracesLabels"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "simplifyExternC" always "simplifyExternC"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "simplifyKeyword" always "simplifyKeyword"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "isZeroNumber" always "isZeroNumber"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "isOneNumber" always "isOneNumber"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "isTwoNumber" always "isTwoNumber"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "simplifyFunctionParameters" always "simplifyFunctionParameters"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "simplifyFunctionParameters1" always "simplifyFunctionParameters1"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "simplifyFunctionParameters2" always "simplifyFunctionParameters2"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "simplifyFunctionParameters3" always "simplifyFunctionParameters3"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "simplifyFunctionParameters4" always "simplifyFunctionParameters4"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "simplifyFunctionParametersMultiTemplate" always "simplifyFunctionParametersMultiTemplate"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "simplifyFunctionParametersErrors" always "simplifyFunctionParametersErrors"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "simplifyFunctionTryCatch" always "simplifyFunctionTryCatch"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "removeParentheses1" always "removeParentheses1"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "removeParentheses3" always "removeParentheses3"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "removeParentheses4" always "removeParentheses4"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "removeParentheses5" always "removeParentheses5"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "removeParentheses6" always "removeParentheses6"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "removeParentheses7" always "removeParentheses7"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "removeParentheses8" always "removeParentheses8"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "removeParentheses9" always "removeParentheses9"
  false always 0
  false always 0
Line 170
  ( always {!<=-1,!>=2}
  "removeParentheses10" always "removeParentheses10"
  false always 0
  false always 0
Line 171
  ( always {!<=-1,!>=2}
  "removeParentheses11" always "removeParentheses11"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "removeParentheses12" always "removeParentheses12"
  false always 0
  false always 0
Line 173
  ( always {!<=-1,!>=2}
  "removeParentheses13" always "removeParentheses13"
  false always 0
  false always 0
Line 174
  ( always {!<=-1,!>=2}
  "removeParentheses14" always "removeParentheses14"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "removeParentheses15" always "removeParentheses15"
  false always 0
  false always 0
Line 176
  ( always {!<=-1,!>=2}
  "removeParentheses16" always "removeParentheses16"
  false always 0
  false always 0
Line 177
  ( always {!<=-1,!>=2}
  "removeParentheses17" always "removeParentheses17"
  false always 0
  false always 0
Line 178
  ( always {!<=-1,!>=2}
  "removeParentheses18" always "removeParentheses18"
  false always 0
  false always 0
Line 179
  ( always {!<=-1,!>=2}
  "removeParentheses19" always "removeParentheses19"
  false always 0
  false always 0
Line 180
  ( always {!<=-1,!>=2}
  "removeParentheses20" always "removeParentheses20"
  false always 0
  false always 0
Line 181
  ( always {!<=-1,!>=2}
  "removeParentheses21" always "removeParentheses21"
  false always 0
  false always 0
Line 182
  ( always {!<=-1,!>=2}
  "removeParentheses22" always "removeParentheses22"
  false always 0
  false always 0
Line 183
  ( always {!<=-1,!>=2}
  "removeParentheses23" always "removeParentheses23"
  false always 0
  false always 0
Line 184
  ( always {!<=-1,!>=2}
  "removeParentheses24" always "removeParentheses24"
  false always 0
  false always 0
Line 185
  ( always {!<=-1,!>=2}
  "removeParentheses25" always "removeParentheses25"
  false always 0
  false always 0
Line 186
  ( always {!<=-1,!>=2}
  "removeParentheses26" always "removeParentheses26"
  false always 0
  false always 0
Line 188
  ( always {!<=-1,!>=2}
  "tokenize_double" always "tokenize_double"
  false always 0
  false always 0
Line 189
  ( always {!<=-1,!>=2}
  "tokenize_strings" always "tokenize_strings"
  false always 0
  false always 0
Line 191
  ( always {!<=-1,!>=2}
  "simplifyStructDecl" always "simplifyStructDecl"
  false always 0
  false always 0
Line 193
  ( always {!<=-1,!>=2}
  "vardecl1" always "vardecl1"
  false always 0
  false always 0
Line 194
  ( always {!<=-1,!>=2}
  "vardecl2" always "vardecl2"
  false always 0
  false always 0
Line 195
  ( always {!<=-1,!>=2}
  "vardecl3" always "vardecl3"
  false always 0
  false always 0
Line 196
  ( always {!<=-1,!>=2}
  "vardecl4" always "vardecl4"
  false always 0
  false always 0
Line 197
  ( always {!<=-1,!>=2}
  "vardecl5" always "vardecl5"
  false always 0
  false always 0
Line 198
  ( always {!<=-1,!>=2}
  "vardec_static" always "vardec_static"
  false always 0
  false always 0
Line 199
  ( always {!<=-1,!>=2}
  "vardecl6" always "vardecl6"
  false always 0
  false always 0
Line 200
  ( always {!<=-1,!>=2}
  "vardecl7" always "vardecl7"
  false always 0
  false always 0
Line 201
  ( always {!<=-1,!>=2}
  "vardecl8" always "vardecl8"
  false always 0
  false always 0
Line 202
  ( always {!<=-1,!>=2}
  "vardecl9" always "vardecl9"
  false always 0
  false always 0
Line 203
  ( always {!<=-1,!>=2}
  "vardecl10" always "vardecl10"
  false always 0
  false always 0
Line 204
  ( always {!<=-1,!>=2}
  "vardecl11" always "vardecl11"
  false always 0
  false always 0
Line 205
  ( always {!<=-1,!>=2}
  "vardecl12" always "vardecl12"
  false always 0
  false always 0
Line 206
  ( always {!<=-1,!>=2}
  "vardecl13" always "vardecl13"
  false always 0
  false always 0
Line 207
  ( always {!<=-1,!>=2}
  "vardecl14" always "vardecl14"
  false always 0
  false always 0
Line 208
  ( always {!<=-1,!>=2}
  "vardecl15" always "vardecl15"
  false always 0
  false always 0
Line 209
  ( always {!<=-1,!>=2}
  "vardecl16" always "vardecl16"
  false always 0
  false always 0
Line 210
  ( always {!<=-1,!>=2}
  "vardecl17" always "vardecl17"
  false always 0
  false always 0
Line 211
  ( always {!<=-1,!>=2}
  "vardecl18" always "vardecl18"
  false always 0
  false always 0
Line 212
  ( always {!<=-1,!>=2}
  "vardecl19" always "vardecl19"
  false always 0
  false always 0
Line 213
  ( always {!<=-1,!>=2}
  "vardecl20" always "vardecl20"
  false always 0
  false always 0
Line 214
  ( always {!<=-1,!>=2}
  "vardecl21" always "vardecl21"
  false always 0
  false always 0
Line 215
  ( always {!<=-1,!>=2}
  "vardecl22" always "vardecl22"
  false always 0
  false always 0
Line 216
  ( always {!<=-1,!>=2}
  "vardecl23" always "vardecl23"
  false always 0
  false always 0
Line 217
  ( always {!<=-1,!>=2}
  "vardecl24" always "vardecl24"
  false always 0
  false always 0
Line 218
  ( always {!<=-1,!>=2}
  "vardecl25" always "vardecl25"
  false always 0
  false always 0
Line 219
  ( always {!<=-1,!>=2}
  "vardecl26" always "vardecl26"
  false always 0
  false always 0
Line 220
  ( always {!<=-1,!>=2}
  "vardecl27" always "vardecl27"
  false always 0
  false always 0
Line 221
  ( always {!<=-1,!>=2}
  "vardecl28" always "vardecl28"
  false always 0
  false always 0
Line 222
  ( always {!<=-1,!>=2}
  "vardecl_stl_1" always "vardecl_stl_1"
  false always 0
  false always 0
Line 223
  ( always {!<=-1,!>=2}
  "vardecl_stl_2" always "vardecl_stl_2"
  false always 0
  false always 0
Line 224
  ( always {!<=-1,!>=2}
  "vardecl_stl_3" always "vardecl_stl_3"
  false always 0
  false always 0
Line 225
  ( always {!<=-1,!>=2}
  "vardecl_template_1" always "vardecl_template_1"
  false always 0
  false always 0
Line 226
  ( always {!<=-1,!>=2}
  "vardecl_template_2" always "vardecl_template_2"
  false always 0
  false always 0
Line 227
  ( always {!<=-1,!>=2}
  "vardecl_union" always "vardecl_union"
  false always 0
  false always 0
Line 228
  ( always {!<=-1,!>=2}
  "vardecl_par" always "vardecl_par"
  false always 0
  false always 0
Line 229
  ( always {!<=-1,!>=2}
  "vardecl_par2" always "vardecl_par2"
  false always 0
  false always 0
Line 230
  ( always {!<=-1,!>=2}
  "vardecl_par3" always "vardecl_par3"
  false always 0
  false always 0
Line 231
  ( always {!<=-1,!>=2}
  "vardecl_class_ref" always "vardecl_class_ref"
  false always 0
  false always 0
Line 232
  ( always {!<=-1,!>=2}
  "volatile_variables" always "volatile_variables"
  false always 0
  false always 0
Line 235
  ( always {!<=-1,!>=2}
  "implicitIntConst" always "implicitIntConst"
  false always 0
  false always 0
Line 236
  ( always {!<=-1,!>=2}
  "implicitIntExtern" always "implicitIntExtern"
  false always 0
  false always 0
Line 237
  ( always {!<=-1,!>=2}
  "implicitIntSigned1" always "implicitIntSigned1"
  false always 0
  false always 0
Line 238
  ( always {!<=-1,!>=2}
  "implicitIntUnsigned1" always "implicitIntUnsigned1"
  false always 0
  false always 0
Line 239
  ( always {!<=-1,!>=2}
  "implicitIntUnsigned2" always "implicitIntUnsigned2"
  false always 0
  false always 0
Line 240
  ( always {!<=-1,!>=2}
  "implicitIntUnsigned3" always "implicitIntUnsigned3"
  false always 0
  false always 0
Line 242
  ( always {!<=-1,!>=2}
  "simplifyStdType" always "simplifyStdType"
  false always 0
  false always 0
Line 244
  ( always {!<=-1,!>=2}
  "createLinks" always "createLinks"
  false always 0
  false always 0
Line 245
  ( always {!<=-1,!>=2}
  "createLinks2" always "createLinks2"
  false always 0
  false always 0
Line 247
  ( always {!<=-1,!>=2}
  "simplifyString" always "simplifyString"
  false always 0
  false always 0
Line 248
  ( always {!<=-1,!>=2}
  "simplifyConst" always "simplifyConst"
  false always 0
  false always 0
Line 249
  ( always {!<=-1,!>=2}
  "switchCase" always "switchCase"
  false always 0
  false always 0
Line 251
  ( always {!<=-1,!>=2}
  "simplifyPointerToStandardType" always "simplifyPointerToStandardType"
  false always 0
  false always 0
Line 252
  ( always {!<=-1,!>=2}
  "simplifyFunctionPointers1" always "simplifyFunctionPointers1"
  false always 0
  false always 0
Line 253
  ( always {!<=-1,!>=2}
  "simplifyFunctionPointers2" always "simplifyFunctionPointers2"
  false always 0
  false always 0
Line 254
  ( always {!<=-1,!>=2}
  "simplifyFunctionPointers3" always "simplifyFunctionPointers3"
  false always 0
  false always 0
Line 255
  ( always {!<=-1,!>=2}
  "simplifyFunctionPointers4" always "simplifyFunctionPointers4"
  false always 0
  false always 0
Line 256
  ( always {!<=-1,!>=2}
  "simplifyFunctionPointers5" always "simplifyFunctionPointers5"
  false always 0
  false always 0
Line 257
  ( always {!<=-1,!>=2}
  "simplifyFunctionPointers6" always "simplifyFunctionPointers6"
  false always 0
  false always 0
Line 258
  ( always {!<=-1,!>=2}
  "simplifyFunctionPointers7" always "simplifyFunctionPointers7"
  false always 0
  false always 0
Line 259
  ( always {!<=-1,!>=2}
  "simplifyFunctionPointers8" always "simplifyFunctionPointers8"
  false always 0
  false always 0
Line 260
  ( always {!<=-1,!>=2}
  "simplifyFunctionPointers9" always "simplifyFunctionPointers9"
  false always 0
  false always 0
Line 262
  ( always {!<=-1,!>=2}
  "removedeclspec" always "removedeclspec"
  false always 0
  false always 0
Line 263
  ( always {!<=-1,!>=2}
  "removeattribute" always "removeattribute"
  false always 0
  false always 0
Line 264
  ( always {!<=-1,!>=2}
  "functionAttributeBefore1" always "functionAttributeBefore1"
  false always 0
  false always 0
Line 265
  ( always {!<=-1,!>=2}
  "functionAttributeBefore2" always "functionAttributeBefore2"
  false always 0
  false always 0
Line 266
  ( always {!<=-1,!>=2}
  "functionAttributeBefore3" always "functionAttributeBefore3"
  false always 0
  false always 0
Line 267
  ( always {!<=-1,!>=2}
  "functionAttributeBefore4" always "functionAttributeBefore4"
  false always 0
  false always 0
Line 268
  ( always {!<=-1,!>=2}
  "functionAttributeAfter1" always "functionAttributeAfter1"
  false always 0
  false always 0
Line 269
  ( always {!<=-1,!>=2}
  "functionAttributeAfter2" always "functionAttributeAfter2"
  false always 0
  false always 0
Line 270
  ( always {!<=-1,!>=2}
  "functionAttributeListBefore" always "functionAttributeListBefore"
  false always 0
  false always 0
Line 271
  ( always {!<=-1,!>=2}
  "functionAttributeListAfter" always "functionAttributeListAfter"
  false always 0
  false always 0
Line 273
  ( always {!<=-1,!>=2}
  "splitTemplateRightAngleBrackets" always "splitTemplateRightAngleBrackets"
  false always 0
  false always 0
Line 275
  ( always {!<=-1,!>=2}
  "cpp03template1" always "cpp03template1"
  false always 0
  false always 0
Line 276
  ( always {!<=-1,!>=2}
  "cpp0xtemplate1" always "cpp0xtemplate1"
  false always 0
  false always 0
Line 277
  ( always {!<=-1,!>=2}
  "cpp0xtemplate2" always "cpp0xtemplate2"
  false always 0
  false always 0
Line 278
  ( always {!<=-1,!>=2}
  "cpp0xtemplate3" always "cpp0xtemplate3"
  false always 0
  false always 0
Line 279
  ( always {!<=-1,!>=2}
  "cpp0xtemplate4" always "cpp0xtemplate4"
  false always 0
  false always 0
Line 280
  ( always {!<=-1,!>=2}
  "cpp0xtemplate5" always "cpp0xtemplate5"
  false always 0
  false always 0
Line 281
  ( always {!<=-1,!>=2}
  "cpp14template" always "cpp14template"
  false always 0
  false always 0
Line 283
  ( always {!<=-1,!>=2}
  "arraySize" always "arraySize"
  false always 0
  false always 0
Line 285
  ( always {!<=-1,!>=2}
  "labels" always "labels"
  false always 0
  false always 0
Line 286
  ( always {!<=-1,!>=2}
  "simplifyInitVar" always "simplifyInitVar"
  false always 0
  false always 0
Line 287
  ( always {!<=-1,!>=2}
  "simplifyInitVar2" always "simplifyInitVar2"
  false always 0
  false always 0
Line 288
  ( always {!<=-1,!>=2}
  "simplifyInitVar3" always "simplifyInitVar3"
  false always 0
  false always 0
Line 290
  ( always {!<=-1,!>=2}
  "bitfields1" always "bitfields1"
  false always 0
  false always 0
Line 291
  ( always {!<=-1,!>=2}
  "bitfields2" always "bitfields2"
  false always 0
  false always 0
Line 292
  ( always {!<=-1,!>=2}
  "bitfields3" always "bitfields3"
  false always 0
  false always 0
Line 293
  ( always {!<=-1,!>=2}
  "bitfields4" always "bitfields4"
  false always 0
  false always 0
Line 294
  ( always {!<=-1,!>=2}
  "bitfields5" always "bitfields5"
  false always 0
  false always 0
Line 295
  ( always {!<=-1,!>=2}
  "bitfields6" always "bitfields6"
  false always 0
  false always 0
Line 296
  ( always {!<=-1,!>=2}
  "bitfields7" always "bitfields7"
  false always 0
  false always 0
Line 297
  ( always {!<=-1,!>=2}
  "bitfields8" always "bitfields8"
  false always 0
  false always 0
Line 298
  ( always {!<=-1,!>=2}
  "bitfields9" always "bitfields9"
  false always 0
  false always 0
Line 299
  ( always {!<=-1,!>=2}
  "bitfields10" always "bitfields10"
  false always 0
  false always 0
Line 300
  ( always {!<=-1,!>=2}
  "bitfields12" always "bitfields12"
  false always 0
  false always 0
Line 301
  ( always {!<=-1,!>=2}
  "bitfields13" always "bitfields13"
  false always 0
  false always 0
Line 302
  ( always {!<=-1,!>=2}
  "bitfields14" always "bitfields14"
  false always 0
  false always 0
Line 303
  ( always {!<=-1,!>=2}
  "bitfields15" always "bitfields15"
  false always 0
  false always 0
Line 304
  ( always {!<=-1,!>=2}
  "bitfields16" always "bitfields16"
  false always 0
  false always 0
Line 306
  ( always {!<=-1,!>=2}
  "simplifyNamespaceStd" always "simplifyNamespaceStd"
  false always 0
  false always 0
Line 308
  ( always {!<=-1,!>=2}
  "microsoftMemory" always "microsoftMemory"
  false always 0
  false always 0
Line 309
  ( always {!<=-1,!>=2}
  "microsoftString" always "microsoftString"
  false always 0
  false always 0
Line 311
  ( always {!<=-1,!>=2}
  "borland" always "borland"
  false always 0
  false always 0
Line 313
  ( always {!<=-1,!>=2}
  "simplifyQtSignalsSlots1" always "simplifyQtSignalsSlots1"
  false always 0
  false always 0
Line 314
  ( always {!<=-1,!>=2}
  "simplifyQtSignalsSlots2" always "simplifyQtSignalsSlots2"
  false always 0
  false always 0
Line 316
  ( always {!<=-1,!>=2}
  "simplifySQL" always "simplifySQL"
  false always 0
  false always 0
Line 318
  ( always {!<=-1,!>=2}
  "simplifyCAlternativeTokens" always "simplifyCAlternativeTokens"
  false always 0
  false always 0
Line 321
  ( always {!<=-1,!>=2}
  "simplifyRoundCurlyParentheses" always "simplifyRoundCurlyParentheses"
  false always 0
  false always 0
Line 323
  ( always {!<=-1,!>=2}
  "simplifyOperatorName1" always "simplifyOperatorName1"
  false always 0
  false always 0
Line 324
  ( always {!<=-1,!>=2}
  "simplifyOperatorName2" always "simplifyOperatorName2"
  false always 0
  false always 0
Line 325
  ( always {!<=-1,!>=2}
  "simplifyOperatorName3" always "simplifyOperatorName3"
  false always 0
  false always 0
Line 326
  ( always {!<=-1,!>=2}
  "simplifyOperatorName4" always "simplifyOperatorName4"
  false always 0
  false always 0
Line 327
  ( always {!<=-1,!>=2}
  "simplifyOperatorName5" always "simplifyOperatorName5"
  false always 0
  false always 0
Line 328
  ( always {!<=-1,!>=2}
  "simplifyOperatorName6" always "simplifyOperatorName6"
  false always 0
  false always 0
Line 329
  ( always {!<=-1,!>=2}
  "simplifyOperatorName7" always "simplifyOperatorName7"
  false always 0
  false always 0
Line 330
  ( always {!<=-1,!>=2}
  "simplifyOperatorName8" always "simplifyOperatorName8"
  false always 0
  false always 0
Line 331
  ( always {!<=-1,!>=2}
  "simplifyOperatorName9" always "simplifyOperatorName9"
  false always 0
  false always 0
Line 332
  ( always {!<=-1,!>=2}
  "simplifyOperatorName10" always "simplifyOperatorName10"
  false always 0
  false always 0
Line 333
  ( always {!<=-1,!>=2}
  "simplifyOperatorName11" always "simplifyOperatorName11"
  false always 0
  false always 0
Line 334
  ( always {!<=-1,!>=2}
  "simplifyOperatorName12" always "simplifyOperatorName12"
  false always 0
  false always 0
Line 335
  ( always {!<=-1,!>=2}
  "simplifyOperatorName13" always "simplifyOperatorName13"
  false always 0
  false always 0
Line 336
  ( always {!<=-1,!>=2}
  "simplifyOperatorName14" always "simplifyOperatorName14"
  false always 0
  false always 0
Line 337
  ( always {!<=-1,!>=2}
  "simplifyOperatorName15" always "simplifyOperatorName15"
  false always 0
  false always 0
Line 338
  ( always {!<=-1,!>=2}
  "simplifyOperatorName16" always "simplifyOperatorName16"
  false always 0
  false always 0
Line 339
  ( always {!<=-1,!>=2}
  "simplifyOperatorName17" always "simplifyOperatorName17"
  false always 0
  false always 0
Line 340
  ( always {!<=-1,!>=2}
  "simplifyOperatorName18" always "simplifyOperatorName18"
  false always 0
  false always 0
Line 341
  ( always {!<=-1,!>=2}
  "simplifyOperatorName19" always "simplifyOperatorName19"
  false always 0
  false always 0
Line 342
  ( always {!<=-1,!>=2}
  "simplifyOperatorName20" always "simplifyOperatorName20"
  false always 0
  false always 0
Line 343
  ( always {!<=-1,!>=2}
  "simplifyOperatorName21" always "simplifyOperatorName21"
  false always 0
  false always 0
Line 344
  ( always {!<=-1,!>=2}
  "simplifyOperatorName22" always "simplifyOperatorName22"
  false always 0
  false always 0
Line 345
  ( always {!<=-1,!>=2}
  "simplifyOperatorName23" always "simplifyOperatorName23"
  false always 0
  false always 0
Line 346
  ( always {!<=-1,!>=2}
  "simplifyOperatorName24" always "simplifyOperatorName24"
  false always 0
  false always 0
Line 347
  ( always {!<=-1,!>=2}
  "simplifyOperatorName25" always "simplifyOperatorName25"
  false always 0
  false always 0
Line 348
  ( always {!<=-1,!>=2}
  "simplifyOperatorName26" always "simplifyOperatorName26"
  false always 0
  false always 0
Line 349
  ( always {!<=-1,!>=2}
  "simplifyOperatorName27" always "simplifyOperatorName27"
  false always 0
  false always 0
Line 350
  ( always {!<=-1,!>=2}
  "simplifyOperatorName28" always "simplifyOperatorName28"
  false always 0
  false always 0
Line 351
  ( always {!<=-1,!>=2}
  "simplifyOperatorName29" always "simplifyOperatorName29"
  false always 0
  false always 0
Line 352
  ( always {!<=-1,!>=2}
  "simplifyOperatorName31" always "simplifyOperatorName31"
  false always 0
  false always 0
Line 353
  ( always {!<=-1,!>=2}
  "simplifyOperatorName32" always "simplifyOperatorName32"
  false always 0
  false always 0
Line 355
  ( always {!<=-1,!>=2}
  "simplifyOverloadedOperators1" always "simplifyOverloadedOperators1"
  false always 0
  false always 0
Line 356
  ( always {!<=-1,!>=2}
  "simplifyOverloadedOperators2" always "simplifyOverloadedOperators2"
  false always 0
  false always 0
Line 357
  ( always {!<=-1,!>=2}
  "simplifyOverloadedOperators3" always "simplifyOverloadedOperators3"
  false always 0
  false always 0
Line 359
  ( always {!<=-1,!>=2}
  "simplifyNullArray" always "simplifyNullArray"
  false always 0
  false always 0
Line 362
  ( always {!<=-1,!>=2}
  "removeMacrosInGlobalScope" always "removeMacrosInGlobalScope"
  false always 0
  false always 0
Line 363
  ( always {!<=-1,!>=2}
  "removeMacroInVarDecl" always "removeMacroInVarDecl"
  false always 0
  false always 0
Line 365
  ( always {!<=-1,!>=2}
  "addSemicolonAfterUnknownMacro" always "addSemicolonAfterUnknownMacro"
  false always 0
  false always 0
Line 368
  ( always {!<=-1,!>=2}
  "multipleAssignment" always "multipleAssignment"
  false always 0
  false always 0
Line 370
  ( always {!<=-1,!>=2}
  "platformWin32A" always "platformWin32A"
  false always 0
  false always 0
Line 371
  ( always {!<=-1,!>=2}
  "platformWin32W" always "platformWin32W"
  false always 0
  false always 0
Line 372
  ( always {!<=-1,!>=2}
  "platformWin32AStringCat" always "platformWin32AStringCat"
  false always 0
  false always 0
Line 373
  ( always {!<=-1,!>=2}
  "platformWin32WStringCat" always "platformWin32WStringCat"
  false always 0
  false always 0
Line 374
  ( always {!<=-1,!>=2}
  "platformWinWithNamespace" always "platformWinWithNamespace"
  false always 0
  false always 0
Line 376
  ( always {!<=-1,!>=2}
  "simplifyStaticConst" always "simplifyStaticConst"
  false always 0
  false always 0
Line 378
  ( always {!<=-1,!>=2}
  "simplifyCPPAttribute" always "simplifyCPPAttribute"
  false always 0
  false always 0
Line 380
  ( always {!<=-1,!>=2}
  "simplifyCaseRange" always "simplifyCaseRange"
  false always 0
  false always 0
Line 382
  ( always {!<=-1,!>=2}
  "simplifyEmptyNamespaces" always "simplifyEmptyNamespaces"
  false always 0
  false always 0
Line 384
  ( always {!<=-1,!>=2}
  "compileLimits" always "compileLimits"
  false always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
  "prepareTernaryOpForAST" always "prepareTernaryOpForAST"
  false always 0
  false always 0
Line 389
  ( always {!<=-1,!>=2}
  "astexpr" always "astexpr"
  false always 0
  false always 0
Line 390
  ( always {!<=-1,!>=2}
  "astexpr2" always "astexpr2"
  false always 0
  false always 0
Line 391
  ( always {!<=-1,!>=2}
  "astpar" always "astpar"
  false always 0
  false always 0
Line 392
  ( always {!<=-1,!>=2}
  "astnewdelete" always "astnewdelete"
  false always 0
  false always 0
Line 393
  ( always {!<=-1,!>=2}
  "astbrackets" always "astbrackets"
  false always 0
  false always 0
Line 394
  ( always {!<=-1,!>=2}
  "astunaryop" always "astunaryop"
  false always 0
  false always 0
Line 395
  ( always {!<=-1,!>=2}
  "astfunction" always "astfunction"
  false always 0
  false always 0
Line 396
  ( always {!<=-1,!>=2}
  "asttemplate" always "asttemplate"
  false always 0
  false always 0
Line 397
  ( always {!<=-1,!>=2}
  "astcast" always "astcast"
  false always 0
  false always 0
Line 398
  ( always {!<=-1,!>=2}
  "astlambda" always "astlambda"
  false always 0
  false always 0
Line 399
  ( always {!<=-1,!>=2}
  "astcase" always "astcase"
  false always 0
  false always 0
Line 400
  ( always {!<=-1,!>=2}
  "astrefqualifier" always "astrefqualifier"
  false always 0
  false always 0
Line 401
  ( always {!<=-1,!>=2}
  "astvardecl" always "astvardecl"
  false always 0
  false always 0
Line 402
  ( always {!<=-1,!>=2}
  "astnewscoped" always "astnewscoped"
  false always 0
  false always 0
Line 404
  ( always {!<=-1,!>=2}
  "startOfExecutableScope" always "startOfExecutableScope"
  false always 0
  false always 0
Line 406
  ( always {!<=-1,!>=2}
  "removeMacroInClassDef" always "removeMacroInClassDef"
  false always 0
  false always 0
Line 408
  ( always {!<=-1,!>=2}
  "sizeofAddParentheses" always "sizeofAddParentheses"
  false always 0
  false always 0
Line 410
  ( always {!<=-1,!>=2}
  "reportUnknownMacros" always "reportUnknownMacros"
  false always 0
  false always 0
Line 414
  ( always {!<=-1,!>=2}
  "findGarbageCode" always "findGarbageCode"
  false always 0
  false always 0
Line 415
  ( always {!<=-1,!>=2}
  "checkEnableIf" always "checkEnableIf"
  false always 0
  false always 0
Line 416
  ( always {!<=-1,!>=2}
  "checkTemplates" always "checkTemplates"
  false always 0
  false always 0
Line 417
  ( always {!<=-1,!>=2}
  "checkNamespaces" always "checkNamespaces"
  false always 0
  false always 0
Line 418
  ( always {!<=-1,!>=2}
  "checkLambdas" always "checkLambdas"
  false always 0
  false always 0
Line 419
  ( always {!<=-1,!>=2}
  "checkIfCppCast" always "checkIfCppCast"
  false always 0
  false always 0
Line 420
  ( always {!<=-1,!>=2}
  "checkRefQualifiers" always "checkRefQualifiers"
  false always 0
  false always 0
Line 421
  ( always {!<=-1,!>=2}
  "checkConditionBlock" always "checkConditionBlock"
  false always 0
  false always 0
Line 422
  ( always {!<=-1,!>=2}
  "checkUnknownCircularVar" always "checkUnknownCircularVar"
  false always 0
  false always 0
Line 425
  ( always {!<=-1,!>=2}
  "noCrash1" always "noCrash1"
  false always 0
  false always 0
Line 426
  ( always {!<=-1,!>=2}
  "noCrash2" always "noCrash2"
  false always 0
  false always 0
Line 427
  ( always {!<=-1,!>=2}
  "noCrash3" always "noCrash3"
  false always 0
  false always 0
Line 428
  ( always {!<=-1,!>=2}
  "noCrash4" always "noCrash4"
  false always 0
  false always 0
Line 431
  ( always {!<=-1,!>=2}
  "checkConfiguration" always "checkConfiguration"
  false always 0
  false always 0
Line 433
  ( always {!<=-1,!>=2}
  "unknownType" always "unknownType"
  false always 0
  false always 0
Line 435
  ( always {!<=-1,!>=2}
  "unknownMacroBeforeReturn" always "unknownMacroBeforeReturn"
  false always 0
  false always 0
Line 437
  ( always {!<=-1,!>=2}
  "cppcast" always "cppcast"
  false always 0
  false always 0
Line 439
  ( always {!<=-1,!>=2}
  "checkHeader1" always "checkHeader1"
  false always 0
  false always 0
Line 441
  ( always {!<=-1,!>=2}
  "removeExtraTemplateKeywords" always "removeExtraTemplateKeywords"
  false always 0
  false always 0
Line 443
  ( always {!<=-1,!>=2}
  "removeAlignas1" always "removeAlignas1"
  false always 0
  false always 0
Line 444
  ( always {!<=-1,!>=2}
  "removeAlignas2" always "removeAlignas2"
  false always 0
  false always 0
Line 446
  ( always {!<=-1,!>=2}
  "simplifyCoroutines" always "simplifyCoroutines"
  false always 0
  false always 0
Line 448
  ( always {!<=-1,!>=2}
  "simplifySpaceshipOperator" always "simplifySpaceshipOperator"
  false always 0
  false always 0
Line 450
  ( always {!<=-1,!>=2}
  "simplifyIfSwitchForInit1" always "simplifyIfSwitchForInit1"
  false always 0
  false always 0
Line 451
  ( always {!<=-1,!>=2}
  "simplifyIfSwitchForInit2" always "simplifyIfSwitchForInit2"
  false always 0
  false always 0
Line 452
  ( always {!<=-1,!>=2}
  "simplifyIfSwitchForInit3" always "simplifyIfSwitchForInit3"
  false always 0
  false always 0
Line 453
  ( always {!<=-1,!>=2}
  "simplifyIfSwitchForInit4" always "simplifyIfSwitchForInit4"
  false always 0
  false always 0
Line 454
  ( always {!<=-1,!>=2}
  "simplifyIfSwitchForInit5" always "simplifyIfSwitchForInit5"
  false always 0
  false always 0
Line 456
  ( always {!<=-1,!>=2}
  "cpp20_default_bitfield_initializer" always "cpp20_default_bitfield_initializer"
  false always 0
  false always 0
Line 460
  , always 1
  expand always {!<=-1,!>=2}
  = always 1
  true always 1
  , always "test.cpp"
  = always "test.cpp"
  "test.cpp" always "test.cpp"
  , always 1
  cpp11 always {!<=-1,!>=2}
  = always 1
  true always 1
Line 461
  "" always ""
Line 463
  = always 1
  true always 1
Line 465
  cpp11 {!<=-1,!>=2,1@230,0@231}
Line 468
  & {lifetime[Address]=(settings1),!0}
  this always !0
Line 469
  code possible {"static_assert( alignof( VertexC ) == 4 );"@2,"alignas(float) unsigned char c[sizeof(float)];"@3,"typename GridView::template Codim<0>::Iterator iterator;"@4,"typename GridView::template Codim<0>::Iterator it = gv.template begin<0>();"@5,"int f() { X return 0; }"@8,"static int foo() {\n    zval ref ;\n    p = &(ref).value;\n    return result ;\n}\n"@10,"void a(X<int> x, typename Y1::Y2<int, A::B::C, 2> y, Z z = []{});"@11,"class a {\npublic:\n  enum b {};\n};\nstruct c;\ntemplate <class> class d {\n  d(const int &, a::b, double, double);\n  d(const d &);\n};\ntemplate <> d<int>::d(const int &, a::b, double, double);\ntemplate <> d<int>::d(const d &) {}\ntemplate <> d<c>::d(const d &) {}\n"@12,"struct A {\n  A( const std::string &name =  );\n};\nA::A( const std::string &name ) { return; }\n"@13,"void execute() {\n    const auto &bias = GEMM_CTX_ARG_STORAGE(bias);\n    auto &c = GEMM_CTX_ARG_STORAGE(c);\n}\n"@14}
Line 470
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testtokenize.cpp"@2,"cppcheck-2.8/test/testtokenize.cpp"@3,"cppcheck-2.8/test/testtokenize.cpp"@4,"cppcheck-2.8/test/testtokenize.cpp"@5,"cppcheck-2.8/test/testtokenize.cpp"@8,"cppcheck-2.8/test/testtokenize.cpp"@10,"cppcheck-2.8/test/testtokenize.cpp"@11,"cppcheck-2.8/test/testtokenize.cpp"@12,"cppcheck-2.8/test/testtokenize.cpp"@13,"cppcheck-2.8/test/testtokenize.cpp"@14}
  linenr inconclusive {7253@2,7247@3,7237@4,7241@5,7161@8,7113@10,7108@11,7092@12,7083@13,7076@14}
  filename inconclusive {"test.c"@90,"test.c"@109,"test.cpp"@230,"test.cpp"@231,"test.c"@232,"test.cpp"@233,"test.cpp"@234,"test.cpp"@235,"test.cpp"@236,"test.cpp"@237}
Line 474
  "" always ""
Line 477
  line possible size=0
Line 478
  ( always !<=-1
  "valueflow.cpp" always "valueflow.cpp"
  == always {!<=-1,!>=2}
Line 479
  "\n" always "\n"
Line 483
  false always 0
  expand always {!<=-1,!>=2}
  false always 0
  true always 1
  false always 0
  nullptr always 0
  nullptr always 0
Line 485
  "" always ""
Line 489
  , always 1
  expand always {!<=-1,!>=2}
  = always 1
  true always 1
  , always "test.cpp"
  = always "test.cpp"
  "test.cpp" always "test.cpp"
  , always 1
  cpp11 always {!<=-1,!>=2}
  = always 1
  true always 1
Line 490
  "" always ""
Line 492
  = always 1
  true always 1
Line 494
  cpp11 always {!<=-1,!>=2}
Line 497
  & {lifetime[Address]=(settings_windows),!0}
  this always !0
Line 498
  code possible {"UINT32 a; ::UINT32 b; foo::UINT32 c;"@251,"LPCVOID a; ::LPCVOID b; foo::LPCVOID c;"@252,"TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");"@253,"TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");"@254,"wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;TBYTE tbyte;void foo() {    TCHAR tc = _T(\'c\');    TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}"@255,"wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;void foo() {    TCHAR tc = _T(\'c\');     TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}TBYTE tbyte;","BOOL f;BOOLEAN g;BYTE h;CHAR i;DWORD j;FLOAT k;INT l;INT32 m;INT64 n;LONG o;SHORT p;UCHAR q;UINT r;ULONG s;USHORT t;WORD u;VOID *v;LPBOOL w;PBOOL x;LPBYTE y;PBOOLEAN z;PBYTE A;LPCSTR B;PCSTR C;LPCVOID D;LPDWORD E;LPINT F;PINT G;LPLONG H;PLONG I;LPSTR J;PSTR K;PCHAR L;LPVOID M;PVOID N;BOOL _bool;HFILE hfile;LONG32 long32;LCID lcid;LCTYPE lctype;LGRPID lgrpid;LONG64 long64;PUCHAR puchar;LPCOLORREF lpcolorref;PDWORD pdword;PULONG pulong;SERVICE_STATUS_HANDLE service_status_hanlde;SC_LOCK sc_lock;SC_HANDLE sc_handle;HACCEL haccel;HCONV hconv;HCONVLIST hconvlist;HDDEDATA hddedata;HDESK hdesk;HDROP hdrop;HDWP hdwp;HENHMETAFILE henhmetafile;HHOOK hhook;HKL hkl;HMONITOR hmonitor;HSZ hsz;HWINSTA hwinsta;PWCHAR pwchar;PUSHORT pushort;LANGID langid;DWORD64 dword64;ULONG64 ulong64;LPWSTR lpcwstr;LPCWSTR lpcwstr;LPHANDLE lpHandle;PCWSTR pcwStr;PDWORDLONG pdWordLong;PDWORD_PTR pdWordPtr;PDWORD32 pdWord32;PDWORD64 pdWord64;LONGLONG ll;USN usn;PULONG64 puLong64;PULONG32 puLong32;PFLOAT ptrToFloat;"@1,"struct A { __int8 x : 3; };"@195,"struct A { __int16 x : 3; };"@196,"struct A { __int32 x : 3; };"@197}
Line 499
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testtokenize.cpp"@251,"cppcheck-2.8/test/testtokenize.cpp"@252,"cppcheck-2.8/test/testtokenize.cpp"@253,"cppcheck-2.8/test/testtokenize.cpp"@254,"cppcheck-2.8/test/testtokenize.cpp"@255,"cppcheck-2.8/test/testtokenize.cpp","cppcheck-2.8/test/testtokenize.cpp"@1,"cppcheck-2.8/test/testtokenize.cpp"@2,"cppcheck-2.8/test/testtokenize.cpp"@3,"cppcheck-2.8/test/testtokenize.cpp"@195}
  linenr inconclusive {5624@251,5628@252,5618@253,5612@254,5606@255,5560,5511@1,5513@2,5514@3,4225@195}
  filename possible "test.cpp"
Line 503
  "" always ""
Line 506
  line possible size=0
Line 507
  ( always !<=-1
  "valueflow.cpp" always "valueflow.cpp"
  == always {!<=-1,!>=2}
Line 508
  "\n" always "\n"
Line 512
  false always 0
  expand always {!<=-1,!>=2}
  false always 0
  true always 1
  false always 0
  nullptr always 0
  nullptr always 0
Line 514
  "" always ""
Line 517
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 518
  "" always ""
Line 521
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 522
  code possible {";x<=>y;"@1,"auto operator<=>();"@28,"; template <typename... a> uint8_t b(std::tuple<uint8_t> d) {\n  std::tuple<a...> c{std::move(d)};\n  return std::get<0>(c);\n}"@91,"int g(int);\ntemplate <class F, class... Ts> auto h(F f, Ts... xs) {\n    auto e = f(g(xs)...);\n    return e;\n}"@92,"_Pragma(\"abc\") int x;"@109}
Line 523
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testtokenize.cpp"@1,"cppcheck-2.8/test/testtokenize.cpp"@28,"cppcheck-2.8/test/testtokenize.cpp"@91,"cppcheck-2.8/test/testtokenize.cpp"@92,"cppcheck-2.8/test/testtokenize.cpp"@109,"cppcheck-2.8/test/testtokenize.cpp"@110,"cppcheck-2.8/test/testtokenize.cpp"@111,"cppcheck-2.8/test/testtokenize.cpp"@112}
  line inconclusive {7277@1,5238@28,933@91,938@92,882@109,884@110,887@111,889@112}
  filename inconclusive {"test.c"@109,"test.c"@110,"test.cpp"@111,"test.cpp"@112}
Line 524
  ! always {!<=-1,!>=2}
Line 525
  "" always ""
Line 526
  false always 0
  true always 1
  false always 0
  true always 1
  false always 0
  nullptr always 0
  nullptr always 0
Line 530
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 531
  "" always ""
Line 536
  & {lifetime[Address]=(settings2),!0}
  this always !0
Line 537
  code possible {"int f() { (*f)(); }"@46,"int f() { return (*f)(); }"@47,"int f() { throw (*f)(); }"@48,"int (*f)() throw(int);"@49,"void (X::*y)();"@50,"void (*fp(void))(int) {}"@51,"std::string (*fp(void))(int);"@52,";void (*fp[])(int a) = {0,0,0};"@53,"struct S\n{\n    typedef void (*FP)();\n    virtual FP getFP();\n};"@54,"struct Container {\n  Container();\n  int* mElements;\n};\nContainer::Container() : mElements(nullptr) {}\nContainer intContainer;"@135}
Line 538
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testtokenize.cpp"@46,"cppcheck-2.8/test/testtokenize.cpp"@47,"cppcheck-2.8/test/testtokenize.cpp"@48,"cppcheck-2.8/test/testtokenize.cpp"@49,"cppcheck-2.8/test/testtokenize.cpp"@50,"cppcheck-2.8/test/testtokenize.cpp"@51,"cppcheck-2.8/test/testtokenize.cpp"@52,"cppcheck-2.8/test/testtokenize.cpp"@53,"cppcheck-2.8/test/testtokenize.cpp"@54,"cppcheck-2.8/test/testtokenize.cpp"@135}
  line inconclusive {3586@46,3590@47,3594@48,3580@49,3574@50,3564@51,3568@52,3558@53,3552@54,759@135}
Line 541
  true always 1
  true always 1
  true always 1
  true always 1
  false always 0
Line 545
  42 always 42
  = always "void f ( )\n{ if ( p . y ( ) > yof ) { } }"
  "void f ( )\n{ if ( p . y ( ) > yof ) { } }" always "void f ( )\n{ if ( p . y ( ) > yof ) { } }"
Line 547
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  547 always 547
  code always "void f ( )\n{ if ( p . y ( ) > yof ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  547 always 547
  code always "void f ( )\n{ if ( p . y ( ) > yof ) { } }"
Line 551
  23 always 23
  = always "{ sizeof a, sizeof b }"
  "{ sizeof a, sizeof b }" always "{ sizeof a, sizeof b }"
Line 552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  552 always 552
  "{ sizeof ( a ) , sizeof ( b ) }" always "{ sizeof ( a ) , sizeof ( b ) }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  552 always 552
  code always "{ sizeof a, sizeof b }"
Line 556
  39 always 39
  = always "class foo\n{\npublic:\n    const int i;\n}"
  "class foo\n{\npublic:\n    const int i;\n}" always "class foo\n{\npublic:\n    const int i;\n}"
Line 561
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  561 always 561
  "class foo\n{\npublic:\nconst int i ;\n}" always "class foo\n{\npublic:\nconst int i ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  561 always 561
  code always "class foo\n{\npublic:\n    const int i;\n}"
Line 566
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  566 always 566
  "" always ""
Line 571
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  571 always 571
  "; + 1E3 ;" always "; + 1E3 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  571 always 571
  "; +1E3 ;" always "; +1E3 ;"
Line 572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  572 always 572
  "; 1E-2 ;" always "; 1E-2 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  572 always 572
  "; 1E-2 ;" always "; 1E-2 ;"
Line 576
  46 always 46
  = always "void f() {\n    int x1 = 1;\n    int x2(x1);\n}\n"
  "void f() {\n    int x1 = 1;\n    int x2(x1);\n}\n" always "void f() {\n    int x1 = 1;\n    int x2(x1);\n}\n"
Line 580
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  580 always 580
  "void f ( ) {\nint x1 ; x1 = 1 ;\nint x2 ; x2 = x1 ;\n}" always "void f ( ) {\nint x1 ; x1 = 1 ;\nint x2 ; x2 = x1 ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  580 always 580
  code always "void f() {\n    int x1 = 1;\n    int x2(x1);\n}\n"
Line 585
  47 always 47
  = always "void f() {\n    int x1(g());\n    int x2(x1);\n}\n"
  "void f() {\n    int x1(g());\n    int x2(x1);\n}\n" always "void f() {\n    int x1(g());\n    int x2(x1);\n}\n"
Line 589
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  589 always 589
  "1: void f ( ) {\n2: int x1@1 ; x1@1 = g ( ) ;\n3: int x2@2 ; x2@2 = x1@1 ;\n4: }\n" always "1: void f ( ) {\n2: int x1@1 ; x1@1 = g ( ) ;\n3: int x2@2 ; x2@2 = x1@1 ;\n4: }\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  589 always 589
  code always "void f() {\n    int x1(g());\n    int x2(x1);\n}\n"
Line 597
  78 always 78
  = always "typedef void (*fp)();\ntypedef fp (*fpp)();\nvoid f() {\n    fpp x = (fpp)f();\n}"
  "typedef void (*fp)();\ntypedef fp (*fpp)();\nvoid f() {\n    fpp x = (fpp)f();\n}" always "typedef void (*fp)();\ntypedef fp (*fpp)();\nvoid f() {\n    fpp x = (fpp)f();\n}"
Line 602
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  602 always 602
  code always "typedef void (*fp)();\ntypedef fp (*fpp)();\nvoid f() {\n    fpp x = (fpp)f();\n}"
Line 603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  603 always 603
  "" always ""
Line 607
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  607 always 607
  "X * sizeof ( Y ( ) ) ;" always "X * sizeof ( Y ( ) ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  607 always 607
  "X * sizeof(Y());" always "X * sizeof(Y());"
Line 612
  50 always 50
  = always "@implementation\n-(Foo *)foo: (Bar *)bar\n{ }\n@end\n"
  "@implementation\n-(Foo *)foo: (Bar *)bar\n{ }\n@end\n" always "@implementation\n-(Foo *)foo: (Bar *)bar\n{ }\n@end\n"
Line 616
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  616 always 616
  code always "@implementation\n-(Foo *)foo: (Bar *)bar\n{ }\n@end\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  616 always 616
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  616 always 616
  false always 0
Line 621
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  621 always 621
  "; 0x10 ;" always "; 0x10 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  621 always 621
  ";0x10;" always ";0x10;"
Line 622
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  622 always 622
  "; 0X10 ;" always "; 0X10 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  622 always 622
  ";0X10;" always ";0X10;"
Line 623
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  623 always 623
  "; 0444 ;" always "; 0444 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  623 always 623
  ";0444;" always ";0444;"
Line 628
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  628 always 628
  "; 0xFFFFFF ;" always "; 0xFFFFFF ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  628 always 628
  ";0xFFFFFF;" always ";0xFFFFFF;"
Line 629
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  629 always 629
  "; 0xFFFFFFu ;" always "; 0xFFFFFFu ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  629 always 629
  ";0xFFFFFFu;" always ";0xFFFFFFu;"
Line 630
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  630 always 630
  "; 0xFFFFFFul ;" always "; 0xFFFFFFul ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  630 always 630
  ";0xFFFFFFul;" always ";0xFFFFFFul;"
Line 633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  633 always 633
  "; 0xFFFFFFFF ;" always "; 0xFFFFFFFF ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  633 always 633
  ";0xFFFFFFFF;" always ";0xFFFFFFFF;"
Line 634
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  634 always 634
  "; 0xFFFFFFFFu ;" always "; 0xFFFFFFFFu ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  634 always 634
  ";0xFFFFFFFFu;" always ";0xFFFFFFFFu;"
Line 635
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  635 always 635
  "; 0xFFFFFFFFul ;" always "; 0xFFFFFFFFul ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  635 always 635
  ";0xFFFFFFFFul;" always ";0xFFFFFFFFul;"
Line 640
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  640 always 640
  "0.125 ;" always "0.125 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  640 always 640
  ".125;" always ".125;"
Line 641
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  641 always 641
  "005.125 ;" always "005.125 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  641 always 641
  "005.125;" always "005.125;"
Line 645
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  645 always 645
  "class B : private :: A { } ;" always "class B : private :: A { } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  645 always 645
  "class B : private ::A { };" always "class B : private ::A { };"
Line 649
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  649 always 649
  "( X && Y ) ;" always "( X && Y ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  649 always 649
  "(X&&Y);" always "(X&&Y);"
Line 654
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  654 always 654
  "x < () <" always "x < () <"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  654 always 654
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  654 always 654
  false always 0
Line 657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  657 always 657
  "void a ( Fred * f ) { for ( ; n < f . x ( ) ; ) { } }" always "void a ( Fred * f ) { for ( ; n < f . x ( ) ; ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  657 always 657
  "void a(Fred* f) MACRO { for (;n < f->x();) {} }" always "void a(Fred* f) MACRO { for (;n < f->x();) {} }"
Line 661
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  661 always 661
  "C :: C ( )\n: v { }\n{\nfor ( int dim = 0 ; dim < v . size ( ) ; ++ dim ) {\nv [ dim ] . f ( ) ;\n}\n} ;" always "C :: C ( )\n: v { }\n{\nfor ( int dim = 0 ; dim < v . size ( ) ; ++ dim ) {\nv [ dim ] . f ( ) ;\n}\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  661 always 661
  "C::C()\n:v{}\n{\n    for (int dim = 0; dim < v.size(); ++dim) {\n        v[dim]->f();\n    }\n};" always "C::C()\n:v{}\n{\n    for (int dim = 0; dim < v.size(); ++dim) {\n        v[dim]->f();\n    }\n};"
Line 678
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  678 always 678
  "0x0E - 7 ;" always "0x0E - 7 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  678 always 678
  "0x0E-7;" always "0x0E-7;"
Line 682
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  682 always 682
  "a$b" always "a$b"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  682 always 682
  "a$b" always "a$b"
Line 683
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  683 always 683
  "a $b\nc" always "a $b\nc"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  683 always 683
  "a $b\nc" always "a $b\nc"
Line 684
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  684 always 684
  "a = $0 ;" always "a = $0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  684 always 684
  "a = $0;" always "a = $0;"
Line 685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  685 always 685
  "a$ ++ ;" always "a$ ++ ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  685 always 685
  "a$++;" always "a$++;"
Line 686
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  686 always 686
  "$if ( ! p )" always "$if ( ! p )"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  686 always 686
  "$if(!p)" always "$if(!p)"
Line 691
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  691 always 691
  "f ( struct { int typedef T x ; } ) { }" always "f ( struct { int typedef T x ; } ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  691 always 691
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  691 always 691
  false always 0
Line 696
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  696 always 696
  "class x { protected : template < int y = } ;" always "class x { protected : template < int y = } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  696 always 696
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  696 always 696
  false always 0
Line 701
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  701 always 701
  "struct except_spec_d_good : except_spec_a, except_spec_b {\n~except_spec_d_good();\n};\nstruct S { S(); };\nS::S() __attribute((pure)) = default;" always "struct except_spec_d_good : except_spec_a, except_spec_b {\n~except_spec_d_good();\n};\nstruct S { S(); };\nS::S() __attribute((pure)) = default;"
Line 709
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  709 always 709
  "static unsigned int re_string_context_at (const re_string_t *input, int idx, int eflags) internal_function __attribute__ ((pure));" always "static unsigned int re_string_context_at (const re_string_t *input, int idx, int eflags) internal_function __attribute__ ((pure));"
Line 714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  714 always 714
  "struct TTestClass { TTestClass ( ) { }\nvoid SetFunction ( Other ( * m_f ) ( ) ) { }\n} ;" always "struct TTestClass { TTestClass ( ) { }\nvoid SetFunction ( Other ( * m_f ) ( ) ) { }\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  714 always 714
  "struct TTestClass { TTestClass() { }\n    void SetFunction(Other(*m_f)()) { }\n};" always "struct TTestClass { TTestClass() { }\n    void SetFunction(Other(*m_f)()) { }\n};"
Line 721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  721 always 721
  "struct TTestClass { TTestClass ( ) { }\nvoid SetFunction ( Other ( * m_f ) ( ) ) ;\n} ;" always "struct TTestClass { TTestClass ( ) { }\nvoid SetFunction ( Other ( * m_f ) ( ) ) ;\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  721 always 721
  "struct TTestClass { TTestClass() { }\n    void SetFunction(Other(*m_f)());\n};" always "struct TTestClass { TTestClass() { }\n    void SetFunction(Other(*m_f)());\n};"
Line 732
  = always "void f ( ) { int max_x ; max_x = -10000 << 16 ; }"
  "void f ( ) { int max_x ; max_x = -10000 << 16 ; }" always "void f ( ) { int max_x ; max_x = -10000 << 16 ; }"
Line 733
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  733 always 733
  code always "void f ( ) { int max_x ; max_x = -10000 << 16 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  733 always 733
  code always "void f ( ) { int max_x ; max_x = -10000 << 16 ; }"
Line 738
  = always "template<typename T, typename A = Alloc<T>> struct vector {};\nvoid z() {\n    vector<int> VI;\n}\n"
  "template<typename T, typename A = Alloc<T>> struct vector {};\nvoid z() {\n    vector<int> VI;\n}\n" always "template<typename T, typename A = Alloc<T>> struct vector {};\nvoid z() {\n    vector<int> VI;\n}\n"
Line 742
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  742 always 742
  code always "template<typename T, typename A = Alloc<T>> struct vector {};\nvoid z() {\n    vector<int> VI;\n}\n"
Line 747
  126 always 126
  = always "struct Container {\n  Container();\n  int* mElements;\n};\nContainer::Container() : mElements(nullptr) {}\nContainer intContainer;"
  "struct Container {\n  Container();\n  int* mElements;\n};\nContainer::Container() : mElements(nullptr) {}\nContainer intContainer;" always "struct Container {\n  Container();\n  int* mElements;\n};\nContainer::Container() : mElements(nullptr) {}\nContainer intContainer;"
Line 753
  162 always 162
  = always "1: struct Container {\n2: Container ( ) ;\n3: int * mElements@1 ;\n4: } ;\n5: Container :: Container ( ) : mElements@1 ( nullptr ) { }\n6: Container intContainer@2 ;\n"
  "1: struct Container {\n2: Container ( ) ;\n3: int * mElements@1 ;\n4: } ;\n5: Container :: Container ( ) : mElements@1 ( nullptr ) { }\n6: Container intContainer@2 ;\n" always "1: struct Container {\n2: Container ( ) ;\n3: int * mElements@1 ;\n4: } ;\n5: Container :: Container ( ) : mElements@1 ( nullptr ) { }\n6: Container intContainer@2 ;\n"
Line 759
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  759 always 759
  exp always "1: struct Container {\n2: Container ( ) ;\n3: int * mElements@1 ;\n4: } ;\n5: Container :: Container ( ) : mElements@1 ( nullptr ) { }\n6: Container intContainer@2 ;\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  759 always 759
  code always "struct Container {\n  Container();\n  int* mElements;\n};\nContainer::Container() : mElements(nullptr) {}\nContainer intContainer;"
Line 762
  171 always 171
  = always "template<class T> struct Container {\n  Container();\n  int* mElements;\n};\ntemplate <class T> Container<T>::Container() : mElements(nullptr) {}\nContainer<int> intContainer;"
  "template<class T> struct Container {\n  Container();\n  int* mElements;\n};\ntemplate <class T> Container<T>::Container() : mElements(nullptr) {}\nContainer<int> intContainer;" always "template<class T> struct Container {\n  Container();\n  int* mElements;\n};\ntemplate <class T> Container<T>::Container() : mElements(nullptr) {}\nContainer<int> intContainer;"
Line 768
  222 always 222
  = always "1: struct Container<int> ;\n2:\n|\n5:\n6: Container<int> intContainer@1 ;\n1: struct Container<int> {\n2: Container<int> ( ) ;\n3: int * mElements@2 ;\n4: } ;\n5: Container<int> :: Container<int> ( ) : mElements@2 ( nullptr ) { }\n"
  "1: struct Container<int> ;\n2:\n|\n5:\n6: Container<int> intContainer@1 ;\n1: struct Container<int> {\n2: Container<int> ( ) ;\n3: int * mElements@2 ;\n4: } ;\n5: Container<int> :: Container<int> ( ) : mElements@2 ( nullptr ) { }\n" always "1: struct Container<int> ;\n2:\n|\n5:\n6: Container<int> intContainer@1 ;\n1: struct Container<int> {\n2: Container<int> ( ) ;\n3: int * mElements@2 ;\n4: } ;\n5: Container<int> :: Container<int> ( ) : mElements@2 ( nullptr ) { }\n"
Line 778
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  778 always 778
  exp always "1: struct Container<int> ;\n2:\n|\n5:\n6: Container<int> intContainer@1 ;\n1: struct Container<int> {\n2: Container<int> ( ) ;\n3: int * mElements@2 ;\n4: } ;\n5: Container<int> :: Container<int> ( ) : mElements@2 ( nullptr ) { }\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  778 always 778
  code always "template<class T> struct Container {\n  Container();\n  int* mElements;\n};\ntemplate <class T> Container<T>::Container() : mElements(nullptr) {}\nContainer<int> intContainer;"
Line 783
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  783 always 783
  "typedef int CRCWord; template<typename T> ::CRCWord const Compute(T const t) { return 0; }" always "typedef int CRCWord; template<typename T> ::CRCWord const Compute(T const t) { return 0; }"
Line 788
  71 always 71
  = always "int foo ( int i ) { return i ? * new int { 5 } : int { i ? 0 : 1 } ; }"
  "int foo ( int i ) { return i ? * new int { 5 } : int { i ? 0 : 1 } ; }" always "int foo ( int i ) { return i ? * new int { 5 } : int { i ? 0 : 1 } ; }"
Line 789
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  789 always 789
  code always "int foo ( int i ) { return i ? * new int { 5 } : int { i ? 0 : 1 } ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  789 always 789
  code always "int foo ( int i ) { return i ? * new int { 5 } : int { i ? 0 : 1 } ; }"
Line 793
  111 always 111
  = always "class name { public: static void init ( ) {} } ; typedef class name N; void foo ( ) { return N :: init ( ) ; }"
  "class name { public: static void init ( ) {} } ; typedef class name N; void foo ( ) { return N :: init ( ) ; }" always "class name { public: static void init ( ) {} } ; typedef class name N; void foo ( ) { return N :: init ( ) ; }"
Line 796
  93 always 93
  = always "class name { public: static void init ( ) { } } ; void foo ( ) { return name :: init ( ) ; }"
  "class name { public: static void init ( ) { } } ; void foo ( ) { return name :: init ( ) ; }" always "class name { public: static void init ( ) { } } ; void foo ( ) { return name :: init ( ) ; }"
Line 798
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  798 always 798
  expC always "class name { public: static void init ( ) { } } ; void foo ( ) { return name :: init ( ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  798 always 798
  codeC always "class name { public: static void init ( ) {} } ; typedef class name N; void foo ( ) { return N :: init ( ) ; }"
Line 799
  112 always 112
  = always "class name { public: static void init ( ) {} } ; typedef struct name N; void foo ( ) { return N :: init ( ) ; }"
  "class name { public: static void init ( ) {} } ; typedef struct name N; void foo ( ) { return N :: init ( ) ; }" always "class name { public: static void init ( ) {} } ; typedef struct name N; void foo ( ) { return N :: init ( ) ; }"
Line 802
  93 always 93
  = always "class name { public: static void init ( ) { } } ; void foo ( ) { return name :: init ( ) ; }"
  "class name { public: static void init ( ) { } } ; void foo ( ) { return name :: init ( ) ; }" always "class name { public: static void init ( ) { } } ; void foo ( ) { return name :: init ( ) ; }"
Line 804
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  804 always 804
  expS always "class name { public: static void init ( ) { } } ; void foo ( ) { return name :: init ( ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  804 always 804
  codeS always "class name { public: static void init ( ) {} } ; typedef struct name N; void foo ( ) { return N :: init ( ) ; }"
Line 808
  56 always 56
  = always "using Binary = std::vector<char>; enum Type { Binary };"
  "using Binary = std::vector<char>; enum Type { Binary };" always "using Binary = std::vector<char>; enum Type { Binary };"
Line 809
  23 always 23
  = always "enum Type { Binary } ;"
  "enum Type { Binary } ;" always "enum Type { Binary } ;"
Line 810
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  810 always 810
  exp always "enum Type { Binary } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  810 always 810
  code always "using Binary = std::vector<char>; enum Type { Binary };"
Line 814
  199 always 199
  = always "template <typename T> class Foo;template <typename T> bool operator!=(const Foo<T> &, const Foo<T> &);template <typename T> class Foo { friend bool operator!= <> (const Foo<T> &, const Foo<T> &); };"
  "template <typename T> class Foo;template <typename T> bool operator!=(const Foo<T> &, const Foo<T> &);template <typename T> class Foo { friend bool operator!= <> (const Foo<T> &, const Foo<T> &); };" always "template <typename T> class Foo;template <typename T> bool operator!=(const Foo<T> &, const Foo<T> &);template <typename T> class Foo { friend bool operator!= <> (const Foo<T> &, const Foo<T> &); };"
Line 817
  231 always 231
  = always "template < typename T > class Foo ; template < typename T > bool operator!= ( const Foo < T > & , const Foo < T > & ) ; template < typename T > class Foo { friend bool operator!= < > ( const Foo < T > & , const Foo < T > & ) ; } ;"
  "template < typename T > class Foo ; template < typename T > bool operator!= ( const Foo < T > & , const Foo < T > & ) ; template < typename T > class Foo { friend bool operator!= < > ( const Foo < T > & , const Foo < T > & ) ; } ;" always "template < typename T > class Foo ; template < typename T > bool operator!= ( const Foo < T > & , const Foo < T > & ) ; template < typename T > class Foo { friend bool operator!= < > ( const Foo < T > & , const Foo < T > & ) ; } ;"
Line 820
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  820 always 820
  exp always "template < typename T > class Foo ; template < typename T > bool operator!= ( const Foo < T > & , const Foo < T > & ) ; template < typename T > class Foo { friend bool operator!= < > ( const Foo < T > & , const Foo < T > & ) ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  820 always 820
  code always "template <typename T> class Foo;template <typename T> bool operator!=(const Foo<T> &, const Foo<T> &);template <typename T> class Foo { friend bool operator!= <> (const Foo<T> &, const Foo<T> &); };"
Line 825
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  825 always 825
  ";using namespace std;" always ";using namespace std;"
  false always 0
  "test.c" always "test.c"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  825 always 825
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  825 always 825
  false always 0
Line 826
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  826 always 826
  ";std::map<int,int> m;" always ";std::map<int,int> m;"
  false always 0
  "test.c" always "test.c"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  826 always 826
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  826 always 826
  false always 0
Line 827
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  827 always 827
  ";template<class T> class X { };" always ";template<class T> class X { };"
  false always 0
  "test.c" always "test.c"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  827 always 827
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  827 always 827
  false always 0
Line 828
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  828 always 828
  "int X<Y>() {};" always "int X<Y>() {};"
  false always 0
  "test.c" always "test.c"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  828 always 828
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  828 always 828
  false always 0
Line 829
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  829 always 829
  "void foo(int i) { reinterpret_cast<char>(i) };" always "void foo(int i) { reinterpret_cast<char>(i) };"
  false always 0
  "test.h" always "test.h"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  829 always 829
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  829 always 829
  false always 0
Line 833
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  833 always 833
  "void f() { [foo bar]; }" always "void f() { [foo bar]; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  833 always 833
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  833 always 833
  false always 0
Line 837
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  837 always 837
  "void f() {switch (n) { case 0: z(); break;}}" always "void f() {switch (n) { case 0: z(); break;}}"
Line 838
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  838 always 838
  "" always ""
Line 840
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  840 always 840
  "void f() {switch (n) { case 0:; break;}}" always "void f() {switch (n) { case 0:; break;}}"
Line 841
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  841 always 841
  "" always ""
Line 844
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  844 always 844
  "void f() {switch (n) { case 0?1:2 : z(); break;}}" always "void f() {switch (n) { case 0?1:2 : z(); break;}}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  844 always 844
  false always 0
Line 848
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  848 always 848
  "void f() {switch (n) { case 0?(1?3:4):2 : z(); break;}}" always "void f() {switch (n) { case 0?(1?3:4):2 : z(); break;}}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  848 always 848
  false always 0
Line 849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  849 always 849
  "" always ""
Line 853
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  853 always 853
  "void f() {switch (n) { case 0?({0;}):1: z(); break;}}" always "void f() {switch (n) { case 0?({0;}):1: z(); break;}}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  853 always 853
  false always 0
Line 854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  854 always 854
  "" always ""
Line 857
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  857 always 857
  "void f() {switch (n) { case b: z(); break;}}" always "void f() {switch (n) { case b: z(); break;}}"
Line 858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  858 always 858
  "" always ""
Line 861
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  861 always 861
  "void f() {switch (n) { case g(): z(); break;}}" always "void f() {switch (n) { case g(): z(); break;}}"
Line 862
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  862 always 862
  "" always ""
Line 865
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  865 always 865
  "void f() {switch (n) { case g[0]: z(); break;}}" always "void f() {switch (n) { case g[0]: z(); break;}}"
Line 866
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  866 always 866
  "" always ""
Line 869
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  869 always 869
  "void f() {switch (n) { case *g: z(); break;}}" always "void f() {switch (n) { case *g: z(); break;}}"
Line 870
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  870 always 870
  "" always ""
Line 873
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  873 always 873
  "void f() {switch (n) { case sqrt(x+y): z(); break;}}" always "void f() {switch (n) { case sqrt(x+y): z(); break;}}"
Line 874
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  874 always 874
  "" always ""
Line 878
  22 always 22
  = always "_Pragma(\"abc\") int x;"
  "_Pragma(\"abc\") int x;" always "_Pragma(\"abc\") int x;"
Line 882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  882 always 882
  "_Pragma ( \"abc\" ) int x ;" always "_Pragma ( \"abc\" ) int x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  882 always 882
  code always "_Pragma(\"abc\") int x;"
  "test.c" always "test.c"
Line 884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  884 always 884
  "int x ;" always "int x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  884 always 884
  code always "_Pragma(\"abc\") int x;"
  "test.c" always "test.c"
Line 887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  887 always 887
  "_Pragma ( \"abc\" ) int x ;" always "_Pragma ( \"abc\" ) int x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  887 always 887
  code always "_Pragma(\"abc\") int x;"
  "test.cpp" always "test.cpp"
Line 889
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  889 always 889
  "int x ;" always "int x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  889 always 889
  code always "_Pragma(\"abc\") int x;"
  "test.cpp" always "test.cpp"
Line 894
  68 always 68
  = always "void f() { for each ( char c in MyString ) { Console::Write(c); } }"
  "void f() { for each ( char c in MyString ) { Console::Write(c); } }" always "void f() { for each ( char c in MyString ) { Console::Write(c); } }"
Line 895
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  895 always 895
  "void f ( ) { asm ( \"char c in MyString\" ) { Console :: Write ( c ) ; } }" always "void f ( ) { asm ( \"char c in MyString\" ) { Console :: Write ( c ) ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  895 always 895
  code always "void f() { for each ( char c in MyString ) { Console::Write(c); } }"
Line 899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  899 always 899
  "void f ( ) { if ( FOO ) { bar ( c ) ; } }" always "void f ( ) { if ( FOO ) { bar ( c ) ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  899 always 899
  "void f() { if constexpr ( FOO ) { bar(c); } }" always "void f() { if constexpr ( FOO ) { bar(c); } }"
Line 903
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  903 always 903
  "; private: ;" always "; private: ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  903 always 903
  ";private:;" always ";private:;"
Line 904
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  904 always 904
  "; protected: ;" always "; protected: ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  904 always 904
  ";protected:;" always ";protected:;"
Line 905
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  905 always 905
  "; public: ;" always "; public: ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  905 always 905
  ";public:;" always ";public:;"
Line 906
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  906 always 906
  "; __published: ;" always "; __published: ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  906 always 906
  ";__published:;" always ";__published:;"
Line 907
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  907 always 907
  "a . public : ;" always "a . public : ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  907 always 907
  "a.public:;" always "a.public:;"
Line 908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  908 always 908
  "void f ( x & = 2 ) ;" always "void f ( x & = 2 ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  908 always 908
  "void f(x &= 2);" always "void f(x &= 2);"
Line 909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  909 always 909
  "const_cast < a * > ( & e )" always "const_cast < a * > ( & e )"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  909 always 909
  "const_cast<a*>(&e)" always "const_cast<a*>(&e)"
Line 913
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  913 always 913
  "i = -12 ;" always "i = -12 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  913 always 913
  "i = -12;" always "i = -12;"
Line 914
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  914 always 914
  "1 - 2 ;" always "1 - 2 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  914 always 914
  "1-2;" always "1-2;"
Line 915
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  915 always 915
  "foo ( -1 ) - 2 ;" always "foo ( -1 ) - 2 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  915 always 915
  "foo(-1)-2;" always "foo(-1)-2;"
Line 916
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  916 always 916
  "int f ( ) { return -2 ; }" always "int f ( ) { return -2 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  916 always 916
  "int f(){return -2;}" always "int f(){return -2;}"
Line 917
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  917 always 917
  "int x [ 2 ] = { -2 , 1 }" always "int x [ 2 ] = { -2 , 1 }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  917 always 917
  "int x[2] = {-2,1}" always "int x[2] = {-2,1}"
Line 919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  919 always 919
  "f ( 123 )" always "f ( 123 )"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  919 always 919
  "f(+123)" always "f(+123)"
Line 925
  10000 always 10000
  'a' always 97
Line 926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  926 always 926
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  926 always 926
  ( {lifetime[Object]=(filedata),!0}
Line 932
  = always 0
  false always 0
Line 933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  933 always 933
  ";" always ";"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  933 always 933
  "; template <typename... a> uint8_t b(std::tuple<uint8_t> d) {\n  std::tuple<a...> c{std::move(d)};\n  return std::get<0>(c);\n}" always "; template <typename... a> uint8_t b(std::tuple<uint8_t> d) {\n  std::tuple<a...> c{std::move(d)};\n  return std::get<0>(c);\n}"
Line 938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  938 always 938
  "int g ( int ) ;" always "int g ( int ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  938 always 938
  "int g(int);\ntemplate <class F, class... Ts> auto h(F f, Ts... xs) {\n    auto e = f(g(xs)...);\n    return e;\n}" always "int g(int);\ntemplate <class F, class... Ts> auto h(F f, Ts... xs) {\n    auto e = f(g(xs)...);\n    return e;\n}"
Line 947
  134 always 134
  = always "; template< typename T, u_int uBAR = 0 >\nclass Foo {\npublic:\n    void FooBar() {\n        new ( (uBAR ? uBAR : sizeof(T))) T;\n    }\n};"
  "; template< typename T, u_int uBAR = 0 >\nclass Foo {\npublic:\n    void FooBar() {\n        new ( (uBAR ? uBAR : sizeof(T))) T;\n    }\n};" always "; template< typename T, u_int uBAR = 0 >\nclass Foo {\npublic:\n    void FooBar() {\n        new ( (uBAR ? uBAR : sizeof(T))) T;\n    }\n};"
Line 956
  = always 0
  false always 0
Line 957
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  957 always 957
  ";" always ";"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  957 always 957
  code always "; template< typename T, u_int uBAR = 0 >\nclass Foo {\npublic:\n    void FooBar() {\n        new ( (uBAR ? uBAR : sizeof(T))) T;\n    }\n};"
Line 959
  = always 1
  true always 1
Line 960
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  960 always 960
  "; template < typename T , u_int uBAR = 0 >\nclass Foo {\npublic:\nvoid FooBar ( ) {\nnew ( uBAR ? uBAR : sizeof ( T ) ) T ;\n}\n} ;" always "; template < typename T , u_int uBAR = 0 >\nclass Foo {\npublic:\nvoid FooBar ( ) {\nnew ( uBAR ? uBAR : sizeof ( T ) ) T ;\n}\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  960 always 960
  code always "; template< typename T, u_int uBAR = 0 >\nclass Foo {\npublic:\n    void FooBar() {\n        new ( (uBAR ? uBAR : sizeof(T))) T;\n    }\n};"
Line 970
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  970 always 970
  "int x ;" always "int x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  970 always 970
  "int x@123;" always "int x@123;"
Line 971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  971 always 971
  "bool x ;" always "bool x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  971 always 971
  "bool x@123:1;" always "bool x@123:1;"
Line 972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  972 always 972
  "char PORTB ; bool PB3 ;" always "char PORTB ; bool PB3 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  972 always 972
  "char PORTB @ 0x10; bool PB3 @ PORTB:3;\n" always "char PORTB @ 0x10; bool PB3 @ PORTB:3;\n"
Line 973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  973 always 973
  "int x ;" always "int x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  973 always 973
  "int x @ (0x1000 + 18);" always "int x @ (0x1000 + 18);"
Line 975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  975 always 975
  "int x [ 10 ] ;" always "int x [ 10 ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  975 always 975
  "int x[10]@0x100;" always "int x[10]@0x100;"
Line 977
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  977 always 977
  "interrupt@ f ( ) { }" always "interrupt@ f ( ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  977 always 977
  "@interrupt f() {}" always "@interrupt f() {}"
Line 981
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  981 always 981
  "asm ( \"mov ax , bx\" ) ;" always "asm ( \"mov ax , bx\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  981 always 981
  "asm { mov ax,bx };" always "asm { mov ax,bx };"
Line 982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  982 always 982
  "asm ( \"mov ax , bx\" ) ;" always "asm ( \"mov ax , bx\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  982 always 982
  "_asm { mov ax,bx };" always "_asm { mov ax,bx };"
Line 983
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  983 always 983
  "asm ( \"mov ax , bx\" ) ;" always "asm ( \"mov ax , bx\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  983 always 983
  "_asm mov ax,bx" always "_asm mov ax,bx"
Line 984
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  984 always 984
  "asm ( \"mov ax , bx\" ) ;" always "asm ( \"mov ax , bx\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  984 always 984
  "__asm { mov ax,bx };" always "__asm { mov ax,bx };"
Line 985
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  985 always 985
  "asm ( \"\"mov ax,bx\"\" ) ;" always "asm ( \"\"mov ax,bx\"\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  985 always 985
  "__asm__ __volatile__ ( \"mov ax,bx\" );" always "__asm__ __volatile__ ( \"mov ax,bx\" );"
Line 986
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  986 always 986
  "asm ( \"_emit 12h\" ) ;" always "asm ( \"_emit 12h\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  986 always 986
  "__asm _emit 12h ;" always "__asm _emit 12h ;"
Line 987
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  987 always 987
  "asm ( \"mov a , b\" ) ;" always "asm ( \"mov a , b\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  987 always 987
  "__asm mov a, b ;" always "__asm mov a, b ;"
Line 988
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  988 always 988
  "asm ( \"\"fnstcw %0\" : \"= m\" ( old_cw )\" ) ;" always "asm ( \"\"fnstcw %0\" : \"= m\" ( old_cw )\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  988 always 988
  "asm volatile (\"fnstcw %0\" : \"= m\" (old_cw));" always "asm volatile (\"fnstcw %0\" : \"= m\" (old_cw));"
Line 989
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  989 always 989
  "asm ( \"\"fnstcw %0\" : \"= m\" ( old_cw )\" ) ;" always "asm ( \"\"fnstcw %0\" : \"= m\" ( old_cw )\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  989 always 989
  " __asm__ (\"fnstcw %0\" : \"= m\" (old_cw));" always " __asm__ (\"fnstcw %0\" : \"= m\" (old_cw));"
Line 990
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  990 always 990
  "asm ( \"\"ddd\"\" ) ;" always "asm ( \"\"ddd\"\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  990 always 990
  " __asm __volatile__ (\"ddd\") ;" always " __asm __volatile__ (\"ddd\") ;"
Line 991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  991 always 991
  "asm ( \"\"ddd\"\" ) ;" always "asm ( \"\"ddd\"\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  991 always 991
  " __asm __volatile (\"ddd\") ;" always " __asm __volatile (\"ddd\") ;"
Line 992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  992 always 992
  "asm ( \"\"mov ax,bx\"\" ) ;" always "asm ( \"\"mov ax,bx\"\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  992 always 992
  "__asm__ volatile ( \"mov ax,bx\" );" always "__asm__ volatile ( \"mov ax,bx\" );"
Line 993
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  993 always 993
  "asm ( \"mov ax , bx\" ) ; int a ;" always "asm ( \"mov ax , bx\" ) ; int a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  993 always 993
  "asm { mov ax,bx } int a;" always "asm { mov ax,bx } int a;"
Line 994
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  994 always 994
  "asm\n\n( \"mov ax , bx\" ) ;" always "asm\n\n( \"mov ax , bx\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  994 always 994
  "__asm\nmov ax,bx\n__endasm;" always "__asm\nmov ax,bx\n__endasm;"
Line 995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  995 always 995
  "asm\n\n( \"push b ; for if\" ) ;" always "asm\n\n( \"push b ; for if\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  995 always 995
  "__asm\npush b ; for if\n__endasm;" always "__asm\npush b ; for if\n__endasm;"
Line 998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  998 always 998
  ";\n\nasm ( \"\"mov ax,bx\"\" ) ;" always ";\n\nasm ( \"\"mov ax,bx\"\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  998 always 998
  ";\n\n__asm__ volatile ( \"mov ax,bx\" );" always ";\n\n__asm__ volatile ( \"mov ax,bx\" );"
Line 1000
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1000 always 1000
  "void func1 ( ) ;" always "void func1 ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1000 always 1000
  "void func1() __asm__(\"...\") __attribute__();" always "void func1() __asm__(\"...\") __attribute__();"
Line 1005
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1005 always 1005
  "void f ( ) { asm ( \"^{}\" ) ; }" always "void f ( ) { asm ( \"^{}\" ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1005 always 1005
  "void f() { ^{} }" always "void f() { ^{} }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1005 always 1005
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1005 always 1005
  false always 0
Line 1006
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1006 always 1006
  "void f ( ) { x ( asm ( \"^{}\" ) ) ; }" always "void f ( ) { x ( asm ( \"^{}\" ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1006 always 1006
  "void f() { x(^{}); }" always "void f() { x(^{}); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1006 always 1006
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1006 always 1006
  false always 0
Line 1007
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1007 always 1007
  "void f ( ) { foo ( A ( ) , asm ( \"^{bar();}\" ) ) ; }" always "void f ( ) { foo ( A ( ) , asm ( \"^{bar();}\" ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1007 always 1007
  "void f() { foo(A(), ^{ bar(); }); }" always "void f() { foo(A(), ^{ bar(); }); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1007 always 1007
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1007 always 1007
  false always 0
Line 1008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1008 always 1008
  "int f0 ( Args args ) { asm ( \"asm(\"return^{returnsizeof...(Args);}()\")+^{returnsizeof...(args);}()\" )\n2:\n|\n5:\n6: ;\n} ;" always "int f0 ( Args args ) { asm ( \"asm(\"return^{returnsizeof...(Args);}()\")+^{returnsizeof...(args);}()\" )\n2:\n|\n5:\n6: ;\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1008 always 1008
  "int f0(Args args) {\n    return ^{\n        return sizeof...(Args);\n    }() + ^ {\n        return sizeof...(args);\n    }();\n};" always "int f0(Args args) {\n    return ^{\n        return sizeof...(Args);\n    }() + ^ {\n        return sizeof...(args);\n    }();\n};"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1008 always 1008
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1008 always 1008
  false always 0
Line 1020
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1020 always 1020
  "int ( ^ block ) ( void ) = asm ( \"^{staticinttest=0;returntest;}\" )\n\n\n;" always "int ( ^ block ) ( void ) = asm ( \"^{staticinttest=0;returntest;}\" )\n\n\n;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1020 always 1020
  "int(^block)(void) = ^{\n    static int test = 0;\n    return test;\n};" always "int(^block)(void) = ^{\n    static int test = 0;\n    return test;\n};"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1020 always 1020
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1020 always 1020
  false always 0
Line 1026
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1026 always 1026
  "; return f ( a [ b = c ] , asm ( \"^{}\" ) ) ;" always "; return f ( a [ b = c ] , asm ( \"^{}\" ) ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1026 always 1026
  "; return f(a[b=c],^{});" always "; return f(a[b=c],^{});"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1026 always 1026
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1026 always 1026
  false always 0
Line 1028
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1028 always 1028
  "{ return f ( asm ( \"^(void){somecode}\" ) ) ; }" always "{ return f ( asm ( \"^(void){somecode}\" ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1028 always 1028
  "{ return f(^(void){somecode}); }" always "{ return f(^(void){somecode}); }"
Line 1030
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1030 always 1030
  "; asm ( \"a?(b?(c,asm(\"^{}\")):0):^{}\" ) ;" always "; asm ( \"a?(b?(c,asm(\"^{}\")):0):^{}\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1030 always 1030
  ";a?(b?(c,^{}):0):^{};" always ";a?(b?(c,^{}):0):^{};"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1030 always 1030
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1030 always 1030
  false always 0
Line 1032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1032 always 1032
  "template < typename T > CImg < T > operator| ( const char * const expression , const CImg < T > & img ) { return img | expression ; } template < typename T > CImg < T > operator^ ( const char * const expression , const CImg < T > & img ) { return img ^ expression ; } template < typename T > CImg < T > operator== ( const char * const expression , const CImg < T > & img ) { return img == expression ; }" always "template < typename T > CImg < T > operator| ( const char * const expression , const CImg < T > & img ) { return img | expression ; } template < typename T > CImg < T > operator^ ( const char * const expression , const CImg < T > & img ) { return img ^ expression ; } template < typename T > CImg < T > operator== ( const char * const expression , const CImg < T > & img ) { return img == expression ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1032 always 1032
  "template < typename T >inline CImg<T> operator|(const char *const expression, const CImg<T>& img) {  return img | expression ;}template<typename T>inline CImg<T> operator^(const char *const expression, const CImg<T>& img) {  return img ^ expression;}template<typename T>inline CImg<T> operator==(const char *const expression, const CImg<T>& img) {  return img == expression;}" always "template < typename T >inline CImg<T> operator|(const char *const expression, const CImg<T>& img) {  return img | expression ;}template<typename T>inline CImg<T> operator^(const char *const expression, const CImg<T>& img) {  return img ^ expression;}template<typename T>inline CImg<T> operator==(const char *const expression, const CImg<T>& img) {  return img == expression;}"
Line 1059
  37 always 37
  = always "void f()\n{\n    if (a);\n    else ;\n}\n"
  "void f()\n{\n    if (a);\n    else ;\n}\n" always "void f()\n{\n    if (a);\n    else ;\n}\n"
Line 1064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1064 always 1064
  "void f ( )\n{\nif ( a ) { ; }\nelse { ; }\n}" always "void f ( )\n{\nif ( a ) { ; }\nelse { ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1064 always 1064
  code always "void f()\n{\n    if (a);\n    else ;\n}\n"
Line 1072
  36 always 36
  = always "void f()\n{\n    if (a) if (b) { }\n}\n"
  "void f()\n{\n    if (a) if (b) { }\n}\n" always "void f()\n{\n    if (a) if (b) { }\n}\n"
Line 1076
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1076 always 1076
  "void f ( )\n{\nif ( a ) { if ( b ) { } }\n}" always "void f ( )\n{\nif ( a ) { if ( b ) { } }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1076 always 1076
  code always "void f()\n{\n    if (a) if (b) { }\n}\n"
Line 1083
  38 always 38
  = always "void f()\n{\n    if (a) for (;;) { }\n}\n"
  "void f()\n{\n    if (a) for (;;) { }\n}\n" always "void f()\n{\n    if (a) for (;;) { }\n}\n"
Line 1087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1087 always 1087
  "void f ( )\n{\nif ( a ) { for ( ; ; ) { } }\n}" always "void f ( )\n{\nif ( a ) { for ( ; ; ) { } }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1087 always 1087
  code always "void f()\n{\n    if (a) for (;;) { }\n}\n"
Line 1094
  118 always 118
  = always "char * foo ()\n{\n    char *str = malloc(10);\n    if (somecondition)\n        for ( ; ; )\n        { }\n    return str;\n}\n"
  "char * foo ()\n{\n    char *str = malloc(10);\n    if (somecondition)\n        for ( ; ; )\n        { }\n    return str;\n}\n" always "char * foo ()\n{\n    char *str = malloc(10);\n    if (somecondition)\n        for ( ; ; )\n        { }\n    return str;\n}\n"
Line 1102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1102 always 1102
  "char * foo ( )\n{\nchar * str ; str = malloc ( 10 ) ;\nif ( somecondition ) {\nfor ( ; ; )\n{ } }\nreturn str ;\n}" always "char * foo ( )\n{\nchar * str ; str = malloc ( 10 ) ;\nif ( somecondition ) {\nfor ( ; ; )\n{ } }\nreturn str ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1102 always 1102
  code always "char * foo ()\n{\n    char *str = malloc(10);\n    if (somecondition)\n        for ( ; ; )\n        { }\n    return str;\n}\n"
Line 1113
  67 always 67
  = always "void f()\n{\nfor(int i = 0; i < 2; i++)\nif(true)\nreturn;\n\nreturn;\n}\n"
  "void f()\n{\nfor(int i = 0; i < 2; i++)\nif(true)\nreturn;\n\nreturn;\n}\n" always "void f()\n{\nfor(int i = 0; i < 2; i++)\nif(true)\nreturn;\n\nreturn;\n}\n"
Line 1122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1122 always 1122
  "void f ( )\n{\nfor ( int i = 0 ; i < 2 ; i ++ ) {\nif ( true ) {\nreturn ; } }\n\nreturn ;\n}" always "void f ( )\n{\nfor ( int i = 0 ; i < 2 ; i ++ ) {\nif ( true ) {\nreturn ; } }\n\nreturn ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1122 always 1122
  code always "void f()\n{\nfor(int i = 0; i < 2; i++)\nif(true)\nreturn;\n\nreturn;\n}\n"
Line 1132
  50 always 50
  = always "void f()\n{\nint a;\nif( a )\n  ({a=4;}),({a=5;});\n}\n"
  "void f()\n{\nint a;\nif( a )\n  ({a=4;}),({a=5;});\n}\n" always "void f()\n{\nint a;\nif( a )\n  ({a=4;}),({a=5;});\n}\n"
Line 1138
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1138 always 1138
  "void f ( )\n{\nint a ;\nif ( a ) {\n( { a = 4 ; } ) , ( { a = 5 ; } ) ; }\n}" always "void f ( )\n{\nint a ;\nif ( a ) {\n( { a = 4 ; } ) , ( { a = 5 ; } ) ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1138 always 1138
  code always "void f()\n{\nint a;\nif( a )\n  ({a=4;}),({a=5;});\n}\n"
Line 1148
  77 always 77
  = always "void f() {    for (int k=0; k<VectorSize; k++)        LOG_OUT(ID_Vector[k])}"
Line 1149
  "void f() {    for (int k=0; k<VectorSize; k++)        LOG_OUT(ID_Vector[k])}" always "void f() {    for (int k=0; k<VectorSize; k++)        LOG_OUT(ID_Vector[k])}"
Line 1153
  85 always 85
  = always "void f ( ) { for ( int k = 0 ; k < VectorSize ; k ++ ) LOG_OUT ( ID_Vector [ k ] ) }"
Line 1154
  "void f ( ) { for ( int k = 0 ; k < VectorSize ; k ++ ) LOG_OUT ( ID_Vector [ k ] ) }" always "void f ( ) { for ( int k = 0 ; k < VectorSize ; k ++ ) LOG_OUT ( ID_Vector [ k ] ) }"
Line 1158
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1158 always 1158
  expected always "void f ( ) { for ( int k = 0 ; k < VectorSize ; k ++ ) LOG_OUT ( ID_Vector [ k ] ) }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1158 always 1158
  code always "void f() {    for (int k=0; k<VectorSize; k++)        LOG_OUT(ID_Vector[k])}"
Line 1162
  27 always 27
  = always "{ if (x) if (y) ; else ; }"
  "{ if (x) if (y) ; else ; }" always "{ if (x) if (y) ; else ; }"
Line 1163
  43 always 43
  = always "{ if ( x ) { if ( y ) { ; } else { ; } } }"
  "{ if ( x ) { if ( y ) { ; } else { ; } } }" always "{ if ( x ) { if ( y ) { ; } else { ; } } }"
Line 1164
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1164 always 1164
  expected always "{ if ( x ) { if ( y ) { ; } else { ; } } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1164 always 1164
  code always "{ if (x) if (y) ; else ; }"
Line 1169
  28 always 28
  = always "{ if (x) do { } while(x); }"
  "{ if (x) do { } while(x); }" always "{ if (x) do { } while(x); }"
Line 1170
  38 always 38
  = always "{ if ( x ) { do { } while ( x ) ; } }"
  "{ if ( x ) { do { } while ( x ) ; } }" always "{ if ( x ) { do { } while ( x ) ; } }"
Line 1171
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1171 always 1171
  expected always "{ if ( x ) { do { } while ( x ) ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1171 always 1171
  code always "{ if (x) do { } while(x); }"
Line 1176
  40 always 40
  = always "{ if (x) if (y) { } else { } else { } }"
  "{ if (x) if (y) { } else { } else { } }" always "{ if (x) if (y) { } else { } else { } }"
Line 1177
  48 always 48
  = always "{ if ( x ) { if ( y ) { } else { } } else { } }"
  "{ if ( x ) { if ( y ) { } else { } } else { } }" always "{ if ( x ) { if ( y ) { } else { } } else { } }"
Line 1178
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1178 always 1178
  expected always "{ if ( x ) { if ( y ) { } else { } } else { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1178 always 1178
  code always "{ if (x) if (y) { } else { } else { } }"
Line 1181
  34 always 34
  = always "{ if (x) while (y) { } else { } }"
  "{ if (x) while (y) { } else { } }" always "{ if (x) while (y) { } else { } }"
Line 1182
  42 always 42
  = always "{ if ( x ) { while ( y ) { } } else { } }"
  "{ if ( x ) { while ( y ) { } } else { } }" always "{ if ( x ) { while ( y ) { } } else { } }"
Line 1183
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1183 always 1183
  expected2 always "{ if ( x ) { while ( y ) { } } else { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1183 always 1183
  code2 always "{ if (x) while (y) { } else { } }"
Line 1189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1189 always 1189
  "{ A if ( x ) { y ( ) ; } }" always "{ A if ( x ) { y ( ) ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1189 always 1189
  "{A if(x)y();}" always "{A if(x)y();}"
Line 1195
  47 always 47
  = always "void f() { (void) ( { if(*p) (*p) = x(); } ) }"
  "void f() { (void) ( { if(*p) (*p) = x(); } ) }" always "void f() { (void) ( { if(*p) (*p) = x(); } ) }"
Line 1198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1198 always 1198
  "void f ( ) { ( void ) ( { if ( * p ) { ( * p ) = x ( ) ; } } ) }" always "void f ( ) { ( void ) ( { if ( * p ) { ( * p ) = x ( ) ; } } ) }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1198 always 1198
  code always "void f() { (void) ( { if(*p) (*p) = x(); } ) }"
Line 1204
  69 always 69
  = always "void f()\n{\n    if (a)\n        bar1 ();\n\n    else\n        bar2 ();\n}\n"
  "void f()\n{\n    if (a)\n        bar1 ();\n\n    else\n        bar2 ();\n}\n" always "void f()\n{\n    if (a)\n        bar1 ();\n\n    else\n        bar2 ();\n}\n"
Line 1212
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1212 always 1212
  "void f ( )\n{\nif ( a ) {\nbar1 ( ) ; }\n\nelse {\nbar2 ( ) ; }\n}" always "void f ( )\n{\nif ( a ) {\nbar1 ( ) ; }\n\nelse {\nbar2 ( ) ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1212 always 1212
  code always "void f()\n{\n    if (a)\n        bar1 ();\n\n    else\n        bar2 ();\n}\n"
Line 1224
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1224 always 1224
  "{ if ( x ) { if ( y ) { } else { ; } } else { ; } }" always "{ if ( x ) { if ( y ) { } else { ; } } else { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1224 always 1224
  "{ if(x) if(y){}else;else;}" always "{ if(x) if(y){}else;else;}"
Line 1227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1227 always 1227
  "{ if ( x ) { if ( y ) { if ( z ) { } else { ; } } else { ; } } else { ; } }" always "{ if ( x ) { if ( y ) { if ( z ) { } else { ; } } else { ; } } else { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1227 always 1227
  "{ if(x) if(y) if(z){}else;else;else;}" always "{ if(x) if(y) if(z){}else;else;else;}"
Line 1233
  126 always 126
  = always "void f()\n{\n    if (a)\n        for (;;)\n            if (b)\n                bar1();\n            else\n                bar2();\n}\n"
  "void f()\n{\n    if (a)\n        for (;;)\n            if (b)\n                bar1();\n            else\n                bar2();\n}\n" always "void f()\n{\n    if (a)\n        for (;;)\n            if (b)\n                bar1();\n            else\n                bar2();\n}\n"
Line 1242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1242 always 1242
  "void f ( )\n{\nif ( a ) {\nfor ( ; ; ) {\nif ( b ) {\nbar1 ( ) ; }\nelse {\nbar2 ( ) ; } } }\n}" always "void f ( )\n{\nif ( a ) {\nfor ( ; ; ) {\nif ( b ) {\nbar1 ( ) ; }\nelse {\nbar2 ( ) ; } } }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1242 always 1242
  code always "void f()\n{\n    if (a)\n        for (;;)\n            if (b)\n                bar1();\n            else\n                bar2();\n}\n"
Line 1254
  27 always 27
  = always "void f() { if(x) {} else }"
  "void f() { if(x) {} else }" always "void f() { if(x) {} else }"
Line 1255
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1255 always 1255
  code always "void f() { if(x) {} else }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1255 always 1255
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1255 always 1255
  false always 0
Line 1260
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1260 always 1260
  "int f ( int x ) {\nif ( x ) {\nl1 : ; l2 : ; return x ; }\n}" always "int f ( int x ) {\nif ( x ) {\nl1 : ; l2 : ; return x ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1260 always 1260
  "int f(int x) {\n  if (x)\n  l1: l2: return x;\n}" always "int f(int x) {\n  if (x)\n  l1: l2: return x;\n}"
Line 1270
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1270 always 1270
  "int f ( int x ) {\nif ( x )\n{ l1 : ; l2 : ; return x ; }\n}" always "int f ( int x ) {\nif ( x )\n{ l1 : ; l2 : ; return x ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1270 always 1270
  "int f(int x) {\n  if (x)\n  l1: l2: { return x; }\n}" always "int f(int x) {\n  if (x)\n  l1: l2: { return x; }\n}"
Line 1280
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1280 always 1280
  "int f ( int x ) {\nif ( x ) {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { return x ; } }\n}" always "int f ( int x ) {\nif ( x ) {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { return x ; } }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1280 always 1280
  "int f(int x) {\n  if (x)\n  l1: l2:\n    try { throw 1; }\n    catch(...) { return x; }\n}" always "int f(int x) {\n  if (x)\n  l1: l2:\n    try { throw 1; }\n    catch(...) { return x; }\n}"
Line 1296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1296 always 1296
  "int f ( int x ) {\nswitch ( x ) {\nl1 : ; case 0 : ; l2 : ; case ( 1 ) : ; return x ; }\n}" always "int f ( int x ) {\nswitch ( x ) {\nl1 : ; case 0 : ; l2 : ; case ( 1 ) : ; return x ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1296 always 1296
  "int f(int x) {\n  switch (x)\n  l1: case 0: l2: case (1): return x;\n}" always "int f(int x) {\n  switch (x)\n  l1: case 0: l2: case (1): return x;\n}"
Line 1306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1306 always 1306
  "int f ( int x ) {\nswitch ( x )\n{ l1 : ; case 0 : ; l2 : ; case ( 1 ) : ; return x ; }\n}" always "int f ( int x ) {\nswitch ( x )\n{ l1 : ; case 0 : ; l2 : ; case ( 1 ) : ; return x ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1306 always 1306
  "int f(int x) {\n  switch (x)\n  l1: case 0: l2: case (1): { return x; }\n}" always "int f(int x) {\n  switch (x)\n  l1: case 0: l2: case (1): { return x; }\n}"
Line 1316
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1316 always 1316
  "int f ( int x ) {\nswitch ( x ) {\nl1 : ; case 0 : ; l2 : ; case ( 1 ) : ;\ntry { throw 1 ; }\ncatch ( ... ) { return x ; } }\n}" always "int f ( int x ) {\nswitch ( x ) {\nl1 : ; case 0 : ; l2 : ; case ( 1 ) : ;\ntry { throw 1 ; }\ncatch ( ... ) { return x ; } }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1316 always 1316
  "int f(int x) {\n  switch (x)\n  l1: case 0: l2: case (1):\n    try { throw 1; }\n    catch(...) { return x; }\n}" always "int f(int x) {\n  switch (x)\n  l1: case 0: l2: case (1):\n    try { throw 1; }\n    catch(...) { return x; }\n}"
Line 1331
  12 always 12
  = always "{while(a);}"
  "{while(a);}" always "{while(a);}"
Line 1332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1332 always 1332
  "{ while ( a ) { ; } }" always "{ while ( a ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1332 always 1332
  code always "{while(a);}"
Line 1337
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1337 always 1337
  "void f ( int x ) {\nwhile ( x ) {\nl1 : ; l2 : ; -- x ; }\n}" always "void f ( int x ) {\nwhile ( x ) {\nl1 : ; l2 : ; -- x ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1337 always 1337
  "void f(int x) {\n  while (x)\n  l1: l2: --x;\n}" always "void f(int x) {\n  while (x)\n  l1: l2: --x;\n}"
Line 1347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1347 always 1347
  "void f ( int x ) {\nwhile ( x )\n{ l1 : ; l2 : ; -- x ; }\n}" always "void f ( int x ) {\nwhile ( x )\n{ l1 : ; l2 : ; -- x ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1347 always 1347
  "void f(int x) {\n  while (x)\n  l1: l2: { -- x; }\n}" always "void f(int x) {\n  while (x)\n  l1: l2: { -- x; }\n}"
Line 1357
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1357 always 1357
  "void f ( int x ) {\nwhile ( x ) {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { -- x ; } }\n}" always "void f ( int x ) {\nwhile ( x ) {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { -- x ; } }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1357 always 1357
  "void f(int x) {\n  while (x)\n  l1: l2:\n    try { throw 1; }\n    catch(...) { --x; }\n}" always "void f(int x) {\n  while (x)\n  l1: l2:\n    try { throw 1; }\n    catch(...) { --x; }\n}"
Line 1373
  18 always 18
  = always "{do ; while (0);}"
  "{do ; while (0);}" always "{do ; while (0);}"
Line 1374
  27 always 27
  = always "{ do { ; } while ( 0 ) ; }"
  "{ do { ; } while ( 0 ) ; }" always "{ do { ; } while ( 0 ) ; }"
Line 1376
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1376 always 1376
  result always "{ do { ; } while ( 0 ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1376 always 1376
  code always "{do ; while (0);}"
Line 1380
  44 always 44
  = always "{ UNKNOWN_MACRO ( do ) ; while ( a -- ) ; }"
  "{ UNKNOWN_MACRO ( do ) ; while ( a -- ) ; }" always "{ UNKNOWN_MACRO ( do ) ; while ( a -- ) ; }"
Line 1381
  48 always 48
  = always "{ UNKNOWN_MACRO ( do ) ; while ( a -- ) { ; } }"
  "{ UNKNOWN_MACRO ( do ) ; while ( a -- ) { ; } }" always "{ UNKNOWN_MACRO ( do ) ; while ( a -- ) { ; } }"
Line 1383
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1383 always 1383
  result always "{ UNKNOWN_MACRO ( do ) ; while ( a -- ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1383 always 1383
  code always "{ UNKNOWN_MACRO ( do ) ; while ( a -- ) ; }"
Line 1387
  50 always 50
  = always "{ UNKNOWN_MACRO ( do , foo ) ; while ( a -- ) ; }"
  "{ UNKNOWN_MACRO ( do , foo ) ; while ( a -- ) ; }" always "{ UNKNOWN_MACRO ( do , foo ) ; while ( a -- ) ; }"
Line 1388
  54 always 54
  = always "{ UNKNOWN_MACRO ( do , foo ) ; while ( a -- ) { ; } }"
  "{ UNKNOWN_MACRO ( do , foo ) ; while ( a -- ) { ; } }" always "{ UNKNOWN_MACRO ( do , foo ) ; while ( a -- ) { ; } }"
Line 1390
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1390 always 1390
  result always "{ UNKNOWN_MACRO ( do , foo ) ; while ( a -- ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1390 always 1390
  code always "{ UNKNOWN_MACRO ( do , foo ) ; while ( a -- ) ; }"
Line 1394
  113 always 113
  = always "void foo ( int c , int d ) {\n do\n  if ( c ) {\n   while ( c ) { c -- ; }\n  }\n while ( -- d > 0 ) ;\n return 0 ;\n}\n"
  "void foo ( int c , int d ) {\n do\n  if ( c ) {\n   while ( c ) { c -- ; }\n  }\n while ( -- d > 0 ) ;\n return 0 ;\n}\n" always "void foo ( int c , int d ) {\n do\n  if ( c ) {\n   while ( c ) { c -- ; }\n  }\n while ( -- d > 0 ) ;\n return 0 ;\n}\n"
Line 1402
  106 always 106
  = always "void foo ( int c , int d ) {\ndo {\nif ( c ) {\nwhile ( c ) { c -- ; }\n} }\nwhile ( -- d > 0 ) ;\nreturn 0 ;\n}"
  "void foo ( int c , int d ) {\ndo {\nif ( c ) {\nwhile ( c ) { c -- ; }\n} }\nwhile ( -- d > 0 ) ;\nreturn 0 ;\n}" always "void foo ( int c , int d ) {\ndo {\nif ( c ) {\nwhile ( c ) { c -- ; }\n} }\nwhile ( -- d > 0 ) ;\nreturn 0 ;\n}"
Line 1410
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1410 always 1410
  result always "void foo ( int c , int d ) {\ndo {\nif ( c ) {\nwhile ( c ) { c -- ; }\n} }\nwhile ( -- d > 0 ) ;\nreturn 0 ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1410 always 1410
  code always "void foo ( int c , int d ) {\n do\n  if ( c ) {\n   while ( c ) { c -- ; }\n  }\n while ( -- d > 0 ) ;\n return 0 ;\n}\n"
Line 1414
  97 always 97
  = always "void foo ( int c , int d ) {\n do\n   do c -- ; while ( c ) ;\n while ( -- d > 0 ) ;\n return 0 ;\n}\n"
  "void foo ( int c , int d ) {\n do\n   do c -- ; while ( c ) ;\n while ( -- d > 0 ) ;\n return 0 ;\n}\n" always "void foo ( int c , int d ) {\n do\n   do c -- ; while ( c ) ;\n while ( -- d > 0 ) ;\n return 0 ;\n}\n"
Line 1420
  98 always 98
  = always "void foo ( int c , int d ) {\ndo {\ndo { c -- ; } while ( c ) ; }\nwhile ( -- d > 0 ) ;\nreturn 0 ;\n}"
  "void foo ( int c , int d ) {\ndo {\ndo { c -- ; } while ( c ) ; }\nwhile ( -- d > 0 ) ;\nreturn 0 ;\n}" always "void foo ( int c , int d ) {\ndo {\ndo { c -- ; } while ( c ) ; }\nwhile ( -- d > 0 ) ;\nreturn 0 ;\n}"
Line 1426
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1426 always 1426
  result always "void foo ( int c , int d ) {\ndo {\ndo { c -- ; } while ( c ) ; }\nwhile ( -- d > 0 ) ;\nreturn 0 ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1426 always 1426
  code always "void foo ( int c , int d ) {\n do\n   do c -- ; while ( c ) ;\n while ( -- d > 0 ) ;\n return 0 ;\n}\n"
Line 1431
  52 always 52
  = always "void foo() {\n    do { while (x) f(); } while (y);\n}"
  "void foo() {\n    do { while (x) f(); } while (y);\n}" always "void foo() {\n    do { while (x) f(); } while (y);\n}"
Line 1434
  62 always 62
  = always "void foo ( ) {\ndo { while ( x ) { f ( ) ; } } while ( y ) ;\n}"
  "void foo ( ) {\ndo { while ( x ) { f ( ) ; } } while ( y ) ;\n}" always "void foo ( ) {\ndo { while ( x ) { f ( ) ; } } while ( y ) ;\n}"
Line 1437
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1437 always 1437
  result always "void foo ( ) {\ndo { while ( x ) { f ( ) ; } } while ( y ) ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1437 always 1437
  code always "void foo() {\n    do { while (x) f(); } while (y);\n}"
Line 1443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1443 always 1443
  "void f ( int x ) {\ndo {\nl1 : ; l2 : ; -- x ; }\nwhile ( x ) ;\n}" always "void f ( int x ) {\ndo {\nl1 : ; l2 : ; -- x ; }\nwhile ( x ) ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1443 always 1443
  "void f(int x) {\n  do\n  l1: l2: --x;\n  while (x);\n}" always "void f(int x) {\n  do\n  l1: l2: --x;\n  while (x);\n}"
Line 1455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1455 always 1455
  "void f ( int x ) {\ndo\n{ l1 : ; l2 : ; -- x ; }\nwhile ( x ) ;\n}" always "void f ( int x ) {\ndo\n{ l1 : ; l2 : ; -- x ; }\nwhile ( x ) ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1455 always 1455
  "void f(int x) {\n  do\n  l1: l2: { -- x; }\n  while (x);\n}" always "void f(int x) {\n  do\n  l1: l2: { -- x; }\n  while (x);\n}"
Line 1467
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1467 always 1467
  "void f ( int x ) {\ndo {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { -- x ; } }\nwhile ( x ) ;\n}" always "void f ( int x ) {\ndo {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { -- x ; } }\nwhile ( x ) ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1467 always 1467
  "void f(int x) {\n  do\n  l1: l2:\n    try { throw 1; }\n    catch(...) { --x; }\n  while (x);\n}" always "void f(int x) {\n  do\n  l1: l2:\n    try { throw 1; }\n    catch(...) { --x; }\n  while (x);\n}"
Line 1485
  64 always 64
  = always "void f() {\n     for(;;)\n         if (a) { }\n         else { }\n}"
  "void f() {\n     for(;;)\n         if (a) { }\n         else { }\n}" always "void f() {\n     for(;;)\n         if (a) { }\n         else { }\n}"
Line 1490
  53 always 53
  = always "void f ( ) {\nfor ( ; ; ) {\nif ( a ) { }\nelse { } }\n}"
  "void f ( ) {\nfor ( ; ; ) {\nif ( a ) { }\nelse { } }\n}" always "void f ( ) {\nfor ( ; ; ) {\nif ( a ) { }\nelse { } }\n}"
Line 1495
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1495 always 1495
  expected always "void f ( ) {\nfor ( ; ; ) {\nif ( a ) { }\nelse { } }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1495 always 1495
  code always "void f() {\n     for(;;)\n         if (a) { }\n         else { }\n}"
Line 1499
  89 always 89
  = always "void f() {\n     for(;;)\n         if (a) { }\n         else if (b) { }\n         else { }\n}"
  "void f() {\n     for(;;)\n         if (a) { }\n         else if (b) { }\n         else { }\n}" always "void f() {\n     for(;;)\n         if (a) { }\n         else if (b) { }\n         else { }\n}"
Line 1505
  75 always 75
  = always "void f ( ) {\nfor ( ; ; ) {\nif ( a ) { }\nelse { if ( b ) { }\nelse { } } }\n}"
  "void f ( ) {\nfor ( ; ; ) {\nif ( a ) { }\nelse { if ( b ) { }\nelse { } } }\n}" always "void f ( ) {\nfor ( ; ; ) {\nif ( a ) { }\nelse { if ( b ) { }\nelse { } } }\n}"
Line 1511
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1511 always 1511
  expected always "void f ( ) {\nfor ( ; ; ) {\nif ( a ) { }\nelse { if ( b ) { }\nelse { } } }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1511 always 1511
  code always "void f() {\n     for(;;)\n         if (a) { }\n         else if (b) { }\n         else { }\n}"
Line 1516
  49 always 49
  = always "void f() {\n    for(;;) try { } catch (...) { }\n}"
  "void f() {\n    for(;;) try { } catch (...) { }\n}" always "void f() {\n    for(;;) try { } catch (...) { }\n}"
Line 1519
  57 always 57
  = always "void f ( ) {\nfor ( ; ; ) { try { } catch ( ... ) { } }\n}"
  "void f ( ) {\nfor ( ; ; ) { try { } catch ( ... ) { } }\n}" always "void f ( ) {\nfor ( ; ; ) { try { } catch ( ... ) { } }\n}"
Line 1522
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1522 always 1522
  expected always "void f ( ) {\nfor ( ; ; ) { try { } catch ( ... ) { } }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1522 always 1522
  code always "void f() {\n    for(;;) try { } catch (...) { }\n}"
Line 1527
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1527 always 1527
  "void f ( int x ) {\nfor ( ; x ; ) {\nl1 : ; l2 : ; -- x ; }\n}" always "void f ( int x ) {\nfor ( ; x ; ) {\nl1 : ; l2 : ; -- x ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1527 always 1527
  "void f(int x) {\n  for ( ; x; )\n  l1: l2: --x;\n}" always "void f(int x) {\n  for ( ; x; )\n  l1: l2: --x;\n}"
Line 1537
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1537 always 1537
  "void f ( int x ) {\nfor ( ; x ; )\n{ l1 : ; l2 : ; -- x ; }\n}" always "void f ( int x ) {\nfor ( ; x ; )\n{ l1 : ; l2 : ; -- x ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1537 always 1537
  "void f(int x) {\n  for ( ; x; )\n  l1: l2: { -- x; }\n}" always "void f(int x) {\n  for ( ; x; )\n  l1: l2: { -- x; }\n}"
Line 1547
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1547 always 1547
  "void f ( int x ) {\nfor ( ; x ; ) {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { -- x ; } }\n}" always "void f ( int x ) {\nfor ( ; x ; ) {\nl1 : ; l2 : ;\ntry { throw 1 ; }\ncatch ( ... ) { -- x ; } }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1547 always 1547
  "void f(int x) {\n  for ( ; x; )\n  l1: l2:\n    try { throw 1; }\n    catch(...) { --x; }\n}" always "void f(int x) {\n  for ( ; x; )\n  l1: l2:\n    try { throw 1; }\n    catch(...) { --x; }\n}"
Line 1563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1563 always 1563
  "int foo ( ) ;" always "int foo ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1563 always 1563
  "extern \"C\" int foo();" always "extern \"C\" int foo();"
Line 1564
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1564 always 1564
  "int foo ( ) ;" always "int foo ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1564 always 1564
  "extern \"C\" { int foo(); }" always "extern \"C\" { int foo(); }"
Line 1569
  25 always 25
  = always "char a [ ABC ( DEF ) ] ;"
  "char a [ ABC ( DEF ) ] ;" always "char a [ ABC ( DEF ) ] ;"
Line 1570
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1570 always 1570
  code always "char a [ ABC ( DEF ) ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1570 always 1570
  code always "char a [ ABC ( DEF ) ] ;"
Line 1574
  41 always 41
  = always "module ( a , a , sizeof ( a ) , 0444 ) ;"
  "module ( a , a , sizeof ( a ) , 0444 ) ;" always "module ( a , a , sizeof ( a ) , 0444 ) ;"
Line 1575
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1575 always 1575
  "module ( a , a , sizeof ( a ) , 0444 ) ;" always "module ( a , a , sizeof ( a ) , 0444 ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1575 always 1575
  code always "module ( a , a , sizeof ( a ) , 0444 ) ;"
Line 1578
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1578 always 1578
  "void f ( int x ) { }" always "void f ( int x ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1578 always 1578
  "void f(x) int x; { }" always "void f(x) int x; { }"
Line 1579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1579 always 1579
  "void f ( int x , char y ) { }" always "void f ( int x , char y ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1579 always 1579
  "void f(x,y) int x; char y; { }" always "void f(x,y) int x; char y; { }"
Line 1580
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1580 always 1580
  "int main ( int argc , char * argv [ ] ) { }" always "int main ( int argc , char * argv [ ] ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1580 always 1580
  "int main(argc,argv) int argc; char *argv[]; { }" always "int main(argc,argv) int argc; char *argv[]; { }"
Line 1581
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1581 always 1581
  "int f ( int p , int w , float d ) { }" always "int f ( int p , int w , float d ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1581 always 1581
  "int f(p,w,d) float d; { }" always "int f(p,w,d) float d; { }"
Line 1584
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1584 always 1584
  "int ( * d ( a , b , c ) ) ( ) int a ; int b ; int c ; { }" always "int ( * d ( a , b , c ) ) ( ) int a ; int b ; int c ; { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1584 always 1584
  "int (*d(a,b,c))()int a,b,c; { }" always "int (*d(a,b,c))()int a,b,c; { }"
Line 1588
  44 always 44
  = always "void foo(){    if (x)        int x;    { }}"
  "void foo(){    if (x)        int x;    { }}" always "void foo(){    if (x)        int x;    { }}"
Line 1594
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1594 always 1594
  "void foo ( ) { if ( x ) { int x ; } { } }" always "void foo ( ) { if ( x ) { int x ; } { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1594 always 1594
  code always "void foo(){    if (x)        int x;    { }}"
Line 1600
  91 always 91
  = always "typedef float ufloat;\ntypedef short ftnlen;\nint f(p,w,d,e,len) ufloat *p; ftnlen len;\n{\n}\n"
  "typedef float ufloat;\ntypedef short ftnlen;\nint f(p,w,d,e,len) ufloat *p; ftnlen len;\n{\n}\n" always "typedef float ufloat;\ntypedef short ftnlen;\nint f(p,w,d,e,len) ufloat *p; ftnlen len;\n{\n}\n"
Line 1605
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1605 always 1605
  "int f ( float * p , int w , int d , int e , short len )\n{\n}" always "int f ( float * p , int w , int d , int e , short len )\n{\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1605 always 1605
  code always "typedef float ufloat;\ntypedef short ftnlen;\nint f(p,w,d,e,len) ufloat *p; ftnlen len;\n{\n}\n"
Line 1611
  87 always 87
  = always "class Item { int i ; public: Item ( int i ) ; } ; Item :: Item ( int i ) : i ( i ) { }"
  "class Item { int i ; public: Item ( int i ) ; } ; Item :: Item ( int i ) : i ( i ) { }" always "class Item { int i ; public: Item ( int i ) ; } ; Item :: Item ( int i ) : i ( i ) { }"
Line 1617
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1617 always 1617
  code always "class Item { int i ; public: Item ( int i ) ; } ; Item :: Item ( int i ) : i ( i ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1617 always 1617
  code always "class Item { int i ; public: Item ( int i ) ; } ; Item :: Item ( int i ) : i ( i ) { }"
Line 1621
  121 always 121
  = always "class Item { int i ; int j ; public: Item ( int i , int j ) ; } ; Item :: Item ( int i , int j ) : i ( i ) , j ( j ) { }"
  "class Item { int i ; int j ; public: Item ( int i , int j ) ; } ; Item :: Item ( int i , int j ) : i ( i ) , j ( j ) { }" always "class Item { int i ; int j ; public: Item ( int i , int j ) ; } ; Item :: Item ( int i , int j ) : i ( i ) , j ( j ) { }"
Line 1628
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1628 always 1628
  code always "class Item { int i ; int j ; public: Item ( int i , int j ) ; } ; Item :: Item ( int i , int j ) : i ( i ) , j ( j ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1628 always 1628
  code always "class Item { int i ; int j ; public: Item ( int i , int j ) ; } ; Item :: Item ( int i , int j ) : i ( i ) , j ( j ) { }"
Line 1632
  37 always 37
  = always "int foo :: bar ( int , int ) const ;"
  "int foo :: bar ( int , int ) const ;" always "int foo :: bar ( int , int ) const ;"
Line 1633
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1633 always 1633
  code always "int foo :: bar ( int , int ) const ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1633 always 1633
  code always "int foo :: bar ( int , int ) const ;"
Line 1637
  82 always 82
  = always "template < typename T1 > template < typename T2 > void A < T1 > :: foo ( T2 ) { }"
  "template < typename T1 > template < typename T2 > void A < T1 > :: foo ( T2 ) { }" always "template < typename T1 > template < typename T2 > void A < T1 > :: foo ( T2 ) { }"
Line 1639
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1639 always 1639
  code always "template < typename T1 > template < typename T2 > void A < T1 > :: foo ( T2 ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1639 always 1639
  code always "template < typename T1 > template < typename T2 > void A < T1 > :: foo ( T2 ) { }"
Line 1644
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1644 always 1644
  "void foo(x, x)\n int x;\n int x;\n{}\n" always "void foo(x, x)\n int x;\n int x;\n{}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1644 always 1644
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1644 always 1644
  false always 0
Line 1649
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1649 always 1649
  "void foo(x, y)\n int x;\n int x;\n{}\n" always "void foo(x, y)\n int x;\n int x;\n{}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1649 always 1649
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1649 always 1649
  false always 0
Line 1654
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1654 always 1654
  "void foo(int, int)\n{}" always "void foo(int, int)\n{}"
Line 1656
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1656 always 1656
  "" always ""
Line 1659
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1659 always 1659
  "sal_Bool ShapeHasText(sal_uLong, sal_uLong) const {\n    return sal_True;\n}\nvoid CreateSdrOLEFromStorage() {\n    comphelper::EmbeddedObjectContainer aCnt( xDestStorage );\n    { }\n}" always "sal_Bool ShapeHasText(sal_uLong, sal_uLong) const {\n    return sal_True;\n}\nvoid CreateSdrOLEFromStorage() {\n    comphelper::EmbeddedObjectContainer aCnt( xDestStorage );\n    { }\n}"
Line 1666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1666 always 1666
  "" always ""
Line 1670
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1670 always 1670
  "void foo ( ) { try {\n} catch ( int ) {\n} catch ( char ) {\n} }" always "void foo ( ) { try {\n} catch ( int ) {\n} catch ( char ) {\n} }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1670 always 1670
  "void foo() try {\n} catch (int) {\n} catch (char) {\n}" always "void foo() try {\n} catch (int) {\n} catch (char) {\n}"
Line 1679
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1679 always 1679
  "void foo ( ) { try {\nstruct S {\nvoid bar ( ) { try {\n} catch ( int ) {\n} catch ( char ) {\n} }\n} ;\n} catch ( long ) {\n} }" always "void foo ( ) { try {\nstruct S {\nvoid bar ( ) { try {\n} catch ( int ) {\n} catch ( char ) {\n} }\n} ;\n} catch ( long ) {\n} }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1679 always 1679
  "void foo() try {\n  struct S {\n    void bar() try {\n    } catch (int) {\n    } catch (char) {\n    }\n  };\n} catch (long) {\n}" always "void foo() try {\n  struct S {\n    void bar() try {\n    } catch (int) {\n    } catch (char) {\n    }\n  };\n} catch (long) {\n}"
Line 1701
  34 always 34
  = always "void foo(){    free(((void*)p));}"
  "void foo(){    free(((void*)p));}" always "void foo(){    free(((void*)p));}"
Line 1706
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1706 always 1706
  "void foo ( ) { free ( ( void * ) p ) ; }" always "void foo ( ) { free ( ( void * ) p ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1706 always 1706
  code always "void foo(){    free(((void*)p));}"
Line 1711
  40 always 40
  = always "void foo(){    if (( true )==(true)){}}"
  "void foo(){    if (( true )==(true)){}}" always "void foo(){    if (( true )==(true)){}}"
Line 1715
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1715 always 1715
  "void foo ( ) { if ( true == true ) { } }" always "void foo ( ) { if ( true == true ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1715 always 1715
  code always "void foo(){    if (( true )==(true)){}}"
Line 1719
  34 always 34
  = always "void foo(){    if (( 2 )==(2)){}}"
  "void foo(){    if (( 2 )==(2)){}}" always "void foo(){    if (( 2 )==(2)){}}"
Line 1723
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1723 always 1723
  "void foo ( ) { if ( 2 == 2 ) { } }" always "void foo ( ) { if ( 2 == 2 ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1723 always 1723
  code always "void foo(){    if (( 2 )==(2)){}}"
Line 1727
  29 always 29
  = always "void foo(){    if( g(10)){}}"
  "void foo(){    if( g(10)){}}" always "void foo(){    if( g(10)){}}"
Line 1731
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1731 always 1731
  "void foo ( ) { if ( g ( 10 ) ) { } }" always "void foo ( ) { if ( g ( 10 ) ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1731 always 1731
  code always "void foo(){    if( g(10)){}}"
Line 1737
  27 always 27
  = always "void foo(){    (free(p));}"
  "void foo(){    (free(p));}" always "void foo(){    (free(p));}"
Line 1741
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1741 always 1741
  "void foo ( ) { free ( p ) ; }" always "void foo ( ) { free ( p ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1741 always 1741
  code always "void foo(){    (free(p));}"
Line 1747
  28 always 28
  = always "void foo(){    (delete p);}"
  "void foo(){    (delete p);}" always "void foo(){    (delete p);}"
Line 1751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1751 always 1751
  "void foo ( ) { delete p ; }" always "void foo ( ) { delete p ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1751 always 1751
  code always "void foo(){    (delete p);}"
Line 1756
  31 always 31
  = always "void foo(){    (delete [] p);}"
  "void foo(){    (delete [] p);}" always "void foo(){    (delete [] p);}"
Line 1760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1760 always 1760
  "void foo ( ) { delete [ ] p ; }" always "void foo ( ) { delete [ ] p ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1760 always 1760
  code always "void foo(){    (delete [] p);}"
Line 1767
  12 always 12
  = always "(!(abc.a));"
  "(!(abc.a));" always "(!(abc.a));"
Line 1768
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1768 always 1768
  "( ! abc . a ) ;" always "( ! abc . a ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1768 always 1768
  code always "(!(abc.a));"
Line 1772
  14 always 14
  = always "(!(a.b.c.d));"
  "(!(a.b.c.d));" always "(!(a.b.c.d));"
Line 1773
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1773 always 1773
  "( ! a . b . c . d ) ;" always "( ! a . b . c . d ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1773 always 1773
  code always "(!(a.b.c.d));"
Line 1778
  30 always 30
  = always ";char *p; (delete(p), (p)=0);"
  ";char *p; (delete(p), (p)=0);" always ";char *p; (delete(p), (p)=0);"
Line 1779
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1779 always 1779
  "; char * p ; delete ( p ) , p = 0 ;" always "; char * p ; delete ( p ) , p = 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1779 always 1779
  code always ";char *p; (delete(p), (p)=0);"
Line 1783
  64 always 64
  = always "struct foo {\n    void operator delete(void *obj, size_t sz);\n}\n"
  "struct foo {\n    void operator delete(void *obj, size_t sz);\n}\n" always "struct foo {\n    void operator delete(void *obj, size_t sz);\n}\n"
Line 1786
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1786 always 1786
  code always "struct foo {\n    void operator delete(void *obj, size_t sz);\n}\n"
  true always 1
Line 1788
  71 always 71
  = always "struct foo {\nvoid operatordelete ( void * obj , unsigned long sz ) ;\n}"
  "struct foo {\nvoid operatordelete ( void * obj , unsigned long sz ) ;\n}" always "struct foo {\nvoid operatordelete ( void * obj , unsigned long sz ) ;\n}"
Line 1792
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1792 always 1792
  expected always "struct foo {\nvoid operatordelete ( void * obj , unsigned long sz ) ;\n}"
Line 1796
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1796 always 1796
  "void delete ( double num ) ;" always "void delete ( double num ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1796 always 1796
  "void delete(double num);" always "void delete(double num);"
Line 1800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1800 always 1800
  "p = buf + 8 ;" always "p = buf + 8 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1800 always 1800
  "p = (buf + 8);" always "p = (buf + 8);"
Line 1805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1805 always 1805
  "{ } x ( ) ;" always "{ } x ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1805 always 1805
  "{}(x());" always "{}(x());"
Line 1810
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1810 always 1810
  ", x = 0 ;" always ", x = 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1810 always 1810
  ",(x)=0;" always ",(x)=0;"
Line 1814
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1814 always 1814
  "; f ( a + b , c ) ;" always "; f ( a + b , c ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1814 always 1814
  ";f((a+b),c);" always ";f((a+b),c);"
Line 1815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1815 always 1815
  "; x = y [ a + b ] ;" always "; x = y [ a + b ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1815 always 1815
  ";x=y[(a+b)];" always ";x=y[(a+b)];"
Line 1819
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1819 always 1819
  "{ if ( ( i & 1 ) == 0 ) { ; } }" always "{ if ( ( i & 1 ) == 0 ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1819 always 1819
  "{ if ( (i & 1) == 0 ); }" always "{ if ( (i & 1) == 0 ); }"
Line 1823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1823 always 1823
  "a = b ? c : 123 ;" always "a = b ? c : 123 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1823 always 1823
  "a = b ? c : (123);" always "a = b ? c : (123);"
Line 1824
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1824 always 1824
  "a = b ? c : ( 123 + 456 ) ;" always "a = b ? c : ( 123 + 456 ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1824 always 1824
  "a = b ? c : ((123)+(456));" always "a = b ? c : ((123)+(456));"
Line 1825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1825 always 1825
  "a = b ? 123 : c ;" always "a = b ? 123 : c ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1825 always 1825
  "a = b ? (123) : c;" always "a = b ? (123) : c;"
Line 1828
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1828 always 1828
  "a = b ? c : ( d = 1 , 0 ) ;" always "a = b ? c : ( d = 1 , 0 ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1828 always 1828
  "a = b ? c : (d=1,0);" always "a = b ? c : (d=1,0);"
Line 1833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1833 always 1833
  "; * x = 0 ;" always "; * x = 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1833 always 1833
  ";*(x)=0;" always ";*(x)=0;"
Line 1834
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1834 always 1834
  "; * x . y = 0 ;" always "; * x . y = 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1834 always 1834
  ";*(x.y)=0;" always ";*(x.y)=0;"
Line 1838
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1838 always 1838
  "a ? b : ( c > 0 ? d : e ) ;" always "a ? b : ( c > 0 ? d : e ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1838 always 1838
  "a?b:(c>0?d:e);" always "a?b:(c>0?d:e);"
Line 1842
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1842 always 1842
  "float ( * a ) [ 2 ] ;" always "float ( * a ) [ 2 ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1842 always 1842
  "float(*a)[2];" always "float(*a)[2];"
Line 1846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1846 always 1846
  "( ( ( typeof ( X ) ) * ) 0 ) ;" always "( ( ( typeof ( X ) ) * ) 0 ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1846 always 1846
  "(((typeof(X))*)0);" always "(((typeof(X))*)0);"
Line 1850
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1850 always 1850
  "a < b < int > > ( 2 ) ;" always "a < b < int > > ( 2 ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1850 always 1850
  "a<b<int>>(2);" always "a<b<int>>(2);"
Line 1854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1854 always 1854
  "a = ( int ) - b ;" always "a = ( int ) - b ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1854 always 1854
  "a = ((int)-b);" always "a = ((int)-b);"
Line 1858
  61 always 61
  = always "struct S { char *(a); char &(b); const static char *(c); } ;"
  "struct S { char *(a); char &(b); const static char *(c); } ;" always "struct S { char *(a); char &(b); const static char *(c); } ;"
Line 1863
  61 always 61
  = always "struct S { char * a ; char & b ; static const char * c ; } ;"
  "struct S { char * a ; char & b ; static const char * c ; } ;" always "struct S { char * a ; char & b ; static const char * c ; } ;"
Line 1868
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1868 always 1868
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1868 always 1868
Line 1874
  51 always 51
  = always "; * * p f ( ) int = { new int ( * [ 2 ] ) ; void }"
  "; * * p f ( ) int = { new int ( * [ 2 ] ) ; void }" always "; * * p f ( ) int = { new int ( * [ 2 ] ) ; void }"
Line 1875
  51 always 51
  = always "; * * p f ( ) int = { new int ( * [ 2 ] ) ; void }"
  "; * * p f ( ) int = { new int ( * [ 2 ] ) ; void }" always "; * * p f ( ) int = { new int ( * [ 2 ] ) ; void }"
Line 1876
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1876 always 1876
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1876 always 1876
Line 1880
  34 always 34
  = always "int * f [ 1 ] = { new ( int ) } ;"
  "int * f [ 1 ] = { new ( int ) } ;" always "int * f [ 1 ] = { new ( int ) } ;"
Line 1881
  30 always 30
  = always "int * f [ 1 ] = { new int } ;"
  "int * f [ 1 ] = { new int } ;" always "int * f [ 1 ] = { new int } ;"
Line 1882
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1882 always 1882
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1882 always 1882
Line 1885
  42 always 42
  = always "int * * f [ 1 ] = { new ( int ) [ 1 ] } ;"
  "int * * f [ 1 ] = { new ( int ) [ 1 ] } ;" always "int * * f [ 1 ] = { new ( int ) [ 1 ] } ;"
Line 1886
  38 always 38
  = always "int * * f [ 1 ] = { new int [ 1 ] } ;"
  "int * * f [ 1 ] = { new int [ 1 ] } ;" always "int * * f [ 1 ] = { new int [ 1 ] } ;"
Line 1887
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1887 always 1887
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1887 always 1887
Line 1890
  52 always 52
  = always "list < int > * f [ 1 ] = { new ( list < int > ) } ;"
  "list < int > * f [ 1 ] = { new ( list < int > ) } ;" always "list < int > * f [ 1 ] = { new ( list < int > ) } ;"
Line 1891
  48 always 48
  = always "list < int > * f [ 1 ] = { new list < int > } ;"
  "list < int > * f [ 1 ] = { new list < int > } ;" always "list < int > * f [ 1 ] = { new list < int > } ;"
Line 1892
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1892 always 1892
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1892 always 1892
Line 1896
  40 always 40
  = always "void *operator new(__SIZE_TYPE__, int);"
  "void *operator new(__SIZE_TYPE__, int);" always "void *operator new(__SIZE_TYPE__, int);"
Line 1897
  45 always 45
  = always "void * operatornew ( __SIZE_TYPE__ , int ) ;"
  "void * operatornew ( __SIZE_TYPE__ , int ) ;" always "void * operatornew ( __SIZE_TYPE__ , int ) ;"
Line 1898
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1898 always 1898
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1898 always 1898
Line 1903
  41 always 41
  = always "std::hash<decltype(t._data)>()(t._data);"
  "std::hash<decltype(t._data)>()(t._data);" always "std::hash<decltype(t._data)>()(t._data);"
Line 1904
  59 always 59
  = always "std :: hash < decltype ( t . _data ) > ( ) ( t . _data ) ;"
  "std :: hash < decltype ( t . _data ) > ( ) ( t . _data ) ;" always "std :: hash < decltype ( t . _data ) > ( ) ( t . _data ) ;"
Line 1905
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1905 always 1905
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1905 always 1905
Line 1909
  9 always 9
  = always "a=(b,c);"
  "a=(b,c);" always "a=(b,c);"
Line 1910
  16 always 16
  = always "a = ( b , c ) ;"
  "a = ( b , c ) ;" always "a = ( b , c ) ;"
Line 1911
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1911 always 1911
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1911 always 1911
Line 1915
  9 always 9
  = always "a[0](0);"
  "a[0](0);" always "a[0](0);"
Line 1916
  16 always 16
  = always "a [ 0 ] ( 0 ) ;"
  "a [ 0 ] ( 0 ) ;" always "a [ 0 ] ( 0 ) ;"
Line 1917
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1917 always 1917
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1917 always 1917
Line 1921
  118 always 118
  = always "void f() {\n    double a = 4.2;\n    float b = 4.2f;\n    double c = 4.2e+10;\n    double d = 4.2e-10;\n    int e = 4+2;\n}"
  "void f() {\n    double a = 4.2;\n    float b = 4.2f;\n    double c = 4.2e+10;\n    double d = 4.2e-10;\n    int e = 4+2;\n}" always "void f() {\n    double a = 4.2;\n    float b = 4.2f;\n    double c = 4.2e+10;\n    double d = 4.2e-10;\n    int e = 4+2;\n}"
Line 1928
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1928 always 1928
  "void f ( ) {\ndouble a ; a = 4.2 ;\nfloat b ; b = 4.2f ;\ndouble c ; c = 4.2e+10 ;\ndouble d ; d = 4.2e-10 ;\nint e ; e = 4 + 2 ;\n}" always "void f ( ) {\ndouble a ; a = 4.2 ;\nfloat b ; b = 4.2f ;\ndouble c ; c = 4.2e+10 ;\ndouble d ; d = 4.2e-10 ;\nint e ; e = 4 + 2 ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1928 always 1928
  code always "void f() {\n    double a = 4.2;\n    float b = 4.2f;\n    double c = 4.2e+10;\n    double d = 4.2e-10;\n    int e = 4+2;\n}"
Line 1938
  59 always 59
  = always "void f() {\nconst char *a =\n{\n\"hello \"\n\"more \"\n\"world\"\n};\n}"
  "void f() {\nconst char *a =\n{\n\"hello \"\n\"more \"\n\"world\"\n};\n}" always "void f() {\nconst char *a =\n{\n\"hello \"\n\"more \"\n\"world\"\n};\n}"
Line 1946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1946 always 1946
  "void f ( ) {\nconst char * a ; a =\n{\n\"hello more world\"\n\n\n} ;\n}" always "void f ( ) {\nconst char * a ; a =\n{\n\"hello more world\"\n\n\n} ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1946 always 1946
  code always "void f() {\nconst char *a =\n{\n\"hello \"\n\"more \"\n\"world\"\n};\n}"
Line 1957
  36 always 36
  = always "const struct A { int a; int b; } a;"
  "const struct A { int a; int b; } a;" always "const struct A { int a; int b; } a;"
Line 1958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1958 always 1958
  "struct A { int a ; int b ; } ; const struct A a ;" always "struct A { int a ; int b ; } ; const struct A a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1958 always 1958
  code always "const struct A { int a; int b; } a;"
Line 1961
  15 always 15
  = always "enum A {} (a);"
  "enum A {} (a);" always "enum A {} (a);"
Line 1962
  24 always 24
  = always "enum A { } ; enum A a ;"
  "enum A { } ; enum A a ;" always "enum A { } ; enum A a ;"
Line 1963
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1963 always 1963
  expected2 always "enum A { } ; enum A a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1963 always 1963
  code2 always "enum A {} (a);"
Line 1966
  33 always 33
  = always "struct a { int b; } static e[1];"
  "struct a { int b; } static e[1];" always "struct a { int b; } static e[1];"
Line 1967
  49 always 49
  = always "struct a { int b ; } ; struct a static e [ 1 ] ;"
  "struct a { int b ; } ; struct a static e [ 1 ] ;" always "struct a { int b ; } ; struct a static e [ 1 ] ;"
Line 1968
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1968 always 1968
  expected3 always "struct a { int b ; } ; struct a static e [ 1 ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1968 always 1968
  code3 always "struct a { int b; } static e[1];"
Line 1972
  19 always 19
  = always "unsigned int a, b;"
  "unsigned int a, b;" always "unsigned int a, b;"
Line 1974
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1974 always 1974
  code always "unsigned int a, b;"
Line 1976
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1976 always 1976
  "unsigned int a ; unsigned int b ;" always "unsigned int a ; unsigned int b ;"
Line 1980
  37 always 37
  = always "void foo(a,b) unsigned int a, b; { }"
  "void foo(a,b) unsigned int a, b; { }" always "void foo(a,b) unsigned int a, b; { }"
Line 1982
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1982 always 1982
  code always "void foo(a,b) unsigned int a, b; { }"
Line 1984
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1984 always 1984
  "void foo ( unsigned int a , unsigned int b ) { }" always "void foo ( unsigned int a , unsigned int b ) { }"
Line 1988
  40 always 40
  = always "void f() { char * p = foo<10,char>(); }"
  "void f() { char * p = foo<10,char>(); }" always "void f() { char * p = foo<10,char>(); }"
Line 1989
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1989 always 1989
  code always "void f() { char * p = foo<10,char>(); }"
Line 1990
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1990 always 1990
  "void f ( ) { char * p ; p = foo < 10 , char > ( ) ; }" always "void f ( ) { char * p ; p = foo < 10 , char > ( ) ; }"
Line 1996
  16 always 16
  = always "void *p = NULL;"
  "void *p = NULL;" always "void *p = NULL;"
Line 1997
  22 always 22
  = always "void * p ; p = NULL ;"
  "void * p ; p = NULL ;" always "void * p ; p = NULL ;"
Line 1998
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1998 always 1998
  res1 always "void * p ; p = NULL ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  1998 always 1998
  code1 always "void *p = NULL;"
Line 2000
  22 always 22
  = always "const void *p = NULL;"
  "const void *p = NULL;" always "const void *p = NULL;"
Line 2001
  28 always 28
  = always "const void * p ; p = NULL ;"
  "const void * p ; p = NULL ;" always "const void * p ; p = NULL ;"
Line 2002
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2002 always 2002
  res2 always "const void * p ; p = NULL ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2002 always 2002
  code2 always "const void *p = NULL;"
Line 2004
  23 always 23
  = always "void * const p = NULL;"
  "void * const p = NULL;" always "void * const p = NULL;"
Line 2005
  28 always 28
  = always "void * const p ; p = NULL ;"
  "void * const p ; p = NULL ;" always "void * const p ; p = NULL ;"
Line 2006
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2006 always 2006
  res3 always "void * const p ; p = NULL ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2006 always 2006
  code3 always "void * const p = NULL;"
Line 2008
  29 always 29
  = always "const void * const p = NULL;"
  "const void * const p = NULL;" always "const void * const p = NULL;"
Line 2009
  34 always 34
  = always "const void * const p ; p = NULL ;"
  "const void * const p ; p = NULL ;" always "const void * const p ; p = NULL ;"
Line 2010
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2010 always 2010
  res4 always "const void * const p ; p = NULL ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2010 always 2010
  code4 always "const void * const p = NULL;"
Line 2012
  32 always 32
  = always "const void * volatile p = NULL;"
  "const void * volatile p = NULL;" always "const void * volatile p = NULL;"
Line 2013
  37 always 37
  = always "const void * volatile p ; p = NULL ;"
  "const void * volatile p ; p = NULL ;" always "const void * volatile p ; p = NULL ;"
Line 2014
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2014 always 2014
  res5 always "const void * volatile p ; p = NULL ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2014 always 2014
  code5 always "const void * volatile p = NULL;"
Line 2018
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2018 always 2018
  "void foo ( int nX ) {\nint addI ; addI = frontPoint == 2 || frontPoint == 1 ? ( i = 0 , 1 ) : ( i = nX - 2 , -1 ) ;\n}" always "void foo ( int nX ) {\nint addI ; addI = frontPoint == 2 || frontPoint == 1 ? ( i = 0 , 1 ) : ( i = nX - 2 , -1 ) ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2018 always 2018
  "void foo(int nX) {\n    int addI = frontPoint == 2 || frontPoint == 1 ? i = 0, 1 : (i = nX - 2, -1);\n}" always "void foo(int nX) {\n    int addI = frontPoint == 2 || frontPoint == 1 ? i = 0, 1 : (i = nX - 2, -1);\n}"
Line 2028
  30 always 30
  = always "std::vector<std::string>a, b;"
  "std::vector<std::string>a, b;" always "std::vector<std::string>a, b;"
Line 2029
  72 always 72
  = always "std :: vector < std :: string > a ; std :: vector < std :: string > b ;"
  "std :: vector < std :: string > a ; std :: vector < std :: string > b ;" always "std :: vector < std :: string > a ; std :: vector < std :: string > b ;"
Line 2030
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2030 always 2030
  res1 always "std :: vector < std :: string > a ; std :: vector < std :: string > b ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2030 always 2030
  code1 always "std::vector<std::string>a, b;"
Line 2032
  50 always 50
  = always "std::vector<std::string>::const_iterator it, cit;"
  "std::vector<std::string>::const_iterator it, cit;" always "std::vector<std::string>::const_iterator it, cit;"
Line 2033
  111 always 111
  = always "std :: vector < std :: string > :: const_iterator it ; std :: vector < std :: string > :: const_iterator cit ;"
  "std :: vector < std :: string > :: const_iterator it ; std :: vector < std :: string > :: const_iterator cit ;" always "std :: vector < std :: string > :: const_iterator it ; std :: vector < std :: string > :: const_iterator cit ;"
Line 2034
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2034 always 2034
  res2 always "std :: vector < std :: string > :: const_iterator it ; std :: vector < std :: string > :: const_iterator cit ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2034 always 2034
  code2 always "std::vector<std::string>::const_iterator it, cit;"
Line 2036
  58 always 58
  = always "std::vector<std::pair<std::string, std::string > > *c, d;"
  "std::vector<std::pair<std::string, std::string > > *c, d;" always "std::vector<std::pair<std::string, std::string > > *c, d;"
Line 2037
  138 always 138
  = always "std :: vector < std :: pair < std :: string , std :: string > > * c ; std :: vector < std :: pair < std :: string , std :: string > > d ;"
  "std :: vector < std :: pair < std :: string , std :: string > > * c ; std :: vector < std :: pair < std :: string , std :: string > > d ;" always "std :: vector < std :: pair < std :: string , std :: string > > * c ; std :: vector < std :: pair < std :: string , std :: string > > d ;"
Line 2038
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2038 always 2038
  res3 always "std :: vector < std :: pair < std :: string , std :: string > > * c ; std :: vector < std :: pair < std :: string , std :: string > > d ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2038 always 2038
  code3 always "std::vector<std::pair<std::string, std::string > > *c, d;"
Line 2042
  27 always 27
  = always "{ std::string x = \"abc\"; }"
  "{ std::string x = \"abc\"; }" always "{ std::string x = \"abc\"; }"
Line 2043
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2043 always 2043
  "{ std :: string x ; x = \"abc\" ; }" always "{ std :: string x ; x = \"abc\" ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2043 always 2043
  code1 always "{ std::string x = \"abc\"; }"
Line 2045
  28 always 28
  = always "{ std::vector<int> x = y; }"
  "{ std::vector<int> x = y; }" always "{ std::vector<int> x = y; }"
Line 2046
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2046 always 2046
  "{ std :: vector < int > x ; x = y ; }" always "{ std :: vector < int > x ; x = y ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2046 always 2046
  code2 always "{ std::vector<int> x = y; }"
Line 2051
  33 always 33
  = always "{ std::string const x = \"abc\"; }"
  "{ std::string const x = \"abc\"; }" always "{ std::string const x = \"abc\"; }"
Line 2052
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2052 always 2052
  "{ const std :: string x = \"abc\" ; }" always "{ const std :: string x = \"abc\" ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2052 always 2052
  code1 always "{ std::string const x = \"abc\"; }"
Line 2054
  34 always 34
  = always "{ std::vector<int> const x = y; }"
  "{ std::vector<int> const x = y; }" always "{ std::vector<int> const x = y; }"
Line 2055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2055 always 2055
  "{ const std :: vector < int > x = y ; }" always "{ const std :: vector < int > x = y ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2055 always 2055
  code2 always "{ std::vector<int> const x = y; }"
Line 2060
  23 always 23
  = always "b<(1<<24),10,24> u, v;"
  "b<(1<<24),10,24> u, v;" always "b<(1<<24),10,24> u, v;"
Line 2061
  58 always 58
  = always "b < 16777216 , 10 , 24 > u ; b < 16777216 , 10 , 24 > v ;"
  "b < 16777216 , 10 , 24 > u ; b < 16777216 , 10 , 24 > v ;" always "b < 16777216 , 10 , 24 > u ; b < 16777216 , 10 , 24 > v ;"
Line 2062
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2062 always 2062
  res1 always "b < 16777216 , 10 , 24 > u ; b < 16777216 , 10 , 24 > v ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2062 always 2062
  code1 always "b<(1<<24),10,24> u, v;"
Line 2064
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2064 always 2064
  "template <int i = (3>4) > class X4 {};" always "template <int i = (3>4) > class X4 {};"
Line 2069
  31 always 31
  = always "const string str = x<8,int>();"
  "const string str = x<8,int>();" always "const string str = x<8,int>();"
Line 2070
  39 always 39
  = always "const string str = x < 8 , int > ( ) ;"
  "const string str = x < 8 , int > ( ) ;" always "const string str = x < 8 , int > ( ) ;"
Line 2071
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2071 always 2071
  expected always "const string str = x < 8 , int > ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2071 always 2071
  code always "const string str = x<8,int>();"
Line 2076
  53 always 53
  = always "class Fred { public: union { int a ; int b ; } ; } ;"
  "class Fred { public: union { int a ; int b ; } ; } ;" always "class Fred { public: union { int a ; int b ; } ; } ;"
Line 2077
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2077 always 2077
  code1 always "class Fred { public: union { int a ; int b ; } ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2077 always 2077
  code1 always "class Fred { public: union { int a ; int b ; } ; } ;"
Line 2080
  67 always 67
  = always "void f() {\n     union {\n         int x;\n         long y;\n     };\n}"
  "void f() {\n     union {\n         int x;\n         long y;\n     };\n}" always "void f() {\n     union {\n         int x;\n         long y;\n     };\n}"
Line 2086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2086 always 2086
  "void f ( ) {\n\nint x ;\nlong & y = x ;\n\n}" always "void f ( ) {\n\nint x ;\nlong & y = x ;\n\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2086 always 2086
  code2 always "void f() {\n     union {\n         int x;\n         long y;\n     };\n}"
Line 2089
  20 always 20
  = always "union xy *p = NULL;"
  "union xy *p = NULL;" always "union xy *p = NULL;"
Line 2090
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2090 always 2090
  "union xy * p ; p = NULL ;" always "union xy * p ; p = NULL ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2090 always 2090
  code3 always "union xy *p = NULL;"
Line 2095
  33 always 33
  = always "Fred<int(*)()> fred1=a, fred2=b;"
  "Fred<int(*)()> fred1=a, fred2=b;" always "Fred<int(*)()> fred1=a, fred2=b;"
Line 2096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2096 always 2096
  "Fred < int ( * ) ( ) > fred1 ; fred1 = a ; Fred < int ( * ) ( ) > fred2 ; fred2 = b ;" always "Fred < int ( * ) ( ) > fred1 ; fred1 = a ; Fred < int ( * ) ( ) > fred2 ; fred2 = b ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2096 always 2096
  code always "Fred<int(*)()> fred1=a, fred2=b;"
Line 2101
  40 always 40
  = always "function<void (shared_ptr<MyClass>)> v;"
  "function<void (shared_ptr<MyClass>)> v;" always "function<void (shared_ptr<MyClass>)> v;"
Line 2102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2102 always 2102
  "function < void ( shared_ptr < MyClass > ) > v ;" always "function < void ( shared_ptr < MyClass > ) > v ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2102 always 2102
  code always "function<void (shared_ptr<MyClass>)> v;"
Line 2107
  19 always 19
  = always "Fred x1(a), x2(b);"
  "Fred x1(a), x2(b);" always "Fred x1(a), x2(b);"
Line 2108
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2108 always 2108
  "Fred x1 ( a ) ; Fred x2 ( b ) ;" always "Fred x1 ( a ) ; Fred x2 ( b ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2108 always 2108
  code always "Fred x1(a), x2(b);"
Line 2112
  24 always 24
  = always "class A { B &b1,&b2; };"
  "class A { B &b1,&b2; };" always "class A { B &b1,&b2; };"
Line 2113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2113 always 2113
  "class A { B & b1 ; B & b2 ; } ;" always "class A { B & b1 ; B & b2 ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2113 always 2113
  code always "class A { B &b1,&b2; };"
Line 2120
  19 always 19
  = always "static int i = 0 ;"
  "static int i = 0 ;" always "static int i = 0 ;"
Line 2121
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2121 always 2121
  code always "static int i = 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2121 always 2121
  code always "static int i = 0 ;"
Line 2125
  17 always 17
  = always "static int a, b;"
  "static int a, b;" always "static int a, b;"
Line 2126
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2126 always 2126
  "static int a ; static int b ;" always "static int a ; static int b ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2126 always 2126
  code always "static int a, b;"
Line 2130
  26 always 26
  = always "static unsigned int a, b;"
  "static unsigned int a, b;" always "static unsigned int a, b;"
Line 2131
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2131 always 2131
  "static unsigned int a ; static unsigned int b ;" always "static unsigned int a ; static unsigned int b ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2131 always 2131
  code always "static unsigned int a, b;"
Line 2135
  21 always 21
  = always "static int a=1, b=1;"
  "static int a=1, b=1;" always "static int a=1, b=1;"
Line 2136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2136 always 2136
  "static int a = 1 ; static int b = 1 ;" always "static int a = 1 ; static int b = 1 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2136 always 2136
  code always "static int a=1, b=1;"
Line 2140
  19 always 19
  = always "static int *a, *b;"
  "static int *a, *b;" always "static int *a, *b;"
Line 2141
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2141 always 2141
  "static int * a ; static int * b ;" always "static int * a ; static int * b ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2141 always 2141
  code always "static int *a, *b;"
Line 2145
  32 always 32
  = always "static unsigned int *a=0, *b=0;"
  "static unsigned int *a=0, *b=0;" always "static unsigned int *a=0, *b=0;"
Line 2146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2146 always 2146
  "static unsigned int * a = 0 ; static unsigned int * b = 0 ;" always "static unsigned int * a = 0 ; static unsigned int * b = 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2146 always 2146
  code always "static unsigned int *a=0, *b=0;"
Line 2151
  68 always 68
  = always "static int large_eeprom_type = (13 | (5)), default_flash_type = 42;"
  "static int large_eeprom_type = (13 | (5)), default_flash_type = 42;" always "static int large_eeprom_type = (13 | (5)), default_flash_type = 42;"
Line 2153
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2153 always 2153
  "static int large_eeprom_type = 13 | 5 ; static int default_flash_type = 42 ;" always "static int large_eeprom_type = 13 | 5 ; static int default_flash_type = 42 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2153 always 2153
  code always "static int large_eeprom_type = (13 | (5)), default_flash_type = 42;"
Line 2159
  114 always 114
  = always "unsigned int x;static const unsigned int A = 1, B = A, C = 0, D = (A), E = 0;void f() {  unsigned int *foo = &x;}"
  "unsigned int x;static const unsigned int A = 1, B = A, C = 0, D = (A), E = 0;void f() {  unsigned int *foo = &x;}" always "unsigned int x;static const unsigned int A = 1, B = A, C = 0, D = (A), E = 0;void f() {  unsigned int *foo = &x;}"
Line 2164
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2164 always 2164
  "unsigned int x ; static const unsigned int A = 1 ; static const unsigned int B = A ; static const unsigned int C = 0 ; static const unsigned int D = A ; static const unsigned int E = 0 ; void f ( ) { unsigned int * foo ; foo = & x ; }" always "unsigned int x ; static const unsigned int A = 1 ; static const unsigned int B = A ; static const unsigned int C = 0 ; static const unsigned int D = A ; static const unsigned int E = 0 ; void f ( ) { unsigned int * foo ; foo = & x ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2164 always 2164
  code always "unsigned int x;static const unsigned int A = 1, B = A, C = 0, D = (A), E = 0;void f() {  unsigned int *foo = &x;}"
Line 2179
  121 always 121
  = always "class Machine {\n  static int const STACK_ORDER = 10, STACK_MAX = 1 << STACK_ORDER,                   STACK_GUARD = 2;\n};"
  "class Machine {\n  static int const STACK_ORDER = 10, STACK_MAX = 1 << STACK_ORDER,                   STACK_GUARD = 2;\n};" always "class Machine {\n  static int const STACK_ORDER = 10, STACK_MAX = 1 << STACK_ORDER,                   STACK_GUARD = 2;\n};"
Line 2183
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2183 always 2183
  "class Machine {\nstatic const int STACK_ORDER = 10 ; static const int STACK_MAX = 1 << STACK_ORDER ; static const int STACK_GUARD = 2 ;\n} ;" always "class Machine {\nstatic const int STACK_ORDER = 10 ; static const int STACK_MAX = 1 << STACK_ORDER ; static const int STACK_GUARD = 2 ;\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2183 always 2183
  code always "class Machine {\n  static int const STACK_ORDER = 10, STACK_MAX = 1 << STACK_ORDER,                   STACK_GUARD = 2;\n};"
Line 2192
  51 always 51
  = always "void(a)(void) {\n    static int b;\n    if (b) {}\n}\n"
  "void(a)(void) {\n    static int b;\n    if (b) {}\n}\n" always "void(a)(void) {\n    static int b;\n    if (b) {}\n}\n"
Line 2196
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2196 always 2196
  "void ( a ) ( void ) {\nstatic int b ;\nif ( b ) { }\n}" always "void ( a ) ( void ) {\nstatic int b ;\nif ( b ) { }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2196 always 2196
  code always "void(a)(void) {\n    static int b;\n    if (b) {}\n}\n"
Line 2207
  17 always 17
  = always "int z = x >> 16;"
  "int z = x >> 16;" always "int z = x >> 16;"
Line 2208
  22 always 22
  = always "int z ; z = x >> 16 ;"
  "int z ; z = x >> 16 ;" always "int z ; z = x >> 16 ;"
Line 2209
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2209 always 2209
  res1 always "int z ; z = x >> 16 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2209 always 2209
  code1 always "int z = x >> 16;"
Line 2214
  78 always 78
  = always "void f() {\n    for (int c = 0; c < 0; ++c) {}\n    int t;\n    D(3 > t, \"T\");\n}"
  "void f() {\n    for (int c = 0; c < 0; ++c) {}\n    int t;\n    D(3 > t, \"T\");\n}" always "void f() {\n    for (int c = 0; c < 0; ++c) {}\n    int t;\n    D(3 > t, \"T\");\n}"
Line 2219
  80 always 80
  = always "void f ( ) {\nfor ( int c = 0 ; c < 0 ; ++ c ) { }\nint t ;\nD ( 3 > t , \"T\" ) ;\n}"
  "void f ( ) {\nfor ( int c = 0 ; c < 0 ; ++ c ) { }\nint t ;\nD ( 3 > t , \"T\" ) ;\n}" always "void f ( ) {\nfor ( int c = 0 ; c < 0 ; ++ c ) { }\nint t ;\nD ( 3 > t , \"T\" ) ;\n}"
Line 2225
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2225 always 2225
  res always "void f ( ) {\nfor ( int c = 0 ; c < 0 ; ++ c ) { }\nint t ;\nD ( 3 > t , \"T\" ) ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2225 always 2225
  code always "void f() {\n    for (int c = 0; c < 0; ++c) {}\n    int t;\n    D(3 > t, \"T\");\n}"
Line 2230
  33 always 33
  = always "char a[10]={'\\0'}, b[10]={'\\0'};"
  "char a[10]={'\\0'}, b[10]={'\\0'};" always "char a[10]={'\\0'}, b[10]={'\\0'};"
Line 2231
  54 always 54
  = always "char a [ 10 ] = { '\\0' } ; char b [ 10 ] = { '\\0' } ;"
  "char a [ 10 ] = { '\\0' } ; char b [ 10 ] = { '\\0' } ;" always "char a [ 10 ] = { '\\0' } ; char b [ 10 ] = { '\\0' } ;"
Line 2232
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2232 always 2232
  res always "char a [ 10 ] = { '\\0' } ; char b [ 10 ] = { '\\0' } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2232 always 2232
  code always "char a[10]={'\\0'}, b[10]={'\\0'};"
Line 2236
  45 always 45
  = always "char a[2] = {'A', '\\0'}, b[2] = {'B', '\\0'};"
  "char a[2] = {'A', '\\0'}, b[2] = {'B', '\\0'};" always "char a[2] = {'A', '\\0'}, b[2] = {'B', '\\0'};"
Line 2237
  64 always 64
  = always "char a [ 2 ] = { 'A' , '\\0' } ; char b [ 2 ] = { 'B' , '\\0' } ;"
  "char a [ 2 ] = { 'A' , '\\0' } ; char b [ 2 ] = { 'B' , '\\0' } ;" always "char a [ 2 ] = { 'A' , '\\0' } ; char b [ 2 ] = { 'B' , '\\0' } ;"
Line 2238
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2238 always 2238
  res always "char a [ 2 ] = { 'A' , '\\0' } ; char b [ 2 ] = { 'B' , '\\0' } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2238 always 2238
  code always "char a[2] = {'A', '\\0'}, b[2] = {'B', '\\0'};"
Line 2243
  61 always 61
  = always "char a [ 2 ] = { '-' } ; memset ( a , '-' , sizeof ( a ) ) ;"
  "char a [ 2 ] = { '-' } ; memset ( a , '-' , sizeof ( a ) ) ;" always "char a [ 2 ] = { '-' } ; memset ( a , '-' , sizeof ( a ) ) ;"
Line 2244
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2244 always 2244
  code always "char a [ 2 ] = { '-' } ; memset ( a , '-' , sizeof ( a ) ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2244 always 2244
  code always "char a [ 2 ] = { '-' } ; memset ( a , '-' , sizeof ( a ) ) ;"
Line 2249
  23 always 23
  = always "char a[5][8], b[5][8];"
  "char a[5][8], b[5][8];" always "char a[5][8], b[5][8];"
Line 2250
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2250 always 2250
  "char a [ 5 ] [ 8 ] ; char b [ 5 ] [ 8 ] ;" always "char a [ 5 ] [ 8 ] ; char b [ 5 ] [ 8 ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2250 always 2250
  code always "char a[5][8], b[5][8];"
Line 2254
  36 always 36
  = always "struct A { public: B a, b, c, d; };"
  "struct A { public: B a, b, c, d; };" always "struct A { public: B a, b, c, d; };"
Line 2255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2255 always 2255
  "struct A { public: B a ; B b ; B c ; B d ; } ;" always "struct A { public: B a ; B b ; B c ; B d ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2255 always 2255
  code always "struct A { public: B a, b, c, d; };"
Line 2259
  42 always 42
  = always "void f() {\n    int a = (x < y) ? 1 : 0;\n}"
  "void f() {\n    int a = (x < y) ? 1 : 0;\n}" always "void f() {\n    int a = (x < y) ? 1 : 0;\n}"
Line 2262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2262 always 2262
  "void f ( ) {\nint a ; a = ( x < y ) ? 1 : 0 ;\n}" always "void f ( ) {\nint a ; a = ( x < y ) ? 1 : 0 ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2262 always 2262
  code always "void f() {\n    int a = (x < y) ? 1 : 0;\n}"
Line 2266
  43 always 43
  = always "::std::tr1::shared_ptr<int> pNum1, pNum2;\n"
  "::std::tr1::shared_ptr<int> pNum1, pNum2;\n" always "::std::tr1::shared_ptr<int> pNum1, pNum2;\n"
Line 2267
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2267 always 2267
  ":: std :: tr1 :: shared_ptr < int > pNum1 ; :: std :: tr1 :: shared_ptr < int > pNum2 ;" always ":: std :: tr1 :: shared_ptr < int > pNum1 ; :: std :: tr1 :: shared_ptr < int > pNum2 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2267 always 2267
  code always "::std::tr1::shared_ptr<int> pNum1, pNum2;\n"
  false always 0
  "test.cpp" always "test.cpp"
  false always 0
Line 2271
  38 always 38
  = always "const char x[] = \"foo\", y[] = \"bar\";\n"
  "const char x[] = \"foo\", y[] = \"bar\";\n" always "const char x[] = \"foo\", y[] = \"bar\";\n"
Line 2272
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2272 always 2272
  "const char x [ 4 ] = \"foo\" ; const char y [ 4 ] = \"bar\" ;" always "const char x [ 4 ] = \"foo\" ; const char y [ 4 ] = \"bar\" ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2272 always 2272
  code always "const char x[] = \"foo\", y[] = \"bar\";\n"
Line 2277
  64 always 64
  = always "const a::b<c,d(e),f>::g::h<i>::l *x [] = foo(),y [][] = bar();\n"
  "const a::b<c,d(e),f>::g::h<i>::l *x [] = foo(),y [][] = bar();\n" always "const a::b<c,d(e),f>::g::h<i>::l *x [] = foo(),y [][] = bar();\n"
Line 2278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2278 always 2278
  "const a :: b < c , d ( e ) , f > :: g :: h < i > :: l * x [ ] = foo ( ) ; const a :: b < c , d ( e ) , f > :: g :: h < i > :: l y [ ] [ ] = bar ( ) ;" always "const a :: b < c , d ( e ) , f > :: g :: h < i > :: l * x [ ] = foo ( ) ; const a :: b < c , d ( e ) , f > :: g :: h < i > :: l y [ ] [ ] = bar ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2278 always 2278
  code always "const a::b<c,d(e),f>::g::h<i>::l *x [] = foo(),y [][] = bar();\n"
Line 2283
  63 always 63
  = always "const ::b<c,d(e),f>::g::h<i>::l *x [] = foo(),y [][] = bar();\n"
  "const ::b<c,d(e),f>::g::h<i>::l *x [] = foo(),y [][] = bar();\n" always "const ::b<c,d(e),f>::g::h<i>::l *x [] = foo(),y [][] = bar();\n"
Line 2284
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2284 always 2284
  "const :: b < c , d ( e ) , f > :: g :: h < i > :: l * x [ ] = foo ( ) ; const :: b < c , d ( e ) , f > :: g :: h < i > :: l y [ ] [ ] = bar ( ) ;" always "const :: b < c , d ( e ) , f > :: g :: h < i > :: l * x [ ] = foo ( ) ; const :: b < c , d ( e ) , f > :: g :: h < i > :: l y [ ] [ ] = bar ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2284 always 2284
  code always "const ::b<c,d(e),f>::g::h<i>::l *x [] = foo(),y [][] = bar();\n"
Line 2290
  52 always 52
  = always "a < b > :: c :: d :: e < f > x = foo(), y = bar();\n"
  "a < b > :: c :: d :: e < f > x = foo(), y = bar();\n" always "a < b > :: c :: d :: e < f > x = foo(), y = bar();\n"
Line 2291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2291 always 2291
  "a < b > :: c :: d :: e < f > x ; x = foo ( ) ; a < b > :: c :: d :: e < f > y ; y = bar ( ) ;" always "a < b > :: c :: d :: e < f > x ; x = foo ( ) ; a < b > :: c :: d :: e < f > y ; y = bar ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2291 always 2291
  code always "a < b > :: c :: d :: e < f > x = foo(), y = bar();\n"
Line 2296
  44 always 44
  = always "void f() {\n    g((double)v1*v2, v3, v4);\n}\n"
  "void f() {\n    g((double)v1*v2, v3, v4);\n}\n" always "void f() {\n    g((double)v1*v2, v3, v4);\n}\n"
Line 2300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2300 always 2300
  "void f ( ) {\ng ( ( double ) v1 * v2 , v3 , v4 ) ;\n}" always "void f ( ) {\ng ( ( double ) v1 * v2 , v3 , v4 ) ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2300 always 2300
  code always "void f() {\n    g((double)v1*v2, v3, v4);\n}\n"
Line 2307
  40 always 40
  = always "void func(in, r, m)\nint in;int r,m;{\n}\n"
  "void func(in, r, m)\nint in;int r,m;{\n}\n" always "void func(in, r, m)\nint in;int r,m;{\n}\n"
Line 2313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2313 always 2313
  "void func (\nint in , int r , int m\n)\n{\n}" always "void func (\nint in , int r , int m\n)\n{\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2313 always 2313
  code always "void func(in, r, m)\nint in;int r,m;{\n}\n"
Line 2320
  26 always 26
  = always "void f(r,f)\nchar *r;\n{\n}\n"
  "void f(r,f)\nchar *r;\n{\n}\n" always "void f(r,f)\nchar *r;\n{\n}\n"
Line 2325
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2325 always 2325
  "void f (\nchar * r\n)\n\n{\n}" always "void f (\nchar * r\n)\n\n{\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2325 always 2325
  code always "void f(r,f)\nchar *r;\n{\n}\n"
Line 2333
  15 always 15
  = always "void f(f)\n{\n}\n"
  "void f(f)\n{\n}\n" always "void f(f)\n{\n}\n"
Line 2337
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2337 always 2337
  "void f ( )\n{\n}" always "void f ( )\n{\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2337 always 2337
  code always "void f(f)\n{\n}\n"
Line 2342
  26 always 26
  = always "void f(f,r)\nchar *r;\n{\n}\n"
  "void f(f,r)\nchar *r;\n{\n}\n" always "void f(f,r)\nchar *r;\n{\n}\n"
Line 2347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2347 always 2347
  "void f (\nchar * r\n)\n\n{\n}" always "void f (\nchar * r\n)\n\n{\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2347 always 2347
  code always "void f(f,r)\nchar *r;\n{\n}\n"
Line 2355
  37 always 37
  = always "void f(r,f,s)\nchar *r;\nchar *s;\n{\n}\n"
  "void f(r,f,s)\nchar *r;\nchar *s;\n{\n}\n" always "void f(r,f,s)\nchar *r;\nchar *s;\n{\n}\n"
Line 2361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2361 always 2361
  "void f (\nchar * r ,\nchar * s\n)\n\n\n{\n}" always "void f (\nchar * r ,\nchar * s\n)\n\n\n{\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2361 always 2361
  code always "void f(r,f,s)\nchar *r;\nchar *s;\n{\n}\n"
Line 2371
  34 always 34
  = always "void f(r,s,t)\nchar *r,*s,*t;\n{\n}\n"
  "void f(r,s,t)\nchar *r,*s,*t;\n{\n}\n" always "void f(r,s,t)\nchar *r,*s,*t;\n{\n}\n"
Line 2376
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2376 always 2376
  "void f (\nchar * r , char * s , char * t\n)\n\n{\n}" always "void f (\nchar * r , char * s , char * t\n)\n\n{\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2376 always 2376
  code always "void f(r,s,t)\nchar *r,*s,*t;\n{\n}\n"
Line 2384
  40 always 40
  = always "void f(a, b) register char *a, *b;\n{\n}\n"
  "void f(a, b) register char *a, *b;\n{\n}\n" always "void f(a, b) register char *a, *b;\n{\n}\n"
Line 2388
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2388 always 2388
  "void f ( char * a , char * b )\n{\n}" always "void f ( char * a , char * b )\n{\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2388 always 2388
  code always "void f(a, b) register char *a, *b;\n{\n}\n"
Line 2396
  53 always 53
  = always "void a::b() const\n{\n    register const int X = 0;\n}\n"
  "void a::b() const\n{\n    register const int X = 0;\n}\n" always "void a::b() const\n{\n    register const int X = 0;\n}\n"
Line 2400
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2400 always 2400
  "void a :: b ( ) const\n{\nconst int X = 0 ;\n}" always "void a :: b ( ) const\n{\nconst int X = 0 ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2400 always 2400
  code always "void a::b() const\n{\n    register const int X = 0;\n}\n"
Line 2408
  37 always 37
  = always "void f() {\n    a::b const *p = 0;\n}\n"
  "void f() {\n    a::b const *p = 0;\n}\n" always "void f() {\n    a::b const *p = 0;\n}\n"
Line 2411
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2411 always 2411
  "void f ( ) {\nconst a :: b * p ; p = 0 ;\n}" always "void f ( ) {\nconst a :: b * p ; p = 0 ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2411 always 2411
  code1 always "void f() {\n    a::b const *p = 0;\n}\n"
Line 2417
  39 always 39
  = always "void f() {\n    ::a::b const *p = 0;\n}\n"
  "void f() {\n    ::a::b const *p = 0;\n}\n" always "void f() {\n    ::a::b const *p = 0;\n}\n"
Line 2420
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2420 always 2420
  "void f ( ) {\nconst :: a :: b * p ; p = 0 ;\n}" always "void f ( ) {\nconst :: a :: b * p ; p = 0 ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2420 always 2420
  code2 always "void f() {\n    ::a::b const *p = 0;\n}\n"
Line 2427
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2427 always 2427
  "A<B<C<int>> >* p = 0;" always "A<B<C<int>> >* p = 0;"
Line 2431
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2431 always 2431
  "class a { protected : template < class int x = 1 ; public : int f ( ) ; }" always "class a { protected : template < class int x = 1 ; public : int f ( ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2431 always 2431
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2431 always 2431
  false always 0
Line 2435
  105 always 105
  = always "void f() {\n    std::for_each(ints.begin(), ints.end(), [](int val)\n    {\n        int temp = 0;\n    });\n}"
  "void f() {\n    std::for_each(ints.begin(), ints.end(), [](int val)\n    {\n        int temp = 0;\n    });\n}" always "void f() {\n    std::for_each(ints.begin(), ints.end(), [](int val)\n    {\n        int temp = 0;\n    });\n}"
Line 2442
  115 always 115
  = always "void f ( ) {\nstd :: for_each ( ints . begin ( ) , ints . end ( ) , [ ] ( int val )\n{\nint temp ; temp = 0 ;\n} ) ;\n}"
  "void f ( ) {\nstd :: for_each ( ints . begin ( ) , ints . end ( ) , [ ] ( int val )\n{\nint temp ; temp = 0 ;\n} ) ;\n}" always "void f ( ) {\nstd :: for_each ( ints . begin ( ) , ints . end ( ) , [ ] ( int val )\n{\nint temp ; temp = 0 ;\n} ) ;\n}"
Line 2449
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2449 always 2449
  expected1 always "void f ( ) {\nstd :: for_each ( ints . begin ( ) , ints . end ( ) , [ ] ( int val )\n{\nint temp ; temp = 0 ;\n} ) ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2449 always 2449
  code1 always "void f() {\n    std::for_each(ints.begin(), ints.end(), [](int val)\n    {\n        int temp = 0;\n    });\n}"
Line 2451
  52 always 52
  = always "void f(int j) {\n    g( [](){int temp = 0;} , j );\n}"
  "void f(int j) {\n    g( [](){int temp = 0;} , j );\n}" always "void f(int j) {\n    g( [](){int temp = 0;} , j );\n}"
Line 2455
  67 always 67
  = always "void f ( int j ) {\ng ( [ ] ( ) { int temp ; temp = 0 ; } , j ) ;\n}"
  "void f ( int j ) {\ng ( [ ] ( ) { int temp ; temp = 0 ; } , j ) ;\n}" always "void f ( int j ) {\ng ( [ ] ( ) { int temp ; temp = 0 ; } , j ) ;\n}"
Line 2459
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2459 always 2459
  expected2 always "void f ( int j ) {\ng ( [ ] ( ) { int temp ; temp = 0 ; } , j ) ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2459 always 2459
  code2 always "void f(int j) {\n    g( [](){int temp = 0;} , j );\n}"
Line 2463
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2463 always 2463
  "void A::func(P g) const {}\nvoid A::a() {\n   b = new d(  [this]( const P & p) -> double { return this->func(p);}  );\n}" always "void A::func(P g) const {}\nvoid A::a() {\n   b = new d(  [this]( const P & p) -> double { return this->func(p);}  );\n}"
Line 2470
  30 always 30
  = always "extern int *new, obj, player;"
  "extern int *new, obj, player;" always "extern int *new, obj, player;"
Line 2471
  56 always 56
  = always "extern int * new ; extern int obj ; extern int player ;"
  "extern int * new ; extern int obj ; extern int player ;" always "extern int * new ; extern int obj ; extern int player ;"
Line 2472
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2472 always 2472
  expected always "extern int * new ; extern int obj ; extern int player ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2472 always 2472
  code always "extern int *new, obj, player;"
  true always 1
  "test.c" always "test.c"
Line 2473
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2473 always 2473
  expected always "extern int * new ; extern int obj ; extern int player ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2473 always 2473
  code always "extern int *new, obj, player;"
Line 2477
  86 always 86
  = always "extern int foo(char);\nvoid* class(char c) {\n  if (foo(c))\n    return 0;\n  return 0;\n}"
  "extern int foo(char);\nvoid* class(char c) {\n  if (foo(c))\n    return 0;\n  return 0;\n}" always "extern int foo(char);\nvoid* class(char c) {\n  if (foo(c))\n    return 0;\n  return 0;\n}"
Line 2483
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2483 always 2483
  code always "extern int foo(char);\nvoid* class(char c) {\n  if (foo(c))\n    return 0;\n  return 0;\n}"
  true always 1
  "test.c" always "test.c"
Line 2487
  77 always 77
  = always "unsigned short f(void) {\n    unsigned short const int x = 1;\n    return x;\n}"
  "unsigned short f(void) {\n    unsigned short const int x = 1;\n    return x;\n}" always "unsigned short f(void) {\n    unsigned short const int x = 1;\n    return x;\n}"
Line 2491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2491 always 2491
  "unsigned short f ( ) {\nconst unsigned short x ; x = 1 ;\nreturn x ;\n}" always "unsigned short f ( ) {\nconst unsigned short x ; x = 1 ;\nreturn x ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2491 always 2491
  code always "unsigned short f(void) {\n    unsigned short const int x = 1;\n    return x;\n}"
  true always 1
  "test.c" always "test.c"
Line 2500
  55 always 55
  = always "volatile int a=0;\nvolatile int b=0;\nvolatile int c=0;\n"
  "volatile int a=0;\nvolatile int b=0;\nvolatile int c=0;\n" always "volatile int a=0;\nvolatile int b=0;\nvolatile int c=0;\n"
Line 2504
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2504 always 2504
  code always "volatile int a=0;\nvolatile int b=0;\nvolatile int c=0;\n"
Line 2506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2506 always 2506
  "volatile int a ; a = 0 ;\nvolatile int b ; b = 0 ;\nvolatile int c ; c = 0 ;" always "volatile int a ; a = 0 ;\nvolatile int b ; b = 0 ;\nvolatile int c ; c = 0 ;"
Line 2509
  34 always 34
  = always "char *volatile s1, *volatile s2;\n"
  "char *volatile s1, *volatile s2;\n" always "char *volatile s1, *volatile s2;\n"
Line 2511
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2511 always 2511
  code always "char *volatile s1, *volatile s2;\n"
Line 2513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2513 always 2513
  "char * volatile s1 ; char * volatile s2 ;" always "char * volatile s1 ; char * volatile s2 ;"
Line 2520
  29 always 29
  = always "void f (int a [ static 5] );"
  "void f (int a [ static 5] );" always "void f (int a [ static 5] );"
Line 2521
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2521 always 2521
  "void f ( int a [ 5 ] ) ;" always "void f ( int a [ 5 ] ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2521 always 2521
  code always "void f (int a [ static 5] );"
Line 2524
  36 always 36
  = always "struct B final : A { void foo(); };"
  "struct B final : A { void foo(); };" always "struct B final : A { void foo(); };"
Line 2525
  34 always 34
  = always "struct B : A { void foo ( ) ; } ;"
  "struct B : A { void foo ( ) ; } ;" always "struct B : A { void foo ( ) ; } ;"
Line 2526
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2526 always 2526
  out4 always "struct B : A { void foo ( ) ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2526 always 2526
  in4 always "struct B final : A { void foo(); };"
Line 2528
  164 always 164
  = always "struct ArrayItemsValidator final {\n    SchemaError validate() const override {\n        for (; pos < value.size(); ++pos) {\n        }\n        return none;\n    }\n};\n"
  "struct ArrayItemsValidator final {\n    SchemaError validate() const override {\n        for (; pos < value.size(); ++pos) {\n        }\n        return none;\n    }\n};\n" always "struct ArrayItemsValidator final {\n    SchemaError validate() const override {\n        for (; pos < value.size(); ++pos) {\n        }\n        return none;\n    }\n};\n"
Line 2535
  137 always 137
  = always "struct ArrayItemsValidator {\nSchemaError validate ( ) const override {\nfor ( ; pos < value . size ( ) ; ++ pos ) {\n}\nreturn none ;\n}\n} ;"
Line 2536
  "struct ArrayItemsValidator {\nSchemaError validate ( ) const override {\nfor ( ; pos < value . size ( ) ; ++ pos ) {\n}\nreturn none ;\n}\n} ;" always "struct ArrayItemsValidator {\nSchemaError validate ( ) const override {\nfor ( ; pos < value . size ( ) ; ++ pos ) {\n}\nreturn none ;\n}\n} ;"
Line 2544
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2544 always 2544
  out5 always "struct ArrayItemsValidator {\nSchemaError validate ( ) const override {\nfor ( ; pos < value . size ( ) ; ++ pos ) {\n}\nreturn none ;\n}\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2544 always 2544
  in5 always "struct ArrayItemsValidator final {\n    SchemaError validate() const override {\n        for (; pos < value.size(); ++pos) {\n        }\n        return none;\n    }\n};\n"
Line 2548
  72 always 72
  = always "thread_local void *thread_local_var; __thread void *thread_local_var_2;"
  "thread_local void *thread_local_var; __thread void *thread_local_var_2;" always "thread_local void *thread_local_var; __thread void *thread_local_var_2;"
Line 2550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2550 always 2550
  "static void * thread_local_var ; void * thread_local_var_2 ;" always "static void * thread_local_var ; void * thread_local_var_2 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2550 always 2550
  code always "thread_local void *thread_local_var; __thread void *thread_local_var_2;"
Line 2556
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2556 always 2556
  "const int x ;" always "const int x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2556 always 2556
  "const x;" always "const x;"
Line 2557
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2557 always 2557
  "const int * x ;" always "const int * x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2557 always 2557
  "const *x;" always "const *x;"
Line 2558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2558 always 2558
  "const int * f ( ) ;" always "const int * f ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2558 always 2558
  "const *f();" always "const *f();"
Line 2562
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2562 always 2562
  "extern int x ;" always "extern int x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2562 always 2562
  "extern x;" always "extern x;"
Line 2563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2563 always 2563
  "extern int * x ;" always "extern int * x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2563 always 2563
  "extern *x;" always "extern *x;"
Line 2564
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2564 always 2564
  "const int * f ( ) ;" always "const int * f ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2564 always 2564
  "const *f();" always "const *f();"
Line 2572
  34 always 34
  = always "void foo ( signed int , float ) ;"
  "void foo ( signed int , float ) ;" always "void foo ( signed int , float ) ;"
Line 2573
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2573 always 2573
  code1 always "void foo ( signed int , float ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2573 always 2573
  code1 always "void foo ( signed int , float ) ;"
Line 2577
  11 always 11
  = always "signed i ;"
  "signed i ;" always "signed i ;"
Line 2578
  15 always 15
  = always "signed int i ;"
  "signed int i ;" always "signed int i ;"
Line 2579
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2579 always 2579
  code2 always "signed int i ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2579 always 2579
  code1 always "signed i ;"
Line 2583
  15 always 15
  = always "signed int i ;"
  "signed int i ;" always "signed int i ;"
Line 2584
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2584 always 2584
  code1 always "signed int i ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2584 always 2584
  code1 always "signed int i ;"
Line 2588
  15 always 15
  = always "int signed i ;"
  "int signed i ;" always "int signed i ;"
Line 2589
  15 always 15
  = always "signed int i ;"
  "signed int i ;" always "signed int i ;"
Line 2590
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2590 always 2590
  code2 always "signed int i ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2590 always 2590
  code1 always "int signed i ;"
Line 2594
  44 always 44
  = always "void f() { for (signed i=0; i<10; i++) {} }"
  "void f() { for (signed i=0; i<10; i++) {} }" always "void f() { for (signed i=0; i<10; i++) {} }"
Line 2595
  60 always 60
  = always "void f ( ) { for ( signed int i = 0 ; i < 10 ; i ++ ) { } }"
  "void f ( ) { for ( signed int i = 0 ; i < 10 ; i ++ ) { } }" always "void f ( ) { for ( signed int i = 0 ; i < 10 ; i ++ ) { } }"
Line 2596
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2596 always 2596
  code2 always "void f ( ) { for ( signed int i = 0 ; i < 10 ; i ++ ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2596 always 2596
  code1 always "void f() { for (signed i=0; i<10; i++) {} }"
Line 2607
  36 always 36
  = always "void foo ( unsigned int , float ) ;"
  "void foo ( unsigned int , float ) ;" always "void foo ( unsigned int , float ) ;"
Line 2608
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2608 always 2608
  code always "void foo ( unsigned int , float ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2608 always 2608
  code always "void foo ( unsigned int , float ) ;"
Line 2613
  13 always 13
  = always "unsigned i ;"
  "unsigned i ;" always "unsigned i ;"
Line 2614
  17 always 17
  = always "unsigned int i ;"
  "unsigned int i ;" always "unsigned int i ;"
Line 2615
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2615 always 2615
  code2 always "unsigned int i ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2615 always 2615
  code1 always "unsigned i ;"
Line 2619
  17 always 17
  = always "int unsigned i ;"
  "int unsigned i ;" always "int unsigned i ;"
Line 2620
  17 always 17
  = always "unsigned int i ;"
  "unsigned int i ;" always "unsigned int i ;"
Line 2621
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2621 always 2621
  code2 always "unsigned int i ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2621 always 2621
  code1 always "int unsigned i ;"
Line 2626
  46 always 46
  = always "void f() { for (unsigned i=0; i<10; i++) {} }"
  "void f() { for (unsigned i=0; i<10; i++) {} }" always "void f() { for (unsigned i=0; i<10; i++) {} }"
Line 2627
  62 always 62
  = always "void f ( ) { for ( unsigned int i = 0 ; i < 10 ; i ++ ) { } }"
  "void f ( ) { for ( unsigned int i = 0 ; i < 10 ; i ++ ) { } }" always "void f ( ) { for ( unsigned int i = 0 ; i < 10 ; i ++ ) { } }"
Line 2628
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2628 always 2628
  code2 always "void f ( ) { for ( unsigned int i = 0 ; i < 10 ; i ++ ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2628 always 2628
  code1 always "void f() { for (unsigned i=0; i<10; i++) {} }"
Line 2633
  21 always 21
  = always "; extern unsigned x;"
  "; extern unsigned x;" always "; extern unsigned x;"
Line 2634
  26 always 26
  = always "; extern unsigned int x ;"
  "; extern unsigned int x ;" always "; extern unsigned int x ;"
Line 2635
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2635 always 2635
  code2 always "; extern unsigned int x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2635 always 2635
  code1 always "; extern unsigned x;"
Line 2640
  17 always 17
  = always "i = (unsigned)j;"
  "i = (unsigned)j;" always "i = (unsigned)j;"
Line 2641
  25 always 25
  = always "i = ( unsigned int ) j ;"
  "i = ( unsigned int ) j ;" always "i = ( unsigned int ) j ;"
Line 2642
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2642 always 2642
  expected always "i = ( unsigned int ) j ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2642 always 2642
  code always "i = (unsigned)j;"
Line 2648
  19 always 19
  = always "; foo<unsigned>();"
  "; foo<unsigned>();" always "; foo<unsigned>();"
Line 2649
  29 always 29
  = always "; foo < unsigned int > ( ) ;"
  "; foo < unsigned int > ( ) ;" always "; foo < unsigned int > ( ) ;"
Line 2650
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2650 always 2650
  expected always "; foo < unsigned int > ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2650 always 2650
  code always "; foo<unsigned>();"
Line 2654
  23 always 23
  = always "; foo<unsigned int>();"
  "; foo<unsigned int>();" always "; foo<unsigned int>();"
Line 2655
  29 always 29
  = always "; foo < unsigned int > ( ) ;"
  "; foo < unsigned int > ( ) ;" always "; foo < unsigned int > ( ) ;"
Line 2656
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2656 always 2656
  expected always "; foo < unsigned int > ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2656 always 2656
  code always "; foo<unsigned int>();"
Line 2663
  26 always 26
  = always "long long unsigned int x;"
  "long long unsigned int x;" always "long long unsigned int x;"
Line 2664
  23 always 23
  = always "unsigned long long x ;"
  "unsigned long long x ;" always "unsigned long long x ;"
Line 2665
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2665 always 2665
  expected always "unsigned long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2665 always 2665
  code always "long long unsigned int x;"
Line 2668
  26 always 26
  = always "long long int unsigned x;"
  "long long int unsigned x;" always "long long int unsigned x;"
Line 2669
  23 always 23
  = always "unsigned long long x ;"
  "unsigned long long x ;" always "unsigned long long x ;"
Line 2670
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2670 always 2670
  expected always "unsigned long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2670 always 2670
  code always "long long int unsigned x;"
Line 2673
  26 always 26
  = always "unsigned long long int x;"
  "unsigned long long int x;" always "unsigned long long int x;"
Line 2674
  23 always 23
  = always "unsigned long long x ;"
  "unsigned long long x ;" always "unsigned long long x ;"
Line 2675
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2675 always 2675
  expected always "unsigned long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2675 always 2675
  code always "unsigned long long int x;"
Line 2678
  26 always 26
  = always "unsigned int long long x;"
  "unsigned int long long x;" always "unsigned int long long x;"
Line 2679
  23 always 23
  = always "unsigned long long x ;"
  "unsigned long long x ;" always "unsigned long long x ;"
Line 2680
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2680 always 2680
  expected always "unsigned long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2680 always 2680
  code always "unsigned int long long x;"
Line 2683
  26 always 26
  = always "int unsigned long long x;"
  "int unsigned long long x;" always "int unsigned long long x;"
Line 2684
  23 always 23
  = always "unsigned long long x ;"
  "unsigned long long x ;" always "unsigned long long x ;"
Line 2685
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2685 always 2685
  expected always "unsigned long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2685 always 2685
  code always "int unsigned long long x;"
Line 2688
  26 always 26
  = always "int long long unsigned x;"
  "int long long unsigned x;" always "int long long unsigned x;"
Line 2689
  23 always 23
  = always "unsigned long long x ;"
  "unsigned long long x ;" always "unsigned long long x ;"
Line 2690
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2690 always 2690
  expected always "unsigned long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2690 always 2690
  code always "int long long unsigned x;"
Line 2694
  24 always 24
  = always "long long signed int x;"
  "long long signed int x;" always "long long signed int x;"
Line 2695
  21 always 21
  = always "signed long long x ;"
  "signed long long x ;" always "signed long long x ;"
Line 2696
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2696 always 2696
  expected always "signed long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2696 always 2696
  code always "long long signed int x;"
Line 2699
  24 always 24
  = always "long long int signed x;"
  "long long int signed x;" always "long long int signed x;"
Line 2700
  21 always 21
  = always "signed long long x ;"
  "signed long long x ;" always "signed long long x ;"
Line 2701
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2701 always 2701
  expected always "signed long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2701 always 2701
  code always "long long int signed x;"
Line 2704
  24 always 24
  = always "signed long long int x;"
  "signed long long int x;" always "signed long long int x;"
Line 2705
  21 always 21
  = always "signed long long x ;"
  "signed long long x ;" always "signed long long x ;"
Line 2706
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2706 always 2706
  expected always "signed long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2706 always 2706
  code always "signed long long int x;"
Line 2709
  24 always 24
  = always "signed int long long x;"
  "signed int long long x;" always "signed int long long x;"
Line 2710
  21 always 21
  = always "signed long long x ;"
  "signed long long x ;" always "signed long long x ;"
Line 2711
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2711 always 2711
  expected always "signed long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2711 always 2711
  code always "signed int long long x;"
Line 2714
  24 always 24
  = always "int signed long long x;"
  "int signed long long x;" always "int signed long long x;"
Line 2715
  21 always 21
  = always "signed long long x ;"
  "signed long long x ;" always "signed long long x ;"
Line 2716
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2716 always 2716
  expected always "signed long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2716 always 2716
  code always "int signed long long x;"
Line 2719
  24 always 24
  = always "int long long signed x;"
  "int long long signed x;" always "int long long signed x;"
Line 2720
  21 always 21
  = always "signed long long x ;"
  "signed long long x ;" always "signed long long x ;"
Line 2721
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2721 always 2721
  expected always "signed long long x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2721 always 2721
  code always "int long long signed x;"
Line 2725
  22 always 22
  = always "short unsigned int x;"
  "short unsigned int x;" always "short unsigned int x;"
Line 2726
  19 always 19
  = always "unsigned short x ;"
  "unsigned short x ;" always "unsigned short x ;"
Line 2727
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2727 always 2727
  expected always "unsigned short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2727 always 2727
  code always "short unsigned int x;"
Line 2730
  22 always 22
  = always "short int unsigned x;"
  "short int unsigned x;" always "short int unsigned x;"
Line 2731
  19 always 19
  = always "unsigned short x ;"
  "unsigned short x ;" always "unsigned short x ;"
Line 2732
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2732 always 2732
  expected always "unsigned short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2732 always 2732
  code always "short int unsigned x;"
Line 2735
  22 always 22
  = always "unsigned short int x;"
  "unsigned short int x;" always "unsigned short int x;"
Line 2736
  19 always 19
  = always "unsigned short x ;"
  "unsigned short x ;" always "unsigned short x ;"
Line 2737
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2737 always 2737
  expected always "unsigned short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2737 always 2737
  code always "unsigned short int x;"
Line 2740
  22 always 22
  = always "unsigned int short x;"
  "unsigned int short x;" always "unsigned int short x;"
Line 2741
  19 always 19
  = always "unsigned short x ;"
  "unsigned short x ;" always "unsigned short x ;"
Line 2742
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2742 always 2742
  expected always "unsigned short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2742 always 2742
  code always "unsigned int short x;"
Line 2745
  22 always 22
  = always "int unsigned short x;"
  "int unsigned short x;" always "int unsigned short x;"
Line 2746
  19 always 19
  = always "unsigned short x ;"
  "unsigned short x ;" always "unsigned short x ;"
Line 2747
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2747 always 2747
  expected always "unsigned short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2747 always 2747
  code always "int unsigned short x;"
Line 2750
  22 always 22
  = always "int short unsigned x;"
  "int short unsigned x;" always "int short unsigned x;"
Line 2751
  19 always 19
  = always "unsigned short x ;"
  "unsigned short x ;" always "unsigned short x ;"
Line 2752
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2752 always 2752
  expected always "unsigned short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2752 always 2752
  code always "int short unsigned x;"
Line 2756
  20 always 20
  = always "short signed int x;"
  "short signed int x;" always "short signed int x;"
Line 2757
  17 always 17
  = always "signed short x ;"
  "signed short x ;" always "signed short x ;"
Line 2758
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2758 always 2758
  expected always "signed short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2758 always 2758
  code always "short signed int x;"
Line 2761
  20 always 20
  = always "short int signed x;"
  "short int signed x;" always "short int signed x;"
Line 2762
  17 always 17
  = always "signed short x ;"
  "signed short x ;" always "signed short x ;"
Line 2763
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2763 always 2763
  expected always "signed short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2763 always 2763
  code always "short int signed x;"
Line 2766
  20 always 20
  = always "signed short int x;"
  "signed short int x;" always "signed short int x;"
Line 2767
  17 always 17
  = always "signed short x ;"
  "signed short x ;" always "signed short x ;"
Line 2768
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2768 always 2768
  expected always "signed short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2768 always 2768
  code always "signed short int x;"
Line 2771
  20 always 20
  = always "signed int short x;"
  "signed int short x;" always "signed int short x;"
Line 2772
  17 always 17
  = always "signed short x ;"
  "signed short x ;" always "signed short x ;"
Line 2773
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2773 always 2773
  expected always "signed short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2773 always 2773
  code always "signed int short x;"
Line 2776
  20 always 20
  = always "int signed short x;"
  "int signed short x;" always "int signed short x;"
Line 2777
  17 always 17
  = always "signed short x ;"
  "signed short x ;" always "signed short x ;"
Line 2778
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2778 always 2778
  expected always "signed short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2778 always 2778
  code always "int signed short x;"
Line 2781
  20 always 20
  = always "int short signed x;"
  "int short signed x;" always "int short signed x;"
Line 2782
  17 always 17
  = always "signed short x ;"
  "signed short x ;" always "signed short x ;"
Line 2783
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2783 always 2783
  expected always "signed short x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2783 always 2783
  code always "int short signed x;"
Line 2786
  35 always 35
  = always "unsigned static short const int i;"
  "unsigned static short const int i;" always "unsigned static short const int i;"
Line 2787
  32 always 32
  = always "static const unsigned short i ;"
  "static const unsigned short i ;" always "static const unsigned short i ;"
Line 2788
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2788 always 2788
  expected always "static const unsigned short i ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2788 always 2788
  code always "unsigned static short const int i;"
Line 2791
  17 always 17
  = always "float complex x;"
  "float complex x;" always "float complex x;"
Line 2792
  19 always 19
  = always "_Complex float x ;"
  "_Complex float x ;" always "_Complex float x ;"
Line 2793
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2793 always 2793
  expected always "_Complex float x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2793 always 2793
  code always "float complex x;"
Line 2796
  17 always 17
  = always "complex float x;"
  "complex float x;" always "complex float x;"
Line 2797
  19 always 19
  = always "_Complex float x ;"
  "_Complex float x ;" always "_Complex float x ;"
Line 2798
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2798 always 2798
  expected always "_Complex float x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2798 always 2798
  code always "complex float x;"
Line 2801
  23 always 23
  = always "complex long double x;"
  "complex long double x;" always "complex long double x;"
Line 2802
  25 always 25
  = always "_Complex long double x ;"
  "_Complex long double x ;" always "_Complex long double x ;"
Line 2803
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2803 always 2803
  expected always "_Complex long double x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2803 always 2803
  code always "complex long double x;"
Line 2806
  23 always 23
  = always "long double complex x;"
  "long double complex x;" always "long double complex x;"
Line 2807
  25 always 25
  = always "_Complex long double x ;"
  "_Complex long double x ;" always "_Complex long double x ;"
Line 2808
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2808 always 2808
  expected always "_Complex long double x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2808 always 2808
  code always "long double complex x;"
Line 2811
  16 always 16
  = always "double complex;"
  "double complex;" always "double complex;"
Line 2812
  17 always 17
  = always "double complex ;"
  "double complex ;" always "double complex ;"
Line 2813
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2813 always 2813
  expected always "double complex ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2813 always 2813
  code always "double complex;"
Line 2819
  25 always 25
  = always "class A{\n void f() {}\n};"
  "class A{\n void f() {}\n};" always "class A{\n void f() {}\n};"
Line 2822
  "" always ""
Line 2823
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2824
  code always "class A{\n void f() {}\n};"
Line 2825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2825 always 2825
  "test.cpp" always "test.cpp"
Line 2828
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2828 always 2828
  true always 1
  2 always 2
  == always {!<=-1,!>=2}
  9 always 9
Line 2829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2829 always 2829
  true always 1
  9 always 9
  == always {!<=-1,!>=2}
  2 always 2
Line 2832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2832 always 2832
  true always 1
  7 always 7
  == always {!<=-1,!>=2}
  8 always 8
Line 2833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2833 always 2833
  true always 1
  8 always 8
  == always {!<=-1,!>=2}
  7 always 7
Line 2836
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2836 always 2836
  true always 1
  5 always 5
  == always {!<=-1,!>=2}
  6 always 6
Line 2837
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2837 always 2837
  true always 1
  6 always 6
  == always {!<=-1,!>=2}
  5 always 5
Line 2839
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2839 always 2839
  "" always ""
Line 2843
  57 always 57
  = always "void f(){\n char a[10];\n char *b ; b = new char[a[0]];\n};"
  "void f(){\n char a[10];\n char *b ; b = new char[a[0]];\n};" always "void f(){\n char a[10];\n char *b ; b = new char[a[0]];\n};"
Line 2847
  "" always ""
Line 2848
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2849
  code always "void f(){\n char a[10];\n char *b ; b = new char[a[0]];\n};"
Line 2850
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2850 always 2850
  "test.cpp" always "test.cpp"
Line 2853
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2853 always 2853
  true always 1
  7 always 7
  == always {!<=-1,!>=2}
  9 always 9
Line 2854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2854 always 2854
  true always 1
  9 always 9
  == always {!<=-1,!>=2}
  7 always 7
Line 2857
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2857 always 2857
  true always 1
  19 always 19
  == always {!<=-1,!>=2}
  24 always 24
Line 2858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2858 always 2858
  true always 1
  24 always 24
  == always {!<=-1,!>=2}
  19 always 19
Line 2861
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2861 always 2861
  true always 1
  21 always 21
  == always {!<=-1,!>=2}
  23 always 23
Line 2862
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2862 always 2862
  true always 1
  23 always 23
  == always {!<=-1,!>=2}
  21 always 21
Line 2864
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2864 always 2864
  "" always ""
Line 2868
  24 always 24
  = always "void f(){\n foo(g());\n};"
  "void f(){\n foo(g());\n};" always "void f(){\n foo(g());\n};"
Line 2871
  "" always ""
Line 2872
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2873
  code always "void f(){\n foo(g());\n};"
Line 2874
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2874 always 2874
  "test.cpp" always "test.cpp"
Line 2877
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2877 always 2877
  true always 1
  6 always 6
  == always {!<=-1,!>=2}
  10 always 10
Line 2878
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2878 always 2878
  true always 1
  10 always 10
  == always {!<=-1,!>=2}
  6 always 6
Line 2881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2881 always 2881
  true always 1
  8 always 8
  == always {!<=-1,!>=2}
  9 always 9
Line 2882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2882 always 2882
  true always 1
  9 always 9
  == always {!<=-1,!>=2}
  8 always 8
Line 2884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2884 always 2884
  "" always ""
Line 2888
  75 always 75
  = always "bool foo(C<z> a, bar<int, x<float>>& f, int b) {\n    return(a<b && b>f);\n}"
  "bool foo(C<z> a, bar<int, x<float>>& f, int b) {\n    return(a<b && b>f);\n}" always "bool foo(C<z> a, bar<int, x<float>>& f, int b) {\n    return(a<b && b>f);\n}"
Line 2891
  "" always ""
Line 2892
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2893
  code always "bool foo(C<z> a, bar<int, x<float>>& f, int b) {\n    return(a<b && b>f);\n}"
Line 2894
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2894 always 2894
  "test.cpp" always "test.cpp"
Line 2897
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2897 always 2897
  true always 1
  6 always 6
  == always {!<=-1,!>=2}
  4 always 4
Line 2898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2898 always 2898
  true always 1
  4 always 4
  == always {!<=-1,!>=2}
  6 always 6
Line 2901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2901 always 2901
  true always 1
  17 always 17
  == always {!<=-1,!>=2}
  10 always 10
Line 2902
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2902 always 2902
  true always 1
  10 always 10
  == always {!<=-1,!>=2}
  17 always 17
Line 2905
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2905 always 2905
  true always 1
  16 always 16
  == always {!<=-1,!>=2}
  14 always 14
Line 2906
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2906 always 2906
  true always 1
  14 always 14
  == always {!<=-1,!>=2}
  16 always 16
Line 2909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2909 always 2909
  true always 1
  nullptr always 0
  == always {!<=-1,!>=2}
  28 always 28
Line 2910
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2910 always 2910
  true always 1
  nullptr always 0
  == always {!<=-1,!>=2}
  32 always 32
Line 2912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2912 always 2912
  "" always ""
Line 2916
  47 always 47
  = always "void foo() {\n    return static_cast<bar>(a);\n}"
  "void foo() {\n    return static_cast<bar>(a);\n}" always "void foo() {\n    return static_cast<bar>(a);\n}"
Line 2919
  "" always ""
Line 2920
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2921
  code always "void foo() {\n    return static_cast<bar>(a);\n}"
Line 2922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2922 always 2922
  "test.cpp" always "test.cpp"
Line 2926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2926 always 2926
  true always 1
  9 always 9
  == always {!<=-1,!>=2}
  7 always 7
Line 2927
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2927 always 2927
  true always 1
  7 always 7
  == always {!<=-1,!>=2}
  9 always 9
Line 2929
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2929 always 2929
  "" always ""
Line 2933
  44 always 44
  = always "void foo() {\n    nvwa<(x > y)> ERROR_nnn;\n}"
  "void foo() {\n    nvwa<(x > y)> ERROR_nnn;\n}" always "void foo() {\n    nvwa<(x > y)> ERROR_nnn;\n}"
Line 2936
  "" always ""
Line 2937
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2938
  code always "void foo() {\n    nvwa<(x > y)> ERROR_nnn;\n}"
Line 2939
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2939 always 2939
  "test.cpp" always "test.cpp"
Line 2943
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2943 always 2943
  true always 1
  12 always 12
  == always {!<=-1,!>=2}
  6 always 6
Line 2944
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2944 always 2944
  true always 1
  6 always 6
  == always {!<=-1,!>=2}
  12 always 12
Line 2946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2946 always 2946
  "" always ""
Line 2951
  28 always 28
  = always "class A : public B<int> {};"
  "class A : public B<int> {};" always "class A : public B<int> {};"
Line 2952
  "" always ""
Line 2953
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2954
  code always "class A : public B<int> {};"
Line 2955
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2955 always 2955
  "test.cpp" always "test.cpp"
Line 2959
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2959 always 2959
  true always 1
  5 always 5
  == always {!<=-1,!>=2}
  7 always 7
Line 2960
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2960 always 2960
  true always 1
  5 always 5
  == always {!<=-1,!>=2}
  7 always 7
Line 2962
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2962 always 2962
  "" always ""
Line 2967
  80 always 80
  = always "Bar<Typelist< int, Typelist< int, Typelist< int, FooNullType>>>>::set(1, 2, 3);"
  "Bar<Typelist< int, Typelist< int, Typelist< int, FooNullType>>>>::set(1, 2, 3);" always "Bar<Typelist< int, Typelist< int, Typelist< int, FooNullType>>>>::set(1, 2, 3);"
Line 2968
  "" always ""
Line 2969
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2970
  code always "Bar<Typelist< int, Typelist< int, Typelist< int, FooNullType>>>>::set(1, 2, 3);"
Line 2971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2971 always 2971
  "test.cpp" always "test.cpp"
Line 2974
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2974 always 2974
  true always 1
  1 always 1
  == always {!<=-1,!>=2}
  18 always 18
Line 2975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2975 always 2975
  true always 1
  3 always 3
  == always {!<=-1,!>=2}
  17 always 17
Line 2976
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2976 always 2976
  true always 1
  7 always 7
  == always {!<=-1,!>=2}
  16 always 16
Line 2977
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2977 always 2977
  true always 1
  11 always 11
  == always {!<=-1,!>=2}
  15 always 15
Line 2979
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2979 always 2979
  "" always ""
Line 2984
  18 always 18
  = always "new Foo<Bar>[10];"
  "new Foo<Bar>[10];" always "new Foo<Bar>[10];"
Line 2985
  "" always ""
Line 2986
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 2987
  code always "new Foo<Bar>[10];"
Line 2988
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2988 always 2988
  "test.cpp" always "test.cpp"
Line 2991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2991 always 2991
  true always 1
  2 always 2
  == always {!<=-1,!>=2}
  4 always 4
Line 2992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2992 always 2992
  true always 1
  4 always 4
  == always {!<=-1,!>=2}
  2 always 2
Line 2993
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2993 always 2993
  true always 1
  5 always 5
  == always {!<=-1,!>=2}
  7 always 7
Line 2994
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2994 always 2994
  true always 1
  7 always 7
  == always {!<=-1,!>=2}
  5 always 5
Line 2996
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  2996 always 2996
  "" always ""
Line 3000
  38 always 38
  = always "func = integral_<uchar, int, double>;"
  "func = integral_<uchar, int, double>;" always "func = integral_<uchar, int, double>;"
Line 3001
  "" always ""
Line 3002
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3003
  code always "func = integral_<uchar, int, double>;"
Line 3004
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3004 always 3004
  "test.cpp" always "test.cpp"
Line 3007
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3007 always 3007
  true always 1
  3 always 3
  == always {!<=-1,!>=2}
  9 always 9
Line 3008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3008 always 3008
  true always 1
  3 always 3
  == always {!<=-1,!>=2}
  9 always 9
Line 3010
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3010 always 3010
  "" always ""
Line 3015
  25 always 25
  = always "{ if (a < b || c > d); }"
  "{ if (a < b || c > d); }" always "{ if (a < b || c > d); }"
Line 3016
  "" always ""
Line 3017
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3018
  code always "{ if (a < b || c > d); }"
Line 3019
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3019 always 3019
  "test.cpp" always "test.cpp"
Line 3022
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3022 always 3022
  true always 1
  3 always 3
  == always {!<=-1,!>=2}
  nullptr always 0
Line 3027
  25 always 25
  = always "bool f = a < b || c > d;"
  "bool f = a < b || c > d;" always "bool f = a < b || c > d;"
Line 3028
  "" always ""
Line 3029
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3030
  code always "bool f = a < b || c > d;"
Line 3031
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3031 always 3031
  "test.cpp" always "test.cpp"
Line 3034
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3034 always 3034
  true always 1
  4 always 4
  == always {!<=-1,!>=2}
  nullptr always 0
Line 3039
  16 always 16
  = always "a < b || c > d;"
  "a < b || c > d;" always "a < b || c > d;"
Line 3040
  "" always ""
Line 3041
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3042
  code always "a < b || c > d;"
Line 3043
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3043 always 3043
  "test.cpp" always "test.cpp"
Line 3046
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3046 always 3046
  true always 1
  1 always 1
  == always {!<=-1,!>=2}
  5 always 5
Line 3051
  35 always 35
  = always "{ if (a < b || c == 3 || d > e); }"
  "{ if (a < b || c == 3 || d > e); }" always "{ if (a < b || c == 3 || d > e); }"
Line 3052
  "" always ""
Line 3053
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3054
  code always "{ if (a < b || c == 3 || d > e); }"
Line 3055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3055 always 3055
  "test.cpp" always "test.cpp"
Line 3058
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3058 always 3058
  true always 1
  3 always 3
  == always {!<=-1,!>=2}
  nullptr always 0
Line 3063
  16 always 16
  = always "a<b==3 || c> d;"
  "a<b==3 || c> d;" always "a<b==3 || c> d;"
Line 3064
  "" always ""
Line 3065
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3066
  code always "a<b==3 || c> d;"
Line 3067
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3067 always 3067
  "test.cpp" always "test.cpp"
Line 3069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3069 always 3069
  true always 1
  1 always 1
  == always {!<=-1,!>=2}
  7 always 7
Line 3074
  16 always 16
  = always "a<b || c==4> d;"
  "a<b || c==4> d;" always "a<b || c==4> d;"
Line 3075
  "" always ""
Line 3076
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3077
  code always "a<b || c==4> d;"
Line 3078
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3078 always 3078
  "test.cpp" always "test.cpp"
Line 3080
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3080 always 3080
  true always 1
  1 always 1
  == always {!<=-1,!>=2}
  7 always 7
Line 3084
  34 always 34
  = always "template < f = b || c > struct S;"
  "template < f = b || c > struct S;" always "template < f = b || c > struct S;"
Line 3085
  "" always ""
Line 3086
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3087
  code always "template < f = b || c > struct S;"
Line 3088
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3088 always 3088
  "test.cpp" always "test.cpp"
Line 3090
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3090 always 3090
  true always 1
  1 always 1
  == always {!<=-1,!>=2}
  7 always 7
Line 3091
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3091 always 3091
  true always 1
  1 always 1
  == always {!<=-1,!>=2}
  7 always 7
Line 3095
  23 always 23
  = always "struct A : B<c&&d> {};"
  "struct A : B<c&&d> {};" always "struct A : B<c&&d> {};"
Line 3096
  "" always ""
Line 3097
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3098
  code always "struct A : B<c&&d> {};"
Line 3099
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3099 always 3099
  "test.cpp" always "test.cpp"
Line 3101
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3101 always 3101
  true always 1
  4 always 4
  == always {!<=-1,!>=2}
  8 always 8
Line 3102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3102 always 3102
  true always 1
  4 always 4
  == always {!<=-1,!>=2}
  8 always 8
Line 3106
  11 always 11
  = always "Data<T&&>;"
  "Data<T&&>;" always "Data<T&&>;"
Line 3107
  "" always ""
Line 3108
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3109
  code always "Data<T&&>;"
Line 3110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3110 always 3110
  "test.cpp" always "test.cpp"
Line 3112
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3112 always 3112
  true always 1
  1 always 1
  == always {!<=-1,!>=2}
  4 always 4
Line 3113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3113 always 3113
  true always 1
  1 always 1
  == always {!<=-1,!>=2}
  4 always 4
Line 3118
  63 always 63
  = always "template<class R> struct FuncType<R(&)()> : FuncType<R()> { };"
  "template<class R> struct FuncType<R(&)()> : FuncType<R()> { };" always "template<class R> struct FuncType<R(&)()> : FuncType<R()> { };"
Line 3119
  "" always ""
Line 3120
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3121
  code always "template<class R> struct FuncType<R(&)()> : FuncType<R()> { };"
Line 3122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3122 always 3122
  "test.cpp" always "test.cpp"
Line 3125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3125 always 3125
  true always 1
  1 always 1
  == always {!<=-1,!>=2}
  4 always 4
Line 3126
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3126 always 3126
  true always 1
  7 always 7
  == always {!<=-1,!>=2}
  14 always 14
Line 3127
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3127 always 3127
  true always 1
  9 always 9
  == always {!<=-1,!>=2}
  11 always 11
Line 3128
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3128 always 3128
  true always 1
  12 always 12
  == always {!<=-1,!>=2}
  13 always 13
Line 3129
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3129 always 3129
  true always 1
  17 always 17
  == always {!<=-1,!>=2}
  21 always 21
Line 3130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3130 always 3130
  true always 1
  19 always 19
  == always {!<=-1,!>=2}
  20 always 20
Line 3131
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3131 always 3131
  true always 1
  22 always 22
  == always {!<=-1,!>=2}
  23 always 23
Line 3138
  41 always 41
  = always "enum { value = boost::mpl::at_c<B, C> };"
  "enum { value = boost::mpl::at_c<B, C> };" always "enum { value = boost::mpl::at_c<B, C> };"
Line 3139
  "" always ""
Line 3140
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3141
  code always "enum { value = boost::mpl::at_c<B, C> };"
Line 3142
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3142 always 3142
  "test.cpp" always "test.cpp"
Line 3143
  "<" always "<"
Line 3144
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3144 always 3144
  true always 1
  == always {!<=-1,!>=2}
  4 always 4
Line 3145
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3145 always 3145
  true always 1
  4 always 4
  == always {!<=-1,!>=2}
Line 3150
  168 always 168
  = always "template <typename T, typename U>\nstruct CheckedDivOp< T, U, typename std::enable_if<std::is_floating_point<T>::value || std::is_floating_point<U>::value>::type> {\n};\n"
  "template <typename T, typename U>\nstruct CheckedDivOp< T, U, typename std::enable_if<std::is_floating_point<T>::value || std::is_floating_point<U>::value>::type> {\n};\n" always "template <typename T, typename U>\nstruct CheckedDivOp< T, U, typename std::enable_if<std::is_floating_point<T>::value || std::is_floating_point<U>::value>::type> {\n};\n"
Line 3153
  "" always ""
Line 3154
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3155
  code always "template <typename T, typename U>\nstruct CheckedDivOp< T, U, typename std::enable_if<std::is_floating_point<T>::value || std::is_floating_point<U>::value>::type> {\n};\n"
Line 3156
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3156 always 3156
  "test.cpp" always "test.cpp"
Line 3157
  "struct" always "struct"
  2 always 2
Line 3158
  "{" always "{"
Line 3159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3159 always 3159
  true always 1
  == always {!<=-1,!>=2}
Line 3160
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3160 always 3160
  true always 1
  == always {!<=-1,!>=2}
Line 3165
  43 always 43
  = always "template <class C> X<Y&&Z, C*> copy() {};\n"
  "template <class C> X<Y&&Z, C*> copy() {};\n" always "template <class C> X<Y&&Z, C*> copy() {};\n"
Line 3166
  "" always ""
Line 3167
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3168
  code always "template <class C> X<Y&&Z, C*> copy() {};\n"
Line 3169
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3169 always 3169
  "test.cpp" always "test.cpp"
Line 3170
  "< Y" always "< Y"
Line 3171
  "> copy" always "> copy"
Line 3172
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3172 always 3172
  true always 1
  == always {!<=-1,!>=2}
Line 3173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3173 always 3173
  true always 1
  == always {!<=-1,!>=2}
Line 3178
  17 always 17
  = always "C<int> && a = b;"
  "C<int> && a = b;" always "C<int> && a = b;"
Line 3179
  "" always ""
Line 3180
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3181
  code always "C<int> && a = b;"
Line 3182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3182 always 3182
  "test.cpp" always "test.cpp"
Line 3184
  2 always 2
Line 3185
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3185 always 3185
  true always 1
  == always {!<=-1,!>=2}
Line 3186
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3186 always 3186
  true always 1
  == always {!<=-1,!>=2}
Line 3191
  24 always 24
  = always "void Test(C<int> && c);"
  "void Test(C<int> && c);" always "void Test(C<int> && c);"
Line 3192
  "" always ""
Line 3193
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3194
  code always "void Test(C<int> && c);"
Line 3195
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3195 always 3195
  "test.cpp" always "test.cpp"
Line 3196
  "<" always "<"
Line 3197
  2 always 2
Line 3198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3198 always 3198
  true always 1
  == always {!<=-1,!>=2}
Line 3199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3199 always 3199
  true always 1
  == always {!<=-1,!>=2}
Line 3203
  75 always 75
  = always "template<int N> struct A {}; template<int... Ns> struct foo : A<Ns>... {};"
  "template<int N> struct A {}; template<int... Ns> struct foo : A<Ns>... {};" always "template<int N> struct A {}; template<int... Ns> struct foo : A<Ns>... {};"
Line 3205
  "" always ""
Line 3206
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3207
  code always "template<int N> struct A {}; template<int... Ns> struct foo : A<Ns>... {};"
Line 3208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3208 always 3208
  "test.cpp" always "test.cpp"
Line 3209
  "A <" always "A <"
Line 3210
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3210 always 3210
  true always 1
  == always {!<=-1,!>=2}
  3 always 3
Line 3214
  91 always 91
  = always "template<typename std::enable_if<!(std::value1) && std::value2>::type>void basic_json() {}"
  "template<typename std::enable_if<!(std::value1) && std::value2>::type>void basic_json() {}" always "template<typename std::enable_if<!(std::value1) && std::value2>::type>void basic_json() {}"
Line 3216
  "" always ""
Line 3217
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3218
  code always "template<typename std::enable_if<!(std::value1) && std::value2>::type>void basic_json() {}"
Line 3219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3219 always 3219
  "test.cpp" always "test.cpp"
Line 3220
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3220 always 3220
  true always 1
  "> void" always "> void"
Line 3225
  21 always 21
  = always "a = f(x%x<--a==x>x);"
  "a = f(x%x<--a==x>x);" always "a = f(x%x<--a==x>x);"
Line 3226
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3227
  code always "a = f(x%x<--a==x>x);"
Line 3228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3228 always 3228
  "test.cpp" always "test.cpp"
Line 3229
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3229 always 3229
  nullptr always 0
  == always {!<=-1,!>=2}
  "<" always "<"
Line 3234
  30 always 30
  = always "using std::list; list<t *> l;"
  "using std::list; list<t *> l;" always "using std::list; list<t *> l;"
Line 3235
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3236
  code always "using std::list; list<t *> l;"
Line 3237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3237 always 3237
  "test.cpp" always "test.cpp"
Line 3238
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3238 always 3238
  nullptr always 0
  != always {!<=-1,!>=2}
  "<" always "<"
Line 3242
  120 always 120
  = always "using std::set;\nvoid foo()\n{\n    for (set<ParticleSource*>::iterator i = sources.begin(); i != sources.end(); ++i) {}\n}"
  "using std::set;\nvoid foo()\n{\n    for (set<ParticleSource*>::iterator i = sources.begin(); i != sources.end(); ++i) {}\n}" always "using std::set;\nvoid foo()\n{\n    for (set<ParticleSource*>::iterator i = sources.begin(); i != sources.end(); ++i) {}\n}"
Line 3247
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3248
  code always "using std::set;\nvoid foo()\n{\n    for (set<ParticleSource*>::iterator i = sources.begin(); i != sources.end(); ++i) {}\n}"
Line 3249
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3249 always 3249
  "test.cpp" always "test.cpp"
Line 3250
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3250 always 3250
  nullptr always 0
  != always {!<=-1,!>=2}
  "<" always "<"
Line 3255
  37 always 37
  = always "void f() {\n  a<> b;\n  b.a<>::c();\n}\n"
  "void f() {\n  a<> b;\n  b.a<>::c();\n}\n" always "void f() {\n  a<> b;\n  b.a<>::c();\n}\n"
Line 3259
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3260
  code always "void f() {\n  a<> b;\n  b.a<>::c();\n}\n"
Line 3261
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3261 always 3261
  "test.cpp" always "test.cpp"
Line 3262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3262 always 3262
  nullptr always 0
  != always {!<=-1,!>=2}
  "> ::" always "> ::"
Line 3267
  89 always 89
  = always "template <char> char * a;\ntemplate <char... b> struct c {\n  void d() { a<b...>[0]; }\n};\n"
  "template <char> char * a;\ntemplate <char... b> struct c {\n  void d() { a<b...>[0]; }\n};\n" always "template <char> char * a;\ntemplate <char... b> struct c {\n  void d() { a<b...>[0]; }\n};\n"
Line 3271
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3272
  code always "template <char> char * a;\ntemplate <char... b> struct c {\n  void d() { a<b...>[0]; }\n};\n"
Line 3273
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3273 always 3273
  "test.cpp" always "test.cpp"
Line 3274
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3274 always 3274
  nullptr always 0
  != always {!<=-1,!>=2}
  "> [" always "> ["
Line 3279
  235 always 235
  = always "template <bool> struct a;\ntemplate <bool b, typename> using c = typename a<b>::d;\ntemplate <typename e> using f = c<e() && sizeof(int), int>;\ntemplate <typename e, typename = f<e>> struct g {};\ntemplate <typename e> using baz = g<e>;\n"
  "template <bool> struct a;\ntemplate <bool b, typename> using c = typename a<b>::d;\ntemplate <typename e> using f = c<e() && sizeof(int), int>;\ntemplate <typename e, typename = f<e>> struct g {};\ntemplate <typename e> using baz = g<e>;\n" always "template <bool> struct a;\ntemplate <bool b, typename> using c = typename a<b>::d;\ntemplate <typename e> using f = c<e() && sizeof(int), int>;\ntemplate <typename e, typename = f<e>> struct g {};\ntemplate <typename e> using baz = g<e>;\n"
Line 3284
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3285
  code always "template <bool> struct a;\ntemplate <bool b, typename> using c = typename a<b>::d;\ntemplate <typename e> using f = c<e() && sizeof(int), int>;\ntemplate <typename e, typename = f<e>> struct g {};\ntemplate <typename e> using baz = g<e>;\n"
Line 3286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3286 always 3286
  "test.cpp" always "test.cpp"
Line 3287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3287 always 3287
  nullptr always 0
  != always {!<=-1,!>=2}
  "> ;" always "> ;"
Line 3292
  122 always 122
  = always "struct a {\n  typedef int b;\n  operator b();\n};\ntemplate <int> using c = a;\ntemplate <int d> c<d> e;\nauto f = -e<1> == 0;\n"
  "struct a {\n  typedef int b;\n  operator b();\n};\ntemplate <int> using c = a;\ntemplate <int d> c<d> e;\nauto f = -e<1> == 0;\n" always "struct a {\n  typedef int b;\n  operator b();\n};\ntemplate <int> using c = a;\ntemplate <int d> c<d> e;\nauto f = -e<1> == 0;\n"
Line 3299
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3300
  code always "struct a {\n  typedef int b;\n  operator b();\n};\ntemplate <int> using c = a;\ntemplate <int d> c<d> e;\nauto f = -e<1> == 0;\n"
Line 3301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3301 always 3301
  "test.cpp" always "test.cpp"
Line 3302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3302 always 3302
  nullptr always 0
  != always {!<=-1,!>=2}
  "> ==" always "> =="
Line 3307
  322 always 322
  = always "template <typename a, a> struct b {\n  template <typename c> constexpr void operator()(c &&) const;\n};\ntemplate <int d> struct e { b<int, d> f; };\ntemplate <int g> using h = e<g>;\ntemplate <int g> h<g> i;\ntemplate <typename a, a d>\ntemplate <typename c>\nconstexpr void b<a, d>::operator()(c &&) const {\n  i<3>.f([] {});\n}\n"
  "template <typename a, a> struct b {\n  template <typename c> constexpr void operator()(c &&) const;\n};\ntemplate <int d> struct e { b<int, d> f; };\ntemplate <int g> using h = e<g>;\ntemplate <int g> h<g> i;\ntemplate <typename a, a d>\ntemplate <typename c>\nconstexpr void b<a, d>::operator()(c &&) const {\n  i<3>.f([] {});\n}\n" always "template <typename a, a> struct b {\n  template <typename c> constexpr void operator()(c &&) const;\n};\ntemplate <int d> struct e { b<int, d> f; };\ntemplate <int g> using h = e<g>;\ntemplate <int g> h<g> i;\ntemplate <typename a, a d>\ntemplate <typename c>\nconstexpr void b<a, d>::operator()(c &&) const {\n  i<3>.f([] {});\n}\n"
Line 3318
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3319
  code always "template <typename a, a> struct b {\n  template <typename c> constexpr void operator()(c &&) const;\n};\ntemplate <int d> struct e { b<int, d> f; };\ntemplate <int g> using h = e<g>;\ntemplate <int g> h<g> i;\ntemplate <typename a, a d>\ntemplate <typename c>\nconstexpr void b<a, d>::operator()(c &&) const {\n  i<3>.f([] {});\n}\n"
Line 3320
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3320 always 3320
  "test.cpp" always "test.cpp"
Line 3321
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3321 always 3321
  nullptr always 0
  != always {!<=-1,!>=2}
  "> . f (" always "> . f ("
Line 3326
  45 always 45
  = always "template <template <class> class> struct a;\n"
  "template <template <class> class> struct a;\n" always "template <template <class> class> struct a;\n"
Line 3327
  "" always ""
Line 3328
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3329
  code always "template <template <class> class> struct a;\n"
Line 3330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3330 always 3330
  "test.cpp" always "test.cpp"
Line 3331
  "< class" always "< class"
Line 3332
  "> class" always "> class"
Line 3333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3333 always 3333
  true always 1
  == always {!<=-1,!>=2}
Line 3334
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3334 always 3334
  true always 1
  == always {!<=-1,!>=2}
Line 3339
  45 always 45
  = always "template <template <class> class> struct a;\n"
  "template <template <class> class> struct a;\n" always "template <template <class> class> struct a;\n"
Line 3340
  "" always ""
Line 3341
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3342
  code always "template <template <class> class> struct a;\n"
Line 3343
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3343 always 3343
  "test.cpp" always "test.cpp"
Line 3344
  "< template" always "< template"
Line 3345
  "> struct" always "> struct"
Line 3346
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3346 always 3346
  true always 1
  == always {!<=-1,!>=2}
Line 3347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3347 always 3347
  true always 1
  == always {!<=-1,!>=2}
Line 3352
  28 always 28
  = always "v.value<QPair<int, int>>()\n"
  "v.value<QPair<int, int>>()\n" always "v.value<QPair<int, int>>()\n"
Line 3353
  "" always ""
Line 3354
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3355
  code always "v.value<QPair<int, int>>()\n"
Line 3356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3356 always 3356
  "test.cpp" always "test.cpp"
Line 3357
  "< QPair" always "< QPair"
Line 3358
  "> (" always "> ("
Line 3359
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3359 always 3359
  true always 1
  == always {!<=-1,!>=2}
Line 3360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3360 always 3360
  true always 1
  == always {!<=-1,!>=2}
Line 3365
  28 always 28
  = always "v.value<QPair<int, int>>()\n"
  "v.value<QPair<int, int>>()\n" always "v.value<QPair<int, int>>()\n"
Line 3366
  "" always ""
Line 3367
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3368
  code always "v.value<QPair<int, int>>()\n"
Line 3369
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3369 always 3369
  "test.cpp" always "test.cpp"
Line 3370
  "< int" always "< int"
Line 3371
  "> > (" always "> > ("
Line 3372
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3372 always 3372
  true always 1
  == always {!<=-1,!>=2}
Line 3373
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3373 always 3373
  true always 1
  == always {!<=-1,!>=2}
Line 3378
  46 always 46
  = always "struct A : public B<__is_constructible()>{};\n"
  "struct A : public B<__is_constructible()>{};\n" always "struct A : public B<__is_constructible()>{};\n"
Line 3379
  "" always ""
Line 3380
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3381
  code always "struct A : public B<__is_constructible()>{};\n"
Line 3382
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3382 always 3382
  "test.cpp" always "test.cpp"
Line 3383
  "< >" always "< >"
Line 3384
  "> { } >" always "> { } >"
Line 3385
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3385 always 3385
  true always 1
  == always {!<=-1,!>=2}
Line 3386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3386 always 3386
  true always 1
  == always {!<=-1,!>=2}
Line 3391
  39 always 39
  = always "class C1 : public T1<D2<C2>const> {};\n"
  "class C1 : public T1<D2<C2>const> {};\n" always "class C1 : public T1<D2<C2>const> {};\n"
Line 3392
  "" always ""
Line 3393
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3394
  code always "class C1 : public T1<D2<C2>const> {};\n"
Line 3395
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3395 always 3395
  "test.cpp" always "test.cpp"
Line 3396
  "< C2" always "< C2"
Line 3397
  "> const" always "> const"
Line 3398
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3398 always 3398
  true always 1
  == always {!<=-1,!>=2}
Line 3399
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3399 always 3399
  true always 1
  == always {!<=-1,!>=2}
Line 3404
  "" always ""
Line 3405
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3406
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3406 always 3406
  "\"abc\"" always "\"abc\""
  "\"abc\"" always "\"abc\""
Line 3407
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3407 always 3407
  "\"\n\"" always "\"\n\""
  "\"\\xa\"" always "\"\\xa\""
Line 3408
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3408 always 3408
  "\"3\"" always "\"3\""
  "\"\\x33\"" always "\"\\x33\""
Line 3409
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3409 always 3409
  "\"33\"" always "\"33\""
  "\"\\x333\"" always "\"\\x333\""
Line 3411
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3411 always 3411
  "\"a\"" always "\"a\""
  "\"\\x61\"" always "\"\\x61\""
Line 3412
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3412 always 3412
  "\"\n1\"" always "\"\n1\""
  "\"\\0121\"" always "\"\\0121\""
Line 3414
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3414 always 3414
  "\"3\"" always "\"3\""
  "\"\\x33\"" always "\"\\x33\""
Line 3415
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3415 always 3415
  "\" 0\"" always "\" 0\""
  "\"\\0400\"" always "\"\\0400\""
Line 3417
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3417 always 3417
  "\"\\nhello\"" always "\"\\nhello\""
  "\"\\nhello\"" always "\"\\nhello\""
Line 3419
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3419 always 3419
  "\"aaa\"" always "\"aaa\""
  "\"\\x61\\x61\\x61\"" always "\"\\x61\\x61\\x61\""
Line 3420
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3420 always 3420
  "\"\n1\n1\n1\"" always "\"\n1\n1\n1\""
  "\"\\0121\\0121\\0121\"" always "\"\\0121\\0121\\0121\""
Line 3422
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3422 always 3422
  "\"\\\\x61\"" always "\"\\\\x61\""
  "\"\\\\x61\"" always "\"\\\\x61\""
Line 3423
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3423 always 3423
  "\"b\"" always "\"b\""
  "\"\\x62\"" always "\"\\x62\""
Line 3424
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3424 always 3424
  "\" 7\"" always "\" 7\""
  "\"\\0407\"" always "\"\\0407\""
Line 3427
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3427 always 3427
  "\"a" always "\"a"
  + always symbolic=(std::string("\"a"))
  '\0' always 0
  "\"" always "\""
  "\"a\\0\"" always "\"a\\0\""
Line 3431
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3431 always 3431
  "void foo ( ) { const int x ; }" always "void foo ( ) { const int x ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3431 always 3431
  "void foo(){ int const x;}" always "void foo(){ int const x;}"
Line 3434
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3434 always 3434
  "void foo ( ) { { } const long x ; }" always "void foo ( ) { { } const long x ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3434 always 3434
  "void foo(){ {} long const x;}" always "void foo(){ {} long const x;}"
Line 3437
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3437 always 3437
  "void foo ( int b , const unsigned int x ) { }" always "void foo ( int b , const unsigned int x ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3437 always 3437
  "void foo(int b,unsigned const x){}" always "void foo(int b,unsigned const x){}"
Line 3440
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3440 always 3440
  "void foo ( ) { bar ( ) ; const char x ; }" always "void foo ( ) { bar ( ) ; const char x ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3440 always 3440
  "void foo(){ bar(); char const x;}" always "void foo(){ bar(); char const x;}"
Line 3443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3443 always 3443
  "void foo ( const char x ) { }" always "void foo ( const char x ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3443 always 3443
  "void foo(char const x){}" always "void foo(char const x){}"
Line 3446
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3446 always 3446
  "void foo ( int b , const char x ) { }" always "void foo ( int b , const char x ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3446 always 3446
  "void foo(int b,char const x){}" always "void foo(int b,char const x){}"
Line 3449
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3449 always 3449
  "void foo ( ) { int * const x ; }" always "void foo ( ) { int * const x ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3449 always 3449
  "void foo(){ int * const x;}" always "void foo(){ int * const x;}"
Line 3452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3452 always 3452
  "const int foo ( ) ;" always "const int foo ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3452 always 3452
  "int const foo ();" always "int const foo ();"
Line 3454
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3454 always 3454
  "const int x ;" always "const int x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3454 always 3454
  "int const x;" always "int const x;"
Line 3455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3455 always 3455
  "const unsigned int x ;" always "const unsigned int x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3455 always 3455
  "unsigned const x;" always "unsigned const x;"
Line 3456
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3456 always 3456
  "const struct X x ;" always "const struct X x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3456 always 3456
  "struct X const x;" always "struct X const x;"
Line 3460
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3460 always 3460
  "void foo ( int i ) { switch ( i ) { case -1 : ; break ; } }" always "void foo ( int i ) { switch ( i ) { case -1 : ; break ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3460 always 3460
  "void foo (int i) { switch(i) { case -1: break; } }" always "void foo (int i) { switch(i) { case -1: break; } }"
Line 3463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3463 always 3463
  "void foo ( ) { switch ( n ) { label : ; case 1 : ; label1 : ; label2 : ; break ; } }" always "void foo ( ) { switch ( n ) { label : ; case 1 : ; label1 : ; label2 : ; break ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3463 always 3463
  "void foo(){ switch (n){ label: case 1: label1: label2: break; }}" always "void foo(){ switch (n){ label: case 1: label1: label2: break; }}"
Line 3466
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3466 always 3466
  "void foo ( ) { switch ( 0 ) { case 0 : ; default : ; } }" always "void foo ( ) { switch ( 0 ) { case 0 : ; default : ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3466 always 3466
  "void foo () { switch(0) case 0 : default : ; }" always "void foo () { switch(0) case 0 : default : ; }"
Line 3469
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3469 always 3469
  "void foo ( ) { enum Anonymous0 : int { Six = 6 } ; return Six ; }" always "void foo ( ) { enum Anonymous0 : int { Six = 6 } ; return Six ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3469 always 3469
  "void foo () { enum : int { Six = 6 } ; return Six ; }" always "void foo () { enum : int { Six = 6 } ; return Six ; }"
Line 3472
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3472 always 3472
  "void lzma_decode(int i) {   bool state;   switch (i)   while (true) {      state=false;    case 1:       ;   }}" always "void lzma_decode(int i) {   bool state;   switch (i)   while (true) {      state=false;    case 1:       ;   }}"
Line 3482
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3482 always 3482
  "void printOwnedAttributes(int mode) {   switch(mode) case 0: { break; } }" always "void printOwnedAttributes(int mode) {   switch(mode) case 0: { break; } }"
Line 3485
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3485 always 3485
  "void printOwnedAttributes(int mode) {   switch(mode) case 0: { break; } case 1: ; }" always "void printOwnedAttributes(int mode) {   switch(mode) case 0: { break; } case 1: ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3485 always 3485
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3485 always 3485
  false always 0
Line 3493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3493 always 3493
  "char buf [ 100 ] ; readlink ( path , buf , 99 ) ;" always "char buf [ 100 ] ; readlink ( path , buf , 99 ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3493 always 3493
  "char buf[100] ; readlink(path, &buf[0], 99);" always "char buf[100] ; readlink(path, &buf[0], 99);"
  true always 1
  "test.c" always "test.c"
Line 3497
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3497 always 3497
  "void foo ( char * c ) { if ( 1 == ( 1 & c [ 0 ] ) ) { } }" always "void foo ( char * c ) { if ( 1 == ( 1 & c [ 0 ] ) ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3497 always 3497
  "void foo(char *c) { if (1==(1 & c[0])) {} }" always "void foo(char *c) { if (1==(1 & c[0])) {} }"
  true always 1
  "test.c" always "test.c"
Line 3502
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3502 always 3502
  "foo data [ 100 ] ; something ( foo ) ;" always "foo data [ 100 ] ; something ( foo ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3502 always 3502
  "foo data[100]; something(&foo[0]);" always "foo data[100]; something(&foo[0]);"
  true always 1
  "test.c" always "test.c"
Line 3506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3506 always 3506
  "foo data [ 100 ] ; something ( & foo [ 0 ] ) ;" always "foo data [ 100 ] ; something ( & foo [ 0 ] ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3506 always 3506
  "foo data[100]; something(&foo[0]);" always "foo data[100]; something(&foo[0]);"
Line 3511
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3511 always 3511
  "void ( * f ) ( ) ;" always "void ( * f ) ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3511 always 3511
  "void (*f)();" always "void (*f)();"
Line 3512
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3512 always 3512
  "void * ( * f ) ( ) ;" always "void * ( * f ) ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3512 always 3512
  "void *(*f)();" always "void *(*f)();"
Line 3513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3513 always 3513
  "unsigned int ( * f ) ( ) ;" always "unsigned int ( * f ) ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3513 always 3513
  "unsigned int (*f)();" always "unsigned int (*f)();"
Line 3514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3514 always 3514
  "unsigned int * ( * f ) ( ) ;" always "unsigned int * ( * f ) ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3514 always 3514
  "unsigned int * (*f)();" always "unsigned int * (*f)();"
Line 3515
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3515 always 3515
  "void ( * f [ 2 ] ) ( ) ;" always "void ( * f [ 2 ] ) ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3515 always 3515
  "void (*f[2])();" always "void (*f[2])();"
Line 3516
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3516 always 3516
  "void ( * f [ 2 ] ) ( ) ;" always "void ( * f [ 2 ] ) ( ) ;"
  "void ( * f ) ( ) [ 2 ] ;" always "void ( * f ) ( ) [ 2 ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3516 always 3516
  "typedef void func_t(void); func_t *f[2];" always "typedef void func_t(void); func_t *f[2];"
Line 3520
  74 always 74
  = always "typedef void (* PF)();void f1 ( ) { }PF pf = &f1;PF pfs[] = { &f1, &f1 };"
  "typedef void (* PF)();void f1 ( ) { }PF pf = &f1;PF pfs[] = { &f1, &f1 };" always "typedef void (* PF)();void f1 ( ) { }PF pf = &f1;PF pfs[] = { &f1, &f1 };"
Line 3524
  91 always 91
  = always "void f1 ( ) { } void ( * pf ) ( ) ; pf = & f1 ; void ( * pfs [ ] ) ( ) = { & f1 , & f1 } ;"
  "void f1 ( ) { } void ( * pf ) ( ) ; pf = & f1 ; void ( * pfs [ ] ) ( ) = { & f1 , & f1 } ;" always "void f1 ( ) { } void ( * pf ) ( ) ; pf = & f1 ; void ( * pfs [ ] ) ( ) = { & f1 , & f1 } ;"
Line 3527
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3527 always 3527
  expected always "void f1 ( ) { } void ( * pf ) ( ) ; pf = & f1 ; void ( * pfs [ ] ) ( ) = { & f1 , & f1 } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3527 always 3527
  code always "typedef void (* PF)();void f1 ( ) { }PF pf = &f1;PF pfs[] = { &f1, &f1 };"
Line 3532
  32 always 32
  = always "void f() {\n(void)(xy(*p)(0);)\n}"
  "void f() {\n(void)(xy(*p)(0);)\n}" always "void f() {\n(void)(xy(*p)(0);)\n}"
Line 3535
  47 always 47
  = always "void f ( ) {\n( void ) ( xy ( * p ) ( 0 ) ; )\n}"
  "void f ( ) {\n( void ) ( xy ( * p ) ( 0 ) ; )\n}" always "void f ( ) {\n( void ) ( xy ( * p ) ( 0 ) ; )\n}"
Line 3538
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3538 always 3538
  expected always "void f ( ) {\n( void ) ( xy ( * p ) ( 0 ) ; )\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3538 always 3538
  code always "void f() {\n(void)(xy(*p)(0);)\n}"
Line 3542
  64 always 64
  = always "struct S\n{\n    typedef void (*FP)();\n    virtual FP getFP();\n};"
  "struct S\n{\n    typedef void (*FP)();\n    virtual FP getFP();\n};" always "struct S\n{\n    typedef void (*FP)();\n    virtual FP getFP();\n};"
Line 3547
  58 always 58
  = always "1: struct S\n2: {\n3:\n4: virtual void * getFP ( ) ;\n5: } ;\n"
  "1: struct S\n2: {\n3:\n4: virtual void * getFP ( ) ;\n5: } ;\n" always "1: struct S\n2: {\n3:\n4: virtual void * getFP ( ) ;\n5: } ;\n"
Line 3552
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3552 always 3552
  expected always "1: struct S\n2: {\n3:\n4: virtual void * getFP ( ) ;\n5: } ;\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3552 always 3552
  code always "struct S\n{\n    typedef void (*FP)();\n    virtual FP getFP();\n};"
Line 3556
  32 always 32
  = always ";void (*fp[])(int a) = {0,0,0};"
  ";void (*fp[])(int a) = {0,0,0};" always ";void (*fp[])(int a) = {0,0,0};"
Line 3557
  48 always 48
  = always "1: ; void ( * fp@1 [ ] ) ( ) = { 0 , 0 , 0 } ;\n"
  "1: ; void ( * fp@1 [ ] ) ( ) = { 0 , 0 , 0 } ;\n" always "1: ; void ( * fp@1 [ ] ) ( ) = { 0 , 0 , 0 } ;\n"
Line 3558
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3558 always 3558
  expected always "1: ; void ( * fp@1 [ ] ) ( ) = { 0 , 0 , 0 } ;\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3558 always 3558
  code always ";void (*fp[])(int a) = {0,0,0};"
Line 3562
  25 always 25
  = always "void (*fp(void))(int) {}"
  "void (*fp(void))(int) {}" always "void (*fp(void))(int) {}"
Line 3563
  22 always 22
  = always "1: void * fp ( ) { }\n"
  "1: void * fp ( ) { }\n" always "1: void * fp ( ) { }\n"
Line 3564
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3564 always 3564
  expected1 always "1: void * fp ( ) { }\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3564 always 3564
  code1 always "void (*fp(void))(int) {}"
Line 3566
  30 always 30
  = always "std::string (*fp(void))(int);"
  "std::string (*fp(void))(int);" always "std::string (*fp(void))(int);"
Line 3567
  29 always 29
  = always "1: std :: string * fp ( ) ;\n"
  "1: std :: string * fp ( ) ;\n" always "1: std :: string * fp ( ) ;\n"
Line 3568
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3568 always 3568
  expected2 always "1: std :: string * fp ( ) ;\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3568 always 3568
  code2 always "std::string (*fp(void))(int);"
Line 3572
  16 always 16
  = always "void (X::*y)();"
  "void (X::*y)();" always "void (X::*y)();"
Line 3573
  25 always 25
  = always "1: void ( * y@1 ) ( ) ;\n"
  "1: void ( * y@1 ) ( ) ;\n" always "1: void ( * y@1 ) ( ) ;\n"
Line 3574
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3574 always 3574
  expected1 always "1: void ( * y@1 ) ( ) ;\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3574 always 3574
  code1 always "void (X::*y)();"
Line 3578
  23 always 23
  = always "int (*f)() throw(int);"
  "int (*f)() throw(int);" always "int (*f)() throw(int);"
Line 3579
  24 always 24
  = always "1: int ( * f@1 ) ( ) ;\n"
  "1: int ( * f@1 ) ( ) ;\n" always "1: int ( * f@1 ) ( ) ;\n"
Line 3580
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3580 always 3580
  expected1 always "1: int ( * f@1 ) ( ) ;\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3580 always 3580
  code1 always "int (*f)() throw(int);"
Line 3584
  20 always 20
  = always "int f() { (*f)(); }"
  "int f() { (*f)(); }" always "int f() { (*f)(); }"
Line 3585
  32 always 32
  = always "1: int f ( ) { ( * f ) ( ) ; }\n"
  "1: int f ( ) { ( * f ) ( ) ; }\n" always "1: int f ( ) { ( * f ) ( ) ; }\n"
Line 3586
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3586 always 3586
  expected1 always "1: int f ( ) { ( * f ) ( ) ; }\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3586 always 3586
  code1 always "int f() { (*f)(); }"
Line 3588
  27 always 27
  = always "int f() { return (*f)(); }"
  "int f() { return (*f)(); }" always "int f() { return (*f)(); }"
Line 3589
  39 always 39
  = always "1: int f ( ) { return ( * f ) ( ) ; }\n"
  "1: int f ( ) { return ( * f ) ( ) ; }\n" always "1: int f ( ) { return ( * f ) ( ) ; }\n"
Line 3590
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3590 always 3590
  expected2 always "1: int f ( ) { return ( * f ) ( ) ; }\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3590 always 3590
  code2 always "int f() { return (*f)(); }"
Line 3592
  26 always 26
  = always "int f() { throw (*f)(); }"
  "int f() { throw (*f)(); }" always "int f() { throw (*f)(); }"
Line 3593
  38 always 38
  = always "1: int f ( ) { throw ( * f ) ( ) ; }\n"
  "1: int f ( ) { throw ( * f ) ( ) ; }\n" always "1: int f ( ) { throw ( * f ) ( ) ; }\n"
Line 3594
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3594 always 3594
  expected3 always "1: int f ( ) { throw ( * f ) ( ) ; }\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3594 always 3594
  code3 always "int f() { throw (*f)(); }"
Line 3598
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3598 always 3598
  "a b" always "a b"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3598 always 3598
  "a __declspec ( dllexport ) b" always "a __declspec ( dllexport ) b"
Line 3599
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3599 always 3599
  "a b" always "a b"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3599 always 3599
  "a _declspec ( dllexport ) b" always "a _declspec ( dllexport ) b"
Line 3600
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3600 always 3600
  "int a ;" always "int a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3600 always 3600
  "__declspec(thread) __declspec(align(32)) int a;" always "__declspec(thread) __declspec(align(32)) int a;"
Line 3601
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3601 always 3601
  "int i ;" always "int i ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3601 always 3601
  "__declspec(allocate(\"mycode\")) int i;" always "__declspec(allocate(\"mycode\")) int i;"
Line 3602
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3602 always 3602
  "struct IUnknown ;" always "struct IUnknown ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3602 always 3602
  "struct __declspec(uuid(\"00000000-0000-0000-c000-000000000046\")) IUnknown;" always "struct __declspec(uuid(\"00000000-0000-0000-c000-000000000046\")) IUnknown;"
Line 3603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3603 always 3603
  "__property int x [ ] ;" always "__property int x [ ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3603 always 3603
  "__declspec(property(get=GetX, put=PutX)) int x[];" always "__declspec(property(get=GetX, put=PutX)) int x[];"
Line 3607
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3607 always 3607
  "short array [ 3 ] ;" always "short array [ 3 ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3607 always 3607
  "short array[3] __attribute__ ((aligned));" always "short array[3] __attribute__ ((aligned));"
Line 3608
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3608 always 3608
  "int x [ 2 ] ;" always "int x [ 2 ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3608 always 3608
  "int x[2] __attribute__ ((packed));" always "int x[2] __attribute__ ((packed));"
Line 3609
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3609 always 3609
  "int vecint ;" always "int vecint ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3609 always 3609
  "int __attribute__((mode(SI))) __attribute__((vector_size (16))) vecint;" always "int __attribute__((mode(SI))) __attribute__((vector_size (16))) vecint;"
Line 3612
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3612 always 3612
  "short array [ 3 ] ;" always "short array [ 3 ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3612 always 3612
  "short array[3] __attribute ((aligned));" always "short array[3] __attribute ((aligned));"
Line 3613
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3613 always 3613
  "int x [ 2 ] ;" always "int x [ 2 ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3613 always 3613
  "int x[2] __attribute ((packed));" always "int x[2] __attribute ((packed));"
Line 3614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3614 always 3614
  "int vecint ;" always "int vecint ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3614 always 3614
  "int __attribute((mode(SI))) __attribute((vector_size (16))) vecint;" always "int __attribute((mode(SI))) __attribute((vector_size (16))) vecint;"
Line 3616
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3616 always 3616
  "struct Payload_IR_config { uint8_t tap [ 16 ] ; } ;" always "struct Payload_IR_config { uint8_t tap [ 16 ] ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3616 always 3616
  "struct __attribute__((packed, gcc_struct)) Payload_IR_config { uint8_t tap[16]; };" always "struct __attribute__((packed, gcc_struct)) Payload_IR_config { uint8_t tap[16]; };"
Line 3620
  400 always 400
  = always "void __attribute__((pure)) __attribute__((nothrow)) __attribute__((const)) func1();\nvoid __attribute__((__pure__)) __attribute__((__nothrow__)) __attribute__((__const__)) func2();\nvoid __attribute__((nothrow)) __attribute__((pure)) __attribute__((const)) func3();\nvoid __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__const__)) func4();\nvoid __attribute__((noreturn)) func5();"
  "void __attribute__((pure)) __attribute__((nothrow)) __attribute__((const)) func1();\nvoid __attribute__((__pure__)) __attribute__((__nothrow__)) __attribute__((__const__)) func2();\nvoid __attribute__((nothrow)) __attribute__((pure)) __attribute__((const)) func3();\nvoid __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__const__)) func4();\nvoid __attribute__((noreturn)) func5();" always "void __attribute__((pure)) __attribute__((nothrow)) __attribute__((const)) func1();\nvoid __attribute__((__pure__)) __attribute__((__nothrow__)) __attribute__((__const__)) func2();\nvoid __attribute__((nothrow)) __attribute__((pure)) __attribute__((const)) func3();\nvoid __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__const__)) func4();\nvoid __attribute__((noreturn)) func5();"
Line 3625
  85 always 85
  = always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ;"
  "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ;" always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ;"
Line 3627
  "" always ""
Line 3630
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3631
  code always "void __attribute__((pure)) __attribute__((nothrow)) __attribute__((const)) func1();\nvoid __attribute__((__pure__)) __attribute__((__nothrow__)) __attribute__((__const__)) func2();\nvoid __attribute__((nothrow)) __attribute__((pure)) __attribute__((const)) func3();\nvoid __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__const__)) func4();\nvoid __attribute__((noreturn)) func5();"
Line 3632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3632 always 3632
  "test.cpp" always "test.cpp"
Line 3635
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3635 always 3635
  expected always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ;"
  nullptr always 0
  false always 0
Line 3637
  "func1" always "func1"
Line 3638
  "func2" always "func2"
Line 3639
  "func3" always "func3"
Line 3640
  "func4" always "func4"
Line 3641
  "func5" always "func5"
Line 3643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3643 always 3643
  && always {!<=-1,!>=2}
  func1 always !0
  && always {!<=-1,!>=2}
  func1 always !0
  && always {!<=-1,!>=2}
Line 3644
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3644 always 3644
  && always {!<=-1,!>=2}
  func2 always !0
  && always {!<=-1,!>=2}
  func2 always !0
  && always {!<=-1,!>=2}
Line 3645
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3645 always 3645
  && always {!<=-1,!>=2}
  func3 always !0
  && always {!<=-1,!>=2}
  func3 always !0
  && always {!<=-1,!>=2}
Line 3646
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3646 always 3646
  && always {!<=-1,!>=2}
  func4 always !0
  && always {!<=-1,!>=2}
  func4 always !0
  && always {!<=-1,!>=2}
Line 3647
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3647 always 3647
  && always {!<=-1,!>=2}
  func5 always !0
Line 3651
  54 always 54
  = always "extern vas_f *VAS_Fail __attribute__((__noreturn__));"
  "extern vas_f *VAS_Fail __attribute__((__noreturn__));" always "extern vas_f *VAS_Fail __attribute__((__noreturn__));"
Line 3652
  26 always 26
  = always "extern vas_f * VAS_Fail ;"
  "extern vas_f * VAS_Fail ;" always "extern vas_f * VAS_Fail ;"
Line 3654
  "" always ""
Line 3657
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3658
  code always "extern vas_f *VAS_Fail __attribute__((__noreturn__));"
Line 3659
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3659 always 3659
  "test.cpp" always "test.cpp"
Line 3660
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3660 always 3660
  expected always "extern vas_f * VAS_Fail ;"
  nullptr always 0
  false always 0
Line 3662
  "VAS_Fail" always "VAS_Fail"
Line 3663
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3663 always 3663
  && always {!<=-1,!>=2}
  VAS_Fail always !0
Line 3667
  57 always 57
  = always "void __attribute__((__noreturn__)) (*func_notret)(void);"
  "void __attribute__((__noreturn__)) (*func_notret)(void);" always "void __attribute__((__noreturn__)) (*func_notret)(void);"
Line 3668
  29 always 29
  = always "void ( * func_notret ) ( ) ;"
  "void ( * func_notret ) ( ) ;" always "void ( * func_notret ) ( ) ;"
Line 3670
  "" always ""
Line 3673
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3674
  code always "void __attribute__((__noreturn__)) (*func_notret)(void);"
Line 3675
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3675 always 3675
  "test.cpp" always "test.cpp"
Line 3676
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3676 always 3676
  expected always "void ( * func_notret ) ( ) ;"
  nullptr always 0
  false always 0
Line 3678
  "func_notret" always "func_notret"
Line 3679
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3679 always 3679
  && always {!<=-1,!>=2}
  func_notret always !0
Line 3683
  35 always 35
  = always "__attribute__((const)) int& foo();"
  "__attribute__((const)) int& foo();" always "__attribute__((const)) int& foo();"
Line 3684
  16 always 16
  = always "int & foo ( ) ;"
  "int & foo ( ) ;" always "int & foo ( ) ;"
Line 3686
  "" always ""
Line 3689
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3690
  code always "__attribute__((const)) int& foo();"
Line 3691
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3691 always 3691
  "test.cpp" always "test.cpp"
Line 3692
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3692 always 3692
  expected always "int & foo ( ) ;"
  nullptr always 0
  false always 0
Line 3694
  "foo" always "foo"
Line 3695
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3695 always 3695
  && always {!<=-1,!>=2}
  foo always !0
Line 3699
  399 always 399
  = always "void func1() __attribute__((pure)) __attribute__((nothrow)) __attribute__((const));\nvoid func2() __attribute__((__pure__)) __attribute__((__nothrow__)) __attribute__((__const__));\nvoid func3() __attribute__((nothrow)) __attribute__((pure)) __attribute__((const));\nvoid func4() __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__const__));void func5() __attribute__((noreturn));"
  "void func1() __attribute__((pure)) __attribute__((nothrow)) __attribute__((const));\nvoid func2() __attribute__((__pure__)) __attribute__((__nothrow__)) __attribute__((__const__));\nvoid func3() __attribute__((nothrow)) __attribute__((pure)) __attribute__((const));\nvoid func4() __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__const__));void func5() __attribute__((noreturn));" always "void func1() __attribute__((pure)) __attribute__((nothrow)) __attribute__((const));\nvoid func2() __attribute__((__pure__)) __attribute__((__nothrow__)) __attribute__((__const__));\nvoid func3() __attribute__((nothrow)) __attribute__((pure)) __attribute__((const));\nvoid func4() __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__const__));void func5() __attribute__((noreturn));"
Line 3704
  85 always 85
  = always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ;"
  "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ;" always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ;"
Line 3706
  "" always ""
Line 3709
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3710
  code always "void func1() __attribute__((pure)) __attribute__((nothrow)) __attribute__((const));\nvoid func2() __attribute__((__pure__)) __attribute__((__nothrow__)) __attribute__((__const__));\nvoid func3() __attribute__((nothrow)) __attribute__((pure)) __attribute__((const));\nvoid func4() __attribute__((__nothrow__)) __attribute__((__pure__)) __attribute__((__const__));void func5() __attribute__((noreturn));"
Line 3711
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3711 always 3711
  "test.cpp" always "test.cpp"
Line 3714
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3714 always 3714
  expected always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ;"
  nullptr always 0
  false always 0
Line 3716
  "func1" always "func1"
Line 3717
  "func2" always "func2"
Line 3718
  "func3" always "func3"
Line 3719
  "func4" always "func4"
Line 3720
  "func5" always "func5"
Line 3722
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3722 always 3722
  && always {!<=-1,!>=2}
  func1 always !0
  && always {!<=-1,!>=2}
  func1 always !0
  && always {!<=-1,!>=2}
Line 3723
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3723 always 3723
  && always {!<=-1,!>=2}
  func2 always !0
  && always {!<=-1,!>=2}
  func2 always !0
  && always {!<=-1,!>=2}
Line 3724
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3724 always 3724
  && always {!<=-1,!>=2}
  func3 always !0
  && always {!<=-1,!>=2}
  func3 always !0
  && always {!<=-1,!>=2}
Line 3725
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3725 always 3725
  && always {!<=-1,!>=2}
  func4 always !0
  && always {!<=-1,!>=2}
  func4 always !0
  && always {!<=-1,!>=2}
Line 3726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3726 always 3726
  && always {!<=-1,!>=2}
  func5 always !0
Line 3730
  83 always 83
  = always "class foo {\npublic:\n    bool operator==(const foo &) __attribute__((__pure__));\n};"
  "class foo {\npublic:\n    bool operator==(const foo &) __attribute__((__pure__));\n};" always "class foo {\npublic:\n    bool operator==(const foo &) __attribute__((__pure__));\n};"
Line 3734
  58 always 58
  = always "class foo { public: bool operator== ( const foo & ) ; } ;"
  "class foo { public: bool operator== ( const foo & ) ; } ;" always "class foo { public: bool operator== ( const foo & ) ; } ;"
Line 3736
  "" always ""
Line 3739
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3740
  code always "class foo {\npublic:\n    bool operator==(const foo &) __attribute__((__pure__));\n};"
Line 3741
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3741 always 3741
  "test.cpp" always "test.cpp"
Line 3744
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3744 always 3744
  expected always "class foo { public: bool operator== ( const foo & ) ; } ;"
  nullptr always 0
  false always 0
Line 3746
  "operator==" always "operator=="
Line 3747
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3747 always 3747
  && always {!<=-1,!>=2}
  tok always !0
Line 3751
  535 always 535
  = always "void __attribute__((pure,nothrow,const)) func1();\nvoid __attribute__((__pure__,__nothrow__,__const__)) func2();\nvoid __attribute__((nothrow,pure,const)) func3();\nvoid __attribute__((__nothrow__,__pure__,__const__)) func4();\nvoid __attribute__((noreturn,format(printf,1,2))) func5();\nvoid __attribute__((__nothrow__)) __attribute__((__pure__,__const__)) func6();\nvoid __attribute__((__nothrow__,__pure__)) __attribute__((__const__)) func7();\nvoid __attribute__((noreturn)) __attribute__(()) __attribute__((nothrow,pure,const)) func8();"
  "void __attribute__((pure,nothrow,const)) func1();\nvoid __attribute__((__pure__,__nothrow__,__const__)) func2();\nvoid __attribute__((nothrow,pure,const)) func3();\nvoid __attribute__((__nothrow__,__pure__,__const__)) func4();\nvoid __attribute__((noreturn,format(printf,1,2))) func5();\nvoid __attribute__((__nothrow__)) __attribute__((__pure__,__const__)) func6();\nvoid __attribute__((__nothrow__,__pure__)) __attribute__((__const__)) func7();\nvoid __attribute__((noreturn)) __attribute__(()) __attribute__((nothrow,pure,const)) func8();" always "void __attribute__((pure,nothrow,const)) func1();\nvoid __attribute__((__pure__,__nothrow__,__const__)) func2();\nvoid __attribute__((nothrow,pure,const)) func3();\nvoid __attribute__((__nothrow__,__pure__,__const__)) func4();\nvoid __attribute__((noreturn,format(printf,1,2))) func5();\nvoid __attribute__((__nothrow__)) __attribute__((__pure__,__const__)) func6();\nvoid __attribute__((__nothrow__,__pure__)) __attribute__((__const__)) func7();\nvoid __attribute__((noreturn)) __attribute__(()) __attribute__((nothrow,pure,const)) func8();"
Line 3759
  136 always 136
  = always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ; void func6 ( ) ; void func7 ( ) ; void func8 ( ) ;"
  "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ; void func6 ( ) ; void func7 ( ) ; void func8 ( ) ;" always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ; void func6 ( ) ; void func7 ( ) ; void func8 ( ) ;"
Line 3762
  "" always ""
Line 3765
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3766
  code always "void __attribute__((pure,nothrow,const)) func1();\nvoid __attribute__((__pure__,__nothrow__,__const__)) func2();\nvoid __attribute__((nothrow,pure,const)) func3();\nvoid __attribute__((__nothrow__,__pure__,__const__)) func4();\nvoid __attribute__((noreturn,format(printf,1,2))) func5();\nvoid __attribute__((__nothrow__)) __attribute__((__pure__,__const__)) func6();\nvoid __attribute__((__nothrow__,__pure__)) __attribute__((__const__)) func7();\nvoid __attribute__((noreturn)) __attribute__(()) __attribute__((nothrow,pure,const)) func8();"
Line 3767
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3767 always 3767
  "test.cpp" always "test.cpp"
Line 3770
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3770 always 3770
  expected always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ; void func6 ( ) ; void func7 ( ) ; void func8 ( ) ;"
  nullptr always 0
  false always 0
Line 3772
  "func1" always "func1"
Line 3773
  "func2" always "func2"
Line 3774
  "func3" always "func3"
Line 3775
  "func4" always "func4"
Line 3776
  "func5" always "func5"
Line 3777
  "func6" always "func6"
Line 3778
  "func7" always "func7"
Line 3779
  "func8" always "func8"
Line 3781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3781 always 3781
  && always {!<=-1,!>=2}
  func1 always !0
  && always {!<=-1,!>=2}
  func1 always !0
  && always {!<=-1,!>=2}
Line 3782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3782 always 3782
  && always {!<=-1,!>=2}
  func2 always !0
  && always {!<=-1,!>=2}
  func2 always !0
  && always {!<=-1,!>=2}
Line 3783
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3783 always 3783
  && always {!<=-1,!>=2}
  func3 always !0
  && always {!<=-1,!>=2}
  func3 always !0
  && always {!<=-1,!>=2}
Line 3784
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3784 always 3784
  && always {!<=-1,!>=2}
  func4 always !0
  && always {!<=-1,!>=2}
  func4 always !0
  && always {!<=-1,!>=2}
Line 3785
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3785 always 3785
  && always {!<=-1,!>=2}
  func5 always !0
Line 3786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3786 always 3786
  && always {!<=-1,!>=2}
  func6 always !0
  && always {!<=-1,!>=2}
  func6 always !0
  && always {!<=-1,!>=2}
Line 3787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3787 always 3787
  && always {!<=-1,!>=2}
  func7 always !0
  && always {!<=-1,!>=2}
  func7 always !0
  && always {!<=-1,!>=2}
Line 3788
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3788 always 3788
  && always {!<=-1,!>=2}
  func8 always !0
  && always {!<=-1,!>=2}
  func8 always !0
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 3792
  535 always 535
  = always "void func1() __attribute__((pure,nothrow,const));\nvoid func2() __attribute__((__pure__,__nothrow__,__const__));\nvoid func3() __attribute__((nothrow,pure,const));\nvoid func4() __attribute__((__nothrow__,__pure__,__const__));\nvoid func5() __attribute__((noreturn,format(printf,1,2)));\nvoid func6() __attribute__((__nothrow__)) __attribute__((__pure__,__const__));\nvoid func7() __attribute__((__nothrow__,__pure__)) __attribute__((__const__));\nvoid func8() __attribute__((noreturn)) __attribute__(()) __attribute__((nothrow,pure,const));"
  "void func1() __attribute__((pure,nothrow,const));\nvoid func2() __attribute__((__pure__,__nothrow__,__const__));\nvoid func3() __attribute__((nothrow,pure,const));\nvoid func4() __attribute__((__nothrow__,__pure__,__const__));\nvoid func5() __attribute__((noreturn,format(printf,1,2)));\nvoid func6() __attribute__((__nothrow__)) __attribute__((__pure__,__const__));\nvoid func7() __attribute__((__nothrow__,__pure__)) __attribute__((__const__));\nvoid func8() __attribute__((noreturn)) __attribute__(()) __attribute__((nothrow,pure,const));" always "void func1() __attribute__((pure,nothrow,const));\nvoid func2() __attribute__((__pure__,__nothrow__,__const__));\nvoid func3() __attribute__((nothrow,pure,const));\nvoid func4() __attribute__((__nothrow__,__pure__,__const__));\nvoid func5() __attribute__((noreturn,format(printf,1,2)));\nvoid func6() __attribute__((__nothrow__)) __attribute__((__pure__,__const__));\nvoid func7() __attribute__((__nothrow__,__pure__)) __attribute__((__const__));\nvoid func8() __attribute__((noreturn)) __attribute__(()) __attribute__((nothrow,pure,const));"
Line 3800
  136 always 136
  = always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ; void func6 ( ) ; void func7 ( ) ; void func8 ( ) ;"
  "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ; void func6 ( ) ; void func7 ( ) ; void func8 ( ) ;" always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ; void func6 ( ) ; void func7 ( ) ; void func8 ( ) ;"
Line 3803
  "" always ""
Line 3806
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 3807
  code always "void func1() __attribute__((pure,nothrow,const));\nvoid func2() __attribute__((__pure__,__nothrow__,__const__));\nvoid func3() __attribute__((nothrow,pure,const));\nvoid func4() __attribute__((__nothrow__,__pure__,__const__));\nvoid func5() __attribute__((noreturn,format(printf,1,2)));\nvoid func6() __attribute__((__nothrow__)) __attribute__((__pure__,__const__));\nvoid func7() __attribute__((__nothrow__,__pure__)) __attribute__((__const__));\nvoid func8() __attribute__((noreturn)) __attribute__(()) __attribute__((nothrow,pure,const));"
Line 3808
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3808 always 3808
  "test.cpp" always "test.cpp"
Line 3811
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3811 always 3811
  expected always "void func1 ( ) ; void func2 ( ) ; void func3 ( ) ; void func4 ( ) ; void func5 ( ) ; void func6 ( ) ; void func7 ( ) ; void func8 ( ) ;"
  nullptr always 0
  false always 0
Line 3813
  "func1" always "func1"
Line 3814
  "func2" always "func2"
Line 3815
  "func3" always "func3"
Line 3816
  "func4" always "func4"
Line 3817
  "func5" always "func5"
Line 3818
  "func6" always "func6"
Line 3819
  "func7" always "func7"
Line 3820
  "func8" always "func8"
Line 3822
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3822 always 3822
  && always {!<=-1,!>=2}
  func1 always !0
  && always {!<=-1,!>=2}
  func1 always !0
  && always {!<=-1,!>=2}
Line 3823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3823 always 3823
  && always {!<=-1,!>=2}
  func2 always !0
  && always {!<=-1,!>=2}
  func2 always !0
  && always {!<=-1,!>=2}
Line 3824
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3824 always 3824
  && always {!<=-1,!>=2}
  func3 always !0
  && always {!<=-1,!>=2}
  func3 always !0
  && always {!<=-1,!>=2}
Line 3825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3825 always 3825
  && always {!<=-1,!>=2}
  func4 always !0
  && always {!<=-1,!>=2}
  func4 always !0
  && always {!<=-1,!>=2}
Line 3826
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3826 always 3826
  && always {!<=-1,!>=2}
  func5 always !0
Line 3827
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3827 always 3827
  && always {!<=-1,!>=2}
  func6 always !0
  && always {!<=-1,!>=2}
  func6 always !0
  && always {!<=-1,!>=2}
Line 3828
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3828 always 3828
  && always {!<=-1,!>=2}
  func7 always !0
  && always {!<=-1,!>=2}
  func7 always !0
  && always {!<=-1,!>=2}
Line 3829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3829 always 3829
  && always {!<=-1,!>=2}
  func8 always !0
  && always {!<=-1,!>=2}
  func8 always !0
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 3835
  31 always 31
  = always "; z = x < 0 ? x >> y : x >> y;"
  "; z = x < 0 ? x >> y : x >> y;" always "; z = x < 0 ? x >> y : x >> y;"
Line 3836
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3836 always 3836
  "; z = x < 0 ? x >> y : x >> y ;" always "; z = x < 0 ? x >> y : x >> y ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3836 always 3836
  code always "; z = x < 0 ? x >> y : x >> y;"
Line 3841
  413 always 413
  = always "void f ( ) {\n    int shift_y = ctx->sprite_shift[0];\n    int shift_c = ctx->sprite_shift[1];\n    if ( shift_c < 0 || shift_y < 0 ||\n         FFABS ( sprite_offset [ 0 ] [ i ] ) >= INT_MAX >> shift_y ||\n         FFABS ( sprite_offset [ 1 ] [ i ] ) >= INT_MAX >> shift_c ||\n         FFABS ( sprite_delta [ 0 ] [ i ] ) >= INT_MAX >> shift_y ||\n         FFABS ( sprite_delta [ 1 ] [ i ] ) >= INT_MAX >> shift_y ) ;\n}"
  "void f ( ) {\n    int shift_y = ctx->sprite_shift[0];\n    int shift_c = ctx->sprite_shift[1];\n    if ( shift_c < 0 || shift_y < 0 ||\n         FFABS ( sprite_offset [ 0 ] [ i ] ) >= INT_MAX >> shift_y ||\n         FFABS ( sprite_offset [ 1 ] [ i ] ) >= INT_MAX >> shift_c ||\n         FFABS ( sprite_delta [ 0 ] [ i ] ) >= INT_MAX >> shift_y ||\n         FFABS ( sprite_delta [ 1 ] [ i ] ) >= INT_MAX >> shift_y ) ;\n}" always "void f ( ) {\n    int shift_y = ctx->sprite_shift[0];\n    int shift_c = ctx->sprite_shift[1];\n    if ( shift_c < 0 || shift_y < 0 ||\n         FFABS ( sprite_offset [ 0 ] [ i ] ) >= INT_MAX >> shift_y ||\n         FFABS ( sprite_offset [ 1 ] [ i ] ) >= INT_MAX >> shift_c ||\n         FFABS ( sprite_delta [ 0 ] [ i ] ) >= INT_MAX >> shift_y ||\n         FFABS ( sprite_delta [ 1 ] [ i ] ) >= INT_MAX >> shift_y ) ;\n}"
Line 3850
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3850 always 3850
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3850 always 3850
  code always "void f ( ) {\n    int shift_y = ctx->sprite_shift[0];\n    int shift_c = ctx->sprite_shift[1];\n    if ( shift_c < 0 || shift_y < 0 ||\n         FFABS ( sprite_offset [ 0 ] [ i ] ) >= INT_MAX >> shift_y ||\n         FFABS ( sprite_offset [ 1 ] [ i ] ) >= INT_MAX >> shift_c ||\n         FFABS ( sprite_delta [ 0 ] [ i ] ) >= INT_MAX >> shift_y ||\n         FFABS ( sprite_delta [ 1 ] [ i ] ) >= INT_MAX >> shift_y ) ;\n}"
  ( always !<=-1
  "> >" always "> >"
Line 3856
  = always "template<typename> struct extent {};"
  "template<typename> struct extent {};" always "template<typename> struct extent {};"
Line 3857
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3857 always 3857
  "template < typename > struct extent { } ;" always "template < typename > struct extent { } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3857 always 3857
  code always "template<typename> struct extent {};"
Line 3860
  = always "template<typename> struct extent;"
  "template<typename> struct extent;" always "template<typename> struct extent;"
Line 3861
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3861 always 3861
  "template < typename > struct extent ;" always "template < typename > struct extent ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3861 always 3861
  code always "template<typename> struct extent;"
Line 3864
  = always "template<typename, unsigned = 0> struct extent;"
  "template<typename, unsigned = 0> struct extent;" always "template<typename, unsigned = 0> struct extent;"
Line 3865
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3865 always 3865
  "template < typename , unsigned int = 0 > struct extent ;" always "template < typename , unsigned int = 0 > struct extent ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3865 always 3865
  code always "template<typename, unsigned = 0> struct extent;"
Line 3870
  = always "template <class T>\nvoid fn2 (T t = []{return 1;}())\n{}\nint main()\n{\n  fn2<int>();\n}\n"
  "template <class T>\nvoid fn2 (T t = []{return 1;}())\n{}\nint main()\n{\n  fn2<int>();\n}\n" always "template <class T>\nvoid fn2 (T t = []{return 1;}())\n{}\nint main()\n{\n  fn2<int>();\n}\n"
Line 3877
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3877 always 3877
  "void fn2<int> ( int t = [ ] { return 1 ; } ( ) ) ;\n\nint main ( )\n{\nfn2<int> ( ) ;\n}\nvoid fn2<int> ( int t = [ ] { return 1 ; } ( ) )\n{ }" always "void fn2<int> ( int t = [ ] { return 1 ; } ( ) ) ;\n\nint main ( )\n{\nfn2<int> ( ) ;\n}\nvoid fn2<int> ( int t = [ ] { return 1 ; } ( ) )\n{ }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3877 always 3877
  code always "template <class T>\nvoid fn2 (T t = []{return 1;}())\n{}\nint main()\n{\n  fn2<int>();\n}\n"
Line 3889
  = always "list<list<int>> ints;\n"
  "list<list<int>> ints;\n" always "list<list<int>> ints;\n"
Line 3890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3890 always 3890
  "list < list < int > > ints ;" always "list < list < int > > ints ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3890 always 3890
  code always "list<list<int>> ints;\n"
Line 3895
  = always "template<class T, T t = (T)0>\nstruct S\n{};\nS<int> s;\n"
  "template<class T, T t = (T)0>\nstruct S\n{};\nS<int> s;\n" always "template<class T, T t = (T)0>\nstruct S\n{};\nS<int> s;\n"
Line 3899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3899 always 3899
  "struct S<int,(int)0> ;\n\n\nS<int,(int)0> s ;\nstruct S<int,(int)0>\n{ } ;" always "struct S<int,(int)0> ;\n\n\nS<int,(int)0> s ;\nstruct S<int,(int)0>\n{ } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3899 always 3899
  code always "template<class T, T t = (T)0>\nstruct S\n{};\nS<int> s;\n"
Line 3909
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3909 always 3909
  "class A; template <class T> class Disposer; template <typename T, class D = Disposer<T>> class Shim {}; class B : public Shim<A> {};" always "class A; template <class T> class Disposer; template <typename T, class D = Disposer<T>> class Shim {}; class B : public Shim<A> {};"
Line 3913
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3913 always 3913
  "template <class ELFT> class ELFObjectImage {}; ObjectImage *createObjectImage() {   return new ELFObjectImage<ELFType<little>>(Obj); } void resolveX86_64Relocation() {   reinterpret_cast<int>(0); }" always "template <class ELFT> class ELFObjectImage {}; ObjectImage *createObjectImage() {   return new ELFObjectImage<ELFType<little>>(Obj); } void resolveX86_64Relocation() {   reinterpret_cast<int>(0); }"
Line 3920
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3920 always 3920
  "template<typename value_type, typename function_type> value_type Base(const value_type x, const value_type dx, function_type func, int type_deriv) {    return 0.0; }; namespace {   template<class DC> class C {     void Fun(int G, const double x);   };   template<class DC> void C<DC>::Fun(int G, const double x) {    Base<double, CDFFunctor<DC>>(2, 2, f, 0);   };   template<class DC> class C2 {}; }" always "template<typename value_type, typename function_type> value_type Base(const value_type x, const value_type dx, function_type func, int type_deriv) {    return 0.0; }; namespace {   template<class DC> class C {     void Fun(int G, const double x);   };   template<class DC> void C<DC>::Fun(int G, const double x) {    Base<double, CDFFunctor<DC>>(2, 2, f, 0);   };   template<class DC> class C2 {}; }"
Line 3937
  = always "struct s<x<u...>>;"
  "struct s<x<u...>>;" always "struct s<x<u...>>;"
Line 3938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3938 always 3938
  "struct s < x < u ... > > ;" always "struct s < x < u ... > > ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3938 always 3938
  code always "struct s<x<u...>>;"
Line 3942
  = always "template <class f> using c = e<i<q<f,r>,b...>>;"
  "template <class f> using c = e<i<q<f,r>,b...>>;" always "template <class f> using c = e<i<q<f,r>,b...>>;"
Line 3943
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3943 always 3943
  "template < class f > using c = e < i < q < f , r > , b ... > > ;" always "template < class f > using c = e < i < q < f , r > , b ... > > ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3943 always 3943
  code always "template <class f> using c = e<i<q<f,r>,b...>>;"
Line 3947
  = always "struct s<x<u...>> { };"
  "struct s<x<u...>> { };" always "struct s<x<u...>> { };"
Line 3948
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3948 always 3948
  "struct s < x < u ... > > { } ;" always "struct s < x < u ... > > { } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3948 always 3948
  code always "struct s<x<u...>> { };"
Line 3952
  = always "struct q : s<x<u...>> { };"
  "struct q : s<x<u...>> { };" always "struct q : s<x<u...>> { };"
Line 3953
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3953 always 3953
  "struct q : s < x < u ... > > { } ;" always "struct q : s < x < u ... > > { } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3953 always 3953
  code always "struct q : s<x<u...>> { };"
Line 3957
  = always "struct q : private s<x<u...>> { };"
  "struct q : private s<x<u...>> { };" always "struct q : private s<x<u...>> { };"
Line 3958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3958 always 3958
  "struct q : private s < x < u ... > > { } ;" always "struct q : private s < x < u ... > > { } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3958 always 3958
  code always "struct q : private s<x<u...>> { };"
Line 3964
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3964 always 3964
  "template <typename T> decltype(auto) forward(T& t) { return 0; }" always "template <typename T> decltype(auto) forward(T& t) { return 0; }"
Line 3969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3969 always 3969
  "; int a [ 3 ] = { 1 , 2 , 3 } ;" always "; int a [ 3 ] = { 1 , 2 , 3 } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3969 always 3969
  ";int a[]={1,2,3};" always ";int a[]={1,2,3};"
Line 3970
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3970 always 3970
  "; int a [ 3 ] = { 1 , 2 , 3 } ;" always "; int a [ 3 ] = { 1 , 2 , 3 } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3970 always 3970
  ";int a[]={1,2,3,};" always ";int a[]={1,2,3,};"
Line 3971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3971 always 3971
  "; foo a [ 3 ] = { { 1 , 2 } , { 3 , 4 } , { 5 , 6 } } ;" always "; foo a [ 3 ] = { { 1 , 2 } , { 3 , 4 } , { 5 , 6 } } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3971 always 3971
  ";foo a[]={{1,2},{3,4},{5,6}};" always ";foo a[]={{1,2},{3,4},{5,6}};"
Line 3972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3972 always 3972
  "; int a [ 1 ] = { foo < bar1 , bar2 > ( 123 , 4 ) } ;" always "; int a [ 1 ] = { foo < bar1 , bar2 > ( 123 , 4 ) } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3972 always 3972
  ";int a[]={foo<bar1,bar2>(123,4)};" always ";int a[]={foo<bar1,bar2>(123,4)};"
Line 3973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3973 always 3973
  "; int a [ 2 ] = { b > c ? 1 : 2 , 3 } ;" always "; int a [ 2 ] = { b > c ? 1 : 2 , 3 } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3973 always 3973
  ";int a[]={ b>c?1:2,3};" always ";int a[]={ b>c?1:2,3};"
Line 3974
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3974 always 3974
  "int main ( ) { int a [ 2 ] = { b < c ? 1 : 2 , 3 } }" always "int main ( ) { int a [ 2 ] = { b < c ? 1 : 2 , 3 } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3974 always 3974
  "int main(){int a[]={b<c?1:2,3}}" always "int main(){int a[]={b<c?1:2,3}}"
Line 3975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3975 always 3975
  "; int a [ 3 ] = { ABC , 2 , 3 } ;" always "; int a [ 3 ] = { ABC , 2 , 3 } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3975 always 3975
  ";int a[]={ABC,2,3};" always ";int a[]={ABC,2,3};"
Line 3976
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3976 always 3976
  "; int a [ 3 ] = { [ 2 ] = 5 } ;" always "; int a [ 3 ] = { [ 2 ] = 5 } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3976 always 3976
  ";int a[]={ [2] = 5 };" always ";int a[]={ [2] = 5 };"
Line 3977
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3977 always 3977
  "; int a [ 5 ] = { 1 , 2 , [ 2 ] = 5 , 3 , 4 } ;" always "; int a [ 5 ] = { 1 , 2 , [ 2 ] = 5 , 3 , 4 } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3977 always 3977
  ";int a[]={ 1, 2, [2] = 5, 3, 4 };" always ";int a[]={ 1, 2, [2] = 5, 3, 4 };"
Line 3978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3978 always 3978
  "; int a [ ] = { 1 , 2 , [ x ] = 5 , 3 , 4 } ;" always "; int a [ ] = { 1 , 2 , [ x ] = 5 , 3 , 4 } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3978 always 3978
  ";int a[]={ 1, 2, [x] = 5, 3, 4 };" always ";int a[]={ 1, 2, [x] = 5, 3, 4 };"
Line 3982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3982 always 3982
  "void f ( ) { ab : ; a = 0 ; }" always "void f ( ) { ab : ; a = 0 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3982 always 3982
  "void f() { ab: a=0; }" always "void f() { ab: a=0; }"
Line 3984
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3984 always 3984
  "void f ( ) { ab : ; ( * func ) ( ) ; }" always "void f ( ) { ab : ; ( * func ) ( ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3984 always 3984
  "void f() { ab: (*func)(); }" always "void f() { ab: (*func)(); }"
Line 3986
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3986 always 3986
  "void f ( ) { ab : ; * b = 0 ; }" always "void f ( ) { ab : ; * b = 0 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3986 always 3986
  "void f() { ab: *b=0; }" always "void f() { ab: *b=0; }"
Line 3987
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3987 always 3987
  "void f ( ) { ab : ; * * b = 0 ; }" always "void f ( ) { ab : ; * * b = 0 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3987 always 3987
  "void f() { ab: **b=0; }" always "void f() { ab: **b=0; }"
Line 3989
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3989 always 3989
  "void f ( ) { ab : ; & b = 0 ; }" always "void f ( ) { ab : ; & b = 0 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3989 always 3989
  "void f() { ab: &b=0; }" always "void f() { ab: &b=0; }"
Line 3990
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3990 always 3990
  "void f ( ) { ab : ; & ( b . x ) = 0 ; }" always "void f ( ) { ab : ; & ( b . x ) = 0 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3990 always 3990
  "void f() { ab: &(b->x)=0; }" always "void f() { ab: &(b->x)=0; }"
Line 3992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3992 always 3992
  "void f ( ) { ab : ; * ( * b ) . x = 0 ; }" always "void f ( ) { ab : ; * ( * b ) . x = 0 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3992 always 3992
  "void f() { ab: *(* b)->x=0; }" always "void f() { ab: *(* b)->x=0; }"
Line 3993
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3993 always 3993
  "void f ( ) { ab : ; ( * * b ) . x = 0 ; }" always "void f ( ) { ab : ; ( * * b ) . x = 0 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3993 always 3993
  "void f() { ab: (** b).x=0; }" always "void f() { ab: (** b).x=0; }"
Line 3994
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3994 always 3994
  "void f ( ) { ab : ; & ( * b . x ) = 0 ; }" always "void f ( ) { ab : ; & ( * b . x ) = 0 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3994 always 3994
  "void f() { ab: &(*b.x)=0; }" always "void f() { ab: &(*b.x)=0; }"
Line 3996
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3996 always 3996
  "void f ( ) { ab : ; { b = 0 ; } }" always "void f ( ) { ab : ; { b = 0 ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3996 always 3996
  "void f() { ab: {b=0;} }" always "void f() { ab: {b=0;} }"
Line 3997
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3997 always 3997
  "void f ( ) { ab : ; { * b = 0 ; } }" always "void f ( ) { ab : ; { * b = 0 ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3997 always 3997
  "void f() { ab: { *b=0;} }" always "void f() { ab: { *b=0;} }"
Line 3998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3998 always 3998
  "void f ( ) { ab : ; { & b = 0 ; } }" always "void f ( ) { ab : ; { & b = 0 ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3998 always 3998
  "void f() { ab: { &b=0;} }" always "void f() { ab: { &b=0;} }"
Line 3999
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3999 always 3999
  "void f ( ) { ab : ; { & ( * b . x ) = 0 ; } }" always "void f ( ) { ab : ; { & ( * b . x ) = 0 ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  3999 always 3999
  "void f() { ab: {&(*b.x)=0;} }" always "void f() { ab: {&(*b.x)=0;} }"
Line 4001
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4001 always 4001
  "void f() { MACRO(ab: b=0;, foo)}" always "void f() { MACRO(ab: b=0;, foo)}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4001 always 4001
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4001 always 4001
  false always 0
Line 4002
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4002 always 4002
  "void f ( ) { MACRO ( bar , ab : { & ( * b . x ) = 0 ; } ) }" always "void f ( ) { MACRO ( bar , ab : { & ( * b . x ) = 0 ; } ) }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4002 always 4002
  "void f() { MACRO(bar, ab: {&(*b.x)=0;})}" always "void f() { MACRO(bar, ab: {&(*b.x)=0;})}"
Line 4007
  18 always 18
  = always "int i ; int p(0);"
  "int i ; int p(0);" always "int i ; int p(0);"
Line 4008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4008 always 4008
  "int i ; int p ; p = 0 ;" always "int i ; int p ; p = 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4008 always 4008
  code always "int i ; int p(0);"
Line 4009
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4009 always 4009
  "" always ""
Line 4013
  18 always 18
  = always "int i; int *p(0);"
  "int i; int *p(0);" always "int i; int *p(0);"
Line 4014
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4014 always 4014
  "int i ; int * p ; p = 0 ;" always "int i ; int * p ; p = 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4014 always 4014
  code always "int i; int *p(0);"
Line 4015
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4015 always 4015
  "" always ""
Line 4019
  10 always 10
  = always "int p(0);"
  "int p(0);" always "int p(0);"
Line 4020
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4020 always 4020
  "int p ; p = 0 ;" always "int p ; p = 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4020 always 4020
  code always "int p(0);"
Line 4021
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4021 always 4021
  "" always ""
Line 4025
  11 always 11
  = always "int *p(0);"
  "int *p(0);" always "int *p(0);"
Line 4026
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4026 always 4026
  "int * p ; p = 0 ;" always "int * p ; p = 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4026 always 4026
  code always "int *p(0);"
Line 4027
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4027 always 4027
  "" always ""
Line 4031
  18 always 18
  = always "int i ; int p(i);"
  "int i ; int p(i);" always "int i ; int p(i);"
Line 4032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4032 always 4032
  "int i ; int p ; p = i ;" always "int i ; int p ; p = i ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4032 always 4032
  code always "int i ; int p(i);"
Line 4033
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4033 always 4033
  "" always ""
Line 4037
  19 always 19
  = always "int i; int *p(&i);"
  "int i; int *p(&i);" always "int i; int *p(&i);"
Line 4038
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4038 always 4038
  "int i ; int * p ; p = & i ;" always "int i ; int * p ; p = & i ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4038 always 4038
  code always "int i; int *p(&i);"
Line 4039
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4039 always 4039
  "" always ""
Line 4043
  20 always 20
  = always "int i; void *p(&i);"
  "int i; void *p(&i);" always "int i; void *p(&i);"
Line 4044
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4044 always 4044
  "int i ; void * p ; p = & i ;" always "int i ; void * p ; p = & i ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4044 always 4044
  code always "int i; void *p(&i);"
Line 4045
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4045 always 4045
  "" always ""
Line 4049
  43 always 43
  = always "struct S { }; struct S s; struct S *p(&s);"
  "struct S { }; struct S s; struct S *p(&s);" always "struct S { }; struct S s; struct S *p(&s);"
Line 4050
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4050 always 4050
  "struct S { } ; struct S s ; struct S * p ; p = & s ;" always "struct S { } ; struct S s ; struct S * p ; p = & s ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4050 always 4050
  code always "struct S { }; struct S s; struct S *p(&s);"
Line 4051
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4051 always 4051
  "" always ""
Line 4055
  29 always 29
  = always "struct S { }; S s; S *p(&s);"
  "struct S { }; S s; S *p(&s);" always "struct S { }; S s; S *p(&s);"
Line 4056
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4056 always 4056
  "struct S { } ; S s ; S * p ; p = & s ;" always "struct S { } ; S s ; S * p ; p = & s ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4056 always 4056
  code always "struct S { }; S s; S *p(&s);"
Line 4057
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4057 always 4057
  "" always ""
Line 4061
  56 always 56
  = always "union S { int i; float f; }; union S s; union S *p(&s);"
  "union S { int i; float f; }; union S s; union S *p(&s);" always "union S { int i; float f; }; union S s; union S *p(&s);"
Line 4062
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4062 always 4062
  "union S { int i ; float f ; } ; union S s ; union S * p ; p = & s ;" always "union S { int i ; float f ; } ; union S s ; union S * p ; p = & s ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4062 always 4062
  code always "union S { int i; float f; }; union S s; union S *p(&s);"
Line 4063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4063 always 4063
  "" always ""
Line 4067
  44 always 44
  = always "union S { int i; float f; }; S s; S *p(&s);"
  "union S { int i; float f; }; S s; S *p(&s);" always "union S { int i; float f; }; S s; S *p(&s);"
Line 4068
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4068 always 4068
  "union S { int i ; float f ; } ; S s ; S * p ; p = & s ;" always "union S { int i ; float f ; } ; S s ; S * p ; p = & s ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4068 always 4068
  code always "union S { int i; float f; }; S s; S *p(&s);"
Line 4069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4069 always 4069
  "" always ""
Line 4073
  40 always 40
  = always "class C { }; class C c; class C *p(&c);"
  "class C { }; class C c; class C *p(&c);" always "class C { }; class C c; class C *p(&c);"
Line 4074
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4074 always 4074
  "class C { } ; class C c ; class C * p ; p = & c ;" always "class C { } ; class C c ; class C * p ; p = & c ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4074 always 4074
  code always "class C { }; class C c; class C *p(&c);"
Line 4075
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4075 always 4075
  "" always ""
Line 4079
  28 always 28
  = always "class C { }; C c; C *p(&c);"
  "class C { }; C c; C *p(&c);" always "class C { }; C c; C *p(&c);"
Line 4080
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4080 always 4080
  "class C { } ; C c ; C * p ; p = & c ;" always "class C { } ; C c ; C * p ; p = & c ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4080 always 4080
  code always "class C { }; C c; C *p(&c);"
Line 4081
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4081 always 4081
  "" always ""
Line 4085
  42 always 42
  = always "struct S { }; struct S s; struct S s1(s);"
  "struct S { }; struct S s; struct S s1(s);" always "struct S { }; struct S s; struct S s1(s);"
Line 4086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4086 always 4086
  "struct S { } ; struct S s ; struct S s1 ( s ) ;" always "struct S { } ; struct S s ; struct S s1 ( s ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4086 always 4086
  code always "struct S { }; struct S s; struct S s1(s);"
Line 4087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4087 always 4087
  "" always ""
Line 4091
  28 always 28
  = always "struct S { }; S s; S s1(s);"
  "struct S { }; S s; S s1(s);" always "struct S { }; S s; S s1(s);"
Line 4092
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4092 always 4092
  "struct S { } ; S s ; S s1 ( s ) ;" always "struct S { } ; S s ; S s1 ( s ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4092 always 4092
  code always "struct S { }; S s; S s1(s);"
Line 4093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4093 always 4093
  "" always ""
Line 4097
  43 always 43
  = always "struct S { }; struct S s; struct S s1(&s);"
  "struct S { }; struct S s; struct S s1(&s);" always "struct S { }; struct S s; struct S s1(&s);"
Line 4098
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4098 always 4098
  "struct S { } ; struct S s ; struct S s1 ( & s ) ;" always "struct S { } ; struct S s ; struct S s1 ( & s ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4098 always 4098
  code always "struct S { }; struct S s; struct S s1(&s);"
Line 4099
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4099 always 4099
  "" always ""
Line 4103
  29 always 29
  = always "struct S { }; S s; S s1(&s);"
  "struct S { }; S s; S s1(&s);" always "struct S { }; S s; S s1(&s);"
Line 4104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4104 always 4104
  "struct S { } ; S s ; S s1 ( & s ) ;" always "struct S { } ; S s ; S s1 ( & s ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4104 always 4104
  code always "struct S { }; S s; S s1(&s);"
Line 4105
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4105 always 4105
  "" always ""
Line 4109
  29 always 29
  = always "class S { int function(); };"
  "class S { int function(); };" always "class S { int function(); };"
Line 4110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4110 always 4110
  "class S { int function ( ) ; } ;" always "class S { int function ( ) ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4110 always 4110
  code always "class S { int function(); };"
Line 4111
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4111 always 4111
  "" always ""
Line 4115
  33 always 33
  = always "class S { int function(void); };"
  "class S { int function(void); };" always "class S { int function(void); };"
Line 4116
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4116 always 4116
  "class S { int function ( ) ; } ;" always "class S { int function ( ) ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4116 always 4116
  code always "class S { int function(void); };"
Line 4117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4117 always 4117
  "" always ""
Line 4121
  32 always 32
  = always "class S { int function(int); };"
  "class S { int function(int); };" always "class S { int function(int); };"
Line 4122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4122 always 4122
  "class S { int function ( int ) ; } ;" always "class S { int function ( int ) ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4122 always 4122
  code always "class S { int function(int); };"
Line 4123
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4123 always 4123
  "" always ""
Line 4127
  20 always 20
  = always "int function(void);"
  "int function(void);" always "int function(void);"
Line 4128
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4128 always 4128
  "int function ( ) ;" always "int function ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4128 always 4128
  code always "int function(void);"
Line 4129
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4129 always 4129
  "" always ""
Line 4133
  19 always 19
  = always "int function(int);"
  "int function(int);" always "int function(int);"
Line 4134
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4134 always 4134
  "int function ( int ) ;" always "int function ( int ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4134 always 4134
  code always "int function(int);"
Line 4135
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4135 always 4135
  "" always ""
Line 4139
  27 always 27
  = always "extern int function(void);"
  "extern int function(void);" always "extern int function(void);"
Line 4140
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4140 always 4140
  "extern int function ( ) ;" always "extern int function ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4140 always 4140
  code always "extern int function(void);"
Line 4141
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4141 always 4141
  "" always ""
Line 4145
  42 always 42
  = always "int function1(void); int function2(void);"
  "int function1(void); int function2(void);" always "int function1(void); int function2(void);"
Line 4146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4146 always 4146
  "int function1 ( ) ; int function2 ( ) ;" always "int function1 ( ) ; int function2 ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4146 always 4146
  code always "int function1(void); int function2(void);"
Line 4147
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4147 always 4147
  "" always ""
Line 4151
  17 always 17
  = always "int function(A);"
  "int function(A);" always "int function(A);"
Line 4154
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4154 always 4154
  "int function ( A ) ;" always "int function ( A ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4154 always 4154
  code always "int function(A);"
Line 4155
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4155 always 4155
  "" always ""
Line 4159
  24 always 24
  = always "int i; int function(A);"
  "int i; int function(A);" always "int i; int function(A);"
Line 4160
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4160 always 4160
  "int i ; int function ( A ) ;" always "int i ; int function ( A ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4160 always 4160
  code always "int i; int function(A);"
Line 4161
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4161 always 4161
  "" always ""
Line 4165
  26 always 26
  = always "class A { } ; int foo(A);"
  "class A { } ; int foo(A);" always "class A { } ; int foo(A);"
Line 4166
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4166 always 4166
  "class A { } ; int foo ( A ) ;" always "class A { } ; int foo ( A ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4166 always 4166
  code always "class A { } ; int foo(A);"
Line 4167
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4167 always 4167
  "" always ""
Line 4171
  31 always 31
  = always "class A { } ; A a; int foo(a);"
  "class A { } ; A a; int foo(a);" always "class A { } ; A a; int foo(a);"
Line 4172
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4172 always 4172
  "class A { } ; A a ; int foo ; foo = a ;" always "class A { } ; A a ; int foo ; foo = a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4172 always 4172
  code always "class A { } ; A a; int foo(a);"
Line 4173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4173 always 4173
  "" always ""
Line 4177
  12 always 12
  = always "int x(f());"
  "int x(f());" always "int x(f());"
Line 4178
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4178 always 4178
  "int x ; x = f ( ) ;" always "int x ; x = f ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4178 always 4178
  code always "int x(f());"
Line 4179
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4179 always 4179
  "" always ""
Line 4183
  30 always 30
  = always "{ return doSomething(X), 0; }"
  "{ return doSomething(X), 0; }" always "{ return doSomething(X), 0; }"
Line 4184
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4184 always 4184
  "{ return doSomething ( X ) , 0 ; }" always "{ return doSomething ( X ) , 0 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4184 always 4184
  code always "{ return doSomething(X), 0; }"
Line 4185
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4185 always 4185
  "" always ""
Line 4191
  41 always 41
  = always "void f() {\n    unsigned int a(0),b(0);\n}"
  "void f() {\n    unsigned int a(0),b(0);\n}" always "void f() {\n    unsigned int a(0),b(0);\n}"
Line 4194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4194 always 4194
  "void f ( ) {\nunsigned int a ; a = 0 ; unsigned int b ; b = 0 ;\n}" always "void f ( ) {\nunsigned int a ; a = 0 ; unsigned int b ; b = 0 ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4194 always 4194
  code always "void f() {\n    unsigned int a(0),b(0);\n}"
Line 4200
  33 always 33
  = always "void f() {\n    int *a(0),b(0);\n}"
  "void f() {\n    int *a(0),b(0);\n}" always "void f() {\n    int *a(0),b(0);\n}"
Line 4203
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4203 always 4203
  "void f ( ) {\nint * a ; a = 0 ; int b ; b = 0 ;\n}" always "void f ( ) {\nint * a ; a = 0 ; int b ; b = 0 ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4203 always 4203
  code always "void f() {\n    int *a(0),b(0);\n}"
Line 4209
  26 always 26
  = always "struct A { bool x : 1; };"
  "struct A { bool x : 1; };" always "struct A { bool x : 1; };"
Line 4210
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4210 always 4210
  "struct A { bool x ; } ;" always "struct A { bool x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4210 always 4210
  code1 always "struct A { bool x : 1; };"
Line 4212
  26 always 26
  = always "struct A { char x : 3; };"
  "struct A { char x : 3; };" always "struct A { char x : 3; };"
Line 4213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4213 always 4213
  "struct A { char x ; } ;" always "struct A { char x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4213 always 4213
  code2 always "struct A { char x : 3; };"
Line 4215
  27 always 27
  = always "struct A { short x : 3; };"
  "struct A { short x : 3; };" always "struct A { short x : 3; };"
Line 4216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4216 always 4216
  "struct A { short x ; } ;" always "struct A { short x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4216 always 4216
  code3 always "struct A { short x : 3; };"
Line 4218
  25 always 25
  = always "struct A { int x : 3; };"
  "struct A { int x : 3; };" always "struct A { int x : 3; };"
Line 4219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4219 always 4219
  "struct A { int x ; } ;" always "struct A { int x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4219 always 4219
  code4 always "struct A { int x : 3; };"
Line 4221
  26 always 26
  = always "struct A { long x : 3; };"
  "struct A { long x : 3; };" always "struct A { long x : 3; };"
Line 4222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4222 always 4222
  "struct A { long x ; } ;" always "struct A { long x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4222 always 4222
  code5 always "struct A { long x : 3; };"
Line 4224
  28 always 28
  = always "struct A { __int8 x : 3; };"
  "struct A { __int8 x : 3; };" always "struct A { __int8 x : 3; };"
Line 4225
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4225 always 4225
  "struct A { char x ; } ;" always "struct A { char x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4225 always 4225
  code6 always "struct A { __int8 x : 3; };"
  true always 1
Line 4227
  29 always 29
  = always "struct A { __int16 x : 3; };"
  "struct A { __int16 x : 3; };" always "struct A { __int16 x : 3; };"
Line 4228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4228 always 4228
  "struct A { short x ; } ;" always "struct A { short x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4228 always 4228
  code7 always "struct A { __int16 x : 3; };"
  true always 1
Line 4230
  29 always 29
  = always "struct A { __int32 x : 3; };"
  "struct A { __int32 x : 3; };" always "struct A { __int32 x : 3; };"
Line 4231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4231 always 4231
  "struct A { int x ; } ;" always "struct A { int x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4231 always 4231
  code8 always "struct A { __int32 x : 3; };"
  true always 1
Line 4233
  29 always 29
  = always "struct A { __int64 x : 3; };"
  "struct A { __int64 x : 3; };" always "struct A { __int64 x : 3; };"
Line 4234
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4234 always 4234
  "struct A { long long x ; } ;" always "struct A { long long x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4234 always 4234
  code9 always "struct A { __int64 x : 3; };"
  true always 1
Line 4236
  35 always 35
  = always "struct A { unsigned char x : 3; };"
  "struct A { unsigned char x : 3; };" always "struct A { unsigned char x : 3; };"
Line 4237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4237 always 4237
  "struct A { unsigned char x ; } ;" always "struct A { unsigned char x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4237 always 4237
  code10 always "struct A { unsigned char x : 3; };"
Line 4239
  36 always 36
  = always "struct A { unsigned short x : 3; };"
  "struct A { unsigned short x : 3; };" always "struct A { unsigned short x : 3; };"
Line 4240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4240 always 4240
  "struct A { unsigned short x ; } ;" always "struct A { unsigned short x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4240 always 4240
  code11 always "struct A { unsigned short x : 3; };"
Line 4242
  34 always 34
  = always "struct A { unsigned int x : 3; };"
  "struct A { unsigned int x : 3; };" always "struct A { unsigned int x : 3; };"
Line 4243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4243 always 4243
  "struct A { unsigned int x ; } ;" always "struct A { unsigned int x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4243 always 4243
  code12 always "struct A { unsigned int x : 3; };"
Line 4245
  35 always 35
  = always "struct A { unsigned long x : 3; };"
  "struct A { unsigned long x : 3; };" always "struct A { unsigned long x : 3; };"
Line 4246
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4246 always 4246
  "struct A { unsigned long x ; } ;" always "struct A { unsigned long x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4246 always 4246
  code13 always "struct A { unsigned long x : 3; };"
Line 4248
  37 always 37
  = always "struct A { unsigned __int8 x : 3; };"
  "struct A { unsigned __int8 x : 3; };" always "struct A { unsigned __int8 x : 3; };"
Line 4249
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4249 always 4249
  "struct A { unsigned char x ; } ;" always "struct A { unsigned char x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4249 always 4249
  code14 always "struct A { unsigned __int8 x : 3; };"
  true always 1
Line 4251
  38 always 38
  = always "struct A { unsigned __int16 x : 3; };"
  "struct A { unsigned __int16 x : 3; };" always "struct A { unsigned __int16 x : 3; };"
Line 4252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4252 always 4252
  "struct A { unsigned short x ; } ;" always "struct A { unsigned short x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4252 always 4252
  code15 always "struct A { unsigned __int16 x : 3; };"
  true always 1
Line 4254
  38 always 38
  = always "struct A { unsigned __int32 x : 3; };"
  "struct A { unsigned __int32 x : 3; };" always "struct A { unsigned __int32 x : 3; };"
Line 4255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4255 always 4255
  "struct A { unsigned int x ; } ;" always "struct A { unsigned int x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4255 always 4255
  code16 always "struct A { unsigned __int32 x : 3; };"
  true always 1
Line 4257
  38 always 38
  = always "struct A { unsigned __int64 x : 3; };"
  "struct A { unsigned __int64 x : 3; };" always "struct A { unsigned __int64 x : 3; };"
Line 4258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4258 always 4258
  "struct A { unsigned long long x ; } ;" always "struct A { unsigned long long x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4258 always 4258
  code17 always "struct A { unsigned __int64 x : 3; };"
  true always 1
Line 4260
  33 always 33
  = always "struct A { signed char x : 3; };"
  "struct A { signed char x : 3; };" always "struct A { signed char x : 3; };"
Line 4261
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4261 always 4261
  "struct A { signed char x ; } ;" always "struct A { signed char x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4261 always 4261
  code18 always "struct A { signed char x : 3; };"
Line 4263
  34 always 34
  = always "struct A { signed short x : 3; };"
  "struct A { signed short x : 3; };" always "struct A { signed short x : 3; };"
Line 4264
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4264 always 4264
  "struct A { signed short x ; } ;" always "struct A { signed short x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4264 always 4264
  code19 always "struct A { signed short x : 3; };"
Line 4266
  32 always 32
  = always "struct A { signed int x : 3; };"
  "struct A { signed int x : 3; };" always "struct A { signed int x : 3; };"
Line 4267
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4267 always 4267
  "struct A { signed int x ; } ;" always "struct A { signed int x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4267 always 4267
  code20 always "struct A { signed int x : 3; };"
Line 4269
  33 always 33
  = always "struct A { signed long x : 3; };"
  "struct A { signed long x : 3; };" always "struct A { signed long x : 3; };"
Line 4270
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4270 always 4270
  "struct A { signed long x ; } ;" always "struct A { signed long x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4270 always 4270
  code21 always "struct A { signed long x : 3; };"
Line 4272
  35 always 35
  = always "struct A { signed __int8 x : 3; };"
  "struct A { signed __int8 x : 3; };" always "struct A { signed __int8 x : 3; };"
Line 4273
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4273 always 4273
  "struct A { signed char x ; } ;" always "struct A { signed char x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4273 always 4273
  code22 always "struct A { signed __int8 x : 3; };"
  true always 1
Line 4275
  36 always 36
  = always "struct A { signed __int16 x : 3; };"
  "struct A { signed __int16 x : 3; };" always "struct A { signed __int16 x : 3; };"
Line 4276
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4276 always 4276
  "struct A { signed short x ; } ;" always "struct A { signed short x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4276 always 4276
  code23 always "struct A { signed __int16 x : 3; };"
  true always 1
Line 4278
  36 always 36
  = always "struct A { signed __int32 x : 3; };"
  "struct A { signed __int32 x : 3; };" always "struct A { signed __int32 x : 3; };"
Line 4279
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4279 always 4279
  "struct A { signed int x ; } ;" always "struct A { signed int x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4279 always 4279
  code24 always "struct A { signed __int32 x : 3; };"
  true always 1
Line 4281
  36 always 36
  = always "struct A { signed __int64 x : 3; };"
  "struct A { signed __int64 x : 3; };" always "struct A { signed __int64 x : 3; };"
Line 4282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4282 always 4282
  "struct A { signed long long x ; } ;" always "struct A { signed long long x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4282 always 4282
  code25 always "struct A { signed __int64 x : 3; };"
  true always 1
Line 4286
  33 always 33
  = always "struct A { public: int x : 3; };"
  "struct A { public: int x : 3; };" always "struct A { public: int x : 3; };"
Line 4287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4287 always 4287
  "struct A { public: int x ; } ;" always "struct A { public: int x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4287 always 4287
  code1 always "struct A { public: int x : 3; };"
Line 4289
  43 always 43
  = always "struct A { public: unsigned long x : 3; };"
  "struct A { public: unsigned long x : 3; };" always "struct A { public: unsigned long x : 3; };"
Line 4290
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4290 always 4290
  "struct A { public: unsigned long x ; } ;" always "struct A { public: unsigned long x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4290 always 4290
  code2 always "struct A { public: unsigned long x : 3; };"
Line 4292
  36 always 36
  = always "struct A { protected: int x : 3; };"
  "struct A { protected: int x : 3; };" always "struct A { protected: int x : 3; };"
Line 4293
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4293 always 4293
  "struct A { protected: int x ; } ;" always "struct A { protected: int x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4293 always 4293
  code3 always "struct A { protected: int x : 3; };"
Line 4295
  46 always 46
  = always "struct A { protected: unsigned long x : 3; };"
  "struct A { protected: unsigned long x : 3; };" always "struct A { protected: unsigned long x : 3; };"
Line 4296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4296 always 4296
  "struct A { protected: unsigned long x ; } ;" always "struct A { protected: unsigned long x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4296 always 4296
  code4 always "struct A { protected: unsigned long x : 3; };"
Line 4298
  34 always 34
  = always "struct A { private: int x : 3; };"
  "struct A { private: int x : 3; };" always "struct A { private: int x : 3; };"
Line 4299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4299 always 4299
  "struct A { private: int x ; } ;" always "struct A { private: int x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4299 always 4299
  code5 always "struct A { private: int x : 3; };"
Line 4301
  44 always 44
  = always "struct A { private: unsigned long x : 3; };"
  "struct A { private: unsigned long x : 3; };" always "struct A { private: unsigned long x : 3; };"
Line 4302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4302 always 4302
  "struct A { private: unsigned long x ; } ;" always "struct A { private: unsigned long x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4302 always 4302
  code6 always "struct A { private: unsigned long x : 3; };"
Line 4306
  31 always 31
  = always "struct A { const int x : 3; };"
  "struct A { const int x : 3; };" always "struct A { const int x : 3; };"
Line 4307
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4307 always 4307
  "struct A { const int x ; } ;" always "struct A { const int x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4307 always 4307
  code1 always "struct A { const int x : 3; };"
Line 4309
  41 always 41
  = always "struct A { const unsigned long x : 3; };"
  "struct A { const unsigned long x : 3; };" always "struct A { const unsigned long x : 3; };"
Line 4310
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4310 always 4310
  "struct A { const unsigned long x ; } ;" always "struct A { const unsigned long x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4310 always 4310
  code2 always "struct A { const unsigned long x : 3; };"
Line 4312
  39 always 39
  = always "struct A { public: const int x : 3; };"
  "struct A { public: const int x : 3; };" always "struct A { public: const int x : 3; };"
Line 4313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4313 always 4313
  "struct A { public: const int x ; } ;" always "struct A { public: const int x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4313 always 4313
  code3 always "struct A { public: const int x : 3; };"
Line 4315
  49 always 49
  = always "struct A { public: const unsigned long x : 3; };"
  "struct A { public: const unsigned long x : 3; };" always "struct A { public: const unsigned long x : 3; };"
Line 4316
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4316 always 4316
  "struct A { public: const unsigned long x ; } ;" always "struct A { public: const unsigned long x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4316 always 4316
  code4 always "struct A { public: const unsigned long x : 3; };"
Line 4320
  26 always 26
  = always "struct A { CHAR x : 3; };"
  "struct A { CHAR x : 3; };" always "struct A { CHAR x : 3; };"
Line 4321
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4321 always 4321
  "struct A { CHAR x ; } ;" always "struct A { CHAR x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4321 always 4321
  code1 always "struct A { CHAR x : 3; };"
Line 4323
  27 always 27
  = always "struct A { UCHAR x : 3; };"
  "struct A { UCHAR x : 3; };" always "struct A { UCHAR x : 3; };"
Line 4324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4324 always 4324
  "struct A { UCHAR x ; } ;" always "struct A { UCHAR x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4324 always 4324
  code2 always "struct A { UCHAR x : 3; };"
Line 4326
  26 always 26
  = always "struct A { BYTE x : 3; };"
  "struct A { BYTE x : 3; };" always "struct A { BYTE x : 3; };"
Line 4327
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4327 always 4327
  "struct A { BYTE x ; } ;" always "struct A { BYTE x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4327 always 4327
  code3 always "struct A { BYTE x : 3; };"
Line 4329
  26 always 26
  = always "struct A { WORD x : 3; };"
  "struct A { WORD x : 3; };" always "struct A { WORD x : 3; };"
Line 4330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4330 always 4330
  "struct A { WORD x ; } ;" always "struct A { WORD x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4330 always 4330
  code4 always "struct A { WORD x : 3; };"
Line 4332
  27 always 27
  = always "struct A { DWORD x : 3; };"
  "struct A { DWORD x : 3; };" always "struct A { DWORD x : 3; };"
Line 4333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4333 always 4333
  "struct A { DWORD x ; } ;" always "struct A { DWORD x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4333 always 4333
  code5 always "struct A { DWORD x : 3; };"
Line 4335
  26 always 26
  = always "struct A { LONG x : 3; };"
  "struct A { LONG x : 3; };" always "struct A { LONG x : 3; };"
Line 4336
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4336 always 4336
  "struct A { LONG x ; } ;" always "struct A { LONG x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4336 always 4336
  code6 always "struct A { LONG x : 3; };"
Line 4338
  27 always 27
  = always "struct A { UINT8 x : 3; };"
  "struct A { UINT8 x : 3; };" always "struct A { UINT8 x : 3; };"
Line 4339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4339 always 4339
  "struct A { UINT8 x ; } ;" always "struct A { UINT8 x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4339 always 4339
  code7 always "struct A { UINT8 x : 3; };"
Line 4341
  28 always 28
  = always "struct A { UINT16 x : 3; };"
  "struct A { UINT16 x : 3; };" always "struct A { UINT16 x : 3; };"
Line 4342
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4342 always 4342
  "struct A { UINT16 x ; } ;" always "struct A { UINT16 x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4342 always 4342
  code8 always "struct A { UINT16 x : 3; };"
Line 4344
  28 always 28
  = always "struct A { UINT32 x : 3; };"
  "struct A { UINT32 x : 3; };" always "struct A { UINT32 x : 3; };"
Line 4345
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4345 always 4345
  "struct A { UINT32 x ; } ;" always "struct A { UINT32 x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4345 always 4345
  code9 always "struct A { UINT32 x : 3; };"
Line 4347
  28 always 28
  = always "struct A { UINT64 x : 3; };"
  "struct A { UINT64 x : 3; };" always "struct A { UINT64 x : 3; };"
Line 4348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4348 always 4348
  "struct A { UINT64 x ; } ;" always "struct A { UINT64 x ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4348 always 4348
  code10 always "struct A { UINT64 x : 3; };"
Line 4352
  50 always 50
  = always "struct RGB { unsigned int r : 3, g : 3, b : 2; };"
  "struct RGB { unsigned int r : 3, g : 3, b : 2; };" always "struct RGB { unsigned int r : 3, g : 3, b : 2; };"
Line 4353
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4353 always 4353
  "struct RGB { unsigned int r ; unsigned int g ; unsigned int b ; } ;" always "struct RGB { unsigned int r ; unsigned int g ; unsigned int b ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4353 always 4353
  code1 always "struct RGB { unsigned int r : 3, g : 3, b : 2; };"
Line 4355
  45 always 45
  = always "struct A { int a : 3; int : 3; int c : 3; };"
  "struct A { int a : 3; int : 3; int c : 3; };" always "struct A { int a : 3; int : 3; int c : 3; };"
Line 4356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4356 always 4356
  "struct A { int a ; int c ; } ;" always "struct A { int a ; int c ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4356 always 4356
  code2 always "struct A { int a : 3; int : 3; int c : 3; };"
Line 4358
  46 always 46
  = always "struct A { virtual void f() {} int f1 : 1; };"
  "struct A { virtual void f() {} int f1 : 1; };" always "struct A { virtual void f() {} int f1 : 1; };"
Line 4359
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4359 always 4359
  "struct A { virtual void f ( ) { } int f1 ; } ;" always "struct A { virtual void f ( ) { } int f1 ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4359 always 4359
  code3 always "struct A { virtual void f() {} int f1 : 1; };"
Line 4363
  29 always 29
  = always "struct A { bool b : true; };"
  "struct A { bool b : true; };" always "struct A { bool b : true; };"
Line 4364
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4364 always 4364
  "struct A { bool b ; } ;" always "struct A { bool b ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4364 always 4364
  code1 always "struct A { bool b : true; };"
Line 4366
  39 always 39
  = always "struct A { bool b : true, c : true; };"
  "struct A { bool b : true, c : true; };" always "struct A { bool b : true, c : true; };"
Line 4367
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4367 always 4367
  "struct A { bool b ; bool c ; } ;" always "struct A { bool b ; bool c ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4367 always 4367
  code2 always "struct A { bool b : true, c : true; };"
Line 4369
  27 always 27
  = always "struct A { bool : true; };"
  "struct A { bool : true; };" always "struct A { bool : true; };"
Line 4370
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4370 always 4370
  "struct A { } ;" always "struct A { } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4370 always 4370
  code3 always "struct A { bool : true; };"
Line 4374
  90 always 90
  = always "typedef struct Descriptor {    unsigned element_size: 8* sizeof( unsigned );} Descriptor;"
  "typedef struct Descriptor {    unsigned element_size: 8* sizeof( unsigned );} Descriptor;" always "typedef struct Descriptor {    unsigned element_size: 8* sizeof( unsigned );} Descriptor;"
Line 4377
  52 always 52
  = always "struct Descriptor { unsigned int element_size ; } ;"
  "struct Descriptor { unsigned int element_size ; } ;" always "struct Descriptor { unsigned int element_size ; } ;"
Line 4380
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4380 always 4380
  expected always "struct Descriptor { unsigned int element_size ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4380 always 4380
  code always "typedef struct Descriptor {    unsigned element_size: 8* sizeof( unsigned );} Descriptor;"
Line 4381
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4381 always 4381
  "" always ""
Line 4385
  51 always 51
  = always "struct A;class B : virtual public C{    int f();};"
  "struct A;class B : virtual public C{    int f();};" always "struct A;class B : virtual public C{    int f();};"
Line 4390
  56 always 56
  = always "struct A ; class B : virtual public C { int f ( ) ; } ;"
  "struct A ; class B : virtual public C { int f ( ) ; } ;" always "struct A ; class B : virtual public C { int f ( ) ; } ;"
Line 4395
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4395 always 4395
  expected always "struct A ; class B : virtual public C { int f ( ) ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4395 always 4395
  code always "struct A;class B : virtual public C{    int f();};"
Line 4396
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4396 always 4396
  "" always ""
Line 4400
  57 always 57
  = always "void f() {\n    goto half;\nhalf:\n    {\n        ;\n    }\n};"
  "void f() {\n    goto half;\nhalf:\n    {\n        ;\n    }\n};" always "void f() {\n    goto half;\nhalf:\n    {\n        ;\n    }\n};"
Line 4407
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4407 always 4407
  code always "void f() {\n    goto half;\nhalf:\n    {\n        ;\n    }\n};"
Line 4408
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4408 always 4408
  "" always ""
Line 4412
  22 always 22
  = always "{}MACRO default: { };"
  "{}MACRO default: { };" always "{}MACRO default: { };"
Line 4416
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4416 always 4416
  "{ } MACRO default : { } ;" always "{ } MACRO default : { } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4416 always 4416
  code always "{}MACRO default: { };"
Line 4420
  9 always 9
  = always "{a:1;};\n"
  "{a:1;};\n" always "{a:1;};\n"
Line 4421
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4421 always 4421
  "{ } ;" always "{ } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4421 always 4421
  code always "{a:1;};\n"
Line 4425
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4425 always 4425
  "x y ;" always "x y ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4425 always 4425
  "struct{x y:};\n" always "struct{x y:};\n"
Line 4429
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4429 always 4429
  "class x { protected: } ;" always "class x { protected: } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4429 always 4429
  "class x { signals: };\n" always "class x { signals: };\n"
Line 4433
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4433 always 4433
  "struct AB {\nenum Foo { A , B } ; enum Foo Anonymous ;\n} ;" always "struct AB {\nenum Foo { A , B } ; enum Foo Anonymous ;\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4433 always 4433
  "struct AB {\n  enum Foo {A,B} : 4;\n};" always "struct AB {\n  enum Foo {A,B} : 4;\n};"
Line 4439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4439 always 4439
  "struct AB {\nenum Foo { A , B } ; enum Foo foo ;\n} ;" always "struct AB {\nenum Foo { A , B } ; enum Foo foo ;\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4439 always 4439
  "struct AB {\n  enum Foo {A,B} foo : 4;\n};" always "struct AB {\n  enum Foo {A,B} foo : 4;\n};"
Line 4448
  34 always 34
  = always "struct A { unsigned int x : 1; };"
  "struct A { unsigned int x : 1; };" always "struct A { unsigned int x : 1; };"
Line 4450
  "" always ""
Line 4451
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 4452
  code always "struct A { unsigned int x : 1; };"
Line 4453
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4453 always 4453
  "test.cpp" always "test.cpp"
Line 4454
  "x" always "x"
Line 4455
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4455 always 4455
  1 always 1
Line 4461
  = always "map<foo, bar> m;"
  "map<foo, bar> m;" always "map<foo, bar> m;"
Line 4462
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4462 always 4462
  "map < foo , bar > m ;" always "map < foo , bar > m ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4462 always 4462
  code always "map<foo, bar> m;"
Line 4464
  = always "using namespace std;\nmap<foo, bar> m;"
  "using namespace std;\nmap<foo, bar> m;" always "using namespace std;\nmap<foo, bar> m;"
Line 4466
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4466 always 4466
  "std :: map < foo , bar > m ;" always "std :: map < foo , bar > m ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4466 always 4466
  code always "using namespace std;\nmap<foo, bar> m;"
Line 4468
  = always "using namespace std;\nstring s;"
  "using namespace std;\nstring s;" always "using namespace std;\nstring s;"
Line 4470
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4470 always 4470
  "std :: string s ;" always "std :: string s ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4470 always 4470
  code always "using namespace std;\nstring s;"
Line 4472
  = always "using namespace std;\nvoid foo() {swap(a, b); }"
  "using namespace std;\nvoid foo() {swap(a, b); }" always "using namespace std;\nvoid foo() {swap(a, b); }"
Line 4474
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4474 always 4474
  "void foo ( ) { std :: swap ( a , b ) ; }" always "void foo ( ) { std :: swap ( a , b ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4474 always 4474
  code always "using namespace std;\nvoid foo() {swap(a, b); }"
Line 4476
  = always "using namespace std;\nvoid search() {}"
  "using namespace std;\nvoid search() {}" always "using namespace std;\nvoid search() {}"
Line 4478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4478 always 4478
  "void search ( ) { }" always "void search ( ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4478 always 4478
  code always "using namespace std;\nvoid search() {}"
Line 4480
  = always "using namespace std;\nvoid search();\nvoid dostuff() { search(); }"
  "using namespace std;\nvoid search();\nvoid dostuff() { search(); }" always "using namespace std;\nvoid search();\nvoid dostuff() { search(); }"
Line 4483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4483 always 4483
  "void search ( ) ;\nvoid dostuff ( ) { search ( ) ; }" always "void search ( ) ;\nvoid dostuff ( ) { search ( ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4483 always 4483
  code always "using namespace std;\nvoid search();\nvoid dostuff() { search(); }"
Line 4485
  = always "using namespace std;\nvoid foo() {map(a, b); }"
  "using namespace std;\nvoid foo() {map(a, b); }" always "using namespace std;\nvoid foo() {map(a, b); }"
Line 4487
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4487 always 4487
  "void foo ( ) { map ( a , b ) ; }" always "void foo ( ) { map ( a , b ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4487 always 4487
  code always "using namespace std;\nvoid foo() {map(a, b); }"
Line 4489
  = always "using namespace std;\nstring<wchar_t> s;"
  "using namespace std;\nstring<wchar_t> s;" always "using namespace std;\nstring<wchar_t> s;"
Line 4491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4491 always 4491
  "string < wchar_t > s ;" always "string < wchar_t > s ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4491 always 4491
  code always "using namespace std;\nstring<wchar_t> s;"
Line 4493
  = always "using namespace std;\nswap s;"
  "using namespace std;\nswap s;" always "using namespace std;\nswap s;"
Line 4495
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4495 always 4495
  "swap s ;" always "swap s ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4495 always 4495
  code always "using namespace std;\nswap s;"
Line 4497
  = always "using namespace std;\nstd::string s;"
  "using namespace std;\nstd::string s;" always "using namespace std;\nstd::string s;"
Line 4499
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4499 always 4499
  "std :: string s ;" always "std :: string s ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4499 always 4499
  code always "using namespace std;\nstd::string s;"
Line 4501
  = always "using namespace std;\ntr1::function <void(int)> f;"
  "using namespace std;\ntr1::function <void(int)> f;" always "using namespace std;\ntr1::function <void(int)> f;"
Line 4503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4503 always 4503
  "tr1 :: function < void ( int ) > f ;" always "tr1 :: function < void ( int ) > f ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4503 always 4503
  code always "using namespace std;\ntr1::function <void(int)> f;"
  true always 1
  "test.cpp" always "test.cpp"
  false always 0
Line 4504
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4504 always 4504
  "std :: function < void ( int ) > f ;" always "std :: function < void ( int ) > f ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4504 always 4504
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 4506
  = always "std::tr1::function <void(int)> f;"
  "std::tr1::function <void(int)> f;" always "std::tr1::function <void(int)> f;"
Line 4507
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4507 always 4507
  "std :: tr1 :: function < void ( int ) > f ;" always "std :: tr1 :: function < void ( int ) > f ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4507 always 4507
  code always "std::tr1::function <void(int)> f;"
  true always 1
  "test.cpp" always "test.cpp"
  false always 0
Line 4508
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4508 always 4508
  "std :: function < void ( int ) > f ;" always "std :: function < void ( int ) > f ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4508 always 4508
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 4511
  = always "using namespace std;\nconst char * string = \"Hi\";"
  "using namespace std;\nconst char * string = \"Hi\";" always "using namespace std;\nconst char * string = \"Hi\";"
Line 4513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4513 always 4513
  "const char * string ; string = \"Hi\" ;" always "const char * string ; string = \"Hi\" ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4513 always 4513
  code always "using namespace std;\nconst char * string = \"Hi\";"
Line 4515
  = always "using namespace std;\nstring f(const char * string) {\n    cout << string << endl;\n    return string;\n}"
  "using namespace std;\nstring f(const char * string) {\n    cout << string << endl;\n    return string;\n}" always "using namespace std;\nstring f(const char * string) {\n    cout << string << endl;\n    return string;\n}"
Line 4520
  = always "std :: string f ( const char * string ) {\nstd :: cout << string << std :: endl ;\nreturn string ;\n}"
  "std :: string f ( const char * string ) {\nstd :: cout << string << std :: endl ;\nreturn string ;\n}" always "std :: string f ( const char * string ) {\nstd :: cout << string << std :: endl ;\nreturn string ;\n}"
Line 4524
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4524 always 4524
  expected always "std :: string f ( const char * string ) {\nstd :: cout << string << std :: endl ;\nreturn string ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4524 always 4524
  code always "using namespace std;\nstring f(const char * string) {\n    cout << string << endl;\n    return string;\n}"
Line 4526
  = always "using namespace std;\nvoid f() {\n  try { }\n  catch(std::exception &exception) { }\n}"
  "using namespace std;\nvoid f() {\n  try { }\n  catch(std::exception &exception) { }\n}" always "using namespace std;\nvoid f() {\n  try { }\n  catch(std::exception &exception) { }\n}"
Line 4531
  = always "void f ( ) {\ntry { }\ncatch ( std :: exception & exception ) { }\n}"
  "void f ( ) {\ntry { }\ncatch ( std :: exception & exception ) { }\n}" always "void f ( ) {\ntry { }\ncatch ( std :: exception & exception ) { }\n}"
Line 4535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4535 always 4535
  expected always "void f ( ) {\ntry { }\ncatch ( std :: exception & exception ) { }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4535 always 4535
  code always "using namespace std;\nvoid f() {\n  try { }\n  catch(std::exception &exception) { }\n}"
Line 4538
  = always "using namespace std;\nclass C {\n    void search() {}\n    void search() const {}\n    void search() THROW_MACRO {}\n};"
  "using namespace std;\nclass C {\n    void search() {}\n    void search() const {}\n    void search() THROW_MACRO {}\n};" always "using namespace std;\nclass C {\n    void search() {}\n    void search() const {}\n    void search() THROW_MACRO {}\n};"
Line 4544
  = always "class C {\nvoid search ( ) { }\nvoid search ( ) const { }\nvoid search ( ) { }\n} ;"
  "class C {\nvoid search ( ) { }\nvoid search ( ) const { }\nvoid search ( ) { }\n} ;" always "class C {\nvoid search ( ) { }\nvoid search ( ) const { }\nvoid search ( ) { }\n} ;"
Line 4549
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4549 always 4549
  expected always "class C {\nvoid search ( ) { }\nvoid search ( ) const { }\nvoid search ( ) { }\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4549 always 4549
  code always "using namespace std;\nclass C {\n    void search() {}\n    void search() const {}\n    void search() THROW_MACRO {}\n};"
Line 4552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4552 always 4552
  "enum Anonymous0 { string } ;" always "enum Anonymous0 { string } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4552 always 4552
  "using namespace std; enum { string };" always "using namespace std; enum { string };"
Line 4555
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4555 always 4555
  "enum Type { string } ;" always "enum Type { string } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4555 always 4555
  "using namespace std; enum Type { string } ;" always "using namespace std; enum Type { string } ;"
Line 4558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4558 always 4558
  "enum class Type { string } ;" always "enum class Type { string } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4558 always 4558
  "using namespace std; enum class Type { string } ;" always "using namespace std; enum class Type { string } ;"
Line 4561
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4561 always 4561
  "enum struct Type { string } ;" always "enum struct Type { string } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4561 always 4561
  "using namespace std; enum struct Type { string } ;" always "using namespace std; enum struct Type { string } ;"
Line 4564
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4564 always 4564
  "enum struct Type : int { f = 0 , string } ;" always "enum struct Type : int { f = 0 , string } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4564 always 4564
  "using namespace std; enum struct Type : int { f = 0 , string } ;" always "using namespace std; enum struct Type : int { f = 0 , string } ;"
Line 4567
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4567 always 4567
  "enum Type { a , b } ; void foo ( enum Type , std :: string ) { }" always "enum Type { a , b } ; void foo ( enum Type , std :: string ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4567 always 4567
  "using namespace std; enum Type { a , b } ; void foo ( enum Type , string) {}" always "using namespace std; enum Type { a , b } ; void foo ( enum Type , string) {}"
Line 4570
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4570 always 4570
  "struct T { } ; enum struct Type : int { f = 0 , string } ;" always "struct T { } ; enum struct Type : int { f = 0 , string } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4570 always 4570
  "using namespace std; struct T { typedef int type; } ; enum struct Type : T :: type { f = 0 , string } ;" always "using namespace std; struct T { typedef int type; } ; enum struct Type : T :: type { f = 0 , string } ;"
Line 4575
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4575 always 4575
  "enum E : int ; void foo ( ) { std :: string s ; }" always "enum E : int ; void foo ( ) { std :: string s ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4575 always 4575
  "using namespace std; enum E : int ; void foo ( ) { string s ; }" always "using namespace std; enum E : int ; void foo ( ) { string s ; }"
Line 4578
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4578 always 4578
  "NS_BEGIN(IMAGEIO_2D_DICOM) using namespace std; NS_END" always "NS_BEGIN(IMAGEIO_2D_DICOM) using namespace std; NS_END"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4578 always 4578
  false always 0
Line 4582
  62 always 62
  = always "void foo() { int a[10], b[10]; CopyMemory(a, b, sizeof(a)); }"
  "void foo() { int a[10], b[10]; CopyMemory(a, b, sizeof(a)); }" always "void foo() { int a[10], b[10]; CopyMemory(a, b, sizeof(a)); }"
Line 4583
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4583 always 4583
  "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcpy ( a , b , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcpy ( a , b , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4583 always 4583
  code1a always "void foo() { int a[10], b[10]; CopyMemory(a, b, sizeof(a)); }"
  true always 1
Line 4585
  65 always 65
  = always "void foo() { int a[10], b[10]; RtlCopyMemory(a, b, sizeof(a)); }"
  "void foo() { int a[10], b[10]; RtlCopyMemory(a, b, sizeof(a)); }" always "void foo() { int a[10], b[10]; RtlCopyMemory(a, b, sizeof(a)); }"
Line 4586
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4586 always 4586
  "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcpy ( a , b , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcpy ( a , b , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4586 always 4586
  code1b always "void foo() { int a[10], b[10]; RtlCopyMemory(a, b, sizeof(a)); }"
  true always 1
Line 4588
  64 always 64
  = always "void foo() { int a[10], b[10]; RtlCopyBytes(a, b, sizeof(a)); }"
  "void foo() { int a[10], b[10]; RtlCopyBytes(a, b, sizeof(a)); }" always "void foo() { int a[10], b[10]; RtlCopyBytes(a, b, sizeof(a)); }"
Line 4589
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4589 always 4589
  "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcpy ( a , b , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcpy ( a , b , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4589 always 4589
  code1c always "void foo() { int a[10], b[10]; RtlCopyBytes(a, b, sizeof(a)); }"
  true always 1
Line 4591
  57 always 57
  = always "void foo() { int a[10]; FillMemory(a, sizeof(a), 255); }"
  "void foo() { int a[10]; FillMemory(a, sizeof(a), 255); }" always "void foo() { int a[10]; FillMemory(a, sizeof(a), 255); }"
Line 4592
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4592 always 4592
  "void foo ( ) { int a [ 10 ] ; memset ( a , 255 , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; memset ( a , 255 , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4592 always 4592
  code2a always "void foo() { int a[10]; FillMemory(a, sizeof(a), 255); }"
  true always 1
Line 4593
  60 always 60
  = always "void foo() { int a[10]; RtlFillMemory(a, sizeof(a), 255); }"
  "void foo() { int a[10]; RtlFillMemory(a, sizeof(a), 255); }" always "void foo() { int a[10]; RtlFillMemory(a, sizeof(a), 255); }"
Line 4594
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4594 always 4594
  "void foo ( ) { int a [ 10 ] ; memset ( a , 255 , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; memset ( a , 255 , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4594 always 4594
  code2b always "void foo() { int a[10]; RtlFillMemory(a, sizeof(a), 255); }"
  true always 1
Line 4595
  59 always 59
  = always "void foo() { int a[10]; RtlFillBytes(a, sizeof(a), 255); }"
  "void foo() { int a[10]; RtlFillBytes(a, sizeof(a), 255); }" always "void foo() { int a[10]; RtlFillBytes(a, sizeof(a), 255); }"
Line 4596
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4596 always 4596
  "void foo ( ) { int a [ 10 ] ; memset ( a , 255 , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; memset ( a , 255 , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4596 always 4596
  code2c always "void foo() { int a[10]; RtlFillBytes(a, sizeof(a), 255); }"
  true always 1
Line 4598
  62 always 62
  = always "void foo() { int a[10], b[10]; MoveMemory(a, b, sizeof(a)); }"
  "void foo() { int a[10], b[10]; MoveMemory(a, b, sizeof(a)); }" always "void foo() { int a[10], b[10]; MoveMemory(a, b, sizeof(a)); }"
Line 4599
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4599 always 4599
  "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memmove ( a , b , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memmove ( a , b , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4599 always 4599
  code3a always "void foo() { int a[10], b[10]; MoveMemory(a, b, sizeof(a)); }"
  true always 1
Line 4600
  65 always 65
  = always "void foo() { int a[10], b[10]; RtlMoveMemory(a, b, sizeof(a)); }"
  "void foo() { int a[10], b[10]; RtlMoveMemory(a, b, sizeof(a)); }" always "void foo() { int a[10], b[10]; RtlMoveMemory(a, b, sizeof(a)); }"
Line 4601
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4601 always 4601
  "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memmove ( a , b , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memmove ( a , b , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4601 always 4601
  code3b always "void foo() { int a[10], b[10]; RtlMoveMemory(a, b, sizeof(a)); }"
  true always 1
Line 4603
  52 always 52
  = always "void foo() { int a[10]; ZeroMemory(a, sizeof(a)); }"
  "void foo() { int a[10]; ZeroMemory(a, sizeof(a)); }" always "void foo() { int a[10]; ZeroMemory(a, sizeof(a)); }"
Line 4604
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4604 always 4604
  "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4604 always 4604
  code4a always "void foo() { int a[10]; ZeroMemory(a, sizeof(a)); }"
  true always 1
Line 4605
  55 always 55
  = always "void foo() { int a[10]; RtlZeroMemory(a, sizeof(a)); }"
  "void foo() { int a[10]; RtlZeroMemory(a, sizeof(a)); }" always "void foo() { int a[10]; RtlZeroMemory(a, sizeof(a)); }"
Line 4606
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4606 always 4606
  "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4606 always 4606
  code4b always "void foo() { int a[10]; RtlZeroMemory(a, sizeof(a)); }"
  true always 1
Line 4607
  54 always 54
  = always "void foo() { int a[10]; RtlZeroBytes(a, sizeof(a)); }"
  "void foo() { int a[10]; RtlZeroBytes(a, sizeof(a)); }" always "void foo() { int a[10]; RtlZeroBytes(a, sizeof(a)); }"
Line 4608
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4608 always 4608
  "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4608 always 4608
  code4c always "void foo() { int a[10]; RtlZeroBytes(a, sizeof(a)); }"
  true always 1
Line 4609
  61 always 61
  = always "void foo() { int a[10]; RtlSecureZeroMemory(a, sizeof(a)); }"
  "void foo() { int a[10]; RtlSecureZeroMemory(a, sizeof(a)); }" always "void foo() { int a[10]; RtlSecureZeroMemory(a, sizeof(a)); }"
Line 4610
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4610 always 4610
  "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; memset ( a , 0 , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4610 always 4610
  code4d always "void foo() { int a[10]; RtlSecureZeroMemory(a, sizeof(a)); }"
  true always 1
Line 4612
  68 always 68
  = always "void foo() { int a[10], b[10]; RtlCompareMemory(a, b, sizeof(a)); }"
  "void foo() { int a[10], b[10]; RtlCompareMemory(a, b, sizeof(a)); }" always "void foo() { int a[10], b[10]; RtlCompareMemory(a, b, sizeof(a)); }"
Line 4613
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4613 always 4613
  "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcmp ( a , b , sizeof ( a ) ) ; }" always "void foo ( ) { int a [ 10 ] ; int b [ 10 ] ; memcmp ( a , b , sizeof ( a ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4613 always 4613
  code5 always "void foo() { int a[10], b[10]; RtlCompareMemory(a, b, sizeof(a)); }"
  true always 1
Line 4615
  57 always 57
  = always "void foo() { ZeroMemory(f(1, g(a, b)), h(i, j(0, 1))); }"
  "void foo() { ZeroMemory(f(1, g(a, b)), h(i, j(0, 1))); }" always "void foo() { ZeroMemory(f(1, g(a, b)), h(i, j(0, 1))); }"
Line 4616
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4616 always 4616
  "void foo ( ) { memset ( f ( 1 , g ( a , b ) ) , 0 , h ( i , j ( 0 , 1 ) ) ) ; }" always "void foo ( ) { memset ( f ( 1 , g ( a , b ) ) , 0 , h ( i , j ( 0 , 1 ) ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4616 always 4616
  code6 always "void foo() { ZeroMemory(f(1, g(a, b)), h(i, j(0, 1))); }"
  true always 1
Line 4618
  62 always 62
  = always "void foo() { FillMemory(f(1, g(a, b)), h(i, j(0, 1)), 255); }"
  "void foo() { FillMemory(f(1, g(a, b)), h(i, j(0, 1)), 255); }" always "void foo() { FillMemory(f(1, g(a, b)), h(i, j(0, 1)), 255); }"
Line 4619
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4619 always 4619
  "void foo ( ) { memset ( f ( 1 , g ( a , b ) ) , 255 , h ( i , j ( 0 , 1 ) ) ) ; }" always "void foo ( ) { memset ( f ( 1 , g ( a , b ) ) , 255 , h ( i , j ( 0 , 1 ) ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4619 always 4619
  code7 always "void foo() { FillMemory(f(1, g(a, b)), h(i, j(0, 1)), 255); }"
  true always 1
Line 4623
  46 always 46
  = always "void foo() { _tprintf (_T(\"test\") _T(\"1\")); }"
  "void foo() { _tprintf (_T(\"test\") _T(\"1\")); }" always "void foo() { _tprintf (_T(\"test\") _T(\"1\")); }"
Line 4624
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4624 always 4624
  "void foo ( ) { printf ( \"test1\" ) ; }" always "void foo ( ) { printf ( \"test1\" ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4624 always 4624
  code1a always "void foo() { _tprintf (_T(\"test\") _T(\"1\")); }"
  true always 1
Line 4625
  52 always 52
  = always "void foo() { _tprintf (_TEXT(\"test\") _TEXT(\"2\")); }"
  "void foo() { _tprintf (_TEXT(\"test\") _TEXT(\"2\")); }" always "void foo() { _tprintf (_TEXT(\"test\") _TEXT(\"2\")); }"
Line 4626
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4626 always 4626
  "void foo ( ) { printf ( \"test2\" ) ; }" always "void foo ( ) { printf ( \"test2\" ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4626 always 4626
  code1b always "void foo() { _tprintf (_TEXT(\"test\") _TEXT(\"2\")); }"
  true always 1
Line 4627
  50 always 50
  = always "void foo() { _tprintf (TEXT(\"test\") TEXT(\"3\")); }"
  "void foo() { _tprintf (TEXT(\"test\") TEXT(\"3\")); }" always "void foo() { _tprintf (TEXT(\"test\") TEXT(\"3\")); }"
Line 4628
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4628 always 4628
  "void foo ( ) { printf ( \"test3\" ) ; }" always "void foo ( ) { printf ( \"test3\" ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4628 always 4628
  code1c always "void foo() { _tprintf (TEXT(\"test\") TEXT(\"3\")); }"
  true always 1
Line 4630
  46 always 46
  = always "void foo() { _tprintf (_T(\"test\") _T(\"1\")); }"
  "void foo() { _tprintf (_T(\"test\") _T(\"1\")); }" always "void foo() { _tprintf (_T(\"test\") _T(\"1\")); }"
Line 4631
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4631 always 4631
  "void foo ( ) { wprintf ( L\"test1\" ) ; }" always "void foo ( ) { wprintf ( L\"test1\" ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4631 always 4631
  code2a always "void foo() { _tprintf (_T(\"test\") _T(\"1\")); }"
  true always 1
Line 4632
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4632 always 4632
  "void foo ( ) { wprintf ( L\"test1\" ) ; }" always "void foo ( ) { wprintf ( L\"test1\" ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4632 always 4632
  code2a always "void foo() { _tprintf (_T(\"test\") _T(\"1\")); }"
  true always 1
Line 4633
  52 always 52
  = always "void foo() { _tprintf (_TEXT(\"test\") _TEXT(\"2\")); }"
  "void foo() { _tprintf (_TEXT(\"test\") _TEXT(\"2\")); }" always "void foo() { _tprintf (_TEXT(\"test\") _TEXT(\"2\")); }"
Line 4634
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4634 always 4634
  "void foo ( ) { wprintf ( L\"test2\" ) ; }" always "void foo ( ) { wprintf ( L\"test2\" ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4634 always 4634
  code2b always "void foo() { _tprintf (_TEXT(\"test\") _TEXT(\"2\")); }"
  true always 1
Line 4635
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4635 always 4635
  "void foo ( ) { wprintf ( L\"test2\" ) ; }" always "void foo ( ) { wprintf ( L\"test2\" ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4635 always 4635
  code2b always "void foo() { _tprintf (_TEXT(\"test\") _TEXT(\"2\")); }"
  true always 1
Line 4636
  50 always 50
  = always "void foo() { _tprintf (TEXT(\"test\") TEXT(\"3\")); }"
  "void foo() { _tprintf (TEXT(\"test\") TEXT(\"3\")); }" always "void foo() { _tprintf (TEXT(\"test\") TEXT(\"3\")); }"
Line 4637
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4637 always 4637
  "void foo ( ) { wprintf ( L\"test3\" ) ; }" always "void foo ( ) { wprintf ( L\"test3\" ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4637 always 4637
  code2c always "void foo() { _tprintf (TEXT(\"test\") TEXT(\"3\")); }"
  true always 1
Line 4638
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4638 always 4638
  "void foo ( ) { wprintf ( L\"test3\" ) ; }" always "void foo ( ) { wprintf ( L\"test3\" ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4638 always 4638
  code2c always "void foo() { _tprintf (TEXT(\"test\") TEXT(\"3\")); }"
  true always 1
Line 4643
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4643 always 4643
  "int ( * a ) ( ) ;" always "int ( * a ) ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4643 always 4643
  "int (__closure *a)();" always "int (__closure *a)();"
  true always 1
Line 4647
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4647 always 4647
  "class Fred { ; __property ; } ;" always "class Fred { ; __property ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4647 always 4647
  "class Fred { __property int x = { } };" always "class Fred { __property int x = { } };"
  true always 1
Line 4652
  377 always 377
  = always "class Counter : public QObject {     Q_OBJECT public:     Counter() { m_value = 0; }     int value() const { return m_value; } public slots:     void setValue(int value); signals:     void valueChanged(int newValue); private:     int m_value; }; void Counter::setValue(int value) {     if (value != m_value) {         m_value = value;         emit valueChanged(value);     } }"
  "class Counter : public QObject {     Q_OBJECT public:     Counter() { m_value = 0; }     int value() const { return m_value; } public slots:     void setValue(int value); signals:     void valueChanged(int newValue); private:     int m_value; }; void Counter::setValue(int value) {     if (value != m_value) {         m_value = value;         emit valueChanged(value);     } }" always "class Counter : public QObject {     Q_OBJECT public:     Counter() { m_value = 0; }     int value() const { return m_value; } public slots:     void setValue(int value); signals:     void valueChanged(int newValue); private:     int m_value; }; void Counter::setValue(int value) {     if (value != m_value) {         m_value = value;         emit valueChanged(value);     } }"
Line 4673
  339 always 339
  = always "class Counter : public QObject { public: Counter ( ) { m_value = 0 ; } int value ( ) const { return m_value ; } public: void setValue ( int value ) ; protected: void valueChanged ( int newValue ) ; private: int m_value ; } ; void Counter :: setValue ( int value ) { if ( value != m_value ) { m_value = value ; valueChanged ( value ) ; } }"
  "class Counter : public QObject { public: Counter ( ) { m_value = 0 ; } int value ( ) const { return m_value ; } public: void setValue ( int value ) ; protected: void valueChanged ( int newValue ) ; private: int m_value ; } ; void Counter :: setValue ( int value ) { if ( value != m_value ) { m_value = value ; valueChanged ( value ) ; } }" always "class Counter : public QObject { public: Counter ( ) { m_value = 0 ; } int value ( ) const { return m_value ; } public: void setValue ( int value ) ; protected: void valueChanged ( int newValue ) ; private: int m_value ; } ; void Counter :: setValue ( int value ) { if ( value != m_value ) { m_value = value ; valueChanged ( value ) ; } }"
Line 4693
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4693 always 4693
  result1 always "class Counter : public QObject { public: Counter ( ) { m_value = 0 ; } int value ( ) const { return m_value ; } public: void setValue ( int value ) ; protected: void valueChanged ( int newValue ) ; private: int m_value ; } ; void Counter :: setValue ( int value ) { if ( value != m_value ) { m_value = value ; valueChanged ( value ) ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4693 always 4693
  code1 always "class Counter : public QObject {     Q_OBJECT public:     Counter() { m_value = 0; }     int value() const { return m_value; } public slots:     void setValue(int value); signals:     void valueChanged(int newValue); private:     int m_value; }; void Counter::setValue(int value) {     if (value != m_value) {         m_value = value;         emit valueChanged(value);     } }"
Line 4695
  380 always 380
  = always "class Counter : public QObject {     Q_OBJECT public:     Counter() { m_value = 0; }     int value() const { return m_value; } public Q_SLOTS:     void setValue(int value); Q_SIGNALS:     void valueChanged(int newValue); private:     int m_value; };void Counter::setValue(int value) {     if (value != m_value) {         m_value = value;         emit valueChanged(value);     } }"
  "class Counter : public QObject {     Q_OBJECT public:     Counter() { m_value = 0; }     int value() const { return m_value; } public Q_SLOTS:     void setValue(int value); Q_SIGNALS:     void valueChanged(int newValue); private:     int m_value; };void Counter::setValue(int value) {     if (value != m_value) {         m_value = value;         emit valueChanged(value);     } }" always "class Counter : public QObject {     Q_OBJECT public:     Counter() { m_value = 0; }     int value() const { return m_value; } public Q_SLOTS:     void setValue(int value); Q_SIGNALS:     void valueChanged(int newValue); private:     int m_value; };void Counter::setValue(int value) {     if (value != m_value) {         m_value = value;         emit valueChanged(value);     } }"
Line 4716
  339 always 339
  = always "class Counter : public QObject { public: Counter ( ) { m_value = 0 ; } int value ( ) const { return m_value ; } public: void setValue ( int value ) ; protected: void valueChanged ( int newValue ) ; private: int m_value ; } ; void Counter :: setValue ( int value ) { if ( value != m_value ) { m_value = value ; valueChanged ( value ) ; } }"
  "class Counter : public QObject { public: Counter ( ) { m_value = 0 ; } int value ( ) const { return m_value ; } public: void setValue ( int value ) ; protected: void valueChanged ( int newValue ) ; private: int m_value ; } ; void Counter :: setValue ( int value ) { if ( value != m_value ) { m_value = value ; valueChanged ( value ) ; } }" always "class Counter : public QObject { public: Counter ( ) { m_value = 0 ; } int value ( ) const { return m_value ; } public: void setValue ( int value ) ; protected: void valueChanged ( int newValue ) ; private: int m_value ; } ; void Counter :: setValue ( int value ) { if ( value != m_value ) { m_value = value ; valueChanged ( value ) ; } }"
Line 4736
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4736 always 4736
  result2 always "class Counter : public QObject { public: Counter ( ) { m_value = 0 ; } int value ( ) const { return m_value ; } public: void setValue ( int value ) ; protected: void valueChanged ( int newValue ) ; private: int m_value ; } ; void Counter :: setValue ( int value ) { if ( value != m_value ) { m_value = value ; valueChanged ( value ) ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4736 always 4736
  code2 always "class Counter : public QObject {     Q_OBJECT public:     Counter() { m_value = 0; }     int value() const { return m_value; } public Q_SLOTS:     void setValue(int value); Q_SIGNALS:     void valueChanged(int newValue); private:     int m_value; };void Counter::setValue(int value) {     if (value != m_value) {         m_value = value;         emit valueChanged(value);     } }"
Line 4738
  122 always 122
  = always "class MyObject : public QObject {    MyObject() {}    ~MyObject() {}    public slots:    signals:        void test() {}};"
  "class MyObject : public QObject {    MyObject() {}    ~MyObject() {}    public slots:    signals:        void test() {}};" always "class MyObject : public QObject {    MyObject() {}    ~MyObject() {}    public slots:    signals:        void test() {}};"
Line 4745
  111 always 111
  = always "class MyObject : public QObject { MyObject ( ) { } ~ MyObject ( ) { } public: protected: void test ( ) { } } ;"
  "class MyObject : public QObject { MyObject ( ) { } ~ MyObject ( ) { } public: protected: void test ( ) { } } ;" always "class MyObject : public QObject { MyObject ( ) { } ~ MyObject ( ) { } public: protected: void test ( ) { } } ;"
Line 4753
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4753 always 4753
  result3 always "class MyObject : public QObject { MyObject ( ) { } ~ MyObject ( ) { } public: protected: void test ( ) { } } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4753 always 4753
  code3 always "class MyObject : public QObject {    MyObject() {}    ~MyObject() {}    public slots:    signals:        void test() {}};"
Line 4754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4754 always 4754
  "" always ""
Line 4756
  62 always 62
  = always "class MyObject : public QObject {    Q_OBJECT public slots:};"
  "class MyObject : public QObject {    Q_OBJECT public slots:};" always "class MyObject : public QObject {    Q_OBJECT public slots:};"
Line 4760
  46 always 46
  = always "class MyObject : public QObject { public: } ;"
  "class MyObject : public QObject { public: } ;" always "class MyObject : public QObject { public: } ;"
Line 4764
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4764 always 4764
  result4 always "class MyObject : public QObject { public: } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4764 always 4764
  code4 always "class MyObject : public QObject {    Q_OBJECT public slots:};"
Line 4768
  51 always 51
  = always "class Foo::Bar: public QObject { private slots: };"
  "class Foo::Bar: public QObject { private slots: };" always "class Foo::Bar: public QObject { private slots: };"
Line 4769
  49 always 49
  = always "class Foo :: Bar : public QObject { private: } ;"
  "class Foo :: Bar : public QObject { private: } ;" always "class Foo :: Bar : public QObject { private: } ;"
Line 4770
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4770 always 4770
  result1 always "class Foo :: Bar : public QObject { private: } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4770 always 4770
  code1 always "class Foo::Bar: public QObject { private slots: };"
Line 4776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4776 always 4776
  "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL SELECT A FROM B\"\" ) ;" always "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL SELECT A FROM B\"\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4776 always 4776
  "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL SELECT A FROM B;" always "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL SELECT A FROM B;"
Line 4777
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4777 always 4777
  "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL" always "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4777 always 4777
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4777 always 4777
  false always 0
Line 4779
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4779 always 4779
  "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1 ( A ) ; END ; END - __CPPCHECK_EMBEDDED_SQL_EXEC__\"\" ) ; asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT\"\" ) ;" always "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1 ( A ) ; END ; END - __CPPCHECK_EMBEDDED_SQL_EXEC__\"\" ) ; asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT\"\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4779 always 4779
  "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1(A); END; END-__CPPCHECK_EMBEDDED_SQL_EXEC__; __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT;" always "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1(A); END; END-__CPPCHECK_EMBEDDED_SQL_EXEC__; __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT;"
Line 4781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4781 always 4781
  "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL UPDATE A SET B = C\"\" ) ; asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT\"\" ) ;" always "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL UPDATE A SET B = C\"\" ) ; asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT\"\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4781 always 4781
  "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL UPDATE A SET B = C; __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT;" always "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL UPDATE A SET B = C; __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT;"
Line 4783
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4783 always 4783
  "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT\"\" ) ; asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1 ( A ) ; END ; END - __CPPCHECK_EMBEDDED_SQL_EXEC__\"\" ) ;" always "asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT\"\" ) ; asm ( \"\"__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1 ( A ) ; END ; END - __CPPCHECK_EMBEDDED_SQL_EXEC__\"\" ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4783 always 4783
  "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT; __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1(A); END; END-__CPPCHECK_EMBEDDED_SQL_EXEC__;" always "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL COMMIT; __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL EXECUTE BEGIN Proc1(A); END; END-__CPPCHECK_EMBEDDED_SQL_EXEC__;"
Line 4786
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4786 always 4786
  "int f(){ __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL } int a;" always "int f(){ __CPPCHECK_EMBEDDED_SQL_EXEC__ SQL } int a;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4786 always 4786
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4786 always 4786
  false always 0
Line 4787
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4787 always 4787
  "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL int f(){" always "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL int f(){"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4787 always 4787
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4787 always 4787
  false always 0
Line 4788
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4788 always 4788
  "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL END-__CPPCHECK_EMBEDDED_SQL_EXEC__ int a;" always "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL END-__CPPCHECK_EMBEDDED_SQL_EXEC__ int a;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4788 always 4788
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4788 always 4788
  false always 0
Line 4789
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4789 always 4789
  "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL UPDATE A SET B = :&b->b1, C = :c::c1;" always "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL UPDATE A SET B = :&b->b1, C = :c::c1;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4789 always 4789
  false always 0
Line 4793
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4793 always 4793
  "void or ( ) ;" always "void or ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4793 always 4793
  "void or(void);" always "void or(void);"
  true always 1
  "test.c" always "test.c"
Line 4794
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4794 always 4794
  "void f ( ) { if ( a && b ) { ; } }" always "void f ( ) { if ( a && b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4794 always 4794
  "void f() { if (a and b); }" always "void f() { if (a and b); }"
  true always 1
  "test.c" always "test.c"
Line 4795
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4795 always 4795
  "void f ( ) { if ( a && b ) { ; } }" always "void f ( ) { if ( a && b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4795 always 4795
  "void f() { if (a and b); }" always "void f() { if (a and b); }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4796
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4796 always 4796
  "void f ( ) { if ( a || b ) { ; } }" always "void f ( ) { if ( a || b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4796 always 4796
  "void f() { if (a or b); }" always "void f() { if (a or b); }"
  true always 1
  "test.c" always "test.c"
Line 4797
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4797 always 4797
  "void f ( ) { if ( a || b ) { ; } }" always "void f ( ) { if ( a || b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4797 always 4797
  "void f() { if (a or b); }" always "void f() { if (a or b); }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4798
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4798 always 4798
  "void f ( ) { if ( a & b ) { ; } }" always "void f ( ) { if ( a & b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4798 always 4798
  "void f() { if (a bitand b); }" always "void f() { if (a bitand b); }"
  true always 1
  "test.c" always "test.c"
Line 4799
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4799 always 4799
  "void f ( ) { if ( a & b ) { ; } }" always "void f ( ) { if ( a & b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4799 always 4799
  "void f() { if (a bitand b); }" always "void f() { if (a bitand b); }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4800 always 4800
  "void f ( ) { if ( a | b ) { ; } }" always "void f ( ) { if ( a | b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4800 always 4800
  "void f() { if (a bitor b); }" always "void f() { if (a bitor b); }"
  true always 1
  "test.c" always "test.c"
Line 4801
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4801 always 4801
  "void f ( ) { if ( a | b ) { ; } }" always "void f ( ) { if ( a | b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4801 always 4801
  "void f() { if (a bitor b); }" always "void f() { if (a bitor b); }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4802
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4802 always 4802
  "void f ( ) { if ( a ^ b ) { ; } }" always "void f ( ) { if ( a ^ b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4802 always 4802
  "void f() { if (a xor b); }" always "void f() { if (a xor b); }"
  true always 1
  "test.c" always "test.c"
Line 4803
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4803 always 4803
  "void f ( ) { if ( a ^ b ) { ; } }" always "void f ( ) { if ( a ^ b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4803 always 4803
  "void f() { if (a xor b); }" always "void f() { if (a xor b); }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4804
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4804 always 4804
  "void f ( ) { if ( ~ b ) { ; } }" always "void f ( ) { if ( ~ b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4804 always 4804
  "void f() { if (compl b); }" always "void f() { if (compl b); }"
  true always 1
  "test.c" always "test.c"
Line 4805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4805 always 4805
  "void f ( ) { if ( ~ b ) { ; } }" always "void f ( ) { if ( ~ b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4805 always 4805
  "void f() { if (compl b); }" always "void f() { if (compl b); }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4806
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4806 always 4806
  "void f ( ) { if ( ! b ) { ; } }" always "void f ( ) { if ( ! b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4806 always 4806
  "void f() { if (not b); }" always "void f() { if (not b); }"
  true always 1
  "test.c" always "test.c"
Line 4807
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4807 always 4807
  "void f ( ) { if ( ! b ) { ; } }" always "void f ( ) { if ( ! b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4807 always 4807
  "void f() { if (not b); }" always "void f() { if (not b); }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4808
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4808 always 4808
  "void f ( ) const { if ( ! b ) { ; } }" always "void f ( ) const { if ( ! b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4808 always 4808
  "void f() const { if (not b); }" always "void f() const { if (not b); }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4809
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4809 always 4809
  "void f ( ) { if ( a != b ) { ; } }" always "void f ( ) { if ( a != b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4809 always 4809
  "void f() { if (a not_eq b); }" always "void f() { if (a not_eq b); }"
  true always 1
  "test.c" always "test.c"
Line 4810
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4810 always 4810
  "void f ( ) { if ( a != b ) { ; } }" always "void f ( ) { if ( a != b ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4810 always 4810
  "void f() { if (a not_eq b); }" always "void f() { if (a not_eq b); }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4812
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4812 always 4812
  "void f ( ) { if ( ! c || ! memcmp ( a , b , s ) ) { ; } }" always "void f ( ) { if ( ! c || ! memcmp ( a , b , s ) ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4812 always 4812
  "void f() { if (!c or !memcmp(a, b, s)); }" always "void f() { if (!c or !memcmp(a, b, s)); }"
  true always 1
  "test.c" always "test.c"
Line 4813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4813 always 4813
  "void f ( ) { if ( ! c || ! memcmp ( a , b , s ) ) { ; } }" always "void f ( ) { if ( ! c || ! memcmp ( a , b , s ) ) { ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4813 always 4813
  "void f() { if (!c or !memcmp(a, b, s)); }" always "void f() { if (!c or !memcmp(a, b, s)); }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4815 always 4815
  "void f ( ) { if ( ! b ) { } }" always "void f ( ) { if ( ! b ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4815 always 4815
  "void f() { if (not b){} }" always "void f() { if (not b){} }"
  true always 1
  "test.c" always "test.c"
Line 4816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4816 always 4816
  "void f ( ) { if ( ! b ) { } }" always "void f ( ) { if ( ! b ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4816 always 4816
  "void f() { if (not b){} }" always "void f() { if (not b){} }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4818
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4818 always 4818
  "void f ( ) { if ( not = x ) { } }" always "void f ( ) { if ( not = x ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4818 always 4818
  "void f() { if (not=x){} }" always "void f() { if (not=x){} }"
  true always 1
  "test.c" always "test.c"
Line 4819
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4819 always 4819
  "void f ( ) { if ( not = x ) { } }" always "void f ( ) { if ( not = x ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4819 always 4819
  "void f() { if (not=x){} }" always "void f() { if (not=x){} }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4821
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4821 always 4821
  "void f ( struct S * s ) { x = s . and + 1 ; }" always "void f ( struct S * s ) { x = s . and + 1 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4821 always 4821
  "void f(struct S *s) { x = s->and + 1; }" always "void f(struct S *s) { x = s->and + 1; }"
  true always 1
  "test.c" always "test.c"
Line 4823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4823 always 4823
  "void f ( ) { if ( x ) { or = 0 ; } }" always "void f ( ) { if ( x ) { or = 0 ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4823 always 4823
  "void f() { if (x) or = 0; }" always "void f() { if (x) or = 0; }"
Line 4825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4825 always 4825
  "void f ( const char * str ) { while ( * str == '!' || * str == '[' ) { } }" always "void f ( const char * str ) { while ( * str == '!' || * str == '[' ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4825 always 4825
  "void f(const char *str) { while (*str=='!' or *str=='['){} }" always "void f(const char *str) { while (*str=='!' or *str=='['){} }"
Line 4828
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4828 always 4828
  "result = ch != s . end ( ) && * ch == ':' ;" always "result = ch != s . end ( ) && * ch == ':' ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4828 always 4828
  "result = ch != s.end() and *ch == ':';" always "result = ch != s.end() and *ch == ':';"
  true always 1
  "test.c" always "test.c"
Line 4831
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4831 always 4831
  "void foo ( ) {\nchar * or ;\nwhile ( ( * or != 0 ) && ( * or != '|' ) ) { or ++ ; }\n}" always "void foo ( ) {\nchar * or ;\nwhile ( ( * or != 0 ) && ( * or != '|' ) ) { or ++ ; }\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4831 always 4831
  "void foo() {\n  char *or;\n  while ((*or != 0) && (*or != '|')) or++;\n}" always "void foo() {\n  char *or;\n  while ((*or != 0) && (*or != '|')) or++;\n}"
  true always 1
  "test.c" always "test.c"
Line 4841
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4841 always 4841
  "void f ( ) { x = ! 123 ; }" always "void f ( ) { x = ! 123 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4841 always 4841
  "void f() { x = not 123; }" always "void f() { x = not 123; }"
  true always 1
  "test.cpp" always "test.cpp"
Line 4845
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4845 always 4845
  "; x = 123 ;" always "; x = 123 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4845 always 4845
  ";x=({123;});" always ";x=({123;});"
Line 4846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4846 always 4846
  "; x = y ;" always "; x = y ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4846 always 4846
  ";x=({y;});" always ";x=({y;});"
Line 4851
  47 always 47
  = always "void operator () {}int main(){    operator();}"
  "void operator () {}int main(){    operator();}" always "void operator () {}int main(){    operator();}"
Line 4857
  54 always 54
  = always "void operator ( ) { } int main ( ) { operator ( ) ; }"
  "void operator ( ) { } int main ( ) { operator ( ) ; }" always "void operator ( ) { } int main ( ) { operator ( ) ; }"
Line 4863
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4863 always 4863
  result always "void operator ( ) { } int main ( ) { operator ( ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4863 always 4863
  code always "void operator () {}int main(){    operator();}"
  true always 1
  "test.c" always "test.c"
Line 4867
  75 always 75
  = always "class Fred{    Fred(const Fred & f) { operator = (f); }    operator = ();}"
  "class Fred{    Fred(const Fred & f) { operator = (f); }    operator = ();}" always "class Fred{    Fred(const Fred & f) { operator = (f); }    operator = ();}"
Line 4873
  77 always 77
  = always "class Fred { Fred ( const Fred & f ) { operator= ( f ) ; } operator= ( ) ; }"
  "class Fred { Fred ( const Fred & f ) { operator= ( f ) ; } operator= ( ) ; }" always "class Fred { Fred ( const Fred & f ) { operator= ( f ) ; } operator= ( ) ; }"
Line 4879
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4879 always 4879
  result always "class Fred { Fred ( const Fred & f ) { operator= ( f ) ; } operator= ( ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4879 always 4879
  code always "class Fred{    Fred(const Fred & f) { operator = (f); }    operator = ();}"
Line 4884
  69 always 69
  = always "void f() {static_cast<ScToken*>(xResult.operator->())->GetMatrix();}"
  "void f() {static_cast<ScToken*>(xResult.operator->())->GetMatrix();}" always "void f() {static_cast<ScToken*>(xResult.operator->())->GetMatrix();}"
Line 4887
  87 always 87
  = always "void f ( ) { static_cast < ScToken * > ( xResult . operator. ( ) ) . GetMatrix ( ) ; }"
  "void f ( ) { static_cast < ScToken * > ( xResult . operator. ( ) ) . GetMatrix ( ) ; }" always "void f ( ) { static_cast < ScToken * > ( xResult . operator. ( ) ) . GetMatrix ( ) ; }"
Line 4888
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4888 always 4888
  result always "void f ( ) { static_cast < ScToken * > ( xResult . operator. ( ) ) . GetMatrix ( ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4888 always 4888
  code always "void f() {static_cast<ScToken*>(xResult.operator->())->GetMatrix();}"
Line 4892
  22 always 22
  = always "void operator==() { }"
  "void operator==() { }" always "void operator==() { }"
Line 4893
  24 always 24
  = always "void operator== ( ) { }"
  "void operator== ( ) { }" always "void operator== ( ) { }"
Line 4894
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4894 always 4894
  result always "void operator== ( ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4894 always 4894
  code always "void operator==() { }"
Line 4898
  56 always 56
  = always "std::istream & operator >> (std::istream & s, Fred &f);"
  "std::istream & operator >> (std::istream & s, Fred &f);" always "std::istream & operator >> (std::istream & s, Fred &f);"
Line 4899
  64 always 64
  = always "std :: istream & operator>> ( std :: istream & s , Fred & f ) ;"
  "std :: istream & operator>> ( std :: istream & s , Fred & f ) ;" always "std :: istream & operator>> ( std :: istream & s , Fred & f ) ;"
Line 4900
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4900 always 4900
  result1 always "std :: istream & operator>> ( std :: istream & s , Fred & f ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4900 always 4900
  code1 always "std::istream & operator >> (std::istream & s, Fred &f);"
Line 4902
  62 always 62
  = always "std::ostream & operator << (std::ostream & s, const Fred &f);"
  "std::ostream & operator << (std::ostream & s, const Fred &f);" always "std::ostream & operator << (std::ostream & s, const Fred &f);"
Line 4903
  70 always 70
  = always "std :: ostream & operator<< ( std :: ostream & s , const Fred & f ) ;"
  "std :: ostream & operator<< ( std :: ostream & s , const Fred & f ) ;" always "std :: ostream & operator<< ( std :: ostream & s , const Fred & f ) ;"
Line 4904
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4904 always 4904
  result2 always "std :: ostream & operator<< ( std :: ostream & s , const Fred & f ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4904 always 4904
  code2 always "std::ostream & operator << (std::ostream & s, const Fred &f);"
Line 4908
  32 always 32
  = always "value_type * operator ++ (int);"
  "value_type * operator ++ (int);" always "value_type * operator ++ (int);"
Line 4909
  34 always 34
  = always "value_type * operator++ ( int ) ;"
  "value_type * operator++ ( int ) ;" always "value_type * operator++ ( int ) ;"
Line 4910
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4910 always 4910
  result1 always "value_type * operator++ ( int ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4910 always 4910
  code1 always "value_type * operator ++ (int);"
Line 4912
  32 always 32
  = always "value_type * operator -- (int);"
  "value_type * operator -- (int);" always "value_type * operator -- (int);"
Line 4913
  34 always 34
  = always "value_type * operator-- ( int ) ;"
  "value_type * operator-- ( int ) ;" always "value_type * operator-- ( int ) ;"
Line 4914
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4914 always 4914
  result2 always "value_type * operator-- ( int ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4914 always 4914
  code2 always "value_type * operator -- (int);"
Line 4918
  32 always 32
  = always "value_type * operator += (int);"
  "value_type * operator += (int);" always "value_type * operator += (int);"
Line 4919
  34 always 34
  = always "value_type * operator+= ( int ) ;"
  "value_type * operator+= ( int ) ;" always "value_type * operator+= ( int ) ;"
Line 4920
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4920 always 4920
  result1 always "value_type * operator+= ( int ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4920 always 4920
  code1 always "value_type * operator += (int);"
Line 4924
  42 always 42
  = always "value_type * operator += (int) noexcept ;"
  "value_type * operator += (int) noexcept ;" always "value_type * operator += (int) noexcept ;"
Line 4925
  52 always 52
  = always "value_type * operator+= ( int ) noexcept ( true ) ;"
  "value_type * operator+= ( int ) noexcept ( true ) ;" always "value_type * operator+= ( int ) noexcept ( true ) ;"
Line 4926
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4926 always 4926
  result1 always "value_type * operator+= ( int ) noexcept ( true ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4926 always 4926
  code1 always "value_type * operator += (int) noexcept ;"
Line 4928
  51 always 51
  = always "value_type * operator += (int) noexcept ( true ) ;"
  "value_type * operator += (int) noexcept ( true ) ;" always "value_type * operator += (int) noexcept ( true ) ;"
Line 4929
  52 always 52
  = always "value_type * operator+= ( int ) noexcept ( true ) ;"
  "value_type * operator+= ( int ) noexcept ( true ) ;" always "value_type * operator+= ( int ) noexcept ( true ) ;"
Line 4930
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4930 always 4930
  result2 always "value_type * operator+= ( int ) noexcept ( true ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4930 always 4930
  code2 always "value_type * operator += (int) noexcept ( true ) ;"
Line 4932
  43 always 43
  = always "value_type * operator += (int) throw ( ) ;"
  "value_type * operator += (int) throw ( ) ;" always "value_type * operator += (int) throw ( ) ;"
Line 4933
  44 always 44
  = always "value_type * operator+= ( int ) throw ( ) ;"
  "value_type * operator+= ( int ) throw ( ) ;" always "value_type * operator+= ( int ) throw ( ) ;"
Line 4934
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4934 always 4934
  result3 always "value_type * operator+= ( int ) throw ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4934 always 4934
  code3 always "value_type * operator += (int) throw ( ) ;"
Line 4936
  48 always 48
  = always "value_type * operator += (int) const noexcept ;"
  "value_type * operator += (int) const noexcept ;" always "value_type * operator += (int) const noexcept ;"
Line 4937
  49 always 49
  = always "value_type * operator+= ( int ) const noexcept ;"
  "value_type * operator+= ( int ) const noexcept ;" always "value_type * operator+= ( int ) const noexcept ;"
Line 4938
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4938 always 4938
  result4 always "value_type * operator+= ( int ) const noexcept ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4938 always 4938
  code4 always "value_type * operator += (int) const noexcept ;"
Line 4940
  57 always 57
  = always "value_type * operator += (int) const noexcept ( true ) ;"
  "value_type * operator += (int) const noexcept ( true ) ;" always "value_type * operator += (int) const noexcept ( true ) ;"
Line 4941
  58 always 58
  = always "value_type * operator+= ( int ) const noexcept ( true ) ;"
  "value_type * operator+= ( int ) const noexcept ( true ) ;" always "value_type * operator+= ( int ) const noexcept ( true ) ;"
Line 4942
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4942 always 4942
  result5 always "value_type * operator+= ( int ) const noexcept ( true ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4942 always 4942
  code5 always "value_type * operator += (int) const noexcept ( true ) ;"
Line 4944
  49 always 49
  = always "value_type * operator += (int) const throw ( ) ;"
  "value_type * operator += (int) const throw ( ) ;" always "value_type * operator += (int) const throw ( ) ;"
Line 4945
  50 always 50
  = always "value_type * operator+= ( int ) const throw ( ) ;"
  "value_type * operator+= ( int ) const throw ( ) ;" always "value_type * operator+= ( int ) const throw ( ) ;"
Line 4946
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4946 always 4946
  result6 always "value_type * operator+= ( int ) const throw ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4946 always 4946
  code6 always "value_type * operator += (int) const throw ( ) ;"
Line 4948
  58 always 58
  = always "value_type * operator += (int) const noexcept ( false ) ;"
  "value_type * operator += (int) const noexcept ( false ) ;" always "value_type * operator += (int) const noexcept ( false ) ;"
Line 4949
  59 always 59
  = always "value_type * operator+= ( int ) const noexcept ( false ) ;"
  "value_type * operator+= ( int ) const noexcept ( false ) ;" always "value_type * operator+= ( int ) const noexcept ( false ) ;"
Line 4950
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4950 always 4950
  result7 always "value_type * operator+= ( int ) const noexcept ( false ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4950 always 4950
  code7 always "value_type * operator += (int) const noexcept ( false ) ;"
Line 4955
  37 always 37
  = always "struct R { R operator, ( R b ) ; } ;"
  "struct R { R operator, ( R b ) ; } ;" always "struct R { R operator, ( R b ) ; } ;"
Line 4956
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4956 always 4956
  code always "struct R { R operator, ( R b ) ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4956 always 4956
  code always "struct R { R operator, ( R b ) ; } ;"
Line 4960
  100 always 100
  = always "template <typename T>\nstruct B {\n    typedef T A[3];\n    operator A& () { return x_; }\n    A x_;\n};"
  "template <typename T>\nstruct B {\n    typedef T A[3];\n    operator A& () { return x_; }\n    A x_;\n};" always "template <typename T>\nstruct B {\n    typedef T A[3];\n    operator A& () { return x_; }\n    A x_;\n};"
Line 4966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4966 always 4966
  "template < typename T >\nstruct B {\n\noperatorT ( & ( ) ) [ 3 ] { return x_ ; }\nT x_ [ 3 ] ;\n} ;" always "template < typename T >\nstruct B {\n\noperatorT ( & ( ) ) [ 3 ] { return x_ ; }\nT x_ [ 3 ] ;\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4966 always 4966
  code always "template <typename T>\nstruct B {\n    typedef T A[3];\n    operator A& () { return x_; }\n    A x_;\n};"
Line 4967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4967 always 4967
  "" always ""
Line 4971
  27 always 27
  = always "void f(int* = nullptr) {}\n"
  "void f(int* = nullptr) {}\n" always "void f(int* = nullptr) {}\n"
Line 4972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4972 always 4972
  "void f ( int * = nullptr ) { }" always "void f ( int * = nullptr ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4972 always 4972
  code always "void f(int* = nullptr) {}\n"
Line 4973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4973 always 4973
  "" always ""
Line 4977
  20 always 20
  = always "using a::operator=;"
  "using a::operator=;" always "using a::operator=;"
Line 4978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4978 always 4978
  "using a :: operator= ;" always "using a :: operator= ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4978 always 4978
  code1 always "using a::operator=;"
Line 4980
  30 always 30
  = always "{ return &Fred::operator!=; }"
  "{ return &Fred::operator!=; }" always "{ return &Fred::operator!=; }"
Line 4981
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4981 always 4981
  "{ return & Fred :: operator!= ; }" always "{ return & Fred :: operator!= ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4981 always 4981
  code2 always "{ return &Fred::operator!=; }"
Line 4985
  49 always 49
  = always "auto operator = (const Fred & other) -> Fred & ;"
  "auto operator = (const Fred & other) -> Fred & ;" always "auto operator = (const Fred & other) -> Fred & ;"
Line 4986
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4986 always 4986
  "auto operator= ( const Fred & other ) . Fred & ;" always "auto operator= ( const Fred & other ) . Fred & ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4986 always 4986
  code always "auto operator = (const Fred & other) -> Fred & ;"
Line 4988
  51 always 51
  = always "auto operator = (const Fred & other) -> Fred & { }"
  "auto operator = (const Fred & other) -> Fred & { }" always "auto operator = (const Fred & other) -> Fred & { }"
Line 4989
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4989 always 4989
  "auto operator= ( const Fred & other ) . Fred & { }" always "auto operator= ( const Fred & other ) . Fred & { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4989 always 4989
  code1 always "auto operator = (const Fred & other) -> Fred & { }"
Line 4991
  51 always 51
  = always "template <typename T> void g(S<&T::operator+ >) {}"
  "template <typename T> void g(S<&T::operator+ >) {}" always "template <typename T> void g(S<&T::operator+ >) {}"
Line 4992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4992 always 4992
  "template < typename T > void g ( S < & T :: operator+ > ) { }" always "template < typename T > void g ( S < & T :: operator+ > ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4992 always 4992
  code2 always "template <typename T> void g(S<&T::operator+ >) {}"
Line 4994
  53 always 53
  = always "template <typename T> void g(S<&T::operator int>) {}"
  "template <typename T> void g(S<&T::operator int>) {}" always "template <typename T> void g(S<&T::operator int>) {}"
Line 4995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4995 always 4995
  "template < typename T > void g ( S < & T :: operatorint > ) { }" always "template < typename T > void g ( S < & T :: operatorint > ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4995 always 4995
  code3 always "template <typename T> void g(S<&T::operator int>) {}"
Line 4997
  69 always 69
  = always "template <typename T> void g(S<&T::template operator- <double> >) {}"
  "template <typename T> void g(S<&T::template operator- <double> >) {}" always "template <typename T> void g(S<&T::template operator- <double> >) {}"
Line 4998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4998 always 4998
  "template < typename T > void g ( S < & T :: operator- < double > > ) { }" always "template < typename T > void g ( S < & T :: operator- < double > > ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  4998 always 4998
  code4 always "template <typename T> void g(S<&T::template operator- <double> >) {}"
Line 5002
  74 always 74
  = always "namespace a {template <typename b> void operator+(b);}using a::operator+;"
  "namespace a {template <typename b> void operator+(b);}using a::operator+;" always "namespace a {template <typename b> void operator+(b);}using a::operator+;"
Line 5006
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5006 always 5006
  "namespace a { template < typename b > void operator+ ( b ) ; } using a :: operator+ ;" always "namespace a { template < typename b > void operator+ ( b ) ; } using a :: operator+ ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5006 always 5006
  code always "namespace a {template <typename b> void operator+(b);}using a::operator+;"
Line 5014
  68 always 68
  = always "unsigned long operator\"\"_numch(const char *ch, unsigned long size);"
  "unsigned long operator\"\"_numch(const char *ch, unsigned long size);" always "unsigned long operator\"\"_numch(const char *ch, unsigned long size);"
Line 5015
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5015 always 5015
  "unsigned long operator\"\"_numch ( const char * ch , unsigned long size ) ;" always "unsigned long operator\"\"_numch ( const char * ch , unsigned long size ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5015 always 5015
  code always "unsigned long operator\"\"_numch(const char *ch, unsigned long size);"
Line 5021
  63 always 63
  = always "constexpr std::complex<float> operator\"\"if(long double __num);"
  "constexpr std::complex<float> operator\"\"if(long double __num);" always "constexpr std::complex<float> operator\"\"if(long double __num);"
Line 5022
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5022 always 5022
  "constexpr std :: complex < float > operator\"\"if ( long double __num ) ;" always "constexpr std :: complex < float > operator\"\"if ( long double __num ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5022 always 5022
  code always "constexpr std::complex<float> operator\"\"if(long double __num);"
Line 5026
  66 always 66
  = always "constexpr std::complex<float> operator\"\"if(long double __num) { }"
  "constexpr std::complex<float> operator\"\"if(long double __num) { }" always "constexpr std::complex<float> operator\"\"if(long double __num) { }"
Line 5027
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5027 always 5027
  "constexpr std :: complex < float > operator\"\"if ( long double __num ) { }" always "constexpr std :: complex < float > operator\"\"if ( long double __num ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5027 always 5027
  code always "constexpr std::complex<float> operator\"\"if(long double __num) { }"
Line 5033
  159 always 159
  = always "template <typename> struct a;template <typename> struct b {  typedef char c;  operator c();};template <> struct a<char> : b<char> { using b::operator char; };"
  "template <typename> struct a;template <typename> struct b {  typedef char c;  operator c();};template <> struct a<char> : b<char> { using b::operator char; };" always "template <typename> struct a;template <typename> struct b {  typedef char c;  operator c();};template <> struct a<char> : b<char> { using b::operator char; };"
Line 5039
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5039 always 5039
  "struct a<char> ; template < typename > struct a ; struct b<char> ; struct a<char> : b<char> { using b :: operatorchar ; } ; struct b<char> { operatorchar ( ) ; } ;" always "struct a<char> ; template < typename > struct a ; struct b<char> ; struct a<char> : b<char> { using b :: operatorchar ; } ; struct b<char> { operatorchar ( ) ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5039 always 5039
  code always "template <typename> struct a;template <typename> struct b {  typedef char c;  operator c();};template <> struct a<char> : b<char> { using b::operator char; };"
Line 5049
  57 always 57
  = always "class I : public A { iterator& operator++() override; };"
  "class I : public A { iterator& operator++() override; };" always "class I : public A { iterator& operator++() override; };"
Line 5050
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5050 always 5050
  "class I : public A { iterator & operator++ ( ) override ; } ;" always "class I : public A { iterator & operator++ ( ) override ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5050 always 5050
  code always "class I : public A { iterator& operator++() override; };"
Line 5054
  60 always 60
  = always "class I : public A { iterator& operator++() override { } };"
  "class I : public A { iterator& operator++() override { } };" always "class I : public A { iterator& operator++() override { } };"
Line 5055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5055 always 5055
  "class I : public A { iterator & operator++ ( ) override { } } ;" always "class I : public A { iterator & operator++ ( ) override { } } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5055 always 5055
  code always "class I : public A { iterator& operator++() override { } };"
Line 5062
  60 always 60
  = always "template <class a> void b(a c, a d) { c.operator>() == d; }"
  "template <class a> void b(a c, a d) { c.operator>() == d; }" always "template <class a> void b(a c, a d) { c.operator>() == d; }"
Line 5063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5063 always 5063
  "template < class a > void b ( a c , a d ) { c . operator> ( ) == d ; }" always "template < class a > void b ( a c , a d ) { c . operator> ( ) == d ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5063 always 5063
  code always "template <class a> void b(a c, a d) { c.operator>() == d; }"
Line 5067
  66 always 66
  = always "template <class a> void b(a c, a d) { c.operator>() == (d + 1); }"
  "template <class a> void b(a c, a d) { c.operator>() == (d + 1); }" always "template <class a> void b(a c, a d) { c.operator>() == (d + 1); }"
Line 5068
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5068 always 5068
  "template < class a > void b ( a c , a d ) { c . operator> ( ) == ( d + 1 ) ; }" always "template < class a > void b ( a c , a d ) { c . operator> ( ) == ( d + 1 ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5068 always 5068
  code always "template <class a> void b(a c, a d) { c.operator>() == (d + 1); }"
Line 5072
  60 always 60
  = always "template <class a> void b(a c, a d) { c.operator<() == d; }"
  "template <class a> void b(a c, a d) { c.operator<() == d; }" always "template <class a> void b(a c, a d) { c.operator<() == d; }"
Line 5073
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5073 always 5073
  "template < class a > void b ( a c , a d ) { c . operator< ( ) == d ; }" always "template < class a > void b ( a c , a d ) { c . operator< ( ) == d ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5073 always 5073
  code always "template <class a> void b(a c, a d) { c.operator<() == d; }"
Line 5077
  66 always 66
  = always "template <class a> void b(a c, a d) { c.operator>() == (d + 1); }"
  "template <class a> void b(a c, a d) { c.operator>() == (d + 1); }" always "template <class a> void b(a c, a d) { c.operator>() == (d + 1); }"
Line 5078
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5078 always 5078
  "template < class a > void b ( a c , a d ) { c . operator> ( ) == ( d + 1 ) ; }" always "template < class a > void b ( a c , a d ) { c . operator> ( ) == ( d + 1 ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5078 always 5078
  code always "template <class a> void b(a c, a d) { c.operator>() == (d + 1); }"
Line 5082
  61 always 61
  = always "template <class a> void b(a c, a d) { c.operator++() == d; }"
  "template <class a> void b(a c, a d) { c.operator++() == d; }" always "template <class a> void b(a c, a d) { c.operator++() == d; }"
Line 5083
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5083 always 5083
  "template < class a > void b ( a c , a d ) { c . operator++ ( ) == d ; }" always "template < class a > void b ( a c , a d ) { c . operator++ ( ) == d ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5083 always 5083
  code always "template <class a> void b(a c, a d) { c.operator++() == d; }"
Line 5087
  67 always 67
  = always "template <class a> void b(a c, a d) { c.operator++() == (d + 1); }"
  "template <class a> void b(a c, a d) { c.operator++() == (d + 1); }" always "template <class a> void b(a c, a d) { c.operator++() == (d + 1); }"
Line 5088
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5088 always 5088
  "template < class a > void b ( a c , a d ) { c . operator++ ( ) == ( d + 1 ) ; }" always "template < class a > void b ( a c , a d ) { c . operator++ ( ) == ( d + 1 ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5088 always 5088
  code always "template <class a> void b(a c, a d) { c.operator++() == (d + 1); }"
Line 5095
  78 always 78
  = always "struct Fred { operator std::string() const { return std::string(\"Fred\"); } };"
  "struct Fred { operator std::string() const { return std::string(\"Fred\"); } };" always "struct Fred { operator std::string() const { return std::string(\"Fred\"); } };"
Line 5096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5096 always 5096
  "struct Fred { operatorstd::string ( ) const { return std :: string ( \"Fred\" ) ; } } ;" always "struct Fred { operatorstd::string ( ) const { return std :: string ( \"Fred\" ) ; } } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5096 always 5096
  code always "struct Fred { operator std::string() const { return std::string(\"Fred\"); } };"
Line 5100
  82 always 82
  = always "struct Fred { operator ::std::string() const { return ::std::string(\"Fred\"); } };"
  "struct Fred { operator ::std::string() const { return ::std::string(\"Fred\"); } };" always "struct Fred { operator ::std::string() const { return ::std::string(\"Fred\"); } };"
Line 5101
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5101 always 5101
  "struct Fred { operator::std::string ( ) const { return :: std :: string ( \"Fred\" ) ; } } ;" always "struct Fred { operator::std::string ( ) const { return :: std :: string ( \"Fred\" ) ; } } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5101 always 5101
  code always "struct Fred { operator ::std::string() const { return ::std::string(\"Fred\"); } };"
Line 5107
  178 always 178
  = always "struct v {};enum E { e };struct s {  operator struct v() { return v(); };  operator enum E() { return e; }};void f() {  (void)&s::operator struct v;  (void)&s::operator enum E;}"
  "struct v {};enum E { e };struct s {  operator struct v() { return v(); };  operator enum E() { return e; }};void f() {  (void)&s::operator struct v;  (void)&s::operator enum E;}" always "struct v {};enum E { e };struct s {  operator struct v() { return v(); };  operator enum E() { return e; }};void f() {  (void)&s::operator struct v;  (void)&s::operator enum E;}"
Line 5117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5117 always 5117
  "struct v { } ; enum E { e } ; struct s { operatorstructv ( ) { return v ( ) ; } ; operatorenumE ( ) { return e ; } } ; void f ( ) { ( void ) & s :: operatorstructv ; ( void ) & s :: operatorenumE ; }" always "struct v { } ; enum E { e } ; struct s { operatorstructv ( ) { return v ( ) ; } ; operatorenumE ( ) { return e ; } } ; void f ( ) { ( void ) & s :: operatorstructv ; ( void ) & s :: operatorenumE ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5117 always 5117
  code always "struct v {};enum E { e };struct s {  operator struct v() { return v(); };  operator enum E() { return e; }};void f() {  (void)&s::operator struct v;  (void)&s::operator enum E;}"
Line 5131
  110 always 110
  = always "void operator \"\" _a(const char *);namespace N {  using ::operator \"\" _a;  void operator \"\" _b(const char *);}"
  "void operator \"\" _a(const char *);namespace N {  using ::operator \"\" _a;  void operator \"\" _b(const char *);}" always "void operator \"\" _a(const char *);namespace N {  using ::operator \"\" _a;  void operator \"\" _b(const char *);}"
Line 5136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5136 always 5136
  "void operator\"\"_a ( const char * ) ; namespace N { using :: operator\"\"_a ; void operator\"\"_b ( const char * ) ; }" always "void operator\"\"_a ( const char * ) ; namespace N { using :: operator\"\"_a ; void operator\"\"_b ( const char * ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5136 always 5136
  code always "void operator \"\" _a(const char *);namespace N {  using ::operator \"\" _a;  void operator \"\" _b(const char *);}"
Line 5145
  144 always 144
  = always "template<char...> void operator \"\" _h() {}template<> void operator \"\" _h<'a', 'b', 'c'>() {}template void operator \"\" _h<'a', 'b', 'c', 'd'>();"
  "template<char...> void operator \"\" _h() {}template<> void operator \"\" _h<'a', 'b', 'c'>() {}template void operator \"\" _h<'a', 'b', 'c', 'd'>();" always "template<char...> void operator \"\" _h() {}template<> void operator \"\" _h<'a', 'b', 'c'>() {}template void operator \"\" _h<'a', 'b', 'c', 'd'>();"
Line 5148
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5148 always 5148
  "void operator\"\"_h<'a','b','c'> ( ) ; void operator\"\"_h<'a','b','c','d'> ( ) ; void operator\"\"_h<'a','b','c'> ( ) { } void operator\"\"_h<'a','b','c','d'> ( ) { }" always "void operator\"\"_h<'a','b','c'> ( ) ; void operator\"\"_h<'a','b','c','d'> ( ) ; void operator\"\"_h<'a','b','c'> ( ) { } void operator\"\"_h<'a','b','c','d'> ( ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5148 always 5148
  code always "template<char...> void operator \"\" _h() {}template<> void operator \"\" _h<'a', 'b', 'c'>() {}template void operator \"\" _h<'a', 'b', 'c', 'd'>();"
Line 5156
  145 always 145
  = always "static RSLRelOp convertOperator(const Software::ComparisonOperator& op) {  if (op == &Software::operator==) return RSLEqual;return RSLNotEqual;}"
  "static RSLRelOp convertOperator(const Software::ComparisonOperator& op) {  if (op == &Software::operator==) return RSLEqual;return RSLNotEqual;}" always "static RSLRelOp convertOperator(const Software::ComparisonOperator& op) {  if (op == &Software::operator==) return RSLEqual;return RSLNotEqual;}"
Line 5160
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5160 always 5160
  "static RSLRelOp convertOperator ( const Software :: ComparisonOperator & op ) { if ( op == & Software :: operator== ) { return RSLEqual ; } return RSLNotEqual ; }" always "static RSLRelOp convertOperator ( const Software :: ComparisonOperator & op ) { if ( op == & Software :: operator== ) { return RSLEqual ; } return RSLNotEqual ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5160 always 5160
  code always "static RSLRelOp convertOperator(const Software::ComparisonOperator& op) {  if (op == &Software::operator==) return RSLEqual;return RSLNotEqual;}"
Line 5169
  145 always 145
  = always "double *vtkMatrix3x3::operator[](const unsigned int i) {  VTK_LEGACY_BODY(vtkMatrix3x3::operator[], \"VTK 7.0\");  return &(this->Element[i][0]);}"
  "double *vtkMatrix3x3::operator[](const unsigned int i) {  VTK_LEGACY_BODY(vtkMatrix3x3::operator[], \"VTK 7.0\");  return &(this->Element[i][0]);}" always "double *vtkMatrix3x3::operator[](const unsigned int i) {  VTK_LEGACY_BODY(vtkMatrix3x3::operator[], \"VTK 7.0\");  return &(this->Element[i][0]);}"
Line 5173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5173 always 5173
  "double * vtkMatrix3x3 :: operator[] ( const unsigned int i ) { VTK_LEGACY_BODY ( vtkMatrix3x3 :: operator[] , \"VTK 7.0\" ) ; return & ( this . Element [ i ] [ 0 ] ) ; }" always "double * vtkMatrix3x3 :: operator[] ( const unsigned int i ) { VTK_LEGACY_BODY ( vtkMatrix3x3 :: operator[] , \"VTK 7.0\" ) ; return & ( this . Element [ i ] [ 0 ] ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5173 always 5173
  code always "double *vtkMatrix3x3::operator[](const unsigned int i) {  VTK_LEGACY_BODY(vtkMatrix3x3::operator[], \"VTK 7.0\");  return &(this->Element[i][0]);}"
Line 5180
  143 always 143
  = always "double *vtkMatrix3x3::operator,(const unsigned int i) {  VTK_LEGACY_BODY(vtkMatrix3x3::operator,, \"VTK 7.0\");  return &(this->Element[i][0]);}"
  "double *vtkMatrix3x3::operator,(const unsigned int i) {  VTK_LEGACY_BODY(vtkMatrix3x3::operator,, \"VTK 7.0\");  return &(this->Element[i][0]);}" always "double *vtkMatrix3x3::operator,(const unsigned int i) {  VTK_LEGACY_BODY(vtkMatrix3x3::operator,, \"VTK 7.0\");  return &(this->Element[i][0]);}"
Line 5184
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5184 always 5184
  "double * vtkMatrix3x3 :: operator, ( const unsigned int i ) { VTK_LEGACY_BODY ( vtkMatrix3x3 :: operator, , \"VTK 7.0\" ) ; return & ( this . Element [ i ] [ 0 ] ) ; }" always "double * vtkMatrix3x3 :: operator, ( const unsigned int i ) { VTK_LEGACY_BODY ( vtkMatrix3x3 :: operator, , \"VTK 7.0\" ) ; return & ( this . Element [ i ] [ 0 ] ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5184 always 5184
  code always "double *vtkMatrix3x3::operator,(const unsigned int i) {  VTK_LEGACY_BODY(vtkMatrix3x3::operator,, \"VTK 7.0\");  return &(this->Element[i][0]);}"
Line 5194
  60 always 60
  = always "void foo() { int i = a.operator++() ? a.operator--() : 0; }"
  "void foo() { int i = a.operator++() ? a.operator--() : 0; }" always "void foo() { int i = a.operator++() ? a.operator--() : 0; }"
Line 5195
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5195 always 5195
  "void foo ( ) { int i ; i = a . operator++ ( ) ? a . operator-- ( ) : 0 ; }" always "void foo ( ) { int i ; i = a . operator++ ( ) ? a . operator-- ( ) : 0 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5195 always 5195
  code always "void foo() { int i = a.operator++() ? a.operator--() : 0; }"
Line 5199
  62 always 62
  = always "void foo() { int i = a.operator++(0) ? a.operator--(0) : 0; }"
  "void foo() { int i = a.operator++(0) ? a.operator--(0) : 0; }" always "void foo() { int i = a.operator++(0) ? a.operator--(0) : 0; }"
Line 5200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5200 always 5200
  "void foo ( ) { int i ; i = a . operator++ ( 0 ) ? a . operator-- ( 0 ) : 0 ; }" always "void foo ( ) { int i ; i = a . operator++ ( 0 ) ? a . operator-- ( 0 ) : 0 ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5200 always 5200
  code always "void foo() { int i = a.operator++(0) ? a.operator--(0) : 0; }"
Line 5206
  82 always 82
  = always "bool negative(const Number &num) { return num.operator std::string()[0] == '-'; }"
  "bool negative(const Number &num) { return num.operator std::string()[0] == '-'; }" always "bool negative(const Number &num) { return num.operator std::string()[0] == '-'; }"
Line 5207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5207 always 5207
  "bool negative ( const Number & num ) { return num . operatorstd::string ( ) [ 0 ] == '-' ; }" always "bool negative ( const Number & num ) { return num . operatorstd::string ( ) [ 0 ] == '-' ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5207 always 5207
  code always "bool negative(const Number &num) { return num.operator std::string()[0] == '-'; }"
Line 5212
  44 always 44
  = always "void foo() {    x = y.operator *().z[123];}"
  "void foo() {    x = y.operator *().z[123];}" always "void foo() {    x = y.operator *().z[123];}"
Line 5215
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5215 always 5215
  "void foo ( ) { x = y . operator* ( ) . z [ 123 ] ; }" always "void foo ( ) { x = y . operator* ( ) . z [ 123 ] ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5215 always 5215
  code always "void foo() {    x = y.operator *().z[123];}"
Line 5220
  51 always 51
  = always "int operator \"\" i (const char *, int);\nx = \"abc\"i;"
  "int operator \"\" i (const char *, int);\nx = \"abc\"i;" always "int operator \"\" i (const char *, int);\nx = \"abc\"i;"
Line 5222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5222 always 5222
  "int operator\"\"i ( const char * , int ) ;\nx = operator\"\"i ( \"abc\" , 3 ) ;" always "int operator\"\"i ( const char * , int ) ;\nx = operator\"\"i ( \"abc\" , 3 ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5222 always 5222
  code always "int operator \"\" i (const char *, int);\nx = \"abc\"i;"
Line 5228
  93 always 93
  = always "template<class... Ts> struct overloaded : Ts... { using Ts::operator()...; };\nint main() { }"
  "template<class... Ts> struct overloaded : Ts... { using Ts::operator()...; };\nint main() { }" always "template<class... Ts> struct overloaded : Ts... { using Ts::operator()...; };\nint main() { }"
Line 5230
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5230 always 5230
  "template < class ... Ts > struct overloaded : Ts ... { using Ts :: operator ( ) ... ; } ;\nint main ( ) { }" always "template < class ... Ts > struct overloaded : Ts ... { using Ts :: operator ( ) ... ; } ;\nint main ( ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5230 always 5230
  code always "template<class... Ts> struct overloaded : Ts... { using Ts::operator()...; };\nint main() { }"
Line 5238
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5238 always 5238
  "auto operator<=> ( ) ;" always "auto operator<=> ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5238 always 5238
  "auto operator<=>();" always "auto operator<=>();"
Line 5242
  67 always 67
  = always "struct S { void operator()(int); };\n\nvoid foo(S x) {\n    x(123);\n}"
  "struct S { void operator()(int); };\n\nvoid foo(S x) {\n    x(123);\n}" always "struct S { void operator()(int); };\n\nvoid foo(S x) {\n    x(123);\n}"
Line 5247
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5247 always 5247
  "struct S { void operator() ( int ) ; } ;\n\nvoid foo ( S x ) {\nx . operator() ( 123 ) ;\n}" always "struct S { void operator() ( int ) ; } ;\n\nvoid foo ( S x ) {\nx . operator() ( 123 ) ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5247 always 5247
  code always "struct S { void operator()(int); };\n\nvoid foo(S x) {\n    x(123);\n}"
Line 5256
  70 always 70
  = always "struct S {\n  void operator()(int);\n  void foo() { (*this)(123); }\n};\n"
  "struct S {\n  void operator()(int);\n  void foo() { (*this)(123); }\n};\n" always "struct S {\n  void operator()(int);\n  void foo() { (*this)(123); }\n};\n"
Line 5260
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5260 always 5260
  "struct S {\nvoid operator() ( int ) ;\nvoid foo ( ) { ( * this ) . operator() ( 123 ) ; }\n} ;" always "struct S {\nvoid operator() ( int ) ;\nvoid foo ( ) { ( * this ) . operator() ( 123 ) ; }\n} ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5260 always 5260
  code always "struct S {\n  void operator()(int);\n  void foo() { (*this)(123); }\n};\n"
Line 5268
  146 always 146
  = always "struct Func { double operator()(double x) const; };\nvoid foo(double, double);\nvoid test() {\n    Func max;\n    double y = 0;\n    foo(0, max(y));\n}"
  "struct Func { double operator()(double x) const; };\nvoid foo(double, double);\nvoid test() {\n    Func max;\n    double y = 0;\n    foo(0, max(y));\n}" always "struct Func { double operator()(double x) const; };\nvoid foo(double, double);\nvoid test() {\n    Func max;\n    double y = 0;\n    foo(0, max(y));\n}"
Line 5275
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5275 always 5275
  "struct Func { double operator() ( double x ) const ; } ;\nvoid foo ( double , double ) ;\nvoid test ( ) {\nFunc max ;\ndouble y ; y = 0 ;\nfoo ( 0 , max . operator() ( y ) ) ;\n}" always "struct Func { double operator() ( double x ) const ; } ;\nvoid foo ( double , double ) ;\nvoid test ( ) {\nFunc max ;\ndouble y ; y = 0 ;\nfoo ( 0 , max . operator() ( y ) ) ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5275 always 5275
  code always "struct Func { double operator()(double x) const; };\nvoid foo(double, double);\nvoid test() {\n    Func max;\n    double y = 0;\n    foo(0, max(y));\n}"
Line 5286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5286 always 5286
  "* ( foo . bar [ 5 ] ) = x ;" always "* ( foo . bar [ 5 ] ) = x ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5286 always 5286
  "0[foo.bar[5]] = x;" always "0[foo.bar[5]] = x;"
Line 5291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5291 always 5291
  "void f ( ) { }" always "void f ( ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5291 always 5291
  "void f() NOTHROW { }" always "void f() NOTHROW { }"
Line 5292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5292 always 5292
  "struct Foo { } ;" always "struct Foo { } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5292 always 5292
  "struct __declspec(dllexport) Foo {};" always "struct __declspec(dllexport) Foo {};"
Line 5293
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5293 always 5293
  "namespace { int a ; }" always "namespace { int a ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5293 always 5293
  "ABA() namespace { int a ; }" always "ABA() namespace { int a ; }"
Line 5296
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5296 always 5296
  "; AB(foo*) foo::foo() { }" always "; AB(foo*) foo::foo() { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5296 always 5296
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5296 always 5296
  false always 0
Line 5299
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5299 always 5299
  "A(B) foo() {}" always "A(B) foo() {}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5299 always 5299
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5299 always 5299
  false always 0
Line 5302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5302 always 5302
  "; class foo { }" always "; class foo { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5302 always 5302
  "; AB class foo { }" always "; AB class foo { }"
Line 5304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5304 always 5304
  "; CONST struct ABC abc ;" always "; CONST struct ABC abc ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5304 always 5304
  "; CONST struct ABC abc ;" always "; CONST struct ABC abc ;"
Line 5307
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5307 always 5307
  "class A {\n  UNKNOWN_MACRO(A)\nprivate:\n  int x;\n};" always "class A {\n  UNKNOWN_MACRO(A)\nprivate:\n  int x;\n};"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5307 always 5307
  false always 0
Line 5313
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5313 always 5313
  "MACRO(test) void test() { }" always "MACRO(test) void test() { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5313 always 5313
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5313 always 5313
  false always 0
Line 5315
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5315 always 5315
  "BEGIN_MESSAGE_MAP(CSetProgsAdvDlg, CResizableStandAloneDialog)\n    ON_BN_CLICKED(IDC_ADDTOOL, OnBnClickedAddtool)\nEND_MESSAGE_MAP()\n\nBOOL CSetProgsAdvDlg::OnInitDialog() {}" always "BEGIN_MESSAGE_MAP(CSetProgsAdvDlg, CResizableStandAloneDialog)\n    ON_BN_CLICKED(IDC_ADDTOOL, OnBnClickedAddtool)\nEND_MESSAGE_MAP()\n\nBOOL CSetProgsAdvDlg::OnInitDialog() {}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5315 always 5315
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5315 always 5315
  false always 0
Line 5325
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5325 always 5325
  "void f ( ) { PROGMEM int x ; }" always "void f ( ) { PROGMEM int x ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5325 always 5325
  "void f() { PROGMEM int x ; }" always "void f() { PROGMEM int x ; }"
Line 5326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5326 always 5326
  "void f ( ) { int x ; }" always "void f ( ) { int x ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5326 always 5326
  "void f() { SECTION(\".data.ro\") int x ; }" always "void f() { SECTION(\".data.ro\") int x ; }"
Line 5329
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5329 always 5329
  "void f ( ) { CONST int x ; }" always "void f ( ) { CONST int x ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5329 always 5329
  "void f() { SECTION(\".data.ro\") CONST int x ; }" always "void f() { SECTION(\".data.ro\") CONST int x ; }"
Line 5330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5330 always 5330
  "void f ( ) { char a [ 4 ] ; }" always "void f ( ) { char a [ 4 ] ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5330 always 5330
  "void f() { SECTION(\".data.ro\") char a[4]; }" always "void f() { SECTION(\".data.ro\") char a[4]; }"
Line 5331
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5331 always 5331
  "void f ( ) { const char a [ 4 ] ; }" always "void f ( ) { const char a [ 4 ] ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5331 always 5331
  "void f() { SECTION(\".data.ro\") const char a[4]; }" always "void f() { SECTION(\".data.ro\") const char a[4]; }"
Line 5332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5332 always 5332
  "void f ( ) { struct ABC abc ; }" always "void f ( ) { struct ABC abc ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5332 always 5332
  "void f() { SECTION(\".data.ro\") struct ABC abc; }" always "void f() { SECTION(\".data.ro\") struct ABC abc; }"
Line 5333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5333 always 5333
  "void f ( ) { CONST struct ABC abc ; }" always "void f ( ) { CONST struct ABC abc ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5333 always 5333
  "void f() { SECTION(\".data.ro\") CONST struct ABC abc; }" always "void f() { SECTION(\".data.ro\") CONST struct ABC abc; }"
Line 5338
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5338 always 5338
  "void f ( ) { MACRO ( ) ; try { } }" always "void f ( ) { MACRO ( ) ; try { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5338 always 5338
  "void f() { MACRO() try {} }" always "void f() { MACRO() try {} }"
Line 5340
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5340 always 5340
  "MACRO ( ) ; using namespace foo ;" always "MACRO ( ) ; using namespace foo ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5340 always 5340
  "MACRO() using namespace foo;" always "MACRO() using namespace foo;"
Line 5344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5344 always 5344
  "a = b = 0 ;" always "a = b = 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5344 always 5344
  "a=b=0;" always "a=b=0;"
Line 5348
  997 always 997
  = always "BOOL f;BOOLEAN g;BYTE h;CHAR i;DWORD j;FLOAT k;INT l;INT32 m;INT64 n;LONG o;SHORT p;UCHAR q;UINT r;ULONG s;USHORT t;WORD u;VOID *v;LPBOOL w;PBOOL x;LPBYTE y;PBOOLEAN z;PBYTE A;LPCSTR B;PCSTR C;LPCVOID D;LPDWORD E;LPINT F;PINT G;LPLONG H;PLONG I;LPSTR J;PSTR K;PCHAR L;LPVOID M;PVOID N;BOOL _bool;HFILE hfile;LONG32 long32;LCID lcid;LCTYPE lctype;LGRPID lgrpid;LONG64 long64;PUCHAR puchar;LPCOLORREF lpcolorref;PDWORD pdword;PULONG pulong;SERVICE_STATUS_HANDLE service_status_hanlde;SC_LOCK sc_lock;SC_HANDLE sc_handle;HACCEL haccel;HCONV hconv;HCONVLIST hconvlist;HDDEDATA hddedata;HDESK hdesk;HDROP hdrop;HDWP hdwp;HENHMETAFILE henhmetafile;HHOOK hhook;HKL hkl;HMONITOR hmonitor;HSZ hsz;HWINSTA hwinsta;PWCHAR pwchar;PUSHORT pushort;LANGID langid;DWORD64 dword64;ULONG64 ulong64;LPWSTR lpcwstr;LPCWSTR lpcwstr;LPHANDLE lpHandle;PCWSTR pcwStr;PDWORDLONG pdWordLong;PDWORD_PTR pdWordPtr;PDWORD32 pdWord32;PDWORD64 pdWord64;LONGLONG ll;USN usn;PULONG64 puLong64;PULONG32 puLong32;PFLOAT ptrToFloat;"
  "BOOL f;BOOLEAN g;BYTE h;CHAR i;DWORD j;FLOAT k;INT l;INT32 m;INT64 n;LONG o;SHORT p;UCHAR q;UINT r;ULONG s;USHORT t;WORD u;VOID *v;LPBOOL w;PBOOL x;LPBYTE y;PBOOLEAN z;PBYTE A;LPCSTR B;PCSTR C;LPCVOID D;LPDWORD E;LPINT F;PINT G;LPLONG H;PLONG I;LPSTR J;PSTR K;PCHAR L;LPVOID M;PVOID N;BOOL _bool;HFILE hfile;LONG32 long32;LCID lcid;LCTYPE lctype;LGRPID lgrpid;LONG64 long64;PUCHAR puchar;LPCOLORREF lpcolorref;PDWORD pdword;PULONG pulong;SERVICE_STATUS_HANDLE service_status_hanlde;SC_LOCK sc_lock;SC_HANDLE sc_handle;HACCEL haccel;HCONV hconv;HCONVLIST hconvlist;HDDEDATA hddedata;HDESK hdesk;HDROP hdrop;HDWP hdwp;HENHMETAFILE henhmetafile;HHOOK hhook;HKL hkl;HMONITOR hmonitor;HSZ hsz;HWINSTA hwinsta;PWCHAR pwchar;PUSHORT pushort;LANGID langid;DWORD64 dword64;ULONG64 ulong64;LPWSTR lpcwstr;LPCWSTR lpcwstr;LPHANDLE lpHandle;PCWSTR pcwStr;PDWORDLONG pdWordLong;PDWORD_PTR pdWordPtr;PDWORD32 pdWord32;PDWORD64 pdWord64;LONGLONG ll;USN usn;PULONG64 puLong64;PULONG32 puLong32;PFLOAT ptrToFloat;" always "BOOL f;BOOLEAN g;BYTE h;CHAR i;DWORD j;FLOAT k;INT l;INT32 m;INT64 n;LONG o;SHORT p;UCHAR q;UINT r;ULONG s;USHORT t;WORD u;VOID *v;LPBOOL w;PBOOL x;LPBYTE y;PBOOLEAN z;PBYTE A;LPCSTR B;PCSTR C;LPCVOID D;LPDWORD E;LPINT F;PINT G;LPLONG H;PLONG I;LPSTR J;PSTR K;PCHAR L;LPVOID M;PVOID N;BOOL _bool;HFILE hfile;LONG32 long32;LCID lcid;LCTYPE lctype;LGRPID lgrpid;LONG64 long64;PUCHAR puchar;LPCOLORREF lpcolorref;PDWORD pdword;PULONG pulong;SERVICE_STATUS_HANDLE service_status_hanlde;SC_LOCK sc_lock;SC_HANDLE sc_handle;HACCEL haccel;HCONV hconv;HCONVLIST hconvlist;HDDEDATA hddedata;HDESK hdesk;HDROP hdrop;HDWP hdwp;HENHMETAFILE henhmetafile;HHOOK hhook;HKL hkl;HMONITOR hmonitor;HSZ hsz;HWINSTA hwinsta;PWCHAR pwchar;PUSHORT pushort;LANGID langid;DWORD64 dword64;ULONG64 ulong64;LPWSTR lpcwstr;LPCWSTR lpcwstr;LPHANDLE lpHandle;PCWSTR pcwStr;PDWORDLONG pdWordLong;PDWORD_PTR pdWordPtr;PDWORD32 pdWord32;PDWORD64 pdWord64;LONGLONG ll;USN usn;PULONG64 puLong64;PULONG32 puLong32;PFLOAT ptrToFloat;"
Line 5429
  1403 always 1403
  = always "int f ; unsigned char g ; unsigned char h ; char i ; unsigned long j ; float k ; int l ; int m ; long long n ; long o ; short p ; unsigned char q ; unsigned int r ; unsigned long s ; unsigned short t ; unsigned short u ; void * v ; int * w ; int * x ; unsigned char * y ; unsigned char * z ; unsigned char * A ; const char * B ; const char * C ; const void * D ; unsigned long * E ; int * F ; int * G ; long * H ; long * I ; char * J ; char * K ; char * L ; void * M ; void * N ; int _bool ; int hfile ; int long32 ; unsigned long lcid ; unsigned long lctype ; unsigned long lgrpid ; long long long64 ; unsigned char * puchar ; unsigned long * lpcolorref ; unsigned long * pdword ; unsigned long * pulong ; void * service_status_hanlde ; void * sc_lock ; void * sc_handle ; void * haccel ; void * hconv ; void * hconvlist ; void * hddedata ; void * hdesk ; void * hdrop ; void * hdwp ; void * henhmetafile ; void * hhook ; void * hkl ; void * hmonitor ; void * hsz ; void * hwinsta ; wchar_t * pwchar ; unsigned short * pushort ; unsigned short langid ; unsigned long long dword64 ; unsigned long long ulong64 ; wchar_t * lpcwstr ; const wchar_t * lpcwstr ; void * lpHandle ; const wchar_t * pcwStr ; long * pdWordLong ; long * pdWordPtr ; unsigned int * pdWord32 ; unsigned long * pdWord64 ; long long ll ; long long usn ; unsigned long long * puLong64 ; unsigned int * puLong32 ; float * ptrToFloat ;"
  "int f ; unsigned char g ; unsigned char h ; char i ; unsigned long j ; float k ; int l ; int m ; long long n ; long o ; short p ; unsigned char q ; unsigned int r ; unsigned long s ; unsigned short t ; unsigned short u ; void * v ; int * w ; int * x ; unsigned char * y ; unsigned char * z ; unsigned char * A ; const char * B ; const char * C ; const void * D ; unsigned long * E ; int * F ; int * G ; long * H ; long * I ; char * J ; char * K ; char * L ; void * M ; void * N ; int _bool ; int hfile ; int long32 ; unsigned long lcid ; unsigned long lctype ; unsigned long lgrpid ; long long long64 ; unsigned char * puchar ; unsigned long * lpcolorref ; unsigned long * pdword ; unsigned long * pulong ; void * service_status_hanlde ; void * sc_lock ; void * sc_handle ; void * haccel ; void * hconv ; void * hconvlist ; void * hddedata ; void * hdesk ; void * hdrop ; void * hdwp ; void * henhmetafile ; void * hhook ; void * hkl ; void * hmonitor ; void * hsz ; void * hwinsta ; wchar_t * pwchar ; unsigned short * pushort ; unsigned short langid ; unsigned long long dword64 ; unsigned long long ulong64 ; wchar_t * lpcwstr ; const wchar_t * lpcwstr ; void * lpHandle ; const wchar_t * pcwStr ; long * pdWordLong ; long * pdWordPtr ; unsigned int * pdWord32 ; unsigned long * pdWord64 ; long long ll ; long long usn ; unsigned long long * puLong64 ; unsigned int * puLong32 ; float * ptrToFloat ;" always "int f ; unsigned char g ; unsigned char h ; char i ; unsigned long j ; float k ; int l ; int m ; long long n ; long o ; short p ; unsigned char q ; unsigned int r ; unsigned long s ; unsigned short t ; unsigned short u ; void * v ; int * w ; int * x ; unsigned char * y ; unsigned char * z ; unsigned char * A ; const char * B ; const char * C ; const void * D ; unsigned long * E ; int * F ; int * G ; long * H ; long * I ; char * J ; char * K ; char * L ; void * M ; void * N ; int _bool ; int hfile ; int long32 ; unsigned long lcid ; unsigned long lctype ; unsigned long lgrpid ; long long long64 ; unsigned char * puchar ; unsigned long * lpcolorref ; unsigned long * pdword ; unsigned long * pulong ; void * service_status_hanlde ; void * sc_lock ; void * sc_handle ; void * haccel ; void * hconv ; void * hconvlist ; void * hddedata ; void * hdesk ; void * hdrop ; void * hdwp ; void * henhmetafile ; void * hhook ; void * hkl ; void * hmonitor ; void * hsz ; void * hwinsta ; wchar_t * pwchar ; unsigned short * pushort ; unsigned short langid ; unsigned long long dword64 ; unsigned long long ulong64 ; wchar_t * lpcwstr ; const wchar_t * lpcwstr ; void * lpHandle ; const wchar_t * pcwStr ; long * pdWordLong ; long * pdWordPtr ; unsigned int * pdWord32 ; unsigned long * pdWord64 ; long long ll ; long long usn ; unsigned long long * puLong64 ; unsigned int * puLong32 ; float * ptrToFloat ;"
Line 5511
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5511 always 5511
  code always "BOOL f;BOOLEAN g;BYTE h;CHAR i;DWORD j;FLOAT k;INT l;INT32 m;INT64 n;LONG o;SHORT p;UCHAR q;UINT r;ULONG s;USHORT t;WORD u;VOID *v;LPBOOL w;PBOOL x;LPBYTE y;PBOOLEAN z;PBYTE A;LPCSTR B;PCSTR C;LPCVOID D;LPDWORD E;LPINT F;PINT G;LPLONG H;PLONG I;LPSTR J;PSTR K;PCHAR L;LPVOID M;PVOID N;BOOL _bool;HFILE hfile;LONG32 long32;LCID lcid;LCTYPE lctype;LGRPID lgrpid;LONG64 long64;PUCHAR puchar;LPCOLORREF lpcolorref;PDWORD pdword;PULONG pulong;SERVICE_STATUS_HANDLE service_status_hanlde;SC_LOCK sc_lock;SC_HANDLE sc_handle;HACCEL haccel;HCONV hconv;HCONVLIST hconvlist;HDDEDATA hddedata;HDESK hdesk;HDROP hdrop;HDWP hdwp;HENHMETAFILE henhmetafile;HHOOK hhook;HKL hkl;HMONITOR hmonitor;HSZ hsz;HWINSTA hwinsta;PWCHAR pwchar;PUSHORT pushort;LANGID langid;DWORD64 dword64;ULONG64 ulong64;LPWSTR lpcwstr;LPCWSTR lpcwstr;LPHANDLE lpHandle;PCWSTR pcwStr;PDWORDLONG pdWordLong;PDWORD_PTR pdWordPtr;PDWORD32 pdWord32;PDWORD64 pdWord64;LONGLONG ll;USN usn;PULONG64 puLong64;PULONG32 puLong32;PFLOAT ptrToFloat;"
  true always 1
Line 5512
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5512 always 5512
  expected always "int f ; unsigned char g ; unsigned char h ; char i ; unsigned long j ; float k ; int l ; int m ; long long n ; long o ; short p ; unsigned char q ; unsigned int r ; unsigned long s ; unsigned short t ; unsigned short u ; void * v ; int * w ; int * x ; unsigned char * y ; unsigned char * z ; unsigned char * A ; const char * B ; const char * C ; const void * D ; unsigned long * E ; int * F ; int * G ; long * H ; long * I ; char * J ; char * K ; char * L ; void * M ; void * N ; int _bool ; int hfile ; int long32 ; unsigned long lcid ; unsigned long lctype ; unsigned long lgrpid ; long long long64 ; unsigned char * puchar ; unsigned long * lpcolorref ; unsigned long * pdword ; unsigned long * pulong ; void * service_status_hanlde ; void * sc_lock ; void * sc_handle ; void * haccel ; void * hconv ; void * hconvlist ; void * hddedata ; void * hdesk ; void * hdrop ; void * hdwp ; void * henhmetafile ; void * hhook ; void * hkl ; void * hmonitor ; void * hsz ; void * hwinsta ; wchar_t * pwchar ; unsigned short * pushort ; unsigned short langid ; unsigned long long dword64 ; unsigned long long ulong64 ; wchar_t * lpcwstr ; const wchar_t * lpcwstr ; void * lpHandle ; const wchar_t * pcwStr ; long * pdWordLong ; long * pdWordPtr ; unsigned int * pdWord32 ; unsigned long * pdWord64 ; long long ll ; long long usn ; unsigned long long * puLong64 ; unsigned int * puLong32 ; float * ptrToFloat ;"
Line 5513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5513 always 5513
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5513 always 5513
  code always "BOOL f;BOOLEAN g;BYTE h;CHAR i;DWORD j;FLOAT k;INT l;INT32 m;INT64 n;LONG o;SHORT p;UCHAR q;UINT r;ULONG s;USHORT t;WORD u;VOID *v;LPBOOL w;PBOOL x;LPBYTE y;PBOOLEAN z;PBYTE A;LPCSTR B;PCSTR C;LPCVOID D;LPDWORD E;LPINT F;PINT G;LPLONG H;PLONG I;LPSTR J;PSTR K;PCHAR L;LPVOID M;PVOID N;BOOL _bool;HFILE hfile;LONG32 long32;LCID lcid;LCTYPE lctype;LGRPID lgrpid;LONG64 long64;PUCHAR puchar;LPCOLORREF lpcolorref;PDWORD pdword;PULONG pulong;SERVICE_STATUS_HANDLE service_status_hanlde;SC_LOCK sc_lock;SC_HANDLE sc_handle;HACCEL haccel;HCONV hconv;HCONVLIST hconvlist;HDDEDATA hddedata;HDESK hdesk;HDROP hdrop;HDWP hdwp;HENHMETAFILE henhmetafile;HHOOK hhook;HKL hkl;HMONITOR hmonitor;HSZ hsz;HWINSTA hwinsta;PWCHAR pwchar;PUSHORT pushort;LANGID langid;DWORD64 dword64;ULONG64 ulong64;LPWSTR lpcwstr;LPCWSTR lpcwstr;LPHANDLE lpHandle;PCWSTR pcwStr;PDWORDLONG pdWordLong;PDWORD_PTR pdWordPtr;PDWORD32 pdWord32;PDWORD64 pdWord64;LONGLONG ll;USN usn;PULONG64 puLong64;PULONG32 puLong32;PFLOAT ptrToFloat;"
  true always 1
Line 5514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5514 always 5514
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5514 always 5514
  code always "BOOL f;BOOLEAN g;BYTE h;CHAR i;DWORD j;FLOAT k;INT l;INT32 m;INT64 n;LONG o;SHORT p;UCHAR q;UINT r;ULONG s;USHORT t;WORD u;VOID *v;LPBOOL w;PBOOL x;LPBYTE y;PBOOLEAN z;PBYTE A;LPCSTR B;PCSTR C;LPCVOID D;LPDWORD E;LPINT F;PINT G;LPLONG H;PLONG I;LPSTR J;PSTR K;PCHAR L;LPVOID M;PVOID N;BOOL _bool;HFILE hfile;LONG32 long32;LCID lcid;LCTYPE lctype;LGRPID lgrpid;LONG64 long64;PUCHAR puchar;LPCOLORREF lpcolorref;PDWORD pdword;PULONG pulong;SERVICE_STATUS_HANDLE service_status_hanlde;SC_LOCK sc_lock;SC_HANDLE sc_handle;HACCEL haccel;HCONV hconv;HCONVLIST hconvlist;HDDEDATA hddedata;HDESK hdesk;HDROP hdrop;HDWP hdwp;HENHMETAFILE henhmetafile;HHOOK hhook;HKL hkl;HMONITOR hmonitor;HSZ hsz;HWINSTA hwinsta;PWCHAR pwchar;PUSHORT pushort;LANGID langid;DWORD64 dword64;ULONG64 ulong64;LPWSTR lpcwstr;LPCWSTR lpcwstr;LPHANDLE lpHandle;PCWSTR pcwStr;PDWORDLONG pdWordLong;PDWORD_PTR pdWordPtr;PDWORD32 pdWord32;PDWORD64 pdWord64;LONGLONG ll;USN usn;PULONG64 puLong64;PULONG32 puLong32;PFLOAT ptrToFloat;"
  true always 1
Line 5518
  461 always 461
  = always "wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;void foo() {    TCHAR tc = _T(\'c\');     TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}TBYTE tbyte;"
  "wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;void foo() {    TCHAR tc = _T(\'c\');     TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}TBYTE tbyte;" always "wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;void foo() {    TCHAR tc = _T(\'c\');     TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}TBYTE tbyte;"
Line 5539
  484 always 484
  = always "wchar_t wc ; char c ; char * ptstr ; char * lptstr ; const char * pctstr ; const char * lpctstr ; void foo ( ) { char tc ; tc = \'c\' ; char src [ 10 ] = \"123456789\" ; char dst [ 10 ] ; strcpy ( dst , src ) ; dst [ 0 ] = 0 ; strcat ( dst , src ) ; char * d ; d = strdup ( str ) ; printf ( \"Hello world!\" ) ; sprintf ( dst , \"Hello!\" ) ; _snprintf ( dst , sizeof ( dst ) / sizeof ( char ) , \"Hello world!\" ) ; scanf ( \"%s\" , dst ) ; sscanf ( dst , \"%s\" , dst ) ; } unsigned char tbyte ;"
  "wchar_t wc ; char c ; char * ptstr ; char * lptstr ; const char * pctstr ; const char * lpctstr ; void foo ( ) { char tc ; tc = \'c\' ; char src [ 10 ] = \"123456789\" ; char dst [ 10 ] ; strcpy ( dst , src ) ; dst [ 0 ] = 0 ; strcat ( dst , src ) ; char * d ; d = strdup ( str ) ; printf ( \"Hello world!\" ) ; sprintf ( dst , \"Hello!\" ) ; _snprintf ( dst , sizeof ( dst ) / sizeof ( char ) , \"Hello world!\" ) ; scanf ( \"%s\" , dst ) ; sscanf ( dst , \"%s\" , dst ) ; } unsigned char tbyte ;" always "wchar_t wc ; char c ; char * ptstr ; char * lptstr ; const char * pctstr ; const char * lpctstr ; void foo ( ) { char tc ; tc = \'c\' ; char src [ 10 ] = \"123456789\" ; char dst [ 10 ] ; strcpy ( dst , src ) ; dst [ 0 ] = 0 ; strcat ( dst , src ) ; char * d ; d = strdup ( str ) ; printf ( \"Hello world!\" ) ; sprintf ( dst , \"Hello!\" ) ; _snprintf ( dst , sizeof ( dst ) / sizeof ( char ) , \"Hello world!\" ) ; scanf ( \"%s\" , dst ) ; sscanf ( dst , \"%s\" , dst ) ; } unsigned char tbyte ;"
Line 5560
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5560 always 5560
  expected always "wchar_t wc ; char c ; char * ptstr ; char * lptstr ; const char * pctstr ; const char * lpctstr ; void foo ( ) { char tc ; tc = \'c\' ; char src [ 10 ] = \"123456789\" ; char dst [ 10 ] ; strcpy ( dst , src ) ; dst [ 0 ] = 0 ; strcat ( dst , src ) ; char * d ; d = strdup ( str ) ; printf ( \"Hello world!\" ) ; sprintf ( dst , \"Hello!\" ) ; _snprintf ( dst , sizeof ( dst ) / sizeof ( char ) , \"Hello world!\" ) ; scanf ( \"%s\" , dst ) ; sscanf ( dst , \"%s\" , dst ) ; } unsigned char tbyte ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5560 always 5560
  code always "wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;void foo() {    TCHAR tc = _T(\'c\');     TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}TBYTE tbyte;"
  true always 1
Line 5564
  460 always 460
  = always "wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;TBYTE tbyte;void foo() {    TCHAR tc = _T(\'c\');    TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}"
  "wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;TBYTE tbyte;void foo() {    TCHAR tc = _T(\'c\');    TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}" always "wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;TBYTE tbyte;void foo() {    TCHAR tc = _T(\'c\');    TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}"
Line 5585
  529 always 529
  = always "wchar_t wc ; wchar_t c ; wchar_t * ptstr ; wchar_t * lptstr ; const wchar_t * pctstr ; const wchar_t * lpctstr ; unsigned wchar_t tbyte ; void foo ( ) { wchar_t tc ; tc = L\'c\' ; wchar_t src [ 10 ] = L\"123456789\" ; wchar_t dst [ 10 ] ; wcscpy ( dst , src ) ; dst [ 0 ] = 0 ; wcscat ( dst , src ) ; wchar_t * d ; d = wcsdup ( str ) ; wprintf ( L\"Hello world!\" ) ; swprintf ( dst , L\"Hello!\" ) ; _snwprintf ( dst , sizeof ( dst ) / sizeof ( wchar_t ) , L\"Hello world!\" ) ; wscanf ( L\"%s\" , dst ) ; swscanf ( dst , L\"%s\" , dst ) ; }"
  "wchar_t wc ; wchar_t c ; wchar_t * ptstr ; wchar_t * lptstr ; const wchar_t * pctstr ; const wchar_t * lpctstr ; unsigned wchar_t tbyte ; void foo ( ) { wchar_t tc ; tc = L\'c\' ; wchar_t src [ 10 ] = L\"123456789\" ; wchar_t dst [ 10 ] ; wcscpy ( dst , src ) ; dst [ 0 ] = 0 ; wcscat ( dst , src ) ; wchar_t * d ; d = wcsdup ( str ) ; wprintf ( L\"Hello world!\" ) ; swprintf ( dst , L\"Hello!\" ) ; _snwprintf ( dst , sizeof ( dst ) / sizeof ( wchar_t ) , L\"Hello world!\" ) ; wscanf ( L\"%s\" , dst ) ; swscanf ( dst , L\"%s\" , dst ) ; }" always "wchar_t wc ; wchar_t c ; wchar_t * ptstr ; wchar_t * lptstr ; const wchar_t * pctstr ; const wchar_t * lpctstr ; unsigned wchar_t tbyte ; void foo ( ) { wchar_t tc ; tc = L\'c\' ; wchar_t src [ 10 ] = L\"123456789\" ; wchar_t dst [ 10 ] ; wcscpy ( dst , src ) ; dst [ 0 ] = 0 ; wcscat ( dst , src ) ; wchar_t * d ; d = wcsdup ( str ) ; wprintf ( L\"Hello world!\" ) ; swprintf ( dst , L\"Hello!\" ) ; _snwprintf ( dst , sizeof ( dst ) / sizeof ( wchar_t ) , L\"Hello world!\" ) ; wscanf ( L\"%s\" , dst ) ; swscanf ( dst , L\"%s\" , dst ) ; }"
Line 5606
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5606 always 5606
  expected always "wchar_t wc ; wchar_t c ; wchar_t * ptstr ; wchar_t * lptstr ; const wchar_t * pctstr ; const wchar_t * lpctstr ; unsigned wchar_t tbyte ; void foo ( ) { wchar_t tc ; tc = L\'c\' ; wchar_t src [ 10 ] = L\"123456789\" ; wchar_t dst [ 10 ] ; wcscpy ( dst , src ) ; dst [ 0 ] = 0 ; wcscat ( dst , src ) ; wchar_t * d ; d = wcsdup ( str ) ; wprintf ( L\"Hello world!\" ) ; swprintf ( dst , L\"Hello!\" ) ; _snwprintf ( dst , sizeof ( dst ) / sizeof ( wchar_t ) , L\"Hello world!\" ) ; wscanf ( L\"%s\" , dst ) ; swscanf ( dst , L\"%s\" , dst ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5606 always 5606
  code always "wchar_t wc;TCHAR c;PTSTR ptstr;LPTSTR lptstr;PCTSTR pctstr;LPCTSTR lpctstr;TBYTE tbyte;void foo() {    TCHAR tc = _T(\'c\');    TCHAR src[10] = _T(\"123456789\");    TCHAR dst[10];    _tcscpy(dst, src);    dst[0] = 0;    _tcscat(dst, src);    LPTSTR d = _tcsdup(str);    _tprintf(_T(\"Hello world!\"));    _stprintf(dst, _T(\"Hello!\"));    _sntprintf(dst, sizeof(dst) / sizeof(TCHAR), _T(\"Hello world!\"));    _tscanf(_T(\"%s\"), dst);    _stscanf(dst, _T(\"%s\"), dst);}"
  true always 1
Line 5610
  46 always 46
  = always "TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");"
  "TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");" always "TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");"
Line 5611
  33 always 33
  = always "char text [ 10 ] = \"123456789\" ;"
  "char text [ 10 ] = \"123456789\" ;" always "char text [ 10 ] = \"123456789\" ;"
Line 5612
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5612 always 5612
  expected always "char text [ 10 ] = \"123456789\" ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5612 always 5612
  code always "TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");"
  true always 1
Line 5616
  46 always 46
  = always "TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");"
  "TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");" always "TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");"
Line 5617
  37 always 37
  = always "wchar_t text [ 10 ] = L\"123456789\" ;"
  "wchar_t text [ 10 ] = L\"123456789\" ;" always "wchar_t text [ 10 ] = L\"123456789\" ;"
Line 5618
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5618 always 5618
  expected always "wchar_t text [ 10 ] = L\"123456789\" ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5618 always 5618
  code always "TCHAR text[] = _T(\"123\") _T(\"456\") _T(\"789\");"
  true always 1
Line 5622
  37 always 37
  = always "UINT32 a; ::UINT32 b; foo::UINT32 c;"
  "UINT32 a; ::UINT32 b; foo::UINT32 c;" always "UINT32 a; ::UINT32 b; foo::UINT32 c;"
Line 5623
  52 always 52
  = always "unsigned int a ; unsigned int b ; foo :: UINT32 c ;"
  "unsigned int a ; unsigned int b ; foo :: UINT32 c ;" always "unsigned int a ; unsigned int b ; foo :: UINT32 c ;"
Line 5624
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5624 always 5624
  expected1 always "unsigned int a ; unsigned int b ; foo :: UINT32 c ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5624 always 5624
  code1 always "UINT32 a; ::UINT32 b; foo::UINT32 c;"
  true always 1
Line 5626
  40 always 40
  = always "LPCVOID a; ::LPCVOID b; foo::LPCVOID c;"
  "LPCVOID a; ::LPCVOID b; foo::LPCVOID c;" always "LPCVOID a; ::LPCVOID b; foo::LPCVOID c;"
Line 5627
  53 always 53
  = always "const void * a ; const void * b ; foo :: LPCVOID c ;"
  "const void * a ; const void * b ; foo :: LPCVOID c ;" always "const void * a ; const void * b ; foo :: LPCVOID c ;"
Line 5628
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5628 always 5628
  expected2 always "const void * a ; const void * b ; foo :: LPCVOID c ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5628 always 5628
  code2 always "LPCVOID a; ::LPCVOID b; foo::LPCVOID c;"
  true always 1
Line 5632
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5632 always 5632
  true always 1
  "0.0" always "0.0"
Line 5633
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5633 always 5633
  true always 1
  "+0.0" always "+0.0"
Line 5634
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5634 always 5634
  true always 1
  "-0.0" always "-0.0"
Line 5635
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5635 always 5635
  true always 1
  "+0L" always "+0L"
Line 5636
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5636 always 5636
  true always 1
  "+0" always "+0"
Line 5637
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5637 always 5637
  true always 1
  "-0" always "-0"
Line 5638
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5638 always 5638
  true always 1
  "-0E+0" always "-0E+0"
Line 5640
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5640 always 5640
  false always 0
  "1.0" always "1.0"
Line 5641
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5641 always 5641
  false always 0
  "+1.0" always "+1.0"
Line 5642
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5642 always 5642
  false always 0
  "-1" always "-1"
Line 5643
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5643 always 5643
  false always 0
  "" always ""
Line 5644
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5644 always 5644
  false always 0
  "garbage" always "garbage"
Line 5645
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5645 always 5645
  false always 0
  "E2" always "E2"
Line 5646
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5646 always 5646
  false always 0
  "2e" always "2e"
Line 5650
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5650 always 5650
  true always 1
  "1.0" always "1.0"
Line 5651
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5651 always 5651
  true always 1
  "+1.0" always "+1.0"
Line 5652
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5652 always 5652
  true always 1
  "1.0e+0" always "1.0e+0"
Line 5653
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5653 always 5653
  true always 1
  "+1L" always "+1L"
Line 5654
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5654 always 5654
  true always 1
  "+1" always "+1"
Line 5655
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5655 always 5655
  true always 1
  "1" always "1"
Line 5656
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5656 always 5656
  true always 1
  "+1E+0" always "+1E+0"
Line 5658
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5658 always 5658
  false always 0
  "0.0" always "0.0"
Line 5659
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5659 always 5659
  false always 0
  "+0.0" always "+0.0"
Line 5660
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5660 always 5660
  false always 0
  "-0" always "-0"
Line 5661
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5661 always 5661
  false always 0
  "" always ""
Line 5662
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5662 always 5662
  false always 0
  "garbage" always "garbage"
Line 5666
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5666 always 5666
  true always 1
  "2.0" always "2.0"
Line 5667
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5667 always 5667
  true always 1
  "+2.0" always "+2.0"
Line 5668
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5668 always 5668
  true always 1
  "2.0e+0" always "2.0e+0"
Line 5669
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5669 always 5669
  true always 1
  "+2L" always "+2L"
Line 5670
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5670 always 5670
  true always 1
  "+2" always "+2"
Line 5671
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5671 always 5671
  true always 1
  "2" always "2"
Line 5672
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5672 always 5672
  true always 1
  "+2E+0" always "+2E+0"
Line 5674
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5674 always 5674
  false always 0
  "0.0" always "0.0"
Line 5675
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5675 always 5675
  false always 0
  "+0.0" always "+0.0"
Line 5676
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5676 always 5676
  false always 0
  "-0" always "-0"
Line 5677
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5677 always 5677
  false always 0
  "" always ""
Line 5678
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5678 always 5678
  false always 0
  "garbage" always "garbage"
Line 5682
  44 always 44
  = always "class foo { public: bool const static c ; }"
  "class foo { public: bool const static c ; }" always "class foo { public: bool const static c ; }"
Line 5683
  44 always 44
  = always "class foo { public: static const bool c ; }"
  "class foo { public: static const bool c ; }" always "class foo { public: static const bool c ; }"
Line 5684
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5684 always 5684
  expected1 always "class foo { public: static const bool c ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5684 always 5684
  code1 always "class foo { public: bool const static c ; }"
Line 5686
  820 always 820
  = always "int long long f()\n{\nstatic const long long signed int i1;\nstatic const long long int signed i2;\nstatic const signed long long int i3;\nstatic const signed int long long i4;\nstatic const int signed long long i5;\nstatic const int long long signed i6;\nlong long static const signed int i7;\nlong long static const int signed i8;\nsigned static const long long int i9;\nsigned static const int long long i10;\nint static const signed long long i11;\nint static const long long signed i12;\nlong long signed int static const i13;\nlong long int signed static const i14;\nsigned long long int static const i15;\nsigned int long long static const i16;\nint signed long long static const i17;\nint long long signed static const i18;\nreturn i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12\n+ i13 + i14 + i15 + i16 + i17 + i18;\n}"
Line 5687
  "int long long f()\n{\nstatic const long long signed int i1;\nstatic const long long int signed i2;\nstatic const signed long long int i3;\nstatic const signed int long long i4;\nstatic const int signed long long i5;\nstatic const int long long signed i6;\nlong long static const signed int i7;\nlong long static const int signed i8;\nsigned static const long long int i9;\nsigned static const int long long i10;\nint static const signed long long i11;\nint static const long long signed i12;\nlong long signed int static const i13;\nlong long int signed static const i14;\nsigned long long int static const i15;\nsigned int long long static const i16;\nint signed long long static const i17;\nint long long signed static const i18;\nreturn i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12\n+ i13 + i14 + i15 + i16 + i17 + i18;\n}" always "int long long f()\n{\nstatic const long long signed int i1;\nstatic const long long int signed i2;\nstatic const signed long long int i3;\nstatic const signed int long long i4;\nstatic const int signed long long i5;\nstatic const int long long signed i6;\nlong long static const signed int i7;\nlong long static const int signed i8;\nsigned static const long long int i9;\nsigned static const int long long i10;\nint static const signed long long i11;\nint static const long long signed i12;\nlong long signed int static const i13;\nlong long int signed static const i14;\nsigned long long int static const i15;\nsigned int long long static const i16;\nint signed long long static const i17;\nint long long signed static const i18;\nreturn i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12\n+ i13 + i14 + i15 + i16 + i17 + i18;\n}"
Line 5710
  765 always 765
  = always "long long f ( )\n{\nstatic const signed long long i1 ;\nstatic const signed long long i2 ;\nstatic const signed long long i3 ;\nstatic const signed long long i4 ;\nstatic const signed long long i5 ;\nstatic const signed long long i6 ;\nstatic const signed long long i7 ;\nstatic const signed long long i8 ;\nstatic const signed long long i9 ;\nstatic const signed long long i10 ;\nstatic const signed long long i11 ;\nstatic const signed long long i12 ;\nstatic const signed long long i13 ;\nstatic const signed long long i14 ;\nstatic const signed long long i15 ;\nstatic const signed long long i16 ;\nstatic const signed long long i17 ;\nstatic const signed long long i18 ;\nreturn i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12\n+ i13 + i14 + i15 + i16 + i17 + i18 ;\n}"
Line 5711
  "long long f ( )\n{\nstatic const signed long long i1 ;\nstatic const signed long long i2 ;\nstatic const signed long long i3 ;\nstatic const signed long long i4 ;\nstatic const signed long long i5 ;\nstatic const signed long long i6 ;\nstatic const signed long long i7 ;\nstatic const signed long long i8 ;\nstatic const signed long long i9 ;\nstatic const signed long long i10 ;\nstatic const signed long long i11 ;\nstatic const signed long long i12 ;\nstatic const signed long long i13 ;\nstatic const signed long long i14 ;\nstatic const signed long long i15 ;\nstatic const signed long long i16 ;\nstatic const signed long long i17 ;\nstatic const signed long long i18 ;\nreturn i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12\n+ i13 + i14 + i15 + i16 + i17 + i18 ;\n}" always "long long f ( )\n{\nstatic const signed long long i1 ;\nstatic const signed long long i2 ;\nstatic const signed long long i3 ;\nstatic const signed long long i4 ;\nstatic const signed long long i5 ;\nstatic const signed long long i6 ;\nstatic const signed long long i7 ;\nstatic const signed long long i8 ;\nstatic const signed long long i9 ;\nstatic const signed long long i10 ;\nstatic const signed long long i11 ;\nstatic const signed long long i12 ;\nstatic const signed long long i13 ;\nstatic const signed long long i14 ;\nstatic const signed long long i15 ;\nstatic const signed long long i16 ;\nstatic const signed long long i17 ;\nstatic const signed long long i18 ;\nreturn i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12\n+ i13 + i14 + i15 + i16 + i17 + i18 ;\n}"
Line 5734
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5734 always 5734
  expected2 always "long long f ( )\n{\nstatic const signed long long i1 ;\nstatic const signed long long i2 ;\nstatic const signed long long i3 ;\nstatic const signed long long i4 ;\nstatic const signed long long i5 ;\nstatic const signed long long i6 ;\nstatic const signed long long i7 ;\nstatic const signed long long i8 ;\nstatic const signed long long i9 ;\nstatic const signed long long i10 ;\nstatic const signed long long i11 ;\nstatic const signed long long i12 ;\nstatic const signed long long i13 ;\nstatic const signed long long i14 ;\nstatic const signed long long i15 ;\nstatic const signed long long i16 ;\nstatic const signed long long i17 ;\nstatic const signed long long i18 ;\nreturn i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12\n+ i13 + i14 + i15 + i16 + i17 + i18 ;\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5734 always 5734
  code2 always "int long long f()\n{\nstatic const long long signed int i1;\nstatic const long long int signed i2;\nstatic const signed long long int i3;\nstatic const signed int long long i4;\nstatic const int signed long long i5;\nstatic const int long long signed i6;\nlong long static const signed int i7;\nlong long static const int signed i8;\nsigned static const long long int i9;\nsigned static const int long long i10;\nint static const signed long long i11;\nint static const long long signed i12;\nlong long signed int static const i13;\nlong long int signed static const i14;\nsigned long long int static const i15;\nsigned int long long static const i16;\nint signed long long static const i17;\nint long long signed static const i18;\nreturn i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12\n+ i13 + i14 + i15 + i16 + i17 + i18;\n}"
Line 5736
  34 always 34
  = always "const unsigned long extern int i;"
  "const unsigned long extern int i;" always "const unsigned long extern int i;"
Line 5737
  31 always 31
  = always "extern const unsigned long i ;"
  "extern const unsigned long i ;" always "extern const unsigned long i ;"
Line 5738
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5738 always 5738
  expected3 always "extern const unsigned long i ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5738 always 5738
  code3 always "const unsigned long extern int i;"
Line 5742
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5742 always 5742
  "int f ( ) ;" always "int f ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5742 always 5742
  "[[deprecated]] int f();" always "[[deprecated]] int f();"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5745
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5745 always 5745
  "[ [ deprecated ] ] int f ( ) ;" always "[ [ deprecated ] ] int f ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5745 always 5745
  "[[deprecated]] int f();" always "[[deprecated]] int f();"
  true always 1
  "test.cpp" always "test.cpp"
  false always 0
Line 5748
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5748 always 5748
  "[ [ deprecated ] ] int f ( ) ;" always "[ [ deprecated ] ] int f ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5748 always 5748
  "[[deprecated]] int f();" always "[[deprecated]] int f();"
  true always 1
  "test.c" always "test.c"
  true always 1
Line 5751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5751 always 5751
  "template < class T > int f ( ) { }" always "template < class T > int f ( ) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5751 always 5751
  "template <class T> [[noreturn]] int f(){}" always "template <class T> [[noreturn]] int f(){}"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5754 always 5754
  "int f ( int i ) ;" always "int f ( int i ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5754 always 5754
  "[[maybe_unused]] int f([[maybe_unused]] int i);" always "[[maybe_unused]] int f([[maybe_unused]] int i);"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5757
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5757 always 5757
  "[ [ maybe_unused ] ] int f ( [ [ maybe_unused ] ] int i ) ;" always "[ [ maybe_unused ] ] int f ( [ [ maybe_unused ] ] int i ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5757 always 5757
  "[[maybe_unused]] int f([[maybe_unused]] int i);" always "[[maybe_unused]] int f([[maybe_unused]] int i);"
  true always 1
  "test.cpp" always "test.cpp"
  false always 0
Line 5760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5760 always 5760
  "struct a ;" always "struct a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5760 always 5760
  "struct [[]] a;" always "struct [[]] a;"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5763
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5763 always 5763
  "struct a ;" always "struct a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5763 always 5763
  "struct [[,]] a;" always "struct [[,]] a;"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5766
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5766 always 5766
  "struct a ;" always "struct a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5766 always 5766
  "struct [[deprecated,]] a;" always "struct [[deprecated,]] a;"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5769
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5769 always 5769
  "struct a ;" always "struct a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5769 always 5769
  "struct [[,,]] a;" always "struct [[,,]] a;"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5772
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5772 always 5772
  "struct a ;" always "struct a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5772 always 5772
  "struct [[deprecated,,]] a;" always "struct [[deprecated,,]] a;"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5775
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5775 always 5775
  "struct a ;" always "struct a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5775 always 5775
  "struct [[deprecated,maybe_unused,]] a;" always "struct [[deprecated,maybe_unused,]] a;"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5778
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5778 always 5778
  "struct a ;" always "struct a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5778 always 5778
  "struct [[,,,]] a;" always "struct [[,,,]] a;"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5781 always 5781
  "struct a ;" always "struct a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5781 always 5781
  "struct alignas(int) a;" always "struct alignas(int) a;"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5784
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5784 always 5784
  "struct a ;" always "struct a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5784 always 5784
  "struct alignas ( alignof ( float ) ) a;" always "struct alignas ( alignof ( float ) ) a;"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5787 always 5787
  "char a [ 256 ] ;" always "char a [ 256 ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5787 always 5787
  "alignas(256) char a[256];" always "alignas(256) char a[256];"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5790
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5790 always 5790
  "struct a ;" always "struct a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5790 always 5790
  "struct alignas(float) [[deprecated(reason)]] a;" always "struct alignas(float) [[deprecated(reason)]] a;"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5793
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5793 always 5793
  "struct a ;" always "struct a ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5793 always 5793
  "struct [[deprecated,maybe_unused]] alignas(double) [[trivial_abi]] a;" always "struct [[deprecated,maybe_unused]] alignas(double) [[trivial_abi]] a;"
  true always 1
  "test.cpp" always "test.cpp"
  true always 1
Line 5798
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5798 always 5798
  "void f ( ) { switch ( x ) { case 1 : case 2 : case 3 : case 4 : ; } }" always "void f ( ) { switch ( x ) { case 1 : case 2 : case 3 : case 4 : ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5798 always 5798
  "void f() { switch(x) { case 1 ... 4: } }" always "void f() { switch(x) { case 1 ... 4: } }"
Line 5799
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5799 always 5799
  "void f ( ) { switch ( x ) { case 4 ... 1 : ; } }" always "void f ( ) { switch ( x ) { case 4 ... 1 : ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5799 always 5799
  "void f() { switch(x) { case 4 ... 1: } }" always "void f() { switch(x) { case 4 ... 1: } }"
Line 5800
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5800 always 5800
  "void f() { switch(x) { case 1 ... 1000000: } }" always "void f() { switch(x) { case 1 ... 1000000: } }"
Line 5802
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5802 always 5802
  "void f ( ) { switch ( x ) { case 'a' : case 98 : case 'c' : ; } }" always "void f ( ) { switch ( x ) { case 'a' : case 98 : case 'c' : ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5802 always 5802
  "void f() { switch(x) { case 'a' ... 'c': } }" always "void f() { switch(x) { case 'a' ... 'c': } }"
Line 5803
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5803 always 5803
  "void f ( ) { switch ( x ) { case 'c' ... 'a' : ; } }" always "void f ( ) { switch ( x ) { case 'c' ... 'a' : ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5803 always 5803
  "void f() { switch(x) { case 'c' ... 'a': } }" always "void f() { switch(x) { case 'c' ... 'a': } }"
Line 5805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5805 always 5805
  "void f ( ) { switch ( x ) { case '[' : case 92 : case ']' : ; } }" always "void f ( ) { switch ( x ) { case '[' : case 92 : case ']' : ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5805 always 5805
  "void f() { switch(x) { case '[' ... ']': } }" always "void f() { switch(x) { case '[' ... ']': } }"
Line 5807
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5807 always 5807
  "void f ( ) { switch ( x ) { case '&' : case 39 : case '(' : ; } }" always "void f ( ) { switch ( x ) { case '&' : case 39 : case '(' : ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5807 always 5807
  "void f() { switch(x) { case '&' ... '(': } }" always "void f() { switch(x) { case '&' ... '(': } }"
Line 5808
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5808 always 5808
  "void f ( ) { switch ( x ) { case '\\x61' : case 98 : case '\\x63' : ; } }" always "void f ( ) { switch ( x ) { case '\\x61' : case 98 : case '\\x63' : ; } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5808 always 5808
  "void f() { switch(x) { case '\\x61' ... '\\x63': } }" always "void f() { switch(x) { case '\\x61' ... '\\x63': } }"
Line 5812
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5812 always 5812
  ";" always ";"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5812 always 5812
  "namespace { }" always "namespace { }"
Line 5813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5813 always 5813
  ";" always ";"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5813 always 5813
  "namespace foo { }" always "namespace foo { }"
Line 5814
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5814 always 5814
  ";" always ";"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5814 always 5814
  "namespace foo { namespace { } }" always "namespace foo { namespace { } }"
Line 5815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5815 always 5815
  ";" always ";"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5815 always 5815
  "namespace { namespace { } }" always "namespace { namespace { } }"
Line 5816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5816 always 5816
  ";" always ";"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5816 always 5816
  "namespace foo { namespace bar { } }" always "namespace foo { namespace bar { } }"
Line 5820
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5820 always 5820
  "a ? b : c ;" always "a ? b : c ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5820 always 5820
  "a ? b : c;" always "a ? b : c;"
Line 5822
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5822 always 5822
  "a ? ( b , c ) : d ;" always "a ? ( b , c ) : d ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5822 always 5822
  "a ? b , c : d;" always "a ? b , c : d;"
Line 5823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5823 always 5823
  "a ? ( b , c ) : d ;" always "a ? ( b , c ) : d ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5823 always 5823
  "a ? (b , c) : d;" always "a ? (b , c) : d;"
Line 5825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5825 always 5825
  "a ? ( 1 ? ( a , b ) : 3 ) : d ;" always "a ? ( 1 ? ( a , b ) : 3 ) : d ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5825 always 5825
  "a ? 1 ? a, b : 3 : d;" always "a ? 1 ? a, b : 3 : d;"
Line 5827
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5827 always 5827
  "a ? ( std :: map < int , int > ( ) ) : 0 ;" always "a ? ( std :: map < int , int > ( ) ) : 0 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5827 always 5827
  "typedef std::map<int,int> mymap; a ? mymap() : 0;" always "typedef std::map<int,int> mymap; a ? mymap() : 0;"
Line 5829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5829 always 5829
  "a ? ( b < c ) : d > e" always "a ? ( b < c ) : d > e"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5829 always 5829
  "a ? b < c : d > e" always "a ? b < c : d > e"
Line 5833
  Simple always 0
Line 5834
  Z3 always 1
Line 5839
  & {lifetime[Address]=(settings0),!0}
  nullptr always 0
Line 5840
  code possible {"return new A;"@131,"return new A();"@132,"return new A(true);"@133,"return new A::B;"@134,"return new A::B();"@135,"return new A::B(true);"@136,"return new A::B::C;"@137,"return new A::B::C();"@138,"return new A::B::C(true);"@139,"return new A::B::C::D;"@140}
Line 5841
  ! always {!<=-1,!>=2}
  "test.cpp" always "test.cpp"
Line 5842
  "ERROR" always "ERROR"
Line 5853
  == always {!<=-1,!>=2}
  "var" always "var"
Line 5854
  1 always 1
Line 5865
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ";" always ";"
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ":" always ":"
Line 5866
  "Op2 but no Op1 for token: " always "Op2 but no Op1 for token: "
Line 5870
  == always {!<=-1,!>=2}
  :: always 1
  Z3 always 1
Line 5876
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(astTop)
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(astTop),end=0}
Line 5878
  ! {!<=-1,!>=2,0}
  ret possible size=0
  ( {!<=-1,!>=2,1}
Line 5879
  ret always !size=0
  " " always " "
Line 5883
  ret possible size=0
Line 5887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5887 always 5887
  "12+3+" always "12+3+"
  "1+2+3" always "1+2+3"
Line 5888
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5888 always 5888
  "12*3+" always "12*3+"
  "1*2+3" always "1*2+3"
Line 5889
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5889 always 5889
  "123*+" always "123*+"
  "1+2*3" always "1+2*3"
Line 5890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5890 always 5890
  "12*34*+" always "12*34*+"
  "1*2+3*4" always "1*2+3*4"
Line 5891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5891 always 5891
  "12*34*5*+" always "12*34*5*+"
  "1*2+3*4*5" always "1*2+3*4*5"
Line 5892
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5892 always 5892
  "0(r.&" always "0(r.&"
  "(&((typeof(x))0).r);" always "(&((typeof(x))0).r);"
Line 5893
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5893 always 5893
  "0(r.&" always "0(r.&"
  "&((typeof(x))0).r;" always "&((typeof(x))0).r;"
Line 5894
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5894 always 5894
  "0f1(||" always "0f1(||"
  "; 0 || f(1);" always "; 0 || f(1);"
Line 5897
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5897 always 5897
  "ab::c+" always "ab::c+"
  "a::b+c" always "a::b+c"
Line 5898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5898 always 5898
  "abc+=" always "abc+="
  "a=b+c" always "a=b+c"
Line 5899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5899 always 5899
  "abc=," always "abc=,"
  "a,b=c" always "a,b=c"
Line 5900
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5900 always 5900
  "a-1+" always "a-1+"
  "-a+1" always "-a+1"
Line 5901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5901 always 5901
  "ab++-c-" always "ab++-c-"
  "a-b++-c" always "a-b++-c"
Line 5902
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5902 always 5902
  "ab<=>" always "ab<=>"
  "a<=>b" always "a<=>b"
Line 5905
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5905 always 5905
  "ab.sizeof" always "ab.sizeof"
  "sizeof a.b" always "sizeof a.b"
Line 5908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5908 always 5908
  "ab>>=" always "ab>>="
  "a>>=b;" always "a>>=b;"
Line 5909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5909 always 5909
  "ab<<=" always "ab<<="
  "a<<=b;" always "a<<=b;"
Line 5910
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5910 always 5910
  "ab+=" always "ab+="
  "a+=b;" always "a+=b;"
Line 5911
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5911 always 5911
  "ab-=" always "ab-="
  "a-=b;" always "a-=b;"
Line 5912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5912 always 5912
  "ab*=" always "ab*="
  "a*=b;" always "a*=b;"
Line 5913
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5913 always 5913
  "ab/=" always "ab/="
  "a/=b;" always "a/=b;"
Line 5914
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5914 always 5914
  "ab%=" always "ab%="
  "a%=b;" always "a%=b;"
Line 5915
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5915 always 5915
  "ab&=" always "ab&="
  "a&=b;" always "a&=b;"
Line 5916
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5916 always 5916
  "ab|=" always "ab|="
  "a|=b;" always "a|=b;"
Line 5917
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5917 always 5917
  "ab^=" always "ab^="
  "a^=b;" always "a^=b;"
Line 5919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5919 always 5919
  "ab*c*.(+return" always "ab*c*.(+return"
  "return a + ((*b).*c)();" always "return a + ((*b).*c)();"
Line 5922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5922 always 5922
  "abc==" always "abc=="
  "a=b=c;" always "a=b=c;"
Line 5925
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5925 always 5925
  "ab0=c1=:?" always "ab0=c1=:?"
  "a?b=0:c=1;" always "a?b=0:c=1;"
Line 5926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5926 always 5926
  "fabc,d:?=e," always "fabc,d:?=e,"
  "f = a ? b, c : d, e;" always "f = a ? b, c : d, e;"
Line 5927
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5927 always 5927
  "fabc,de,:?=" always "fabc,de,:?="
  "f = (a ? (b, c) : (d, e));" always "f = (a ? (b, c) : (d, e));"
Line 5928
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5928 always 5928
  "fabc,de,:?=" always "fabc,de,:?="
  "f = (a ? b, c : (d, e));" always "f = (a ? b, c : (d, e));"
Line 5929
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5929 always 5929
  "ab35,4:?foo(:?return" always "ab35,4:?foo(:?return"
  "return (a ? b ? (3,5) : 4 : foo());" always "return (a ? b ? (3,5) : 4 : foo());"
Line 5930
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5930 always 5930
  "check(result_type00,{invalid:?return" always "check(result_type00,{invalid:?return"
  "return check() ? result_type {0, 0} : invalid;" always "return check() ? result_type {0, 0} : invalid;"
Line 5931
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5931 always 5931
  "x01:?return" always "x01:?return"
  "return x ? 0 : 1;" always "return x ? 0 : 1;"
Line 5932
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5932 always 5932
  "x00throw:?return" always "x00throw:?return"
  "return x ? 0 : throw 0;" always "return x ? 0 : throw 0;"
Line 5933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5933 always 5933
  "val0<1throwval:?return" always "val0<1throwval:?return"
  "return val < 0 ? throw 1 : val;" always "return val < 0 ? throw 1 : val;"
Line 5934
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5934 always 5934
  "ix0<00throw:?=" always "ix0<00throw:?="
  "int i = x < 0 ? 0 : throw 0;" always "int i = x < 0 ? 0 : throw 0;"
Line 5936
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5936 always 5936
  "a\"\"=" always "a\"\"="
  "a=\"\"" always "a=\"\""
Line 5937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5937 always 5937
  "a\'\'=" always "a\'\'="
  "a=\'\'" always "a=\'\'"
Line 5938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5938 always 5938
  "'X''a'>" always "'X''a'>"
  "('X' > 'a')" always "('X' > 'a')"
Line 5939
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5939 always 5939
  "L'X'L'a'>" always "L'X'L'a'>"
  "(L'X' > L'a')" always "(L'X' > L'a')"
Line 5940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5940 always 5940
  "u'X'u'a'>" always "u'X'u'a'>"
  "(u'X' > u'a')" always "(u'X' > u'a')"
Line 5941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5941 always 5941
  "U'X'U'a'>" always "U'X'U'a'>"
  "(U'X' > U'a')" always "(U'X' > U'a')"
Line 5942
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5942 always 5942
  "u8'X'u8'a'>" always "u8'X'u8'a'>"
  "(u8'X' > u8'a')" always "(u8'X' > u8'a')"
Line 5944
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5944 always 5944
  "a0>bc/d:?" always "a0>bc/d:?"
  "(a>0) ? (b/(c)) : d;" always "(a>0) ? (b/(c)) : d;"
Line 5945
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5945 always 5945
  "abc/+d+" always "abc/+d+"
  "a + (b/(c)) + d;" always "a + (b/(c)) + d;"
Line 5946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5946 always 5946
  "x1024x/0:?" always "x1024x/0:?"
  "void f() { x ? 1024 / x : 0; }" always "void f() { x ? 1024 / x : 0; }"
Line 5948
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5948 always 5948
  "absizeofd(ef.+(=" always "absizeofd(ef.+(="
  "a = b(sizeof(c d) + e.f)" always "a = b(sizeof(c d) + e.f)"
Line 5950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5950 always 5950
  "a*b***" always "a*b***"
  "*a * **b;" always "*a * **b;"
Line 5953
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5953 always 5953
  "f\"A\"1,(" always "f\"A\"1,("
  "f(\"A\" B, 1);" always "f(\"A\" B, 1);"
Line 5954
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5954 always 5954
  "fA1,(" always "fA1,("
  "f(A \"B\", 1);" always "f(A \"B\", 1);"
Line 5957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5957 always 5957
  "fint(0,(" always "fint(0,("
  "f(int(),0);" always "f(int(),0);"
Line 5958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5958 always 5958
  "f(0,(" always "f(0,("
  "f(int *(),0);" always "f(int *(),0);"
Line 5959
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5959 always 5959
  "f((0,(" always "f((0,("
  "f((intp)int *(),0);" always "f((intp)int *(),0);"
Line 5960
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5960 always 5960
  "zx1(&y2(&|=" always "zx1(&y2(&|="
  "z = (x & (unsigned)1) | (y & (unsigned)2);" always "z = (x & (unsigned)1) | (y & (unsigned)2);"
Line 5963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5963 always 5963
  "for;;(" always "for;;("
  "for(;;)" always "for(;;)"
Line 5964
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5964 always 5964
  "fora0=a8<a++;;(" always "fora0=a8<a++;;("
  "for(a=0;a<8;a++)" always "for(a=0;a<8;a++)"
Line 5965
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5965 always 5965
  "fori1=current0=,iNUM<=i++;;(" always "fori1=current0=,iNUM<=i++;;("
  "for(i = (1), current = 0; i <= (NUM); ++i)" always "for(i = (1), current = 0; i <= (NUM); ++i)"
Line 5966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5966 always 5966
  "foreachxy,((" always "foreachxy,(("
  "for(each(x,y)){}" always "for(each(x,y)){}"
Line 5967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5967 always 5967
  "forvar1(;;(" always "forvar1(;;("
  "for(int var(1);;)" always "for(int var(1);;)"
Line 5968
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5968 always 5968
  "forab:(" always "forab:("
  "for (int a : b);" always "for (int a : b);"
Line 5969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5969 always 5969
  "forvarb:(" always "forvarb:("
  "for (int *var : b);" always "for (int *var : b);"
Line 5970
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5970 always 5970
  "forvard:(" always "forvard:("
  "for (a<b> var : d);" always "for (a<b> var : d);"
Line 5971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5971 always 5971
  "forvare:(" always "forvare:("
  "for (a::b<c> var : e);" always "for (a::b<c> var : e);"
Line 5972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5972 always 5972
  "forx*0=yz;;(" always "forx*0=yz;;("
  "for(*x=0;y;z)" always "for(*x=0;y;z)"
Line 5973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5973 always 5973
  "forx0=y(8<z;;(" always "forx0=y(8<z;;("
  "for (x=0;(int)y<8;z);" always "for (x=0;(int)y<8;z);"
Line 5974
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5974 always 5974
  "forab,c:(" always "forab,c:("
  "for (auto [a,b]: c);" always "for (auto [a,b]: c);"
Line 5975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5975 always 5975
  "fora*++;;(" always "fora*++;;("
  "for (++(*a);;);" always "for (++(*a);;);"
Line 5976
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5976 always 5976
  "foryz:(" always "foryz:("
  "for (decltype(x) *y : z);" always "for (decltype(x) *y : z);"
Line 5977
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5977 always 5977
  "for(tmpNULL!=tmptmpnext.=;;( tmpa=" always "for(tmpNULL!=tmptmpnext.=;;( tmpa="
  "for ( ({ tmp = a; }) ; tmp != NULL; tmp = tmp->next ) {}" always "for ( ({ tmp = a; }) ; tmp != NULL; tmp = tmp->next ) {}"
Line 5978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5978 always 5978
  "forx0=x;;(" always "forx0=x;;("
  "for (int x=0; x;);" always "for (int x=0; x;);"
Line 5979
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5979 always 5979
  "forae*bc.({:(" always "forae*bc.({:("
  "for (a *e : {b->c()});" always "for (a *e : {b->c()});"
Line 5980
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5980 always 5980
  "fori0=iasize.(<i++;;( asize.(" always "fori0=iasize.(<i++;;( asize.("
  "for (decltype(a.size()) i = 0; i < a.size(); ++i);" always "for (decltype(a.size()) i = 0; i < a.size(); ++i);"
Line 5981
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5981 always 5981
  "foria:( asize.(" always "foria:( asize.("
  "for(decltype(a.size()) i:a);" always "for(decltype(a.size()) i:a);"
Line 5984
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5984 always 5984
  "forab=ca:;(" always "forab=ca:;("
  "for(a=b;int c:a)" always "for(a=b;int c:a)"
Line 5987
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5987 always 5987
  "ax( whilex(" always "ax( whilex("
  "a(x) while (x)" always "a(x) while (x)"
Line 5988
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5988 always 5988
  "ifx( i0= whilei(" always "ifx( i0= whilei("
  "if (x) { ({ int i = 0; while(i); }) };" always "if (x) { ({ int i = 0; while(i); }) };"
Line 5989
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5989 always 5989
  "ifx( BUG_ON{!( i0= whilei(" always "ifx( BUG_ON{!( i0= whilei("
  "if (x) { BUG_ON(!({int i=0; while(i);})); }" always "if (x) { BUG_ON(!({int i=0; while(i);})); }"
Line 5990
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5990 always 5990
  "v0= while{0!=( v0= while{0!=( v0=" always "v0= while{0!=( v0= while{0!=( v0="
  "({ v = 0; }); while (({ v = 0; }) != 0); while (({ v = 0; }) != 0);" always "({ v = 0; }); while (({ v = 0; }) != 0); while (({ v = 0; }) != 0);"
Line 5993
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5993 always 5993
  "abc.1:?1+bd.1:?+=" always "abc.1:?1+bd.1:?+="
  "a =(b.c ? : 1) + 1 + (b.d ? : 1);" always "a =(b.c ? : 1) + 1 + (b.d ? : 1);"
Line 5995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5995 always 5995
  "catch...(" always "catch...("
  "try {} catch (...) {}" always "try {} catch (...) {}"
Line 5997
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5997 always 5997
  "" always ""
  "void Foo(Bar&);" always "void Foo(Bar&);"
Line 5998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  5998 always 5998
  "" always ""
  "void Foo(Bar&&);" always "void Foo(Bar&&);"
Line 6000
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6000 always 6000
  "Barb&" always "Barb&"
  "void Foo(Bar& b);" always "void Foo(Bar& b);"
Line 6001
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6001 always 6001
  "Barb&&" always "Barb&&"
  "void Foo(Bar&& b);" always "void Foo(Bar&& b);"
Line 6003
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6003 always 6003
  "DerivedDerived::(" always "DerivedDerived::("
  "Derived::~Derived() {}" always "Derived::~Derived() {}"
Line 6005
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6005 always 6005
  "ifCA_FarReadfilenew(,sizeofobjtype(,(!(" always "ifCA_FarReadfilenew(,sizeofobjtype(,(!("
  "if (!CA_FarRead(file, (void far *)new, sizeof(objtype)))" always "if (!CA_FarRead(file, (void far *)new, sizeof(objtype)))"
Line 6008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6008 always 6008
  "ifx3=y;(" always "ifx3=y;("
  "if (int x=3; y)" always "if (int x=3; y)"
Line 6016
  1111 always 1111
  = always "const char * a(int type) {\n  return (\n   (type == 1) ? \"\"\n : (type == 2) ? \"\"\n : (type == 3) ? \"\"\n : (type == 4) ? \"\"\n : (type == 5) ? \"\"\n : (type == 6) ? \"\"\n : (type == 7) ? \"\"\n : (type == 8) ? \"\"\n : (type == 9) ? \"\"\n : (type == 10) ? \"\"\n : (type == 11) ? \"\"\n : (type == 12) ? \"\"\n : (type == 13) ? \"\"\n : (type == 14) ? \"\"\n : (type == 15) ? \"\"\n : (type == 16) ? \"\"\n : (type == 17) ? \"\"\n : (type == 18) ? \"\"\n : (type == 19) ? \"\"\n : (type == 20) ? \"\"\n : (type == 21) ? \"\"\n : (type == 22) ? \"\"\n : (type == 23) ? \"\"\n : (type == 24) ? \"\"\n : (type == 25) ? \"\"\n : (type == 26) ? \"\"\n : (type == 27) ? \"\"\n : (type == 28) ? \"\"\n : (type == 29) ? \"\"\n : (type == 30) ? \"\"\n : (type == 31) ? \"\"\n : (type == 32) ? \"\"\n : (type == 33) ? \"\"\n : (type == 34) ? \"\"\n : (type == 35) ? \"\"\n : (type == 36) ? \"\"\n : (type == 37) ? \"\"\n : (type == 38) ? \"\"\n : (type == 39) ? \"\"\n : (type == 40) ? \"\"\n : (type == 41) ? \"\"\n : (type == 42) ? \"\"\n : (type == 43) ? \"\"\n : (type == 44) ? \"\"\n : (type == 45) ? \"\"\n : (type == 46) ? \"\"\n : (type == 47) ? \"\"\n : (type == 48) ? \"\"\n : (type == 49) ? \"\"\n : (type == 50) ? \"\"\n : (type == 51) ? \"\"\n : \"\");\n}\n"
  "const char * a(int type) {\n  return (\n   (type == 1) ? \"\"\n : (type == 2) ? \"\"\n : (type == 3) ? \"\"\n : (type == 4) ? \"\"\n : (type == 5) ? \"\"\n : (type == 6) ? \"\"\n : (type == 7) ? \"\"\n : (type == 8) ? \"\"\n : (type == 9) ? \"\"\n : (type == 10) ? \"\"\n : (type == 11) ? \"\"\n : (type == 12) ? \"\"\n : (type == 13) ? \"\"\n : (type == 14) ? \"\"\n : (type == 15) ? \"\"\n : (type == 16) ? \"\"\n : (type == 17) ? \"\"\n : (type == 18) ? \"\"\n : (type == 19) ? \"\"\n : (type == 20) ? \"\"\n : (type == 21) ? \"\"\n : (type == 22) ? \"\"\n : (type == 23) ? \"\"\n : (type == 24) ? \"\"\n : (type == 25) ? \"\"\n : (type == 26) ? \"\"\n : (type == 27) ? \"\"\n : (type == 28) ? \"\"\n : (type == 29) ? \"\"\n : (type == 30) ? \"\"\n : (type == 31) ? \"\"\n : (type == 32) ? \"\"\n : (type == 33) ? \"\"\n : (type == 34) ? \"\"\n : (type == 35) ? \"\"\n : (type == 36) ? \"\"\n : (type == 37) ? \"\"\n : (type == 38) ? \"\"\n : (type == 39) ? \"\"\n : (type == 40) ? \"\"\n : (type == 41) ? \"\"\n : (type == 42) ? \"\"\n : (type == 43) ? \"\"\n : (type == 44) ? \"\"\n : (type == 45) ? \"\"\n : (type == 46) ? \"\"\n : (type == 47) ? \"\"\n : (type == 48) ? \"\"\n : (type == 49) ? \"\"\n : (type == 50) ? \"\"\n : (type == 51) ? \"\"\n : \"\");\n}\n" always "const char * a(int type) {\n  return (\n   (type == 1) ? \"\"\n : (type == 2) ? \"\"\n : (type == 3) ? \"\"\n : (type == 4) ? \"\"\n : (type == 5) ? \"\"\n : (type == 6) ? \"\"\n : (type == 7) ? \"\"\n : (type == 8) ? \"\"\n : (type == 9) ? \"\"\n : (type == 10) ? \"\"\n : (type == 11) ? \"\"\n : (type == 12) ? \"\"\n : (type == 13) ? \"\"\n : (type == 14) ? \"\"\n : (type == 15) ? \"\"\n : (type == 16) ? \"\"\n : (type == 17) ? \"\"\n : (type == 18) ? \"\"\n : (type == 19) ? \"\"\n : (type == 20) ? \"\"\n : (type == 21) ? \"\"\n : (type == 22) ? \"\"\n : (type == 23) ? \"\"\n : (type == 24) ? \"\"\n : (type == 25) ? \"\"\n : (type == 26) ? \"\"\n : (type == 27) ? \"\"\n : (type == 28) ? \"\"\n : (type == 29) ? \"\"\n : (type == 30) ? \"\"\n : (type == 31) ? \"\"\n : (type == 32) ? \"\"\n : (type == 33) ? \"\"\n : (type == 34) ? \"\"\n : (type == 35) ? \"\"\n : (type == 36) ? \"\"\n : (type == 37) ? \"\"\n : (type == 38) ? \"\"\n : (type == 39) ? \"\"\n : (type == 40) ? \"\"\n : (type == 41) ? \"\"\n : (type == 42) ? \"\"\n : (type == 43) ? \"\"\n : (type == 44) ? \"\"\n : (type == 45) ? \"\"\n : (type == 46) ? \"\"\n : (type == 47) ? \"\"\n : (type == 48) ? \"\"\n : (type == 49) ? \"\"\n : (type == 50) ? \"\"\n : (type == 51) ? \"\"\n : \"\");\n}\n"
Line 6072
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6072 always 6072
  code always "const char * a(int type) {\n  return (\n   (type == 1) ? \"\"\n : (type == 2) ? \"\"\n : (type == 3) ? \"\"\n : (type == 4) ? \"\"\n : (type == 5) ? \"\"\n : (type == 6) ? \"\"\n : (type == 7) ? \"\"\n : (type == 8) ? \"\"\n : (type == 9) ? \"\"\n : (type == 10) ? \"\"\n : (type == 11) ? \"\"\n : (type == 12) ? \"\"\n : (type == 13) ? \"\"\n : (type == 14) ? \"\"\n : (type == 15) ? \"\"\n : (type == 16) ? \"\"\n : (type == 17) ? \"\"\n : (type == 18) ? \"\"\n : (type == 19) ? \"\"\n : (type == 20) ? \"\"\n : (type == 21) ? \"\"\n : (type == 22) ? \"\"\n : (type == 23) ? \"\"\n : (type == 24) ? \"\"\n : (type == 25) ? \"\"\n : (type == 26) ? \"\"\n : (type == 27) ? \"\"\n : (type == 28) ? \"\"\n : (type == 29) ? \"\"\n : (type == 30) ? \"\"\n : (type == 31) ? \"\"\n : (type == 32) ? \"\"\n : (type == 33) ? \"\"\n : (type == 34) ? \"\"\n : (type == 35) ? \"\"\n : (type == 36) ? \"\"\n : (type == 37) ? \"\"\n : (type == 38) ? \"\"\n : (type == 39) ? \"\"\n : (type == 40) ? \"\"\n : (type == 41) ? \"\"\n : (type == 42) ? \"\"\n : (type == 43) ? \"\"\n : (type == 44) ? \"\"\n : (type == 45) ? \"\"\n : (type == 46) ? \"\"\n : (type == 47) ? \"\"\n : (type == 48) ? \"\"\n : (type == 49) ? \"\"\n : (type == 50) ? \"\"\n : (type == 51) ? \"\"\n : \"\");\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6072 always 6072
  false always 0
Line 6076
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6076 always 6076
  "aintnew=" always "aintnew="
  "a = new int;" always "a = new int;"
Line 6077
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6077 always 6077
  "aint4[new=" always "aint4[new="
  "a = new int[4];" always "a = new int[4];"
Line 6078
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6078 always 6078
  "aFoobar(new=" always "aFoobar(new="
  "a = new Foo(bar);" always "a = new Foo(bar);"
Line 6079
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6079 always 6079
  "aFoobar(new=" always "aFoobar(new="
  "a = new Foo(bar);" always "a = new Foo(bar);"
Line 6080
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6080 always 6080
  "aFoo(new=" always "aFoo(new="
  "a = new Foo<bar>();" always "a = new Foo<bar>();"
Line 6081
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6081 always 6081
  "aXnew(" always "aXnew("
  "a (new (X));" always "a (new (X));"
Line 6082
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6082 always 6082
  "aXnew5,(" always "aXnew5,("
  "a (new (X), 5);" always "a (new (X), 5);"
Line 6083
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6083 always 6083
  "adelete" always "adelete"
  "delete a;" always "delete a;"
Line 6084
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6084 always 6084
  "adelete" always "adelete"
  "delete (a);" always "delete (a);"
Line 6085
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6085 always 6085
  "adelete" always "adelete"
  "delete[] a;" always "delete[] a;"
Line 6086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6086 always 6086
  "ab.3c-(delete" always "ab.3c-(delete"
  "delete[] a.b(3 - c);" always "delete[] a.b(3 - c);"
Line 6087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6087 always 6087
  "aA1(new(bB2(new(," always "aA1(new(bB2(new(,"
  "a(new A(1)), b(new B(2))" always "a(new A(1)), b(new B(2))"
Line 6088
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6088 always 6088
  "Fred10[new" always "Fred10[new"
  ";new Fred[10];" always ";new Fred[10];"
Line 6089
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6089 always 6089
  "adelete" always "adelete"
  "void f() { delete a; }" always "void f() { delete a; }"
Line 6090
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6090 always 6090
  "Aa*A{new=" always "Aa*A{new="
  "A* a = new A{};" always "A* a = new A{};"
Line 6091
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6091 always 6091
  "Aa*A12,{new=" always "Aa*A12,{new="
  "A* a = new A{ 1, 2 };" always "A* a = new A{ 1, 2 };"
Line 6092
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6092 always 6092
  "Sv0[(new" always "Sv0[(new"
  "new S(v[0]);" always "new S(v[0]);"
Line 6093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6093 always 6093
  "SS::x(px0>intx[{newint1[{new:?(:" always "SS::x(px0>intx[{newint1[{new:?(:"
  "S::S(int x) : p(x > 0 ? new int[x]{} : new int[1]{}) {}" always "S::S(int x) : p(x > 0 ? new int[x]{} : new int[1]{}) {}"
Line 6096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6096 always 6096
  "X12,3,(new ab,c," always "X12,3,(new ab,c,"
  "new (a,b,c) X(1,2,3);" always "new (a,b,c) X(1,2,3);"
Line 6097
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6097 always 6097
  "a::new=" always "a::new="
  "a = new (b) ::X;" always "a = new (b) ::X;"
Line 6098
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6098 always 6098
  "cCnew= abc:?" always "cCnew= abc:?"
  "c = new(a ? b : c) C;" always "c = new(a ? b : c) C;"
Line 6104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6104 always 6104
  "fxnewy,z,(" always "fxnewy,z,("
  "f(new (x,y,z));" always "f(new (x,y,z));"
Line 6107
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6107 always 6107
  "const0(new" always "const0(new"
  "new const auto (0);" always "new const auto (0);"
Line 6108
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6108 always 6108
  "autonew" always "autonew"
  "new (auto) (0.0);" always "new (auto) (0.0);"
Line 6109
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6109 always 6109
  "int3[4[5[new" always "int3[4[5[new"
  "new (int S::*[3][4][5]) ();" always "new (int S::*[3][4][5]) ();"
Line 6110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6110 always 6110
  "pSnew=" always "pSnew="
  "p=new (x)(S)(1,2);" always "p=new (x)(S)(1,2);"
Line 6111
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6111 always 6111
  "inti[new(" always "inti[new("
  "(void)new (int[i]);" always "(void)new (int[i]);"
Line 6112
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6112 always 6112
  "intp* pnew malloc4(" always "intp* pnew malloc4("
  "int*p; new (p) (malloc(4));" always "int*p; new (p) (malloc(4));"
Line 6113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6113 always 6113
  "intnew" always "intnew"
  "new (&w.x)(int*)(0);" always "new (&w.x)(int*)(0);"
Line 6114
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6114 always 6114
  "&new" always "&new"
  "new (&w.x)(0);" always "new (&w.x)(0);"
Line 6117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6117 always 6117
  "char10[new(" always "char10[new("
  "(void)new(char*)[10];" always "(void)new(char*)[10];"
Line 6121
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6121 always 6121
  "12+3*" always "12+3*"
  "(1+2)*3" always "(1+2)*3"
Line 6122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6122 always 6122
  "123+*" always "123+*"
  "1*(2+3)" always "1*(2+3)"
Line 6123
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6123 always 6123
  "123+*4*" always "123+*4*"
  "1*(2+3)*4" always "1*(2+3)*4"
Line 6124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6124 always 6124
  "ifab.c&d==(" always "ifab.c&d==("
  "if((a.b&c)==d){}" always "if((a.b&c)==d){}"
Line 6126
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6126 always 6126
  "pf.pf.12,(&&" always "pf.pf.12,(&&"
  "((p.f) && (p.f)(1,2))" always "((p.f) && (p.f)(1,2))"
Line 6128
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6128 always 6128
  "forresdirGetFirst.file&_T(,(=;;(" always "forresdirGetFirst.file&_T(,(=;;("
  "for ((res = dir.GetFirst(&file, _T()));;) {}" always "for ((res = dir.GetFirst(&file, _T()));;) {}"
Line 6131
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6131 always 6131
  "ifa(0[1==(" always "ifa(0[1==("
  "if(a()[0]==1){}" always "if(a()[0]==1){}"
Line 6132
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6132 always 6132
  "ifbuff0[&(*1==(" always "ifbuff0[&(*1==("
  "if (*((DWORD*)&buff[0])==1){}" always "if (*((DWORD*)&buff[0])==1){}"
Line 6133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6133 always 6133
  "ifp*0[1==(" always "ifp*0[1==("
  "if((*p)[0]==1)" always "if((*p)[0]==1)"
Line 6134
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6134 always 6134
  "ifab.cd.[e==(" always "ifab.cd.[e==("
  "if(a.b[c.d]==e){}" always "if(a.b[c.d]==e){}"
Line 6136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6136 always 6136
  "iftpnote.i1-[note.0==tpnote.i1-[type.4>||(" always "iftpnote.i1-[note.0==tpnote.i1-[type.4>||("
  "if ((tp.note[i - 1].note == 0) || (tp.note[i - 1].type > 4)) {}" always "if ((tp.note[i - 1].note == 0) || (tp.note[i - 1].type > 4)) {}"
Line 6137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6137 always 6137
  "ab.i[j1+[" always "ab.i[j1+["
  "a.b[i][j+1]" always "a.b[i][j+1]"
Line 6140
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6140 always 6140
  "(= x (( (. ([ a i) f)))" always "(= x (( (. ([ a i) f)))"
  "x = ((a[i]).f)();" always "x = ((a[i]).f)();"
  :: always 1
  Z3 always 1
Line 6142
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6142 always 6142
  "abc.de.++[=" always "abc.de.++[="
  "a = b.c[++(d.e)];" always "a = b.c[++(d.e)];"
Line 6143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6143 always 6143
  "abc(1+=" always "abc(1+="
  "a = b(c**)+1;" always "a = b(c**)+1;"
Line 6144
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6144 always 6144
  "abc.=" always "abc.="
  "a = (b).c;" always "a = (b).c;"
Line 6147
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6147 always 6147
  "a1(2(+=" always "a1(2(+="
  "a=(t)1+(t)2;" always "a=(t)1+(t)2;"
Line 6148
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6148 always 6148
  "a1(2+=" always "a1(2+="
  "a=(t)1+2;" always "a=(t)1+2;"
Line 6149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6149 always 6149
  "a1(2+=" always "a1(2+="
  "a=(t*)1+2;" always "a=(t*)1+2;"
Line 6150
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6150 always 6150
  "a1(2+=" always "a1(2+="
  "a=(t&)1+2;" always "a=(t&)1+2;"
Line 6151
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6151 always 6151
  "a1(2+=" always "a1(2+="
  "a=(t&&)1+2;" always "a=(t&&)1+2;"
Line 6152
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6152 always 6152
  "ab::r&c(=" always "ab::r&c(="
  "a::b& r = (a::b&)c;" always "a::b& r = (a::b&)c;"
Line 6153
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6153 always 6153
  "ab10:?=" always "ab10:?="
  "a=(b)?1:0;" always "a=(b)?1:0;"
Line 6154
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6154 always 6154
  "ac5[new(=" always "ac5[new(="
  "a = (b*)(new c[5]);" always "a = (b*)(new c[5]);"
Line 6155
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6155 always 6155
  "a(4+" always "a(4+"
  "(int)(a) + 4;" always "(int)(a) + 4;"
Line 6158
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6158 always 6158
  "a&{(0[1[5[0=" always "a&{(0[1[5[0="
  "(int (**)[i]){&a}[0][1][5] = 0;" always "(int (**)[i]){&a}[0][1][5] = 0;"
Line 6159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6159 always 6159
  "ab12,{(0[,(" always "ab12,{(0[,("
  "a(b, (int []){1,2}[0]);" always "a(b, (int []){1,2}[0]);"
Line 6160
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6160 always 6160
  "n0=" always "n0="
  "TrivialDefCtor{[2][2]}[1][1].n = 0;" always "TrivialDefCtor{[2][2]}[1][1].n = 0;"
Line 6161
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6161 always 6161
  "aT12,3,{1[=" always "aT12,3,{1[="
  "a = T{1, 2, 3}[1];" always "a = T{1, 2, 3}[1];"
Line 6164
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6164 always 6164
  "ab{(=" always "ab{(="
  "a=b{}();" always "a=b{}();"
Line 6165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6165 always 6165
  "abc{((=" always "abc{((="
  "a=b(c{}());" always "a=b(c{}());"
Line 6166
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6166 always 6166
  "xNULL!=0(x(:?" always "xNULL!=0(x(:?"
  "void f() { {} ((x != NULL) ? (void)0 : x()); }" always "void f() { {} ((x != NULL) ? (void)0 : x()); }"
Line 6169
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6169 always 6169
  "a{+d+ bc+" always "a{+d+ bc+"
  "a+({b+c;})+d" always "a+({b+c;})+d"
Line 6170
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6170 always 6170
  "a{d*+ bc+" always "a{d*+ bc+"
  "a+({b+c;})*d" always "a+({b+c;})*d"
Line 6171
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6171 always 6171
  "xa{((= bc( yd{((= ef(" always "xa{((= bc( yd{((= ef("
  "x=(int)(a({b(c);}));y=(int)(d({e(f);}));" always "x=(int)(a({b(c);}));y=(int)(d({e(f);}));"
Line 6174
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6174 always 6174
  "A{{,( x0= Bx1={x2={,(" always "A{{,( x0= Bx1={x2={,("
  "A({},{x=0;});B({x=1},{x=2});" always "A({},{x=0;});B({x=1},{x=2});"
Line 6177
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6177 always 6177
  "xMACROtype.T=value.1=,{({=" always "xMACROtype.T=value.1=,{({="
  "x = { MACRO( { .type=T, .value=1 } ) }" always "x = { MACRO( { .type=T, .value=1 } ) }"
Line 6179
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6179 always 6179
  "fori10=i{;;( i--" always "fori10=i{;;( i--"
  "for (i=10;i;({i--;}) ) {}" always "for (i=10;i;({i--;}) ) {}"
Line 6180
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6180 always 6180
  "c{1{,{2.3f{,(" always "c{1{,{2.3f{,("
  "c({{}, {1}}, {2.3f});" always "c({{}, {1}}, {2.3f});"
Line 6184
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6184 always 6184
  "todo" always "todo"
  "va_argapvoid((,(*0=" always "va_argapvoid((,(*0="
  "*va_arg(ap, void(**) ()) = 0;" always "*va_arg(ap, void(**) ()) = 0;"
Line 6187
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6187 always 6187
  "name_bytes[bits~unusedBits>>unusedBits<<{=" always "name_bytes[bits~unusedBits>>unusedBits<<{="
  "const uint8_t name_bytes[] = { (~bits >> unusedBits) << unusedBits };" always "const uint8_t name_bytes[] = { (~bits >> unusedBits) << unusedBits };"
Line 6188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6188 always 6188
  "abuf.0{={=" always "abuf.0{={="
  "a = { .buf = { 0 } };" always "a = { .buf = { 0 } };"
Line 6189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6189 always 6189
  "ab2[a.0=b.0=,{a.0=b.0=,{,{=" always "ab2[a.0=b.0=,{a.0=b.0=,{,{="
  "struct AB ab[2] = { { .a=0, .b=0 }, { .a=0, .b=0 } };" always "struct AB ab[2] = { { .a=0, .b=0 }, { .a=0, .b=0 } };"
Line 6190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6190 always 6190
  "tset{=" always "tset{="
  "struct cgroup_taskset tset = {};" always "struct cgroup_taskset tset = {};"
Line 6191
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6191 always 6191
  "s1a&,{2b&,{,{=" always "s1a&,{2b&,{,{="
  "s = { {1, &a}, {2, &b} };" always "s = { {1, &a}, {2, &b} };"
Line 6192
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6192 always 6192
  "s0[L.2[x={=" always "s0[L.2[x={="
  "s = { [0].L[2] = x};" always "s = { [0].L[2] = x};"
Line 6193
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6193 always 6193
  "ac.0={(=" always "ac.0={(="
  "a = (b){.c=0,};" always "a = (b){.c=0,};"
Line 6194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6194 always 6194
  "xB[1y.z.1={(&=,{={=" always "xB[1y.z.1={(&=,{={="
  "x = { [B] = {1, .y = &(struct s) { .z=1 } } };" always "x = { [B] = {1, .y = &(struct s) { .z=1 } } };"
Line 6195
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6195 always 6195
  "xab,c,{=" always "xab,c,{="
  "x={a,b,(c)};" always "x={a,b,(c)};"
Line 6196
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6196 always 6196
  "x0fSa.1=b.2=,c.\"\"=,{(||=" always "x0fSa.1=b.2=,c.\"\"=,{(||="
  "x = 0 || f(S{.a = 1, .b = 2, .c = \"\" });" always "x = 0 || f(S{.a = 1, .b = 2, .c = \"\" });"
Line 6197
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6197 always 6197
  "x0fSa.1{=b.2{,c.\"\"=,{(||=" always "x0fSa.1{=b.2{,c.\"\"=,{(||="
  "x = 0 || f(S{.a = { 1 }, .b { 2 }, .c = \"\" });" always "x = 0 || f(S{.a = { 1 }, .b { 2 }, .c = \"\" });"
Line 6198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6198 always 6198
  "a0\"\"abc12:?,{{,(" always "a0\"\"abc12:?,{{,("
  "a(0, {{\"\", (abc) ? 1 : 2}});" always "a(0, {{\"\", (abc) ? 1 : 2}});"
Line 6199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6199 always 6199
  "a0\'\'abc12:?,{{,(" always "a0\'\'abc12:?,{{,("
  "a(0, {{\'\', (abc) ? 1 : 2}});" always "a(0, {{\'\', (abc) ? 1 : 2}});"
Line 6200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6200 always 6200
  "x12,{34,{,{56,{78,{,{,{=" always "x12,{34,{,{56,{78,{,{,{="
  "x = { { {1,2}, {3,4} }, { {5,6}, {7,8} } };" always "x = { { {1,2}, {3,4} }, { {5,6}, {7,8} } };"
Line 6201
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6201 always 6201
  "Sa.stdmove::s(=b.1=,{(" always "Sa.stdmove::s(=b.1=,{("
  "S({.a = std::move(s), .b = 1})" always "S({.a = std::move(s), .b = 1})"
Line 6204
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6204 always 6204
  "sbar.1{,{(={= forfieldfield++;;(" always "sbar.1{,{(={= forfieldfield++;;("
  "struct S s = {.bar = (struct foo) { 1, { } } };\nvoid f(struct cmd *) { for (; field; field++) {} }" always "struct S s = {.bar = (struct foo) { 1, { } } };\nvoid f(struct cmd *) { for (; field; field++) {} }"
Line 6209
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6209 always 6209
  "ab::c(de::(<=return" always "ab::c(de::(<=return"
  "return a::b(c) <= d<double>::e();" always "return a::b(c) <= d<double>::e();"
Line 6212
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6212 always 6212
  "Class{" always "Class{"
  "Class{};" always "Class{};"
Line 6213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6213 always 6213
  "Class12,{" always "Class12,{"
  "Class{1,2};" always "Class{1,2};"
Line 6214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6214 always 6214
  "Class12,{" always "Class12,{"
  "Class<X>{1,2};" always "Class<X>{1,2};"
Line 6215
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6215 always 6215
  "abc{d:?=" always "abc{d:?="
  "a=b?c{}:d;" always "a=b?c{}:d;"
Line 6216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6216 always 6216
  "abc12,{d:?=" always "abc12,{d:?="
  "a=b?c{1,2}:d;" always "a=b?c{1,2}:d;"
Line 6217
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6217 always 6217
  "abc{d:?=" always "abc{d:?="
  "a=b?c<X>{}:d;" always "a=b?c<X>{}:d;"
Line 6218
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6218 always 6218
  "abc12,{d:?=" always "abc12,{d:?="
  "a=b?c<X>{1,2}:d;" always "a=b?c<X>{1,2}:d;"
Line 6219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6219 always 6219
  "a::12,{" always "a::12,{"
  "::a{1,2};" always "::a{1,2};"
Line 6220
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6220 always 6220
  "Abc({newreturn" always "Abc({newreturn"
  "return new A {b(c)};" always "return new A {b(c)};"
Line 6221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6221 always 6221
  "a{{return" always "a{{return"
  "return{{a}};" always "return{{a}};"
Line 6222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6222 always 6222
  "a{b{,{return" always "a{b{,{return"
  "return{{a},{b}};" always "return{{a},{b}};"
Line 6223
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6223 always 6223
  "stdvector::{{,{return" always "stdvector::{{,{return"
  "return std::vector<std::vector<int> >{{},{}};" always "return std::vector<std::vector<int> >{{},{}};"
Line 6224
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6224 always 6224
  "stdvector::{2{,{return" always "stdvector::{2{,{return"
  "return std::vector<std::vector<int> >{{}, {2}};" always "return std::vector<std::vector<int> >{{}, {2}};"
Line 6225
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6225 always 6225
  "forbstdvector::{{,{:(" always "forbstdvector::{{,{:("
  "for (auto b : std::vector<std::vector<int> >{{},{}});" always "for (auto b : std::vector<std::vector<int> >{{},{}});"
Line 6226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6226 always 6226
  "forbstdvector::{2{,{:(" always "forbstdvector::{2{,{:("
  "for (auto b : std::vector<std::vector<int> >{{}, {2}});" always "for (auto b : std::vector<std::vector<int> >{{}, {2}});"
Line 6227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6227 always 6227
  "abR{{,P(,((" always "abR{{,P(,(("
  "a(b(R{},{},P()));" always "a(b(R{},{},P()));"
Line 6228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6228 always 6228
  "f1{2{,3{,{x,(" always "f1{2{,3{,{x,("
  "f({{1},{2},{3}},x);" always "f({{1},{2},{3}},x);"
Line 6229
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6229 always 6229
  "a1{ b2{" always "a1{ b2{"
  "auto a{1}; auto b{2};" always "auto a{1}; auto b{2};"
Line 6230
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6230 always 6230
  "var1ab::23,{,4ab::56,{,{,{{" always "var1ab::23,{,4ab::56,{,{,{{"
  "auto var{{1,a::b{2,3}}, {4,a::b{5,6}}};" always "auto var{{1,a::b{2,3}}, {4,a::b{5,6}}};"
Line 6231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6231 always 6231
  "var{{,{,{{" always "var{{,{,{{"
  "auto var{ {{},{}}, {} };" always "auto var{ {{},{}}, {} };"
Line 6232
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6232 always 6232
  "fXYabcfalse==CD:?,{,{(" always "fXYabcfalse==CD:?,{,{("
  "f({X, {Y, abc == false ? C : D}});" always "f({X, {Y, abc == false ? C : D}});"
Line 6233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6233 always 6233
  "stdvector::p0[{(return" always "stdvector::p0[{(return"
  "return std::vector<int>({ p[0] });" always "return std::vector<int>({ p[0] });"
Line 6236
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6236 always 6236
  "decltypex((" always "decltypex(("
  "decltype(x)();" always "decltype(x)();"
Line 6237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6237 always 6237
  "decltypex({" always "decltypex({"
  "decltype(x){};" always "decltype(x){};"
Line 6238
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6238 always 6238
  "decltypexy+(yx+(" always "decltypexy+(yx+("
  "decltype(x+y)(y+x);" always "decltype(x+y)(y+x);"
Line 6239
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6239 always 6239
  "decltypexy+(yx+{" always "decltypexy+(yx+{"
  "decltype(x+y){y+x};" always "decltype(x+y){y+x};"
Line 6240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6240 always 6240
  "adecltypeac::(,decltypead::(," always "adecltypeac::(,decltypead::(,"
  "template <typename a> void b(a &, decltype(a::c), decltype(a::d));" always "template <typename a> void b(a &, decltype(a::c), decltype(a::d));"
Line 6244
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6244 always 6244
  "void foo(const std::vector<std::string>& locations = {\"\"}) {\n    for (int i = 0; i <= 123; ++i)\n        x->emplace_back(y);\n}" always "void foo(const std::vector<std::string>& locations = {\"\"}) {\n    for (int i = 0; i <= 123; ++i)\n        x->emplace_back(y);\n}"
Line 6251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6251 always 6251
  "a23+[4+" always "a23+[4+"
  "a[2+3]+4" always "a[2+3]+4"
Line 6252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6252 always 6252
  "a1[0[" always "a1[0["
  "a[1][0]" always "a[1][0]"
Line 6253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6253 always 6253
  "ab0[=" always "ab0[="
  "a=(b)[0];" always "a=(b)[0];"
Line 6254
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6254 always 6254
  "abc.0[=" always "abc.0[="
  "a=b.c[0];" always "a=b.c[0];"
Line 6255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6255 always 6255
  "ab0[1[=" always "ab0[1[="
  "a=b[0][1];" always "a=b[0][1];"
Line 6260
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6260 always 6260
  "a1[\"\"=" always "a1[\"\"="
  "char a[1]=\"\";" always "char a[1]=\"\";"
Line 6261
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6261 always 6261
  "charp*(3[char5[3[new=" always "charp*(3[char5[3[new="
  "char (*p)[3] = new char[5][3];" always "char (*p)[3] = new char[5][3];"
Line 6262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6262 always 6262
  "varp=" always "varp="
  "const int *var = p;" always "const int *var = p;"
Line 6263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6263 always 6263
  "intrp0[*(&" always "intrp0[*(&"
  "int& r(*p[0]);" always "int& r(*p[0]);"
Line 6266
  38 always 38
  = always "using uno::Ref;\nRef<X> r;\nint var(0);"
  "using uno::Ref;\nRef<X> r;\nint var(0);" always "using uno::Ref;\nRef<X> r;\nint var(0);"
Line 6269
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6269 always 6269
  "unoRef:: var0(" always "unoRef:: var0("
  code1 always "using uno::Ref;\nRef<X> r;\nint var(0);"
Line 6271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6271 always 6271
  "vary=" always "vary="
  "std::string var = y;" always "std::string var = y;"
Line 6274
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6274 always 6274
  "decltypex( var1=" always "decltypex( var1="
  "decltype(x) var = 1;" always "decltype(x) var = 1;"
Line 6275
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6275 always 6275
  "a1bdecltypet((>2,(" always "a1bdecltypet((>2,("
  "a(1 > b(decltype(t)), 2);" always "a(1 > b(decltype(t)), 2);"
Line 6276
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6276 always 6276
  "decltypex({01:?" always "decltypex({01:?"
  "decltype(x){} ? 0 : 1;" always "decltype(x){} ? 0 : 1;"
Line 6278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6278 always 6278
  "Tp* Tt* forctp.=;;( tp." always "Tp* Tt* forctp.=;;( tp."
  "struct T { T* p; };\nvoid f(T * t) {\n    for (decltype(t->p) (c) = t->p; ;) {}\n}\n" always "struct T { T* p; };\nvoid f(T * t) {\n    for (decltype(t->p) (c) = t->p; ;) {}\n}\n"
Line 6282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6282 always 6282
  "x0=a, stdtie::a(x=" always "x0=a, stdtie::a(x="
  "int x = 0, a; std::tie(a) = x;\n" always "int x = 0, a; std::tie(a) = x;\n"
Line 6283
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6283 always 6283
  "tmpa*=a*b*=,b*tmp=," always "tmpa*=a*b*=,b*tmp=,"
  "{ ((tmp) = (*a)), ((*a) = (*b)), ((*b) = (tmp)); }" always "{ ((tmp) = (*a)), ((*a) = (*b)), ((*b) = (tmp)); }"
Line 6284
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6284 always 6284
  "a(*v=" always "a(*v="
  "(*(volatile unsigned int *)(a) = (v));" always "(*(volatile unsigned int *)(a) = (v));"
Line 6285
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6285 always 6285
  "i(j=" always "i(j="
  "(int&)(i) = j;" always "(int&)(i) = j;"
Line 6289
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6289 always 6289
  "1a--+" always "1a--+"
  "1 + --a" always "1 + --a"
Line 6290
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6290 always 6290
  "1a--+" always "1a--+"
  "1 + a--" always "1 + a--"
Line 6291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6291 always 6291
  "ab+!" always "ab+!"
  "!(a+b)" always "!(a+b)"
Line 6292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6292 always 6292
  "ab.++" always "ab.++"
  "++a.b;" always "++a.b;"
Line 6293
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6293 always 6293
  "ab.++" always "ab.++"
  "a.b++;" always "a.b++;"
Line 6294
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6294 always 6294
  "ab::++" always "ab::++"
  "a::b++;" always "a::b++;"
Line 6295
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6295 always 6295
  "c5[--*" always "c5[--*"
  "*c[5]--;" always "*c[5]--;"
Line 6296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6296 always 6296
  "xreturn" always "xreturn"
  "return x;" always "return x;"
Line 6297
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6297 always 6297
  "x(throw" always "x(throw"
  ";throw x();" always ";throw x();"
Line 6298
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6298 always 6298
  "a*bc:?return" always "a*bc:?return"
  "return *a ? b : c;" always "return *a ? b : c;"
Line 6299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6299 always 6299
  "xy*--=" always "xy*--="
  "x = -- * y;" always "x = -- * y;"
Line 6300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6300 always 6300
  "x(throw" always "x(throw"
  ";throw (foo) x;" always ";throw (foo) x;"
Line 6303
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6303 always 6303
  "abcd::12,(e/:?=" always "abcd::12,(e/:?="
  "a = b ? c : ::d(1,2) / e;" always "a = b ? c : ::d(1,2) / e;"
Line 6306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6306 always 6306
  "ab4<<c--+1:?" always "ab4<<c--+1:?"
  "a ? (b << 4) + --c : 1" always "a ? (b << 4) + --c : 1"
Line 6307
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6307 always 6307
  "ab4<<c--+1:?" always "ab4<<c--+1:?"
  "a ? (b << 4) + c-- : 1" always "a ? (b << 4) + c-- : 1"
Line 6308
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6308 always 6308
  "ai[i= i--" always "ai[i= i--"
  "a[i]=i; --i;" always "a[i]=i; --i;"
Line 6312
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6312 always 6312
  "1f(+2+" always "1f(+2+"
  "1+f()+2" always "1+f()+2"
Line 6313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6313 always 6313
  "1f2(+3+" always "1f2(+3+"
  "1+f(2)+3" always "1+f(2)+3"
Line 6314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6314 always 6314
  "1f23,(+4+" always "1f23,(+4+"
  "1+f(2,3)+4" always "1+f(2,3)+4"
Line 6315
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6315 always 6315
  "1f2a&,(+" always "1f2a&,(+"
  "1+f(2,&a)" always "1+f(2,&a)"
Line 6316
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6316 always 6316
  "argv[" always "argv["
  "int f(char argv[]);" always "int f(char argv[]);"
Line 6317
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6317 always 6317
  "" always ""
  "extern unsigned f(const char *);" always "extern unsigned f(const char *);"
Line 6318
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6318 always 6318
  "charformat*...," always "charformat*...,"
  "extern void f(const char *format, ...);" always "extern void f(const char *format, ...);"
Line 6319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6319 always 6319
  "int((void," always "int((void,"
  "extern int for_each_commit_graft(int (*)(int*), void *);" always "extern int for_each_commit_graft(int (*)(int*), void *);"
Line 6320
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6320 always 6320
  "for;;(" always "for;;("
  "for (;;) {}" always "for (;;) {}"
Line 6321
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6321 always 6321
  "xsizeofvoid(=" always "xsizeofvoid(="
  "x=sizeof(void*)" always "x=sizeof(void*)"
Line 6322
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6322 always 6322
  "abc{d{,{(=" always "abc{d{,{(="
  "a = b({ c{}, d{} });" always "a = b({ c{}, d{} });"
Line 6323
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6323 always 6323
  "abc;(" always "abc;("
  "a(b;c)" always "a(b;c)"
Line 6324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6324 always 6324
  "x{( forbc;;(" always "x{( forbc;;("
  "x({ for(a;b;c){} });" always "x({ for(a;b;c){} });"
Line 6325
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6325 always 6325
  "PT.(" always "PT.("
  "P->~T();" always "P->~T();"
Line 6329
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6329 always 6329
  "a(3==" always "a(3=="
  "a<int>()==3" always "a<int>()==3"
Line 6330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6330 always 6330
  "ab(== f(" always "ab(== f("
  "a == b<c>(); f();" always "a == b<c>(); f();"
Line 6331
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6331 always 6331
  "static_casta(i[" always "static_casta(i["
  "; static_cast<char*>(a)[i];" always "; static_cast<char*>(a)[i];"
Line 6332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6332 always 6332
  "reinterpret_castreinterpret_castptr(123&(" always "reinterpret_castreinterpret_castptr(123&("
  ";reinterpret_cast<void*>(reinterpret_cast<unsigned>(ptr) & 123);" always ";reinterpret_cast<void*>(reinterpret_cast<unsigned>(ptr) & 123);"
Line 6334
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6334 always 6334
  "bcd.(=" always "bcd.(="
  ";a<int> && b = c->d();" always ";a<int> && b = c->d();"
Line 6337
  "class C : public ::a::b<bool> { };" always "class C : public ::a::b<bool> { };"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6337 always 6337
  false always 0
Line 6338
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6338 always 6338
  "AB: abc+=" always "AB: abc+="
  "struct A : public B<C*> { void f() { a=b+c; } };" always "struct A : public B<C*> { void f() { a=b+c; } };"
Line 6340
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6340 always 6340
  "xfts(=" always "xfts(="
  "; auto x = f(ts...);" always "; auto x = f(ts...);"
Line 6344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6344 always 6344
  "ac&(=" always "ac&(="
  "a = (long)&c;" always "a = (long)&c;"
Line 6345
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6345 always 6345
  "ac*(=" always "ac*(="
  "a = (Foo*)*c;" always "a = (Foo*)*c;"
Line 6346
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6346 always 6346
  "ac-(=" always "ac-(="
  "a = (long)-c;" always "a = (long)-c;"
Line 6347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6347 always 6347
  "ac~(=" always "ac~(="
  "a = (b)~c;" always "a = (b)~c;"
Line 6348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6348 always 6348
  "ac(=" always "ac(="
  "a = (some<strange, type>)c;" always "a = (some<strange, type>)c;"
Line 6349
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6349 always 6349
  "afoveon_avgimage((foveon_avgimage((+=" always "afoveon_avgimage((foveon_avgimage((+="
  "a = foveon_avg(((short(*)[4]) image)) + foveon_avg(((short(*)[4]) image));" always "a = foveon_avg(((short(*)[4]) image)) + foveon_avg(((short(*)[4]) image));"
Line 6350
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6350 always 6350
  "c(40<<return" always "c(40<<return"
  "return (long long)c << 40;" always "return (long long)c << 40;"
Line 6351
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6351 always 6351
  "ab-(=" always "ab-(="
  "a = ((int)-b)" always "a = ((int)-b)"
Line 6352
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6352 always 6352
  "xdouble123(i*(=" always "xdouble123(i*(="
  "x = (int)(double(123)*i);" always "x = (int)(double(123)*i);"
Line 6353
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6353 always 6353
  "ac(=" always "ac(="
  "a = (::b)c;" always "a = (::b)c;"
Line 6354
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6354 always 6354
  "abcd,({(=" always "abcd,({(="
  "a = (s){b(c, d)};" always "a = (s){b(c, d)};"
Line 6355
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6355 always 6355
  "xatoistr({(=" always "xatoistr({(="
  "x = (struct X){atoi(str)};" always "x = (struct X){atoi(str)};"
Line 6356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6356 always 6356
  "xa.0=b.0=,c.0=,{(=" always "xa.0=b.0=,c.0=,{(="
  "x = (struct abc) { .a=0, .b=0, .c=0 };" always "x = (struct abc) { .a=0, .b=0, .c=0 };"
Line 6358
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6358 always 6358
  "yz.(return" always "yz.(return"
  "return (x)(y).z;" always "return (x)(y).z;"
Line 6360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6360 always 6360
  "fon!(restoring01:?,(" always "fon!(restoring01:?,("
  "f((long) !on, restoring ? 0 : 1);" always "f((long) !on, restoring ? 0 : 1);"
Line 6362
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6362 always 6362
  "esi.!(=" always "esi.!(="
  "E e = (E)!s->i;" always "E e = (E)!s->i;"
Line 6364
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6364 always 6364
  "xp(= 12>34:?" always "xp(= 12>34:?"
  "x = ( const char ( * ) [ 1 > 2 ? 3 : 4 ] ) p ;" always "x = ( const char ( * ) [ 1 > 2 ? 3 : 4 ] ) p ;"
Line 6367
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6367 always 6367
  "AB||" always "AB||"
  "(A)||(B)" always "(A)||(B)"
Line 6368
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6368 always 6368
  "abc[1&=" always "abc[1&="
  "a = (b[c]) & 1;" always "a = (b[c]) & 1;"
Line 6369
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6369 always 6369
  "abc::(=" always "abc::(="
  "a = (b::c)();" always "a = (b::c)();"
Line 6371
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6371 always 6371
  "pcharnew(=" always "pcharnew(="
  "p = (void *)(new char);" always "p = (void *)(new char);"
Line 6380
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6380 always 6380
  "x{(a&[( ai=" always "x{(a&[( ai="
  "x([&a](int i){a=i;});" always "x([&a](int i){a=i;});"
Line 6381
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6381 always 6381
  "{([(return 0return" always "{([(return 0return"
  "return [](){ return 0; }();" always "return [](){ return 0; }();"
Line 6384
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6384 always 6384
  "x{([( ai=" always "x{([( ai="
  "x([](int i) noexcept(true) { a=i; });" always "x([](int i) noexcept(true) { a=i; });"
Line 6385
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6385 always 6385
  "x{([( ai=" always "x{([( ai="
  "x([](int i) mutable noexcept(true) { a=i; });" always "x([](int i) mutable noexcept(true) { a=i; });"
Line 6386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6386 always 6386
  "x{([( ai=" always "x{([( ai="
  "x([](int i) const noexcept(true) { a=i; });" always "x([](int i) const noexcept(true) { a=i; });"
Line 6389
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6389 always 6389
  "x{([( ai=" always "x{([( ai="
  "x([](int i) const mutable { a=i; });" always "x([](int i) const mutable { a=i; });"
Line 6390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6390 always 6390
  "x{([( ai=" always "x{([( ai="
  "x([](int i) mutable const { a=i; });" always "x([](int i) mutable const { a=i; });"
Line 6391
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6391 always 6391
  "x{([( ai=" always "x{([( ai="
  "x([](int i) const mutable noexcept(true) { a=i; });" always "x([](int i) const mutable noexcept(true) { a=i; });"
Line 6392
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6392 always 6392
  "x{([( ai=" always "x{([( ai="
  "x([](int i) mutable const noexcept(true) { a=i; });" always "x([](int i) mutable const noexcept(true) { a=i; });"
Line 6395
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6395 always 6395
  "{([(return 0return" always "{([(return 0return"
  "return []() -> int { return 0; }();" always "return []() -> int { return 0; }();"
Line 6396
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6396 always 6396
  "{(something[(return 0return" always "{(something[(return 0return"
  "return [something]() -> int { return 0; }();" always "return [something]() -> int { return 0; }();"
Line 6397
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6397 always 6397
  "{([cd,(return 0return" always "{([cd,(return 0return"
  "return [](int a, int b) -> int { return 0; }(c, d);" always "return [](int a, int b) -> int { return 0; }(c, d);"
Line 6398
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6398 always 6398
  "{([return" always "{([return"
  "return []() -> decltype(0) {};" always "return []() -> decltype(0) {};"
Line 6399
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6399 always 6399
  "x{(&[=" always "x{(&[="
  "x = [&]()->std::string const & {};" always "x = [&]()->std::string const & {};"
Line 6400
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6400 always 6400
  "f{([=" always "f{([="
  "f = []() -> foo* {};" always "f = []() -> foo* {};"
Line 6401
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6401 always 6401
  "f{([=" always "f{([="
  "f = []() -> foo&& {};" always "f = []() -> foo&& {};"
Line 6402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6402 always 6402
  "f{([=" always "f{([="
  "f = [](void) mutable -> foo* {};" always "f = [](void) mutable -> foo* {};"
Line 6403
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6403 always 6403
  "f{([=" always "f{([="
  "f = []() mutable {};" always "f = []() mutable {};"
Line 6405
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6405 always 6405
  "x{([= 0return" always "x{([= 0return"
  "x = [](){return 0; };" always "x = [](){return 0; };"
Line 6407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6407 always 6407
  "ab{&[(= cd=" always "ab{&[(= cd="
  "a = b([&]{c=d;});" always "a = b([&]{c=d;});"
Line 6410
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6410 always 6410
  "f{([( switchx( 1case y++" always "f{([( switchx( 1case y++"
  "f([](){switch(x){case 1:{++y;}}});" always "f([](){switch(x){case 1:{++y;}}});"
Line 6412
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6412 always 6412
  "{(=[{return ab=" always "{(=[{return ab="
  "return {\n  [=]() {\n    a = b;\n  }\n};\n" always "return {\n  [=]() {\n    a = b;\n  }\n};\n"
Line 6418
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6418 always 6418
  "{=[{return ab=" always "{=[{return ab="
  "return {\n  [=] {\n    a = b;\n  }\n};\n" always "return {\n  [=] {\n    a = b;\n  }\n};\n"
Line 6424
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6424 always 6424
  "{(=[{return ab=" always "{(=[{return ab="
  "return {\n  [=]() -> int {\n    a=b;\n  }\n}" always "return {\n  [=]() -> int {\n    a=b;\n  }\n}"
Line 6430
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6430 always 6430
  "{(=[{return ab=" always "{(=[{return ab="
  "return {\n  [=]() mutable -> int {\n    a=b;\n  }\n}" always "return {\n  [=]() mutable -> int {\n    a=b;\n  }\n}"
Line 6438
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6438 always 6438
  "a{(&[= 0return b{(=[= fori0=i10!=i++;;(" always "a{(&[= 0return b{(=[= fori0=i10!=i++;;("
  "a = [&]() -> std::pair<int, int> { return 0; };\nb = [=]() { for (i = 0; i != 10; ++i); };" always "a = [&]() -> std::pair<int, int> { return 0; };\nb = [=]() { for (i = 0; i != 10; ++i); };"
Line 6443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6443 always 6443
  "b{[{ stdunique_ptr::0nullptrnullptr:?{" always "b{[{ stdunique_ptr::0nullptrnullptr:?{"
  "auto b{[] { std::unique_ptr<void *>{0 ? nullptr : nullptr}; }};" always "auto b{[] { std::unique_ptr<void *>{0 ? nullptr : nullptr}; }};"
Line 6444
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6444 always 6444
  "b{[=" always "b{[="
  "void a() { [b = [] { ; }] {}; }" always "void a() { [b = [] { ; }] {}; }"
Line 6447
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6447 always 6447
  "a{b1=[= c2=" always "a{b1=[= c2="
  "a = [b=1]{c=2;};" always "a = [b=1]{c=2;};"
Line 6450
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6450 always 6450
  "void foo() { bar([]() noexcept { if (0) {} }); }" always "void foo() { bar([]() noexcept { if (0) {} }); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6450 always 6450
  false always 0
Line 6453
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6453 always 6453
  "x{([= yz= switchy(" always "x{([= yz= switchy("
  "x = []() -> std::vector<uint8_t> {\n    const auto y = z;\n    switch (y) {}\n};" always "x = []() -> std::vector<uint8_t> {\n    const auto y = z;\n    switch (y) {}\n};"
Line 6461
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6461 always 6461
  "0case" always "0case"
  "case 0:" always "case 0:"
Line 6462
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6462 always 6462
  "12+case" always "12+case"
  "case 1+2:" always "case 1+2:"
Line 6463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6463 always 6463
  "xyz:?case" always "xyz:?case"
  "case (x?y:z):" always "case (x?y:z):"
Line 6464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6464 always 6464
  "switchx( 1case y++ 2case" always "switchx( 1case y++ 2case"
  "switch(x){case 1:{++y;break;case 2:break;}}" always "switch(x){case 1:{++y;break;case 2:break;}}"
Line 6468
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6468 always 6468
  "b(int." always "b(int."
  "class a { auto b() -> int&; };" always "class a { auto b() -> int&; };"
Line 6469
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6469 always 6469
  "b(int." always "b(int."
  "class a { auto b() -> int&&; };" always "class a { auto b() -> int&&; };"
Line 6470
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6470 always 6470
  "b(" always "b("
  "class a { void b() &&; };" always "class a { void b() &&; };"
Line 6471
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6471 always 6471
  "b(" always "b("
  "class a { void b() &; };" always "class a { void b() &; };"
Line 6472
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6472 always 6472
  "b(" always "b("
  "class a { void b() && {} };" always "class a { void b() && {} };"
Line 6473
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6473 always 6473
  "b(" always "b("
  "class a { void b() & {} };" always "class a { void b() & {} };"
Line 6479
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6479 always 6479
  "(return (new A))" always "(return (new A))"
  "return new A;" always "return new A;"
  :: always 1
  Z3 always 1
Line 6480
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6480 always 6480
  "(return (new (( A)))" always "(return (new (( A)))"
  "return new A();" always "return new A();"
  :: always 1
  Z3 always 1
Line 6481
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6481 always 6481
  "(return (new (( A true)))" always "(return (new (( A true)))"
  "return new A(true);" always "return new A(true);"
  :: always 1
  Z3 always 1
Line 6482
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6482 always 6482
  "(return (new (:: A B)))" always "(return (new (:: A B)))"
  "return new A::B;" always "return new A::B;"
  :: always 1
  Z3 always 1
Line 6483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6483 always 6483
  "(return (new (( (:: A B))))" always "(return (new (( (:: A B))))"
  "return new A::B();" always "return new A::B();"
  :: always 1
  Z3 always 1
Line 6484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6484 always 6484
  "(return (new (( (:: A B) true)))" always "(return (new (( (:: A B) true)))"
  "return new A::B(true);" always "return new A::B(true);"
  :: always 1
  Z3 always 1
Line 6485
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6485 always 6485
  "(return (new (:: (:: A B) C)))" always "(return (new (:: (:: A B) C)))"
  "return new A::B::C;" always "return new A::B::C;"
  :: always 1
  Z3 always 1
Line 6486
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6486 always 6486
  "(return (new (( (:: (:: A B) C))))" always "(return (new (( (:: (:: A B) C))))"
  "return new A::B::C();" always "return new A::B::C();"
  :: always 1
  Z3 always 1
Line 6487
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6487 always 6487
  "(return (new (( (:: (:: A B) C) true)))" always "(return (new (( (:: (:: A B) C) true)))"
  "return new A::B::C(true);" always "return new A::B::C(true);"
  :: always 1
  Z3 always 1
Line 6488
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6488 always 6488
  "(return (new (:: (:: (:: A B) C) D)))" always "(return (new (:: (:: (:: A B) C) D)))"
  "return new A::B::C::D;" always "return new A::B::C::D;"
  :: always 1
  Z3 always 1
Line 6489
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6489 always 6489
  "(return (new (( (:: (:: (:: A B) C) D))))" always "(return (new (( (:: (:: (:: A B) C) D))))"
  "return new A::B::C::D();" always "return new A::B::C::D();"
  :: always 1
  Z3 always 1
Line 6490
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6490 always 6490
  "(return (new (( (:: (:: (:: A B) C) D) true)))" always "(return (new (( (:: (:: (:: A B) C) D) true)))"
  "return new A::B::C::D(true);" always "return new A::B::C::D(true);"
  :: always 1
  Z3 always 1
Line 6494
  735 always 735
  = always "#define PTR1 (* (* (* (* (* (* (* (* (* (*\n#define PTR2 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1\n#define PTR3 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2\n#define PTR4 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3\n#define PTR5 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4\n#define PTR6 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5\n\n#define RBR1 ) ) ) ) ) ) ) ) ) )\n#define RBR2 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1\n#define RBR3 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2\n#define RBR4 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3\n#define RBR5 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4\n#define RBR6 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5\n\nint PTR4 q4_var RBR4 = 0;\n"
  "#define PTR1 (* (* (* (* (* (* (* (* (* (*\n#define PTR2 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1\n#define PTR3 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2\n#define PTR4 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3\n#define PTR5 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4\n#define PTR6 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5\n\n#define RBR1 ) ) ) ) ) ) ) ) ) )\n#define RBR2 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1\n#define RBR3 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2\n#define RBR4 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3\n#define RBR5 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4\n#define RBR6 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5\n\nint PTR4 q4_var RBR4 = 0;\n" always "#define PTR1 (* (* (* (* (* (* (* (* (* (*\n#define PTR2 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1\n#define PTR3 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2\n#define PTR4 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3\n#define PTR5 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4\n#define PTR6 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5\n\n#define RBR1 ) ) ) ) ) ) ) ) ) )\n#define RBR2 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1\n#define RBR3 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2\n#define RBR4 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3\n#define RBR5 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4\n#define RBR6 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5\n\nint PTR4 q4_var RBR4 = 0;\n"
Line 6514
  raw_code always "#define PTR1 (* (* (* (* (* (* (* (* (* (*\n#define PTR2 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1 PTR1\n#define PTR3 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2 PTR2\n#define PTR4 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3 PTR3\n#define PTR5 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4 PTR4\n#define PTR6 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5 PTR5\n\n#define RBR1 ) ) ) ) ) ) ) ) ) )\n#define RBR2 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1 RBR1\n#define RBR3 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2 RBR2\n#define RBR4 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3 RBR3\n#define RBR5 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4 RBR4\n#define RBR6 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5 RBR5\n\nint PTR4 q4_var RBR4 = 0;\n"
Line 6515
  filedata always size=0
  configurations always size=0
Line 6518
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6518 always 6518
  ( {lifetime[Object]=(code),!0}
Line 6522
  ( always {!<=-1,!>=2}
Line 6523
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 6524
  code possible {"void foo() { }"@110,"void foo() const { }"@111,"void foo() volatile { }"@112,"void foo() override { }"@113,"void foo() noexcept { }"@114,"void foo() NOEXCEPT { }"@115,"void foo() CONST NOEXCEPT { }"@116,"void foo() const noexcept { }"@117,"void foo() noexcept(true) { }"@118,"void foo() const noexcept(true) { }"@119}
Line 6525
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testtokenize.cpp"@110,"cppcheck-2.8/test/testtokenize.cpp"@111,"cppcheck-2.8/test/testtokenize.cpp"@112,"cppcheck-2.8/test/testtokenize.cpp"@113,"cppcheck-2.8/test/testtokenize.cpp"@114,"cppcheck-2.8/test/testtokenize.cpp"@115,"cppcheck-2.8/test/testtokenize.cpp"@116,"cppcheck-2.8/test/testtokenize.cpp"@117,"cppcheck-2.8/test/testtokenize.cpp"@118,"cppcheck-2.8/test/testtokenize.cpp"@119}
  line inconclusive {6531@110,6532@111,6533@112,6534@113,6535@114,6536@115,6537@116,6538@117,6539@118,6540@119}
  "test.cpp" always "test.cpp"
Line 6527
  return always {!<=-1,!>=2}
  offset inconclusive {3@110,2@126}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 6531
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6531 always 6531
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() { }" always "void foo() { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6531 always 6531
Line 6532
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6532 always 6532
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() const { }" always "void foo() const { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6532 always 6532
Line 6533
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6533 always 6533
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() volatile { }" always "void foo() volatile { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6533 always 6533
Line 6534
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6534 always 6534
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() override { }" always "void foo() override { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6534 always 6534
Line 6535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6535 always 6535
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() noexcept { }" always "void foo() noexcept { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6535 always 6535
Line 6536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6536 always 6536
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() NOEXCEPT { }" always "void foo() NOEXCEPT { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6536 always 6536
Line 6537
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6537 always 6537
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() CONST NOEXCEPT { }" always "void foo() CONST NOEXCEPT { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6537 always 6537
Line 6538
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6538 always 6538
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() const noexcept { }" always "void foo() const noexcept { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6538 always 6538
Line 6539
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6539 always 6539
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() noexcept(true) { }" always "void foo() noexcept(true) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6539 always 6539
Line 6540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6540 always 6540
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() const noexcept(true) { }" always "void foo() const noexcept(true) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6540 always 6540
Line 6541
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6541 always 6541
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() throw() { }" always "void foo() throw() { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6541 always 6541
Line 6542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6542 always 6542
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() THROW() { }" always "void foo() THROW() { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6542 always 6542
Line 6543
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6543 always 6543
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() CONST THROW() { }" always "void foo() CONST THROW() { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6543 always 6543
Line 6544
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6544 always 6544
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() const throw() { }" always "void foo() const throw() { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6544 always 6544
Line 6545
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6545 always 6545
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() throw(int) { }" always "void foo() throw(int) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6545 always 6545
Line 6546
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6546 always 6546
  ( always {!<=-1,!>=2}
  3 always 3
  "void foo() const throw(int) { }" always "void foo() const throw(int) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6546 always 6546
Line 6547
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6547 always 6547
  ( always {!<=-1,!>=2}
  2 always 2
  "foo() : a(1) { }" always "foo() : a(1) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6547 always 6547
Line 6548
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6548 always 6548
  ( always {!<=-1,!>=2}
  2 always 2
  "foo() : a(1), b(2) { }" always "foo() : a(1), b(2) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6548 always 6548
Line 6549
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6549 always 6549
  ( always {!<=-1,!>=2}
  2 always 2
  "foo() : a{1} { }" always "foo() : a{1} { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6549 always 6549
Line 6550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6550 always 6550
  ( always {!<=-1,!>=2}
  2 always 2
  "foo() : a{1}, b{2} { }" always "foo() : a{1}, b{2} { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6550 always 6550
Line 6554
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6554 always 6554
  "class Fred { } ;" always "class Fred { } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6554 always 6554
  "class DLLEXPORT Fred { } ;" always "class DLLEXPORT Fred { } ;"
Line 6555
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6555 always 6555
  "class Fred : Base { } ;" always "class Fred : Base { } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6555 always 6555
  "class Fred FINAL : Base { } ;" always "class Fred FINAL : Base { } ;"
Line 6557
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6557 always 6557
  "struct Fred { } ;" always "struct Fred { } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6557 always 6557
  "struct DLLEXPORT Fred { } ;" always "struct DLLEXPORT Fred { } ;"
  true always 1
  "test.c" always "test.c"
Line 6561
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6561 always 6561
  "sizeof ( sizeof ( 1 ) ) ;" always "sizeof ( sizeof ( 1 ) ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6561 always 6561
  "sizeof sizeof 1;" always "sizeof sizeof 1;"
Line 6562
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6562 always 6562
  "sizeof ( a . b ) + 3 ;" always "sizeof ( a . b ) + 3 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6562 always 6562
  "sizeof a.b+3;" always "sizeof a.b+3;"
Line 6563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6563 always 6563
  "sizeof ( a [ 2 ] . b ) + 3 ;" always "sizeof ( a [ 2 ] . b ) + 3 ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6563 always 6563
  "sizeof a[2].b+3;" always "sizeof a[2].b+3;"
Line 6564
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6564 always 6564
  "f ( 0 , sizeof ( ptr . bar ) ) ;" always "f ( 0 , sizeof ( ptr . bar ) ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6564 always 6564
  "f(0, sizeof ptr->bar );" always "f(0, sizeof ptr->bar );"
Line 6565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6565 always 6565
  "sizeof ( a ) > sizeof ( & main ) ;" always "sizeof ( a ) > sizeof ( & main ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6565 always 6565
  "sizeof a > sizeof &main;" always "sizeof a > sizeof &main;"
Line 6569
  105 always 105
  = always "MY_UNKNOWN_IMP1(IInStream)\nSTDMETHOD(Read)(void *data, UInt32 size, UInt32 *processedSize) { if (ptr); }"
  "MY_UNKNOWN_IMP1(IInStream)\nSTDMETHOD(Read)(void *data, UInt32 size, UInt32 *processedSize) { if (ptr); }" always "MY_UNKNOWN_IMP1(IInStream)\nSTDMETHOD(Read)(void *data, UInt32 size, UInt32 *processedSize) { if (ptr); }"
Line 6571
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6571 always 6571
  code1 always "MY_UNKNOWN_IMP1(IInStream)\nSTDMETHOD(Read)(void *data, UInt32 size, UInt32 *processedSize) { if (ptr); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6571 always 6571
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6571 always 6571
  false always 0
Line 6573
  29 always 29
  = always "void foo() { dostuff(x 0); }"
  "void foo() { dostuff(x 0); }" always "void foo() { dostuff(x 0); }"
Line 6574
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6574 always 6574
  code2 always "void foo() { dostuff(x 0); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6574 always 6574
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6574 always 6574
  false always 0
Line 6576
  28 always 28
  = always "f(\"1\" __stringify(48) \"1\");"
  "f(\"1\" __stringify(48) \"1\");" always "f(\"1\" __stringify(48) \"1\");"
Line 6577
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6577 always 6577
  code3 always "f(\"1\" __stringify(48) \"1\");"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6577 always 6577
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6577 always 6577
  false always 0
Line 6579
  74 always 74
  = always "struct Foo {\n  virtual MACRO(int) f1() {}\n  virtual MACRO(int) f2() {}\n};"
  "struct Foo {\n  virtual MACRO(int) f1() {}\n  virtual MACRO(int) f2() {}\n};" always "struct Foo {\n  virtual MACRO(int) f1() {}\n  virtual MACRO(int) f2() {}\n};"
Line 6583
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6583 always 6583
  code4 always "struct Foo {\n  virtual MACRO(int) f1() {}\n  virtual MACRO(int) f2() {}\n};"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6583 always 6583
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6583 always 6583
  false always 0
Line 6585
  53 always 53
  = always "void foo() {\n  EVALUATE(123, int x=a; int y=b+c;);\n}"
  "void foo() {\n  EVALUATE(123, int x=a; int y=b+c;);\n}" always "void foo() {\n  EVALUATE(123, int x=a; int y=b+c;);\n}"
Line 6588
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6588 always 6588
  code5 always "void foo() {\n  EVALUATE(123, int x=a; int y=b+c;);\n}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6588 always 6588
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6588 always 6588
  false always 0
Line 6590
  33 always 33
  = always "void foo() { dostuff(a, .x=0); }"
  "void foo() { dostuff(a, .x=0); }" always "void foo() { dostuff(a, .x=0); }"
Line 6591
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6591 always 6591
  code6 always "void foo() { dostuff(a, .x=0); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6591 always 6591
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6591 always 6591
  false always 0
Line 6593
  57 always 57
  = always "void foo() { dostuff(ZEND_NUM_ARGS() TSRMLS_CC, x, y); }"
  "void foo() { dostuff(ZEND_NUM_ARGS() TSRMLS_CC, x, y); }" always "void foo() { dostuff(ZEND_NUM_ARGS() TSRMLS_CC, x, y); }"
Line 6594
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6594 always 6594
  code7 always "void foo() { dostuff(ZEND_NUM_ARGS() TSRMLS_CC, x, y); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6594 always 6594
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6594 always 6594
  false always 0
Line 6596
  49 always 49
  = always "void foo() { a = [](int x, decltype(vec) y){}; }"
  "void foo() { a = [](int x, decltype(vec) y){}; }" always "void foo() { a = [](int x, decltype(vec) y){}; }"
Line 6597
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6597 always 6597
  code8 always "void foo() { a = [](int x, decltype(vec) y){}; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6597 always 6597
  false always 0
Line 6599
  46 always 46
  = always "void f(std::exception c) { b(M() c.what()); }"
  "void f(std::exception c) { b(M() c.what()); }" always "void f(std::exception c) { b(M() c.what()); }"
Line 6600
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6600 always 6600
  code9 always "void f(std::exception c) { b(M() c.what()); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6600 always 6600
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6600 always 6600
  false always 0
Line 6602
  55 always 55
  = always "void f(std::exception c) { b(M() M() + N(c.what())); }"
  "void f(std::exception c) { b(M() M() + N(c.what())); }" always "void f(std::exception c) { b(M() M() + N(c.what())); }"
Line 6603
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6603 always 6603
  code10 always "void f(std::exception c) { b(M() M() + N(c.what())); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6603 always 6603
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6603 always 6603
  false always 0
Line 6605
  50 always 50
  = always "struct B { B(B&&) noexcept {} ~B() noexcept {} };"
  "struct B { B(B&&) noexcept {} ~B() noexcept {} };" always "struct B { B(B&&) noexcept {} ~B() noexcept {} };"
Line 6606
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6606 always 6606
  code11 always "struct B { B(B&&) noexcept {} ~B() noexcept {} };"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6606 always 6606
  false always 0
Line 6611
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6611 always 6611
  "try { }" always "try { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6611 always 6611
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6611 always 6611
  "syntax error: keyword 'try' is not allowed in global scope" always "syntax error: keyword 'try' is not allowed in global scope"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6611 always 6611
  false always 0
Line 6612
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6612 always 6612
  "void f() try { } catch (int) { }" always "void f() try { } catch (int) { }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6612 always 6612
  false always 0
Line 6615
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6615 always 6615
  "void f() { do switch (a) {} while (1); }" always "void f() { do switch (a) {} while (1); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6615 always 6615
  false always 0
Line 6616
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6616 always 6616
  "void f() { label: switch (a) {} }" always "void f() { label: switch (a) {} }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6616 always 6616
  false always 0
Line 6617
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6617 always 6617
  "void f() { UNKNOWN_MACRO if (a) {} }" always "void f() { UNKNOWN_MACRO if (a) {} }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6617 always 6617
  false always 0
Line 6618
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6618 always 6618
  "void f() { []() -> int * {}; }" always "void f() { []() -> int * {}; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6618 always 6618
  false always 0
Line 6619
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6619 always 6619
  "void f() { const char* var = \"1\" \"2\"; }" always "void f() { const char* var = \"1\" \"2\"; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6619 always 6619
  false always 0
Line 6621
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6621 always 6621
  "void f() { MACRO(switch); }" always "void f() { MACRO(switch); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6621 always 6621
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6621 always 6621
  false always 0
Line 6622
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6622 always 6622
  "void f() { MACRO(x,switch); }" always "void f() { MACRO(x,switch); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6622 always 6622
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6622 always 6622
  false always 0
Line 6623
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6623 always 6623
  "void foo() { for_chain( if (!done) done = 1); }" always "void foo() { for_chain( if (!done) done = 1); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6623 always 6623
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6623 always 6623
  false always 0
Line 6624
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6624 always 6624
  "void foo() { for_chain( a, b, if (!done) done = 1); }" always "void foo() { for_chain( a, b, if (!done) done = 1); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6624 always 6624
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6624 always 6624
  false always 0
Line 6626
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6626 always 6626
  "void f() { if (retval==){} }" always "void f() { if (retval==){} }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6626 always 6626
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6626 always 6626
  "syntax error: ==)" always "syntax error: ==)"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6626 always 6626
  false always 0
Line 6629
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6629 always 6629
  "void f() { switch (a) int b; }" always "void f() { switch (a) int b; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6629 always 6629
  false always 0
Line 6631
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6631 always 6631
  "S s = { .x=2, .y[0]=3 };" always "S s = { .x=2, .y[0]=3 };"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6631 always 6631
  false always 0
Line 6632
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6632 always 6632
  "S s = { .ab.a=2, .ab.b=3 };" always "S s = { .ab.a=2, .ab.b=3 };"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6632 always 6632
  false always 0
Line 6634
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6634 always 6634
  "extern \"C\" typedef void FUNC();" always "extern \"C\" typedef void FUNC();"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6634 always 6634
  false always 0
Line 6637
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6637 always 6637
  "struct poc {   struct { int d; } port[1]; }; struct poc p = { .port[0] = {.d = 3} };" always "struct poc {   struct { int d; } port[1]; }; struct poc p = { .port[0] = {.d = 3} };"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6637 always 6637
  false always 0
Line 6643
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6643 always 6643
  "void f() { dostuff (x==>y); }" always "void f() { dostuff (x==>y); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6643 always 6643
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6643 always 6643
  "syntax error: == >" always "syntax error: == >"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6643 always 6643
  false always 0
Line 6646
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6646 always 6646
  "S s = { .x { 2 }, .y[0] { 3 } };" always "S s = { .x { 2 }, .y[0] { 3 } };"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6646 always 6646
  false always 0
Line 6648
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6648 always 6648
  "void f() { assert(a==()); }" always "void f() { assert(a==()); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6648 always 6648
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6648 always 6648
  "syntax error: ==()" always "syntax error: ==()"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6648 always 6648
  false always 0
Line 6649
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6649 always 6649
  "void f() { assert(a+()); }" always "void f() { assert(a+()); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6649 always 6649
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6649 always 6649
  "syntax error: +()" always "syntax error: +()"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6649 always 6649
  false always 0
Line 6652
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6652 always 6652
  "void foo() { char *typeof, *value; }" always "void foo() { char *typeof, *value; }"
  false always 0
  "test.c" always "test.c"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6652 always 6652
  false always 0
Line 6657
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6657 always 6657
  "template<\n    typename U,\n    typename std::enable_if<\n        std::is_convertible<U, T>{}>::type* = nullptr>\nvoid foo(U x);\n" always "template<\n    typename U,\n    typename std::enable_if<\n        std::is_convertible<U, T>{}>::type* = nullptr>\nvoid foo(U x);\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6657 always 6657
  false always 0
Line 6664
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6664 always 6664
  "template<class t>\nT f(const T a, const T b) {\n    return a < b ? b : a;\n}\n" always "template<class t>\nT f(const T a, const T b) {\n    return a < b ? b : a;\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6664 always 6664
  false always 0
Line 6670
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6670 always 6670
  "template<class T>\nstruct A {\n    T f(const T a, const T b) {\n        return a < b ? b : a;\n    }\n};\n" always "template<class T>\nstruct A {\n    T f(const T a, const T b) {\n        return a < b ? b : a;\n    }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6670 always 6670
  false always 0
Line 6678
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6678 always 6678
  "const int a = 1;\nconst int b = 2;\ntemplate<class T>\nstruct A {\n    int x = a < b ? b : a;};\n" always "const int a = 1;\nconst int b = 2;\ntemplate<class T>\nstruct A {\n    int x = a < b ? b : a;};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6678 always 6678
  false always 0
Line 6687
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6687 always 6687
  "template<typename F>\nvoid foo(std::enable_if_t<value<F>>* = 0) {}\n" always "template<typename F>\nvoid foo(std::enable_if_t<value<F>>* = 0) {}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6687 always 6687
  false always 0
Line 6691
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6691 always 6691
  "struct a {\n  int c;\n  template <class b> void d(b e) const { c < e ? c : e; }\n};\n" always "struct a {\n  int c;\n  template <class b> void d(b e) const { c < e ? c : e; }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6691 always 6691
  false always 0
Line 6696
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6696 always 6696
  "struct a {\n  int c;\n  template <class b> void d(b e) const { c > e ? c : e; }\n};\n" always "struct a {\n  int c;\n  template <class b> void d(b e) const { c > e ? c : e; }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6696 always 6696
  false always 0
Line 6704
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6704 always 6704
  "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a< b<typename c<d>::g> >;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}\n" always "namespace {\ntemplate <typename> struct a;\ntemplate <typename> struct b {};\n}\nnamespace {\ntemplate <typename> struct c;\ntemplate <typename d> struct e {\n  using f = a< b<typename c<d>::g> >;\n  bool h = f::h;\n};\ntemplate <typename i> using j = typename e<i>::g;\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6704 always 6704
  false always 0
Line 6718
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6718 always 6718
  "template <typename = void> struct a {\n  void c();\n};\nvoid f() {\n  a<> b;\n  b.a<>::c();\n}\n" always "template <typename = void> struct a {\n  void c();\n};\nvoid f() {\n  a<> b;\n  b.a<>::c();\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6718 always 6718
  false always 0
Line 6728
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6728 always 6728
  "template <typename> struct a;\ntemplate <bool> using c = int;\ntemplate <bool b> c<b> d;\ntemplate <> struct a<int> {\ntemplate <typename e> constexpr auto g() { d<0 || e::f>; return 0; }\n};\n" always "template <typename> struct a;\ntemplate <bool> using c = int;\ntemplate <bool b> c<b> d;\ntemplate <> struct a<int> {\ntemplate <typename e> constexpr auto g() { d<0 || e::f>; return 0; }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6728 always 6728
  false always 0
Line 6737
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6737 always 6737
  "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\nnamespace boost {\nusing a::c;\n}\nnamespace d = boost;\nusing d::c;\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n" always "namespace a {\ntemplate <typename b, bool = __is_empty(b) && __is_final(b)> struct c;\n}\nnamespace boost {\nusing a::c;\n}\nnamespace d = boost;\nusing d::c;\ntemplate <typename...> struct e {};\nstatic_assert(sizeof(e<>) == sizeof(e<c<int>, c<int>, int>), \"\");\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6737 always 6737
  false always 0
Line 6750
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6750 always 6750
  "template <int> struct a;\ntemplate <class, class b> using c = typename a<int{b::d}>::e;\ntemplate <class> struct f;\ntemplate <class b> using g = typename f<c<int, b>>::e;\n" always "template <int> struct a;\ntemplate <class, class b> using c = typename a<int{b::d}>::e;\ntemplate <class> struct f;\ntemplate <class b> using g = typename f<c<int, b>>::e;\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6750 always 6750
  false always 0
Line 6757
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6757 always 6757
  "namespace {\ntemplate <class> struct a;\n}\nnamespace {\nnamespace b {\ntemplate <int c> struct B { using B<c / 2>::d; };\n}\ntemplate <class, class> using e = typename b::B<int{}>;\nnamespace b {\ntemplate <class> struct f;\n}\ntemplate <class c> using g = b::f<e<int, c>>;\n}\n" always "namespace {\ntemplate <class> struct a;\n}\nnamespace {\nnamespace b {\ntemplate <int c> struct B { using B<c / 2>::d; };\n}\ntemplate <class, class> using e = typename b::B<int{}>;\nnamespace b {\ntemplate <class> struct f;\n}\ntemplate <class c> using g = b::f<e<int, c>>;\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6757 always 6757
  false always 0
Line 6773
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6773 always 6773
  "template <bool> using a = int;\ntemplate <class b> using aa = a<b::c>;\ntemplate <class...> struct A;\ntemplate <class> struct d;\ntemplate <class... f> using e = typename d<f...>::g;\ntemplate <class> struct h;\ntemplate <class, class... b> using i = typename h<b...>::g;\ntemplate <class f, template <class> class j> using k = typename f::g;\ntemplate <class... b> using l = a<k<A<b...>, aa>::c>;\ntemplate <int> struct m;\ntemplate <class, class n> using o = typename m<int{n::c}>::g;\ntemplate <class> struct p;\ntemplate <class, class n> using q = typename p<o<A<>, n>>::g;\ntemplate <class f, class r, class... b> using c = e<i<q<f, r>, b...>>;\ntemplate <class, class> struct s;\ntemplate <template <class> class t, class... w, template <class> class x,\n          class... u>\nstruct s<t<w...>, x<u...>>;\n" always "template <bool> using a = int;\ntemplate <class b> using aa = a<b::c>;\ntemplate <class...> struct A;\ntemplate <class> struct d;\ntemplate <class... f> using e = typename d<f...>::g;\ntemplate <class> struct h;\ntemplate <class, class... b> using i = typename h<b...>::g;\ntemplate <class f, template <class> class j> using k = typename f::g;\ntemplate <class... b> using l = a<k<A<b...>, aa>::c>;\ntemplate <int> struct m;\ntemplate <class, class n> using o = typename m<int{n::c}>::g;\ntemplate <class> struct p;\ntemplate <class, class n> using q = typename p<o<A<>, n>>::g;\ntemplate <class f, class r, class... b> using c = e<i<q<f, r>, b...>>;\ntemplate <class, class> struct s;\ntemplate <template <class> class t, class... w, template <class> class x,\n          class... u>\nstruct s<t<w...>, x<u...>>;\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6773 always 6773
  false always 0
Line 6794
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6794 always 6794
  "template <typename> struct a;\ntemplate <bool> struct b;\ntemplate <class k, class> using d = typename b<k::c>::e;\ntemplate <class> struct f;\ntemplate <template <class> class, class... g> using i = typename f<g...>::e;\ntemplate <template <class> class h, class... g> using ab = d<i<h, g...>, int>;\ntemplate <template <class> class h, class... g> struct j {\n  template <class... ag> using ah = typename ab<h, ag..., g...>::e;\n};\ntemplate <class> struct F;\nint main() { using T = void (*)(a<j<F, char[]>>); }\n" always "template <typename> struct a;\ntemplate <bool> struct b;\ntemplate <class k, class> using d = typename b<k::c>::e;\ntemplate <class> struct f;\ntemplate <template <class> class, class... g> using i = typename f<g...>::e;\ntemplate <template <class> class h, class... g> using ab = d<i<h, g...>, int>;\ntemplate <template <class> class h, class... g> struct j {\n  template <class... ag> using ah = typename ab<h, ag..., g...>::e;\n};\ntemplate <class> struct F;\nint main() { using T = void (*)(a<j<F, char[]>>); }\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6794 always 6794
  false always 0
Line 6808
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6808 always 6808
  "struct a {\n  typedef int b;\n  operator b();\n};\ntemplate <int> using c = a;\ntemplate <int d> c<d> e;\nauto f = ((e<4> | 0));\n" always "struct a {\n  typedef int b;\n  operator b();\n};\ntemplate <int> using c = a;\ntemplate <int d> c<d> e;\nauto f = ((e<4> | 0));\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6808 always 6808
  false always 0
Line 6817
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6817 always 6817
  "struct a {\n  template <class... b> void c(b... p1) {\n    using d = a;\n    d e = {(p1)...};\n  }\n};\n" always "struct a {\n  template <class... b> void c(b... p1) {\n    using d = a;\n    d e = {(p1)...};\n  }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6817 always 6817
  false always 0
Line 6826
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6826 always 6826
  "template <int> struct a;\ntemplate <long b> using c = a<b>;\ntemplate <long b> c<b> d;\ntemplate <typename> struct e {\n  template <typename... f> void g() const { d<e<f &&...>::h>; }\n};\n" always "template <int> struct a;\ntemplate <long b> using c = a<b>;\ntemplate <long b> c<b> d;\ntemplate <typename> struct e {\n  template <typename... f> void g() const { d<e<f &&...>::h>; }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6826 always 6826
  false always 0
Line 6834
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6834 always 6834
  "struct a {\n  struct b {};\n};\nvoid c(a::b, a::b);\nvoid g(a::b f) { c(f, {a::b{}}); }\ntemplate <class> void h() {\n  int e;\n  for (int d = 0; d < e; d++)\n    ;\n}\n" always "struct a {\n  struct b {};\n};\nvoid c(a::b, a::b);\nvoid g(a::b f) { c(f, {a::b{}}); }\ntemplate <class> void h() {\n  int e;\n  for (int d = 0; d < e; d++)\n    ;\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6834 always 6834
  false always 0
Line 6847
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6847 always 6847
  "void func() {\n    if (std::is_same_v<int, int> || 1)\n        ;\n}\n" always "void func() {\n    if (std::is_same_v<int, int> || 1)\n        ;\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6847 always 6847
  false always 0
Line 6854
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6854 always 6854
  "using a = void *;\nvoid b() {\n  std::unique_ptr<a, void (*)(a *)>(new a(0), [](a *c) {\n    if (c)\n      ;\n  });\n}\n" always "using a = void *;\nvoid b() {\n  std::unique_ptr<a, void (*)(a *)>(new a(0), [](a *c) {\n    if (c)\n      ;\n  });\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6854 always 6854
  false always 0
Line 6863
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6863 always 6863
  "a<b?0:1>()==3;" always "a<b?0:1>()==3;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6863 always 6863
  false always 0
Line 6866
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6866 always 6866
  "struct a {\n  template <class b> a(b);\n};\nstruct c;\nvoid fn1(int, a);\nvoid f() { fn1(0, {a{0}}); }\ntemplate <class> std::vector<c> g() {\n  int d;\n  for (size_t e = 0; e < d; e++)\n    ;\n}\n" always "struct a {\n  template <class b> a(b);\n};\nstruct c;\nvoid fn1(int, a);\nvoid f() { fn1(0, {a{0}}); }\ntemplate <class> std::vector<c> g() {\n  int d;\n  for (size_t e = 0; e < d; e++)\n    ;\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6866 always 6866
  false always 0
Line 6879
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6879 always 6879
  "template <int> struct a;\ntemplate <typename, typename> struct b;\ntemplate <typename c> struct b<c, typename a<c{} && 0>::d> {\n  void e() {\n    if (0) {}\n  }\n};\n" always "template <int> struct a;\ntemplate <typename, typename> struct b;\ntemplate <typename c> struct b<c, typename a<c{} && 0>::d> {\n  void e() {\n    if (0) {}\n  }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6879 always 6879
  false always 0
Line 6888
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6888 always 6888
  "template <std::size_t First, std::size_t... Indices, typename Functor>\nconstexpr void constexpr_for_fold_impl([[maybe_unused]] Functor&& f, std::index_sequence<Indices...>) noexcept {\n    (std::forward<Functor>(f).template operator() < First + Indices > (), ...);\n}\n" always "template <std::size_t First, std::size_t... Indices, typename Functor>\nconstexpr void constexpr_for_fold_impl([[maybe_unused]] Functor&& f, std::index_sequence<Indices...>) noexcept {\n    (std::forward<Functor>(f).template operator() < First + Indices > (), ...);\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6888 always 6888
  false always 0
Line 6895
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6895 always 6895
  "template <typename> constexpr char x[] = \"\";\ntemplate <> constexpr char x<int>[] = \"\";\n" always "template <typename> constexpr char x[] = \"\";\ntemplate <> constexpr char x<int>[] = \"\";\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6895 always 6895
  false always 0
Line 6899
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6899 always 6899
  "struct a {\n  template <class> static void b() {}\n  ~a();\n};\nvoid d() { a::b<int>(); }\n" always "struct a {\n  template <class> static void b() {}\n  ~a();\n};\nvoid d() { a::b<int>(); }\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6899 always 6899
  false always 0
Line 6906
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6906 always 6906
  "using a = char;\nusing c = int;\ntemplate <typename = void> struct d {};\nusing b = c;\ntemplate <> struct d<b> : d<a> {};\ntemplate <> struct d<> : d<a> {};\n" always "using a = char;\nusing c = int;\ntemplate <typename = void> struct d {};\nusing b = c;\ntemplate <> struct d<b> : d<a> {};\ntemplate <> struct d<> : d<a> {};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6906 always 6906
  false always 0
Line 6915
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6915 always 6915
  "namespace x { namespace y { namespace z {}}}" always "namespace x { namespace y { namespace z {}}}"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6915 always 6915
  false always 0
Line 6919
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6919 always 6919
  "auto f(int& i) { return [=, &i] {}; }" always "auto f(int& i) { return [=, &i] {}; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6919 always 6919
  false always 0
Line 6920
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6920 always 6920
  "auto f(int& i) { return [&, i] {}; }" always "auto f(int& i) { return [&, i] {}; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6920 always 6920
  false always 0
Line 6921
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6921 always 6921
  "auto f(int& i) { return [&, i = std::move(i)] {}; }" always "auto f(int& i) { return [&, i = std::move(i)] {}; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6921 always 6921
  false always 0
Line 6922
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6922 always 6922
  "auto f(int& i) { return [=, i = std::move(i)] {}; }" always "auto f(int& i) { return [=, i = std::move(i)] {}; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6922 always 6922
  false always 0
Line 6923
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6923 always 6923
  "struct c {\n  void d() {\n    int a;\n    auto b = [this, a] {};\n  }\n};\n" always "struct c {\n  void d() {\n    int a;\n    auto b = [this, a] {};\n  }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6923 always 6923
  false always 0
Line 6931
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6931 always 6931
  "struct a {\n  template <class b> a(b) {}\n};\nauto c() -> a {\n  return {[] {\n    if (0) {}\n  }};\n}\n" always "struct a {\n  template <class b> a(b) {}\n};\nauto c() -> a {\n  return {[] {\n    if (0) {}\n  }};\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6931 always 6931
  false always 0
Line 6939
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6939 always 6939
  "struct a {\n  template <class b> a(b) {}\n};\nauto c() -> a {\n  return {[]() -> int {\n    if (0) {}\n    return 0;\n  }};\n}\n" always "struct a {\n  template <class b> a(b) {}\n};\nauto c() -> a {\n  return {[]() -> int {\n    if (0) {}\n    return 0;\n  }};\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6939 always 6939
  false always 0
Line 6948
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6948 always 6948
  "struct a {\n  template <class b> a(b) {}\n};\nauto c() -> a {\n  return {[]() mutable -> int {\n    if (0) {}\n    return 0;\n  }};\n}\n" always "struct a {\n  template <class b> a(b) {}\n};\nauto c() -> a {\n  return {[]() mutable -> int {\n    if (0) {}\n    return 0;\n  }};\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6948 always 6948
  false always 0
Line 6958
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6958 always 6958
  "template <typename, typename> struct a;\ntemplate <typename, typename b> void c() {\n  ([]() -> decltype(0) {\n    if (a<b, decltype(0)>::d) {}\n  });\n}\n" always "template <typename, typename> struct a;\ntemplate <typename, typename b> void c() {\n  ([]() -> decltype(0) {\n    if (a<b, decltype(0)>::d) {}\n  });\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6958 always 6958
  false always 0
Line 6966
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6966 always 6966
  "template <typename> struct a;\ntemplate <typename b, typename... c> struct a<b(c...)> {\n  template <typename d> a(d);\n};\nvoid e(\n    int, a<void()> f = [] {});\n" always "template <typename> struct a;\ntemplate <typename b, typename... c> struct a<b(c...)> {\n  template <typename d> a(d);\n};\nvoid e(\n    int, a<void()> f = [] {});\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6966 always 6966
  false always 0
Line 6974
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6974 always 6974
  "void a() {\n  char b[]{};\n  auto c = [](int d) {\n    for (char e = 0; d;) {}\n  };\n}\n" always "void a() {\n  char b[]{};\n  auto c = [](int d) {\n    for (char e = 0; d;) {}\n  };\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6974 always 6974
  false always 0
Line 6981
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6981 always 6981
  "struct a {\n  template <typename b> a(b) {}\n};\na c{[] {\n  if (0) {}\n}};\n" always "struct a {\n  template <typename b> a(b) {}\n};\na c{[] {\n  if (0) {}\n}};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6981 always 6981
  false always 0
Line 6988
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6988 always 6988
  "void a() {\n  [b = [] { ; }] {};\n}\n" always "void a() {\n  [b = [] { ; }] {};\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6988 always 6988
  false always 0
Line 6993
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6993 always 6993
  "struct a {\n  std::vector<int> b;\n};\nvoid c() {\n  a bar;\n  (decltype(bar.b)::value_type){};\n}\n" always "struct a {\n  std::vector<int> b;\n};\nvoid c() {\n  a bar;\n  (decltype(bar.b)::value_type){};\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  6993 always 6993
  false always 0
Line 7002
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7002 always 7002
  "struct a {\n  int b();\n};\nstruct c {\n  bool d() const;\n  a e;\n};\nbool c::d() const {\n  int f = 0;\n  if (!const_cast<a *>(&e)->b()) {}\n  return f;\n}\n" always "struct a {\n  int b();\n};\nstruct c {\n  bool d() const;\n  a e;\n};\nbool c::d() const {\n  int f = 0;\n  if (!const_cast<a *>(&e)->b()) {}\n  return f;\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7002 always 7002
  false always 0
Line 7018
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7018 always 7018
  "class a {\n  void b() && {\n    if (this) {}\n  }\n};\n" always "class a {\n  void b() && {\n    if (this) {}\n  }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7018 always 7018
  false always 0
Line 7023
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7023 always 7023
  "class a {\n  void b() & {\n    if (this) {}\n  }\n};\n" always "class a {\n  void b() & {\n    if (this) {}\n  }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7023 always 7023
  false always 0
Line 7028
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7028 always 7028
  "class a {\n  auto b() && -> void {\n    if (this) {}\n  }\n};\n" always "class a {\n  auto b() && -> void {\n    if (this) {}\n  }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7028 always 7028
  false always 0
Line 7033
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7033 always 7033
  "class a {\n  auto b() & -> void {\n    if (this) {}\n  }\n};\n" always "class a {\n  auto b() & -> void {\n    if (this) {}\n  }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7033 always 7033
  false always 0
Line 7038
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7038 always 7038
  "class a {\n  auto b(int& x) -> int& {\n    if (this) {}\n    return x;\n  }\n};\n" always "class a {\n  auto b(int& x) -> int& {\n    if (this) {}\n    return x;\n  }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7038 always 7038
  false always 0
Line 7044
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7044 always 7044
  "class a {\n  auto b(int& x) -> int&& {\n    if (this) {}\n    return x;\n  }\n};\n" always "class a {\n  auto b(int& x) -> int&& {\n    if (this) {}\n    return x;\n  }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7044 always 7044
  false always 0
Line 7050
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7050 always 7050
  "class a {\n  auto b(int& x) && -> int& {\n    if (this) {}\n    return x;\n  }\n};\n" always "class a {\n  auto b(int& x) && -> int& {\n    if (this) {}\n    return x;\n  }\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7050 always 7050
  false always 0
Line 7057
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7057 always 7057
  "auto f() -> int* {\n  if (0) {}\n  return 0;\n};\n" always "auto f() -> int* {\n  if (0) {}\n  return 0;\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7057 always 7057
  false always 0
Line 7061
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7061 always 7061
  "auto f() -> int** {\n  if (0) {}\n  return 0;\n};\n" always "auto f() -> int** {\n  if (0) {}\n  return 0;\n};\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7061 always 7061
  false always 0
Line 7069
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7069 always 7069
  "void a() {\n  for (auto b : std::vector<std::vector<int>>{{}, {}}) {}\n}\n" always "void a() {\n  for (auto b : std::vector<std::vector<int>>{{}, {}}) {}\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7069 always 7069
  false always 0
Line 7076
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7076 always 7076
  "void execute() {\n    const auto &bias = GEMM_CTX_ARG_STORAGE(bias);\n    auto &c = GEMM_CTX_ARG_STORAGE(c);\n}\n" always "void execute() {\n    const auto &bias = GEMM_CTX_ARG_STORAGE(bias);\n    auto &c = GEMM_CTX_ARG_STORAGE(c);\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7076 always 7076
  false always 0
Line 7083
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7083 always 7083
  "struct A {\n  A( const std::string &name =  );\n};\nA::A( const std::string &name ) { return; }\n" always "struct A {\n  A( const std::string &name =  );\n};\nA::A( const std::string &name ) { return; }\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7083 always 7083
  false always 0
Line 7092
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7092 always 7092
  "class a {\npublic:\n  enum b {};\n};\nstruct c;\ntemplate <class> class d {\n  d(const int &, a::b, double, double);\n  d(const d &);\n};\ntemplate <> d<int>::d(const int &, a::b, double, double);\ntemplate <> d<int>::d(const d &) {}\ntemplate <> d<c>::d(const d &) {}\n" always "class a {\npublic:\n  enum b {};\n};\nstruct c;\ntemplate <class> class d {\n  d(const int &, a::b, double, double);\n  d(const d &);\n};\ntemplate <> d<int>::d(const int &, a::b, double, double);\ntemplate <> d<int>::d(const d &) {}\ntemplate <> d<c>::d(const d &) {}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7092 always 7092
  false always 0
Line 7108
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7108 always 7108
  "void a(X<int> x, typename Y1::Y2<int, A::B::C, 2> y, Z z = []{});" always "void a(X<int> x, typename Y1::Y2<int, A::B::C, 2> y, Z z = []{});"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7108 always 7108
  false always 0
Line 7113
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7113 always 7113
  "static int foo() {\n    zval ref ;\n    p = &(ref).value;\n    return result ;\n}\n" always "static int foo() {\n    zval ref ;\n    p = &(ref).value;\n    return result ;\n}\n"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7113 always 7113
  false always 0
Line 7121
  "" always ""
Line 7124
  = always 1
  true always 1
Line 7127
  & {lifetime[Address]=(s),!0}
  this always !0
Line 7128
  code possible "void f() { DEBUG(x();y()); }"@9
Line 7129
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7129 always 7129
  "test.cpp" always "test.cpp"
Line 7133
  "void f() { DEBUG(x();y()); }" always "void f() { DEBUG(x();y()); }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7133 always 7133
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7133 always 7133
  false always 0
Line 7139
  "" always ""
Line 7141
  = always 1
  true always 1
Line 7143
  73 always 73
  = always "class A {\npublic:\n    enum Type { Null };\n};\nusing V = A;\nV::Type value;"
  "class A {\npublic:\n    enum Type { Null };\n};\nusing V = A;\nV::Type value;" always "class A {\npublic:\n    enum Type { Null };\n};\nusing V = A;\nV::Type value;"
Line 7151
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 7153
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7153 always 7153
  "test.cpp" always "test.cpp"
Line 7157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7157 always 7157
  "" always ""
Line 7161
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7161 always 7161
  "int f() { X return 0; }" always "int f() { X return 0; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7161 always 7161
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7161 always 7161
  false always 0
Line 7165
  106 always 106
  = always "a = const_cast<int>(x);\na = dynamic_cast<int>(x);\na = reinterpret_cast<int>(x);\na = static_cast<int>(x);\n"
  "a = const_cast<int>(x);\na = dynamic_cast<int>(x);\na = reinterpret_cast<int>(x);\na = static_cast<int>(x);\n" always "a = const_cast<int>(x);\na = dynamic_cast<int>(x);\na = reinterpret_cast<int>(x);\na = static_cast<int>(x);\n"
Line 7171
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 7172
  code always "a = const_cast<int>(x);\na = dynamic_cast<int>(x);\na = reinterpret_cast<int>(x);\na = static_cast<int>(x);\n"
Line 7173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7173 always 7173
  "test.cpp" always "test.cpp"
Line 7176
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7176 always 7176
  == always {!<=-1,!>=2}
  "(" always "("
Line 7180
  , always {!<=-1,!>=2}
  checkHeadersFlag always {!<=-1,!>=2}
Line 7182
  "" always ""
Line 7185
  = {!<=-1,!>=2,1@6,0@7}
  checkHeadersFlag {!<=-1,!>=2,1@6,0@7}
Line 7188
  1 always 1
  "test.cpp" always "test.cpp"
Line 7189
  code possible "# 1 \"test.h\"\nstruct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};"@6
Line 7190
  files always size=1
  0 always 0
Line 7195
  filedata always size=0
Line 7197
  nullptr always 0
Line 7201
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 7203
  "" always ""
Line 7210
  114 always 114
  = always "# 1 \"test.h\"\nstruct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};"
  "# 1 \"test.h\"\nstruct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};" always "# 1 \"test.h\"\nstruct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};"
Line 7217
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7217 always 7217
  "\n\n##file 1\n1: struct A {\n2: int a ; a = 1 ;\n3: void f ( ) { g<int> ( 1 ) ; }\n4: void g<int> ( int x ) ;\n5: } ;\n4: void A :: g<int> ( int x ) { a = 2 ; }\n" always "\n\n##file 1\n1: struct A {\n2: int a ; a = 1 ;\n3: void f ( ) { g<int> ( 1 ) ; }\n4: void g<int> ( int x ) ;\n5: } ;\n4: void A :: g<int> ( int x ) { a = 2 ; }\n"
  code always "# 1 \"test.h\"\nstruct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};"
  true always 1
Line 7226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7226 always 7226
  "\n\n##file 1\n\n1:\n|\n4:\n5: ;\n" always "\n\n##file 1\n\n1:\n|\n4:\n5: ;\n"
  code always "# 1 \"test.h\"\nstruct A {\n    int a = 1;\n    void f() { g(1); }\n    template <typename T> void g(T x) { a = 2; }\n};"
  false always 0
Line 7235
  57 always 57
  = always "typename GridView::template Codim<0>::Iterator iterator;"
  "typename GridView::template Codim<0>::Iterator iterator;" always "typename GridView::template Codim<0>::Iterator iterator;"
Line 7236
  47 always 47
  = always "GridView :: Codim < 0 > :: Iterator iterator ;"
  "GridView :: Codim < 0 > :: Iterator iterator ;" always "GridView :: Codim < 0 > :: Iterator iterator ;"
Line 7237
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7237 always 7237
  expected1 always "GridView :: Codim < 0 > :: Iterator iterator ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7237 always 7237
  code1 always "typename GridView::template Codim<0>::Iterator iterator;"
Line 7239
  76 always 76
  = always "typename GridView::template Codim<0>::Iterator it = gv.template begin<0>();"
  "typename GridView::template Codim<0>::Iterator it = gv.template begin<0>();" always "typename GridView::template Codim<0>::Iterator it = gv.template begin<0>();"
Line 7240
  69 always 69
  = always "GridView :: Codim < 0 > :: Iterator it ; it = gv . begin < 0 > ( ) ;"
  "GridView :: Codim < 0 > :: Iterator it ; it = gv . begin < 0 > ( ) ;" always "GridView :: Codim < 0 > :: Iterator it ; it = gv . begin < 0 > ( ) ;"
Line 7241
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7241 always 7241
  expected2 always "GridView :: Codim < 0 > :: Iterator it ; it = gv . begin < 0 > ( ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7241 always 7241
  code2 always "typename GridView::template Codim<0>::Iterator it = gv.template begin<0>();"
Line 7245
  47 always 47
  = always "alignas(float) unsigned char c[sizeof(float)];"
  "alignas(float) unsigned char c[sizeof(float)];" always "alignas(float) unsigned char c[sizeof(float)];"
Line 7246
  39 always 39
  = always "unsigned char c [ sizeof ( float ) ] ;"
  "unsigned char c [ sizeof ( float ) ] ;" always "unsigned char c [ sizeof ( float ) ] ;"
Line 7247
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7247 always 7247
  expected always "unsigned char c [ sizeof ( float ) ] ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7247 always 7247
  code always "alignas(float) unsigned char c[sizeof(float)];"
Line 7251
  42 always 42
  = always "static_assert( alignof( VertexC ) == 4 );"
  "static_assert( alignof( VertexC ) == 4 );" always "static_assert( alignof( VertexC ) == 4 );"
Line 7252
  45 always 45
  = always "static_assert ( alignof ( VertexC ) == 4 ) ;"
  "static_assert ( alignof ( VertexC ) == 4 ) ;" always "static_assert ( alignof ( VertexC ) == 4 ) ;"
Line 7253
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7253 always 7253
  expected always "static_assert ( alignof ( VertexC ) == 4 ) ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7253 always 7253
  code always "static_assert( alignof( VertexC ) == 4 );"
Line 7260
  41 always 41
  = always "generator<int> f() { co_yield start++; }"
  "generator<int> f() { co_yield start++; }" always "generator<int> f() { co_yield start++; }"
Line 7261
  52 always 52
  = always "generator < int > f ( ) { co_yield ( start ++ ) ; }"
  "generator < int > f ( ) { co_yield ( start ++ ) ; }" always "generator < int > f ( ) { co_yield ( start ++ ) ; }"
Line 7262
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7262 always 7262
  expected1 always "generator < int > f ( ) { co_yield ( start ++ ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7262 always 7262
  code1 always "generator<int> f() { co_yield start++; }"
Line 7264
  31 always 31
  = always "task<> f() { co_await foo(); }"
  "task<> f() { co_await foo(); }" always "task<> f() { co_await foo(); }"
Line 7265
  42 always 42
  = always "task < > f ( ) { co_await ( foo ( ) ) ; }"
  "task < > f ( ) { co_await ( foo ( ) ) ; }" always "task < > f ( ) { co_await ( foo ( ) ) ; }"
Line 7266
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7266 always 7266
  expected2 always "task < > f ( ) { co_await ( foo ( ) ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7266 always 7266
  code2 always "task<> f() { co_await foo(); }"
Line 7268
  36 always 36
  = always "generator<int> f() { co_return 7; }"
  "generator<int> f() { co_return 7; }" always "generator<int> f() { co_return 7; }"
Line 7269
  46 always 46
  = always "generator < int > f ( ) { co_return ( 7 ) ; }"
  "generator < int > f ( ) { co_return ( 7 ) ; }" always "generator < int > f ( ) { co_return ( 7 ) ; }"
Line 7270
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7270 always 7270
  expected3 always "generator < int > f ( ) { co_return ( 7 ) ; }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7270 always 7270
  code3 always "generator<int> f() { co_return 7; }"
Line 7277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7277 always 7277
  "; x <=> y ;" always "; x <=> y ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7277 always 7277
  ";x<=>y;" always ";x<=>y;"
Line 7283
  25 always 25
  = always "void f() { if (a;b) {} }"
  "void f() { if (a;b) {} }" always "void f() { if (a;b) {} }"
Line 7284
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7284 always 7284
  "void f ( ) { { a ; if ( b ) { } } }" always "void f ( ) { { a ; if ( b ) { } } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7284 always 7284
  code always "void f() { if (a;b) {} }"
Line 7290
  33 always 33
  = always "void f() { if (a;b) {} else {} }"
  "void f() { if (a;b) {} else {} }" always "void f() { if (a;b) {} else {} }"
Line 7291
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7291 always 7291
  "void f ( ) { { a ; if ( b ) { } else { } } }" always "void f ( ) { { a ; if ( b ) { } else { } } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7291 always 7291
  code always "void f() { if (a;b) {} else {} }"
Line 7297
  29 always 29
  = always "void f() { switch (a;b) {} }"
  "void f() { switch (a;b) {} }" always "void f() { switch (a;b) {} }"
Line 7298
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7298 always 7298
  "void f ( ) { { a ; switch ( b ) { } } }" always "void f ( ) { { a ; switch ( b ) { } } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7298 always 7298
  code always "void f() { switch (a;b) {} }"
Line 7304
  28 always 28
  = always "void f() { for (a;b:c) {} }"
  "void f() { for (a;b:c) {} }" always "void f() { for (a;b:c) {} }"
Line 7305
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7305 always 7305
  "void f ( ) { { a ; for ( b : c ) { } } }" always "void f ( ) { { a ; for ( b : c ) { } } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7305 always 7305
  code always "void f() { for (a;b:c) {} }"
Line 7311
  30 always 30
  = always "void f() { if ([] { ; }) {} }"
  "void f() { if ([] { ; }) {} }" always "void f() { if ([] { ; }) {} }"
Line 7312
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7312 always 7312
  "void f ( ) { if ( [ ] { ; } ) { } }" always "void f ( ) { if ( [ ] { ; } ) { } }"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7312 always 7312
  code always "void f() { if ([] { ; }) {} }"
Line 7317
  27 always 27
  = always "struct S { int a:2 = 0; };"
  "struct S { int a:2 = 0; };" always "struct S { int a:2 = 0; };"
Line 7319
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7319 always 7319
  "struct S { int a ; a = 0 ; } ;" always "struct S { int a ; a = 0 ; } ;"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7319 always 7319
  code always "struct S { int a:2 = 0; };"
Line 7321
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7321 always 7321
  code always "struct S { int a:2 = 0; };"
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7321 always 7321
  "cppcheck-2.8/test/testtokenize.cpp" always "cppcheck-2.8/test/testtokenize.cpp"
  7321 always 7321
  false always 0
