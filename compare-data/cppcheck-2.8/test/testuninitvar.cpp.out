

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741968 expected@var22 !=@expr1073741969 actual@var23 ) {
62: std ::@expr1073741970 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741971 expected@var22 ;
64: std ::@expr1073741972 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741973 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741974 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741975 str (@expr1073741976 ) , actualStr@var26 .@expr1073741977 str (@expr1073741978 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741979 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741980 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741981 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741982 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testuninitvar.cpp

1:
|
32:
33: class TestUninitVar : public TestFixture {
34: public:
35: TestUninitVar ( ) : TestFixture ( "TestUninitVar" ) { }
36:
37: private:
38: Settings settings@var102 ;
39:
40: void run ( ) override {
41: $do ${ $if $(@expr1073741983 settings@var102 .@expr1073741984 library@var103 $.@expr1073741985 $load $(@expr1073741986 $exename@var11 $.@expr1073741987 $c_str $(@expr1073741988 $) $, "std.cfg" $) $.@expr1073741989 $errorcode $!=@expr1073741990 $Library $::@expr1073741991 $ErrorCode $::@expr1073741992 $OK $) ${ $complainMissingLib $(@expr1073741993 "std.cfg" $) $; $return $; $} $} $while $(@expr1073741994 $false $) ;
42:
43: $do ${ $if $(@expr1073741995 $prepareTest $(@expr1073741996 "uninitvar1" $) $) ${ $setVerbose $(@expr1073741997 $false $) $; uninitvar1 $(@expr1073741998 $) $; $} $} $while $(@expr1073741999 $false $) ;
44: $do ${ $if $(@expr1073742000 $prepareTest $(@expr1073742001 "uninitvar_warn_once" $) $) ${ $setVerbose $(@expr1073742002 $false $) $; uninitvar_warn_once $(@expr1073742003 $) $; $} $} $while $(@expr1073742004 $false $) ;
45: $do ${ $if $(@expr1073742005 $prepareTest $(@expr1073742006 "uninitvar_decl" $) $) ${ $setVerbose $(@expr1073742007 $false $) $; uninitvar_decl $(@expr1073742008 $) $; $} $} $while $(@expr1073742009 $false $) ;
46: $do ${ $if $(@expr1073742010 $prepareTest $(@expr1073742011 "uninitvar_bitop" $) $) ${ $setVerbose $(@expr1073742012 $false $) $; uninitvar_bitop $(@expr1073742013 $) $; $} $} $while $(@expr1073742014 $false $) ;
47: $do ${ $if $(@expr1073742015 $prepareTest $(@expr1073742016 "uninitvar_alloc" $) $) ${ $setVerbose $(@expr1073742017 $false $) $; uninitvar_alloc $(@expr1073742018 $) $; $} $} $while $(@expr1073742019 $false $) ;
48: $do ${ $if $(@expr1073742020 $prepareTest $(@expr1073742021 "uninitvar_arrays" $) $) ${ $setVerbose $(@expr1073742022 $false $) $; uninitvar_arrays $(@expr1073742023 $) $; $} $} $while $(@expr1073742024 $false $) ;
49: $do ${ $if $(@expr1073742025 $prepareTest $(@expr1073742026 "uninitvar_class" $) $) ${ $setVerbose $(@expr1073742027 $false $) $; uninitvar_class $(@expr1073742028 $) $; $} $} $while $(@expr1073742029 $false $) ;
50: $do ${ $if $(@expr1073742030 $prepareTest $(@expr1073742031 "uninitvar_enum" $) $) ${ $setVerbose $(@expr1073742032 $false $) $; uninitvar_enum $(@expr1073742033 $) $; $} $} $while $(@expr1073742034 $false $) ;
51: $do ${ $if $(@expr1073742035 $prepareTest $(@expr1073742036 "uninitvar_if" $) $) ${ $setVerbose $(@expr1073742037 $false $) $; uninitvar_if $(@expr1073742038 $) $; $} $} $while $(@expr1073742039 $false $) ;
52: $do ${ $if $(@expr1073742040 $prepareTest $(@expr1073742041 "uninitvar_loops" $) $) ${ $setVerbose $(@expr1073742042 $false $) $; uninitvar_loops $(@expr1073742043 $) $; $} $} $while $(@expr1073742044 $false $) ;
53: $do ${ $if $(@expr1073742045 $prepareTest $(@expr1073742046 "uninitvar_switch" $) $) ${ $setVerbose $(@expr1073742047 $false $) $; uninitvar_switch $(@expr1073742048 $) $; $} $} $while $(@expr1073742049 $false $) ;
54: $do ${ $if $(@expr1073742050 $prepareTest $(@expr1073742051 "uninitvar_references" $) $) ${ $setVerbose $(@expr1073742052 $false $) $; uninitvar_references $(@expr1073742053 $) $; $} $} $while $(@expr1073742054 $false $) ;
55: $do ${ $if $(@expr1073742055 $prepareTest $(@expr1073742056 "uninitvar_return" $) $) ${ $setVerbose $(@expr1073742057 $false $) $; uninitvar_return $(@expr1073742058 $) $; $} $} $while $(@expr1073742059 $false $) ;
56: $do ${ $if $(@expr1073742060 $prepareTest $(@expr1073742061 "uninitvar_assign" $) $) ${ $setVerbose $(@expr1073742062 $false $) $; uninitvar_assign $(@expr1073742063 $) $; $} $} $while $(@expr1073742064 $false $) ;
57: $do ${ $if $(@expr1073742065 $prepareTest $(@expr1073742066 "uninitvar_strncpy" $) $) ${ $setVerbose $(@expr1073742067 $false $) $; uninitvar_strncpy $(@expr1073742068 $) $; $} $} $while $(@expr1073742069 $false $) ;
58: $do ${ $if $(@expr1073742070 $prepareTest $(@expr1073742071 "func_uninit_var" $) $) ${ $setVerbose $(@expr1073742072 $false $) $; func_uninit_var $(@expr1073742073 $) $; $} $} $while $(@expr1073742074 $false $) ;
59: $do ${ $if $(@expr1073742075 $prepareTest $(@expr1073742076 "func_uninit_pointer" $) $) ${ $setVerbose $(@expr1073742077 $false $) $; func_uninit_pointer $(@expr1073742078 $) $; $} $} $while $(@expr1073742079 $false $) ;
60: $do ${ $if $(@expr1073742080 $prepareTest $(@expr1073742081 "uninitvar_typeof" $) $) ${ $setVerbose $(@expr1073742082 $false $) $; uninitvar_typeof $(@expr1073742083 $) $; $} $} $while $(@expr1073742084 $false $) ;
61: $do ${ $if $(@expr1073742085 $prepareTest $(@expr1073742086 "uninitvar_ignore" $) $) ${ $setVerbose $(@expr1073742087 $false $) $; uninitvar_ignore $(@expr1073742088 $) $; $} $} $while $(@expr1073742089 $false $) ;
62: $do ${ $if $(@expr1073742090 $prepareTest $(@expr1073742091 "uninitvar2" $) $) ${ $setVerbose $(@expr1073742092 $false $) $; uninitvar2 $(@expr1073742093 $) $; $} $} $while $(@expr1073742094 $false $) ;
63: $do ${ $if $(@expr1073742095 $prepareTest $(@expr1073742096 "uninitvar3" $) $) ${ $setVerbose $(@expr1073742097 $false $) $; uninitvar3 $(@expr1073742098 $) $; $} $} $while $(@expr1073742099 $false $) ;
64: $do ${ $if $(@expr1073742100 $prepareTest $(@expr1073742101 "uninitvar4" $) $) ${ $setVerbose $(@expr1073742102 $false $) $; uninitvar4 $(@expr1073742103 $) $; $} $} $while $(@expr1073742104 $false $) ;
65: $do ${ $if $(@expr1073742105 $prepareTest $(@expr1073742106 "uninitvar5" $) $) ${ $setVerbose $(@expr1073742107 $false $) $; uninitvar5 $(@expr1073742108 $) $; $} $} $while $(@expr1073742109 $false $) ;
66: $do ${ $if $(@expr1073742110 $prepareTest $(@expr1073742111 "uninitvar2_func" $) $) ${ $setVerbose $(@expr1073742112 $false $) $; uninitvar2_func $(@expr1073742113 $) $; $} $} $while $(@expr1073742114 $false $) ;
67: $do ${ $if $(@expr1073742115 $prepareTest $(@expr1073742116 "uninitvar2_value" $) $) ${ $setVerbose $(@expr1073742117 $false $) $; uninitvar2_value $(@expr1073742118 $) $; $} $} $while $(@expr1073742119 $false $) ;
68: $do ${ $if $(@expr1073742120 $prepareTest $(@expr1073742121 "valueFlowUninit2_value" $) $) ${ $setVerbose $(@expr1073742122 $false $) $; valueFlowUninit2_value $(@expr1073742123 $) $; $} $} $while $(@expr1073742124 $false $) ;
69: $do ${ $if $(@expr1073742125 $prepareTest $(@expr1073742126 "uninitStructMember" $) $) ${ $setVerbose $(@expr1073742127 $false $) $; uninitStructMember $(@expr1073742128 $) $; $} $} $while $(@expr1073742129 $false $) ;
70: $do ${ $if $(@expr1073742130 $prepareTest $(@expr1073742131 "uninitvar2_while" $) $) ${ $setVerbose $(@expr1073742132 $false $) $; uninitvar2_while $(@expr1073742133 $) $; $} $} $while $(@expr1073742134 $false $) ;
71: $do ${ $if $(@expr1073742135 $prepareTest $(@expr1073742136 "uninitvar2_4494" $) $) ${ $setVerbose $(@expr1073742137 $false $) $; uninitvar2_4494 $(@expr1073742138 $) $; $} $} $while $(@expr1073742139 $false $) ;
72: $do ${ $if $(@expr1073742140 $prepareTest $(@expr1073742141 "uninitvar2_malloc" $) $) ${ $setVerbose $(@expr1073742142 $false $) $; uninitvar2_malloc $(@expr1073742143 $) $; $} $} $while $(@expr1073742144 $false $) ;
73: $do ${ $if $(@expr1073742145 $prepareTest $(@expr1073742146 "uninitvar8" $) $) ${ $setVerbose $(@expr1073742147 $false $) $; uninitvar8 $(@expr1073742148 $) $; $} $} $while $(@expr1073742149 $false $) ;
74: $do ${ $if $(@expr1073742150 $prepareTest $(@expr1073742151 "uninitvar9" $) $) ${ $setVerbose $(@expr1073742152 $false $) $; uninitvar9 $(@expr1073742153 $) $; $} $} $while $(@expr1073742154 $false $) ;
75: $do ${ $if $(@expr1073742155 $prepareTest $(@expr1073742156 "uninitvar10" $) $) ${ $setVerbose $(@expr1073742157 $false $) $; uninitvar10 $(@expr1073742158 $) $; $} $} $while $(@expr1073742159 $false $) ;
76: $do ${ $if $(@expr1073742160 $prepareTest $(@expr1073742161 "uninitvar11" $) $) ${ $setVerbose $(@expr1073742162 $false $) $; uninitvar11 $(@expr1073742163 $) $; $} $} $while $(@expr1073742164 $false $) ;
77: $do ${ $if $(@expr1073742165 $prepareTest $(@expr1073742166 "uninitvar12" $) $) ${ $setVerbose $(@expr1073742167 $false $) $; uninitvar12 $(@expr1073742168 $) $; $} $} $while $(@expr1073742169 $false $) ;
78: $do ${ $if $(@expr1073742170 $prepareTest $(@expr1073742171 "uninitvar13" $) $) ${ $setVerbose $(@expr1073742172 $false $) $; uninitvar13 $(@expr1073742173 $) $; $} $} $while $(@expr1073742174 $false $) ;
79: $do ${ $if $(@expr1073742175 $prepareTest $(@expr1073742176 "uninitvar_unconditionalTry" $) $) ${ $setVerbose $(@expr1073742177 $false $) $; uninitvar_unconditionalTry $(@expr1073742178 $) $; $} $} $while $(@expr1073742179 $false $) ;
80: $do ${ $if $(@expr1073742180 $prepareTest $(@expr1073742181 "uninitvar_funcptr" $) $) ${ $setVerbose $(@expr1073742182 $false $) $; uninitvar_funcptr $(@expr1073742183 $) $; $} $} $while $(@expr1073742184 $false $) ;
81: $do ${ $if $(@expr1073742185 $prepareTest $(@expr1073742186 "uninitvar_operator" $) $) ${ $setVerbose $(@expr1073742187 $false $) $; uninitvar_operator $(@expr1073742188 $) $; $} $} $while $(@expr1073742189 $false $) ;
82: $do ${ $if $(@expr1073742190 $prepareTest $(@expr1073742191 "uninitvar_ternaryexpression" $) $) ${ $setVerbose $(@expr1073742192 $false $) $; uninitvar_ternaryexpression $(@expr1073742193 $) $; $} $} $while $(@expr1073742194 $false $) ;
83: $do ${ $if $(@expr1073742195 $prepareTest $(@expr1073742196 "uninitvar_pointertoarray" $) $) ${ $setVerbose $(@expr1073742197 $false $) $; uninitvar_pointertoarray $(@expr1073742198 $) $; $} $} $while $(@expr1073742199 $false $) ;
84: $do ${ $if $(@expr1073742200 $prepareTest $(@expr1073742201 "uninitvar_cpp11ArrayInit" $) $) ${ $setVerbose $(@expr1073742202 $false $) $; uninitvar_cpp11ArrayInit $(@expr1073742203 $) $; $} $} $while $(@expr1073742204 $false $) ;
85: $do ${ $if $(@expr1073742205 $prepareTest $(@expr1073742206 "uninitvar_rangeBasedFor" $) $) ${ $setVerbose $(@expr1073742207 $false $) $; uninitvar_rangeBasedFor $(@expr1073742208 $) $; $} $} $while $(@expr1073742209 $false $) ;
86: $do ${ $if $(@expr1073742210 $prepareTest $(@expr1073742211 "uninitvar_static" $) $) ${ $setVerbose $(@expr1073742212 $false $) $; uninitvar_static $(@expr1073742213 $) $; $} $} $while $(@expr1073742214 $false $) ;
87: $do ${ $if $(@expr1073742215 $prepareTest $(@expr1073742216 "checkExpr" $) $) ${ $setVerbose $(@expr1073742217 $false $) $; checkExpr $(@expr1073742218 $) $; $} $} $while $(@expr1073742219 $false $) ;
88: $do ${ $if $(@expr1073742220 $prepareTest $(@expr1073742221 "trac_4871" $) $) ${ $setVerbose $(@expr1073742222 $false $) $; trac_4871 $(@expr1073742223 $) $; $} $} $while $(@expr1073742224 $false $) ;
89: $do ${ $if $(@expr1073742225 $prepareTest $(@expr1073742226 "syntax_error" $) $) ${ $setVerbose $(@expr1073742227 $false $) $; syntax_error $(@expr1073742228 $) $; $} $} $while $(@expr1073742229 $false $) ;
90: $do ${ $if $(@expr1073742230 $prepareTest $(@expr1073742231 "trac_5970" $) $) ${ $setVerbose $(@expr1073742232 $false $) $; trac_5970 $(@expr1073742233 $) $; $} $} $while $(@expr1073742234 $false $) ;
91: $do ${ $if $(@expr1073742235 $prepareTest $(@expr1073742236 "valueFlowUninitTest" $) $) ${ $setVerbose $(@expr1073742237 $false $) $; valueFlowUninitTest $(@expr1073742238 $) $; $} $} $while $(@expr1073742239 $false $) ;
92: $do ${ $if $(@expr1073742240 $prepareTest $(@expr1073742241 "valueFlowUninitBreak" $) $) ${ $setVerbose $(@expr1073742242 $false $) $; valueFlowUninitBreak $(@expr1073742243 $) $; $} $} $while $(@expr1073742244 $false $) ;
93: $do ${ $if $(@expr1073742245 $prepareTest $(@expr1073742246 "valueFlowUninitStructMembers" $) $) ${ $setVerbose $(@expr1073742247 $false $) $; valueFlowUninitStructMembers $(@expr1073742248 $) $; $} $} $while $(@expr1073742249 $false $) ;
94: $do ${ $if $(@expr1073742250 $prepareTest $(@expr1073742251 "uninitvar_ipa" $) $) ${ $setVerbose $(@expr1073742252 $false $) $; uninitvar_ipa $(@expr1073742253 $) $; $} $} $while $(@expr1073742254 $false $) ;
95: $do ${ $if $(@expr1073742255 $prepareTest $(@expr1073742256 "uninitvar_memberfunction" $) $) ${ $setVerbose $(@expr1073742257 $false $) $; uninitvar_memberfunction $(@expr1073742258 $) $; $} $} $while $(@expr1073742259 $false $) ;
96: $do ${ $if $(@expr1073742260 $prepareTest $(@expr1073742261 "uninitvar_nonmember" $) $) ${ $setVerbose $(@expr1073742262 $false $) $; uninitvar_nonmember $(@expr1073742263 $) $; $} $} $while $(@expr1073742264 $false $) ;
97:
98: $do ${ $if $(@expr1073742265 $prepareTest $(@expr1073742266 "isVariableUsageDeref" $) $) ${ $setVerbose $(@expr1073742267 $false $) $; isVariableUsageDeref $(@expr1073742268 $) $; $} $} $while $(@expr1073742269 $false $) ;
99: $do ${ $if $(@expr1073742270 $prepareTest $(@expr1073742271 "isVariableUsageDerefValueflow" $) $) ${ $setVerbose $(@expr1073742272 $false $) $; isVariableUsageDerefValueflow $(@expr1073742273 $) $; $} $} $while $(@expr1073742274 $false $) ;
100:
101: $do ${ $if $(@expr1073742275 $prepareTest $(@expr1073742276 "uninitvar_memberaccess" $) $) ${ $setVerbose $(@expr1073742277 $false $) $; uninitvar_memberaccess $(@expr1073742278 $) $; $} $} $while $(@expr1073742279 $false $) ;
102:
103:
104: $do ${ $if $(@expr1073742280 $prepareTest $(@expr1073742281 "ctuTest" $) $) ${ $setVerbose $(@expr1073742282 $false $) $; ctuTest $(@expr1073742283 $) $; $} $} $while $(@expr1073742284 $false $) ;
105: }
106:
107:
108: void checkUninitVar_ ( const char * file@var104 , int line@var105 , const char code@var106 [ ] , const char fname@var107 [ 9 ] = "test.cpp" , bool debugwarnings@var108 = false ) {
109:
110: errout@var100 .@expr1073742286 str (@expr1073742287 "" ) ;
111:
112:
113: settings@var102 .@expr464 debugwarnings@var109 =@expr1073742289 debugwarnings@var108 ;
114: Tokenizer tokenizer@var110 (@expr1073742290 &@expr467 settings@var102 , this@expr468 ) ;
115: std ::@expr1073742293 istringstream istr@var111 (@expr1073742294 code@var106 ) ;
116: $assert_ $(@expr1073742295 file@var104 $, line@var105 $, $(@expr1073742296 tokenizer@var110 .@expr1073742297 tokenize (@expr1073742298 istr@var111 , fname@var107 ) $) $) ;
117:
118:
119: CheckUninitVar checkuninitvar@var112 (@expr1073742299 &@expr1073742300 tokenizer@var110 , &@expr467 settings@var102 , this@expr468 ) ;
120: checkuninitvar@var112 .@expr1073742302 check (@expr1073742303 ) ;
121:
122: settings@var102 .@expr464 debugwarnings@var109 =@expr1073742305 false ;
123: settings@var102 .@expr1073742306 certainty@var113 .@expr1073742307 enable (@expr1073742308 Certainty ::@expr1073742309 experimental@expr1073742285 ) ;
124: }
125:
126: void uninitvar1 ( ) {
127:
128:
129:
130: $checkUninitVar_ $(@expr1073742310 "cppcheck-2.8/test/testuninitvar.cpp" $, 130 $, "void foo() {\n    int a;\n    b = c - a;\n}" $)
131:
132:
133: ;
134: $if $(@expr1073742311 $!@expr1073742312 $assertEquals $(@expr1073742313 "cppcheck-2.8/test/testuninitvar.cpp" $, 134 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
135:
136: $checkUninitVar_ $(@expr1073742316 "cppcheck-2.8/test/testuninitvar.cpp" $, 136 $, "void foo() {\n    int a;\n    b = a - c;\n}" $)
137:
138:
139: ;
140: $if $(@expr1073742317 $!@expr1073742318 $assertEquals $(@expr1073742319 "cppcheck-2.8/test/testuninitvar.cpp" $, 140 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
141:
142:
143:
144: $checkUninitVar_ $(@expr1073742322 "cppcheck-2.8/test/testuninitvar.cpp" $, 144 $, "void foo() {\n    const int a;\n    b = c - a;\n}" $)
145:
146:
147: ;
148: $if $(@expr1073742323 $!@expr1073742324 $assertEquals $(@expr1073742325 "cppcheck-2.8/test/testuninitvar.cpp" $, 148 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
149:
150:
151: $checkUninitVar_ $(@expr1073742328 "cppcheck-2.8/test/testuninitvar.cpp" $, 151 $, "void foo() {\n    int *p;\n    realloc(p,10);\n}" $)
152:
153:
154: ;
155: $if $(@expr1073742329 $!@expr1073742330 $assertEquals $(@expr1073742331 "cppcheck-2.8/test/testuninitvar.cpp" $, 155 $, "[test.cpp:3]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
156:
157: $checkUninitVar_ $(@expr1073742334 "cppcheck-2.8/test/testuninitvar.cpp" $, 157 $, "void foo() {\n    char *p = malloc(100);\n    char *tmp = realloc(p,1000);\n    if (!tmp) free(p);\n}" $)
158:
159:
160:
161: ;
162: $if $(@expr1073742335 $!@expr1073742336 $assertEquals $(@expr1073742337 "cppcheck-2.8/test/testuninitvar.cpp" $, 162 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
163:
164: $checkUninitVar_ $(@expr1073742340 "cppcheck-2.8/test/testuninitvar.cpp" $, 164 $, "void foo() {\n    int *p = NULL;\n    realloc(p,10);\n}" $)
165:
166:
167: ;
168: $if $(@expr1073742341 $!@expr1073742342 $assertEquals $(@expr1073742343 "cppcheck-2.8/test/testuninitvar.cpp" $, 168 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
169:
170:
171:
172: $checkUninitVar_ $(@expr1073742346 "cppcheck-2.8/test/testuninitvar.cpp" $, 172 $, "static void foo()\n{\n    Foo *p;\n    p->abcd();\n}" $)
173:
174:
175:
176: ;
177: $if $(@expr1073742347 $!@expr1073742348 $assertEquals $(@expr1073742349 "cppcheck-2.8/test/testuninitvar.cpp" $, 177 $, "[test.cpp:4]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
178:
179:
180: $checkUninitVar_ $(@expr1073742352 "cppcheck-2.8/test/testuninitvar.cpp" $, 180 $, "static void foo()\n{\n    Foo<int> *p;\n    p->abcd();\n}" $)
181:
182:
183:
184: ;
185: $if $(@expr1073742353 $!@expr1073742354 $assertEquals $(@expr1073742355 "cppcheck-2.8/test/testuninitvar.cpp" $, 185 $, "[test.cpp:4]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
186:
187:
188: $checkUninitVar_ $(@expr1073742358 "cppcheck-2.8/test/testuninitvar.cpp" $, 188 $, "void f(Foo *p)\n{\n    int a;\n    p->a = malloc(4 * a);\n}" $)
189:
190:
191:
192: ;
193: $if $(@expr1073742359 $!@expr1073742360 $assertEquals $(@expr1073742361 "cppcheck-2.8/test/testuninitvar.cpp" $, 193 $, "[test.cpp:4]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
194:
195: $checkUninitVar_ $(@expr1073742364 "cppcheck-2.8/test/testuninitvar.cpp" $, 195 $, "static void foo()\n{\n    int *p;\n    delete p;\n}" $)
196:
197:
198:
199: ;
200: $if $(@expr1073742365 $!@expr1073742366 $assertEquals $(@expr1073742367 "cppcheck-2.8/test/testuninitvar.cpp" $, 200 $, "[test.cpp:4]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
201:
202: $checkUninitVar_ $(@expr1073742370 "cppcheck-2.8/test/testuninitvar.cpp" $, 202 $, "static void foo()\n{\n    int *p;\n    delete [] p;\n}" $)
203:
204:
205:
206: ;
207: $if $(@expr1073742371 $!@expr1073742372 $assertEquals $(@expr1073742373 "cppcheck-2.8/test/testuninitvar.cpp" $, 207 $, "[test.cpp:4]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
208:
209: $checkUninitVar_ $(@expr1073742376 "cppcheck-2.8/test/testuninitvar.cpp" $, 209 $, "static void foo()\n{\n    int *p;\n    *p = 135;\n}" $)
210:
211:
212:
213: ;
214: $if $(@expr1073742377 $!@expr1073742378 $assertEquals $(@expr1073742379 "cppcheck-2.8/test/testuninitvar.cpp" $, 214 $, "[test.cpp:4]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
215:
216: $checkUninitVar_ $(@expr1073742382 "cppcheck-2.8/test/testuninitvar.cpp" $, 216 $, "static void foo()\n{\n    int *p;\n    p[0] = 135;\n}" $)
217:
218:
219:
220: ;
221: $if $(@expr1073742383 $!@expr1073742384 $assertEquals $(@expr1073742385 "cppcheck-2.8/test/testuninitvar.cpp" $, 221 $, "[test.cpp:4]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
222:
223: $checkUninitVar_ $(@expr1073742388 "cppcheck-2.8/test/testuninitvar.cpp" $, 223 $, "static void foo()\n{\n    int *x;\n    int y = *x;\n}" $)
224:
225:
226:
227: ;
228: $if $(@expr1073742389 $!@expr1073742390 $assertEquals $(@expr1073742391 "cppcheck-2.8/test/testuninitvar.cpp" $, 228 $, "[test.cpp:4]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
229:
230: $checkUninitVar_ $(@expr1073742394 "cppcheck-2.8/test/testuninitvar.cpp" $, 230 $, "static void foo()\n{\n    int *x;\n    int &y(*x);\n}" $)
231:
232:
233:
234: ;
235: $if $(@expr1073742395 $!@expr1073742396 $assertEquals $(@expr1073742397 "cppcheck-2.8/test/testuninitvar.cpp" $, 235 $, "[test.cpp:4]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
236:
237: $checkUninitVar_ $(@expr1073742400 "cppcheck-2.8/test/testuninitvar.cpp" $, 237 $, "void foo()\n{\n    int x;\n    int *y = &x;\n}" $)
238:
239:
240:
241: ;
242: $if $(@expr1073742401 $!@expr1073742402 $assertEquals $(@expr1073742403 "cppcheck-2.8/test/testuninitvar.cpp" $, 242 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
243:
244: $checkUninitVar_ $(@expr1073742406 "cppcheck-2.8/test/testuninitvar.cpp" $, 244 $, "void foo()\n{\n    int *x;\n    int *&y = x;\n}" $)
245:
246:
247:
248: ;
249: $if $(@expr1073742407 $!@expr1073742408 $assertEquals $(@expr1073742409 "cppcheck-2.8/test/testuninitvar.cpp" $, 249 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
250:
251: $checkUninitVar_ $(@expr1073742412 "cppcheck-2.8/test/testuninitvar.cpp" $, 251 $, "void foo()\n{\n    int x = xyz::x;\n}" $)
252:
253:
254: ;
255: $if $(@expr1073742413 $!@expr1073742414 $assertEquals $(@expr1073742415 "cppcheck-2.8/test/testuninitvar.cpp" $, 255 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
256:
257: $checkUninitVar_ $(@expr1073742418 "cppcheck-2.8/test/testuninitvar.cpp" $, 257 $, "void f()\n{\n    int a;\n    a = 5 + a;\n}" $)
258:
259:
260:
261: ;
262: $if $(@expr1073742419 $!@expr1073742420 $assertEquals $(@expr1073742421 "cppcheck-2.8/test/testuninitvar.cpp" $, 262 $, "[test.cpp:4]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
263:
264: $checkUninitVar_ $(@expr1073742424 "cppcheck-2.8/test/testuninitvar.cpp" $, 264 $, "void f()\n{\n    int a;\n    a++;\n}" $)
265:
266:
267:
268: ;
269: $if $(@expr1073742425 $!@expr1073742426 $assertEquals $(@expr1073742427 "cppcheck-2.8/test/testuninitvar.cpp" $, 269 $, "[test.cpp:4]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
270:
271: $checkUninitVar_ $(@expr1073742430 "cppcheck-2.8/test/testuninitvar.cpp" $, 271 $, "void f()\n{\n    extern int a;\n    a++;\n}" $)
272:
273:
274:
275: ;
276: $if $(@expr1073742431 $!@expr1073742432 $assertEquals $(@expr1073742433 "cppcheck-2.8/test/testuninitvar.cpp" $, 276 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
277:
278:
279: $checkUninitVar_ $(@expr1073742436 "cppcheck-2.8/test/testuninitvar.cpp" $, 279 $, "void f()\n{\n    int a;\n    bar(4 * a);\n}" $)
280:
281:
282:
283: ;
284: $if $(@expr1073742437 $!@expr1073742438 $assertEquals $(@expr1073742439 "cppcheck-2.8/test/testuninitvar.cpp" $, 284 $, "[test.cpp:4]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
285:
286: $checkUninitVar_ $(@expr1073742442 "cppcheck-2.8/test/testuninitvar.cpp" $, 286 $, "static void foo()\n{\n    int i;\n    if (i);\n}" $)
287:
288:
289:
290: ;
291: $if $(@expr1073742443 $!@expr1073742444 $assertEquals $(@expr1073742445 "cppcheck-2.8/test/testuninitvar.cpp" $, 291 $, "[test.cpp:4]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
292:
293: $checkUninitVar_ $(@expr1073742448 "cppcheck-2.8/test/testuninitvar.cpp" $, 293 $, "static void foo()\n{\n    int i;\n    for (int x = 0; i < 10; x++);\n}" $)
294:
295:
296:
297: ;
298: $if $(@expr1073742449 $!@expr1073742450 $assertEquals $(@expr1073742451 "cppcheck-2.8/test/testuninitvar.cpp" $, 298 $, "[test.cpp:4]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
299:
300: $checkUninitVar_ $(@expr1073742454 "cppcheck-2.8/test/testuninitvar.cpp" $, 300 $, "static void foo()\n{\n    int i;\n    for (int x = 0; x < 10; i++);\n}" $)
301:
302:
303:
304: ;
305: $if $(@expr1073742455 $!@expr1073742456 $assertEquals $(@expr1073742457 "cppcheck-2.8/test/testuninitvar.cpp" $, 305 $, "[test.cpp:4]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
306:
307: $checkUninitVar_ $(@expr1073742460 "cppcheck-2.8/test/testuninitvar.cpp" $, 307 $, "static void foo(int x)\n{\n    int i;\n    if (x)\n        i = 0;\n    i++;\n}" $)
308:
|
312:
313: ;
314: $if $(@expr1073742461 $!@expr1073742462 $assertEquals $(@expr1073742463 "cppcheck-2.8/test/testuninitvar.cpp" $, 314 $, "[test.cpp:6]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
315:
316: $checkUninitVar_ $(@expr1073742466 "cppcheck-2.8/test/testuninitvar.cpp" $, 316 $, "static void foo()\n{\n    int ar[10];\n    int i;\n    ar[i] = 0;\n}" $)
317:
|
320:
321: ;
322: $if $(@expr1073742467 $!@expr1073742468 $assertEquals $(@expr1073742469 "cppcheck-2.8/test/testuninitvar.cpp" $, 322 $, "[test.cpp:5]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
323:
324: $checkUninitVar_ $(@expr1073742472 "cppcheck-2.8/test/testuninitvar.cpp" $, 324 $, "static void foo()\n{\n    int x, y;\n    x = (y = 10);\n    int z = y * 2;\n}" , "test.cpp" , false $)
325:
|
328:
329: ;
330: $if $(@expr1073742473 $!@expr1073742474 $assertEquals $(@expr1073742475 "cppcheck-2.8/test/testuninitvar.cpp" $, 330 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
331:
332: $checkUninitVar_ $(@expr1073742478 "cppcheck-2.8/test/testuninitvar.cpp" $, 332 $, "static void foo() {\n    int x, y;\n    x = ((y) = 10);\n}" $)
333:
334:
335: ;
336: $if $(@expr1073742479 $!@expr1073742480 $assertEquals $(@expr1073742481 "cppcheck-2.8/test/testuninitvar.cpp" $, 336 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
337:
338:
339: $checkUninitVar_ $(@expr1073742484 "cppcheck-2.8/test/testuninitvar.cpp" $, 339 $, "void f() {\n    int a;\n    int b = 1;\n    (b += a) = 1;\n}" $)
340:
341:
342:
343: ;
344: $if $(@expr1073742485 $!@expr1073742486 $assertEquals $(@expr1073742487 "cppcheck-2.8/test/testuninitvar.cpp" $, 344 $, "[test.cpp:4]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
345:
346: $checkUninitVar_ $(@expr1073742490 "cppcheck-2.8/test/testuninitvar.cpp" $, 346 $, "int f() {\n    int a,b,c;\n    a = b = c;\n}" , "test.cpp" , false $)
347:
348:
349: ;
350: $if $(@expr1073742491 $!@expr1073742492 $assertEquals $(@expr1073742493 "cppcheck-2.8/test/testuninitvar.cpp" $, 350 $, "[test.cpp:3]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
351:
352: $checkUninitVar_ $(@expr1073742496 "cppcheck-2.8/test/testuninitvar.cpp" $, 352 $, "static void foo()\n{\n    Foo p;\n    p.abcd();\n}" $)
353:
354:
355:
356: ;
357: $if $(@expr1073742497 $!@expr1073742498 $assertEquals $(@expr1073742499 "cppcheck-2.8/test/testuninitvar.cpp" $, 357 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
358:
359: $checkUninitVar_ $(@expr1073742502 "cppcheck-2.8/test/testuninitvar.cpp" $, 359 $, "static void foo()\n{\n    Foo p;\n    int x = p.abcd();\n}" $)
360:
361:
362:
363: ;
364: $if $(@expr1073742503 $!@expr1073742504 $assertEquals $(@expr1073742505 "cppcheck-2.8/test/testuninitvar.cpp" $, 364 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
365:
366:
367:
368: {
369: $checkUninitVar_ $(@expr1073742508 "cppcheck-2.8/test/testuninitvar.cpp" $, 369 $, "void a()\n{\n    A ret;\n    return ret;\n}" $)
370:
371:
372:
373: ;
374: $if $(@expr1073742509 $!@expr1073742510 $assertEquals $(@expr1073742511 "cppcheck-2.8/test/testuninitvar.cpp" $, 374 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
375:
376: $checkUninitVar_ $(@expr1073742514 "cppcheck-2.8/test/testuninitvar.cpp" $, 376 $, "void a()\n{\n    A ret;\n    return ret;\n}\n" , "test.c" $)
377:
|
380:
381: ;
382: $if $(@expr1073742515 $!@expr1073742516 $assertEquals $(@expr1073742517 "cppcheck-2.8/test/testuninitvar.cpp" $, 382 $, "[test.c:4]: (error) Uninitialized variable: ret\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
383: }
384:
385:
386:
387: $checkUninitVar_ $(@expr1073742520 "cppcheck-2.8/test/testuninitvar.cpp" $, 387 $, "void f(float x) {\n  union lf { long l; float f; } u_lf;\n  float hx = (u_lf.f = (x), u_lf.l);\n}" , "test.c" , false $)
388:
389:
390:
391: ;
392: $if $(@expr1073742521 $!@expr1073742522 $assertEquals $(@expr1073742523 "cppcheck-2.8/test/testuninitvar.cpp" $, 392 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
393:
394: $checkUninitVar_ $(@expr1073742526 "cppcheck-2.8/test/testuninitvar.cpp" $, 394 $, "void a()\n{\n    int x[10];\n    int *y = x;\n}" $)
395:
396:
397:
398: ;
399: $if $(@expr1073742527 $!@expr1073742528 $assertEquals $(@expr1073742529 "cppcheck-2.8/test/testuninitvar.cpp" $, 399 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
400:
401: $checkUninitVar_ $(@expr1073742532 "cppcheck-2.8/test/testuninitvar.cpp" $, 401 $, "void a()\n{\n    int x;\n    int *y = &x;\n    *y = 0;\n    x++;\n}" , "test.cpp" , false $)
402:
|
406:
407: ;
408: $if $(@expr1073742533 $!@expr1073742534 $assertEquals $(@expr1073742535 "cppcheck-2.8/test/testuninitvar.cpp" $, 408 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
409:
410: $checkUninitVar_ $(@expr1073742538 "cppcheck-2.8/test/testuninitvar.cpp" $, 410 $, "void a()\n{\n    char x[10], y[10];\n    char *z = x;\n    memset(z, 0, sizeof(x));\n    memcpy(y, x, sizeof(x));\n}" , "test.cpp" , false $)
411:
|
415:
416: ;
417: $if $(@expr1073742539 $!@expr1073742540 $assertEquals $(@expr1073742541 "cppcheck-2.8/test/testuninitvar.cpp" $, 417 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
418:
419:
420: {
421: $checkUninitVar_ $(@expr1073742544 "cppcheck-2.8/test/testuninitvar.cpp" $, 421 $, "int a() {\n    int ret;\n    std::cin >> ret;\n    ret++;\n}" $)
422:
423:
424:
425: ;
426: $if $(@expr1073742545 $!@expr1073742546 $assertEquals $(@expr1073742547 "cppcheck-2.8/test/testuninitvar.cpp" $, 426 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
427:
428: $checkUninitVar_ $(@expr1073742550 "cppcheck-2.8/test/testuninitvar.cpp" $, 428 $, "void f(int b) {\n    int a;\n    std::cin >> b >> a;\n    return a;}" $)
429:
430:
431:
432: ;
433: $if $(@expr1073742551 $!@expr1073742552 $assertEquals $(@expr1073742553 "cppcheck-2.8/test/testuninitvar.cpp" $, 433 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
434:
435: $checkUninitVar_ $(@expr1073742556 "cppcheck-2.8/test/testuninitvar.cpp" $, 435 $, "void f() {\n    int ret[2];\n    std::cin >> ret[0];\n}" $)
436:
437:
438: ;
439: $if $(@expr1073742557 $!@expr1073742558 $assertEquals $(@expr1073742559 "cppcheck-2.8/test/testuninitvar.cpp" $, 439 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
440:
441: $checkUninitVar_ $(@expr1073742562 "cppcheck-2.8/test/testuninitvar.cpp" $, 441 $, "void f(int i) {\n    int a;\n    i >> a;\n}" $)
442:
443:
444: ;
445: $if $(@expr1073742563 $!@expr1073742564 $assertEquals $(@expr1073742565 "cppcheck-2.8/test/testuninitvar.cpp" $, 445 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
446:
447: $checkUninitVar_ $(@expr1073742568 "cppcheck-2.8/test/testuninitvar.cpp" $, 447 $, "int a() {\n    int ret;\n    int a = value >> ret;\n}\n" , "test.c" $)
448:
449:
450:
451: ;
452: $if $(@expr1073742569 $!@expr1073742570 $assertEquals $(@expr1073742571 "cppcheck-2.8/test/testuninitvar.cpp" $, 452 $, "[test.c:3]: (error) Uninitialized variable: ret\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
453:
454: $checkUninitVar_ $(@expr1073742574 "cppcheck-2.8/test/testuninitvar.cpp" $, 454 $, "void foo() {\n    Node node;\n    int x;\n    node[\"abcd\"] >> x;\n}" $)
455:
456:
457:
458: ;
459: $if $(@expr1073742575 $!@expr1073742576 $assertEquals $(@expr1073742577 "cppcheck-2.8/test/testuninitvar.cpp" $, 459 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
460:
461: $checkUninitVar_ $(@expr1073742580 "cppcheck-2.8/test/testuninitvar.cpp" $, 461 $, "int a(FArchive &arc) {\n    int *p;\n    arc << p;\n    return *p;\n}" $)
462:
463:
464:
465: ;
466: $if $(@expr1073742581 $!@expr1073742582 $assertEquals $(@expr1073742583 "cppcheck-2.8/test/testuninitvar.cpp" $, 466 $, "[test.cpp:3]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
467:
468: $checkUninitVar_ $(@expr1073742586 "cppcheck-2.8/test/testuninitvar.cpp" $, 468 $, "void a() {\n    int ret;\n    a = value << ret;\n}\n" , "test.c" $)
469:
470:
471:
472: ;
473: $if $(@expr1073742587 $!@expr1073742588 $assertEquals $(@expr1073742589 "cppcheck-2.8/test/testuninitvar.cpp" $, 473 $, "[test.c:3]: (error) Uninitialized variable: ret\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
474:
475:
476: $checkUninitVar_ $(@expr1073742592 "cppcheck-2.8/test/testuninitvar.cpp" $, 476 $, "int f() {\n    int a;\n    a << 1;\n    return a;\n}" $)
477:
478:
479:
480: ;
481: $if $(@expr1073742593 $!@expr1073742594 $assertEquals $(@expr1073742595 "cppcheck-2.8/test/testuninitvar.cpp" $, 481 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
482:
483:
484: $checkUninitVar_ $(@expr1073742598 "cppcheck-2.8/test/testuninitvar.cpp" $, 484 $, "void f() {\n    int a;\n    std::cout << a;\n}" $)
485:
486:
487: ;
488: $if $(@expr1073742599 $!@expr1073742600 $assertEquals $(@expr1073742601 "cppcheck-2.8/test/testuninitvar.cpp" $, 488 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
489:
490: $checkUninitVar_ $(@expr1073742604 "cppcheck-2.8/test/testuninitvar.cpp" $, 490 $, "void f(std::ostringstream& os) {\n    int a;\n    os << a;\n}" $)
491:
492:
493: ;
494: $if $(@expr1073742605 $!@expr1073742606 $assertEquals $(@expr1073742607 "cppcheck-2.8/test/testuninitvar.cpp" $, 494 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
495:
496: $checkUninitVar_ $(@expr1073742610 "cppcheck-2.8/test/testuninitvar.cpp" $, 496 $, "void f() {\n    int a;\n    std::cout << 1 << a;\n}" $)
497:
498:
499: ;
500: $if $(@expr1073742611 $!@expr1073742612 $assertEquals $(@expr1073742613 "cppcheck-2.8/test/testuninitvar.cpp" $, 500 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
501:
502: $checkUninitVar_ $(@expr1073742616 "cppcheck-2.8/test/testuninitvar.cpp" $, 502 $, "void f(std::ostringstream& os) {\n    int a;\n    os << 1 << a;\n}" $)
503:
504:
505: ;
506: $if $(@expr1073742617 $!@expr1073742618 $assertEquals $(@expr1073742619 "cppcheck-2.8/test/testuninitvar.cpp" $, 506 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
507:
508: {
509:
510: $checkUninitVar_ $(@expr1073742622 "cppcheck-2.8/test/testuninitvar.cpp" $, 510 $, "void f() {\n  char *p = new char[10];\n  std::cout << (void *)p << 1;\n}" $)
511:
512:
513: ;
514: $if $(@expr1073742623 $!@expr1073742624 $assertEquals $(@expr1073742625 "cppcheck-2.8/test/testuninitvar.cpp" $, 514 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
515:
516: $checkUninitVar_ $(@expr1073742628 "cppcheck-2.8/test/testuninitvar.cpp" $, 516 $, "void f() {\n  char p[10];\n  std::cout << (void *)p << 1;\n}" $)
517:
518:
519: ;
520: $if $(@expr1073742629 $!@expr1073742630 $assertEquals $(@expr1073742631 "cppcheck-2.8/test/testuninitvar.cpp" $, 520 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
521:
522: $checkUninitVar_ $(@expr1073742634 "cppcheck-2.8/test/testuninitvar.cpp" $, 522 $, "void f() {\n  char *p = new char[10];\n  std::cout << p << 1;\n}" $)
523:
524:
525: ;
526: $if $(@expr1073742635 $!@expr1073742636 $assertEquals $(@expr1073742637 "cppcheck-2.8/test/testuninitvar.cpp" $, 526 $, "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
527:
528: $checkUninitVar_ $(@expr1073742640 "cppcheck-2.8/test/testuninitvar.cpp" $, 528 $, "void f() {\n  int *p = new int[10];\n  std::cout << p << 1;\n}" $)
529:
530:
531: ;
532: $if $(@expr1073742641 $!@expr1073742642 $assertEquals $(@expr1073742643 "cppcheck-2.8/test/testuninitvar.cpp" $, 532 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
533:
534: $checkUninitVar_ $(@expr1073742646 "cppcheck-2.8/test/testuninitvar.cpp" $, 534 $, "void f() {\n  int i[10];\n  std::cout << i;\n  char c[10];\n  std::cout << c;\n  wchar_t w[10];\n  std::cout << w;\n}" $)
535:
|
540:
541: ;
542: $if $(@expr1073742647 $!@expr1073742648 $assertEquals $(@expr1073742649 "cppcheck-2.8/test/testuninitvar.cpp" $, 542 $, "[test.cpp:5]: (error) Uninitialized variable: c\n[test.cpp:7]: (error) Uninitialized variable: w\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return
543:
544: ; }
545:
546: $checkUninitVar_ $(@expr1073742652 "cppcheck-2.8/test/testuninitvar.cpp" $, 546 $, "void f() {\n  char p[10];\n  std::cout << p << 1;\n}" $)
547:
548:
549: ;
550: $if $(@expr1073742653 $!@expr1073742654 $assertEquals $(@expr1073742655 "cppcheck-2.8/test/testuninitvar.cpp" $, 550 $, "[test.cpp:3]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
551:
552: $checkUninitVar_ $(@expr1073742658 "cppcheck-2.8/test/testuninitvar.cpp" $, 552 $, "void f() {\n  char p[10];\n  std::cout << *p << 1;\n}" $)
553:
554:
555: ;
556: $if $(@expr1073742659 $!@expr1073742660 $assertEquals $(@expr1073742661 "cppcheck-2.8/test/testuninitvar.cpp" $, 556 $, "[test.cpp:3]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
557: }
558: }
559:
560:
561: $checkUninitVar_ $(@expr1073742664 "cppcheck-2.8/test/testuninitvar.cpp" $, 561 $, "void f() {\n  int x;\n  a & x;\n}" $)
562:
563:
564: ;
565: $if $(@expr1073742665 $!@expr1073742666 $assertEquals $(@expr1073742667 "cppcheck-2.8/test/testuninitvar.cpp" $, 565 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
566:
567: $checkUninitVar_ $(@expr1073742670 "cppcheck-2.8/test/testuninitvar.cpp" $, 567 $, "void f(int a) {\n  int x;\n  a & x;\n}" $)
568:
569:
570: ;
571: $if $(@expr1073742671 $!@expr1073742672 $assertEquals $(@expr1073742673 "cppcheck-2.8/test/testuninitvar.cpp" $, 571 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
572:
573: $checkUninitVar_ $(@expr1073742676 "cppcheck-2.8/test/testuninitvar.cpp" $, 573 $, "void f() {\n  int a,b,c;\n  ar & a & b & c;\n}" $)
574:
575:
576: ;
577: $if $(@expr1073742677 $!@expr1073742678 $assertEquals $(@expr1073742679 "cppcheck-2.8/test/testuninitvar.cpp" $, 577 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
578:
579: $checkUninitVar_ $(@expr1073742682 "cppcheck-2.8/test/testuninitvar.cpp" $, 579 $, "void a() {\n    int x;\n    asm();\n    x++;\n}" $)
580:
581:
582:
583: ;
584: $if $(@expr1073742683 $!@expr1073742684 $assertEquals $(@expr1073742685 "cppcheck-2.8/test/testuninitvar.cpp" $, 584 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
585:
586: $checkUninitVar_ $(@expr1073742688 "cppcheck-2.8/test/testuninitvar.cpp" $, 586 $, "void a()\n{\n    int x[10];\n    struct xyz xyz1 = { .x = x };\n}" $)
587:
588:
589:
590: ;
591: $if $(@expr1073742689 $!@expr1073742690 $assertEquals $(@expr1073742691 "cppcheck-2.8/test/testuninitvar.cpp" $, 591 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
592:
593: $checkUninitVar_ $(@expr1073742694 "cppcheck-2.8/test/testuninitvar.cpp" $, 593 $, "void a()\n{\n    struct S *s;\n    s->x = 0;\n}" $)
594:
595:
596:
597: ;
598: $if $(@expr1073742695 $!@expr1073742696 $assertEquals $(@expr1073742697 "cppcheck-2.8/test/testuninitvar.cpp" $, 598 $, "[test.cpp:4]: (error) Uninitialized variable: s\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
599:
600: $checkUninitVar_ $(@expr1073742700 "cppcheck-2.8/test/testuninitvar.cpp" $, 600 $, "void foo()\n{\n   char *buf = malloc(100);\n   struct ABC *abc = buf;\n}" $)
601:
602:
603:
604: ;
605: $if $(@expr1073742701 $!@expr1073742702 $assertEquals $(@expr1073742703 "cppcheck-2.8/test/testuninitvar.cpp" $, 605 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
606:
607: $checkUninitVar_ $(@expr1073742706 "cppcheck-2.8/test/testuninitvar.cpp" $, 607 $, "class Fred {\npublic:\n    FILE *f;\n    ~Fred();\n}\nFred::~Fred()\n{\n    fclose(f);\n}" $)
608:
|
614:
615: ;
616: $if $(@expr1073742707 $!@expr1073742708 $assertEquals $(@expr1073742709 "cppcheck-2.8/test/testuninitvar.cpp" $, 616 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
617:
618: $checkUninitVar_ $(@expr1073742712 "cppcheck-2.8/test/testuninitvar.cpp" $, 618 $, "void f()\n{\n    int c;\n    ab(sizeof(xyz), &c);\n    if (c);\n}" $)
619:
|
622:
623: ;
624: $if $(@expr1073742713 $!@expr1073742714 $assertEquals $(@expr1073742715 "cppcheck-2.8/test/testuninitvar.cpp" $, 624 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
625:
626: $checkUninitVar_ $(@expr1073742718 "cppcheck-2.8/test/testuninitvar.cpp" $, 626 $, "void f()\n{\n    int c;\n    a = (f2(&c));\n    c++;\n}" $)
627:
|
630:
631: ;
632: $if $(@expr1073742719 $!@expr1073742720 $assertEquals $(@expr1073742721 "cppcheck-2.8/test/testuninitvar.cpp" $, 632 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
633:
634: $checkUninitVar_ $(@expr1073742724 "cppcheck-2.8/test/testuninitvar.cpp" $, 634 $, "void f(int a)\n{\n    if (a) {\n        char *p;\n        *p = 0;\n    }\n}" $)
635:
|
639:
640: ;
641: $if $(@expr1073742725 $!@expr1073742726 $assertEquals $(@expr1073742727 "cppcheck-2.8/test/testuninitvar.cpp" $, 641 $, "[test.cpp:5]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
642:
643:
644: $checkUninitVar_ $(@expr1073742730 "cppcheck-2.8/test/testuninitvar.cpp" $, 644 $, "void f()\n{\n    int c;\n    c += 2;\n}" $)
645:
646:
647:
648: ;
649: $if $(@expr1073742731 $!@expr1073742732 $assertEquals $(@expr1073742733 "cppcheck-2.8/test/testuninitvar.cpp" $, 649 $, "[test.cpp:4]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
650:
651: $checkUninitVar_ $(@expr1073742736 "cppcheck-2.8/test/testuninitvar.cpp" $, 651 $, "void f()\n{\n    int a[10];\n    a[0] = 10 - a[1];\n}" $)
652:
653:
654:
655: ;
656: $if $(@expr1073742737 $!@expr1073742738 $assertEquals $(@expr1073742739 "cppcheck-2.8/test/testuninitvar.cpp" $, 656 $, "[test.cpp:4]: (error) Uninitialized variable: a[1]\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
657:
658:
659: $checkUninitVar_ $(@expr1073742742 "cppcheck-2.8/test/testuninitvar.cpp" $, 659 $, "void foo(int x)\n{\n    long b;\n    if (g()) {\n        b =2;\n        goto found;\n    }\n\n    return;\n\nfound:\n    int a = b;\n}" , "test.cpp" , false $)
660:
|
670:
671: ;
672: $if $(@expr1073742743 $!@expr1073742744 $assertEquals $(@expr1073742745 "cppcheck-2.8/test/testuninitvar.cpp" $, 672 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
673:
674: $checkUninitVar_ $(@expr1073742748 "cppcheck-2.8/test/testuninitvar.cpp" $, 674 $, "int foo()\n{\n    jmp_buf env;\n    int a;\n    int val = setjmp(env);\n    if(val)\n        return a;\n    a = 1;\n    longjmp(env, 1);\n}" $)
675:
|
682:
683: ;
684: $if $(@expr1073742749 $!@expr1073742750 $assertEquals $(@expr1073742751 "cppcheck-2.8/test/testuninitvar.cpp" $, 684 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
685:
686:
687: $checkUninitVar_ $(@expr1073742754 "cppcheck-2.8/test/testuninitvar.cpp" $, 687 $, "int foo()\n{\n  int retval;\n  if (condition) {\n    for12(1,2) { }\n    retval = 1;\n  }\n  else\n    retval = 2;\n  return retval;\n}" $)
688:
|
696:
697: ;
698: $if $(@expr1073742755 $!@expr1073742756 $assertEquals $(@expr1073742757 "cppcheck-2.8/test/testuninitvar.cpp" $, 698 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
699:
700: $checkUninitVar_ $(@expr1073742760 "cppcheck-2.8/test/testuninitvar.cpp" $, 700 $, "int foo()\n{\n    int i;\n    goto exit;\n    i++;\nexit:\n}" , "test.cpp" , false $)
701:
|
705:
706: ;
707: $if $(@expr1073742761 $!@expr1073742762 $assertEquals $(@expr1073742763 "cppcheck-2.8/test/testuninitvar.cpp" $, 707 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
708:
709: $checkUninitVar_ $(@expr1073742766 "cppcheck-2.8/test/testuninitvar.cpp" $, 709 $, "int foo() {\n    int x,y=0;\nagain:\n    if (y) return x;\n    x = a;\n    y = 1;\n    goto again;\n}" , "test.c" , false $)
710:
|
715:
716: ;
717: $if $(@expr1073742767 $!@expr1073742768 $assertEquals $(@expr1073742769 "cppcheck-2.8/test/testuninitvar.cpp" $, 717 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
718:
719:
720: $checkUninitVar_ $(@expr1073742772 "cppcheck-2.8/test/testuninitvar.cpp" $, 720 $, "MachineLoopRange *MachineLoopRanges::getLoopRange(const MachineLoop *Loop) {\n  MachineLoopRange *&Range = Cache[Loop];\n  if (!Range)\n    Range = new MachineLoopRange(Loop, Allocator, *Indexes);\n  return Range;\n}" $)
721:
|
724:
725: ;
726: $if $(@expr1073742773 $!@expr1073742774 $assertEquals $(@expr1073742775 "cppcheck-2.8/test/testuninitvar.cpp" $, 726 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
727:
728:
729: $checkUninitVar_ $(@expr1073742778 "cppcheck-2.8/test/testuninitvar.cpp" $, 729 $, "int f(int x)  {\n    int iter;\n    {\n        union\n        {\n            int asInt;\n            double asDouble;\n        };\n\n        iter = x;\n    }\n    return 1 + iter;\n}" , "test.cpp" , false $)
730:
|
740:
741: ;
742: $if $(@expr1073742779 $!@expr1073742780 $assertEquals $(@expr1073742781 "cppcheck-2.8/test/testuninitvar.cpp" $, 742 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
743:
744:
745: $checkUninitVar_ $(@expr1073742784 "cppcheck-2.8/test/testuninitvar.cpp" $, 745 $, "int f() {\n    int i = 0;\n    int j{ i };\n    return j;\n}" $)
746:
747:
748:
749: ;
750: $if $(@expr1073742785 $!@expr1073742786 $assertEquals $(@expr1073742787 "cppcheck-2.8/test/testuninitvar.cpp" $, 750 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
751:
752:
753: $checkUninitVar_ $(@expr1073742790 "cppcheck-2.8/test/testuninitvar.cpp" $, 753 $, "float foo() {\n  float source[2] = {3.1, 3.1};\n  float (*sink)[2] = &source;\n  return (*sink)[0];\n}" $)
754:
755:
756:
757: ;
758: $if $(@expr1073742791 $!@expr1073742792 $assertEquals $(@expr1073742793 "cppcheck-2.8/test/testuninitvar.cpp" $, 758 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
759:
760:
761: $checkUninitVar_ $(@expr1073742796 "cppcheck-2.8/test/testuninitvar.cpp" $, 761 $, "void f(void)\n{\n    int x;\n    int z = (x) & ~__round_mask(1, 1);\n}" $)
762:
763:
764:
765: ;
766: $if $(@expr1073742797 $!@expr1073742798 $assertEquals $(@expr1073742799 "cppcheck-2.8/test/testuninitvar.cpp" $, 766 $, "[test.cpp:4]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
767:
768: $checkUninitVar_ $(@expr1073742802 "cppcheck-2.8/test/testuninitvar.cpp" $, 768 $, "void f(void)\n{\n    int x;\n    int z = (x) | ~__round_mask(1, 1);\n}" $)
769:
770:
771:
772: ;
773: $if $(@expr1073742803 $!@expr1073742804 $assertEquals $(@expr1073742805 "cppcheck-2.8/test/testuninitvar.cpp" $, 773 $, "[test.cpp:4]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
774:
775: $checkUninitVar_ $(@expr1073742808 "cppcheck-2.8/test/testuninitvar.cpp" $, 775 $, "int __round_mask(int, int);\nvoid f(void)\n{\n    int x;\n    int* z = &x;\n}" $)
776:
|
779:
780: ;
781: $if $(@expr1073742809 $!@expr1073742810 $assertEquals $(@expr1073742811 "cppcheck-2.8/test/testuninitvar.cpp" $, 781 $, "" $, errout@var100 .@expr490 str (@expr491 ) $) $) { $return ; }
782: }
783:
784: void uninitvar_warn_once ( ) {
785:
786:
787: $checkUninitVar_ $(@expr1073742814 "cppcheck-2.8/test/testuninitvar.cpp" $, 787 $, "void f() {\n  int x;\n  a = x;\n  b = x;\n}" $)
788:
789:
790:
791: ;
792: $if $(@expr1073742815 $!@expr1073742816 $assertEquals $(@expr1073742817 "cppcheck-2.8/test/testuninitvar.cpp" $, 792 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr1073742818 str (@expr1073742819 ) $) $) { $return ; }
793: }
794:
795:
796: void uninitvar_decl ( ) {
797: const char code@var114 [@expr1073742820 38 ] =@expr1073742821 "void f() {\n    dfs a;\n    return a;\n}"
798:
799:
800: ;
801:
802:
803: $checkUninitVar_ $(@expr1073742822 "cppcheck-2.8/test/testuninitvar.cpp" $, 803 $, code@var114 , "test.cpp" $) ;
804: $if $(@expr1073742823 $!@expr1073742824 $assertEquals $(@expr1073742825 "cppcheck-2.8/test/testuninitvar.cpp" $, 804 $, "" $, errout@var100 .@expr1002 str (@expr1003 ) $) $) { $return ; }
805:
806:
807: $checkUninitVar_ $(@expr1073742828 "cppcheck-2.8/test/testuninitvar.cpp" $, 807 $, code@var114 , "test.c" $) ;
808: $if $(@expr1073742829 $!@expr1073742830 $assertEquals $(@expr1073742831 "cppcheck-2.8/test/testuninitvar.cpp" $, 808 $, "[test.c:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr1002 str (@expr1003 ) $) $) { $return ; }
809:
810: const char code2@var115 [@expr1073742834 70 ] =@expr1073742835 "struct AB { int a,b; };\nvoid f() {\n    struct AB ab;\n    return ab;\n}"
811:
812:
813:
814: ;
815: $checkUninitVar_ $(@expr1073742836 "cppcheck-2.8/test/testuninitvar.cpp" $, 815 $, code2@var115 , "test.cpp" $) ;
816: $if $(@expr1073742837 $!@expr1073742838 $assertEquals $(@expr1073742839 "cppcheck-2.8/test/testuninitvar.cpp" $, 816 $, "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n[test.cpp:4]: (error) Uninitialized struct member: ab.b\n" $, errout@var100 .@expr1002 str (@expr1003 ) $) $) { $return
817: ; }
818: $checkUninitVar_ $(@expr1073742842 "cppcheck-2.8/test/testuninitvar.cpp" $, 818 $, code2@var115 , "test.c" $) ;
819: $if $(@expr1073742843 $!@expr1073742844 $assertEquals $(@expr1073742845 "cppcheck-2.8/test/testuninitvar.cpp" $, 819 $, "[test.c:4]: (error) Uninitialized variable: ab\n" $, errout@var100 .@expr1002 str (@expr1003 ) $) $) { $return ; }
820:
821:
822: $checkUninitVar_ $(@expr1073742848 "cppcheck-2.8/test/testuninitvar.cpp" $, 822 $, "void f() {\n    std::map<int,bool> x;\n    return x;\n}" $)
823:
824:
825: ;
826: $if $(@expr1073742849 $!@expr1073742850 $assertEquals $(@expr1073742851 "cppcheck-2.8/test/testuninitvar.cpp" $, 826 $, "" $, errout@var100 .@expr1002 str (@expr1003 ) $) $) { $return ; }
827:
828:
829: $checkUninitVar_ $(@expr1073742854 "cppcheck-2.8/test/testuninitvar.cpp" $, 829 $, "void f() {\n    std::vector<int> *x = NULL;\n    return x;\n}" , "test.cpp" , false $)
830:
831:
832: ;
833: $if $(@expr1073742855 $!@expr1073742856 $assertEquals $(@expr1073742857 "cppcheck-2.8/test/testuninitvar.cpp" $, 833 $, "" $, errout@var100 .@expr1002 str (@expr1003 ) $) $) { $return ; }
834:
835:
836: const char xmldata@var116 [@expr1073742860 68 ] =@expr1073742861 "<?xml version=\"1.0\"?>\n<def format=\"1\">  <podtype name=\"_tm\"/></def>"
837:
838:
839: ;
840: $if $(@expr1073742862 $!@expr1073742863 $assertEquals $(@expr1073742864 "cppcheck-2.8/test/testuninitvar.cpp" $, 840 $, true $, $(@expr1073742865 settings@var102 .@expr1073742866 library@var103 .@expr1073742867 loadxmldata (@expr1073742868 xmldata@var116 , sizeof (@expr1073742869 xmldata@var116 ) ) $) $) $) { $return ; }
841: $checkUninitVar_ $(@expr1073742870 "cppcheck-2.8/test/testuninitvar.cpp" $, 841 $, "void f() {\n  Fred _tm;\n  _tm.dostuff();\n}" $)
842:
843:
844: ;
845: $if $(@expr1073742871 $!@expr1073742872 $assertEquals $(@expr1073742873 "cppcheck-2.8/test/testuninitvar.cpp" $, 845 $, "" $, errout@var100 .@expr1002 str (@expr1003 ) $) $) { $return ; }
846:
847:
848: $checkUninitVar_ $(@expr1073742876 "cppcheck-2.8/test/testuninitvar.cpp" $, 848 $, "A *f() {\n    A a,b;\n    b[0] = 0;    return a;\n}" , "test.c" , false $)
849:
850:
851:
852: ;
853: $if $(@expr1073742877 $!@expr1073742878 $assertEquals $(@expr1073742879 "cppcheck-2.8/test/testuninitvar.cpp" $, 853 $, "" $, errout@var100 .@expr1002 str (@expr1003 ) $) $) { $return ; }
854: }
855:
856: void uninitvar3 ( ) {
857:
858: $checkUninitVar_ $(@expr1073742882 "cppcheck-2.8/test/testuninitvar.cpp" $, 858 $, "namespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    typedef unsigned long _Bit_type;\n    struct _Bit_reference\n    {\n        _Bit_type * _M_p;\n        _Bit_type _M_mask;\n        _Bit_reference(_Bit_type * __x, _Bit_type __y)\n         : _M_p(__x), _M_mask(__y) { }\n    };\n}" $)
859:
|
868:
869: ;
870: $if $(@expr1073742883 $!@expr1073742884 $assertEquals $(@expr1073742885 "cppcheck-2.8/test/testuninitvar.cpp" $, 870 $, "" $, errout@var100 .@expr1073742886 str (@expr1073742887 ) $) $) { $return ; }
871: }
872:
873: void uninitvar_bitop ( ) {
874:
875:
876: $checkUninitVar_ $(@expr1073742888 "cppcheck-2.8/test/testuninitvar.cpp" $, 876 $, "void foo() {\n    int b;\n    c = a | b;\n}" $)
877:
878:
879: ;
880: $if $(@expr1073742889 $!@expr1073742890 $assertEquals $(@expr1073742891 "cppcheck-2.8/test/testuninitvar.cpp" $, 880 $, "[test.cpp:3]: (error) Uninitialized variable: b\n" $, errout@var100 .@expr1068 str (@expr1069 ) $) $) { $return ; }
881:
882: $checkUninitVar_ $(@expr1073742894 "cppcheck-2.8/test/testuninitvar.cpp" $, 882 $, "void foo() {\n    int b;\n    c = b | a;\n}" $)
883:
884:
885: ;
886: $if $(@expr1073742895 $!@expr1073742896 $assertEquals $(@expr1073742897 "cppcheck-2.8/test/testuninitvar.cpp" $, 886 $, "[test.cpp:3]: (error) Uninitialized variable: b\n" $, errout@var100 .@expr1068 str (@expr1069 ) $) $) { $return ; }
887: }
888:
889:
890: void uninitvar_if ( ) {
891:
892: $checkUninitVar_ $(@expr1073742900 "cppcheck-2.8/test/testuninitvar.cpp" $, 892 $, "static void foo(int x)\n{\n    Foo *p;\n    if (x)\n        p = new Foo;\n    p->abcd();\n}" $)
893:
|
897:
898: ;
899: $if $(@expr1073742901 $!@expr1073742902 $assertEquals $(@expr1073742903 "cppcheck-2.8/test/testuninitvar.cpp" $, 899 $, "[test.cpp:6]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
900:
901: $checkUninitVar_ $(@expr1073742906 "cppcheck-2.8/test/testuninitvar.cpp" $, 901 $, "static void foo(int x)\n{\n    int a;\n    if (x==1);\n    if (x==2);\n    x = a;\n}" $)
902:
|
906:
907: ;
908: $if $(@expr1073742907 $!@expr1073742908 $assertEquals $(@expr1073742909 "cppcheck-2.8/test/testuninitvar.cpp" $, 908 $, "[test.cpp:6]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
909:
910: $checkUninitVar_ $(@expr1073742912 "cppcheck-2.8/test/testuninitvar.cpp" $, 910 $, "int foo() {\n    int i;\n    if (1)\n        i = 11;\n    return i;\n}" $)
911:
|
914:
915: ;
916: $if $(@expr1073742913 $!@expr1073742914 $assertEquals $(@expr1073742915 "cppcheck-2.8/test/testuninitvar.cpp" $, 916 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
917:
918: $checkUninitVar_ $(@expr1073742918 "cppcheck-2.8/test/testuninitvar.cpp" $, 918 $, "int bar(int x) {\n    int n;\n    if ( x == 23)\n      n = 1;\n    else if ( x == 11 )\n      n = 2;\n    return n;\n}" $)
919:
|
924:
925: ;
926: $todoAssertEquals $(@expr1073742919 "cppcheck-2.8/test/testuninitvar.cpp" $, 926 $, "error" $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) ;
927:
928: $checkUninitVar_ $(@expr1073742922 "cppcheck-2.8/test/testuninitvar.cpp" $, 928 $, "int foo()\n{\n    int i;\n    if (x)\n        i = 22;\n    else\n        i = 33;\n    return i;\n}" $)
929:
|
935:
936: ;
937: $if $(@expr1073742923 $!@expr1073742924 $assertEquals $(@expr1073742925 "cppcheck-2.8/test/testuninitvar.cpp" $, 937 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
938:
939: $checkUninitVar_ $(@expr1073742928 "cppcheck-2.8/test/testuninitvar.cpp" $, 939 $, "int foo(int x)\n{\n    int i;\n    if (x < 2)\n        i = 22;\n    else if (x >= 2)\n        i = 33;\n    return i;\n}" $)
940:
|
946:
947: ;
948: $if $(@expr1073742929 $!@expr1073742930 $assertEquals $(@expr1073742931 "cppcheck-2.8/test/testuninitvar.cpp" $, 948 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
949:
950: $checkUninitVar_ $(@expr1073742934 "cppcheck-2.8/test/testuninitvar.cpp" $, 950 $, "int foo()\n{\n    int i;\n    if (x)\n        i = 22;\n    else\n    {\n        char *y = {0};\n        i = 33;\n    }\n    return i;\n}" $)
951:
|
960:
961: ;
962: $if $(@expr1073742935 $!@expr1073742936 $assertEquals $(@expr1073742937 "cppcheck-2.8/test/testuninitvar.cpp" $, 962 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
963:
964: $checkUninitVar_ $(@expr1073742940 "cppcheck-2.8/test/testuninitvar.cpp" $, 964 $, "int foo()\n{\n    int i;\n    if (x)\n    {\n        struct abc abc1 = (struct abc) { .a=0, .b=0, .c=0 };\n        i = 22;\n    }\n    else\n    {\n        i = 33;\n    }\n    return i;\n}" , "test.cpp" , false $)
965:
|
976:
977: ;
978: $if $(@expr1073742941 $!@expr1073742942 $assertEquals $(@expr1073742943 "cppcheck-2.8/test/testuninitvar.cpp" $, 978 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
979:
980: $checkUninitVar_ $(@expr1073742946 "cppcheck-2.8/test/testuninitvar.cpp" $, 980 $, "static void foo(int x)\n{\n    Foo *p;\n    if (x)\n        p = new Foo;\n    if (x)\n        p->abcd();\n}" $)
981:
|
986:
987: ;
988: $if $(@expr1073742947 $!@expr1073742948 $assertEquals $(@expr1073742949 "cppcheck-2.8/test/testuninitvar.cpp" $, 988 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
989:
990: $checkUninitVar_ $(@expr1073742952 "cppcheck-2.8/test/testuninitvar.cpp" $, 990 $, "void foo(int a)\n{\n    int n;\n    int condition;\n    if(a == 1) {\n        n=0;\n        condition=0;\n    }\n    else {\n        n=1;\n    }\n\n    if( n == 0) {\n        a=condition;\n    }\n}" $)
991:
|
1004:
1005: ;
1006: $if $(@expr1073742953 $!@expr1073742954 $assertEquals $(@expr1073742955 "cppcheck-2.8/test/testuninitvar.cpp" $, 1006 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1007:
1008: $checkUninitVar_ $(@expr1073742958 "cppcheck-2.8/test/testuninitvar.cpp" $, 1008 $, "void f()\n{\n    C *c;\n    if (fun(&c));\n    c->Release();\n}" $)
1009:
|
1012:
1013: ;
1014: $if $(@expr1073742959 $!@expr1073742960 $assertEquals $(@expr1073742961 "cppcheck-2.8/test/testuninitvar.cpp" $, 1014 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1015:
1016: $checkUninitVar_ $(@expr1073742964 "cppcheck-2.8/test/testuninitvar.cpp" $, 1016 $, "void f() {\n    C c;\n    if (fun(&c.d));\n    return c;\n}" $)
1017:
1018:
1019:
1020: ;
1021: $if $(@expr1073742965 $!@expr1073742966 $assertEquals $(@expr1073742967 "cppcheck-2.8/test/testuninitvar.cpp" $, 1021 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1022:
1023: $checkUninitVar_ $(@expr1073742970 "cppcheck-2.8/test/testuninitvar.cpp" $, 1023 $, "void f() {\n   char a[10];\n   if (a[0] = x){}\n}" $)
1024:
1025:
1026: ;
1027: $if $(@expr1073742971 $!@expr1073742972 $assertEquals $(@expr1073742973 "cppcheck-2.8/test/testuninitvar.cpp" $, 1027 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1028:
1029: $checkUninitVar_ $(@expr1073742976 "cppcheck-2.8/test/testuninitvar.cpp" $, 1029 $, "int foo(int x)\n{\n    int i;\n    if (one())\n        i = 1;\n    else\n        return 3;\n    return i;\n}" $)
1030:
|
1036:
1037: ;
1038: $if $(@expr1073742977 $!@expr1073742978 $assertEquals $(@expr1073742979 "cppcheck-2.8/test/testuninitvar.cpp" $, 1038 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1039:
1040:
1041: $checkUninitVar_ $(@expr1073742982 "cppcheck-2.8/test/testuninitvar.cpp" $, 1041 $, "void foo(int x) {\n    int a;\n    if (x)\n        a = 1;\n    if (!x)\n        return;\n    b = (c - a);\n}" $)
1042:
|
1047:
1048: ;
1049: $if $(@expr1073742983 $!@expr1073742984 $assertEquals $(@expr1073742985 "cppcheck-2.8/test/testuninitvar.cpp" $, 1049 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1050:
1051: $checkUninitVar_ $(@expr1073742988 "cppcheck-2.8/test/testuninitvar.cpp" $, 1051 $, "int foo()\n{\n    int ret;\n    if (one())\n        ret = 1;\n    else\n        throw 3;\n    return ret;\n}" $)
1052:
|
1058:
1059: ;
1060: $if $(@expr1073742989 $!@expr1073742990 $assertEquals $(@expr1073742991 "cppcheck-2.8/test/testuninitvar.cpp" $, 1060 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1061:
1062: $checkUninitVar_ $(@expr1073742994 "cppcheck-2.8/test/testuninitvar.cpp" $, 1062 $, "int f(int a)\n{\n    int ret;\n    if (a == 1)\n        ret = 1;\n    else\n        XYZ ret = 2;\n    return ret;\n}" $)
1063:
|
1069:
1070: ;
1071: $if $(@expr1073742995 $!@expr1073742996 $assertEquals $(@expr1073742997 "cppcheck-2.8/test/testuninitvar.cpp" $, 1071 $, "[test.cpp:8]: (error) Uninitialized variable: ret\n" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1072:
1073: $checkUninitVar_ $(@expr1073743000 "cppcheck-2.8/test/testuninitvar.cpp" $, 1073 $, "int f(int a, int b)\n{\n   int x;\n   if (a)\n      x = a;\n   else {\n      do { } while (f2());\n      x = b;\n   }\n   return x;\n}" $)
1074:
|
1082:
1083: ;
1084: $if $(@expr1073743001 $!@expr1073743002 $assertEquals $(@expr1073743003 "cppcheck-2.8/test/testuninitvar.cpp" $, 1084 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1085:
1086: $checkUninitVar_ $(@expr1073743006 "cppcheck-2.8/test/testuninitvar.cpp" $, 1086 $, "void foo(long verbose,bool bFlag)\n{\n  double t;\n  if (bFlag)\n  {\n    if (verbose)\n      t = 1;\n    if (verbose)\n      std::cout << (12-t);\n  }\n}" $)
1087:
|
1095:
1096: ;
1097: $if $(@expr1073743007 $!@expr1073743008 $assertEquals $(@expr1073743009 "cppcheck-2.8/test/testuninitvar.cpp" $, 1097 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1098:
1099: $checkUninitVar_ $(@expr1073743012 "cppcheck-2.8/test/testuninitvar.cpp" $, 1099 $, "int test(int cond1, int cond2) {\n  int foo;\n  if (cond1 || cond2) {\n     if (cond2)\n        foo = 0;\n  }\n  if (cond2) {\n    int t = foo*foo;\n  }\n}" $)
1100:
|
1107:
1108: ;
1109: $if $(@expr1073743013 $!@expr1073743014 $assertEquals $(@expr1073743015 "cppcheck-2.8/test/testuninitvar.cpp" $, 1109 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1110:
1111: $checkUninitVar_ $(@expr1073743018 "cppcheck-2.8/test/testuninitvar.cpp" $, 1111 $, "void foo(int *pix) {\n    int dest_x;\n    {\n        if (pix)\n            dest_x = 123;\n    }\n    if (pix)\n        a = dest_x;\n}" $)
1112:
|
1118:
1119: ;
1120: $if $(@expr1073743019 $!@expr1073743020 $assertEquals $(@expr1073743021 "cppcheck-2.8/test/testuninitvar.cpp" $, 1120 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1121:
1122:
1123: $checkUninitVar_ $(@expr1073743024 "cppcheck-2.8/test/testuninitvar.cpp" $, 1123 $, "static void foo(int v) {\n    int x;\n    x = v <= 0 ? -1 : x;\n}" $)
1124:
1125:
1126: ;
1127: $if $(@expr1073743025 $!@expr1073743026 $assertEquals $(@expr1073743027 "cppcheck-2.8/test/testuninitvar.cpp" $, 1127 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1128:
1129: $checkUninitVar_ $(@expr1073743030 "cppcheck-2.8/test/testuninitvar.cpp" $, 1129 $, "void foo()\n{\n    const char *msgid1, *msgid2;\n    int ret = bar(&msgid1);\n    if (ret > 0) {\n        ret = bar(&msgid2);\n    }\n    ret = ret <= 0 ? -1 :\n          strcmp(msgid1, msgid2) == 0;\n}" $)
1130:
|
1137:
1138: ;
1139: $if $(@expr1073743031 $!@expr1073743032 $assertEquals $(@expr1073743033 "cppcheck-2.8/test/testuninitvar.cpp" $, 1139 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1140:
1141: $checkUninitVar_ $(@expr1073743036 "cppcheck-2.8/test/testuninitvar.cpp" $, 1141 $, "void foo(int a, int b)\n{\n    int x; x = (a<b) ? 1 : 0;\n    int y = y;\n}" $)
1142:
1143:
1144:
1145: ;
1146: $if $(@expr1073743037 $!@expr1073743038 $assertEquals $(@expr1073743039 "cppcheck-2.8/test/testuninitvar.cpp" $, 1146 $, "[test.cpp:4]: (error) Uninitialized variable: y\n" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1147:
1148: $checkUninitVar_ $(@expr1073743042 "cppcheck-2.8/test/testuninitvar.cpp" $, 1148 $, "void foo() {\n  int x = (x = bar()) ? x : 0;\n}" $)
1149:
1150: ;
1151: $if $(@expr1073743043 $!@expr1073743044 $assertEquals $(@expr1073743045 "cppcheck-2.8/test/testuninitvar.cpp" $, 1151 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1152:
1153:
1154: $checkUninitVar_ $(@expr1073743048 "cppcheck-2.8/test/testuninitvar.cpp" $, 1154 $, "int foo()\n{\n  int retval;\n  if (condition) {\n    { }\n    retval = 1; }\n  else\n    retval = 2;\n  return retval;\n}" $)
1155:
|
1162:
1163: ;
1164: $if $(@expr1073743049 $!@expr1073743050 $assertEquals $(@expr1073743051 "cppcheck-2.8/test/testuninitvar.cpp" $, 1164 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1165:
1166: $checkUninitVar_ $(@expr1073743054 "cppcheck-2.8/test/testuninitvar.cpp" $, 1166 $, "void foo()\n{\n  {\n    for (int i = 0; i < 10; ++i)\n    { }\n  }\n\n  { }\n}" $)
1167:
|
1173:
1174: ;
1175: $if $(@expr1073743055 $!@expr1073743056 $assertEquals $(@expr1073743057 "cppcheck-2.8/test/testuninitvar.cpp" $, 1175 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1176:
1177:
1178: $checkUninitVar_ $(@expr1073743060 "cppcheck-2.8/test/testuninitvar.cpp" $, 1178 $, "void f() {\n    int x;\n    if (abc) { x = 123; }\n    else { a = ({b=c;}); x = 456; }\n    ++x;\n}" $)
1179:
|
1182:
1183: ;
1184: $if $(@expr1073743061 $!@expr1073743062 $assertEquals $(@expr1073743063 "cppcheck-2.8/test/testuninitvar.cpp" $, 1184 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1185:
1186:
1187: $checkUninitVar_ $(@expr1073743066 "cppcheck-2.8/test/testuninitvar.cpp" $, 1187 $, "void f()\n{\n    char *c1,*c2;\n    if(strcoll(c1,c2))\n    {\n    }\n}" $)
1188:
|
1192:
1193: ;
1194: $if $(@expr1073743067 $!@expr1073743068 $assertEquals $(@expr1073743069 "cppcheck-2.8/test/testuninitvar.cpp" $, 1194 $, "[test.cpp:4]: (error) Uninitialized variable: c1\n[test.cpp:4]: (error) Uninitialized variable: c2\n" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return
1195: ; }
1196:
1197: $checkUninitVar_ $(@expr1073743072 "cppcheck-2.8/test/testuninitvar.cpp" $, 1197 $, "void f(char *c1, char *c2)\n{\n    if(strcoll(c1,c2))\n    {\n    }\n}" $)
1198:
|
1201:
1202: ;
1203: $if $(@expr1073743073 $!@expr1073743074 $assertEquals $(@expr1073743075 "cppcheck-2.8/test/testuninitvar.cpp" $, 1203 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1204:
1205: $checkUninitVar_ $(@expr1073743078 "cppcheck-2.8/test/testuninitvar.cpp" $, 1205 $, "void f()\n{\n    char *c1;\n    c1=strcpy(c1,\"test\");\n}" $)
1206:
1207:
1208:
1209: ;
1210: $if $(@expr1073743079 $!@expr1073743080 $assertEquals $(@expr1073743081 "cppcheck-2.8/test/testuninitvar.cpp" $, 1210 $, "[test.cpp:4]: (error) Uninitialized variable: c1\n" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1211:
1212: $checkUninitVar_ $(@expr1073743084 "cppcheck-2.8/test/testuninitvar.cpp" $, 1212 $, "void f(char *c1)\n{\n    c1=strcpy(c1,\"test\");\n}" $)
1213:
1214:
1215: ;
1216: $if $(@expr1073743085 $!@expr1073743086 $assertEquals $(@expr1073743087 "cppcheck-2.8/test/testuninitvar.cpp" $, 1216 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1217:
1218: $checkUninitVar_ $(@expr1073743090 "cppcheck-2.8/test/testuninitvar.cpp" $, 1218 $, "void f() {\n  X var;\n  memset(var, 0, sizeof(var));\n}" , "test.c" $)
1219:
1220:
1221: ;
1222: $if $(@expr1073743091 $!@expr1073743092 $assertEquals $(@expr1073743093 "cppcheck-2.8/test/testuninitvar.cpp" $, 1222 $, "" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1223:
1224: $checkUninitVar_ $(@expr1073743096 "cppcheck-2.8/test/testuninitvar.cpp" $, 1224 $, "int f() {\n    bool b = e();\n    int v;\n    if (b)\n        doStuff(&v);\n    int v2 = (b) ? v / 5 : 0;\n    int v3;\n    if (b)\n        v3 = 50;\n    int v4 = (b) ? v3 + 5 : 0;\n    int v5;\n    int v6 = v5;\n    doStuff(&v5);\n    int v7 = v5;\n    return v2 + v4 + v6 + v7;\n}\n" $)
1225:
|
1238:
1239: ;
1240: $if $(@expr1073743097 $!@expr1073743098 $assertEquals $(@expr1073743099 "cppcheck-2.8/test/testuninitvar.cpp" $, 1240 $, "[test.cpp:12]: (error) Uninitialized variable: v5\n" $, errout@var100 .@expr1080 str (@expr1081 ) $) $) { $return ; }
1241: }
1242:
1243:
1244:
1245: void uninitvar_loops ( ) {
1246:
1247:
1248: $checkUninitVar_ $(@expr1073743102 "cppcheck-2.8/test/testuninitvar.cpp" $, 1248 $, "void f()\n{\n    for (int i = 0; i < 4; ++i) {\n        int a;\n        b(4*a);\n    }}" $)
1249:
|
1253:
1254: ;
1255: $if $(@expr1073743103 $!@expr1073743104 $assertEquals $(@expr1073743105 "cppcheck-2.8/test/testuninitvar.cpp" $, 1255 $, "[test.cpp:5]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1256:
1257: $checkUninitVar_ $(@expr1073743108 "cppcheck-2.8/test/testuninitvar.cpp" $, 1257 $, "void f() {\n    int k;\n    for (int i = 0; i < 4; ++i) {\n        k = k + 2;\n    }\n}" $)
1258:
|
1261:
1262: ;
1263: $if $(@expr1073743109 $!@expr1073743110 $assertEquals $(@expr1073743111 "cppcheck-2.8/test/testuninitvar.cpp" $, 1263 $, "[test.cpp:4]: (error) Uninitialized variable: k\n" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1264:
1265: $checkUninitVar_ $(@expr1073743114 "cppcheck-2.8/test/testuninitvar.cpp" $, 1265 $, "void f() {\n    gchar sel[10];\n    for (int i = 0; i < 4; ++i) {\n        int sz = sizeof(sel);\n    }\n}" $)
1266:
|
1269:
1270: ;
1271: $if $(@expr1073743115 $!@expr1073743116 $assertEquals $(@expr1073743117 "cppcheck-2.8/test/testuninitvar.cpp" $, 1271 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1272:
1273: $checkUninitVar_ $(@expr1073743120 "cppcheck-2.8/test/testuninitvar.cpp" $, 1273 $, "enum ABCD { A, B, C, D };\n\nstatic void f(char *str ) {\n    enum ABCD i;\n    for (i = 0; i < D; i++) {\n        str[i] = 0;\n    }\n}" $)
1274:
|
1279:
1280: ;
1281: $if $(@expr1073743121 $!@expr1073743122 $assertEquals $(@expr1073743123 "cppcheck-2.8/test/testuninitvar.cpp" $, 1281 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1282:
1283: $checkUninitVar_ $(@expr1073743126 "cppcheck-2.8/test/testuninitvar.cpp" $, 1283 $, "void x() {\n    do  {\n        Token * tok;\n        for (tok = a; tok; tok = tok->next())\n        {\n        }\n    } while (tok2);\n}" $)
1284:
|
1289:
1290: ;
1291: $if $(@expr1073743127 $!@expr1073743128 $assertEquals $(@expr1073743129 "cppcheck-2.8/test/testuninitvar.cpp" $, 1291 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1292:
1293: $checkUninitVar_ $(@expr1073743132 "cppcheck-2.8/test/testuninitvar.cpp" $, 1293 $, "void foo(void) {\n    int a = 0;\n    int x;\n\n    for (;;) {\n        if (!a || 12 < x) {\n            a = 1;\n            x = 2;\n        }\n    }\n}" $)
1294:
|
1302:
1303: ;
1304: $if $(@expr1073743133 $!@expr1073743134 $assertEquals $(@expr1073743135 "cppcheck-2.8/test/testuninitvar.cpp" $, 1304 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1305:
1306: $checkUninitVar_ $(@expr1073743138 "cppcheck-2.8/test/testuninitvar.cpp" $, 1306 $, "void foo(void) {\n    int a = 0;\n    int x;\n\n    for (;;) {\n        if (!a || 12 < x) {\n            a = 1;\n        }\n    }\n}" $)
1307:
|
1314:
1315: ;
1316: $if $(@expr1073743139 $!@expr1073743140 $assertEquals $(@expr1073743141 "cppcheck-2.8/test/testuninitvar.cpp" $, 1316 $, "[test.cpp:6]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1317:
1318: $checkUninitVar_ $(@expr1073743144 "cppcheck-2.8/test/testuninitvar.cpp" $, 1318 $, "void foo(int n) {\n  int one[10];\n  for (int rank = 0; rank < n; ++rank) {\n    for (int i=0;i<rank;i++)\n      f = one[i];\n    one[rank] = -1;\n  }\n}" $)
1319:
|
1324:
1325: ;
1326: $if $(@expr1073743145 $!@expr1073743146 $assertEquals $(@expr1073743147 "cppcheck-2.8/test/testuninitvar.cpp" $, 1326 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1327:
1328:
1329: $checkUninitVar_ $(@expr1073743150 "cppcheck-2.8/test/testuninitvar.cpp" $, 1329 $, "void f() {\n    container c;\n    for (iterator it : c) {\n    }\n}" $)
1330:
1331:
1332:
1333: ;
1334: $if $(@expr1073743151 $!@expr1073743152 $assertEquals $(@expr1073743153 "cppcheck-2.8/test/testuninitvar.cpp" $, 1334 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1335:
1336:
1337: $checkUninitVar_ $(@expr1073743156 "cppcheck-2.8/test/testuninitvar.cpp" $, 1337 $, "void f(int x) {\n    const PoolItem* pItem;\n    while (x > 0) {\n        if (GetItem(&pItem) && (*pItem != rPool))\n        { }\n        x--;\n    }\n}" $)
1338:
|
1343:
1344: ;
1345: $if $(@expr1073743157 $!@expr1073743158 $assertEquals $(@expr1073743159 "cppcheck-2.8/test/testuninitvar.cpp" $, 1345 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1346:
1347: $checkUninitVar_ $(@expr1073743162 "cppcheck-2.8/test/testuninitvar.cpp" $, 1347 $, "void f(int x, const PoolItem& rPool) {\n    const PoolItem* pItem;\n    while (x > 0) {\n        if (*pItem != rPool)\n        { }\n        x--;\n    }\n}" $)
1348:
|
1353:
1354: ;
1355: $if $(@expr1073743163 $!@expr1073743164 $assertEquals $(@expr1073743165 "cppcheck-2.8/test/testuninitvar.cpp" $, 1355 $, "[test.cpp:4]: (error) Uninitialized variable: pItem\n" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1356:
1357:
1358: $checkUninitVar_ $(@expr1073743168 "cppcheck-2.8/test/testuninitvar.cpp" $, 1358 $, "int foo(char *a) {\n    int x;\n\n    for (int i = 0; i < 10; ++i) {\n        if (a[i] == 'x') {\n            x = i;\n            break;\n        }\n    }\n\n    return x;\n}" $)
1359:
|
1368:
1369: ;
1370: $todoAssertEquals $(@expr1073743169 "cppcheck-2.8/test/testuninitvar.cpp" $, 1370 $, "[test.cpp:11]: (error) Uninitialized variable: x\n" $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) ;
1371:
1372:
1373: $checkUninitVar_ $(@expr1073743172 "cppcheck-2.8/test/testuninitvar.cpp" $, 1373 $, "void foo() {\n    while (true) {\n        int x;\n        if (y) x = 0;\n        else break;\n        return x;\n    }\n}" $)
1374:
|
1379:
1380: ;
1381: $if $(@expr1073743173 $!@expr1073743174 $assertEquals $(@expr1073743175 "cppcheck-2.8/test/testuninitvar.cpp" $, 1381 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1382:
1383:
1384: $checkUninitVar_ $(@expr1073743178 "cppcheck-2.8/test/testuninitvar.cpp" $, 1384 $, "int foo(char* in, bool b) {\n    char* c;\n    if (b) for (c = in; *c == 0; ++c) {}\n    else c = in + strlen(in) - 1;\n    *c = 0;\n}" $)
1385:
|
1388:
1389: ;
1390: $if $(@expr1073743179 $!@expr1073743180 $assertEquals $(@expr1073743181 "cppcheck-2.8/test/testuninitvar.cpp" $, 1390 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1391:
1392:
1393:
1394: $checkUninitVar_ $(@expr1073743184 "cppcheck-2.8/test/testuninitvar.cpp" $, 1394 $, "void foo() {\n    int learn;\n    for (int index = 0; index < 10; index++) {\n        if (!(learn & PORT_LEARN_DISABLE))\n            learn = 123;\n    }\n}" $)
1395:
|
1399:
1400: ;
1401: $if $(@expr1073743185 $!@expr1073743186 $assertEquals $(@expr1073743187 "cppcheck-2.8/test/testuninitvar.cpp" $, 1401 $, "[test.cpp:4]: (error) Uninitialized variable: learn\n" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1402:
1403:
1404: $checkUninitVar_ $(@expr1073743190 "cppcheck-2.8/test/testuninitvar.cpp" $, 1404 $, "void foo() {\n  Entry *entry, *nextEntry;\n  for(int i = 0; i < 10; i++) {\n    for(entry = buckets[i]; entry != NULL; entry = nextEntry) {\n      nextEntry = entry->next;\n    }\n  }\n}\n" $)
1405:
|
1410:
1411: ;
1412: $if $(@expr1073743191 $!@expr1073743192 $assertEquals $(@expr1073743193 "cppcheck-2.8/test/testuninitvar.cpp" $, 1412 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1413:
1414: $checkUninitVar_ $(@expr1073743196 "cppcheck-2.8/test/testuninitvar.cpp" $, 1414 $, "void foo() {\n  Entry *entry, *nextEntry;\n  for(int i = 0; i < 10; i++) {\n    for(entry = buckets[i]; entry != NULL; entry = nextEntry) {\n    }\n  }\n}\n" $)
1415:
|
1419:
1420: ;
1421: $if $(@expr1073743197 $!@expr1073743198 $assertEquals $(@expr1073743199 "cppcheck-2.8/test/testuninitvar.cpp" $, 1421 $, "[test.cpp:4]: (error) Uninitialized variable: nextEntry\n" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1422:
1423: $checkUninitVar_ $(@expr1073743202 "cppcheck-2.8/test/testuninitvar.cpp" $, 1423 $, "void f(int x) {\n    list *f = NULL;\n    list *l;\n\n    while (--x) {\n        if (!f)\n            f = c;\n        else\n            l->next = c;\n        l = c;\n    }\n}\n" $)
1424:
|
1433:
1434: ;
1435: $if $(@expr1073743203 $!@expr1073743204 $assertEquals $(@expr1073743205 "cppcheck-2.8/test/testuninitvar.cpp" $, 1435 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1436:
1437:
1438: $checkUninitVar_ $(@expr1073743208 "cppcheck-2.8/test/testuninitvar.cpp" $, 1438 $, "void f(void)\n{\n    int* p;\n    do\n    {\n        if (true) {;}\n        else\n        {\n            return;\n        }\n        *p = 7;\n        p = new int(9);\n    } while (*p != 8);\n}" $)
1439:
|
1450:
1451: ;
1452: $if $(@expr1073743209 $!@expr1073743210 $assertEquals $(@expr1073743211 "cppcheck-2.8/test/testuninitvar.cpp" $, 1452 $, "[test.cpp:11]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1453:
1454:
1455: $checkUninitVar_ $(@expr1073743214 "cppcheck-2.8/test/testuninitvar.cpp" $, 1455 $, "void f(void)\n{\n    int* p;\n    while (*p != 8) {\n        *p = 7;\n        p = new int(9);\n    }\n}" $)
1456:
|
1461:
1462: ;
1463: $if $(@expr1073743215 $!@expr1073743216 $assertEquals $(@expr1073743217 "cppcheck-2.8/test/testuninitvar.cpp" $, 1463 $, "[test.cpp:4]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1464:
1465:
1466: $checkUninitVar_ $(@expr1073743220 "cppcheck-2.8/test/testuninitvar.cpp" $, 1466 $, "int foo(int *p) {\n  int x;\n  while (true) {\n    switch (*p) {\n    case 1:\n        return x;\n    case 2:\n        x = 123;\n        break;\n    };\n    ++p\n  }\n}" $)
1467:
|
1477:
1478: ;
1479: $if $(@expr1073743221 $!@expr1073743222 $assertEquals $(@expr1073743223 "cppcheck-2.8/test/testuninitvar.cpp" $, 1479 $, "" $, errout@var100 .@expr1282 str (@expr1283 ) $) $) { $return ; }
1480: }
1481:
1482:
1483: void uninitvar_switch ( ) {
1484: $checkUninitVar_ $(@expr1073743226 "cppcheck-2.8/test/testuninitvar.cpp" $, 1484 $, "void f(int x)\n{\n    short c;\n    switch(x) {\n    case 1:\n        c++;\n        break;\n    };\n}" $)
1485:
|
1491:
1492: ;
1493: $todoAssertEquals $(@expr1073743227 "cppcheck-2.8/test/testuninitvar.cpp" $, 1493 $, "[test.cpp:6]: (error) Uninitialized variable: c\n" $, "" $, errout@var100 .@expr1404 str (@expr1405 ) $) ;
1494:
1495: $checkUninitVar_ $(@expr1073743230 "cppcheck-2.8/test/testuninitvar.cpp" $, 1495 $, "char * f()\n{\n    static char ret[200];\n    memset(ret, 0, 200);\n    switch (x)\n    {\n        case 1: return ret;\n        case 2: return ret;\n    }\n    return 0;\n}" $)
1496:
|
1504:
1505: ;
1506: $if $(@expr1073743231 $!@expr1073743232 $assertEquals $(@expr1073743233 "cppcheck-2.8/test/testuninitvar.cpp" $, 1506 $, "" $, errout@var100 .@expr1404 str (@expr1405 ) $) $) { $return ; }
1507:
1508: $checkUninitVar_ $(@expr1073743236 "cppcheck-2.8/test/testuninitvar.cpp" $, 1508 $, "int foo(const int iVar, unsigned int slot, unsigned int pin)\n{\n    int i;\n    if (iVar == 0)\n    {\n        switch (slot)\n        {\n            case 4:  return 5;\n            default: return -1;\n        }\n    }\n    else\n    {\n        switch (pin)\n        {\n            case 0:   i =  2; break;\n            default:  i = -1; break;\n        }\n    }\n    return i;\n}" $)
1509:
|
1527:
1528: ;
1529: $if $(@expr1073743237 $!@expr1073743238 $assertEquals $(@expr1073743239 "cppcheck-2.8/test/testuninitvar.cpp" $, 1529 $, "" $, errout@var100 .@expr1404 str (@expr1405 ) $) $) { $return ; }
1530:
1531:
1532: $checkUninitVar_ $(@expr1073743242 "cppcheck-2.8/test/testuninitvar.cpp" $, 1532 $, "int a()\n{\n    int x;\n    switch (foo(&x))\n    {\n        case 1:\n            return x;\n    }\n}" $)
1533:
|
1539:
1540: ;
1541: $if $(@expr1073743243 $!@expr1073743244 $assertEquals $(@expr1073743245 "cppcheck-2.8/test/testuninitvar.cpp" $, 1541 $, "" $, errout@var100 .@expr1404 str (@expr1405 ) $) $) { $return ; }
1542:
1543:
1544: $checkUninitVar_ $(@expr1073743248 "cppcheck-2.8/test/testuninitvar.cpp" $, 1544 $, "void f() {\n    int a;\n    ({\n    switch(sizeof(int)) {\n    case 4:\n    default:\n        (a)=0;\n        break;\n    };\n    })\n}" , "test.cpp" , false $)
1545:
|
1553:
1554: ;
1555: $if $(@expr1073743249 $!@expr1073743250 $assertEquals $(@expr1073743251 "cppcheck-2.8/test/testuninitvar.cpp" $, 1555 $, "" $, errout@var100 .@expr1404 str (@expr1405 ) $) $) { $return ; }
1556: }
1557:
1558:
1559: void uninitvar_arrays ( ) {
1560: $checkUninitVar_ $(@expr1073743254 "cppcheck-2.8/test/testuninitvar.cpp" $, 1560 $, "void f()\n{\n    char a[10];\n    a[a[0]] = 0;\n}" $)
1561:
1562:
1563:
1564: ;
1565: $if $(@expr1073743255 $!@expr1073743256 $assertEquals $(@expr1073743257 "cppcheck-2.8/test/testuninitvar.cpp" $, 1565 $, "[test.cpp:4]: (error) Uninitialized variable: a[0]\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1566:
1567: $checkUninitVar_ $(@expr1073743260 "cppcheck-2.8/test/testuninitvar.cpp" $, 1567 $, "int f()\n{\n    char a[10];\n    *a = '\\0';\n    int i = strlen(a);\n}" $)
1568:
|
1571:
1572: ;
1573: $if $(@expr1073743261 $!@expr1073743262 $assertEquals $(@expr1073743263 "cppcheck-2.8/test/testuninitvar.cpp" $, 1573 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1574:
1575: $checkUninitVar_ $(@expr1073743266 "cppcheck-2.8/test/testuninitvar.cpp" $, 1575 $, "void f()\n{\n    char a, b[10];\n    a = b[0] = 0;\n}" $)
1576:
1577:
1578:
1579: ;
1580: $if $(@expr1073743267 $!@expr1073743268 $assertEquals $(@expr1073743269 "cppcheck-2.8/test/testuninitvar.cpp" $, 1580 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1581:
1582: $checkUninitVar_ $(@expr1073743272 "cppcheck-2.8/test/testuninitvar.cpp" $, 1582 $, "void f()\n{\n    char a[10], b[10];\n    a[0] = b[0] = 0;\n}" $)
1583:
1584:
1585:
1586: ;
1587: $if $(@expr1073743273 $!@expr1073743274 $assertEquals $(@expr1073743275 "cppcheck-2.8/test/testuninitvar.cpp" $, 1587 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1588:
1589: $checkUninitVar_ $(@expr1073743278 "cppcheck-2.8/test/testuninitvar.cpp" $, 1589 $, "void f()\n{\n    char a[10], *p;\n    *(p = a) = 0;\n}" $)
1590:
1591:
1592:
1593: ;
1594: $if $(@expr1073743279 $!@expr1073743280 $assertEquals $(@expr1073743281 "cppcheck-2.8/test/testuninitvar.cpp" $, 1594 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1595:
1596: $checkUninitVar_ $(@expr1073743284 "cppcheck-2.8/test/testuninitvar.cpp" $, 1596 $, "void f() {\n    char a[10], *p;\n    p = &(a[10]);\n}" $)
1597:
1598:
1599: ;
1600: $if $(@expr1073743285 $!@expr1073743286 $assertEquals $(@expr1073743287 "cppcheck-2.8/test/testuninitvar.cpp" $, 1600 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1601:
1602:
1603: $checkUninitVar_ $(@expr1073743290 "cppcheck-2.8/test/testuninitvar.cpp" $, 1603 $, "void f() {\n    char a[10], *p;\n    p = c?a:0;\n}" $)
1604:
1605:
1606: ;
1607: $if $(@expr1073743291 $!@expr1073743292 $assertEquals $(@expr1073743293 "cppcheck-2.8/test/testuninitvar.cpp" $, 1607 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1608:
1609: $checkUninitVar_ $(@expr1073743296 "cppcheck-2.8/test/testuninitvar.cpp" $, 1609 $, "void f(int x) {\n    char a[10], c;\n    c = *(x?a:0);\n}" $)
1610:
1611:
1612: ;
1613: $if $(@expr1073743297 $!@expr1073743298 $assertEquals $(@expr1073743299 "cppcheck-2.8/test/testuninitvar.cpp" $, 1613 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1614:
1615: $checkUninitVar_ $(@expr1073743302 "cppcheck-2.8/test/testuninitvar.cpp" $, 1615 $, "void f() {\n    char a[10], c;\n    strcpy(dest, x?a:\"\");\n}" $)
1616:
1617:
1618: ;
1619: $todoAssertEquals $(@expr1073743303 "cppcheck-2.8/test/testuninitvar.cpp" $, 1619 $, "error" $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) ;
1620:
1621: $checkUninitVar_ $(@expr1073743306 "cppcheck-2.8/test/testuninitvar.cpp" $, 1621 $, "void f(int x) {\n  int a[2];\n  y *= (x ? 1 : 2);\n}" $)
1622:
1623:
1624: ;
1625: $if $(@expr1073743307 $!@expr1073743308 $assertEquals $(@expr1073743309 "cppcheck-2.8/test/testuninitvar.cpp" $, 1625 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1626:
1627:
1628: $checkUninitVar_ $(@expr1073743312 "cppcheck-2.8/test/testuninitvar.cpp" $, 1628 $, "void f()\n{\n    char c[50] = \"\";\n    strcat(c, \"test\");\n}" $)
1629:
1630:
1631:
1632: ;
1633: $if $(@expr1073743313 $!@expr1073743314 $assertEquals $(@expr1073743315 "cppcheck-2.8/test/testuninitvar.cpp" $, 1633 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1634:
1635: $checkUninitVar_ $(@expr1073743318 "cppcheck-2.8/test/testuninitvar.cpp" $, 1635 $, "void f(char *s2) {\n    char s[20];\n    strcpy(s2, s);\n};" $)
1636:
1637:
1638: ;
1639: $if $(@expr1073743319 $!@expr1073743320 $assertEquals $(@expr1073743321 "cppcheck-2.8/test/testuninitvar.cpp" $, 1639 $, "[test.cpp:3]: (error) Uninitialized variable: s\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1640:
1641: $checkUninitVar_ $(@expr1073743324 "cppcheck-2.8/test/testuninitvar.cpp" $, 1641 $, "void f() {\n    char s[20];\n    strcat(s, \"abc\");\n};" $)
1642:
1643:
1644: ;
1645: $if $(@expr1073743325 $!@expr1073743326 $assertEquals $(@expr1073743327 "cppcheck-2.8/test/testuninitvar.cpp" $, 1645 $, "[test.cpp:3]: (error) Uninitialized variable: s\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1646:
1647: $checkUninitVar_ $(@expr1073743330 "cppcheck-2.8/test/testuninitvar.cpp" $, 1647 $, "void f() {\n    char s[20];\n    strchr(s, ' ');\n};" $)
1648:
1649:
1650: ;
1651: $if $(@expr1073743331 $!@expr1073743332 $assertEquals $(@expr1073743333 "cppcheck-2.8/test/testuninitvar.cpp" $, 1651 $, "[test.cpp:3]: (error) Uninitialized variable: s\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1652:
1653: $checkUninitVar_ $(@expr1073743336 "cppcheck-2.8/test/testuninitvar.cpp" $, 1653 $, "void foo()\n{\n        int y[2];\n        int s;\n        GetField( y + 0, y + 1 );\n        s = y[0] * y[1];\n}" $)
1654:
|
1658:
1659: ;
1660: $if $(@expr1073743337 $!@expr1073743338 $assertEquals $(@expr1073743339 "cppcheck-2.8/test/testuninitvar.cpp" $, 1660 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1661:
1662: $checkUninitVar_ $(@expr1073743342 "cppcheck-2.8/test/testuninitvar.cpp" $, 1662 $, "void foo()\n{\n        int a[2];\n        init(a - 1);\n        int b = a[0];\n}" $)
1663:
|
1666:
1667: ;
1668: $if $(@expr1073743343 $!@expr1073743344 $assertEquals $(@expr1073743345 "cppcheck-2.8/test/testuninitvar.cpp" $, 1668 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1669:
1670: $checkUninitVar_ $(@expr1073743348 "cppcheck-2.8/test/testuninitvar.cpp" $, 1670 $, "void foo()\n{\n        Fred a[2];\n        Fred b = a[0];\n}" $)
1671:
1672:
1673:
1674: ;
1675: $if $(@expr1073743349 $!@expr1073743350 $assertEquals $(@expr1073743351 "cppcheck-2.8/test/testuninitvar.cpp" $, 1675 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1676:
1677: $checkUninitVar_ $(@expr1073743354 "cppcheck-2.8/test/testuninitvar.cpp" $, 1677 $, "void foo() {\n  char buf[1024];\n  char *b = (char *) (((uintptr_t) buf + 63) & ~(uintptr_t) 63);\n}\n" $)
1678:
1679:
1680: ;
1681: $if $(@expr1073743355 $!@expr1073743356 $assertEquals $(@expr1073743357 "cppcheck-2.8/test/testuninitvar.cpp" $, 1681 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1682:
1683: $checkUninitVar_ $(@expr1073743360 "cppcheck-2.8/test/testuninitvar.cpp" $, 1683 $, "void foo() {\n  char buf[1024];\n  char x = *(char *) (((uintptr_t) buf + 63) & ~(uintptr_t) 63);\n}\n" $)
1684:
1685:
1686: ;
1687: $if $(@expr1073743361 $!@expr1073743362 $assertEquals $(@expr1073743363 "cppcheck-2.8/test/testuninitvar.cpp" $, 1687 $, "[test.cpp:3]: (error) Uninitialized variable: buf\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1688:
1689:
1690: $checkUninitVar_ $(@expr1073743366 "cppcheck-2.8/test/testuninitvar.cpp" $, 1690 $, "void f(int i);\nvoid foo()\n{\n    int a[10];\n    f(a[0]);\n}" $)
1691:
|
1694:
1695: ;
1696: $if $(@expr1073743367 $!@expr1073743368 $assertEquals $(@expr1073743369 "cppcheck-2.8/test/testuninitvar.cpp" $, 1696 $, "[test.cpp:5]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1697:
1698:
1699: $checkUninitVar_ $(@expr1073743372 "cppcheck-2.8/test/testuninitvar.cpp" $, 1699 $, "void foo() {\n        char a[2];\n        unsigned long b = (unsigned long)(a+2) & ~7;\n}" $)
1700:
1701:
1702: ;
1703: $if $(@expr1073743373 $!@expr1073743374 $assertEquals $(@expr1073743375 "cppcheck-2.8/test/testuninitvar.cpp" $, 1703 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1704:
1705: $checkUninitVar_ $(@expr1073743378 "cppcheck-2.8/test/testuninitvar.cpp" $, 1705 $, "void f() {\n    char a[2];\n    printf(\"%s\", a);\n}" $)
1706:
1707:
1708: ;
1709: $todoAssertEquals $(@expr1073743379 "cppcheck-2.8/test/testuninitvar.cpp" $, 1709 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) ;
1710:
1711: $checkUninitVar_ $(@expr1073743382 "cppcheck-2.8/test/testuninitvar.cpp" $, 1711 $, "void f() {\n    const char *a;\n    printf(\"%s\", a=\"abc\");\n}" $)
1712:
1713:
1714: ;
1715: $if $(@expr1073743383 $!@expr1073743384 $assertEquals $(@expr1073743385 "cppcheck-2.8/test/testuninitvar.cpp" $, 1715 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1716:
1717: $checkUninitVar_ $(@expr1073743388 "cppcheck-2.8/test/testuninitvar.cpp" $, 1717 $, "void f() {\n    char header[1];\n    *((unsigned char*)(header)) = 0xff;\n    return header[0];\n}" $)
1718:
1719:
1720:
1721: ;
1722: $if $(@expr1073743389 $!@expr1073743390 $assertEquals $(@expr1073743391 "cppcheck-2.8/test/testuninitvar.cpp" $, 1722 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1723:
1724: $checkUninitVar_ $(@expr1073743394 "cppcheck-2.8/test/testuninitvar.cpp" $, 1724 $, "void f() {\n    char header[1];\n    *((unsigned char*)((unsigned char *)(header))) = 0xff;\n    return header[0];\n}" $)
1725:
1726:
1727:
1728: ;
1729: $if $(@expr1073743395 $!@expr1073743396 $assertEquals $(@expr1073743397 "cppcheck-2.8/test/testuninitvar.cpp" $, 1729 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1730:
1731: $checkUninitVar_ $(@expr1073743400 "cppcheck-2.8/test/testuninitvar.cpp" $, 1731 $, "void f() {\n    ABC abc;\n    int a[1];\n\n    abc.a = a;\n    init(&abc);\n    return a[0];\n}" $)
1732:
|
1737:
1738: ;
1739: $if $(@expr1073743401 $!@expr1073743402 $assertEquals $(@expr1073743403 "cppcheck-2.8/test/testuninitvar.cpp" $, 1739 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1740:
1741:
1742: $checkUninitVar_ $(@expr1073743406 "cppcheck-2.8/test/testuninitvar.cpp" $, 1742 $, "void f(){\n   char *strMsg = \"This is a message\";\n   char *buffer=(char*)malloc(128*sizeof(char));\n   strcpy(strMsg,buffer);\n   free(buffer);\n}" , "test.cpp" , false $)
1743:
|
1746:
1747: ;
1748: $if $(@expr1073743407 $!@expr1073743408 $assertEquals $(@expr1073743409 "cppcheck-2.8/test/testuninitvar.cpp" $, 1748 $, "[test.cpp:4]: (error) Memory is allocated but not initialized: buffer\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1749:
1750: $checkUninitVar_ $(@expr1073743412 "cppcheck-2.8/test/testuninitvar.cpp" $, 1750 $, "void f(){\n   char *strMsg = \"This is a message\";\n   char *buffer=static_cast<char*>(malloc(128*sizeof(char)));\n   strcpy(strMsg,buffer);\n   free(buffer);\n}" , "test.cpp" , false $)
1751:
|
1754:
1755: ;
1756: $if $(@expr1073743413 $!@expr1073743414 $assertEquals $(@expr1073743415 "cppcheck-2.8/test/testuninitvar.cpp" $, 1756 $, "[test.cpp:4]: (error) Memory is allocated but not initialized: buffer\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1757:
1758:
1759: $checkUninitVar_ $(@expr1073743418 "cppcheck-2.8/test/testuninitvar.cpp" $, 1759 $, "int foo() {\n    int a[1] = {5};\n    return a[0];\n}" $)
1760:
1761:
1762: ;
1763: $if $(@expr1073743419 $!@expr1073743420 $assertEquals $(@expr1073743421 "cppcheck-2.8/test/testuninitvar.cpp" $, 1763 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1764:
1765: $checkUninitVar_ $(@expr1073743424 "cppcheck-2.8/test/testuninitvar.cpp" $, 1765 $, "int foo() {\n    int a[2][2] = {{3,4}, {5,6}};\n    return a[0][1];\n}" $)
1766:
1767:
1768: ;
1769: $if $(@expr1073743425 $!@expr1073743426 $assertEquals $(@expr1073743427 "cppcheck-2.8/test/testuninitvar.cpp" $, 1769 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1770:
1771: $checkUninitVar_ $(@expr1073743430 "cppcheck-2.8/test/testuninitvar.cpp" $, 1771 $, "int foo() {\n    int a[1];\n    return a[0];\n}" $)
1772:
1773:
1774: ;
1775: $if $(@expr1073743431 $!@expr1073743432 $assertEquals $(@expr1073743433 "cppcheck-2.8/test/testuninitvar.cpp" $, 1775 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1776:
1777: $checkUninitVar_ $(@expr1073743436 "cppcheck-2.8/test/testuninitvar.cpp" $, 1777 $, "int foo() {\n    int a[2][2];\n    return a[0][1];\n}" $)
1778:
1779:
1780: ;
1781: $if $(@expr1073743437 $!@expr1073743438 $assertEquals $(@expr1073743439 "cppcheck-2.8/test/testuninitvar.cpp" $, 1781 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1782:
1783: $checkUninitVar_ $(@expr1073743442 "cppcheck-2.8/test/testuninitvar.cpp" $, 1783 $, "int foo() {\n    int a[10];\n    dostuff(a[0]);\n}" $)
1784:
1785:
1786: ;
1787: $if $(@expr1073743443 $!@expr1073743444 $assertEquals $(@expr1073743445 "cppcheck-2.8/test/testuninitvar.cpp" $, 1787 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1788:
1789:
1790: $checkUninitVar_ $(@expr1073743448 "cppcheck-2.8/test/testuninitvar.cpp" $, 1790 $, "void f() {\n    int *a[2][19];\n    int **b = a[0];\n}" $)
1791:
1792:
1793: ;
1794: $if $(@expr1073743449 $!@expr1073743450 $assertEquals $(@expr1073743451 "cppcheck-2.8/test/testuninitvar.cpp" $, 1794 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1795:
1796:
1797: $checkUninitVar_ $(@expr1073743454 "cppcheck-2.8/test/testuninitvar.cpp" $, 1797 $, "void bar(PSTR x);\nvoid foo() {\n  char x[10];\n  bar(x);\n}" $)
1798:
1799:
1800:
1801: ;
1802: $if $(@expr1073743455 $!@expr1073743456 $assertEquals $(@expr1073743457 "cppcheck-2.8/test/testuninitvar.cpp" $, 1802 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1803:
1804:
1805: $checkUninitVar_ $(@expr1073743460 "cppcheck-2.8/test/testuninitvar.cpp" $, 1805 $, "struct Fred { int x; int y; };\nvoid f() {\n  struct Fred fred[10];\n  fred[1].x = 0;\n}" , "test.c" $)
1806:
|
1809:
1810: ;
1811: $if $(@expr1073743461 $!@expr1073743462 $assertEquals $(@expr1073743463 "cppcheck-2.8/test/testuninitvar.cpp" $, 1811 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1812:
1813: $checkUninitVar_ $(@expr1073743466 "cppcheck-2.8/test/testuninitvar.cpp" $, 1813 $, "char f() {\n    std::array<char, 1> a;\n    return a[0];\n}\n" $)
1814:
1815:
1816: ;
1817: $if $(@expr1073743467 $!@expr1073743468 $assertEquals $(@expr1073743469 "cppcheck-2.8/test/testuninitvar.cpp" $, 1817 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1818:
1819: $checkUninitVar_ $(@expr1073743472 "cppcheck-2.8/test/testuninitvar.cpp" $, 1819 $, "std::string f() {\n    std::array<std::string, 1> a;\n    return a[0];\n}\n" $)
1820:
1821:
1822: ;
1823: $if $(@expr1073743473 $!@expr1073743474 $assertEquals $(@expr1073743475 "cppcheck-2.8/test/testuninitvar.cpp" $, 1823 $, "" $, errout@var100 .@expr1434 str (@expr1435 ) $) $) { $return ; }
1824: }
1825:
1826: void uninitvar_pointertoarray ( ) {
1827: $checkUninitVar_ $(@expr1073743478 "cppcheck-2.8/test/testuninitvar.cpp" $, 1827 $, "void draw_quad(float z)  {\n    int i;\n    float (*vertices)[2][4];\n    vertices[0][0][0] = z;\n    vertices[0][0][1] = z;\n    vertices[1][0][0] = z;\n    vertices[1][0][1] = z;\n    vertices[2][0][0] = z;\n    vertices[2][0][1] = z;\n    vertices[3][0][0] = z;\n    vertices[3][0][1] = z;\n    for (i = 0; i < 4; i++) {\n        vertices[i][0][2] = z;\n        vertices[i][0][3] = 1.0;\n        vertices[i][1][0] = 2.0;\n        vertices[i][1][1] = 3.0;\n        vertices[i][1][2] = 4.0;\n        vertices[i][1][3] = 5.0;\n    }\n}" $)
1828:
|
1845:
1846: ;
1847: $if $(@expr1073743479 $!@expr1073743480 $assertEquals $(@expr1073743481 "cppcheck-2.8/test/testuninitvar.cpp" $, 1847 $, "[test.cpp:4]: (error) Uninitialized variable: vertices\n" $, errout@var100 .@expr1658 str (@expr1659 ) $) $) { $return
1848: ; }
1849:
1850: $checkUninitVar_ $(@expr1073743484 "cppcheck-2.8/test/testuninitvar.cpp" $, 1850 $, "void f() {\n    std::array<int, 3> *PArr[2] = { p0, p1 };\n    (*PArr[0])[2] = 0;\n    (*PArr[1])[2] = 0;\n}\n" $)
1851:
1852:
1853:
1854: ;
1855: $if $(@expr1073743485 $!@expr1073743486 $assertEquals $(@expr1073743487 "cppcheck-2.8/test/testuninitvar.cpp" $, 1855 $, "" $, errout@var100 .@expr1658 str (@expr1659 ) $) $) { $return ; }
1856: }
1857:
1858: void uninitvar_cpp11ArrayInit ( ) {
1859: $checkUninitVar_ $(@expr1073743490 "cppcheck-2.8/test/testuninitvar.cpp" $, 1859 $, "double foo(bool flag) {\n    double adIHPoint_local[4][4]{};\n    function(*adIHPoint_local);\n}" $)
1860:
1861:
1862: ;
1863: $if $(@expr1073743491 $!@expr1073743492 $assertEquals $(@expr1073743493 "cppcheck-2.8/test/testuninitvar.cpp" $, 1863 $, "" $, errout@var100 .@expr1073743494 str (@expr1073743495 ) $) $) { $return ; }
1864: }
1865:
1866:
1867: void uninitvar_alloc ( ) {
1868: $checkUninitVar_ $(@expr1073743496 "cppcheck-2.8/test/testuninitvar.cpp" $, 1868 $, "void f() {\n    char *s = (char *)malloc(100);\n    strcat(s, \"abc\");\n};" $)
1869:
1870:
1871: ;
1872: $if $(@expr1073743497 $!@expr1073743498 $assertEquals $(@expr1073743499 "cppcheck-2.8/test/testuninitvar.cpp" $, 1872 $, "[test.cpp:3]: (error) Memory is allocated but not initialized: s\n" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1873:
1874: $checkUninitVar_ $(@expr1073743502 "cppcheck-2.8/test/testuninitvar.cpp" $, 1874 $, "void f()\n{\n    char *s1 = new char[10];\n    char *s2 = new char[strlen(s1)];\n};" $)
1875:
1876:
1877:
1878: ;
1879: $if $(@expr1073743503 $!@expr1073743504 $assertEquals $(@expr1073743505 "cppcheck-2.8/test/testuninitvar.cpp" $, 1879 $, "[test.cpp:4]: (error) Memory is allocated but not initialized: s1\n" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1880:
1881: $checkUninitVar_ $(@expr1073743508 "cppcheck-2.8/test/testuninitvar.cpp" $, 1881 $, "void f()\n{\n    char *p = (char*)malloc(64);\n    int x = p[0];\n}" $)
1882:
1883:
1884:
1885: ;
1886: $if $(@expr1073743509 $!@expr1073743510 $assertEquals $(@expr1073743511 "cppcheck-2.8/test/testuninitvar.cpp" $, 1886 $, "[test.cpp:4]: (error) Memory is allocated but not initialized: p\n" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1887:
1888: $checkUninitVar_ $(@expr1073743514 "cppcheck-2.8/test/testuninitvar.cpp" $, 1888 $, "void f() {\n    char *p = (char*)malloc(64);\n    if (p[0]) { }\n}" $)
1889:
1890:
1891: ;
1892: $if $(@expr1073743515 $!@expr1073743516 $assertEquals $(@expr1073743517 "cppcheck-2.8/test/testuninitvar.cpp" $, 1892 $, "[test.cpp:3]: (error) Memory is allocated but not initialized: p[0]\n" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1893:
1894: $checkUninitVar_ $(@expr1073743520 "cppcheck-2.8/test/testuninitvar.cpp" $, 1894 $, "char f() {\n    char *p = (char*)malloc(64);\n    return p[0];\n}" $)
1895:
1896:
1897: ;
1898: $if $(@expr1073743521 $!@expr1073743522 $assertEquals $(@expr1073743523 "cppcheck-2.8/test/testuninitvar.cpp" $, 1898 $, "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1899:
1900: $checkUninitVar_ $(@expr1073743526 "cppcheck-2.8/test/testuninitvar.cpp" $, 1900 $, "void f()\n{\n    Fred *fred = new Fred;\n    fred->foo();\n}" $)
1901:
1902:
1903:
1904: ;
1905: $if $(@expr1073743527 $!@expr1073743528 $assertEquals $(@expr1073743529 "cppcheck-2.8/test/testuninitvar.cpp" $, 1905 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1906:
1907: $checkUninitVar_ $(@expr1073743532 "cppcheck-2.8/test/testuninitvar.cpp" $, 1907 $, "struct Fred { int i; Fred(int, float); };\nvoid f() {\n    Fred *fred = new Fred(1, 2);\n    fred->foo();\n}" $)
1908:
1909:
1910:
1911: ;
1912: $if $(@expr1073743533 $!@expr1073743534 $assertEquals $(@expr1073743535 "cppcheck-2.8/test/testuninitvar.cpp" $, 1912 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1913:
1914: $checkUninitVar_ $(@expr1073743538 "cppcheck-2.8/test/testuninitvar.cpp" $, 1914 $, "void f()\n{\n    Fred *fred = malloc(sizeof(Fred));\n    x(&fred->f);\n}" $)
1915:
1916:
1917:
1918: ;
1919: $if $(@expr1073743539 $!@expr1073743540 $assertEquals $(@expr1073743541 "cppcheck-2.8/test/testuninitvar.cpp" $, 1919 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1920:
1921: $checkUninitVar_ $(@expr1073743544 "cppcheck-2.8/test/testuninitvar.cpp" $, 1921 $, "void f()\n{\n    Fred *fred = malloc(sizeof(Fred));\n    x(fred->f);\n}" $)
1922:
1923:
1924:
1925: ;
1926: $if $(@expr1073743545 $!@expr1073743546 $assertEquals $(@expr1073743547 "cppcheck-2.8/test/testuninitvar.cpp" $, 1926 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1927:
1928: $checkUninitVar_ $(@expr1073743550 "cppcheck-2.8/test/testuninitvar.cpp" $, 1928 $, "void foo(char *s)\n{\n    char *a = malloc(100);\n    *a = *s;\n}" $)
1929:
1930:
1931:
1932: ;
1933: $if $(@expr1073743551 $!@expr1073743552 $assertEquals $(@expr1073743553 "cppcheck-2.8/test/testuninitvar.cpp" $, 1933 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1934:
1935: $checkUninitVar_ $(@expr1073743556 "cppcheck-2.8/test/testuninitvar.cpp" $, 1935 $, "void foo()\n{\n    char *a;\n    if (a);\n}" $)
1936:
1937:
1938:
1939: ;
1940: $if $(@expr1073743557 $!@expr1073743558 $assertEquals $(@expr1073743559 "cppcheck-2.8/test/testuninitvar.cpp" $, 1940 $, "[test.cpp:4]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1941:
1942: $checkUninitVar_ $(@expr1073743562 "cppcheck-2.8/test/testuninitvar.cpp" $, 1942 $, "void foo()\n{\n    char *a = malloc(100);\n    if (a);\n}" $)
1943:
1944:
1945:
1946: ;
1947: $if $(@expr1073743563 $!@expr1073743564 $assertEquals $(@expr1073743565 "cppcheck-2.8/test/testuninitvar.cpp" $, 1947 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1948:
1949: $checkUninitVar_ $(@expr1073743568 "cppcheck-2.8/test/testuninitvar.cpp" $, 1949 $, "void foo()\n{\n    ABC *abc = malloc(100);\n    abc->a = 123;\n}" $)
1950:
1951:
1952:
1953: ;
1954: $if $(@expr1073743569 $!@expr1073743570 $assertEquals $(@expr1073743571 "cppcheck-2.8/test/testuninitvar.cpp" $, 1954 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1955:
1956: $checkUninitVar_ $(@expr1073743574 "cppcheck-2.8/test/testuninitvar.cpp" $, 1956 $, "void foo()\n{\n    ABC *abc = malloc(100);\n    abc->a.word = 123;\n}" $)
1957:
1958:
1959:
1960: ;
1961: $if $(@expr1073743575 $!@expr1073743576 $assertEquals $(@expr1073743577 "cppcheck-2.8/test/testuninitvar.cpp" $, 1961 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1962:
1963: $checkUninitVar_ $(@expr1073743580 "cppcheck-2.8/test/testuninitvar.cpp" $, 1963 $, "void foo()\n{\n    ABC *abc = malloc(100);\n    abc->a = 123;\n    abc->a += 123;\n}" $)
1964:
|
1967:
1968: ;
1969: $if $(@expr1073743581 $!@expr1073743582 $assertEquals $(@expr1073743583 "cppcheck-2.8/test/testuninitvar.cpp" $, 1969 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1970:
1971: $checkUninitVar_ $(@expr1073743586 "cppcheck-2.8/test/testuninitvar.cpp" $, 1971 $, "void foo()\n{\n    ABC *abc = malloc(100);\n    free(abc);\n}" $)
1972:
1973:
1974:
1975: ;
1976: $if $(@expr1073743587 $!@expr1073743588 $assertEquals $(@expr1073743589 "cppcheck-2.8/test/testuninitvar.cpp" $, 1976 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1977:
1978: $checkUninitVar_ $(@expr1073743592 "cppcheck-2.8/test/testuninitvar.cpp" $, 1978 $, "void f()\n{\n    char *s = (char*)malloc(100);\n    if (!s)\n        return;\n    char c = *s;\n}" $)
1979:
|
1983:
1984: ;
1985: $todoAssertEquals $(@expr1073743593 "cppcheck-2.8/test/testuninitvar.cpp" $, 1985 $, "[test.cpp:6]: (error) Memory is allocated but not initialized: s\n" $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) ;
1986:
1987:
1988: $checkUninitVar_ $(@expr1073743596 "cppcheck-2.8/test/testuninitvar.cpp" $, 1988 $, "void f() {\n    uintptr_t x = malloc(100);\n    uintptr_t y = x + 10;\n}" $)
1989:
1990:
1991: ;
1992: $if $(@expr1073743597 $!@expr1073743598 $assertEquals $(@expr1073743599 "cppcheck-2.8/test/testuninitvar.cpp" $, 1992 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
1993:
1994: $checkUninitVar_ $(@expr1073743602 "cppcheck-2.8/test/testuninitvar.cpp" $, 1994 $, "void f() {\n  z_stream strm;\n  char* buf = malloc(10);\n  strm.next_out = buf;\n  deflate(&strm, Z_FINISH);\n  memcpy(body, buf, 10);\n}" $)
1995:
|
1999:
2000: ;
2001: $if $(@expr1073743603 $!@expr1073743604 $assertEquals $(@expr1073743605 "cppcheck-2.8/test/testuninitvar.cpp" $, 2001 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
2002:
2003:
2004: $checkUninitVar_ $(@expr1073743608 "cppcheck-2.8/test/testuninitvar.cpp" $, 2004 $, "struct StgStrm {\n    StgIo& rIo;\n    StgStrm(StgIo&);\n    virtual sal_Int32 Write();\n};\nvoid Tmp2Strm() {\n    StgStrm* pNewStrm;\n    if (someflag)\n        pNewStrm = new StgStrm(rIo);\n    else\n        pNewStrm = new StgStrm(rIo);\n    pNewStrm->Write();\n}" $)
2005:
|
2015:
2016: ;
2017: $if $(@expr1073743609 $!@expr1073743610 $assertEquals $(@expr1073743611 "cppcheck-2.8/test/testuninitvar.cpp" $, 2017 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
2018:
2019:
2020: $checkUninitVar_ $(@expr1073743614 "cppcheck-2.8/test/testuninitvar.cpp" $, 2020 $, "struct EMFPFont {\n    bool family;\n    void Initialize();\n};\nvoid processObjectRecord() {\n    EMFPFont *font = new EMFPFont();\n    font->Initialize();\n}" $)
2021:
|
2026:
2027: ;
2028: $if $(@expr1073743615 $!@expr1073743616 $assertEquals $(@expr1073743617 "cppcheck-2.8/test/testuninitvar.cpp" $, 2028 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
2029:
2030:
2031: $checkUninitVar_ $(@expr1073743620 "cppcheck-2.8/test/testuninitvar.cpp" $, 2031 $, "void foo(){\n    int* p1 = new int(314);\n    int* p2 = new int();\n    int* arr = new int[5]();\n    std::cout << *p1 << *p2 << arr[0];\n}" $)
2032:
|
2035:
2036: ;
2037: $if $(@expr1073743621 $!@expr1073743622 $assertEquals $(@expr1073743623 "cppcheck-2.8/test/testuninitvar.cpp" $, 2037 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
2038:
2039:
2040: $checkUninitVar_ $(@expr1073743626 "cppcheck-2.8/test/testuninitvar.cpp" $, 2040 $, "int main() {\n    char * pBuf = new(10);\n    a = *pBuf;\n}" , "test.c" $)
2041:
2042:
2043: ;
2044: $if $(@expr1073743627 $!@expr1073743628 $assertEquals $(@expr1073743629 "cppcheck-2.8/test/testuninitvar.cpp" $, 2044 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
2045:
2046: $checkUninitVar_ $(@expr1073743632 "cppcheck-2.8/test/testuninitvar.cpp" $, 2046 $, "class A {};\nvoid f() {\n    A* a = new A{};\n}\n" $)
2047:
2048:
2049: ;
2050: $if $(@expr1073743633 $!@expr1073743634 $assertEquals $(@expr1073743635 "cppcheck-2.8/test/testuninitvar.cpp" $, 2050 $, "" $, errout@var100 .@expr1676 str (@expr1677 ) $) $) { $return ; }
2051: }
2052:
2053:
2054: void uninitvar_class ( ) {
2055: $checkUninitVar_ $(@expr1073743638 "cppcheck-2.8/test/testuninitvar.cpp" $, 2055 $, "class Fred\n{\n    int i;\n    int a() { return i; }\n};" $)
2056:
2057:
2058:
2059: ;
2060: $if $(@expr1073743639 $!@expr1073743640 $assertEquals $(@expr1073743641 "cppcheck-2.8/test/testuninitvar.cpp" $, 2060 $, "" $, errout@var100 .@expr1818 str (@expr1819 ) $) $) { $return ; }
2061:
2062: $checkUninitVar_ $(@expr1073743644 "cppcheck-2.8/test/testuninitvar.cpp" $, 2062 $, "void f()\n{\n    struct Relative {\n        Surface *surface;\n        void MoveTo(int x, int y) {\n            surface->MoveTo();\n        }\n    };\n}" $)
2063:
|
2069:
2070: ;
2071: $if $(@expr1073743645 $!@expr1073743646 $assertEquals $(@expr1073743647 "cppcheck-2.8/test/testuninitvar.cpp" $, 2071 $, "" $, errout@var100 .@expr1818 str (@expr1819 ) $) $) { $return ; }
2072:
2073: $checkUninitVar_ $(@expr1073743650 "cppcheck-2.8/test/testuninitvar.cpp" $, 2073 $, "void f()\n{\n    static const struct ab {\n        int a,b;\n        int get_a() { return a; }    } = { 0, 0 };\n}" , "test.cpp" , false $)
2074:
|
2078:
2079: ;
2080: $if $(@expr1073743651 $!@expr1073743652 $assertEquals $(@expr1073743653 "cppcheck-2.8/test/testuninitvar.cpp" $, 2080 $, "" $, errout@var100 .@expr1818 str (@expr1819 ) $) $) { $return ; }
2081:
2082: $checkUninitVar_ $(@expr1073743656 "cppcheck-2.8/test/testuninitvar.cpp" $, 2082 $, "void f()\n{\n    int i;\n    {\n        union ab {\n            int a,b;\n        }\n        i = 0;\n    }\n    return i;\n}" , "test.cpp" , false $)
2083:
|
2091:
2092: ;
2093: $if $(@expr1073743657 $!@expr1073743658 $assertEquals $(@expr1073743659 "cppcheck-2.8/test/testuninitvar.cpp" $, 2093 $, "" $, errout@var100 .@expr1818 str (@expr1819 ) $) $) { $return ; }
2094:
2095: $checkUninitVar_ $(@expr1073743662 "cppcheck-2.8/test/testuninitvar.cpp" $, 2095 $, "void f(int x) {\n    struct AB ab;\n    x = ab.x = 12;\n}" $)
2096:
2097:
2098: ;
2099: $if $(@expr1073743663 $!@expr1073743664 $assertEquals $(@expr1073743665 "cppcheck-2.8/test/testuninitvar.cpp" $, 2099 $, "" $, errout@var100 .@expr1818 str (@expr1819 ) $) $) { $return ; }
2100: }
2101:
2102:
2103: void uninitvar_enum ( ) {
2104: $checkUninitVar_ $(@expr1073743668 "cppcheck-2.8/test/testuninitvar.cpp" $, 2104 $, "void f()\n{\n    enum AB { a, b };\n    AB ab;\n    if (ab);\n}" $)
2105:
|
2108:
2109: ;
2110: $if $(@expr1073743669 $!@expr1073743670 $assertEquals $(@expr1073743671 "cppcheck-2.8/test/testuninitvar.cpp" $, 2110 $, "[test.cpp:5]: (error) Uninitialized variable: ab\n" $, errout@var100 .@expr1073743672 str (@expr1073743673 ) $) $) { $return ; }
2111: }
2112:
2113:
2114: void uninitvar_references ( ) {
2115: $checkUninitVar_ $(@expr1073743674 "cppcheck-2.8/test/testuninitvar.cpp" $, 2115 $, "void f()\n{\n    int a;\n    int &b = a;\n    b = 0;\n    int x = a;\n}" , "test.cpp" , false $)
2116:
|
2120:
2121: ;
2122: $if $(@expr1073743675 $!@expr1073743676 $assertEquals $(@expr1073743677 "cppcheck-2.8/test/testuninitvar.cpp" $, 2122 $, "" $, errout@var100 .@expr1854 str (@expr1855 ) $) $) { $return ; }
2123:
2124: $checkUninitVar_ $(@expr1073743680 "cppcheck-2.8/test/testuninitvar.cpp" $, 2124 $, "void f(struct blame_entry *ent)\n{\n    struct origin *suspect = ent->suspect;\n    char hex[41];\n    strcpy(hex, sha1_to_hex(suspect->commit->object.sha1));\n}" $)
2125:
|
2128:
2129: ;
2130: $if $(@expr1073743681 $!@expr1073743682 $assertEquals $(@expr1073743683 "cppcheck-2.8/test/testuninitvar.cpp" $, 2130 $, "" $, errout@var100 .@expr1854 str (@expr1855 ) $) $) { $return ; }
2131:
2132: $checkUninitVar_ $(@expr1073743686 "cppcheck-2.8/test/testuninitvar.cpp" $, 2132 $, "void foo()\n{\n    const std::string s(x());\n    strchr(s.c_str(), ',');\n}" $)
2133:
2134:
2135:
2136: ;
2137: $if $(@expr1073743687 $!@expr1073743688 $assertEquals $(@expr1073743689 "cppcheck-2.8/test/testuninitvar.cpp" $, 2137 $, "" $, errout@var100 .@expr1854 str (@expr1855 ) $) $) { $return ; }
2138:
2139:
2140: $checkUninitVar_ $(@expr1073743692 "cppcheck-2.8/test/testuninitvar.cpp" $, 2140 $, "void f() {\n    struct thing { int value; };\n    thing it;\n    int& referenced_int = it.value;\n    referenced_int = 123;\n}" $)
2141:
|
2144:
2145: ;
2146: $if $(@expr1073743693 $!@expr1073743694 $assertEquals $(@expr1073743695 "cppcheck-2.8/test/testuninitvar.cpp" $, 2146 $, "" $, errout@var100 .@expr1854 str (@expr1855 ) $) $) { $return ; }
2147: }
2148:
2149: void uninitvar_return ( ) {
2150:
2151: $checkUninitVar_ $(@expr1073743698 "cppcheck-2.8/test/testuninitvar.cpp" $, 2151 $, "static int foo() {\n    int ret;\n    return ret;\n}" $)
2152:
2153:
2154: ;
2155: $if $(@expr1073743699 $!@expr1073743700 $assertEquals $(@expr1073743701 "cppcheck-2.8/test/testuninitvar.cpp" $, 2155 $, "[test.cpp:3]: (error) Uninitialized variable: ret\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2156:
2157: $checkUninitVar_ $(@expr1073743704 "cppcheck-2.8/test/testuninitvar.cpp" $, 2157 $, "static int foo() {\n    int ret;\n    return ret+5;\n}" $)
2158:
2159:
2160: ;
2161: $if $(@expr1073743705 $!@expr1073743706 $assertEquals $(@expr1073743707 "cppcheck-2.8/test/testuninitvar.cpp" $, 2161 $, "[test.cpp:3]: (error) Uninitialized variable: ret\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2162:
2163: $checkUninitVar_ $(@expr1073743710 "cppcheck-2.8/test/testuninitvar.cpp" $, 2163 $, "static int foo() {\n    int ret;\n    return ret = 5;\n}" $)
2164:
2165:
2166: ;
2167: $if $(@expr1073743711 $!@expr1073743712 $assertEquals $(@expr1073743713 "cppcheck-2.8/test/testuninitvar.cpp" $, 2167 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2168:
2169: {
2170: $checkUninitVar_ $(@expr1073743716 "cppcheck-2.8/test/testuninitvar.cpp" $, 2170 $, "static int foo() {\n    int ret;\n    cin >> ret;\n    return ret;\n}" $)
2171:
2172:
2173:
2174: ;
2175: $if $(@expr1073743717 $!@expr1073743718 $assertEquals $(@expr1073743719 "cppcheck-2.8/test/testuninitvar.cpp" $, 2175 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2176:
2177: $checkUninitVar_ $(@expr1073743722 "cppcheck-2.8/test/testuninitvar.cpp" $, 2177 $, "static int foo() {\n    int ret;\n    return cin >> ret;\n}\n" , "test.c" $)
2178:
2179:
2180: ;
2181: $if $(@expr1073743723 $!@expr1073743724 $assertEquals $(@expr1073743725 "cppcheck-2.8/test/testuninitvar.cpp" $, 2181 $, "[test.c:3]: (error) Uninitialized variable: ret\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2182: }
2183:
2184:
2185: {
2186: $checkUninitVar_ $(@expr1073743728 "cppcheck-2.8/test/testuninitvar.cpp" $, 2186 $, "wchar_t f() { int i; return btowc(i); }" $) ;
2187: $if $(@expr1073743729 $!@expr1073743730 $assertEquals $(@expr1073743731 "cppcheck-2.8/test/testuninitvar.cpp" $, 2187 $, "[test.cpp:1]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2188:
2189: $checkUninitVar_ $(@expr1073743734 "cppcheck-2.8/test/testuninitvar.cpp" $, 2189 $, "wchar_t f(int i) { return btowc(i); }" $) ;
2190: $if $(@expr1073743735 $!@expr1073743736 $assertEquals $(@expr1073743737 "cppcheck-2.8/test/testuninitvar.cpp" $, 2190 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2191:
2192:
2193: $checkUninitVar_ $(@expr1073743740 "cppcheck-2.8/test/testuninitvar.cpp" $, 2193 $, "void setvalue(int &x) {\n  x = 0;\n  return 123;\n}\nint f() {\n  int x;\n  return setvalue(x);\n}" $)
2194:
|
2200:
2201: ;
2202: $if $(@expr1073743741 $!@expr1073743742 $assertEquals $(@expr1073743743 "cppcheck-2.8/test/testuninitvar.cpp" $, 2202 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2203: }
2204:
2205:
2206: {
2207: $checkUninitVar_ $(@expr1073743746 "cppcheck-2.8/test/testuninitvar.cpp" $, 2207 $, "void f(bool b) {\n    double f;\n    if (b)   {  }\n    else  {\n        f = 0.0;\n    }\n    printf (\"%f\",f);\n}" $)
2208:
|
2213:
2214: ;
2215: $if $(@expr1073743747 $!@expr1073743748 $assertEquals $(@expr1073743749 "cppcheck-2.8/test/testuninitvar.cpp" $, 2215 $, "[test.cpp:7]: (error) Uninitialized variable: f\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2216:
2217:
2218: $checkUninitVar_ $(@expr1073743752 "cppcheck-2.8/test/testuninitvar.cpp" $, 2218 $, "void f(bool b) {\n    double f;\n    if (b)   { f = 1.0 }\n    else  {\n        f = 0.0;\n    }\n    printf (\"%f\",f);\n}" $)
2219:
|
2224:
2225: ;
2226: $if $(@expr1073743753 $!@expr1073743754 $assertEquals $(@expr1073743755 "cppcheck-2.8/test/testuninitvar.cpp" $, 2226 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2227: }
2228:
2229:
2230: $checkUninitVar_ $(@expr1073743758 "cppcheck-2.8/test/testuninitvar.cpp" $, 2230 $, "int f(int x) {\n    int y;\n    return x ? 1 : y;\n}" $)
2231:
2232:
2233: ;
2234: $if $(@expr1073743759 $!@expr1073743760 $assertEquals $(@expr1073743761 "cppcheck-2.8/test/testuninitvar.cpp" $, 2234 $, "[test.cpp:3]: (error) Uninitialized variable: y\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2235:
2236:
2237: {
2238: $checkUninitVar_ $(@expr1073743764 "cppcheck-2.8/test/testuninitvar.cpp" $, 2238 $, "int f() {\n    int i;\n    return x(&i) ? i : 0;\n}" $)
2239:
2240:
2241: ;
2242: $if $(@expr1073743765 $!@expr1073743766 $assertEquals $(@expr1073743767 "cppcheck-2.8/test/testuninitvar.cpp" $, 2242 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2243:
2244: $checkUninitVar_ $(@expr1073743770 "cppcheck-2.8/test/testuninitvar.cpp" $, 2244 $, "int f() {\n    int i;\n    return x() ? i : 0;\n}" $)
2245:
2246:
2247: ;
2248: $if $(@expr1073743771 $!@expr1073743772 $assertEquals $(@expr1073743773 "cppcheck-2.8/test/testuninitvar.cpp" $, 2248 $, "[test.cpp:3]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2249: }
2250: }
2251:
2252: void uninitvar_assign ( ) {
2253:
2254: $checkUninitVar_ $(@expr1073743776 "cppcheck-2.8/test/testuninitvar.cpp" $, 2254 $, "char a()\n{\n    char key;\n    struct A msg = { .buf = {&key} };\n    init(&msg);\n    key++;\n}" $)
2255:
|
2259:
2260: ;
2261: $if $(@expr1073743777 $!@expr1073743778 $assertEquals $(@expr1073743779 "cppcheck-2.8/test/testuninitvar.cpp" $, 2261 $, "" $, errout@var100 .@expr1956 str (@expr1957 ) $) $) { $return ; }
2262:
2263:
2264: $checkUninitVar_ $(@expr1073743782 "cppcheck-2.8/test/testuninitvar.cpp" $, 2264 $, "int f() {\n    int result;\n    int *res[] = {&result};\n    foo(res);\n    return result;\n}" $)
2265:
|
2268:
2269: ;
2270: $if $(@expr1073743783 $!@expr1073743784 $assertEquals $(@expr1073743785 "cppcheck-2.8/test/testuninitvar.cpp" $, 2270 $, "" $, errout@var100 .@expr1956 str (@expr1957 ) $) $) { $return ; }
2271:
2272:
2273: $checkUninitVar_ $(@expr1073743788 "cppcheck-2.8/test/testuninitvar.cpp" $, 2273 $, "int f() {\n    char a[10];\n    char *b[] = {a};\n    foo(b);\n    return atoi(a);\n}" $)
2274:
|
2277:
2278: ;
2279: $if $(@expr1073743789 $!@expr1073743790 $assertEquals $(@expr1073743791 "cppcheck-2.8/test/testuninitvar.cpp" $, 2279 $, "" $, errout@var100 .@expr1956 str (@expr1957 ) $) $) { $return ; }
2280:
2281:
2282: $checkUninitVar_ $(@expr1073743794 "cppcheck-2.8/test/testuninitvar.cpp" $, 2282 $, "int f() {\n    int a;\n    int *p[] = { &a };\n    *p[0] = 0;\n    return a;\n}" $)
2283:
|
2286:
2287: ;
2288: $if $(@expr1073743795 $!@expr1073743796 $assertEquals $(@expr1073743797 "cppcheck-2.8/test/testuninitvar.cpp" $, 2288 $, "" $, errout@var100 .@expr1956 str (@expr1957 ) $) $) { $return ; }
2289:
2290: }
2291:
2292:
2293: void uninitvar_strncpy ( ) {
2294:
2295:
2296:
2297: $checkUninitVar_ $(@expr1073743800 "cppcheck-2.8/test/testuninitvar.cpp" $, 2297 $, "void f()\n{\n    char a[100];\n    strncpy(a, s, 20);\n    strncat(a, s, 20);\n}" $)
2298:
|
2301:
2302: ;
2303: $todoAssertEquals $(@expr1073743801 "cppcheck-2.8/test/testuninitvar.cpp" $, 2303 $, "[test.cpp:5]: (error) Dangerous usage of 'a' (strncpy doesn't always null-terminate it).\n" $, "" $, errout@var100 .@expr1978 str (@expr1979 ) $) ;
2304:
2305: $checkUninitVar_ $(@expr1073743804 "cppcheck-2.8/test/testuninitvar.cpp" $, 2305 $, "void f()\n{\n    char a[100];\n    strncpy(a, \"hello\", 3);\n    strncat(a, \"world\", 20);\n}" $)
2306:
|
2309:
2310: ;
2311: $todoAssertEquals $(@expr1073743805 "cppcheck-2.8/test/testuninitvar.cpp" $, 2311 $, "[test.cpp:5]: (error) Dangerous usage of 'a' (strncpy doesn't always null-terminate it).\n" $, "" $, errout@var100 .@expr1978 str (@expr1979 ) $) ;
2312:
2313: $checkUninitVar_ $(@expr1073743808 "cppcheck-2.8/test/testuninitvar.cpp" $, 2313 $, "void f()\n{\n    char a[100];\n    strncpy(a, \"hello\", sizeof(a));\n    strncat(a, \"world\", 20);\n}" , "test.cpp" , false $)
2314:
|
2317:
2318: ;
2319: $if $(@expr1073743809 $!@expr1073743810 $assertEquals $(@expr1073743811 "cppcheck-2.8/test/testuninitvar.cpp" $, 2319 $, "" $, errout@var100 .@expr1978 str (@expr1979 ) $) $) { $return ; }
2320:
2321:
2322: {
2323: $checkUninitVar_ $(@expr1073743814 "cppcheck-2.8/test/testuninitvar.cpp" $, 2323 $, "void f() {\n    char a[100];\n    strncpy(a,p,10);\n    memcmp(a,q,10);\n}" $)
2324:
2325:
2326:
2327: ;
2328: $if $(@expr1073743815 $!@expr1073743816 $assertEquals $(@expr1073743817 "cppcheck-2.8/test/testuninitvar.cpp" $, 2328 $, "" $, errout@var100 .@expr1978 str (@expr1979 ) $) $) { $return ; }
2329:
2330: $checkUninitVar_ $(@expr1073743820 "cppcheck-2.8/test/testuninitvar.cpp" $, 2330 $, "void f() {\n    char a[100];\n    strncpy(a,p,10);\n    if (memcmp(a,q,10)==0);\n}" $)
2331:
2332:
2333:
2334: ;
2335: $if $(@expr1073743821 $!@expr1073743822 $assertEquals $(@expr1073743823 "cppcheck-2.8/test/testuninitvar.cpp" $, 2335 $, "" $, errout@var100 .@expr1978 str (@expr1979 ) $) $) { $return ; }
2336: }
2337:
2338:
2339: $checkUninitVar_ $(@expr1073743826 "cppcheck-2.8/test/testuninitvar.cpp" $, 2339 $, "void f(const char dev[], char *str) {\n    char buf[10];\n    strncpy(buf, dev, 10);\n    strncpy(str, buf, 10);\n}" $)
2340:
2341:
2342:
2343: ;
2344: $if $(@expr1073743827 $!@expr1073743828 $assertEquals $(@expr1073743829 "cppcheck-2.8/test/testuninitvar.cpp" $, 2344 $, "" $, errout@var100 .@expr1978 str (@expr1979 ) $) $) { $return ; }
2345:
2346: $checkUninitVar_ $(@expr1073743832 "cppcheck-2.8/test/testuninitvar.cpp" $, 2346 $, "void f() {\n  char dst[4];\n  const char* source = \"You\";\n  strncpy(dst, source, sizeof(dst));\n  char value = dst[2];\n}" , "test.cpp" , false $)
2347:
|
2350:
2351: ;
2352: $if $(@expr1073743833 $!@expr1073743834 $assertEquals $(@expr1073743835 "cppcheck-2.8/test/testuninitvar.cpp" $, 2352 $, "" $, errout@var100 .@expr1978 str (@expr1979 ) $) $) { $return ; }
2353: }
2354:
2355:
2356: void func_uninit_var ( ) {
2357: const std ::@expr1073743838 string funca@var117 (@expr1073743839 "int a(int x) { return x + x; }" ) ;
2358:
2359: $checkUninitVar_ $(@expr1073743840 "cppcheck-2.8/test/testuninitvar.cpp" $, 2359 $, (@expr1073743841 funca@var117 +@expr1073743842 "void b() {\n    int x;\n    a(x);\n}" ) .@expr1073743843 c_str (@expr1073743844 ) $)
2360:
2361:
2362:
2363: ;
2364: $if $(@expr1073743845 $!@expr1073743846 $assertEquals $(@expr1073743847 "cppcheck-2.8/test/testuninitvar.cpp" $, 2364 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2024 str (@expr2025 ) $) $) { $return ; }
2365:
2366: $checkUninitVar_ $(@expr1073743850 "cppcheck-2.8/test/testuninitvar.cpp" $, 2366 $, (@expr1073743851 funca@var117 +@expr1073743852 "void b() {\n    int *p;\n    a(*p);\n}" ) .@expr1073743853 c_str (@expr1073743854 ) $)
2367:
2368:
2369:
2370: ;
2371: $if $(@expr1073743855 $!@expr1073743856 $assertEquals $(@expr1073743857 "cppcheck-2.8/test/testuninitvar.cpp" $, 2371 $, "[test.cpp:3]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr2024 str (@expr2025 ) $) $) { $return ; }
2372: }
2373:
2374:
2375:
2376: void func_uninit_pointer ( ) {
2377: const std ::@expr1073743860 string funca@var118 (@expr1073743861 "void a(int *p) { *p = 0; }" ) ;
2378:
2379:
2380: $checkUninitVar_ $(@expr1073743862 "cppcheck-2.8/test/testuninitvar.cpp" $, 2380 $, (@expr1073743863 funca@var118 +@expr1073743864 "void b() {\n    int buf[10];\n    a(buf);\n}" ) .@expr1073743865 c_str (@expr1073743866 ) $)
2381:
2382:
2383:
2384: ;
2385: $if $(@expr1073743867 $!@expr1073743868 $assertEquals $(@expr1073743869 "cppcheck-2.8/test/testuninitvar.cpp" $, 2385 $, "" $, errout@var100 .@expr2046 str (@expr2047 ) $) $) { $return ; }
2386:
2387:
2388: $checkUninitVar_ $(@expr1073743872 "cppcheck-2.8/test/testuninitvar.cpp" $, 2388 $, (@expr1073743873 funca@var118 +@expr1073743874 "void b() {\n    int *p;\n    a(p);\n}" ) .@expr1073743875 c_str (@expr1073743876 ) $)
2389:
2390:
2391:
2392: ;
2393: $if $(@expr1073743877 $!@expr1073743878 $assertEquals $(@expr1073743879 "cppcheck-2.8/test/testuninitvar.cpp" $, 2393 $, "[test.cpp:3]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr2046 str (@expr2047 ) $) $) { $return ; }
2394: }
2395:
2396: void uninitvar_typeof ( ) {
2397: $checkUninitVar_ $(@expr1073743882 "cppcheck-2.8/test/testuninitvar.cpp" $, 2397 $, "void f() {\n    struct Fred *fred;\n    typeof(fred->x);\n}" $)
2398:
2399:
2400: ;
2401: $if $(@expr1073743883 $!@expr1073743884 $assertEquals $(@expr1073743885 "cppcheck-2.8/test/testuninitvar.cpp" $, 2401 $, "" $, errout@var100 .@expr2062 str (@expr2063 ) $) $) { $return ; }
2402:
2403: $checkUninitVar_ $(@expr1073743888 "cppcheck-2.8/test/testuninitvar.cpp" $, 2403 $, "void f() {\n    struct SData * s;\n    ab(typeof(s->status));\n}" $)
2404:
2405:
2406: ;
2407: $if $(@expr1073743889 $!@expr1073743890 $assertEquals $(@expr1073743891 "cppcheck-2.8/test/testuninitvar.cpp" $, 2407 $, "" $, errout@var100 .@expr2062 str (@expr2063 ) $) $) { $return ; }
2408:
2409: $checkUninitVar_ $(@expr1073743894 "cppcheck-2.8/test/testuninitvar.cpp" $, 2409 $, "void f() {\n    struct SData * s;\n    TYPEOF(s->status);\n}" $)
2410:
2411:
2412: ;
2413: $todoAssertEquals $(@expr1073743895 "cppcheck-2.8/test/testuninitvar.cpp" $, 2413 $, "" $, "[test.cpp:3]: (error) Uninitialized variable: s\n" $, errout@var100 .@expr2062 str (@expr2063 ) $) ;
2414:
2415: $checkUninitVar_ $(@expr1073743898 "cppcheck-2.8/test/testuninitvar.cpp" $, 2415 $, "void f() {\n    int *n = ({ typeof(*n) z;  (typeof(*n)*)z; })\n}" , "test.cpp" , false $)
2416:
2417: ;
2418: $if $(@expr1073743899 $!@expr1073743900 $assertEquals $(@expr1073743901 "cppcheck-2.8/test/testuninitvar.cpp" $, 2418 $, "" $, errout@var100 .@expr2062 str (@expr2063 ) $) $) { $return ; }
2419: }
2420:
2421: void uninitvar_ignore ( ) {
2422: $checkUninitVar_ $(@expr1073743904 "cppcheck-2.8/test/testuninitvar.cpp" $, 2422 $, "void foo() {\n  int i;\n  dostuff((int&)i, 0);\n}" $)
2423:
2424:
2425: ;
2426: $if $(@expr1073743905 $!@expr1073743906 $assertEquals $(@expr1073743907 "cppcheck-2.8/test/testuninitvar.cpp" $, 2426 $, "" $, errout@var100 .@expr2084 str (@expr2085 ) $) $) { $return ; }
2427:
2428: $checkUninitVar_ $(@expr1073743910 "cppcheck-2.8/test/testuninitvar.cpp" $, 2428 $, "int foo() {\n  int i;\n  return (int&)i + 2;\n}" $)
2429:
2430:
2431: ;
2432: $if $(@expr1073743911 $!@expr1073743912 $assertEquals $(@expr1073743913 "cppcheck-2.8/test/testuninitvar.cpp" $, 2432 $, "[test.cpp:3]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr2084 str (@expr2085 ) $) $) { $return ; }
2433:
2434: $checkUninitVar_ $(@expr1073743916 "cppcheck-2.8/test/testuninitvar.cpp" $, 2434 $, "void foo() {\n  int i;\n  dostuff(*&i, 0);\n}" $)
2435:
2436:
2437: ;
2438: $if $(@expr1073743917 $!@expr1073743918 $assertEquals $(@expr1073743919 "cppcheck-2.8/test/testuninitvar.cpp" $, 2438 $, "" $, errout@var100 .@expr2084 str (@expr2085 ) $) $) { $return ; }
2439:
2440: $checkUninitVar_ $(@expr1073743922 "cppcheck-2.8/test/testuninitvar.cpp" $, 2440 $, "int foo() {\n  int i;\n  return *&i;\n}" $)
2441:
2442:
2443: ;
2444: $if $(@expr1073743923 $!@expr1073743924 $assertEquals $(@expr1073743925 "cppcheck-2.8/test/testuninitvar.cpp" $, 2444 $, "[test.cpp:3]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr2084 str (@expr2085 ) $) $) { $return ; }
2445: }
2446:
2447: void uninitvar2 ( ) {
2448:
2449: $checkUninitVar_ $(@expr1073743928 "cppcheck-2.8/test/testuninitvar.cpp" $, 2449 $, "void f() {\n    int x;\n    x++;\n}" $)
2450:
2451:
2452: ;
2453: $if $(@expr1073743929 $!@expr1073743930 $assertEquals $(@expr1073743931 "cppcheck-2.8/test/testuninitvar.cpp" $, 2453 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2454:
2455:
2456: $checkUninitVar_ $(@expr1073743934 "cppcheck-2.8/test/testuninitvar.cpp" $, 2456 $, "void f() {\n    int x;\n    str[x] = 0;\n}" $)
2457:
2458:
2459: ;
2460: $if $(@expr1073743935 $!@expr1073743936 $assertEquals $(@expr1073743937 "cppcheck-2.8/test/testuninitvar.cpp" $, 2460 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2461:
2462: $checkUninitVar_ $(@expr1073743940 "cppcheck-2.8/test/testuninitvar.cpp" $, 2462 $, "void f() {\n    int buf[12];\n    printf (\"%d\", buf[0] );\n}" $)
2463:
2464:
2465: ;
2466: $if $(@expr1073743941 $!@expr1073743942 $assertEquals $(@expr1073743943 "cppcheck-2.8/test/testuninitvar.cpp" $, 2466 $, "[test.cpp:3]: (error) Uninitialized variable: buf\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2467:
2468: $checkUninitVar_ $(@expr1073743946 "cppcheck-2.8/test/testuninitvar.cpp" $, 2468 $, "void f() {\n    int x;\n    int y = x & 3;\n}" $)
2469:
2470:
2471: ;
2472: $if $(@expr1073743947 $!@expr1073743948 $assertEquals $(@expr1073743949 "cppcheck-2.8/test/testuninitvar.cpp" $, 2472 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2473:
2474: $checkUninitVar_ $(@expr1073743952 "cppcheck-2.8/test/testuninitvar.cpp" $, 2474 $, "void f() {\n    int x;\n    int y = 3 & x;\n}" $)
2475:
2476:
2477: ;
2478: $if $(@expr1073743953 $!@expr1073743954 $assertEquals $(@expr1073743955 "cppcheck-2.8/test/testuninitvar.cpp" $, 2478 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2479:
2480: $checkUninitVar_ $(@expr1073743958 "cppcheck-2.8/test/testuninitvar.cpp" $, 2480 $, "void f() {\n    int x;\n    x = 3 + x;\n}" $)
2481:
2482:
2483: ;
2484: $if $(@expr1073743959 $!@expr1073743960 $assertEquals $(@expr1073743961 "cppcheck-2.8/test/testuninitvar.cpp" $, 2484 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2485:
2486: $checkUninitVar_ $(@expr1073743964 "cppcheck-2.8/test/testuninitvar.cpp" $, 2486 $, "void f() {\n    int x;\n    x = x;\n}" $)
2487:
2488:
2489: ;
2490: $if $(@expr1073743965 $!@expr1073743966 $assertEquals $(@expr1073743967 "cppcheck-2.8/test/testuninitvar.cpp" $, 2490 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2491:
2492:
2493: $checkUninitVar_ $(@expr1073743970 "cppcheck-2.8/test/testuninitvar.cpp" $, 2493 $, "void f() {\n    struct ABC *abc;\n    abc->a = 0;\n}" $)
2494:
2495:
2496: ;
2497: $if $(@expr1073743971 $!@expr1073743972 $assertEquals $(@expr1073743973 "cppcheck-2.8/test/testuninitvar.cpp" $, 2497 $, "[test.cpp:3]: (error) Uninitialized variable: abc\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2498:
2499: $checkUninitVar_ $(@expr1073743976 "cppcheck-2.8/test/testuninitvar.cpp" $, 2499 $, "int f() {\n    static int x;\n    return ++x;\n}" $)
2500:
2501:
2502: ;
2503: $if $(@expr1073743977 $!@expr1073743978 $assertEquals $(@expr1073743979 "cppcheck-2.8/test/testuninitvar.cpp" $, 2503 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2504:
2505: $checkUninitVar_ $(@expr1073743982 "cppcheck-2.8/test/testuninitvar.cpp" $, 2505 $, "int f() {\n    extern int x;\n    return ++x;\n}" $)
2506:
2507:
2508: ;
2509: $if $(@expr1073743983 $!@expr1073743984 $assertEquals $(@expr1073743985 "cppcheck-2.8/test/testuninitvar.cpp" $, 2509 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2510:
2511: $checkUninitVar_ $(@expr1073743988 "cppcheck-2.8/test/testuninitvar.cpp" $, 2511 $, "void f() {\n    int x;\n    *(((char *)&x) + 0) = 0;\n}" , "test.c" , false $)
2512:
2513:
2514: ;
2515: $if $(@expr1073743989 $!@expr1073743990 $assertEquals $(@expr1073743991 "cppcheck-2.8/test/testuninitvar.cpp" $, 2515 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2516:
2517: $checkUninitVar_ $(@expr1073743994 "cppcheck-2.8/test/testuninitvar.cpp" $, 2517 $, "void f() {\n    int x;\n    do_something(&((char*)&x)[0], 1);\n}" $)
2518:
2519:
2520: ;
2521: $if $(@expr1073743995 $!@expr1073743996 $assertEquals $(@expr1073743997 "cppcheck-2.8/test/testuninitvar.cpp" $, 2521 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2522:
2523: $checkUninitVar_ $(@expr1073744000 "cppcheck-2.8/test/testuninitvar.cpp" $, 2523 $, "void f() {\n    int x;\n    char *p = (char*)&x + 1;\n}" , "test.cpp" , false $)
2524:
2525:
2526: ;
2527: $if $(@expr1073744001 $!@expr1073744002 $assertEquals $(@expr1073744003 "cppcheck-2.8/test/testuninitvar.cpp" $, 2527 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2528:
2529: $checkUninitVar_ $(@expr1073744006 "cppcheck-2.8/test/testuninitvar.cpp" $, 2529 $, "void f() {\n    int i;\n    i=f(), i!=2;\n}" $)
2530:
2531:
2532: ;
2533: $if $(@expr1073744007 $!@expr1073744008 $assertEquals $(@expr1073744009 "cppcheck-2.8/test/testuninitvar.cpp" $, 2533 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2534:
2535:
2536: $checkUninitVar_ $(@expr1073744012 "cppcheck-2.8/test/testuninitvar.cpp" $, 2536 $, "void f(void) {\n    int x;\n    if (x) { }\n}" $)
2537:
2538:
2539: ;
2540: $if $(@expr1073744013 $!@expr1073744014 $assertEquals $(@expr1073744015 "cppcheck-2.8/test/testuninitvar.cpp" $, 2540 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2541:
2542: $checkUninitVar_ $(@expr1073744018 "cppcheck-2.8/test/testuninitvar.cpp" $, 2542 $, "void f() {\n    int x;\n    if (1 == (3 & x)) { }\n}" $)
2543:
2544:
2545: ;
2546: $if $(@expr1073744019 $!@expr1073744020 $assertEquals $(@expr1073744021 "cppcheck-2.8/test/testuninitvar.cpp" $, 2546 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2547:
2548:
2549: $checkUninitVar_ $(@expr1073744024 "cppcheck-2.8/test/testuninitvar.cpp" $, 2549 $, "int f(int *ptr) {\n    int a;\n    int *p = ptr ? ptr : &a;\n}" $)
2550:
2551:
2552: ;
2553: $if $(@expr1073744025 $!@expr1073744026 $assertEquals $(@expr1073744027 "cppcheck-2.8/test/testuninitvar.cpp" $, 2553 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2554:
2555: $checkUninitVar_ $(@expr1073744030 "cppcheck-2.8/test/testuninitvar.cpp" $, 2555 $, "int f(int a) {\n    int x;\n    if (a==3) { x=2; }\n    y = (a==3) ? x : a;\n}" $)
2556:
2557:
2558:
2559: ;
2560: $if $(@expr1073744031 $!@expr1073744032 $assertEquals $(@expr1073744033 "cppcheck-2.8/test/testuninitvar.cpp" $, 2560 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2561:
2562:
2563: $checkUninitVar_ $(@expr1073744036 "cppcheck-2.8/test/testuninitvar.cpp" $, 2563 $, "void f() {\n    int x = ({ 1 + 2; });\n    int y = 1 + (x ? y : y);\n}" $)
2564:
2565:
2566: ;
2567: $if $(@expr1073744037 $!@expr1073744038 $assertEquals $(@expr1073744039 "cppcheck-2.8/test/testuninitvar.cpp" $, 2567 $, "[test.cpp:3]: (error) Uninitialized variable: y\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2568:
2569:
2570: {
2571: const char code@var119 [@expr1073744042 44 ] =@expr1073744043 "void f() {\n    int x;\n    if (i >> x) { }\n}"
2572:
2573:
2574: ;
2575: $checkUninitVar_ $(@expr1073744044 "cppcheck-2.8/test/testuninitvar.cpp" $, 2575 $, code@var119 , "test.cpp" $) ;
2576: $if $(@expr1073744045 $!@expr1073744046 $assertEquals $(@expr1073744047 "cppcheck-2.8/test/testuninitvar.cpp" $, 2576 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2577:
2578: $checkUninitVar_ $(@expr1073744050 "cppcheck-2.8/test/testuninitvar.cpp" $, 2578 $, code@var119 , "test.c" $) ;
2579: $if $(@expr1073744051 $!@expr1073744052 $assertEquals $(@expr1073744053 "cppcheck-2.8/test/testuninitvar.cpp" $, 2579 $, "[test.c:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2580: }
2581:
2582: $checkUninitVar_ $(@expr1073744056 "cppcheck-2.8/test/testuninitvar.cpp" $, 2582 $, "void f() {\n    int i, i2;\n    strm >> i >> i2;\n}" $)
2583:
2584:
2585: ;
2586: $if $(@expr1073744057 $!@expr1073744058 $assertEquals $(@expr1073744059 "cppcheck-2.8/test/testuninitvar.cpp" $, 2586 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2587:
2588:
2589: $checkUninitVar_ $(@expr1073744062 "cppcheck-2.8/test/testuninitvar.cpp" $, 2589 $, "int f() {\n    int ret;\n    if (a) { ret = 1; }\n    else { {} ret = 2; }\n    return ret;\n}" $)
2590:
|
2593:
2594: ;
2595: $if $(@expr1073744063 $!@expr1073744064 $assertEquals $(@expr1073744065 "cppcheck-2.8/test/testuninitvar.cpp" $, 2595 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2596:
2597: $checkUninitVar_ $(@expr1073744068 "cppcheck-2.8/test/testuninitvar.cpp" $, 2597 $, "int f() {\n    int ret;\n    if (a) { ret = 1; }\n    else { s=foo(1,{2,3},4); ret = 2; }\n    return ret;\n}" $)
2598:
|
2601:
2602: ;
2603: $if $(@expr1073744069 $!@expr1073744070 $assertEquals $(@expr1073744071 "cppcheck-2.8/test/testuninitvar.cpp" $, 2603 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2604:
2605:
2606: $checkUninitVar_ $(@expr1073744074 "cppcheck-2.8/test/testuninitvar.cpp" $, 2606 $, "void f() {\n    int x;\n    if (y == 1) { x = 1; }\n    else { if (y == 2) { x = 1; } }\n    return x;\n}" $)
2607:
|
2610:
2611: ;
2612: $if $(@expr1073744075 $!@expr1073744076 $assertEquals $(@expr1073744077 "cppcheck-2.8/test/testuninitvar.cpp" $, 2612 $, "[test.cpp:5]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2613:
2614: $checkUninitVar_ $(@expr1073744080 "cppcheck-2.8/test/testuninitvar.cpp" $, 2614 $, "void f() {\n    int x;\n    if (y == 1) { x = 1; }\n    else { if (y == 2) { x = 1; } }\n    if (y == 3) { }\n    return x;\n}" $)
2615:
|
2619:
2620: ;
2621: $if $(@expr1073744081 $!@expr1073744082 $assertEquals $(@expr1073744083 "cppcheck-2.8/test/testuninitvar.cpp" $, 2621 $, "[test.cpp:6]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2622:
2623:
2624: $checkUninitVar_ $(@expr1073744086 "cppcheck-2.8/test/testuninitvar.cpp" $, 2624 $, "void f() {\n    int a;\n    if (init(&a)) { }\n    a++;\n}" $)
2625:
2626:
2627:
2628: ;
2629: $if $(@expr1073744087 $!@expr1073744088 $assertEquals $(@expr1073744089 "cppcheck-2.8/test/testuninitvar.cpp" $, 2629 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2630:
2631:
2632: $checkUninitVar_ $(@expr1073744092 "cppcheck-2.8/test/testuninitvar.cpp" $, 2632 $, "void f() {\n    int x;\n    if (y == 1) { return; }\n    else { x = 1; }\n    return x;\n}" $)
2633:
|
2636:
2637: ;
2638: $if $(@expr1073744093 $!@expr1073744094 $assertEquals $(@expr1073744095 "cppcheck-2.8/test/testuninitvar.cpp" $, 2638 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2639:
2640: $checkUninitVar_ $(@expr1073744098 "cppcheck-2.8/test/testuninitvar.cpp" $, 2640 $, "void f() {\n    int x;\n    if (y == 1) { return; }\n    return x;\n}" $)
2641:
2642:
2643:
2644: ;
2645: $if $(@expr1073744099 $!@expr1073744100 $assertEquals $(@expr1073744101 "cppcheck-2.8/test/testuninitvar.cpp" $, 2645 $, "[test.cpp:4]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2646:
2647: $checkUninitVar_ $(@expr1073744104 "cppcheck-2.8/test/testuninitvar.cpp" $, 2647 $, "int f(int x) {\n    int ret;\n    if (!x) {\n        ret = -123;\n        goto out1;\n    }\n    return 0;\nout1:\nout2:\n    return ret;\n}" , "test.c" $)
2648:
|
2656:
2657: ;
2658: $if $(@expr1073744105 $!@expr1073744106 $assertEquals $(@expr1073744107 "cppcheck-2.8/test/testuninitvar.cpp" $, 2658 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2659:
2660: $checkUninitVar_ $(@expr1073744110 "cppcheck-2.8/test/testuninitvar.cpp" $, 2660 $, "void f() {\n    int i;\n    if (x) {\n        i = 1;\n    } else {\n        goto out;\n    }\n    i++;\n}" $)
2661:
|
2667:
2668: ;
2669: $if $(@expr1073744111 $!@expr1073744112 $assertEquals $(@expr1073744113 "cppcheck-2.8/test/testuninitvar.cpp" $, 2669 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2670:
2671: $checkUninitVar_ $(@expr1073744116 "cppcheck-2.8/test/testuninitvar.cpp" $, 2671 $, "int f() {\n    int i,x;\n    for (i=0;i<9;++i)\n        if (foo) break;\n    return x;\n}" $)
2672:
|
2675:
2676: ;
2677: $if $(@expr1073744117 $!@expr1073744118 $assertEquals $(@expr1073744119 "cppcheck-2.8/test/testuninitvar.cpp" $, 2677 $, "[test.cpp:5]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2678:
2679: $checkUninitVar_ $(@expr1073744122 "cppcheck-2.8/test/testuninitvar.cpp" $, 2679 $, "int f() {\n    int x;\n    while (foo)\n        if (bar) break;\n    return x;\n}" $)
2680:
|
2683:
2684: ;
2685: $if $(@expr1073744123 $!@expr1073744124 $assertEquals $(@expr1073744125 "cppcheck-2.8/test/testuninitvar.cpp" $, 2685 $, "[test.cpp:5]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2686:
2687:
2688: $checkUninitVar_ $(@expr1073744128 "cppcheck-2.8/test/testuninitvar.cpp" $, 2688 $, "void f() {\n    try {\n    } catch (CException* e) {\n        trace();\n        e->Delete();\n    }\n}" $)
2689:
|
2693:
2694: ;
2695: $if $(@expr1073744129 $!@expr1073744130 $assertEquals $(@expr1073744131 "cppcheck-2.8/test/testuninitvar.cpp" $, 2695 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2696:
2697: $checkUninitVar_ $(@expr1073744134 "cppcheck-2.8/test/testuninitvar.cpp" $, 2697 $, "void f() {\n    try {\n    } catch (const char* e) {\n        A a = e;\n    }\n}" $)
2698:
|
2701:
2702: ;
2703: $if $(@expr1073744135 $!@expr1073744136 $assertEquals $(@expr1073744137 "cppcheck-2.8/test/testuninitvar.cpp" $, 2703 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2704:
2705:
2706: $checkUninitVar_ $(@expr1073744140 "cppcheck-2.8/test/testuninitvar.cpp" $, 2706 $, "void f() {\n    int x;\n    if (y == 1) { exit(0); }\n    else { x = 1; }\n    return x;\n}" $)
2707:
|
2710:
2711: ;
2712: $if $(@expr1073744141 $!@expr1073744142 $assertEquals $(@expr1073744143 "cppcheck-2.8/test/testuninitvar.cpp" $, 2712 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2713:
2714:
2715: $checkUninitVar_ $(@expr1073744146 "cppcheck-2.8/test/testuninitvar.cpp" $, 2715 $, "void foo() {\n    int i;\n    ({ if (0); });\n    for_each(i) { }\n}" , "test.c" , false $)
2716:
2717:
2718:
2719: ;
2720:
2721:
2722: $checkUninitVar_ $(@expr1073744147 "cppcheck-2.8/test/testuninitvar.cpp" $, 2722 $, "void f(int a) {\n    int i;\n    if (a) i = 0;\n    if (a) i++;\n}" $)
2723:
2724:
2725:
2726: ;
2727: $if $(@expr1073744148 $!@expr1073744149 $assertEquals $(@expr1073744150 "cppcheck-2.8/test/testuninitvar.cpp" $, 2727 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2728:
2729: $checkUninitVar_ $(@expr1073744153 "cppcheck-2.8/test/testuninitvar.cpp" $, 2729 $, "void f() {\n    int a,b=0;\n    if (x) {\n        if (y) {\n            a = 0;\n            b = 1;\n        }\n    }\n    if (b) a++;\n}" $)
2730:
|
2737:
2738: ;
2739: $if $(@expr1073744154 $!@expr1073744155 $assertEquals $(@expr1073744156 "cppcheck-2.8/test/testuninitvar.cpp" $, 2739 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2740:
2741: $checkUninitVar_ $(@expr1073744159 "cppcheck-2.8/test/testuninitvar.cpp" $, 2741 $, "void f() {\n    int a=0, b;\n    if (x) { }\n    else { if (y==2) { a=1; b=2; } }\n    if (a) { ++b; }\n}" $)
2742:
|
2745:
2746: ;
2747: $if $(@expr1073744160 $!@expr1073744161 $assertEquals $(@expr1073744162 "cppcheck-2.8/test/testuninitvar.cpp" $, 2747 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2748:
2749: $checkUninitVar_ $(@expr1073744165 "cppcheck-2.8/test/testuninitvar.cpp" $, 2749 $, "static void f(int x, int y) {\n    int a;\n    if (x == 0) { a = y; }\n    if (x == 0 && (a == 1)) { }\n}" $)
2750:
2751:
2752:
2753: ;
2754: $if $(@expr1073744166 $!@expr1073744167 $assertEquals $(@expr1073744168 "cppcheck-2.8/test/testuninitvar.cpp" $, 2754 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2755:
2756: $checkUninitVar_ $(@expr1073744171 "cppcheck-2.8/test/testuninitvar.cpp" $, 2756 $, "static void f() {\n    int a=0, b;\n    if (something) { a = dostuff(&b); }\n    if (!a || b) { }\n}" $)
2757:
2758:
2759:
2760: ;
2761: $if $(@expr1073744172 $!@expr1073744173 $assertEquals $(@expr1073744174 "cppcheck-2.8/test/testuninitvar.cpp" $, 2761 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2762:
2763: $checkUninitVar_ $(@expr1073744177 "cppcheck-2.8/test/testuninitvar.cpp" $, 2763 $, "static void f(int x, int y) {\n    int a;\n    if (x == 0 && (a == 1)) { }\n}" , "test.cpp" , false $)
2764:
2765:
2766: ;
2767: $if $(@expr1073744178 $!@expr1073744179 $assertEquals $(@expr1073744180 "cppcheck-2.8/test/testuninitvar.cpp" $, 2767 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2768:
2769: $checkUninitVar_ $(@expr1073744183 "cppcheck-2.8/test/testuninitvar.cpp" $, 2769 $, "void f() {\n    int a;\n    if (x) { a = 0; }\n    if (x) { if (y) { a++; } }\n}" $)
2770:
2771:
2772:
2773: ;
2774: $if $(@expr1073744184 $!@expr1073744185 $assertEquals $(@expr1073744186 "cppcheck-2.8/test/testuninitvar.cpp" $, 2774 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2775:
2776: $checkUninitVar_ $(@expr1073744189 "cppcheck-2.8/test/testuninitvar.cpp" $, 2776 $, "void f() {\n    int a;\n    if (x) { a = 0; }\n    if (x) { if (y) { } else { a++; } }\n}" $)
2777:
2778:
2779:
2780: ;
2781: $if $(@expr1073744190 $!@expr1073744191 $assertEquals $(@expr1073744192 "cppcheck-2.8/test/testuninitvar.cpp" $, 2781 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2782:
2783: $checkUninitVar_ $(@expr1073744195 "cppcheck-2.8/test/testuninitvar.cpp" $, 2783 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    if (x) ab = getAB();\n    else ab.a = 0;\n    if (ab.a == 1) b = ab.b;\n}" , "test.c" $)
2784:
|
2788:
2789: ;
2790: $if $(@expr1073744196 $!@expr1073744197 $assertEquals $(@expr1073744198 "cppcheck-2.8/test/testuninitvar.cpp" $, 2790 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2791:
2792: $checkUninitVar_ $(@expr1073744201 "cppcheck-2.8/test/testuninitvar.cpp" $, 2792 $, "int f(void) {\n    int a;\n    int i;\n    if (x) { noreturn(); }\n    else { i = 0; }\n    if (i==1) { a = 0; }\n    else { a = 1; }\n    return a;\n}" $)
2793:
|
2799:
2800: ;
2801: $if $(@expr1073744202 $!@expr1073744203 $assertEquals $(@expr1073744204 "cppcheck-2.8/test/testuninitvar.cpp" $, 2801 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2802:
2803: $checkUninitVar_ $(@expr1073744207 "cppcheck-2.8/test/testuninitvar.cpp" $, 2803 $, "int f(int a) {\n    int x = 0, y;\n    if (a) x = 1;\n    else return 0;\n    if (x) y = 123;\n    else {}\n    return y;\n}" $)
2804:
|
2809:
2810: ;
2811: $if $(@expr1073744208 $!@expr1073744209 $assertEquals $(@expr1073744210 "cppcheck-2.8/test/testuninitvar.cpp" $, 2811 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2812:
2813: $checkUninitVar_ $(@expr1073744213 "cppcheck-2.8/test/testuninitvar.cpp" $, 2813 $, "int f(int a) {\n    int x;\n    if (a < 2) exit(1);\n    else if (a == 2) x = 0;\n    else exit(2);\n    return x;\n}" $)
2814:
|
2818:
2819: ;
2820: $if $(@expr1073744214 $!@expr1073744215 $assertEquals $(@expr1073744216 "cppcheck-2.8/test/testuninitvar.cpp" $, 2820 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2821:
2822: $checkUninitVar_ $(@expr1073744219 "cppcheck-2.8/test/testuninitvar.cpp" $, 2822 $, "int f(int a) {\n    int x = 1, y;\n    if (a) x = 0;\n    else return 0;\n    if (x) {}\n    else y = 123;\n    return y;\n}" $)
2823:
|
2828:
2829: ;
2830: $if $(@expr1073744220 $!@expr1073744221 $assertEquals $(@expr1073744222 "cppcheck-2.8/test/testuninitvar.cpp" $, 2830 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2831:
2832: $checkUninitVar_ $(@expr1073744225 "cppcheck-2.8/test/testuninitvar.cpp" $, 2832 $, "void f(int x) {\n  int value;\n  if (x !=-1)\n    value = getvalue();\n  if (x == -1 || value > 300) {}\n}" $)
2833:
|
2836:
2837: ;
2838: $if $(@expr1073744226 $!@expr1073744227 $assertEquals $(@expr1073744228 "cppcheck-2.8/test/testuninitvar.cpp" $, 2838 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2839:
2840: $checkUninitVar_ $(@expr1073744231 "cppcheck-2.8/test/testuninitvar.cpp" $, 2840 $, "enum t_err { ERR_NONE, ERR_BAD_ARGS };\nstruct box_t { int value; };\nint init_box(box_t *p, int v);\n\nvoid foo(int ret) {\n    box_t box2;\n    if (ret == ERR_NONE)\n        ret = init_box(&box2, 20);\n    if (ret == ERR_NONE)\n        z = x + box2.value;\n}" $)
2841:
|
2849:
2850: ;
2851: $if $(@expr1073744232 $!@expr1073744233 $assertEquals $(@expr1073744234 "cppcheck-2.8/test/testuninitvar.cpp" $, 2851 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2852:
2853: $checkUninitVar_ $(@expr1073744237 "cppcheck-2.8/test/testuninitvar.cpp" $, 2853 $, "void f(int x) {\n  int value;\n  if (x == 32)\n    value = getvalue();\n  if (x == 1)\n    v = value;\n}" $)
2854:
|
2858:
2859: ;
2860: $if $(@expr1073744238 $!@expr1073744239 $assertEquals $(@expr1073744240 "cppcheck-2.8/test/testuninitvar.cpp" $, 2860 $, "[test.cpp:6]: (error) Uninitialized variable: value\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2861:
2862: $checkUninitVar_ $(@expr1073744243 "cppcheck-2.8/test/testuninitvar.cpp" $, 2862 $, "void f(int x) {\n  int value;\n  if (x == 32)\n    value = getvalue();\n  if (x == 32) {}\n  else v = value;\n}" $)
2863:
|
2867:
2868: ;
2869: $if $(@expr1073744244 $!@expr1073744245 $assertEquals $(@expr1073744246 "cppcheck-2.8/test/testuninitvar.cpp" $, 2869 $, "[test.cpp:6]: (error) Uninitialized variable: value\n" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2870:
2871: $checkUninitVar_ $(@expr1073744249 "cppcheck-2.8/test/testuninitvar.cpp" $, 2871 $, "static int x;int f() {\n    int y;\n    if (x) g();\n    if (x) y = 123;\n    else y = 456;\n    return y;\n}" $)
2872:
|
2877:
2878: ;
2879: $if $(@expr1073744250 $!@expr1073744251 $assertEquals $(@expr1073744252 "cppcheck-2.8/test/testuninitvar.cpp" $, 2879 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2880:
2881: $checkUninitVar_ $(@expr1073744255 "cppcheck-2.8/test/testuninitvar.cpp" $, 2881 $, "static int x;int f() {\n    int y;\n    if (!x) g();\n    if (x) y = 123;\n    else y = 456;\n    return y;\n}" $)
2882:
|
2887:
2888: ;
2889: $if $(@expr1073744256 $!@expr1073744257 $assertEquals $(@expr1073744258 "cppcheck-2.8/test/testuninitvar.cpp" $, 2889 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2890:
2891: $checkUninitVar_ $(@expr1073744261 "cppcheck-2.8/test/testuninitvar.cpp" $, 2891 $, "void f(int a) {\n  int x;\n  if (a) x=123;\n  if (!a) {\n    if (!a) {}\n    else if (x) {}\n  }\n}" $)
2892:
|
2897:
2898: ;
2899: $if $(@expr1073744262 $!@expr1073744263 $assertEquals $(@expr1073744264 "cppcheck-2.8/test/testuninitvar.cpp" $, 2899 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2900:
2901:
2902: $checkUninitVar_ $(@expr1073744267 "cppcheck-2.8/test/testuninitvar.cpp" $, 2902 $, "void f() {\n    int x;\n    asm();\n    x++;\n}" $)
2903:
2904:
2905:
2906: ;
2907: $if $(@expr1073744268 $!@expr1073744269 $assertEquals $(@expr1073744270 "cppcheck-2.8/test/testuninitvar.cpp" $, 2907 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2908:
2909:
2910: $checkUninitVar_ $(@expr1073744273 "cppcheck-2.8/test/testuninitvar.cpp" $, 2910 $, "void f() {\n    int i;\n    sizeof(i+1);\n}" $)
2911:
2912:
2913: ;
2914: $if $(@expr1073744274 $!@expr1073744275 $assertEquals $(@expr1073744276 "cppcheck-2.8/test/testuninitvar.cpp" $, 2914 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2915:
2916: $checkUninitVar_ $(@expr1073744279 "cppcheck-2.8/test/testuninitvar.cpp" $, 2916 $, "void f() {\n    int i;\n    if (100 == sizeof(i+1));\n}" $)
2917:
2918:
2919: ;
2920: $if $(@expr1073744280 $!@expr1073744281 $assertEquals $(@expr1073744282 "cppcheck-2.8/test/testuninitvar.cpp" $, 2920 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2921:
2922: $checkUninitVar_ $(@expr1073744285 "cppcheck-2.8/test/testuninitvar.cpp" $, 2922 $, "void f() {\n    struct ABC *abc;\n    int i = ARRAY_SIZE(abc.a);}" $)
2923:
2924:
2925: ;
2926:
2927:
2928: $checkUninitVar_ $(@expr1073744286 "cppcheck-2.8/test/testuninitvar.cpp" $, 2928 $, "void f() {\n    int *abc;\n    typeof(*abc);\n}" $)
2929:
2930:
2931: ;
2932: $if $(@expr1073744287 $!@expr1073744288 $assertEquals $(@expr1073744289 "cppcheck-2.8/test/testuninitvar.cpp" $, 2932 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2933:
2934: $checkUninitVar_ $(@expr1073744292 "cppcheck-2.8/test/testuninitvar.cpp" $, 2934 $, "void f() {\n    struct ABC *abc;\n    return do_something(typeof(*abc));\n}" $)
2935:
2936:
2937: ;
2938: $if $(@expr1073744293 $!@expr1073744294 $assertEquals $(@expr1073744295 "cppcheck-2.8/test/testuninitvar.cpp" $, 2938 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2939:
2940: $checkUninitVar_ $(@expr1073744298 "cppcheck-2.8/test/testuninitvar.cpp" $, 2940 $, "void f() {\n    A *a;\n    a = malloc(sizeof(*a));\n}" $)
2941:
2942:
2943: ;
2944: $if $(@expr1073744299 $!@expr1073744300 $assertEquals $(@expr1073744301 "cppcheck-2.8/test/testuninitvar.cpp" $, 2944 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2945:
2946:
2947: $checkUninitVar_ $(@expr1073744304 "cppcheck-2.8/test/testuninitvar.cpp" $, 2947 $, "void f() {\n    int a,b;\n    if (&a == &b);\n}" $)
2948:
2949:
2950: ;
2951: $if $(@expr1073744305 $!@expr1073744306 $assertEquals $(@expr1073744307 "cppcheck-2.8/test/testuninitvar.cpp" $, 2951 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2952:
2953: $checkUninitVar_ $(@expr1073744310 "cppcheck-2.8/test/testuninitvar.cpp" $, 2953 $, "void f() {\n    int a;\n    x((LPARAM)(RECT*)&a);\n}" $)
2954:
2955:
2956: ;
2957: $if $(@expr1073744311 $!@expr1073744312 $assertEquals $(@expr1073744313 "cppcheck-2.8/test/testuninitvar.cpp" $, 2957 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2958:
2959: $checkUninitVar_ $(@expr1073744316 "cppcheck-2.8/test/testuninitvar.cpp" $, 2959 $, "int main() {\n    int done;\n    dostuff(1, (AuPointer) &done);\n}" $)
2960:
2961:
2962: ;
2963: $if $(@expr1073744317 $!@expr1073744318 $assertEquals $(@expr1073744319 "cppcheck-2.8/test/testuninitvar.cpp" $, 2963 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2964:
2965: $checkUninitVar_ $(@expr1073744322 "cppcheck-2.8/test/testuninitvar.cpp" $, 2965 $, "void f() {\n    long a;\n    &a;\n}" $)
2966:
2967:
2968: ;
2969: $if $(@expr1073744323 $!@expr1073744324 $assertEquals $(@expr1073744325 "cppcheck-2.8/test/testuninitvar.cpp" $, 2969 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2970:
2971: $checkUninitVar_ $(@expr1073744328 "cppcheck-2.8/test/testuninitvar.cpp" $, 2971 $, "void f() {\n    int a = ({ long b = (long)(123); 2 + b; });\n}" , "test.c" $)
2972:
2973: ;
2974: $if $(@expr1073744329 $!@expr1073744330 $assertEquals $(@expr1073744331 "cppcheck-2.8/test/testuninitvar.cpp" $, 2974 $, "" $, errout@var100 .@expr2108 str (@expr2109 ) $) $) { $return ; }
2975: }
2976:
2977:
2978: void uninitvar4 ( ) {
2979: $checkUninitVar_ $(@expr1073744334 "cppcheck-2.8/test/testuninitvar.cpp" $, 2979 $, "void f() {\n    int buf[10];\n    int &x = buf[0];\n    buf[0] = 0;\n    x++;\n}" $)
2980:
|
2983:
2984: ;
2985: $if $(@expr1073744335 $!@expr1073744336 $assertEquals $(@expr1073744337 "cppcheck-2.8/test/testuninitvar.cpp" $, 2985 $, "" $, errout@var100 .@expr1073744338 str (@expr1073744339 ) $) $) { $return ; }
2986: }
2987:
2988:
2989: void uninitvar5 ( ) {
2990:
2991: $checkUninitVar_ $(@expr1073744340 "cppcheck-2.8/test/testuninitvar.cpp" $, 2991 $, "void f() {\n    x<char> c;\n    c << 2345;\n}" $)
2992:
2993:
2994: ;
2995: $if $(@expr1073744341 $!@expr1073744342 $assertEquals $(@expr1073744343 "cppcheck-2.8/test/testuninitvar.cpp" $, 2995 $, "" $, errout@var100 .@expr2520 str (@expr2521 ) $) $) { $return ; }
2996:
2997:
2998: $checkUninitVar_ $(@expr1073744346 "cppcheck-2.8/test/testuninitvar.cpp" $, 2998 $, "void f() {\n    char c;\n    char a = c << 2;\n}" $)
2999:
3000:
3001: ;
3002: $if $(@expr1073744347 $!@expr1073744348 $assertEquals $(@expr1073744349 "cppcheck-2.8/test/testuninitvar.cpp" $, 3002 $, "[test.cpp:3]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr2520 str (@expr2521 ) $) $) { $return ; }
3003: }
3004:
3005: void uninitvar8 ( ) {
3006: const char code@var120 [@expr1073744352 269 ] =@expr1073744353 "struct Fred {\n    void Sync(dsmp_t& type, int& len, int limit = 123);\n    void Sync(int& syncpos, dsmp_t& type, int& len, int limit = 123);\n    void FindSyncPoint();\n};\nvoid Fred::FindSyncPoint() {\n    dsmp_t type;\n    int syncpos, len;\n    Sync(syncpos, type, len);\n}"
3007:
|
3014:
3015: ;
3016: $checkUninitVar_ $(@expr1073744354 "cppcheck-2.8/test/testuninitvar.cpp" $, 3016 $, code@var120 , "test.cpp" $) ;
3017: $if $(@expr1073744355 $!@expr1073744356 $assertEquals $(@expr1073744357 "cppcheck-2.8/test/testuninitvar.cpp" $, 3017 $, "" $, errout@var100 .@expr1073744358 str (@expr1073744359 ) $) $) { $return ; }
3018: }
3019:
3020: void uninitvar9 ( ) {
3021: const char code@var121 [@expr1073744360 104 ] =@expr1073744361 "namespace Ns { class C; }\nvoid f1() { char *p; *p = 0; }\nclass Ns::C* p;\nvoid f2() { char *p; *p = 0; }"
3022:
3023:
3024: ;
3025: $checkUninitVar_ $(@expr1073744362 "cppcheck-2.8/test/testuninitvar.cpp" $, 3025 $, code@var121 , "test.cpp" $) ;
3026: $if $(@expr1073744363 $!@expr1073744364 $assertEquals $(@expr1073744365 "cppcheck-2.8/test/testuninitvar.cpp" $, 3026 $, "[test.cpp:2]: (error) Uninitialized variable: p\n[test.cpp:4]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr1073744366 str (@expr1073744367 ) $) $) { $return
3027: ; }
3028: }
3029:
3030: void uninitvar10 ( ) {
3031: const char code@var122 [@expr1073744368 191 ] =@expr1073744369 "class Foo {\n    template <unsigned int i>\n    bool bar() {\n        return true;\n    }\n};\ntemplate <>\nbool Foo::bar<9>() {\n    return true;\n}\nint global() {\n    int bar = 1;\n    return bar;\n}"
3032:
|
3043:
3044: ;
3045: $checkUninitVar_ $(@expr1073744370 "cppcheck-2.8/test/testuninitvar.cpp" $, 3045 $, code@var122 , "test.cpp" $) ;
3046: $if $(@expr1073744371 $!@expr1073744372 $assertEquals $(@expr1073744373 "cppcheck-2.8/test/testuninitvar.cpp" $, 3046 $, "" $, errout@var100 .@expr1073744374 str (@expr1073744375 ) $) $) { $return ; }
3047: }
3048:
3049: void uninitvar11 ( ) {
3050: const char code@var123 [@expr1073744376 68 ] =@expr1073744377 "bool get(int &var);\nvoid foo () {\n    int x;\n    x = get(x) && x;\n}"
3051:
3052:
3053:
3054: ;
3055: $checkUninitVar_ $(@expr1073744378 "cppcheck-2.8/test/testuninitvar.cpp" $, 3055 $, code@var123 , "test.cpp" $) ;
3056: $if $(@expr1073744379 $!@expr1073744380 $assertEquals $(@expr1073744381 "cppcheck-2.8/test/testuninitvar.cpp" $, 3056 $, "" $, errout@var100 .@expr1073744382 str (@expr1073744383 ) $) $) { $return ; }
3057: }
3058:
3059: void uninitvar12 ( ) {
3060: const char code@var124 [@expr1073744384 65 ] =@expr1073744385 "void fp() {\n  std::stringstream ss;\n  for (int i; ss >> i;) {}\n}"
3061:
3062:
3063: ;
3064: $checkUninitVar_ $(@expr1073744386 "cppcheck-2.8/test/testuninitvar.cpp" $, 3064 $, code@var124 $) ;
3065: $if $(@expr1073744387 $!@expr1073744388 $assertEquals $(@expr1073744389 "cppcheck-2.8/test/testuninitvar.cpp" $, 3065 $, "" $, errout@var100 .@expr1073744390 str (@expr1073744391 ) $) $) { $return ; }
3066: }
3067:
3068: void uninitvar13 ( ) {
3069: const char code@var125 [@expr1073744392 215 ] =@expr1073744393 "int func(void)\n{ int rez;\n  struct sccb* ccb;\n \n  do\n  { if ((ccb = calloc(1, sizeof(*ccb))) == NULL)\n    { rez = 1;\n      break;\n    }\n    rez = 0;\n  } while (0);\n \n  if (rez != 0)\n    free(ccb);\n \n  return rez;\n}"
3070:
|
3084:
3085: ;
3086: $checkUninitVar_ $(@expr1073744394 "cppcheck-2.8/test/testuninitvar.cpp" $, 3086 $, code@var125 $) ;
3087: $if $(@expr1073744395 $!@expr1073744396 $assertEquals $(@expr1073744397 "cppcheck-2.8/test/testuninitvar.cpp" $, 3087 $, "" $, errout@var100 .@expr1073744398 str (@expr1073744399 ) $) $) { $return ; }
3088: }
3089:
3090: void uninitvar_unconditionalTry ( ) {
3091:
3092: $checkUninitVar_ $(@expr1073744400 "cppcheck-2.8/test/testuninitvar.cpp" $, 3092 $, "int f() {\n    int i;\n    {\n        return i;\n    }\n}" $)
3093:
|
3096:
3097: ;
3098: $if $(@expr1073744401 $!@expr1073744402 $assertEquals $(@expr1073744403 "cppcheck-2.8/test/testuninitvar.cpp" $, 3098 $, "[test.cpp:4]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr2580 str (@expr2581 ) $) $) { $return ; }
3099:
3100: $checkUninitVar_ $(@expr1073744406 "cppcheck-2.8/test/testuninitvar.cpp" $, 3100 $, "int f() {\n    int i;\n    try {\n        return i;\n    } catch(...) {}\n}" $)
3101:
|
3104:
3105: ;
3106: $if $(@expr1073744407 $!@expr1073744408 $assertEquals $(@expr1073744409 "cppcheck-2.8/test/testuninitvar.cpp" $, 3106 $, "[test.cpp:4]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr2580 str (@expr2581 ) $) $) { $return ; }
3107:
3108: $checkUninitVar_ $(@expr1073744412 "cppcheck-2.8/test/testuninitvar.cpp" $, 3108 $, "void f(bool x) {\n    bool b;\n    {\n        auto g = []{};\n        b = x;\n    }\n    if (b) {}\n}\n" $)
3109:
|
3114:
3115: ;
3116: $if $(@expr1073744413 $!@expr1073744414 $assertEquals $(@expr1073744415 "cppcheck-2.8/test/testuninitvar.cpp" $, 3116 $, "" $, errout@var100 .@expr2580 str (@expr2581 ) $) $) { $return ; }
3117:
3118: $checkUninitVar_ $(@expr1073744418 "cppcheck-2.8/test/testuninitvar.cpp" $, 3118 $, "void f(bool x) {\n    bool b;\n    {\n        int i[2]{ 1, 2 };\n        b = x;\n    }\n    if (b) {}\n}\n" $)
3119:
|
3124:
3125: ;
3126: $if $(@expr1073744419 $!@expr1073744420 $assertEquals $(@expr1073744421 "cppcheck-2.8/test/testuninitvar.cpp" $, 3126 $, "" $, errout@var100 .@expr2580 str (@expr2581 ) $) $) { $return ; }
3127:
3128: $checkUninitVar_ $(@expr1073744424 "cppcheck-2.8/test/testuninitvar.cpp" $, 3128 $, "void f(bool x) {\n    bool b;\n    {\n        auto g = []{};\n    }\n    if (b) {}\n}\n" $)
3129:
|
3133:
3134: ;
3135: $if $(@expr1073744425 $!@expr1073744426 $assertEquals $(@expr1073744427 "cppcheck-2.8/test/testuninitvar.cpp" $, 3135 $, "[test.cpp:6]: (error) Uninitialized variable: b\n" $, errout@var100 .@expr2580 str (@expr2581 ) $) $) { $return ; }
3136: }
3137:
3138: void uninitvar_funcptr ( ) {
3139:
3140:
3141: $checkUninitVar_ $(@expr1073744430 "cppcheck-2.8/test/testuninitvar.cpp" $, 3141 $, "void getLibraryContainer() {\n    Reference< XStorageBasedLibraryContainer >(*Factory)(const Reference< XComponentContext >&, const Reference< XStorageBasedDocument >&)\n        = &DocumentDialogLibraryContainer::create;\n    rxContainer.set((*Factory)(m_aContext, xDocument));\n}" $)
3142:
3143:
3144:
3145: ;
3146: $if $(@expr1073744431 $!@expr1073744432 $assertEquals $(@expr1073744433 "cppcheck-2.8/test/testuninitvar.cpp" $, 3146 $, "" $, errout@var100 .@expr2610 str (@expr2611 ) $) $) { $return ; }
3147:
3148: $checkUninitVar_ $(@expr1073744436 "cppcheck-2.8/test/testuninitvar.cpp" $, 3148 $, "void foo() {\n    void* x;\n    int (*f)(int, int) = x;\n    dostuff((*f)(a,b));\n}" $)
3149:
3150:
3151:
3152: ;
3153: $if $(@expr1073744437 $!@expr1073744438 $assertEquals $(@expr1073744439 "cppcheck-2.8/test/testuninitvar.cpp" $, 3153 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr2610 str (@expr2611 ) $) $) { $return ; }
3154:
3155: $checkUninitVar_ $(@expr1073744442 "cppcheck-2.8/test/testuninitvar.cpp" $, 3155 $, "void getLibraryContainer() {\n    Reference< XStorageBasedLibraryContainer >(*Factory)(const Reference< XComponentContext >&, const Reference< XStorageBasedDocument >&);\n    rxContainer.set((*Factory)(m_aContext, xDocument));\n}" $)
3156:
3157:
3158: ;
3159: $if $(@expr1073744443 $!@expr1073744444 $assertEquals $(@expr1073744445 "cppcheck-2.8/test/testuninitvar.cpp" $, 3159 $, "[test.cpp:3]: (error) Uninitialized variable: Factory\n" $, errout@var100 .@expr2610 str (@expr2611 ) $) $) { $return ; }
3160:
3161:
3162: }
3163:
3164: void uninitvar_operator ( ) {
3165: $checkUninitVar_ $(@expr1073744448 "cppcheck-2.8/test/testuninitvar.cpp" $, 3165 $, "struct Source { Source& operator>>(int& i) { i = 0; return *this; } };\nstruct Sink { int v; };\nSource foo;\nvoid uninit() {\n  Sink s;\n  int n = 1 >> s.v;\n};\nvoid notUninit() {\n  Sink s1;\n  foo >> s1.v;\n  Sink s2;\n  int n;\n  foo >> s2.v >> n;\n}" $)
3166:
|
3177:
3178: ;
3179: $if $(@expr1073744449 $!@expr1073744450 $assertEquals $(@expr1073744451 "cppcheck-2.8/test/testuninitvar.cpp" $, 3179 $, "[test.cpp:6]: (error) Uninitialized struct member: s.v\n" $, errout@var100 .@expr2628 str (@expr2629 ) $) $) { $return ; }
3180:
3181: $checkUninitVar_ $(@expr1073744454 "cppcheck-2.8/test/testuninitvar.cpp" $, 3181 $, "struct Fred { int a; };\nvoid foo() {\n  Fred fred;\n  std::cin >> fred.a;\n}" $)
3182:
3183:
3184:
3185: ;
3186: $if $(@expr1073744455 $!@expr1073744456 $assertEquals $(@expr1073744457 "cppcheck-2.8/test/testuninitvar.cpp" $, 3186 $, "" $, errout@var100 .@expr2628 str (@expr2629 ) $) $) { $return ; }
3187: }
3188:
3189:
3190: void uninitvar2_func ( ) {
3191:
3192: $checkUninitVar_ $(@expr1073744460 "cppcheck-2.8/test/testuninitvar.cpp" $, 3192 $, "void bar(const int a, const int * const b);\nint foo(void) {\n   int a;\n   int *b = 0;\n   bar(a,b);\n   return 0;\n}" $)
3193:
|
3197:
3198: ;
3199: $if $(@expr1073744461 $!@expr1073744462 $assertEquals $(@expr1073744463 "cppcheck-2.8/test/testuninitvar.cpp" $, 3199 $, "[test.cpp:5]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3200:
3201:
3202: $checkUninitVar_ $(@expr1073744466 "cppcheck-2.8/test/testuninitvar.cpp" $, 3202 $, "void a(char);\nvoid b() {\n    char c;\n    a(c);\n}" $)
3203:
3204:
3205:
3206: ;
3207: $if $(@expr1073744467 $!@expr1073744468 $assertEquals $(@expr1073744469 "cppcheck-2.8/test/testuninitvar.cpp" $, 3207 $, "[test.cpp:4]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3208:
3209: $checkUninitVar_ $(@expr1073744472 "cppcheck-2.8/test/testuninitvar.cpp" $, 3209 $, "void a(char c);\nvoid b() {\n    char c;\n    a(c);\n}" $)
3210:
3211:
3212:
3213: ;
3214: $if $(@expr1073744473 $!@expr1073744474 $assertEquals $(@expr1073744475 "cppcheck-2.8/test/testuninitvar.cpp" $, 3214 $, "[test.cpp:4]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3215:
3216: $checkUninitVar_ $(@expr1073744478 "cppcheck-2.8/test/testuninitvar.cpp" $, 3216 $, "void a(const char c);\nvoid b() {\n    char c;\n    a(c);\n}" $)
3217:
3218:
3219:
3220: ;
3221: $if $(@expr1073744479 $!@expr1073744480 $assertEquals $(@expr1073744481 "cppcheck-2.8/test/testuninitvar.cpp" $, 3221 $, "[test.cpp:4]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3222:
3223: $checkUninitVar_ $(@expr1073744484 "cppcheck-2.8/test/testuninitvar.cpp" $, 3223 $, "void a(char *c);\nvoid b() {\n    char c;\n    a(&c);\n}" $)
3224:
3225:
3226:
3227: ;
3228: $if $(@expr1073744485 $!@expr1073744486 $assertEquals $(@expr1073744487 "cppcheck-2.8/test/testuninitvar.cpp" $, 3228 $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3229:
3230: $checkUninitVar_ $(@expr1073744490 "cppcheck-2.8/test/testuninitvar.cpp" $, 3230 $, "void a(pstr s);\nvoid b() {\n    char c;\n    a(&c);\n}" $)
3231:
3232:
3233:
3234: ;
3235: $if $(@expr1073744491 $!@expr1073744492 $assertEquals $(@expr1073744493 "cppcheck-2.8/test/testuninitvar.cpp" $, 3235 $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3236:
3237: $checkUninitVar_ $(@expr1073744496 "cppcheck-2.8/test/testuninitvar.cpp" $, 3237 $, "void a(const char *c);\nvoid b() {\n    char c;\n    a(&c);\n    c++;\n}" $)
3238:
|
3241:
3242: ;
3243: $todoAssertEquals $(@expr1073744497 "cppcheck-2.8/test/testuninitvar.cpp" $, 3243 $, "[test.cpp:5]: (error) Uninitialized variable: c\n" $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $) ;
3244:
3245:
3246: $checkUninitVar_ $(@expr1073744500 "cppcheck-2.8/test/testuninitvar.cpp" $, 3246 $, "void a(char c);\nvoid b() {\n    char *c;\n    a(*c);\n}" $)
3247:
3248:
3249:
3250: ;
3251: $if $(@expr1073744501 $!@expr1073744502 $assertEquals $(@expr1073744503 "cppcheck-2.8/test/testuninitvar.cpp" $, 3251 $, "[test.cpp:4]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3252:
3253:
3254: $checkUninitVar_ $(@expr1073744506 "cppcheck-2.8/test/testuninitvar.cpp" $, 3254 $, "void a(char *c);\nvoid b() {\n    char *c;\n    a(c);\n}" $)
3255:
3256:
3257:
3258: ;
3259: $if $(@expr1073744507 $!@expr1073744508 $assertEquals $(@expr1073744509 "cppcheck-2.8/test/testuninitvar.cpp" $, 3259 $, "[test.cpp:4]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3260:
3261: $checkUninitVar_ $(@expr1073744512 "cppcheck-2.8/test/testuninitvar.cpp" $, 3261 $, "typedef struct { int a; int b; } AB;\nvoid a(AB *ab);\nvoid b() {\n    AB *ab;\n    a(ab);\n}" $)
3262:
|
3265:
3266: ;
3267: $if $(@expr1073744513 $!@expr1073744514 $assertEquals $(@expr1073744515 "cppcheck-2.8/test/testuninitvar.cpp" $, 3267 $, "[test.cpp:5]: (error) Uninitialized variable: ab\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3268:
3269: $checkUninitVar_ $(@expr1073744518 "cppcheck-2.8/test/testuninitvar.cpp" $, 3269 $, "void a(const char *c);\nvoid b() {\n    char *c;\n    a(c);\n}" $)
3270:
3271:
3272:
3273: ;
3274: $if $(@expr1073744519 $!@expr1073744520 $assertEquals $(@expr1073744521 "cppcheck-2.8/test/testuninitvar.cpp" $, 3274 $, "[test.cpp:4]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3275:
3276: $checkUninitVar_ $(@expr1073744524 "cppcheck-2.8/test/testuninitvar.cpp" $, 3276 $, "void a(const char c[]);\nvoid b() {\n    char *c;\n    a(c);\n}" $)
3277:
3278:
3279:
3280: ;
3281: $if $(@expr1073744525 $!@expr1073744526 $assertEquals $(@expr1073744527 "cppcheck-2.8/test/testuninitvar.cpp" $, 3281 $, "[test.cpp:4]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3282:
3283: $checkUninitVar_ $(@expr1073744530 "cppcheck-2.8/test/testuninitvar.cpp" $, 3283 $, "void a(char **c);\nvoid b() {\n    char *c;\n    a(&c);\n}" $)
3284:
3285:
3286:
3287: ;
3288: $if $(@expr1073744531 $!@expr1073744532 $assertEquals $(@expr1073744533 "cppcheck-2.8/test/testuninitvar.cpp" $, 3288 $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3289:
3290: $checkUninitVar_ $(@expr1073744536 "cppcheck-2.8/test/testuninitvar.cpp" $, 3290 $, "void a(char *c);\nvoid b() {\n    char *c;\n    a(&c);\n}" $)
3291:
3292:
3293:
3294: ;
3295: $if $(@expr1073744537 $!@expr1073744538 $assertEquals $(@expr1073744539 "cppcheck-2.8/test/testuninitvar.cpp" $, 3295 $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3296:
3297: $checkUninitVar_ $(@expr1073744542 "cppcheck-2.8/test/testuninitvar.cpp" $, 3297 $, "void a(const char **c);\nvoid b() {\n    const char *c;\n    a(&c);\n}" $)
3298:
3299:
3300:
3301: ;
3302: $if $(@expr1073744543 $!@expr1073744544 $assertEquals $(@expr1073744545 "cppcheck-2.8/test/testuninitvar.cpp" $, 3302 $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3303:
3304:
3305: $checkUninitVar_ $(@expr1073744548 "cppcheck-2.8/test/testuninitvar.cpp" $, 3305 $, "int calc(const int *p, int n);\nvoid f() {\n    int x[10];\n    calc(x,10);\n}" $)
3306:
3307:
3308:
3309: ;
3310: $todoAssertEquals $(@expr1073744549 "cppcheck-2.8/test/testuninitvar.cpp" $, 3310 $, "[test.cpp:4]: (error) Uninitialized variable: x\n" $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $)
3311: ;
3312:
3313: $checkUninitVar_ $(@expr1073744552 "cppcheck-2.8/test/testuninitvar.cpp" $, 3313 $, "void f() {\n    int x[10];\n    int &x0(*x);\n}" $)
3314:
3315:
3316: ;
3317: $if $(@expr1073744553 $!@expr1073744554 $assertEquals $(@expr1073744555 "cppcheck-2.8/test/testuninitvar.cpp" $, 3317 $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3318:
3319:
3320: $checkUninitVar_ $(@expr1073744558 "cppcheck-2.8/test/testuninitvar.cpp" $, 3320 $, "struct ABC { int a; };\nvoid clear(struct ABC &abc);\nint f() {\n    struct ABC abc;\n    clear(abc);\n    return abc.a;\n}" $)
3321:
|
3325:
3326: ;
3327: $if $(@expr1073744559 $!@expr1073744560 $assertEquals $(@expr1073744561 "cppcheck-2.8/test/testuninitvar.cpp" $, 3327 $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3328:
3329: $checkUninitVar_ $(@expr1073744564 "cppcheck-2.8/test/testuninitvar.cpp" $, 3329 $, "void write_packet() {\n    time_t now0;\n    time(&now0);\n}" , "test.c" $)
3330:
3331:
3332: ;
3333: $if $(@expr1073744565 $!@expr1073744566 $assertEquals $(@expr1073744567 "cppcheck-2.8/test/testuninitvar.cpp" $, 3333 $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3334:
3335: $checkUninitVar_ $(@expr1073744570 "cppcheck-2.8/test/testuninitvar.cpp" $, 3335 $, "void write_packet() {\n    time_t* now0;\n    time(now0);\n}" , "test.c" $)
3336:
3337:
3338: ;
3339: $if $(@expr1073744571 $!@expr1073744572 $assertEquals $(@expr1073744573 "cppcheck-2.8/test/testuninitvar.cpp" $, 3339 $, "[test.c:3]: (error) Uninitialized variable: now0\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3340:
3341: $checkUninitVar_ $(@expr1073744576 "cppcheck-2.8/test/testuninitvar.cpp" $, 3341 $, "void write_packet() {\n    char now0;\n    strcmp(&now0, sth);\n}" , "test.c" $)
3342:
3343:
3344: ;
3345: $if $(@expr1073744577 $!@expr1073744578 $assertEquals $(@expr1073744579 "cppcheck-2.8/test/testuninitvar.cpp" $, 3345 $, "[test.c:3]: (error) Uninitialized variable: now0\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3346:
3347:
3348:
3349: $checkUninitVar_ $(@expr1073744582 "cppcheck-2.8/test/testuninitvar.cpp" $, 3349 $, "void a(struct Fred *fred) {\n    fred->x = 0;\n}\n\nvoid b() {\n    struct Fred *p;\n    a(p);\n}" $)
3350:
|
3355:
3356: ;
3357: $if $(@expr1073744583 $!@expr1073744584 $assertEquals $(@expr1073744585 "cppcheck-2.8/test/testuninitvar.cpp" $, 3357 $, "[test.cpp:7]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3358:
3359:
3360: $checkUninitVar_ $(@expr1073744588 "cppcheck-2.8/test/testuninitvar.cpp" $, 3360 $, "void a(char *buf) {\n    buf[0] = 0;\n}\nvoid b() {\n    char buf[10];\n    a(buf);\n    buf[1] = buf[0];\n}" $)
3361:
|
3366:
3367: ;
3368: $if $(@expr1073744589 $!@expr1073744590 $assertEquals $(@expr1073744591 "cppcheck-2.8/test/testuninitvar.cpp" $, 3368 $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3369:
3370:
3371: $checkUninitVar_ $(@expr1073744594 "cppcheck-2.8/test/testuninitvar.cpp" $, 3371 $, "void f() {\n  struct listnode *item;\n  list_for_each(item, &key_list) {}\n}" $)
3372:
3373:
3374: ;
3375: $if $(@expr1073744595 $!@expr1073744596 $assertEquals $(@expr1073744597 "cppcheck-2.8/test/testuninitvar.cpp" $, 3375 $, "" $, errout@var100 .@expr2640 str (@expr2641 ) $) $) { $return ; }
3376: }
3377:
3378: void uninitvar2_value ( ) {
3379: $checkUninitVar_ $(@expr1073744600 "cppcheck-2.8/test/testuninitvar.cpp" $, 3379 $, "void f() {\n    int i;\n    if (x) {\n        int y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}" , "test.cpp" , false $)
3380:
|
3385:
3386: ;
3387: $if $(@expr1073744601 $!@expr1073744602 $assertEquals $(@expr1073744603 "cppcheck-2.8/test/testuninitvar.cpp" $, 3387 $, "" $, errout@var100 .@expr2780 str (@expr2781 ) $) $) { $return ; }
3388:
3389: $checkUninitVar_ $(@expr1073744606 "cppcheck-2.8/test/testuninitvar.cpp" $, 3389 $, "void f() {\n    int i, y;\n    if (x) {\n        y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}" , "test.cpp" , false $)
3390:
|
3395:
3396: ;
3397: $if $(@expr1073744607 $!@expr1073744608 $assertEquals $(@expr1073744609 "cppcheck-2.8/test/testuninitvar.cpp" $, 3397 $, "" $, errout@var100 .@expr2780 str (@expr2781 ) $) $) { $return ; }
3398:
3399: $checkUninitVar_ $(@expr1073744612 "cppcheck-2.8/test/testuninitvar.cpp" $, 3399 $, "void f() {\n    int i, y;\n    if (x) y = -ENOMEM;\n    else y = get_value(i);\n    if (y != 0) return;\n    i++;\n}" $)
3400:
|
3404:
3405: ;
3406: $if $(@expr1073744613 $!@expr1073744614 $assertEquals $(@expr1073744615 "cppcheck-2.8/test/testuninitvar.cpp" $, 3406 $, "" $, errout@var100 .@expr2780 str (@expr2781 ) $) $) { $return ; }
3407:
3408: $checkUninitVar_ $(@expr1073744618 "cppcheck-2.8/test/testuninitvar.cpp" $, 3408 $, "void f(int x) {\n    int i;\n    if (x) i = 0;\n    if (!x || i>0) {}\n}" $)
3409:
3410:
3411:
3412: ;
3413: $if $(@expr1073744619 $!@expr1073744620 $assertEquals $(@expr1073744621 "cppcheck-2.8/test/testuninitvar.cpp" $, 3413 $, "" $, errout@var100 .@expr2780 str (@expr2781 ) $) $) { $return ; }
3414:
3415: $checkUninitVar_ $(@expr1073744624 "cppcheck-2.8/test/testuninitvar.cpp" $, 3415 $, "void f(int x) {\n    int i;\n    if (!x) { }\n    else i = 0;\n    if (x || i>0) {}\n}" $)
3416:
|
3419:
3420: ;
3421: $if $(@expr1073744625 $!@expr1073744626 $assertEquals $(@expr1073744627 "cppcheck-2.8/test/testuninitvar.cpp" $, 3421 $, "[test.cpp:5]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr2780 str (@expr2781 ) $) $) { $return ; }
3422:
3423: $checkUninitVar_ $(@expr1073744630 "cppcheck-2.8/test/testuninitvar.cpp" $, 3423 $, "void f(int x) {\n    int i;\n    if (x) { }\n    else i = 0;\n    if (x || i>0) {}\n}" $)
3424:
|
3427:
3428: ;
3429: $if $(@expr1073744631 $!@expr1073744632 $assertEquals $(@expr1073744633 "cppcheck-2.8/test/testuninitvar.cpp" $, 3429 $, "" $, errout@var100 .@expr2780 str (@expr2781 ) $) $) { $return ; }
3430:
3431: $checkUninitVar_ $(@expr1073744636 "cppcheck-2.8/test/testuninitvar.cpp" $, 3431 $, "int f(int x) {\n    int y;\n    if (x) y = do_something();\n    if (!x) return 0;\n    return y;\n}" $)
3432:
|
3435:
3436: ;
3437: $if $(@expr1073744637 $!@expr1073744638 $assertEquals $(@expr1073744639 "cppcheck-2.8/test/testuninitvar.cpp" $, 3437 $, "" $, errout@var100 .@expr2780 str (@expr2781 ) $) $) { $return ; }
3438:
3439:
3440: $checkUninitVar_ $(@expr1073744642 "cppcheck-2.8/test/testuninitvar.cpp" $, 3440 $, "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return x ? 2*a : 0;\n}" $)
3441:
|
3444:
3445: ;
3446: $if $(@expr1073744643 $!@expr1073744644 $assertEquals $(@expr1073744645 "cppcheck-2.8/test/testuninitvar.cpp" $, 3446 $, "" $, errout@var100 .@expr2780 str (@expr2781 ) $) $) { $return ; }
3447:
3448: $checkUninitVar_ $(@expr1073744648 "cppcheck-2.8/test/testuninitvar.cpp" $, 3448 $, "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return y ? 2*a : 3*a;\n}" $)
3449:
|
3452:
3453: ;
3454: $if $(@expr1073744649 $!@expr1073744650 $assertEquals $(@expr1073744651 "cppcheck-2.8/test/testuninitvar.cpp" $, 3454 $, "[test.cpp:5]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr2780 str (@expr2781 ) $) $) { $return ; }
3455:
3456: $checkUninitVar_ $(@expr1073744654 "cppcheck-2.8/test/testuninitvar.cpp" $, 3456 $, "void f() {\n    int a;\n    dostuff(\"ab\" cd \"ef\", x?a:z);\n}" $)
3457:
3458:
3459: ;
3460:
3461:
3462: $checkUninitVar_ $(@expr1073744655 "cppcheck-2.8/test/testuninitvar.cpp" $, 3462 $, "void f(int x) {\n    int i;\n    if (a(x)) i = 0;\n    if (b(x)) return;\n    i++;\n}" $)
3463:
|
3466:
3467: ;
3468: $if $(@expr1073744656 $!@expr1073744657 $assertEquals $(@expr1073744658 "cppcheck-2.8/test/testuninitvar.cpp" $, 3468 $, "" $, errout@var100 .@expr2780 str (@expr2781 ) $) $) { $return ; }
3469:
3470: $checkUninitVar_ $(@expr1073744661 "cppcheck-2.8/test/testuninitvar.cpp" $, 3470 $, "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        if (x) i++;\n    }\n}" $)
3471:
|
3475:
3476: ;
3477: $if $(@expr1073744662 $!@expr1073744663 $assertEquals $(@expr1073744664 "cppcheck-2.8/test/testuninitvar.cpp" $, 3477 $, "" $, errout@var100 .@expr2780 str (@expr2781 ) $) $) { $return ; }
3478:
3479: $checkUninitVar_ $(@expr1073744667 "cppcheck-2.8/test/testuninitvar.cpp" $, 3479 $, "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        i++;\n    }\n}" $)
3480:
|
3484:
3485: ;
3486: $todoAssertEquals $(@expr1073744668 "cppcheck-2.8/test/testuninitvar.cpp" $, 3486 $, "error" $, "" $, errout@var100 .@expr2780 str (@expr2781 ) $) ;
3487: }
3488:
3489:
3490: void valueFlowUninit2_value ( )
3491: {
3492: $valueFlowUninit_ $(@expr1073744671 "cppcheck-2.8/test/testuninitvar.cpp" $, 3492 $, "void f() {\n    int i;\n    if (x) {\n        int y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}" , "test.cpp" $)
3493:
|
3499:
3500: ;
3501: $if $(@expr1073744672 $!@expr1073744673 $assertEquals $(@expr1073744674 "cppcheck-2.8/test/testuninitvar.cpp" $, 3501 $, "" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3502:
3503: $valueFlowUninit_ $(@expr1073744677 "cppcheck-2.8/test/testuninitvar.cpp" $, 3503 $, "void f() {\n    int i, y;\n    if (x) {\n        y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}" , "test.cpp" $)
3504:
|
3510:
3511: ;
3512: $if $(@expr1073744678 $!@expr1073744679 $assertEquals $(@expr1073744680 "cppcheck-2.8/test/testuninitvar.cpp" $, 3512 $, "" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3513:
3514: $valueFlowUninit_ $(@expr1073744683 "cppcheck-2.8/test/testuninitvar.cpp" $, 3514 $, "void f() {\n    int i, y;\n    if (x) y = -ENOMEM;\n    else y = get_value(i);\n    if (y != 0) return;\n    i++;\n}" $)
3515:
|
3519:
3520: ;
3521: $if $(@expr1073744684 $!@expr1073744685 $assertEquals $(@expr1073744686 "cppcheck-2.8/test/testuninitvar.cpp" $, 3521 $, "" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3522:
3523: $valueFlowUninit_ $(@expr1073744689 "cppcheck-2.8/test/testuninitvar.cpp" $, 3523 $, "void f(int x) {\n    int i;\n    if (!x) i = 0;\n    if (!x || i>0) {}\n}" $)
3524:
3525:
3526:
3527: ;
3528: $if $(@expr1073744690 $!@expr1073744691 $assertEquals $(@expr1073744692 "cppcheck-2.8/test/testuninitvar.cpp" $, 3528 $, "[test.cpp:3] -> [test.cpp:4]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3529:
3530: $valueFlowUninit_ $(@expr1073744695 "cppcheck-2.8/test/testuninitvar.cpp" $, 3530 $, "void f(int x) {\n    int i;\n    if (x) i = 0;\n    if (!x || i>0) {}\n}" $)
3531:
3532:
3533:
3534: ;
3535: $if $(@expr1073744696 $!@expr1073744697 $assertEquals $(@expr1073744698 "cppcheck-2.8/test/testuninitvar.cpp" $, 3535 $, "" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3536:
3537: $valueFlowUninit_ $(@expr1073744701 "cppcheck-2.8/test/testuninitvar.cpp" $, 3537 $, "void f(int x) {\n    int i;\n    if (!x) { }\n    else i = 0;\n    if (x || i>0) {}\n}" $)
3538:
|
3541:
3542: ;
3543: $if $(@expr1073744702 $!@expr1073744703 $assertEquals $(@expr1073744704 "cppcheck-2.8/test/testuninitvar.cpp" $, 3543 $, "[test.cpp:3] -> [test.cpp:5]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3544:
3545: $valueFlowUninit_ $(@expr1073744707 "cppcheck-2.8/test/testuninitvar.cpp" $, 3545 $, "void f(int x) {\n    int i;\n    if (x) { }\n    else i = 0;\n    if (x || i>0) {}\n}" $)
3546:
|
3549:
3550: ;
3551: $if $(@expr1073744708 $!@expr1073744709 $assertEquals $(@expr1073744710 "cppcheck-2.8/test/testuninitvar.cpp" $, 3551 $, "" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3552:
3553: $valueFlowUninit_ $(@expr1073744713 "cppcheck-2.8/test/testuninitvar.cpp" $, 3553 $, "int f(int x) {\n    int y;\n    if (x) y = do_something();\n    if (!x) return 0;\n    return y;\n}" $)
3554:
|
3557:
3558: ;
3559: $if $(@expr1073744714 $!@expr1073744715 $assertEquals $(@expr1073744716 "cppcheck-2.8/test/testuninitvar.cpp" $, 3559 $, "" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3560:
3561:
3562: $valueFlowUninit_ $(@expr1073744719 "cppcheck-2.8/test/testuninitvar.cpp" $, 3562 $, "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return x ? 2*a : 0;\n}" $)
3563:
|
3566:
3567: ;
3568: $if $(@expr1073744720 $!@expr1073744721 $assertEquals $(@expr1073744722 "cppcheck-2.8/test/testuninitvar.cpp" $, 3568 $, "" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3569:
3570: $valueFlowUninit_ $(@expr1073744725 "cppcheck-2.8/test/testuninitvar.cpp" $, 3570 $, "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return y ? 2*a : 3*a;\n}" $)
3571:
|
3574:
3575: ;
3576: $if $(@expr1073744726 $!@expr1073744727 $assertEquals $(@expr1073744728 "cppcheck-2.8/test/testuninitvar.cpp" $, 3576 $, "[test.cpp:3] -> [test.cpp:5]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3577:
3578: $valueFlowUninit_ $(@expr1073744731 "cppcheck-2.8/test/testuninitvar.cpp" $, 3578 $, "void f() {\n    int a;\n    dostuff(\"ab\" cd \"ef\", x?a:z);\n}" $)
3579:
3580:
3581: ;
3582:
3583:
3584: $valueFlowUninit_ $(@expr1073744732 "cppcheck-2.8/test/testuninitvar.cpp" $, 3584 $, "void f(int x) {\n    int i;\n    if (a(x)) i = 0;\n    if (b(x)) return;\n    i++;\n}" $)
3585:
|
3588:
3589: ;
3590: $if $(@expr1073744733 $!@expr1073744734 $assertEquals $(@expr1073744735 "cppcheck-2.8/test/testuninitvar.cpp" $, 3590 $, "" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3591:
3592: $valueFlowUninit_ $(@expr1073744738 "cppcheck-2.8/test/testuninitvar.cpp" $, 3592 $, "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        if (x) i++;\n    }\n}" $)
3593:
|
3597:
3598: ;
3599: $if $(@expr1073744739 $!@expr1073744740 $assertEquals $(@expr1073744741 "cppcheck-2.8/test/testuninitvar.cpp" $, 3599 $, "" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3600:
3601: $valueFlowUninit_ $(@expr1073744744 "cppcheck-2.8/test/testuninitvar.cpp" $, 3601 $, "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        i++;\n    }\n}" $)
3602:
|
3606:
3607: ;
3608: $todoAssertEquals $(@expr1073744745 "cppcheck-2.8/test/testuninitvar.cpp" $, 3608 $, "error" $, "" $, errout@var100 .@expr2851 str (@expr2852 ) $) ;
3609:
3610: $valueFlowUninit_ $(@expr1073744748 "cppcheck-2.8/test/testuninitvar.cpp" $, 3610 $, "void f ( void ){\n int *p;\n int a[ 2 ] = { [ 0 ] = *p++, [ 1 ] = 1 };\n}" $)
3611:
3612:
3613: ;
3614: $if $(@expr1073744749 $!@expr1073744750 $assertEquals $(@expr1073744751 "cppcheck-2.8/test/testuninitvar.cpp" $, 3614 $, "[test.cpp:3]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3615:
3616: $valueFlowUninit_ $(@expr1073744754 "cppcheck-2.8/test/testuninitvar.cpp" $, 3616 $, "void f(int height) {\n    int a[11];\n    int *p = a;\n    int step = 2;\n    for (int i = 0; i < (height * step); i += step)\n        *p++ = 0;\n    for (int i = 0; i < height; i++)\n        if (a[i]) {}\n}\n" $)
3617:
|
3623:
3624: ;
3625: $if $(@expr1073744755 $!@expr1073744756 $assertEquals $(@expr1073744757 "cppcheck-2.8/test/testuninitvar.cpp" $, 3625 $, "" $, errout@var100 .@expr2851 str (@expr2852 ) $) $) { $return ; }
3626: }
3627:
3628: void uninitStructMember ( ) {
3629: $checkUninitVar_ $(@expr1073744760 "cppcheck-2.8/test/testuninitvar.cpp" $, 3629 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n}" $)
3630:
3631:
3632:
3633: ;
3634: $if $(@expr1073744761 $!@expr1073744762 $assertEquals $(@expr1073744763 "cppcheck-2.8/test/testuninitvar.cpp" $, 3634 $, "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3635:
3636: $checkUninitVar_ $(@expr1073744766 "cppcheck-2.8/test/testuninitvar.cpp" $, 3636 $, "struct AB { int a; int b; };\nvoid f(void) {\n    AB ab;\n    int a = ab.a;\n}" $)
3637:
3638:
3639:
3640: ;
3641: $if $(@expr1073744767 $!@expr1073744768 $assertEquals $(@expr1073744769 "cppcheck-2.8/test/testuninitvar.cpp" $, 3641 $, "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3642:
3643: $checkUninitVar_ $(@expr1073744772 "cppcheck-2.8/test/testuninitvar.cpp" $, 3643 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = ab.a + 1;\n}" $)
3644:
3645:
3646:
3647: ;
3648: $if $(@expr1073744773 $!@expr1073744774 $assertEquals $(@expr1073744775 "cppcheck-2.8/test/testuninitvar.cpp" $, 3648 $, "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3649:
3650: $checkUninitVar_ $(@expr1073744778 "cppcheck-2.8/test/testuninitvar.cpp" $, 3650 $, "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}\n" , "test.c" $)
3651:
|
3655:
3656: ;
3657: $if $(@expr1073744779 $!@expr1073744780 $assertEquals $(@expr1073744781 "cppcheck-2.8/test/testuninitvar.cpp" $, 3657 $, "[test.c:6]: (error) Uninitialized struct member: ab.b\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3658:
3659: $checkUninitVar_ $(@expr1073744784 "cppcheck-2.8/test/testuninitvar.cpp" $, 3659 $, "struct AB { int a; int b; };\nvoid do_something(int a);\nvoid f(void) {\n    struct AB ab;\n    do_something(ab.a);\n}\n" , "test.c" $)
3660:
|
3663:
3664: ;
3665: $if $(@expr1073744785 $!@expr1073744786 $assertEquals $(@expr1073744787 "cppcheck-2.8/test/testuninitvar.cpp" $, 3665 $, "[test.c:5]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3666:
3667: $checkUninitVar_ $(@expr1073744790 "cppcheck-2.8/test/testuninitvar.cpp" $, 3667 $, "struct AB { int a; int b; };\nvoid do_something(const struct AB &ab) { a = ab.a; }\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}" $)
3668:
|
3672:
3673: ;
3674: $if $(@expr1073744791 $!@expr1073744792 $assertEquals $(@expr1073744793 "cppcheck-2.8/test/testuninitvar.cpp" $, 3674 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3675:
3676: $checkUninitVar_ $(@expr1073744796 "cppcheck-2.8/test/testuninitvar.cpp" $, 3676 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n}\n" , "test.c" $)
3677:
3678:
3679:
3680: ;
3681: $if $(@expr1073744797 $!@expr1073744798 $assertEquals $(@expr1073744799 "cppcheck-2.8/test/testuninitvar.cpp" $, 3681 $, "[test.c:4]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3682:
3683: $checkUninitVar_ $(@expr1073744802 "cppcheck-2.8/test/testuninitvar.cpp" $, 3683 $, "struct AB { int a; int b; };\nvoid f(void) {\n    AB ab1;\n    AB ab2 = { ab1.a, 0 };\n}" $)
3684:
3685:
3686:
3687: ;
3688: $if $(@expr1073744803 $!@expr1073744804 $assertEquals $(@expr1073744805 "cppcheck-2.8/test/testuninitvar.cpp" $, 3688 $, "[test.cpp:4]: (error) Uninitialized struct member: ab1.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3689:
3690: $checkUninitVar_ $(@expr1073744808 "cppcheck-2.8/test/testuninitvar.cpp" $, 3690 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    buf[ab.a] = 0;\n}\n" , "test.c" $)
3691:
3692:
3693:
3694: ;
3695: $if $(@expr1073744809 $!@expr1073744810 $assertEquals $(@expr1073744811 "cppcheck-2.8/test/testuninitvar.cpp" $, 3695 $, "[test.c:4]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3696:
3697: $checkUninitVar_ $(@expr1073744814 "cppcheck-2.8/test/testuninitvar.cpp" $, 3697 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = ab;\n}\n" , "test.c" $)
3698:
|
3701:
3702: ;
3703: $if $(@expr1073744815 $!@expr1073744816 $assertEquals $(@expr1073744817 "cppcheck-2.8/test/testuninitvar.cpp" $, 3703 $, "[test.c:5]: (error) Uninitialized struct member: ab.b\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3704:
3705: $checkUninitVar_ $(@expr1073744820 "cppcheck-2.8/test/testuninitvar.cpp" $, 3705 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = *(&ab);\n}\n" , "test.c" $)
3706:
|
3709:
3710: ;
3711: $if $(@expr1073744821 $!@expr1073744822 $assertEquals $(@expr1073744823 "cppcheck-2.8/test/testuninitvar.cpp" $, 3711 $, "[test.c:5]: (error) Uninitialized struct member: ab.b\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3712:
3713: $checkUninitVar_ $(@expr1073744826 "cppcheck-2.8/test/testuninitvar.cpp" $, 3713 $, "void f(void) {\n    struct AB ab;\n    int x;\n    ab.a = (addr)&x;\n    dostuff(&ab,0);\n}\n" , "test.c" $)
3714:
|
3717:
3718: ;
3719: $if $(@expr1073744827 $!@expr1073744828 $assertEquals $(@expr1073744829 "cppcheck-2.8/test/testuninitvar.cpp" $, 3719 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3720:
3721: $checkUninitVar_ $(@expr1073744832 "cppcheck-2.8/test/testuninitvar.cpp" $, 3721 $, "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}" $)
3722:
|
3725:
3726: ;
3727: $if $(@expr1073744833 $!@expr1073744834 $assertEquals $(@expr1073744835 "cppcheck-2.8/test/testuninitvar.cpp" $, 3727 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3728:
3729: $checkUninitVar_ $(@expr1073744838 "cppcheck-2.8/test/testuninitvar.cpp" $, 3729 $, "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}" $)
3730:
|
3733:
3734: ;
3735: $if $(@expr1073744839 $!@expr1073744840 $assertEquals $(@expr1073744841 "cppcheck-2.8/test/testuninitvar.cpp" $, 3735 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3736:
3737: $checkUninitVar_ $(@expr1073744844 "cppcheck-2.8/test/testuninitvar.cpp" $, 3737 $, "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; element->v;\n}" $)
3738:
|
3741:
3742: ;
3743: $if $(@expr1073744845 $!@expr1073744846 $assertEquals $(@expr1073744847 "cppcheck-2.8/test/testuninitvar.cpp" $, 3743 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3744:
3745: $checkUninitVar_ $(@expr1073744850 "cppcheck-2.8/test/testuninitvar.cpp" $, 3745 $, "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}" $)
3746:
|
3749:
3750: ;
3751: $if $(@expr1073744851 $!@expr1073744852 $assertEquals $(@expr1073744853 "cppcheck-2.8/test/testuninitvar.cpp" $, 3751 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3752:
3753: $checkUninitVar_ $(@expr1073744856 "cppcheck-2.8/test/testuninitvar.cpp" $, 3753 $, "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}" $)
3754:
|
3757:
3758: ;
3759: $if $(@expr1073744857 $!@expr1073744858 $assertEquals $(@expr1073744859 "cppcheck-2.8/test/testuninitvar.cpp" $, 3759 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3760:
3761: $checkUninitVar_ $(@expr1073744862 "cppcheck-2.8/test/testuninitvar.cpp" $, 3761 $, "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}" $)
3762:
|
3765:
3766: ;
3767: $if $(@expr1073744863 $!@expr1073744864 $assertEquals $(@expr1073744865 "cppcheck-2.8/test/testuninitvar.cpp" $, 3767 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3768:
3769: $checkUninitVar_ $(@expr1073744868 "cppcheck-2.8/test/testuninitvar.cpp" $, 3769 $, "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; element->v;\n}" $)
3770:
|
3773:
3774: ;
3775: $if $(@expr1073744869 $!@expr1073744870 $assertEquals $(@expr1073744871 "cppcheck-2.8/test/testuninitvar.cpp" $, 3775 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3776:
3777: $checkUninitVar_ $(@expr1073744874 "cppcheck-2.8/test/testuninitvar.cpp" $, 3777 $, "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}" $)
3778:
|
3781:
3782: ;
3783: $if $(@expr1073744875 $!@expr1073744876 $assertEquals $(@expr1073744877 "cppcheck-2.8/test/testuninitvar.cpp" $, 3783 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3784:
3785: $checkUninitVar_ $(@expr1073744880 "cppcheck-2.8/test/testuninitvar.cpp" $, 3785 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    assign(&ab.a, 0);\n}\n" , "test.c" $)
3786:
3787:
3788:
3789: ;
3790: $if $(@expr1073744881 $!@expr1073744882 $assertEquals $(@expr1073744883 "cppcheck-2.8/test/testuninitvar.cpp" $, 3790 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3791:
3792: $checkUninitVar_ $(@expr1073744886 "cppcheck-2.8/test/testuninitvar.cpp" $, 3792 $, "struct Cstring { char *text; int size, alloc; };\nint maybe();\nvoid f() {\n    Cstring res;\n    if ( ! maybe() ) return;\n    ( ((res).text = (void*)0), ((res).size = (res).alloc = 0) );\n}" $)
3793:
|
3797:
3798: ;
3799: $if $(@expr1073744887 $!@expr1073744888 $assertEquals $(@expr1073744889 "cppcheck-2.8/test/testuninitvar.cpp" $, 3799 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3800:
3801: {
3802: const char argDirectionsTestXmlData@var126 [@expr1073744892 219 ] =@expr1073744893 "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"uninitvar_funcArgInTest\">\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n  <function name=\"uninitvar_funcArgOutTest\">\n    <arg nr=\"1\" direction=\"out\"/>\n  </function>\n</def>"
3803:
|
3809:
3810: ;
3811:
3812: $if $(@expr1073744894 $!@expr1073744895 $assertEquals $(@expr1073744896 "cppcheck-2.8/test/testuninitvar.cpp" $, 3812 $, true $, $(@expr1073744897 settings@var102 .@expr1073744898 library@var103 .@expr1073744899 loadxmldata (@expr1073744900 argDirectionsTestXmlData@var126 , sizeof (@expr1073744901 argDirectionsTestXmlData@var126 ) /@expr1073744902 sizeof (@expr1073744903 argDirectionsTestXmlData@var126 [@expr1073744904 0 ] ) ) $) $) $) { $return ; }
3813:
3814: $checkUninitVar_ $(@expr1073744905 "cppcheck-2.8/test/testuninitvar.cpp" $, 3814 $, "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    uninitvar_funcArgInTest(&ab);\n    x = ab;\n}\n" , "test.c" $)
3815:
|
3818:
3819: ;
3820: $if $(@expr1073744906 $!@expr1073744907 $assertEquals $(@expr1073744908 "cppcheck-2.8/test/testuninitvar.cpp" $, 3820 $, "[test.c:5]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3821:
3822: $checkUninitVar_ $(@expr1073744911 "cppcheck-2.8/test/testuninitvar.cpp" $, 3822 $, "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    uninitvar_funcArgOutTest(&ab);\n    x = ab;\n}\n" , "test.c" $)
3823:
|
3826:
3827: ;
3828: $if $(@expr1073744912 $!@expr1073744913 $assertEquals $(@expr1073744914 "cppcheck-2.8/test/testuninitvar.cpp" $, 3828 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3829: }
3830:
3831: $checkUninitVar_ $(@expr1073744917 "cppcheck-2.8/test/testuninitvar.cpp" $, 3831 $, "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    ab.b = 0;\n    do_something(ab);\n}\n" , "test.c" $)
3832:
|
3837:
3838: ;
3839: $if $(@expr1073744918 $!@expr1073744919 $assertEquals $(@expr1073744920 "cppcheck-2.8/test/testuninitvar.cpp" $, 3839 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3840:
3841: {
3842: $checkUninitVar_ $(@expr1073744923 "cppcheck-2.8/test/testuninitvar.cpp" $, 3842 $, "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(ab.a, STR);\n}\n" , "test.c" $)
3843:
3844:
3845:
3846: ;
3847: $if $(@expr1073744924 $!@expr1073744925 $assertEquals $(@expr1073744926 "cppcheck-2.8/test/testuninitvar.cpp" $, 3847 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3848:
3849: $checkUninitVar_ $(@expr1073744929 "cppcheck-2.8/test/testuninitvar.cpp" $, 3849 $, "struct AB { unsigned char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy((char *)ab.a, STR);\n}\n" , "test.c" $)
3850:
3851:
3852:
3853: ;
3854: $if $(@expr1073744930 $!@expr1073744931 $assertEquals $(@expr1073744932 "cppcheck-2.8/test/testuninitvar.cpp" $, 3854 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3855:
3856: $checkUninitVar_ $(@expr1073744935 "cppcheck-2.8/test/testuninitvar.cpp" $, 3856 $, "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(x, ab.a);\n}\n" , "test.c" $)
3857:
3858:
3859:
3860: ;
3861: $todoAssertEquals $(@expr1073744936 "cppcheck-2.8/test/testuninitvar.cpp" $, 3861 $, "[test.c:4]: (error) Uninitialized variable: ab.a\n" $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) ;
3862:
3863: $checkUninitVar_ $(@expr1073744939 "cppcheck-2.8/test/testuninitvar.cpp" $, 3863 $, "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    dosomething(ab.a);\n}\n" , "test.c" $)
3864:
3865:
3866:
3867: ;
3868: $if $(@expr1073744940 $!@expr1073744941 $assertEquals $(@expr1073744942 "cppcheck-2.8/test/testuninitvar.cpp" $, 3868 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3869: }
3870:
3871: $checkUninitVar_ $(@expr1073744945 "cppcheck-2.8/test/testuninitvar.cpp" $, 3871 $, "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab = getAB();\n    do_something(ab);\n}\n" , "test.c" $)
3872:
|
3876:
3877: ;
3878: $if $(@expr1073744946 $!@expr1073744947 $assertEquals $(@expr1073744948 "cppcheck-2.8/test/testuninitvar.cpp" $, 3878 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3879:
3880: {
3881:
3882: $checkUninitVar_ $(@expr1073744951 "cppcheck-2.8/test/testuninitvar.cpp" $, 3882 $, "struct AB { int a; int b; void set(); };\nvoid f(void) {\n    struct AB ab;\n    ab.set();\n    x = ab;\n}" $)
3883:
|
3886:
3887: ;
3888: $if $(@expr1073744952 $!@expr1073744953 $assertEquals $(@expr1073744954 "cppcheck-2.8/test/testuninitvar.cpp" $, 3888 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3889:
3890: $checkUninitVar_ $(@expr1073744957 "cppcheck-2.8/test/testuninitvar.cpp" $, 3890 $, "struct AB { int a; int get() const; };\nvoid f(void) {\n    struct AB ab;\n    ab.get();\n    x = ab;\n}" $)
3891:
|
3894:
3895: ;
3896: $if $(@expr1073744958 $!@expr1073744959 $assertEquals $(@expr1073744960 "cppcheck-2.8/test/testuninitvar.cpp" $, 3896 $, "[test.cpp:5]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3897:
3898: $checkUninitVar_ $(@expr1073744963 "cppcheck-2.8/test/testuninitvar.cpp" $, 3898 $, "struct AB { int a; void dostuff() {} };\nvoid f(void) {\n    struct AB ab;\n    ab.dostuff();\n    x = ab;\n}" $)
3899:
|
3902:
3903: ;
3904: $todoAssertEquals $(@expr1073744964 "cppcheck-2.8/test/testuninitvar.cpp" $, 3904 $, "error" $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) ;
3905: }
3906:
3907: $checkUninitVar_ $(@expr1073744967 "cppcheck-2.8/test/testuninitvar.cpp" $, 3907 $, "struct AB { int a; struct { int b; int c; } s; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    ab.s.b = 2;\n    ab.s.c = 3;\n    do_something(ab);\n}\n" , "test.c" $)
3908:
|
3914:
3915: ;
3916: $if $(@expr1073744968 $!@expr1073744969 $assertEquals $(@expr1073744970 "cppcheck-2.8/test/testuninitvar.cpp" $, 3916 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3917:
3918: $checkUninitVar_ $(@expr1073744973 "cppcheck-2.8/test/testuninitvar.cpp" $, 3918 $, "struct conf {\n    char x;\n};\n\nvoid do_something(struct conf ant_conf);\n\nvoid f(void) {\n   struct conf c;\n   initdata(&c);\n   do_something(c);\n}\n" , "test.c" $)
3919:
|
3927:
3928: ;
3929: $if $(@expr1073744974 $!@expr1073744975 $assertEquals $(@expr1073744976 "cppcheck-2.8/test/testuninitvar.cpp" $, 3929 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3930:
3931: $checkUninitVar_ $(@expr1073744979 "cppcheck-2.8/test/testuninitvar.cpp" $, 3931 $, "struct PIXEL {\n    union  {\n        struct { unsigned char red,green,blue,alpha; };\n        unsigned int color;\n    };\n};\n\nunsigned char f() {\n    struct PIXEL p1;\n    p1.color = 255;\n    return p1.red;\n}" $)
3932:
|
3941:
3942: ;
3943: $if $(@expr1073744980 $!@expr1073744981 $assertEquals $(@expr1073744982 "cppcheck-2.8/test/testuninitvar.cpp" $, 3943 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3944:
3945: $checkUninitVar_ $(@expr1073744985 "cppcheck-2.8/test/testuninitvar.cpp" $, 3945 $, "struct AB { int a; int b; };\nint f() {\n  struct AB *ab;\n  for (i = 1; i < 10; i++) {\n    if (condition && (ab = getab()) != NULL) {\n      a = ab->a;\n    }\n  }\n}" $)
3946:
|
3952:
3953: ;
3954: $if $(@expr1073744986 $!@expr1073744987 $assertEquals $(@expr1073744988 "cppcheck-2.8/test/testuninitvar.cpp" $, 3954 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3955:
3956: $checkUninitVar_ $(@expr1073744991 "cppcheck-2.8/test/testuninitvar.cpp" $, 3956 $, "struct AB { int a; int b; };\nint f(int x) {\n  struct AB *ab;\n  if (x == 0) {\n    ab = getab();\n  }\n  if (x == 0 && (ab != NULL || ab->a == 0)) { }\n}" $)
3957:
|
3962:
3963: ;
3964: $if $(@expr1073744992 $!@expr1073744993 $assertEquals $(@expr1073744994 "cppcheck-2.8/test/testuninitvar.cpp" $, 3964 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3965:
3966: $checkUninitVar_ $(@expr1073744997 "cppcheck-2.8/test/testuninitvar.cpp" $, 3966 $, "struct A { int *x; };\nvoid foo(void *info, void*p);\nvoid bar(void) {\n  struct A *delete = 0;\n  foo( info, NULL );\n}" $)
3967:
|
3970:
3971: ;
3972: $if $(@expr1073744998 $!@expr1073744999 $assertEquals $(@expr1073745000 "cppcheck-2.8/test/testuninitvar.cpp" $, 3972 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3973:
3974: $checkUninitVar_ $(@expr1073745003 "cppcheck-2.8/test/testuninitvar.cpp" $, 3974 $, "struct ABC { int a; int b; int c; };\nvoid foo(int x, const struct ABC *abc);\nvoid bar(void) {\n  struct ABC abc;\n  foo(123, &abc);\n  return abc.b;\n}" $)
3975:
|
3979:
3980: ;
3981: $todoAssertEquals $(@expr1073745004 "cppcheck-2.8/test/testuninitvar.cpp" $, 3981 $, "[test.cpp:5]: (error) Uninitialized struct member: abc.a\n[test.cpp:5]: (error) Uninitialized struct member: abc.b\n[test.cpp:5]: (error) Uninitialized struct member: abc.c\n" $, "[test.cpp:6]: (error) Uninitialized struct member: abc.b\n" $, errout@var100 .@expr2940 str (@expr2941 ) $)
3982:
3983:
3984:
3985: ;
3986:
3987: $checkUninitVar_ $(@expr1073745007 "cppcheck-2.8/test/testuninitvar.cpp" $, 3987 $, "struct ABC { int a; int b; int c; };\nvoid foo() {\n  struct ABC abc;\n  dostuff((uint32_t *)&abc.a);\n}" $)
3988:
3989:
3990:
3991: ;
3992: $if $(@expr1073745008 $!@expr1073745009 $assertEquals $(@expr1073745010 "cppcheck-2.8/test/testuninitvar.cpp" $, 3992 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3993:
3994: $checkUninitVar_ $(@expr1073745013 "cppcheck-2.8/test/testuninitvar.cpp" $, 3994 $, "void f(void) {\n    struct tm t;\n    t.tm_year = 123;\n}" $)
3995:
3996:
3997: ;
3998: $if $(@expr1073745014 $!@expr1073745015 $assertEquals $(@expr1073745016 "cppcheck-2.8/test/testuninitvar.cpp" $, 3998 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
3999:
4000:
4001: $checkUninitVar_ $(@expr1073745019 "cppcheck-2.8/test/testuninitvar.cpp" $, 4001 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.b;\n}\n" , "test.c" $)
4002:
|
4005:
4006: ;
4007: $if $(@expr1073745020 $!@expr1073745021 $assertEquals $(@expr1073745022 "cppcheck-2.8/test/testuninitvar.cpp" $, 4007 $, "[test.c:5]: (error) Uninitialized struct member: ab.b\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4008:
4009: $checkUninitVar_ $(@expr1073745025 "cppcheck-2.8/test/testuninitvar.cpp" $, 4009 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.a;\n}\n" , "test.c" $)
4010:
|
4013:
4014: ;
4015: $if $(@expr1073745026 $!@expr1073745027 $assertEquals $(@expr1073745028 "cppcheck-2.8/test/testuninitvar.cpp" $, 4015 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4016:
4017: $checkUninitVar_ $(@expr1073745031 "cppcheck-2.8/test/testuninitvar.cpp" $, 4017 $, "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    s.a = 0;\n    return s;\n}\n" $)
4018:
|
4021:
4022: ;
4023: $if $(@expr1073745032 $!@expr1073745033 $assertEquals $(@expr1073745034 "cppcheck-2.8/test/testuninitvar.cpp" $, 4023 $, "[test.cpp:5]: (error) Uninitialized struct member: s.b\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4024:
4025: $checkUninitVar_ $(@expr1073745037 "cppcheck-2.8/test/testuninitvar.cpp" $, 4025 $, "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    return s.a ? 1 : 2;\n}\n" $)
4026:
4027:
4028:
4029: ;
4030: $if $(@expr1073745038 $!@expr1073745039 $assertEquals $(@expr1073745040 "cppcheck-2.8/test/testuninitvar.cpp" $, 4030 $, "[test.cpp:4]: (error) Uninitialized struct member: s.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4031:
4032:
4033: $checkUninitVar_ $(@expr1073745043 "cppcheck-2.8/test/testuninitvar.cpp" $, 4033 $, "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.a == 0) { }\n}\n" , "test.c" $)
4034:
|
4041:
4042: ;
4043: $if $(@expr1073745044 $!@expr1073745045 $assertEquals $(@expr1073745046 "cppcheck-2.8/test/testuninitvar.cpp" $, 4043 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4044:
4045: $checkUninitVar_ $(@expr1073745049 "cppcheck-2.8/test/testuninitvar.cpp" $, 4045 $, "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.b == 0) { }\n}\n" , "test.c" , false $)
4046:
|
4053:
4054: ;
4055: $if $(@expr1073745050 $!@expr1073745051 $assertEquals $(@expr1073745052 "cppcheck-2.8/test/testuninitvar.cpp" $, 4055 $, "[test.c:9]: (error) Uninitialized struct member: fred.b\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4056:
4057: $checkUninitVar_ $(@expr1073745055 "cppcheck-2.8/test/testuninitvar.cpp" $, 4057 $, "struct Fred { int a; };\nvoid f() {\n    struct Fred fred;\n    if (fred.a==1) {}\n}" , "test.c" $)
4058:
4059:
4060:
4061: ;
4062: $if $(@expr1073745056 $!@expr1073745057 $assertEquals $(@expr1073745058 "cppcheck-2.8/test/testuninitvar.cpp" $, 4062 $, "[test.c:4]: (error) Uninitialized struct member: fred.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4063:
4064: $checkUninitVar_ $(@expr1073745061 "cppcheck-2.8/test/testuninitvar.cpp" $, 4064 $, "struct S { int n; int m; };\nvoid f(void) {\n struct S s;\n for (s.n = 0; s.n <= 10; s.n++) { }\n}" , "test.c" $)
4065:
4066:
4067:
4068: ;
4069: $if $(@expr1073745062 $!@expr1073745063 $assertEquals $(@expr1073745064 "cppcheck-2.8/test/testuninitvar.cpp" $, 4069 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4070:
4071: $checkUninitVar_ $(@expr1073745067 "cppcheck-2.8/test/testuninitvar.cpp" $, 4071 $, "void test2() {\n  struct { char type; } s_d;\n  if (foo(&s_d.type)){}\n}" $)
4072:
4073:
4074: ;
4075: $if $(@expr1073745068 $!@expr1073745069 $assertEquals $(@expr1073745070 "cppcheck-2.8/test/testuninitvar.cpp" $, 4075 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4076:
4077:
4078: $checkUninitVar_ $(@expr1073745073 "cppcheck-2.8/test/testuninitvar.cpp" $, 4078 $, "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { clear(ab); z = ab.a; }\n}" $)
4079:
4080:
4081:
4082: ;
4083: $if $(@expr1073745074 $!@expr1073745075 $assertEquals $(@expr1073745076 "cppcheck-2.8/test/testuninitvar.cpp" $, 4083 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4084:
4085: $checkUninitVar_ $(@expr1073745079 "cppcheck-2.8/test/testuninitvar.cpp" $, 4085 $, "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { ab.a = ab.a + 1; }\n}" $)
4086:
4087:
4088:
4089: ;
4090: $if $(@expr1073745080 $!@expr1073745081 $assertEquals $(@expr1073745082 "cppcheck-2.8/test/testuninitvar.cpp" $, 4090 $, "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4091:
4092: $checkUninitVar_ $(@expr1073745085 "cppcheck-2.8/test/testuninitvar.cpp" $, 4092 $, "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { init(&ab); z = ab.a; }\n}" $)
4093:
4094:
4095:
4096: ;
4097: $if $(@expr1073745086 $!@expr1073745087 $assertEquals $(@expr1073745088 "cppcheck-2.8/test/testuninitvar.cpp" $, 4097 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4098:
4099:
4100: $checkUninitVar_ $(@expr1073745091 "cppcheck-2.8/test/testuninitvar.cpp" $, 4100 $, "struct AB { int a[10]; int b; };\nvoid f() {\n    struct AB ab;\n    int *p = ab.a;\n}" $)
4101:
4102:
4103:
4104: ;
4105: $if $(@expr1073745092 $!@expr1073745093 $assertEquals $(@expr1073745094 "cppcheck-2.8/test/testuninitvar.cpp" $, 4105 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4106:
4107:
4108: $checkUninitVar_ $(@expr1073745097 "cppcheck-2.8/test/testuninitvar.cpp" $, 4108 $, "struct A { int x; };\nvoid foo() {\n  struct A a;\n  int& x = a.x;\n  x = 0;\n  return a.x;\n}" $)
4109:
|
4113:
4114: ;
4115: $if $(@expr1073745098 $!@expr1073745099 $assertEquals $(@expr1073745100 "cppcheck-2.8/test/testuninitvar.cpp" $, 4115 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4116:
4117:
4118: $checkUninitVar_ $(@expr1073745103 "cppcheck-2.8/test/testuninitvar.cpp" $, 4118 $, "struct AB { int a=1; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n    int b = ab.b;\n}" $)
4119:
|
4122:
4123: ;
4124: $if $(@expr1073745104 $!@expr1073745105 $assertEquals $(@expr1073745106 "cppcheck-2.8/test/testuninitvar.cpp" $, 4124 $, "[test.cpp:5]: (error) Uninitialized struct member: ab.b\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4125:
4126:
4127: $checkUninitVar_ $(@expr1073745109 "cppcheck-2.8/test/testuninitvar.cpp" $, 4127 $, "struct A {\n    std::map<int, int> m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" $)
4128:
|
4133:
4134: ;
4135: $if $(@expr1073745110 $!@expr1073745111 $assertEquals $(@expr1073745112 "cppcheck-2.8/test/testuninitvar.cpp" $, 4135 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4136:
4137:
4138: $checkUninitVar_ $(@expr1073745115 "cppcheck-2.8/test/testuninitvar.cpp" $, 4138 $, "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" , "test.cpp" $)
4139:
|
4144:
4145: ;
4146: $if $(@expr1073745116 $!@expr1073745117 $assertEquals $(@expr1073745118 "cppcheck-2.8/test/testuninitvar.cpp" $, 4146 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4147:
4148:
4149: $checkUninitVar_ $(@expr1073745121 "cppcheck-2.8/test/testuninitvar.cpp" $, 4149 $, "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" , "test.c" $)
4150:
|
4155:
4156: ;
4157: $if $(@expr1073745122 $!@expr1073745123 $assertEquals $(@expr1073745124 "cppcheck-2.8/test/testuninitvar.cpp" $, 4157 $, "[test.c:7]: (error) Uninitialized struct member: a.m\n" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4158:
4159:
4160: $checkUninitVar_ $(@expr1073745127 "cppcheck-2.8/test/testuninitvar.cpp" $, 4160 $, "class C { C(); }\nstruct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" $)
4161:
|
4167:
4168: ;
4169: $if $(@expr1073745128 $!@expr1073745129 $assertEquals $(@expr1073745130 "cppcheck-2.8/test/testuninitvar.cpp" $, 4169 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4170:
4171:
4172: $checkUninitVar_ $(@expr1073745133 "cppcheck-2.8/test/testuninitvar.cpp" $, 4172 $, "struct S { char *p; int len; };\nvoid f() {\n    S s;\n    s.p = nullptr;\n    char* q = (s).p;\n}\n" $)
4173:
|
4176:
4177: ;
4178: $if $(@expr1073745134 $!@expr1073745135 $assertEquals $(@expr1073745136 "cppcheck-2.8/test/testuninitvar.cpp" $, 4178 $, "" $, errout@var100 .@expr2940 str (@expr2941 ) $) $) { $return ; }
4179: }
4180:
4181: void uninitvar2_while ( ) {
4182:
4183:
4184:
4185: $checkUninitVar_ $(@expr1073745139 "cppcheck-2.8/test/testuninitvar.cpp" $, 4185 $, "void f() {\n    int x;\n    while (a) {\n        x = x + 1;\n    }\n}" $)
4186:
|
4189:
4190: ;
4191: $if $(@expr1073745140 $!@expr1073745141 $assertEquals $(@expr1073745142 "cppcheck-2.8/test/testuninitvar.cpp" $, 4191 $, "[test.cpp:4]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4192:
4193: $checkUninitVar_ $(@expr1073745145 "cppcheck-2.8/test/testuninitvar.cpp" $, 4193 $, "void f() {\n    int x;\n    do {\n        x = x + 1;\n    } while (a);\n}" $)
4194:
|
4197:
4198: ;
4199: $if $(@expr1073745146 $!@expr1073745147 $assertEquals $(@expr1073745148 "cppcheck-2.8/test/testuninitvar.cpp" $, 4199 $, "[test.cpp:4]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4200:
4201: $checkUninitVar_ $(@expr1073745151 "cppcheck-2.8/test/testuninitvar.cpp" $, 4201 $, "void f() {\n    for (int x = x; x < 10; x++) {}\n}" $)
4202:
4203: ;
4204: $if $(@expr1073745152 $!@expr1073745153 $assertEquals $(@expr1073745154 "cppcheck-2.8/test/testuninitvar.cpp" $, 4204 $, "[test.cpp:2]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4205:
4206:
4207: $checkUninitVar_ $(@expr1073745157 "cppcheck-2.8/test/testuninitvar.cpp" $, 4207 $, "void f() {\n    for (Element *ptr3 = ptr3->Next(); ptr3; ptr3 = ptr3->Next()) {}\n}" $)
4208:
4209: ;
4210: $if $(@expr1073745158 $!@expr1073745159 $assertEquals $(@expr1073745160 "cppcheck-2.8/test/testuninitvar.cpp" $, 4210 $, "[test.cpp:2]: (error) Uninitialized variable: ptr3\n" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4211:
4212:
4213: $checkUninitVar_ $(@expr1073745163 "cppcheck-2.8/test/testuninitvar.cpp" $, 4213 $, "void f() {\n    int x;\n    while (a) {\n        init(&x);\n        x++;\n    }\n}" $)
4214:
|
4218:
4219: ;
4220: $if $(@expr1073745164 $!@expr1073745165 $assertEquals $(@expr1073745166 "cppcheck-2.8/test/testuninitvar.cpp" $, 4220 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4221:
4222: $checkUninitVar_ $(@expr1073745169 "cppcheck-2.8/test/testuninitvar.cpp" $, 4222 $, "void f() {\n    int x;\n    while (a) {\n        if (b) x++;\n        else x = 0;\n    }\n}" $)
4223:
|
4227:
4228: ;
4229: $if $(@expr1073745170 $!@expr1073745171 $assertEquals $(@expr1073745172 "cppcheck-2.8/test/testuninitvar.cpp" $, 4229 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4230:
4231: $checkUninitVar_ $(@expr1073745175 "cppcheck-2.8/test/testuninitvar.cpp" $, 4231 $, "void f() {\n    int x;\n    for (int i = 0; i < 10; i += x) {\n        x = y;\n    }\n}" $)
4232:
|
4235:
4236: ;
4237: $if $(@expr1073745176 $!@expr1073745177 $assertEquals $(@expr1073745178 "cppcheck-2.8/test/testuninitvar.cpp" $, 4237 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4238:
4239: $checkUninitVar_ $(@expr1073745181 "cppcheck-2.8/test/testuninitvar.cpp" $, 4239 $, "void f() {\n    int x;\n    for (int i = 0; i < 10; i += x) { }\n}" $)
4240:
4241:
4242: ;
4243: $if $(@expr1073745182 $!@expr1073745183 $assertEquals $(@expr1073745184 "cppcheck-2.8/test/testuninitvar.cpp" $, 4243 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4244:
4245: $checkUninitVar_ $(@expr1073745187 "cppcheck-2.8/test/testuninitvar.cpp" $, 4245 $, "int f() {\n    int i;\n    for (i=0;i<9;++i)\n        if (foo()) return i;\n    return 9;\n}" $)
4246:
|
4249:
4250: ;
4251: $if $(@expr1073745188 $!@expr1073745189 $assertEquals $(@expr1073745190 "cppcheck-2.8/test/testuninitvar.cpp" $, 4251 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4252:
4253: $checkUninitVar_ $(@expr1073745193 "cppcheck-2.8/test/testuninitvar.cpp" $, 4253 $, "void f() {\n    int i;\n    do {} while (!getvalue(&i));\n    i++;\n}" $)
4254:
4255:
4256:
4257: ;
4258: $if $(@expr1073745194 $!@expr1073745195 $assertEquals $(@expr1073745196 "cppcheck-2.8/test/testuninitvar.cpp" $, 4258 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4259:
4260: $checkUninitVar_ $(@expr1073745199 "cppcheck-2.8/test/testuninitvar.cpp" $, 4260 $, "int f(void) {\n   int x;\n   while (a()) {\n       if (b()) {\n           x = 1;\n           break;       }\n   }\n   return x;\n}" $)
4261:
|
4268:
4269: ;
4270: $todoAssertEquals $(@expr1073745200 "cppcheck-2.8/test/testuninitvar.cpp" $, 4270 $, "error" $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) ;
4271:
4272: $checkUninitVar_ $(@expr1073745203 "cppcheck-2.8/test/testuninitvar.cpp" $, 4272 $, "int f(void) {\n   int x;\n   while (a()) {\n       if (b() && (x=1)) {\n           return x;\n       }\n   }\n   return 0;\n}" $)
4273:
|
4279:
4280: ;
4281: $if $(@expr1073745204 $!@expr1073745205 $assertEquals $(@expr1073745206 "cppcheck-2.8/test/testuninitvar.cpp" $, 4281 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4282:
4283:
4284: $checkUninitVar_ $(@expr1073745209 "cppcheck-2.8/test/testuninitvar.cpp" $, 4284 $, "void f(void) {\n   int x;\n   for (;;) {\n       int a = x+1;\n       do_something(a);\n   }\n}" $)
4285:
|
4289:
4290: ;
4291: $if $(@expr1073745210 $!@expr1073745211 $assertEquals $(@expr1073745212 "cppcheck-2.8/test/testuninitvar.cpp" $, 4291 $, "[test.cpp:4]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4292:
4293: $checkUninitVar_ $(@expr1073745215 "cppcheck-2.8/test/testuninitvar.cpp" $, 4293 $, "struct AB {int a; int b;};\nvoid f(void) {\n   struct AB ab;\n   while (true) {\n       int a = 1+ab.a;\n       do_something(a);\n   }\n}\n" , "test.c" $)
4294:
|
4299:
4300: ;
4301: $if $(@expr1073745216 $!@expr1073745217 $assertEquals $(@expr1073745218 "cppcheck-2.8/test/testuninitvar.cpp" $, 4301 $, "[test.c:5]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4302:
4303: $checkUninitVar_ $(@expr1073745221 "cppcheck-2.8/test/testuninitvar.cpp" $, 4303 $, "void f(int i) {\n    float *buffer;\n    if(i>10) buffer = f;\n    if(i>10) {\n        for (int i=0;i<10;i++)\n            buffer[i] = 0;\n    }\n}" $)
4304:
|
4309:
4310: ;
4311: $if $(@expr1073745222 $!@expr1073745223 $assertEquals $(@expr1073745224 "cppcheck-2.8/test/testuninitvar.cpp" $, 4311 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4312:
4313: $checkUninitVar_ $(@expr1073745227 "cppcheck-2.8/test/testuninitvar.cpp" $, 4313 $, "void f(){\n    int x;\n    for (int i = 0; i < 10; i++) {\n        asm(\"foo\");\n        if (x & 0xf1) { }\n    }\n}" $)
4314:
|
4318:
4319: ;
4320: $if $(@expr1073745228 $!@expr1073745229 $assertEquals $(@expr1073745230 "cppcheck-2.8/test/testuninitvar.cpp" $, 4320 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4321:
4322: $checkUninitVar_ $(@expr1073745233 "cppcheck-2.8/test/testuninitvar.cpp" $, 4322 $, "static void f(void) {\n    struct ABC *abc;\n    for (i = 0; i < 10; i++)\n        x += sizeof(*abc);\n}" $)
4323:
4324:
4325:
4326: ;
4327: $if $(@expr1073745234 $!@expr1073745235 $assertEquals $(@expr1073745236 "cppcheck-2.8/test/testuninitvar.cpp" $, 4327 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4328:
4329: $checkUninitVar_ $(@expr1073745239 "cppcheck-2.8/test/testuninitvar.cpp" $, 4329 $, "void f(void) {\n    int i;\n    while (x) {\n        for (i = 0; i < 5; i++)\n            a[i] = b[i];\n    }\n}" $)
4330:
|
4334:
4335: ;
4336: $if $(@expr1073745240 $!@expr1073745241 $assertEquals $(@expr1073745242 "cppcheck-2.8/test/testuninitvar.cpp" $, 4336 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4337:
4338: $checkUninitVar_ $(@expr1073745245 "cppcheck-2.8/test/testuninitvar.cpp" $, 4338 $, "void f(void) {\n    struct Foo *foo;\n    while (true) {\n            foo = malloc(sizeof(*foo));\n            foo->x = 0;\n    }\n}" $)
4339:
|
4343:
4344: ;
4345: $if $(@expr1073745246 $!@expr1073745247 $assertEquals $(@expr1073745248 "cppcheck-2.8/test/testuninitvar.cpp" $, 4345 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4346:
4347: $checkUninitVar_ $(@expr1073745251 "cppcheck-2.8/test/testuninitvar.cpp" $, 4347 $, "void f(void) {\n  int i;\n  while (x) {\n    for (i=0,y=i;;){}\n  }\n}" $)
4348:
|
4351:
4352: ;
4353: $if $(@expr1073745252 $!@expr1073745253 $assertEquals $(@expr1073745254 "cppcheck-2.8/test/testuninitvar.cpp" $, 4353 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4354:
4355: $checkUninitVar_ $(@expr1073745257 "cppcheck-2.8/test/testuninitvar.cpp" $, 4355 $, "void f() {\n  char *p = (char *)malloc(256);\n  while(*p && *p == '_')\n    p++;\n}" $)
4356:
4357:
4358:
4359: ;
4360: $if $(@expr1073745258 $!@expr1073745259 $assertEquals $(@expr1073745260 "cppcheck-2.8/test/testuninitvar.cpp" $, 4360 $, "[test.cpp:3]: (error) Memory is allocated but not initialized: *p\n" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4361:
4362:
4363: $checkUninitVar_ $(@expr1073745263 "cppcheck-2.8/test/testuninitvar.cpp" $, 4363 $, "void f() {\n  for (int i;;i++)\n    dostuff(&i);\n}" $)
4364:
4365:
4366: ;
4367: $if $(@expr1073745264 $!@expr1073745265 $assertEquals $(@expr1073745266 "cppcheck-2.8/test/testuninitvar.cpp" $, 4367 $, "" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4368:
4369:
4370: $checkUninitVar_ $(@expr1073745269 "cppcheck-2.8/test/testuninitvar.cpp" $, 4370 $, "void f() {\n  for (int i;;i++)\n    a=i;\n}" $)
4371:
4372:
4373: ;
4374: $if $(@expr1073745270 $!@expr1073745271 $assertEquals $(@expr1073745272 "cppcheck-2.8/test/testuninitvar.cpp" $, 4374 $, "[test.cpp:2]: (error) Uninitialized variable: i\n" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4375:
4376: $checkUninitVar_ $(@expr1073745275 "cppcheck-2.8/test/testuninitvar.cpp" $, 4376 $, "namespace N {\n    template<typename T>\n    class C {};\n    using V = class C<void>;\n}\nint f() {\n    int r = 0;\n    for (int x; x < 4; x++)\n        r += x;\n    return r;\n}\n" $)
4377:
|
4385:
4386: ;
4387: $if $(@expr1073745276 $!@expr1073745277 $assertEquals $(@expr1073745278 "cppcheck-2.8/test/testuninitvar.cpp" $, 4387 $, "[test.cpp:8]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr3319 str (@expr3320 ) $) $) { $return ; }
4388: }
4389:
4390: void uninitvar2_4494 ( ) {
4391: $checkUninitVar_ $(@expr1073745281 "cppcheck-2.8/test/testuninitvar.cpp" $, 4391 $, "namespace N1 {\n    class Fred {\n    public:\n        static void f1(char *p) { *p = 0; }\n    };\n    void fa(void) { char *p; Fred::f1(p); }\n    void fb(void) { char *p; Fred::f2(p); }\n    void fc(void) { char *p; ::N1::Fred::f1(p); }\n    void fd(void) { char *p; ::N1::Fred::f2(p); }\n}\nnamespace N2 {\n    static void f1(char *p) { *p = 0; }\n    void fa(void) { char *p; f1(p); }\n    void fb(void) { char *p; f2(p); }\n    void fc(void) { char *p; N1::Fred::f1(p); }\n    void fd(void) { char *p; N1::Fred::f2(p); }\n    void fe(void) { char *p; ::N1::Fred::f1(p); }\n    void ff(void) { char *p; ::N1::Fred::f2(p); }\n    void fg(void) { char *p; Foo::f1(p); }\n    void fh(void) { char *p; Foo::f2(p); }\n}" $)
4392:
|
4410:
4411: ;
4412: $if $(@expr1073745282 $!@expr1073745283 $assertEquals $(@expr1073745284 "cppcheck-2.8/test/testuninitvar.cpp" $, 4412 $, "[test.cpp:6]: (error) Uninitialized variable: p\n[test.cpp:8]: (error) Uninitialized variable: p\n[test.cpp:13]: (error) Uninitialized variable: p\n[test.cpp:15]: (error) Uninitialized variable: p\n[test.cpp:17]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr3461 str (@expr3462 ) $) $) { $return
4413:
4414:
4415:
4416: ; }
4417:
4418: $checkUninitVar_ $(@expr1073745287 "cppcheck-2.8/test/testuninitvar.cpp" $, 4418 $, "class Fred {\npublic:\n    void f1(char *p) { *p = 0; }\n};\nFred fred;\nvoid f(void) {\n    char *p;\n    fred.f1(p);\n}" $)
4419:
|
4425:
4426: ;
4427: $if $(@expr1073745288 $!@expr1073745289 $assertEquals $(@expr1073745290 "cppcheck-2.8/test/testuninitvar.cpp" $, 4427 $, "[test.cpp:8]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr3461 str (@expr3462 ) $) $) { $return ; }
4428:
4429: $checkUninitVar_ $(@expr1073745293 "cppcheck-2.8/test/testuninitvar.cpp" $, 4429 $, "class Fred {\npublic:\n    class Wilma {\n    public:\n        class Barney {\n        public:\n            class Betty {\n            public:\n                void f1(char *p) { *p = 0; }\n            };\n            Betty betty;\n        };\n        Barney barney;\n    };\n    Wilma wilma;\n};\nFred fred;\nvoid f(void) {\n    char *p;\n    fred.wilma.barney.betty.f1(p);\n}" $)
4430:
|
4448:
4449: ;
4450: $if $(@expr1073745294 $!@expr1073745295 $assertEquals $(@expr1073745296 "cppcheck-2.8/test/testuninitvar.cpp" $, 4450 $, "[test.cpp:20]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr3461 str (@expr3462 ) $) $) { $return ; }
4451: }
4452:
4453: void uninitvar2_malloc ( ) {
4454: $checkUninitVar_ $(@expr1073745299 "cppcheck-2.8/test/testuninitvar.cpp" $, 4454 $, "int f() {\n    int *p = (int*)malloc(40);\n    return *p;\n}" $)
4455:
4456:
4457: ;
4458: $if $(@expr1073745300 $!@expr1073745301 $assertEquals $(@expr1073745302 "cppcheck-2.8/test/testuninitvar.cpp" $, 4458 $, "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return ; }
4459:
4460: $checkUninitVar_ $(@expr1073745305 "cppcheck-2.8/test/testuninitvar.cpp" $, 4460 $, "void f() {\n    int *p = (int*)malloc(40);\n    int var = *p;\n}" $)
4461:
4462:
4463: ;
4464: $if $(@expr1073745306 $!@expr1073745307 $assertEquals $(@expr1073745308 "cppcheck-2.8/test/testuninitvar.cpp" $, 4464 $, "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return ; }
4465:
4466: $checkUninitVar_ $(@expr1073745311 "cppcheck-2.8/test/testuninitvar.cpp" $, 4466 $, "struct AB { int a; int b; };\nint f() {\n    struct AB *ab = (AB*)malloc(sizeof(struct AB));\n    return ab->a;\n}" $)
4467:
4468:
4469:
4470: ;
4471: $if $(@expr1073745312 $!@expr1073745313 $assertEquals $(@expr1073745314 "cppcheck-2.8/test/testuninitvar.cpp" $, 4471 $, "[test.cpp:4]: (error) Memory is allocated but not initialized: ab\n[test.cpp:4]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return
4472:
4473: ; }
4474:
4475: $checkUninitVar_ $(@expr1073745317 "cppcheck-2.8/test/testuninitvar.cpp" $, 4475 $, "struct t_udf_file {  int dir_left; };\n\nvoid f() {\n  struct t_udf_file *newf;\n  newf = malloc(sizeof(*newf));\n  if (!newf) {};\n}" $)
4476:
|
4480:
4481: ;
4482: $if $(@expr1073745318 $!@expr1073745319 $assertEquals $(@expr1073745320 "cppcheck-2.8/test/testuninitvar.cpp" $, 4482 $, "" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return ; }
4483:
4484: $checkUninitVar_ $(@expr1073745323 "cppcheck-2.8/test/testuninitvar.cpp" $, 4484 $, "void f() {\n    char *s = malloc(100);\n    if (s != NULL) { }\n}" $)
4485:
4486:
4487: ;
4488: $if $(@expr1073745324 $!@expr1073745325 $assertEquals $(@expr1073745326 "cppcheck-2.8/test/testuninitvar.cpp" $, 4488 $, "" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return ; }
4489:
4490: $checkUninitVar_ $(@expr1073745329 "cppcheck-2.8/test/testuninitvar.cpp" $, 4490 $, "void f() {\n    char *p = malloc(100);\n    p || assert_failed();\n}" $)
4491:
4492:
4493: ;
4494: $if $(@expr1073745330 $!@expr1073745331 $assertEquals $(@expr1073745332 "cppcheck-2.8/test/testuninitvar.cpp" $, 4494 $, "" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return ; }
4495:
4496: $checkUninitVar_ $(@expr1073745335 "cppcheck-2.8/test/testuninitvar.cpp" $, 4496 $, "void f() {\n    char *p = malloc(100);\n    x = p;\n}" $)
4497:
4498:
4499: ;
4500: $if $(@expr1073745336 $!@expr1073745337 $assertEquals $(@expr1073745338 "cppcheck-2.8/test/testuninitvar.cpp" $, 4500 $, "" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return ; }
4501:
4502: $checkUninitVar_ $(@expr1073745341 "cppcheck-2.8/test/testuninitvar.cpp" $, 4502 $, "int* f() {\n    int *p = (int*)malloc(40);\n    return p;\n}" $)
4503:
4504:
4505: ;
4506: $if $(@expr1073745342 $!@expr1073745343 $assertEquals $(@expr1073745344 "cppcheck-2.8/test/testuninitvar.cpp" $, 4506 $, "" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return ; }
4507:
4508:
4509: $checkUninitVar_ $(@expr1073745347 "cppcheck-2.8/test/testuninitvar.cpp" $, 4509 $, "int f(int *p) {\n    if (*p == 1) {}\n    p = (int*)malloc(256);\n    return *p;\n}" $)
4510:
4511:
4512:
4513: ;
4514: $if $(@expr1073745348 $!@expr1073745349 $assertEquals $(@expr1073745350 "cppcheck-2.8/test/testuninitvar.cpp" $, 4514 $, "[test.cpp:4]: (error) Memory is allocated but not initialized: p\n" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return ; }
4515:
4516: $checkUninitVar_ $(@expr1073745353 "cppcheck-2.8/test/testuninitvar.cpp" $, 4516 $, "struct AB { int a; int b; };\nint f(struct AB *ab) {\n    if (ab->a == 1) {}\n    ab = (AB*)malloc(sizeof(struct AB));\n    return ab->a;\n}" $)
4517:
|
4520:
4521: ;
4522: $if $(@expr1073745354 $!@expr1073745355 $assertEquals $(@expr1073745356 "cppcheck-2.8/test/testuninitvar.cpp" $, 4522 $, "[test.cpp:5]: (error) Uninitialized struct member: ab.a\n" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return ; }
4523:
4524: $checkUninitVar_ $(@expr1073745359 "cppcheck-2.8/test/testuninitvar.cpp" $, 4524 $, "struct AB { int a; int b; };\nvoid do_something(struct AB *ab);\nvoid f() {\n    struct AB *ab = (AB*)malloc(sizeof(struct AB));\n    do_something(ab);\n}" $)
4525:
|
4528:
4529: ;
4530: $if $(@expr1073745360 $!@expr1073745361 $assertEquals $(@expr1073745362 "cppcheck-2.8/test/testuninitvar.cpp" $, 4530 $, "" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return ; }
4531:
4532:
4533: $checkUninitVar_ $(@expr1073745365 "cppcheck-2.8/test/testuninitvar.cpp" $, 4533 $, "void *vlc_custom_create (vlc_object_t *parent, size_t length, const char *typename) {\n  assert (length >= sizeof (vlc_object_t));\n}" $)
4534:
4535: ;
4536: $if $(@expr1073745366 $!@expr1073745367 $assertEquals $(@expr1073745368 "cppcheck-2.8/test/testuninitvar.cpp" $, 4536 $, "" $, errout@var100 .@expr3479 str (@expr3480 ) $) $) { $return ; }
4537: }
4538:
4539: void uninitvar_ternaryexpression ( ) {
4540: $checkUninitVar_ $(@expr1073745371 "cppcheck-2.8/test/testuninitvar.cpp" $, 4540 $, "struct B { int asd; };\nint f() {\n    int a=0;\n    struct B *b;\n    if (x) {\n        a = 1;\n        b = p;\n    }\n    return a ? b->asd : 0;\n}" $)
4541:
|
4548:
4549: ;
4550: $if $(@expr1073745372 $!@expr1073745373 $assertEquals $(@expr1073745374 "cppcheck-2.8/test/testuninitvar.cpp" $, 4550 $, "" $, errout@var100 .@expr1073745375 str (@expr1073745376 ) $) $) { $return ; }
4551: }
4552:
4553: void uninitvar_rangeBasedFor ( ) {
4554: $checkUninitVar_ $(@expr1073745377 "cppcheck-2.8/test/testuninitvar.cpp" $, 4554 $, "void function(Entry& entry) {\n    for (auto* expr : entry.exprs) {\n        expr->operate();\n        expr->operate();\n    }\n}" $)
4555:
|
4558:
4559: ;
4560: $if $(@expr1073745378 $!@expr1073745379 $assertEquals $(@expr1073745380 "cppcheck-2.8/test/testuninitvar.cpp" $, 4560 $, "" $, errout@var100 .@expr3557 str (@expr3558 ) $) $) { $return ; }
4561:
4562: $checkUninitVar_ $(@expr1073745383 "cppcheck-2.8/test/testuninitvar.cpp" $, 4562 $, "void f() {\n    int *item;\n    for (item: itemList) {}\n}" $)
4563:
4564:
4565: ;
4566: $if $(@expr1073745384 $!@expr1073745385 $assertEquals $(@expr1073745386 "cppcheck-2.8/test/testuninitvar.cpp" $, 4566 $, "" $, errout@var100 .@expr3557 str (@expr3558 ) $) $) { $return ; }
4567:
4568: $checkUninitVar_ $(@expr1073745389 "cppcheck-2.8/test/testuninitvar.cpp" $, 4568 $, "void f() {\n    int buf[10];\n    for (int &i: buf) { i = 0; }\n}" $)
4569:
4570:
4571: ;
4572: $if $(@expr1073745390 $!@expr1073745391 $assertEquals $(@expr1073745392 "cppcheck-2.8/test/testuninitvar.cpp" $, 4572 $, "" $, errout@var100 .@expr3557 str (@expr3558 ) $) $) { $return ; }
4573: }
4574:
4575: void uninitvar_static ( ) {
4576: $checkUninitVar_ $(@expr1073745395 "cppcheck-2.8/test/testuninitvar.cpp" $, 4576 $, "struct X {   typedef struct { int p; } P_t;   static int arr[]; }; int X::arr[] = {42}; void f() {   std::vector<X::P_t> result;   X::P_t P;   P.p = 0;   result.push_back(P); }" $)
4577:
|
4585:
4586: ;
4587: $if $(@expr1073745396 $!@expr1073745397 $assertEquals $(@expr1073745398 "cppcheck-2.8/test/testuninitvar.cpp" $, 4587 $, "" $, errout@var100 .@expr1073745399 str (@expr1073745400 ) $) $) { $return ; }
4588: }
4589:
4590: void checkExpr ( ) {
4591: $checkUninitVar_ $(@expr1073745401 "cppcheck-2.8/test/testuninitvar.cpp" $, 4591 $, "struct AB { int a; int b; };\nvoid f() {\n    struct AB *ab = (struct AB*)calloc(1, sizeof(*ab));\n}" $)
4592:
4593:
4594: ;
4595: $if $(@expr1073745402 $!@expr1073745403 $assertEquals $(@expr1073745404 "cppcheck-2.8/test/testuninitvar.cpp" $, 4595 $, "" $, errout@var100 .@expr1073745405 str (@expr1073745406 ) $) $) { $return ; }
4596: }
4597:
4598: void trac_4871 ( ) {
4599: $checkUninitVar_ $(@expr1073745407 "cppcheck-2.8/test/testuninitvar.cpp" $, 4599 $, "void pickup(int a) {\nbool using_planner_action;\nif (a)   {\n  using_planner_action = false;\n}\nelse {\n  try\n  {}\n  catch (std::exception &ex) {\n    return;\n  }\n  using_planner_action = true;\n}\nif (using_planner_action) {}\n}" $)
4600:
|
4612:
4613: ;
4614: $if $(@expr1073745408 $!@expr1073745409 $assertEquals $(@expr1073745410 "cppcheck-2.8/test/testuninitvar.cpp" $, 4614 $, "" $, errout@var100 .@expr1073745411 str (@expr1073745412 ) $) $) { $return ; }
4615: }
4616:
4617: void syntax_error ( ) {
4618: const char code@var127 [@expr1073745413 183 ] =@expr1073745414 "struct flex_array {};\nstruct cgroup_taskset {};\nvoid cgroup_attach_task() {\n  struct flex_array *group;\n  struct cgroup_taskset tset = { };\n  do { } while_each_thread(leader, tsk);\n}"
4619:
|
4623:
4624: ;
4625: $do ${ $try ${ $checkUninitVar_ $(@expr1073745415 "cppcheck-2.8/test/testuninitvar.cpp" $, 4625 $, code@var127 $) $; $assertThrowFail $(@expr1073745416 "cppcheck-2.8/test/testuninitvar.cpp" $, 4625 $) $; $} $catch $(@expr1073745417 $const InternalError $&@expr1073745418 $) ${ $} $catch $(@expr1073745419 $... $) ${ $assertThrowFail $(@expr1073745420 "cppcheck-2.8/test/testuninitvar.cpp" $, 4625 $) $; $} $} $while $(@expr1073745421 $false $) ;
4626: }
4627:
4628: void trac_5970 ( ) {
4629: $checkUninitVar_ $(@expr1073745422 "cppcheck-2.8/test/testuninitvar.cpp" $, 4629 $, "void DES_ede3_ofb64_encrypt() {\n  DES_cblock d;\n  char *dp;\n  dp=(char *)d;\n  init(dp);\n}" , "test.c" $)
4630:
|
4633:
4634: ;
4635:
4636: }
4637:
4638: void valueFlowUninit_ ( const char * file@var128 , int line@var129 , const char code@var130 [ ] , const char fname@var131 [ 9 ] = "test.cpp" )
4639: {
4640:
4641: errout@var100 .@expr1073745424 str (@expr1073745425 "" ) ;
4642:
4643:
4644: settings@var102 .@expr1073745426 debugwarnings@var109 =@expr1073745427 false ;
4645: settings@var102 .@expr1073745428 certainty@var113 .@expr1073745429 disable (@expr1073745430 Certainty ::@expr1073745431 experimental@expr1073745423 ) ;
4646:
4647: Tokenizer tokenizer@var132 (@expr1073745432 &@expr3609 settings@var102 , this@expr3610 ) ;
4648: std ::@expr1073745435 istringstream istr@var133 (@expr1073745436 code@var130 ) ;
4649: $assert_ $(@expr1073745437 file@var128 $, line@var129 $, $(@expr1073745438 tokenizer@var132 .@expr1073745439 tokenize (@expr1073745440 istr@var133 , fname@var131 ) $) $) ;
4650:
4651:
4652: CheckUninitVar checkuninitvar@var134 (@expr1073745441 &@expr1073745442 tokenizer@var132 , &@expr3609 settings@var102 , this@expr3610 ) ;
4653: checkuninitvar@var134 .@expr1073745444 valueFlowUninit (@expr1073745445 ) ;
4654: }
4655:
4656:
4657: void valueFlowUninitTest ( ) {
4658:
4659: $valueFlowUninit_ $(@expr1073745446 "cppcheck-2.8/test/testuninitvar.cpp" $, 4659 $, "typedef struct\n{\n    int x;\n    unsigned int flag : 1;\n} status;\nbool foo(const status * const s)\n{\n    return s->flag;\n}\nvoid bar(const status * const s)\n{\n    if( foo(s) == 1) {;}\n}\nvoid f(void)\n{\n    status s;\n    s.x = 42;\n    bar(&s);\n}" $)
4660:
|
4676:
4677: ;
4678: $if $(@expr1073745447 $!@expr1073745448 $assertEquals $(@expr1073745449 "cppcheck-2.8/test/testuninitvar.cpp" $, 4678 $, "[test.cpp:18] -> [test.cpp:12] -> [test.cpp:8]: (error) Uninitialized variable: s->flag\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return
4679: ; }
4680:
4681:
4682: $valueFlowUninit_ $(@expr1073745452 "cppcheck-2.8/test/testuninitvar.cpp" $, 4682 $, "void foo() {\n    int a;\n    b = c - a;\n}" $)
4683:
4684:
4685: ;
4686: $if $(@expr1073745453 $!@expr1073745454 $assertEquals $(@expr1073745455 "cppcheck-2.8/test/testuninitvar.cpp" $, 4686 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4687:
4688: $valueFlowUninit_ $(@expr1073745458 "cppcheck-2.8/test/testuninitvar.cpp" $, 4688 $, "void foo() {\n    int a;\n    b = a - c;\n}" $)
4689:
4690:
4691: ;
4692: $if $(@expr1073745459 $!@expr1073745460 $assertEquals $(@expr1073745461 "cppcheck-2.8/test/testuninitvar.cpp" $, 4692 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4693:
4694:
4695:
4696: $valueFlowUninit_ $(@expr1073745464 "cppcheck-2.8/test/testuninitvar.cpp" $, 4696 $, "void foo() {\n    const int a;\n    b = c - a;\n}" $)
4697:
4698:
4699: ;
4700: $if $(@expr1073745465 $!@expr1073745466 $assertEquals $(@expr1073745467 "cppcheck-2.8/test/testuninitvar.cpp" $, 4700 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4701:
4702:
4703: $valueFlowUninit_ $(@expr1073745470 "cppcheck-2.8/test/testuninitvar.cpp" $, 4703 $, "void foo() {\n    int *p;\n    realloc(p,10);\n}" $)
4704:
4705:
4706: ;
4707: $if $(@expr1073745471 $!@expr1073745472 $assertEquals $(@expr1073745473 "cppcheck-2.8/test/testuninitvar.cpp" $, 4707 $, "[test.cpp:3]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4708:
4709: $valueFlowUninit_ $(@expr1073745476 "cppcheck-2.8/test/testuninitvar.cpp" $, 4709 $, "void foo() {\n    char *p = malloc(100);\n    char *tmp = realloc(p,1000);\n    if (!tmp) free(p);\n}" $)
4710:
4711:
4712:
4713: ;
4714: $if $(@expr1073745477 $!@expr1073745478 $assertEquals $(@expr1073745479 "cppcheck-2.8/test/testuninitvar.cpp" $, 4714 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4715:
4716: $valueFlowUninit_ $(@expr1073745482 "cppcheck-2.8/test/testuninitvar.cpp" $, 4716 $, "void foo() {\n    int *p = NULL;\n    realloc(p,10);\n}" $)
4717:
4718:
4719: ;
4720: $if $(@expr1073745483 $!@expr1073745484 $assertEquals $(@expr1073745485 "cppcheck-2.8/test/testuninitvar.cpp" $, 4720 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4721:
4722: $valueFlowUninit_ $(@expr1073745488 "cppcheck-2.8/test/testuninitvar.cpp" $, 4722 $, "void f() {\n  int x;\n  switch (x) {}\n}" $)
4723:
4724:
4725: ;
4726: $if $(@expr1073745489 $!@expr1073745490 $assertEquals $(@expr1073745491 "cppcheck-2.8/test/testuninitvar.cpp" $, 4726 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4727:
4728: $valueFlowUninit_ $(@expr1073745494 "cppcheck-2.8/test/testuninitvar.cpp" $, 4728 $, "int f() {\n  int x;\n  init(x);\n  return x;\n}" $)
4729:
4730:
4731:
4732: ;
4733: $if $(@expr1073745495 $!@expr1073745496 $assertEquals $(@expr1073745497 "cppcheck-2.8/test/testuninitvar.cpp" $, 4733 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4734:
4735: $valueFlowUninit_ $(@expr1073745500 "cppcheck-2.8/test/testuninitvar.cpp" $, 4735 $, "void f() {\n  char **x;\n  if (2 < sizeof(*x)) {}\n}" $)
4736:
4737:
4738: ;
4739: $if $(@expr1073745501 $!@expr1073745502 $assertEquals $(@expr1073745503 "cppcheck-2.8/test/testuninitvar.cpp" $, 4739 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4740:
4741: $valueFlowUninit_ $(@expr1073745506 "cppcheck-2.8/test/testuninitvar.cpp" $, 4741 $, "void foo() {\n    int a;\n    int x[] = {a,2};\n}" $)
4742:
4743:
4744: ;
4745: $if $(@expr1073745507 $!@expr1073745508 $assertEquals $(@expr1073745509 "cppcheck-2.8/test/testuninitvar.cpp" $, 4745 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4746:
4747: $valueFlowUninit_ $(@expr1073745512 "cppcheck-2.8/test/testuninitvar.cpp" $, 4747 $, "void foo()\n{\n    int x;\n    int *y = &x;\n}" $)
4748:
4749:
4750:
4751: ;
4752: $if $(@expr1073745513 $!@expr1073745514 $assertEquals $(@expr1073745515 "cppcheck-2.8/test/testuninitvar.cpp" $, 4752 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4753:
4754: $valueFlowUninit_ $(@expr1073745518 "cppcheck-2.8/test/testuninitvar.cpp" $, 4754 $, "void foo()\n{\n    int *x;\n    int *&y = x;\n    y = nullptr;\n}" $)
4755:
|
4758:
4759: ;
4760: $if $(@expr1073745519 $!@expr1073745520 $assertEquals $(@expr1073745521 "cppcheck-2.8/test/testuninitvar.cpp" $, 4760 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4761:
4762: $valueFlowUninit_ $(@expr1073745524 "cppcheck-2.8/test/testuninitvar.cpp" $, 4762 $, "void foo()\n{\n    int x = xyz::x;\n}" $)
4763:
4764:
4765: ;
4766: $if $(@expr1073745525 $!@expr1073745526 $assertEquals $(@expr1073745527 "cppcheck-2.8/test/testuninitvar.cpp" $, 4766 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4767:
4768: $valueFlowUninit_ $(@expr1073745530 "cppcheck-2.8/test/testuninitvar.cpp" $, 4768 $, "void f()\n{\n    extern int a;\n    a++;\n}" $)
4769:
4770:
4771:
4772: ;
4773: $if $(@expr1073745531 $!@expr1073745532 $assertEquals $(@expr1073745533 "cppcheck-2.8/test/testuninitvar.cpp" $, 4773 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4774:
4775: $valueFlowUninit_ $(@expr1073745536 "cppcheck-2.8/test/testuninitvar.cpp" $, 4775 $, "static void foo()\n{\n    int x, y;\n    x = (y = 10);\n    int z = y * 2;\n}" $)
4776:
|
4779:
4780: ;
4781: $if $(@expr1073745537 $!@expr1073745538 $assertEquals $(@expr1073745539 "cppcheck-2.8/test/testuninitvar.cpp" $, 4781 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4782:
4783: $valueFlowUninit_ $(@expr1073745542 "cppcheck-2.8/test/testuninitvar.cpp" $, 4783 $, "static void foo() {\n    int x, y;\n    x = ((y) = 10);\n}" $)
4784:
4785:
4786: ;
4787: $if $(@expr1073745543 $!@expr1073745544 $assertEquals $(@expr1073745545 "cppcheck-2.8/test/testuninitvar.cpp" $, 4787 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4788:
4789: $valueFlowUninit_ $(@expr1073745548 "cppcheck-2.8/test/testuninitvar.cpp" $, 4789 $, "static void foo()\n{\n    Foo p;\n    p.abcd();\n}" $)
4790:
4791:
4792:
4793: ;
4794: $if $(@expr1073745549 $!@expr1073745550 $assertEquals $(@expr1073745551 "cppcheck-2.8/test/testuninitvar.cpp" $, 4794 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4795:
4796: $valueFlowUninit_ $(@expr1073745554 "cppcheck-2.8/test/testuninitvar.cpp" $, 4796 $, "static void foo()\n{\n    Foo p;\n    int x = p.abcd();\n}" $)
4797:
4798:
4799:
4800: ;
4801: $if $(@expr1073745555 $!@expr1073745556 $assertEquals $(@expr1073745557 "cppcheck-2.8/test/testuninitvar.cpp" $, 4801 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4802:
4803:
4804: $valueFlowUninit_ $(@expr1073745560 "cppcheck-2.8/test/testuninitvar.cpp" $, 4804 $, "struct AB { int a; int b; };\nvoid f(void) {\n  AB ab;\n  AB *p = &ab;\n  p->a = 1;\n}\n" $)
4805:
|
4808:
4809: ;
4810: $if $(@expr1073745561 $!@expr1073745562 $assertEquals $(@expr1073745563 "cppcheck-2.8/test/testuninitvar.cpp" $, 4810 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4811:
4812: $valueFlowUninit_ $(@expr1073745566 "cppcheck-2.8/test/testuninitvar.cpp" $, 4812 $, "struct S {\n    S& rIo;\n    S(S&);\n    void Write();\n};\nvoid foo(bool b, struct S &io) {\n    S* p;\n    if (b)\n        p = new S(io);\n    p->Write();\n}" $)
4813:
|
4821:
4822: ;
4823: $if $(@expr1073745567 $!@expr1073745568 $assertEquals $(@expr1073745569 "cppcheck-2.8/test/testuninitvar.cpp" $, 4823 $, "[test.cpp:8] -> [test.cpp:10]: (error) Uninitialized variable: p.rIo\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4824:
4825:
4826: {
4827: $valueFlowUninit_ $(@expr1073745572 "cppcheck-2.8/test/testuninitvar.cpp" $, 4827 $, "void a()\n{\n    A ret;\n    return ret;\n}" $)
4828:
4829:
4830:
4831: ;
4832: $if $(@expr1073745573 $!@expr1073745574 $assertEquals $(@expr1073745575 "cppcheck-2.8/test/testuninitvar.cpp" $, 4832 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4833:
4834:
4835: $valueFlowUninit_ $(@expr1073745578 "cppcheck-2.8/test/testuninitvar.cpp" $, 4835 $, "void f(float x) {\n  union lf { long l; float f; } u_lf;\n  float hx = (u_lf.f = (x), u_lf.l);\n}" $)
4836:
4837:
4838: ;
4839: $if $(@expr1073745579 $!@expr1073745580 $assertEquals $(@expr1073745581 "cppcheck-2.8/test/testuninitvar.cpp" $, 4839 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4840: }
4841:
4842: $valueFlowUninit_ $(@expr1073745584 "cppcheck-2.8/test/testuninitvar.cpp" $, 4842 $, "void a()\n{\n    int x[10];\n    int *y = x;\n}" $)
4843:
4844:
4845:
4846: ;
4847: $if $(@expr1073745585 $!@expr1073745586 $assertEquals $(@expr1073745587 "cppcheck-2.8/test/testuninitvar.cpp" $, 4847 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4848:
4849: $valueFlowUninit_ $(@expr1073745590 "cppcheck-2.8/test/testuninitvar.cpp" $, 4849 $, "void a()\n{\n    int x;\n    int *y = &x;\n    *y = 0;\n    x++;\n}" $)
4850:
|
4854:
4855: ;
4856: $if $(@expr1073745591 $!@expr1073745592 $assertEquals $(@expr1073745593 "cppcheck-2.8/test/testuninitvar.cpp" $, 4856 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4857:
4858: $valueFlowUninit_ $(@expr1073745596 "cppcheck-2.8/test/testuninitvar.cpp" $, 4858 $, "void a()\n{\n    char x[10], y[10];\n    char *z = x;\n    memset(z, 0, sizeof(x));\n    memcpy(y, x, sizeof(x));\n}" $)
4859:
|
4863:
4864: ;
4865: $if $(@expr1073745597 $!@expr1073745598 $assertEquals $(@expr1073745599 "cppcheck-2.8/test/testuninitvar.cpp" $, 4865 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4866:
4867:
4868: {
4869: $valueFlowUninit_ $(@expr1073745602 "cppcheck-2.8/test/testuninitvar.cpp" $, 4869 $, "int a() {\n    int ret;\n    std::cin >> ret;\n    ret++;\n}" $)
4870:
4871:
4872:
4873: ;
4874: $if $(@expr1073745603 $!@expr1073745604 $assertEquals $(@expr1073745605 "cppcheck-2.8/test/testuninitvar.cpp" $, 4874 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4875:
4876: $valueFlowUninit_ $(@expr1073745608 "cppcheck-2.8/test/testuninitvar.cpp" $, 4876 $, "void f(int b) {\n    int a;\n    std::cin >> b >> a;\n    return a;}" $)
4877:
4878:
4879:
4880: ;
4881: $if $(@expr1073745609 $!@expr1073745610 $assertEquals $(@expr1073745611 "cppcheck-2.8/test/testuninitvar.cpp" $, 4881 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4882:
4883: $valueFlowUninit_ $(@expr1073745614 "cppcheck-2.8/test/testuninitvar.cpp" $, 4883 $, "void foo() {\n    Node node;\n    int x;\n    node[\"abcd\"] >> x;\n}" $)
4884:
4885:
4886:
4887: ;
4888: $if $(@expr1073745615 $!@expr1073745616 $assertEquals $(@expr1073745617 "cppcheck-2.8/test/testuninitvar.cpp" $, 4888 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4889:
4890: $valueFlowUninit_ $(@expr1073745620 "cppcheck-2.8/test/testuninitvar.cpp" $, 4890 $, "int a(FArchive &arc) {\n    int *p;\n    arc << p;\n    return *p;\n}" $)
4891:
4892:
4893:
4894: ;
4895: $if $(@expr1073745621 $!@expr1073745622 $assertEquals $(@expr1073745623 "cppcheck-2.8/test/testuninitvar.cpp" $, 4895 $, "[test.cpp:3]: (error) Uninitialized variable: p\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4896:
4897:
4898: $valueFlowUninit_ $(@expr1073745626 "cppcheck-2.8/test/testuninitvar.cpp" $, 4898 $, "void f() {\n    int a;\n    a << 1;\n    return a;\n}" $)
4899:
4900:
4901:
4902: ;
4903: $if $(@expr1073745627 $!@expr1073745628 $assertEquals $(@expr1073745629 "cppcheck-2.8/test/testuninitvar.cpp" $, 4903 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4904:
4905:
4906: $valueFlowUninit_ $(@expr1073745632 "cppcheck-2.8/test/testuninitvar.cpp" $, 4906 $, "struct S {\n    int one;\n    int two;\n};\n\nvoid test(std::istringstream& in) {\n    S p;\n    in >> p.one >> p.two;\n}" $)
4907:
|
4913:
4914: ;
4915: $if $(@expr1073745633 $!@expr1073745634 $assertEquals $(@expr1073745635 "cppcheck-2.8/test/testuninitvar.cpp" $, 4915 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4916: }
4917:
4918: $valueFlowUninit_ $(@expr1073745638 "cppcheck-2.8/test/testuninitvar.cpp" $, 4918 $, "struct S { int x; };\nvoid f() {\n    S s;\n    return s(1);\n}" $)
4919:
4920:
4921:
4922: ;
4923: $if $(@expr1073745639 $!@expr1073745640 $assertEquals $(@expr1073745641 "cppcheck-2.8/test/testuninitvar.cpp" $, 4923 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4924:
4925: $valueFlowUninit_ $(@expr1073745644 "cppcheck-2.8/test/testuninitvar.cpp" $, 4925 $, "void a() {\n    int x;\n    asm();\n    x++;\n}" $)
4926:
4927:
4928:
4929: ;
4930: $if $(@expr1073745645 $!@expr1073745646 $assertEquals $(@expr1073745647 "cppcheck-2.8/test/testuninitvar.cpp" $, 4930 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4931:
4932: $valueFlowUninit_ $(@expr1073745650 "cppcheck-2.8/test/testuninitvar.cpp" $, 4932 $, "void a()\n{\n    int x[10];\n    struct xyz xyz1 = { .x = x };\n}" $)
4933:
4934:
4935:
4936: ;
4937: $if $(@expr1073745651 $!@expr1073745652 $assertEquals $(@expr1073745653 "cppcheck-2.8/test/testuninitvar.cpp" $, 4937 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4938:
4939: $valueFlowUninit_ $(@expr1073745656 "cppcheck-2.8/test/testuninitvar.cpp" $, 4939 $, "void foo()\n{\n   char *buf = malloc(100);\n   struct ABC *abc = buf;\n}" $)
4940:
4941:
4942:
4943: ;
4944: $if $(@expr1073745657 $!@expr1073745658 $assertEquals $(@expr1073745659 "cppcheck-2.8/test/testuninitvar.cpp" $, 4944 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4945:
4946: $valueFlowUninit_ $(@expr1073745662 "cppcheck-2.8/test/testuninitvar.cpp" $, 4946 $, "class Fred {\npublic:\n    FILE *f;\n    ~Fred();\n}\nFred::~Fred()\n{\n    fclose(f);\n}" $)
4947:
|
4953:
4954: ;
4955: $if $(@expr1073745663 $!@expr1073745664 $assertEquals $(@expr1073745665 "cppcheck-2.8/test/testuninitvar.cpp" $, 4955 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4956:
4957: $valueFlowUninit_ $(@expr1073745668 "cppcheck-2.8/test/testuninitvar.cpp" $, 4957 $, "void f()\n{\n    int c;\n    ab(sizeof(xyz), &c);\n    if (c);\n}" $)
4958:
|
4961:
4962: ;
4963: $if $(@expr1073745669 $!@expr1073745670 $assertEquals $(@expr1073745671 "cppcheck-2.8/test/testuninitvar.cpp" $, 4963 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4964:
4965: $valueFlowUninit_ $(@expr1073745674 "cppcheck-2.8/test/testuninitvar.cpp" $, 4965 $, "void f()\n{\n    int c;\n    a = (f2(&c));\n    c++;\n}" $)
4966:
|
4969:
4970: ;
4971: $if $(@expr1073745675 $!@expr1073745676 $assertEquals $(@expr1073745677 "cppcheck-2.8/test/testuninitvar.cpp" $, 4971 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4972:
4973:
4974: $valueFlowUninit_ $(@expr1073745680 "cppcheck-2.8/test/testuninitvar.cpp" $, 4974 $, "void foo(int x)\n{\n    long b;\n    if (g()) {\n        b =2;\n        goto found;\n    }\n\n    return;\n\nfound:\n    int a = b;\n}" $)
4975:
|
4985:
4986: ;
4987: $if $(@expr1073745681 $!@expr1073745682 $assertEquals $(@expr1073745683 "cppcheck-2.8/test/testuninitvar.cpp" $, 4987 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
4988:
4989: $valueFlowUninit_ $(@expr1073745686 "cppcheck-2.8/test/testuninitvar.cpp" $, 4989 $, "int foo()\n{\n    jmp_buf env;\n    int a;\n    int val = setjmp(env);\n    if(val)\n        return a;\n    a = 1;\n    longjmp(env, 1);\n}" $)
4990:
|
4997:
4998: ;
4999: $if $(@expr1073745687 $!@expr1073745688 $assertEquals $(@expr1073745689 "cppcheck-2.8/test/testuninitvar.cpp" $, 4999 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5000:
5001:
5002: $valueFlowUninit_ $(@expr1073745692 "cppcheck-2.8/test/testuninitvar.cpp" $, 5002 $, "void f() {\n    X *item;\n    for (item: itemList) {}\n}" $)
5003:
5004:
5005: ;
5006: $if $(@expr1073745693 $!@expr1073745694 $assertEquals $(@expr1073745695 "cppcheck-2.8/test/testuninitvar.cpp" $, 5006 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5007:
5008: $valueFlowUninit_ $(@expr1073745698 "cppcheck-2.8/test/testuninitvar.cpp" $, 5008 $, "X f() {\n    if (!itemList.empty()) {\n        X* item;\n        for(item: itemList) {}\n        return *item;\n    }\n    return X{};\n}\n" $)
5009:
|
5014:
5015: ;
5016: $if $(@expr1073745699 $!@expr1073745700 $assertEquals $(@expr1073745701 "cppcheck-2.8/test/testuninitvar.cpp" $, 5016 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5017:
5018:
5019: $valueFlowUninit_ $(@expr1073745704 "cppcheck-2.8/test/testuninitvar.cpp" $, 5019 $, "int foo()\n{\n  int retval;\n  if (condition) {\n    for12(1,2) { }\n    retval = 1;\n  }\n  else\n    retval = 2;\n  return retval;\n}" $)
5020:
|
5028:
5029: ;
5030: $if $(@expr1073745705 $!@expr1073745706 $assertEquals $(@expr1073745707 "cppcheck-2.8/test/testuninitvar.cpp" $, 5030 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5031:
5032: $valueFlowUninit_ $(@expr1073745710 "cppcheck-2.8/test/testuninitvar.cpp" $, 5032 $, "void foo(struct qb_list_head *list) {\n    struct qb_list_head *iter;\n    qb_list_for_each(iter, list) {}\n}\n" $)
5033:
5034:
5035: ;
5036: $if $(@expr1073745711 $!@expr1073745712 $assertEquals $(@expr1073745713 "cppcheck-2.8/test/testuninitvar.cpp" $, 5036 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5037:
5038: $valueFlowUninit_ $(@expr1073745716 "cppcheck-2.8/test/testuninitvar.cpp" $, 5038 $, "void json_parse_nat_type_flags(json_t *root) {\n    int index;\n    json_array_foreach(root, index, value) {}\n}" $)
5039:
5040:
5041: ;
5042: $if $(@expr1073745717 $!@expr1073745718 $assertEquals $(@expr1073745719 "cppcheck-2.8/test/testuninitvar.cpp" $, 5042 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5043:
5044: $valueFlowUninit_ $(@expr1073745722 "cppcheck-2.8/test/testuninitvar.cpp" $, 5044 $, "int foo()\n{\n    int i;\n    goto exit;\n    i++;\nexit:\n}" $)
5045:
|
5049:
5050: ;
5051: $if $(@expr1073745723 $!@expr1073745724 $assertEquals $(@expr1073745725 "cppcheck-2.8/test/testuninitvar.cpp" $, 5051 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5052:
5053: $valueFlowUninit_ $(@expr1073745728 "cppcheck-2.8/test/testuninitvar.cpp" $, 5053 $, "int foo() {\n    int x,y=0;\nagain:\n    if (y) return x;\n    x = a;\n    y = 1;\n    goto again;\n}" $)
5054:
|
5059:
5060: ;
5061: $if $(@expr1073745729 $!@expr1073745730 $assertEquals $(@expr1073745731 "cppcheck-2.8/test/testuninitvar.cpp" $, 5061 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5062:
5063:
5064: $valueFlowUninit_ $(@expr1073745734 "cppcheck-2.8/test/testuninitvar.cpp" $, 5064 $, "int f(int x)  {\n    int iter;\n    {\n        union\n        {\n            int asInt;\n            double asDouble;\n        };\n\n        iter = x;\n    }\n    return 1 + iter;\n}" $)
5065:
|
5075:
5076: ;
5077: $if $(@expr1073745735 $!@expr1073745736 $assertEquals $(@expr1073745737 "cppcheck-2.8/test/testuninitvar.cpp" $, 5077 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5078:
5079:
5080: $valueFlowUninit_ $(@expr1073745740 "cppcheck-2.8/test/testuninitvar.cpp" $, 5080 $, "int f() {\n    int i = 0;\n    int j{ i };\n    return j;\n}" $)
5081:
5082:
5083:
5084: ;
5085: $if $(@expr1073745741 $!@expr1073745742 $assertEquals $(@expr1073745743 "cppcheck-2.8/test/testuninitvar.cpp" $, 5085 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5086:
5087:
5088: $valueFlowUninit_ $(@expr1073745746 "cppcheck-2.8/test/testuninitvar.cpp" $, 5088 $, "float foo() {\n  float source[2] = {3.1, 3.1};\n  float (*sink)[2] = &source;\n  return (*sink)[0];\n}" $)
5089:
5090:
5091:
5092: ;
5093: $if $(@expr1073745747 $!@expr1073745748 $assertEquals $(@expr1073745749 "cppcheck-2.8/test/testuninitvar.cpp" $, 5093 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5094:
5095:
5096: $valueFlowUninit_ $(@expr1073745752 "cppcheck-2.8/test/testuninitvar.cpp" $, 5096 $, "void f(int b) {\n    int a;\n    if (b == 10)\n        a = 1;\n    if (b == 13)\n        a = 1;\n    if (b == 'x') {}\n    if (a) {}\n}" $)
5097:
|
5103:
5104: ;
5105: $todoAssertEquals $(@expr1073745753 "cppcheck-2.8/test/testuninitvar.cpp" $, 5105 $, "[test.cpp:8]: (error) Uninitialized variable: a\n" $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) ;
5106:
5107: $valueFlowUninit_ $(@expr1073745756 "cppcheck-2.8/test/testuninitvar.cpp" $, 5107 $, "void h() {\n  int i;\n  int* v = &i;\n  sscanf(\"0\", \"%d\", v);\n}" $)
5108:
5109:
5110:
5111: ;
5112: $if $(@expr1073745757 $!@expr1073745758 $assertEquals $(@expr1073745759 "cppcheck-2.8/test/testuninitvar.cpp" $, 5112 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5113:
5114: $valueFlowUninit_ $(@expr1073745762 "cppcheck-2.8/test/testuninitvar.cpp" $, 5114 $, "void test(int p) {\n    int f;\n    if (p > 0)\n        f = 0;\n    if (p > 1)\n        f += 1;\n}" $)
5115:
|
5119:
5120: ;
5121: $if $(@expr1073745763 $!@expr1073745764 $assertEquals $(@expr1073745765 "cppcheck-2.8/test/testuninitvar.cpp" $, 5121 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5122:
5123: $valueFlowUninit_ $(@expr1073745768 "cppcheck-2.8/test/testuninitvar.cpp" $, 5123 $, "unsigned char get();\nchar f() {\n    unsigned char c;\n    do {\n        c = get();\n    } while (isalpha(c) == 0);\n    return static_cast<char>(c);\n}\n" $)
5124:
|
5129:
5130: ;
5131: $if $(@expr1073745769 $!@expr1073745770 $assertEquals $(@expr1073745771 "cppcheck-2.8/test/testuninitvar.cpp" $, 5131 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5132:
5133: $valueFlowUninit_ $(@expr1073745774 "cppcheck-2.8/test/testuninitvar.cpp" $, 5133 $, "void f(int x)\n{\n   int i;\n   char value;\n   for(i = 0; i < 1; i++) {\n       if(x > 1)\n           value = 0;\n    }\n    printf(\"\", value);\n}\n" $)
5134:
|
5141:
5142: ;
5143: $if $(@expr1073745775 $!@expr1073745776 $assertEquals $(@expr1073745777 "cppcheck-2.8/test/testuninitvar.cpp" $, 5143 $, "[test.cpp:6] -> [test.cpp:9]: (error) Uninitialized variable: value\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5144:
5145: $valueFlowUninit_ $(@expr1073745780 "cppcheck-2.8/test/testuninitvar.cpp" $, 5145 $, "void f(int x)\n{\n   int i;\n   char value;\n   for(i = 0; i < 1; i++) {\n       if(x > 1)\n           value = 0;\n       else\n           value = 1;\n    }\n    printf(\"\", value);\n}\n" $)
5146:
|
5155:
5156: ;
5157: $if $(@expr1073745781 $!@expr1073745782 $assertEquals $(@expr1073745783 "cppcheck-2.8/test/testuninitvar.cpp" $, 5157 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5158:
5159:
5160: $valueFlowUninit_ $(@expr1073745786 "cppcheck-2.8/test/testuninitvar.cpp" $, 5160 $, "int f (const struct FileFuncDefs *ffd) {\n  int c;\n  (*ffd->zread)(&c, 1);\n  return c;\n}\n" $)
5161:
5162:
5163:
5164: ;
5165: $if $(@expr1073745787 $!@expr1073745788 $assertEquals $(@expr1073745789 "cppcheck-2.8/test/testuninitvar.cpp" $, 5165 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5166:
5167: $valueFlowUninit_ $(@expr1073745792 "cppcheck-2.8/test/testuninitvar.cpp" $, 5167 $, "int foo(unsigned int code) {\n  int res;\n\n  (* (utility_table[code])) (&res);\n  return (res);\n}\n" $)
5168:
5169:
5170:
5171: ;
5172: $if $(@expr1073745793 $!@expr1073745794 $assertEquals $(@expr1073745795 "cppcheck-2.8/test/testuninitvar.cpp" $, 5172 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5173:
5174: $valueFlowUninit_ $(@expr1073745798 "cppcheck-2.8/test/testuninitvar.cpp" $, 5174 $, "struct Archive {\n    bool isNull;\n    friend void operator&(const Archive &, bool &isNull);\n};\nvoid load(Archive& ar) {\n    bool isNull;\n    ar & isNull;\n    if (!isNull) {}\n}\n" $)
5175:
|
5181:
5182: ;
5183: $if $(@expr1073745799 $!@expr1073745800 $assertEquals $(@expr1073745801 "cppcheck-2.8/test/testuninitvar.cpp" $, 5183 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5184:
5185:
5186: $valueFlowUninit_ $(@expr1073745804 "cppcheck-2.8/test/testuninitvar.cpp" $, 5186 $, "struct Foo {\n    int i{};\n    static const float cf;\n};\nconst float Foo::cf = 0.1f;\nint bar() {\n    Foo f;\n    return f.i;\n}\n" $)
5187:
|
5193:
5194: ;
5195: $if $(@expr1073745805 $!@expr1073745806 $assertEquals $(@expr1073745807 "cppcheck-2.8/test/testuninitvar.cpp" $, 5195 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5196:
5197:
5198: $valueFlowUninit_ $(@expr1073745810 "cppcheck-2.8/test/testuninitvar.cpp" $, 5198 $, "void foo() {\n    int cnt;\n    do {\n        cnt = 32 ;\n    }\n    while ( 0 ) ;\n    if (cnt != 0) {}\n}\n" $)
5199:
|
5204:
5205: ;
5206: $if $(@expr1073745811 $!@expr1073745812 $assertEquals $(@expr1073745813 "cppcheck-2.8/test/testuninitvar.cpp" $, 5206 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5207:
5208:
5209: $valueFlowUninit_ $(@expr1073745816 "cppcheck-2.8/test/testuninitvar.cpp" $, 5209 $, "void dowork( int me ) {\n    if ( me == 0 ) {}\n}\n\nint main() {\n    int me;\n     dowork(me);\n}" $)
5210:
|
5215:
5216: ;
5217: $if $(@expr1073745817 $!@expr1073745818 $assertEquals $(@expr1073745819 "cppcheck-2.8/test/testuninitvar.cpp" $, 5217 $, "[test.cpp:7]: (error) Uninitialized variable: me\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5218:
5219: $valueFlowUninit_ $(@expr1073745822 "cppcheck-2.8/test/testuninitvar.cpp" $, 5219 $, "int foo() {\n  int x;\n  int a = x;\n  return a;\n}" $)
5220:
5221:
5222:
5223: ;
5224: $if $(@expr1073745823 $!@expr1073745824 $assertEquals $(@expr1073745825 "cppcheck-2.8/test/testuninitvar.cpp" $, 5224 $, "[test.cpp:3]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5225:
5226:
5227: $valueFlowUninit_ $(@expr1073745828 "cppcheck-2.8/test/testuninitvar.cpp" $, 5227 $, "uint32_t foo(uint32_t in) {\n    uint32_t out, mask = 0x7F;\n    while (mask ^ 0x7FFFFFFF)\n        out = in & ~mask;\n    return out;\n}\n" $)
5228:
|
5231:
5232: ;
5233: $if $(@expr1073745829 $!@expr1073745830 $assertEquals $(@expr1073745831 "cppcheck-2.8/test/testuninitvar.cpp" $, 5233 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5234:
5235:
5236: $valueFlowUninit_ $(@expr1073745834 "cppcheck-2.8/test/testuninitvar.cpp" $, 5236 $, "int f(int b) {\n    int a;\n    if (!b)\n        a = 1;\n    if (b)\n        return a;\n    else\n        return -1;\n}\n" $)
5237:
|
5243:
5244: ;
5245: $if $(@expr1073745835 $!@expr1073745836 $assertEquals $(@expr1073745837 "cppcheck-2.8/test/testuninitvar.cpp" $, 5245 $, "[test.cpp:3] -> [test.cpp:6]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5246:
5247:
5248: $valueFlowUninit_ $(@expr1073745840 "cppcheck-2.8/test/testuninitvar.cpp" $, 5248 $, "int func(void) {\n    int rez;\n    struct sccb* ccb;\n    do {\n        if ((ccb = calloc(1, sizeof(*ccb))) == NULL) {\n            rez = 1;\n            break;\n        }\n        rez = 0;\n    } while (0);\n    if (rez != 0)\n        free(ccb);\n    return rez;\n}\n" $)
5249:
|
5260:
5261: ;
5262: $if $(@expr1073745841 $!@expr1073745842 $assertEquals $(@expr1073745843 "cppcheck-2.8/test/testuninitvar.cpp" $, 5262 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5263:
5264:
5265: $valueFlowUninit_ $(@expr1073745846 "cppcheck-2.8/test/testuninitvar.cpp" $, 5265 $, "struct CharDataOnly {\n   char data[100];\n};\nCharDataOnly f() {\n   CharDataOnly testData;\n   strcpy(testData.data, \"string smaller than size\");\n   return testData;\n}\n" $)
5266:
|
5271:
5272: ;
5273: $if $(@expr1073745847 $!@expr1073745848 $assertEquals $(@expr1073745849 "cppcheck-2.8/test/testuninitvar.cpp" $, 5273 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5274:
5275:
5276: $valueFlowUninit_ $(@expr1073745852 "cppcheck-2.8/test/testuninitvar.cpp" $, 5276 $, "typedef union {\n    struct { int x; };\n    int v[1];\n} U;\nvoid init(int* d) {\n    *d = 42;\n}\nvoid f() {\n    U u;\n    init(u.v);\n    printf(\"%d\\n\", u.x);\n}\n" $)
5277:
|
5286:
5287: ;
5288: $if $(@expr1073745853 $!@expr1073745854 $assertEquals $(@expr1073745855 "cppcheck-2.8/test/testuninitvar.cpp" $, 5288 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5289:
5290:
5291: $valueFlowUninit_ $(@expr1073745858 "cppcheck-2.8/test/testuninitvar.cpp" $, 5291 $, "union U {\n    char c[2];\n    uint16_t u16;\n};\nuint16_t f(std::istream& is) {\n    U u;\n    is.read(u.c, 2);\n    return u.u16;\n}\n" $)
5292:
|
5298:
5299: ;
5300: $if $(@expr1073745859 $!@expr1073745860 $assertEquals $(@expr1073745861 "cppcheck-2.8/test/testuninitvar.cpp" $, 5300 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5301:
5302: $valueFlowUninit_ $(@expr1073745864 "cppcheck-2.8/test/testuninitvar.cpp" $, 5302 $, "void f() {\n  char src, dest;\n  std::memcpy(&dest, &src, 1);\n}\n" $)
5303:
5304:
5305: ;
5306: $if $(@expr1073745865 $!@expr1073745866 $assertEquals $(@expr1073745867 "cppcheck-2.8/test/testuninitvar.cpp" $, 5306 $, "[test.cpp:3]: (error) Uninitialized variable: &src\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5307:
5308:
5309: $valueFlowUninit_ $(@expr1073745870 "cppcheck-2.8/test/testuninitvar.cpp" $, 5309 $, "void f(const void* ptr, bool* result) {\n  int dummy;\n  *result = (&dummy < ptr);\n}\n" $)
5310:
5311:
5312: ;
5313: $if $(@expr1073745871 $!@expr1073745872 $assertEquals $(@expr1073745873 "cppcheck-2.8/test/testuninitvar.cpp" $, 5313 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5314:
5315: $valueFlowUninit_ $(@expr1073745876 "cppcheck-2.8/test/testuninitvar.cpp" $, 5315 $, "struct A {\n    int x;\n};\nvoid f() {\n    A a;\n    A* p = &a;\n    p->x = 1;\n}\n" $)
5316:
|
5321:
5322: ;
5323: $if $(@expr1073745877 $!@expr1073745878 $assertEquals $(@expr1073745879 "cppcheck-2.8/test/testuninitvar.cpp" $, 5323 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5324:
5325: $valueFlowUninit_ $(@expr1073745882 "cppcheck-2.8/test/testuninitvar.cpp" $, 5325 $, "struct A {\n    int x;\n};\nvoid g(const int&);\nvoid f() {\n    A a;\n    g(a.x);\n}\n" $)
5326:
|
5331:
5332: ;
5333: $if $(@expr1073745883 $!@expr1073745884 $assertEquals $(@expr1073745885 "cppcheck-2.8/test/testuninitvar.cpp" $, 5333 $, "[test.cpp:7]: (error) Uninitialized variable: a.x\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5334:
5335: $valueFlowUninit_ $(@expr1073745888 "cppcheck-2.8/test/testuninitvar.cpp" $, 5335 $, "struct A {\n    int x;\n};\nvoid g(const int&);\nvoid f() {\n    A a;\n    A* p = &a;\n    g(p->x);\n}\n" $)
5336:
|
5342:
5343: ;
5344: $if $(@expr1073745889 $!@expr1073745890 $assertEquals $(@expr1073745891 "cppcheck-2.8/test/testuninitvar.cpp" $, 5344 $, "[test.cpp:7] -> [test.cpp:8]: (error) Uninitialized variable: p->x\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5345:
5346: $valueFlowUninit_ $(@expr1073745894 "cppcheck-2.8/test/testuninitvar.cpp" $, 5346 $, "void f() {\n    int a;\n    a++;\n}\n" $)
5347:
5348:
5349: ;
5350: $if $(@expr1073745895 $!@expr1073745896 $assertEquals $(@expr1073745897 "cppcheck-2.8/test/testuninitvar.cpp" $, 5350 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5351:
5352:
5353: $valueFlowUninit_ $(@expr1073745900 "cppcheck-2.8/test/testuninitvar.cpp" $, 5353 $, "int g(int);\nvoid f() {\n    int received[NSIG];\n    for (int sig = 0; sig < NSIG; sig++)\n        received[sig] = g(sig);\n    for (int sig = 0; sig < NSIG; sig++)\n        if (received[sig]) {}\n}\n" $)
5354:
|
5359:
5360: ;
5361: $if $(@expr1073745901 $!@expr1073745902 $assertEquals $(@expr1073745903 "cppcheck-2.8/test/testuninitvar.cpp" $, 5361 $, "" $, errout@var100 .@expr3626 str (@expr3627 ) $) $) { $return ; }
5362: }
5363:
5364: void valueFlowUninitBreak ( ) {
5365: $valueFlowUninit_ $(@expr1073745906 "cppcheck-2.8/test/testuninitvar.cpp" $, 5365 $, "struct wcsstruct {\n    int *wcsprm;\n};\n\nvoid copy_wcs(wcsstruct *wcsin) {\n    wcsstruct *x;\n    memcpy(wcsin, x, sizeof(wcsstruct));\n    x->wcsprm = NULL;\n}" $)
5366:
|
5372:
5373: ;
5374: $if $(@expr1073745907 $!@expr1073745908 $assertEquals $(@expr1073745909 "cppcheck-2.8/test/testuninitvar.cpp" $, 5374 $, "[test.cpp:7]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr4086 str (@expr4087 ) $) $) { $return ; }
5375:
5376: $valueFlowUninit_ $(@expr1073745912 "cppcheck-2.8/test/testuninitvar.cpp" $, 5376 $, "struct wcsstruct {\n    int *wcsprm;\n};\n\nvoid copy_wcs(wcsstruct *wcsin) {\n    wcsstruct *x;\n    sizeof(x);\n    x->wcsprm = NULL;\n}" $)
5377:
|
5383:
5384: ;
5385: $if $(@expr1073745913 $!@expr1073745914 $assertEquals $(@expr1073745915 "cppcheck-2.8/test/testuninitvar.cpp" $, 5385 $, "[test.cpp:8]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr4086 str (@expr4087 ) $) $) { $return ; }
5386:
5387: $valueFlowUninit_ $(@expr1073745918 "cppcheck-2.8/test/testuninitvar.cpp" $, 5387 $, "struct wcsstruct {\n    int *wcsprm;\n};\n\nvoid init_wcs(wcsstruct *x) { if (x->wcsprm != NULL); }\n\nvoid copy_wcs() {\n    wcsstruct *x;\n    x->wcsprm = NULL;\n    init_wcs(x);\n}" $)
5388:
|
5396:
5397: ;
5398: $if $(@expr1073745919 $!@expr1073745920 $assertEquals $(@expr1073745921 "cppcheck-2.8/test/testuninitvar.cpp" $, 5398 $, "[test.cpp:9]: (error) Uninitialized variable: x\n" $, errout@var100 .@expr4086 str (@expr4087 ) $) $) { $return ; }
5399: }
5400:
5401: void uninitvar_ipa ( ) {
5402:
5403: $valueFlowUninit_ $(@expr1073745924 "cppcheck-2.8/test/testuninitvar.cpp" $, 5403 $, "typedef struct  {\n    int flags;\n} someType_t;\nvoid bar(const someType_t * const p)  {\n    if( (p->flags & 0xF000) == 0xF000){}\n}\nvoid f(void) {\n    someType_t gVar;\n    bar(&gVar);\n}" $)
5404:
|
5411:
5412: ;
5413: $if $(@expr1073745925 $!@expr1073745926 $assertEquals $(@expr1073745927 "cppcheck-2.8/test/testuninitvar.cpp" $, 5413 $, "[test.cpp:9] -> [test.cpp:5]: (error) Uninitialized variable: p->flags\n" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5414:
5415: $valueFlowUninit_ $(@expr1073745930 "cppcheck-2.8/test/testuninitvar.cpp" $, 5415 $, "typedef struct\n{\n        int flags[3];\n} someType_t;\nvoid f(void) {\n        someType_t gVar;\n        if(gVar.flags[1] == 42){}\n}" $)
5416:
|
5421:
5422: ;
5423: $if $(@expr1073745931 $!@expr1073745932 $assertEquals $(@expr1073745933 "cppcheck-2.8/test/testuninitvar.cpp" $, 5423 $, "[test.cpp:7]: (error) Uninitialized variable: gVar.flags\n" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5424:
5425: $valueFlowUninit_ $(@expr1073745936 "cppcheck-2.8/test/testuninitvar.cpp" $, 5425 $, "void foo() {\n  union {\n    struct hdr cm;\n    char control[123];\n  } u;\n  char *x = u.control;\n}" $)
5426:
|
5430:
5431: ;
5432: $if $(@expr1073745937 $!@expr1073745938 $assertEquals $(@expr1073745939 "cppcheck-2.8/test/testuninitvar.cpp" $, 5432 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5433:
5434: $valueFlowUninit_ $(@expr1073745942 "cppcheck-2.8/test/testuninitvar.cpp" $, 5434 $, "struct pc_data {\n    struct {\n        char   * strefa;\n    } wampiryzm;\n};\nvoid f() {\n    struct pc_data *pcdata;\n    if ( *pcdata->wampiryzm.strefa == '\\0' ) { }\n}" $)
5435:
|
5441:
5442: ;
5443: $if $(@expr1073745943 $!@expr1073745944 $assertEquals $(@expr1073745945 "cppcheck-2.8/test/testuninitvar.cpp" $, 5443 $, "[test.cpp:8]: (error) Uninitialized variable: pcdata\n" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5444:
5445:
5446: $valueFlowUninit_ $(@expr1073745948 "cppcheck-2.8/test/testuninitvar.cpp" $, 5446 $, "struct S {\n  int x;\n  int y;\n};\n\nvoid f() {\n    struct S s1;\n    int * x = &s1.x;\n    struct S s2 = {*x, 0};\n}" $)
5447:
|
5454:
5455: ;
5456: $if $(@expr1073745949 $!@expr1073745950 $assertEquals $(@expr1073745951 "cppcheck-2.8/test/testuninitvar.cpp" $, 5456 $, "[test.cpp:8] -> [test.cpp:9]: (error) Uninitialized variable: *x\n" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5457:
5458: $valueFlowUninit_ $(@expr1073745954 "cppcheck-2.8/test/testuninitvar.cpp" $, 5458 $, "struct S {\n  int x;\n  int y;\n};\n\nvoid f() {\n    struct S s1;\n    struct S s2;\n    int * x = &s1.x;\n    s2.x = *x;\n}" $)
5459:
|
5467:
5468: ;
5469: $if $(@expr1073745955 $!@expr1073745956 $assertEquals $(@expr1073745957 "cppcheck-2.8/test/testuninitvar.cpp" $, 5469 $, "[test.cpp:9] -> [test.cpp:10]: (error) Uninitialized variable: *x\n" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5470:
5471: $valueFlowUninit_ $(@expr1073745960 "cppcheck-2.8/test/testuninitvar.cpp" $, 5471 $, "void f(bool * x) {\n    *x = false;\n}\nvoid g() {\n    bool b;\n    f(&b);\n}" $)
5472:
|
5476:
5477: ;
5478: $if $(@expr1073745961 $!@expr1073745962 $assertEquals $(@expr1073745963 "cppcheck-2.8/test/testuninitvar.cpp" $, 5478 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5479:
5480: $valueFlowUninit_ $(@expr1073745966 "cppcheck-2.8/test/testuninitvar.cpp" $, 5480 $, "void f(bool * x) {\n    if (x != nullptr)\n        x = 1;\n}\nvoid g() {\n    bool x;\n    f(&x);\n}" $)
5481:
|
5486:
5487: ;
5488: $if $(@expr1073745967 $!@expr1073745968 $assertEquals $(@expr1073745969 "cppcheck-2.8/test/testuninitvar.cpp" $, 5488 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5489:
5490: $valueFlowUninit_ $(@expr1073745972 "cppcheck-2.8/test/testuninitvar.cpp" $, 5490 $, "void f() {\n    bool b;\n    bool * x = &b;\n    if (x != nullptr)\n        x = 1;\n}" $)
5491:
|
5494:
5495: ;
5496: $if $(@expr1073745973 $!@expr1073745974 $assertEquals $(@expr1073745975 "cppcheck-2.8/test/testuninitvar.cpp" $, 5496 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5497:
5498: $valueFlowUninit_ $(@expr1073745978 "cppcheck-2.8/test/testuninitvar.cpp" $, 5498 $, "struct A { bool b; };void f(A * x) {\n    x->b = false;\n}\nvoid g() {\n    A b;\n    f(&b);\n}" $)
5499:
|
5504:
5505: ;
5506: $if $(@expr1073745979 $!@expr1073745980 $assertEquals $(@expr1073745981 "cppcheck-2.8/test/testuninitvar.cpp" $, 5506 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5507:
5508: $valueFlowUninit_ $(@expr1073745984 "cppcheck-2.8/test/testuninitvar.cpp" $, 5508 $, "std::string f() {\n    std::ostringstream ostr;\n    ostr << \"\";\n    return ostr.str();\n}" $)
5509:
5510:
5511:
5512: ;
5513: $if $(@expr1073745985 $!@expr1073745986 $assertEquals $(@expr1073745987 "cppcheck-2.8/test/testuninitvar.cpp" $, 5513 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5514:
5515: $valueFlowUninit_ $(@expr1073745990 "cppcheck-2.8/test/testuninitvar.cpp" $, 5515 $, "struct s {\n    char a[20];\n};\nvoid c(struct s *sarg) {\n    sarg->a[0] = '\\0';\n}\nvoid b(struct s *sarg) {\n    c(sarg);\n}\nvoid a() {\n    struct s s1;\n    b(&s1);\n}" $)
5516:
|
5526:
5527: ;
5528: $if $(@expr1073745991 $!@expr1073745992 $assertEquals $(@expr1073745993 "cppcheck-2.8/test/testuninitvar.cpp" $, 5528 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5529:
5530:
5531: $valueFlowUninit_ $(@expr1073745996 "cppcheck-2.8/test/testuninitvar.cpp" $, 5531 $, "struct A {\n    double x;\n};\ndouble b() {\n    A * c;\n    c->x = 42;\n    return c->x;\n}" $)
5532:
|
5537:
5538: ;
5539: $if $(@expr1073745997 $!@expr1073745998 $assertEquals $(@expr1073745999 "cppcheck-2.8/test/testuninitvar.cpp" $, 5539 $, "[test.cpp:6]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return
5540: ; }
5541:
5542: $valueFlowUninit_ $(@expr1073746002 "cppcheck-2.8/test/testuninitvar.cpp" $, 5542 $, "struct A {\n    double x;\n};\ndouble b() {\n    A c;\n    c.x = 42;\n    return c.x;\n}" $)
5543:
|
5548:
5549: ;
5550: $if $(@expr1073746003 $!@expr1073746004 $assertEquals $(@expr1073746005 "cppcheck-2.8/test/testuninitvar.cpp" $, 5550 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5551:
5552: $valueFlowUninit_ $(@expr1073746008 "cppcheck-2.8/test/testuninitvar.cpp" $, 5552 $, "struct A {\n    double x;\n};\ndouble d(A * e) {\n    e->x = 42;\n    return e->x;\n}\ndouble b() {\n    A c;\n    return d(&c);\n}" $)
5553:
|
5561:
5562: ;
5563: $if $(@expr1073746009 $!@expr1073746010 $assertEquals $(@expr1073746011 "cppcheck-2.8/test/testuninitvar.cpp" $, 5563 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5564:
5565:
5566: $valueFlowUninit_ $(@expr1073746014 "cppcheck-2.8/test/testuninitvar.cpp" $, 5566 $, "struct VZ   {\n    double typ;\n};\nvoid read() {\n    struct VZ vz;\n    struct VZ* pvz = &vz;\n    vz.typ      = 42;\n    if (pvz->typ == 0)\n        return;\n}" $)
5567:
|
5574:
5575: ;
5576: $if $(@expr1073746015 $!@expr1073746016 $assertEquals $(@expr1073746017 "cppcheck-2.8/test/testuninitvar.cpp" $, 5576 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5577:
5578:
5579: $valueFlowUninit_ $(@expr1073746020 "cppcheck-2.8/test/testuninitvar.cpp" $, 5579 $, "struct kf {\n    double x;\n};\nvoid set(kf* k) {\n    k->x = 0;\n}\nvoid cal() {\n    KF b;\n    KF* pb = &b;\n    set( pb);\n    if (pb->x)\n        return;\n}" $)
5580:
|
5590:
5591: ;
5592: $if $(@expr1073746021 $!@expr1073746022 $assertEquals $(@expr1073746023 "cppcheck-2.8/test/testuninitvar.cpp" $, 5592 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5593:
5594:
5595: $valueFlowUninit_ $(@expr1073746026 "cppcheck-2.8/test/testuninitvar.cpp" $, 5595 $, "void f(int *a) {\n  int b = 0;\n  memcpy(a, &b, sizeof(b));\n}\nvoid g() {\n  int i;\n  f(&i);\n}" $)
5596:
|
5601:
5602: ;
5603: $if $(@expr1073746027 $!@expr1073746028 $assertEquals $(@expr1073746029 "cppcheck-2.8/test/testuninitvar.cpp" $, 5603 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5604:
5605:
5606: $valueFlowUninit_ $(@expr1073746032 "cppcheck-2.8/test/testuninitvar.cpp" $, 5606 $, "static void g(bool * result, int num, int num2, size_t * buflen) {\n  if (*result && *buflen >= 5) {}\n}\nvoid f() {\n  size_t bytesCopied;\n  bool copied_all = true;\n  g(&copied_all, 5, 6, &bytesCopied);\n}" $)
5607:
|
5612:
5613: ;
5614: $if $(@expr1073746033 $!@expr1073746034 $assertEquals $(@expr1073746035 "cppcheck-2.8/test/testuninitvar.cpp" $, 5614 $, "[test.cpp:7] -> [test.cpp:2]: (error) Uninitialized variable: *buflen\n" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5615:
5616:
5617: $valueFlowUninit_ $(@expr1073746038 "cppcheck-2.8/test/testuninitvar.cpp" $, 5617 $, "uint32_t f(uint8_t *mem) {\n    uint32_t u32;\n    uint8_t *buf = (uint8_t *)(&u32);\n    buf[0] = mem[0];\n    return(*(uint32_t *)buf);\n}\n" $)
5618:
|
5621:
5622: ;
5623: $if $(@expr1073746039 $!@expr1073746040 $assertEquals $(@expr1073746041 "cppcheck-2.8/test/testuninitvar.cpp" $, 5623 $, "" $, errout@var100 .@expr4104 str (@expr4105 ) $) $) { $return ; }
5624: }
5625:
5626: void valueFlowUninitStructMembers ( )
5627: {
5628: $valueFlowUninit_ $(@expr1073746044 "cppcheck-2.8/test/testuninitvar.cpp" $, 5628 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    if (ab.b == 2) {}\n}\n" $)
5629:
|
5632:
5633: ;
5634: $if $(@expr1073746045 $!@expr1073746046 $assertEquals $(@expr1073746047 "cppcheck-2.8/test/testuninitvar.cpp" $, 5634 $, "[test.cpp:5]: (error) Uninitialized variable: ab.b\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5635:
5636: $valueFlowUninit_ $(@expr1073746050 "cppcheck-2.8/test/testuninitvar.cpp" $, 5636 $, "struct AB { int a; int b; };\nvoid do_something(const struct AB &ab) { a = ab.a; }\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}" $)
5637:
|
5641:
5642: ;
5643: $if $(@expr1073746051 $!@expr1073746052 $assertEquals $(@expr1073746053 "cppcheck-2.8/test/testuninitvar.cpp" $, 5643 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5644:
5645: $valueFlowUninit_ $(@expr1073746056 "cppcheck-2.8/test/testuninitvar.cpp" $, 5645 $, "struct AB { int a; int b; };\nvoid do_something(const struct AB &ab) { a = ab.b; }\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}" $)
5646:
|
5650:
5651: ;
5652: $if $(@expr1073746057 $!@expr1073746058 $assertEquals $(@expr1073746059 "cppcheck-2.8/test/testuninitvar.cpp" $, 5652 $, "[test.cpp:6] -> [test.cpp:2]: (error) Uninitialized variable: ab.b\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5653:
5654: $valueFlowUninit_ $(@expr1073746062 "cppcheck-2.8/test/testuninitvar.cpp" $, 5654 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n}\n" , "test.c" $)
5655:
|
5658:
5659: ;
5660: $if $(@expr1073746063 $!@expr1073746064 $assertEquals $(@expr1073746065 "cppcheck-2.8/test/testuninitvar.cpp" $, 5660 $, "[test.c:4]: (error) Uninitialized variable: ab.a\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5661:
5662: $valueFlowUninit_ $(@expr1073746068 "cppcheck-2.8/test/testuninitvar.cpp" $, 5662 $, "struct AB { int a; int b; };\nvoid f(void) {\n    AB ab1;\n    AB ab2 = { ab1.a, 0 };\n}" $)
5663:
5664:
5665:
5666: ;
5667: $if $(@expr1073746069 $!@expr1073746070 $assertEquals $(@expr1073746071 "cppcheck-2.8/test/testuninitvar.cpp" $, 5667 $, "[test.cpp:4]: (error) Uninitialized variable: ab1.a\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5668:
5669: $valueFlowUninit_ $(@expr1073746074 "cppcheck-2.8/test/testuninitvar.cpp" $, 5669 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    buf[ab.a] = 0;\n}\n" , "test.c" $)
5670:
|
5673:
5674: ;
5675: $if $(@expr1073746075 $!@expr1073746076 $assertEquals $(@expr1073746077 "cppcheck-2.8/test/testuninitvar.cpp" $, 5675 $, "[test.c:4]: (error) Uninitialized variable: ab.a\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5676:
5677: $valueFlowUninit_ $(@expr1073746080 "cppcheck-2.8/test/testuninitvar.cpp" $, 5677 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = ab;\n}\n" , "test.c" $)
5678:
|
5682:
5683: ;
5684: $if $(@expr1073746081 $!@expr1073746082 $assertEquals $(@expr1073746083 "cppcheck-2.8/test/testuninitvar.cpp" $, 5684 $, "[test.c:5]: (error) Uninitialized variable: ab.b\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5685:
5686: $valueFlowUninit_ $(@expr1073746086 "cppcheck-2.8/test/testuninitvar.cpp" $, 5686 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = *(&ab);\n}\n" , "test.c" $)
5687:
|
5691:
5692: ;
5693: $if $(@expr1073746087 $!@expr1073746088 $assertEquals $(@expr1073746089 "cppcheck-2.8/test/testuninitvar.cpp" $, 5693 $, "[test.c:5]: (error) Uninitialized variable: *(&ab).b\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5694:
5695: $valueFlowUninit_ $(@expr1073746092 "cppcheck-2.8/test/testuninitvar.cpp" $, 5695 $, "void f(void) {\n    struct AB ab;\n    int x;\n    ab.a = (void*)&x;\n    dostuff(&ab,0);\n}\n" , "test.c" $)
5696:
|
5700:
5701: ;
5702: $if $(@expr1073746093 $!@expr1073746094 $assertEquals $(@expr1073746095 "cppcheck-2.8/test/testuninitvar.cpp" $, 5702 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5703:
5704: $valueFlowUninit_ $(@expr1073746098 "cppcheck-2.8/test/testuninitvar.cpp" $, 5704 $, "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}" $)
5705:
|
5708:
5709: ;
5710: $if $(@expr1073746099 $!@expr1073746100 $assertEquals $(@expr1073746101 "cppcheck-2.8/test/testuninitvar.cpp" $, 5710 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5711:
5712: $valueFlowUninit_ $(@expr1073746104 "cppcheck-2.8/test/testuninitvar.cpp" $, 5712 $, "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}" $)
5713:
|
5716:
5717: ;
5718: $if $(@expr1073746105 $!@expr1073746106 $assertEquals $(@expr1073746107 "cppcheck-2.8/test/testuninitvar.cpp" $, 5718 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5719:
5720: $valueFlowUninit_ $(@expr1073746110 "cppcheck-2.8/test/testuninitvar.cpp" $, 5720 $, "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; element->v;\n}" $)
5721:
|
5724:
5725: ;
5726: $if $(@expr1073746111 $!@expr1073746112 $assertEquals $(@expr1073746113 "cppcheck-2.8/test/testuninitvar.cpp" $, 5726 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5727:
5728: $valueFlowUninit_ $(@expr1073746116 "cppcheck-2.8/test/testuninitvar.cpp" $, 5728 $, "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}" $)
5729:
|
5732:
5733: ;
5734: $if $(@expr1073746117 $!@expr1073746118 $assertEquals $(@expr1073746119 "cppcheck-2.8/test/testuninitvar.cpp" $, 5734 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5735:
5736: $valueFlowUninit_ $(@expr1073746122 "cppcheck-2.8/test/testuninitvar.cpp" $, 5736 $, "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}" $)
5737:
|
5740:
5741: ;
5742: $if $(@expr1073746123 $!@expr1073746124 $assertEquals $(@expr1073746125 "cppcheck-2.8/test/testuninitvar.cpp" $, 5742 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5743:
5744: $valueFlowUninit_ $(@expr1073746128 "cppcheck-2.8/test/testuninitvar.cpp" $, 5744 $, "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}" $)
5745:
|
5748:
5749: ;
5750: $if $(@expr1073746129 $!@expr1073746130 $assertEquals $(@expr1073746131 "cppcheck-2.8/test/testuninitvar.cpp" $, 5750 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5751:
5752: $valueFlowUninit_ $(@expr1073746134 "cppcheck-2.8/test/testuninitvar.cpp" $, 5752 $, "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; element->v;\n}" $)
5753:
|
5756:
5757: ;
5758: $if $(@expr1073746135 $!@expr1073746136 $assertEquals $(@expr1073746137 "cppcheck-2.8/test/testuninitvar.cpp" $, 5758 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5759:
5760: $valueFlowUninit_ $(@expr1073746140 "cppcheck-2.8/test/testuninitvar.cpp" $, 5760 $, "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}" $)
5761:
|
5764:
5765: ;
5766: $if $(@expr1073746141 $!@expr1073746142 $assertEquals $(@expr1073746143 "cppcheck-2.8/test/testuninitvar.cpp" $, 5766 $, "[test.cpp:5]: (error) Uninitialized variable: element\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5767:
5768: $valueFlowUninit_ $(@expr1073746146 "cppcheck-2.8/test/testuninitvar.cpp" $, 5768 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    assign(&ab.a, 0);\n}\n" , "test.c" $)
5769:
|
5772:
5773: ;
5774: $if $(@expr1073746147 $!@expr1073746148 $assertEquals $(@expr1073746149 "cppcheck-2.8/test/testuninitvar.cpp" $, 5774 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5775:
5776: $valueFlowUninit_ $(@expr1073746152 "cppcheck-2.8/test/testuninitvar.cpp" $, 5776 $, "struct Cstring { char *text; int size, alloc; };\nint maybe();\nvoid f() {\n    Cstring res;\n    if ( ! maybe() ) return;\n    ( ((res).text = (void*)0), ((res).size = (res).alloc = 0) );\n}" $)
5777:
|
5782:
5783: ;
5784: $if $(@expr1073746153 $!@expr1073746154 $assertEquals $(@expr1073746155 "cppcheck-2.8/test/testuninitvar.cpp" $, 5784 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5785:
5786: $valueFlowUninit_ $(@expr1073746158 "cppcheck-2.8/test/testuninitvar.cpp" $, 5786 $, "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    ab.b = 0;\n    do_something(ab);\n}\n" , "test.c" $)
5787:
|
5793:
5794: ;
5795: $if $(@expr1073746159 $!@expr1073746160 $assertEquals $(@expr1073746161 "cppcheck-2.8/test/testuninitvar.cpp" $, 5795 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5796:
5797: {
5798: $valueFlowUninit_ $(@expr1073746164 "cppcheck-2.8/test/testuninitvar.cpp" $, 5798 $, "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(ab.a, STR);\n}\n" , "test.c" $)
5799:
|
5802:
5803: ;
5804: $if $(@expr1073746165 $!@expr1073746166 $assertEquals $(@expr1073746167 "cppcheck-2.8/test/testuninitvar.cpp" $, 5804 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5805:
5806: $valueFlowUninit_ $(@expr1073746170 "cppcheck-2.8/test/testuninitvar.cpp" $, 5806 $, "struct AB { unsigned char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy((char *)ab.a, STR);\n}\n" , "test.c" $)
5807:
|
5810:
5811: ;
5812: $if $(@expr1073746171 $!@expr1073746172 $assertEquals $(@expr1073746173 "cppcheck-2.8/test/testuninitvar.cpp" $, 5812 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5813:
5814: $valueFlowUninit_ $(@expr1073746176 "cppcheck-2.8/test/testuninitvar.cpp" $, 5814 $, "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(x, ab.a);\n}\n" , "test.c" $)
5815:
|
5818:
5819: ;
5820: $todoAssertEquals $(@expr1073746177 "cppcheck-2.8/test/testuninitvar.cpp" $, 5820 $, "[test.c:4]: (error) Uninitialized variable: ab.a\n" $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) ;
5821:
5822: $valueFlowUninit_ $(@expr1073746180 "cppcheck-2.8/test/testuninitvar.cpp" $, 5822 $, "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    dosomething(ab.a);\n}\n" , "test.c" $)
5823:
|
5826:
5827: ;
5828: $if $(@expr1073746181 $!@expr1073746182 $assertEquals $(@expr1073746183 "cppcheck-2.8/test/testuninitvar.cpp" $, 5828 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5829: }
5830:
5831: $valueFlowUninit_ $(@expr1073746186 "cppcheck-2.8/test/testuninitvar.cpp" $, 5831 $, "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab = getAB();\n    do_something(ab);\n}\n" , "test.c" $)
5832:
|
5837:
5838: ;
5839: $if $(@expr1073746187 $!@expr1073746188 $assertEquals $(@expr1073746189 "cppcheck-2.8/test/testuninitvar.cpp" $, 5839 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5840:
5841: {
5842:
5843: $valueFlowUninit_ $(@expr1073746192 "cppcheck-2.8/test/testuninitvar.cpp" $, 5843 $, "struct AB { int a; int b; void set(); };\nvoid f(void) {\n    struct AB ab;\n    ab.set();\n    x = ab;\n}" $)
5844:
|
5847:
5848: ;
5849: $if $(@expr1073746193 $!@expr1073746194 $assertEquals $(@expr1073746195 "cppcheck-2.8/test/testuninitvar.cpp" $, 5849 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5850:
5851: $valueFlowUninit_ $(@expr1073746198 "cppcheck-2.8/test/testuninitvar.cpp" $, 5851 $, "struct AB { int a; int get() const; };\nvoid f(void) {\n    struct AB ab;\n    ab.get();\n    x = ab;\n}" $)
5852:
|
5855:
5856: ;
5857: $if $(@expr1073746199 $!@expr1073746200 $assertEquals $(@expr1073746201 "cppcheck-2.8/test/testuninitvar.cpp" $, 5857 $, "[test.cpp:4]: (error) Uninitialized variable: ab\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5858:
5859: $valueFlowUninit_ $(@expr1073746204 "cppcheck-2.8/test/testuninitvar.cpp" $, 5859 $, "struct AB { int a; void dostuff() {} };\nvoid f(void) {\n    struct AB ab;\n    ab.dostuff();\n    x = ab;\n}" $)
5860:
|
5863:
5864: ;
5865: $todoAssertEquals $(@expr1073746205 "cppcheck-2.8/test/testuninitvar.cpp" $, 5865 $, "error" $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) ;
5866: }
5867:
5868: $valueFlowUninit_ $(@expr1073746208 "cppcheck-2.8/test/testuninitvar.cpp" $, 5868 $, "struct AB { int a; struct { int b; int c; } s; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    ab.s.b = 2;\n    ab.s.c = 3;\n    do_something(ab);\n}\n" , "test.c" $)
5869:
|
5876:
5877: ;
5878: $if $(@expr1073746209 $!@expr1073746210 $assertEquals $(@expr1073746211 "cppcheck-2.8/test/testuninitvar.cpp" $, 5878 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5879:
5880: $valueFlowUninit_ $(@expr1073746214 "cppcheck-2.8/test/testuninitvar.cpp" $, 5880 $, "struct conf {\n    char x;\n};\n\nvoid do_something(struct conf ant_conf);\n\nvoid f(void) {\n   struct conf c;\n   initdata(&c);\n   do_something(c);\n}\n" , "test.c" $)
5881:
|
5890:
5891: ;
5892: $if $(@expr1073746215 $!@expr1073746216 $assertEquals $(@expr1073746217 "cppcheck-2.8/test/testuninitvar.cpp" $, 5892 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5893:
5894: $valueFlowUninit_ $(@expr1073746220 "cppcheck-2.8/test/testuninitvar.cpp" $, 5894 $, "struct PIXEL {\n    union  {\n        struct { unsigned char red,green,blue,alpha; };\n        unsigned int color;\n    };\n};\n\nunsigned char f() {\n    struct PIXEL p1;\n    p1.color = 255;\n    return p1.red;\n}" $)
5895:
|
5904:
5905: ;
5906: $if $(@expr1073746221 $!@expr1073746222 $assertEquals $(@expr1073746223 "cppcheck-2.8/test/testuninitvar.cpp" $, 5906 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5907:
5908: $valueFlowUninit_ $(@expr1073746226 "cppcheck-2.8/test/testuninitvar.cpp" $, 5908 $, "struct AB { int a; int b; };\nint f() {\n  struct AB *ab;\n  for (i = 1; i < 10; i++) {\n    if (condition && (ab = getab()) != NULL) {\n      a = ab->a;\n    }\n  }\n}" $)
5909:
|
5915:
5916: ;
5917: $if $(@expr1073746227 $!@expr1073746228 $assertEquals $(@expr1073746229 "cppcheck-2.8/test/testuninitvar.cpp" $, 5917 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5918:
5919: $valueFlowUninit_ $(@expr1073746232 "cppcheck-2.8/test/testuninitvar.cpp" $, 5919 $, "struct AB { int a; int b; };\nint f(int x) {\n  struct AB *ab;\n  if (x == 0) {\n    ab = getab();\n  }\n  if (x == 0 && (ab != NULL || ab->a == 0)) { }\n}" $)
5920:
|
5925:
5926: ;
5927: $if $(@expr1073746233 $!@expr1073746234 $assertEquals $(@expr1073746235 "cppcheck-2.8/test/testuninitvar.cpp" $, 5927 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5928:
5929: $valueFlowUninit_ $(@expr1073746238 "cppcheck-2.8/test/testuninitvar.cpp" $, 5929 $, "struct A { int *x; };\nvoid foo(void *info, void*p);\nvoid bar(void) {\n  struct A *delete = 0;\n  foo( info, NULL );\n}" $)
5930:
|
5933:
5934: ;
5935: $if $(@expr1073746239 $!@expr1073746240 $assertEquals $(@expr1073746241 "cppcheck-2.8/test/testuninitvar.cpp" $, 5935 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5936:
5937: $valueFlowUninit_ $(@expr1073746244 "cppcheck-2.8/test/testuninitvar.cpp" $, 5937 $, "struct ABC { int a; int b; int c; };\nvoid foo(int x, const struct ABC *abc);\nvoid bar(void) {\n  struct ABC abc;\n  foo(123, &abc);\n  return abc.b;\n}" $)
5938:
|
5942:
5943: ;
5944: $todoAssertEquals $(@expr1073746245 "cppcheck-2.8/test/testuninitvar.cpp" $, 5944 $, "[test.cpp:5]: (error) Uninitialized variable: abc.a\n[test.cpp:5]: (error) Uninitialized variable: abc.b\n[test.cpp:5]: (error) Uninitialized variable: abc.c\n" $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $)
5945:
5946:
5947:
5948: ;
5949:
5950: $valueFlowUninit_ $(@expr1073746248 "cppcheck-2.8/test/testuninitvar.cpp" $, 5950 $, "struct ABC { int a; int b; int c; };\nvoid foo() {\n  struct ABC abc;\n  dostuff((uint32_t *)&abc.a);\n}" $)
5951:
5952:
5953:
5954: ;
5955: $if $(@expr1073746249 $!@expr1073746250 $assertEquals $(@expr1073746251 "cppcheck-2.8/test/testuninitvar.cpp" $, 5955 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5956:
5957: $valueFlowUninit_ $(@expr1073746254 "cppcheck-2.8/test/testuninitvar.cpp" $, 5957 $, "void f(void) {\n    struct tm t;\n    t.tm_year = 123;\n}" $)
5958:
5959:
5960: ;
5961: $if $(@expr1073746255 $!@expr1073746256 $assertEquals $(@expr1073746257 "cppcheck-2.8/test/testuninitvar.cpp" $, 5961 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5962:
5963:
5964: $valueFlowUninit_ $(@expr1073746260 "cppcheck-2.8/test/testuninitvar.cpp" $, 5964 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.b;\n}\n" , "test.c" $)
5965:
|
5969:
5970: ;
5971: $if $(@expr1073746261 $!@expr1073746262 $assertEquals $(@expr1073746263 "cppcheck-2.8/test/testuninitvar.cpp" $, 5971 $, "[test.c:5]: (error) Uninitialized variable: ab.b\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5972:
5973: $valueFlowUninit_ $(@expr1073746266 "cppcheck-2.8/test/testuninitvar.cpp" $, 5973 $, "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.a;\n}\n" , "test.c" $)
5974:
|
5978:
5979: ;
5980: $if $(@expr1073746267 $!@expr1073746268 $assertEquals $(@expr1073746269 "cppcheck-2.8/test/testuninitvar.cpp" $, 5980 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5981:
5982: $valueFlowUninit_ $(@expr1073746272 "cppcheck-2.8/test/testuninitvar.cpp" $, 5982 $, "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    s.a = 0;\n    return s;\n}\n" $)
5983:
|
5986:
5987: ;
5988: $if $(@expr1073746273 $!@expr1073746274 $assertEquals $(@expr1073746275 "cppcheck-2.8/test/testuninitvar.cpp" $, 5988 $, "[test.cpp:5]: (error) Uninitialized variable: s.b\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5989:
5990: $valueFlowUninit_ $(@expr1073746278 "cppcheck-2.8/test/testuninitvar.cpp" $, 5990 $, "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    return s.a ? 1 : 2;\n}\n" $)
5991:
5992:
5993:
5994: ;
5995: $if $(@expr1073746279 $!@expr1073746280 $assertEquals $(@expr1073746281 "cppcheck-2.8/test/testuninitvar.cpp" $, 5995 $, "[test.cpp:4]: (error) Uninitialized variable: s.a\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
5996:
5997:
5998: $valueFlowUninit_ $(@expr1073746284 "cppcheck-2.8/test/testuninitvar.cpp" $, 5998 $, "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.a == 0) { }\n}\n" , "test.c" $)
5999:
|
6007:
6008: ;
6009: $if $(@expr1073746285 $!@expr1073746286 $assertEquals $(@expr1073746287 "cppcheck-2.8/test/testuninitvar.cpp" $, 6009 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6010:
6011: $valueFlowUninit_ $(@expr1073746290 "cppcheck-2.8/test/testuninitvar.cpp" $, 6011 $, "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.b == 0) { }\n}\n" , "test.c" $)
6012:
|
6020:
6021: ;
6022: $if $(@expr1073746291 $!@expr1073746292 $assertEquals $(@expr1073746293 "cppcheck-2.8/test/testuninitvar.cpp" $, 6022 $, "[test.c:9]: (error) Uninitialized variable: fred.b\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6023:
6024: $valueFlowUninit_ $(@expr1073746296 "cppcheck-2.8/test/testuninitvar.cpp" $, 6024 $, "struct Fred { int a; };\nvoid f() {\n    struct Fred fred;\n    if (fred.a==1) {}\n}" , "test.c" $)
6025:
|
6028:
6029: ;
6030: $if $(@expr1073746297 $!@expr1073746298 $assertEquals $(@expr1073746299 "cppcheck-2.8/test/testuninitvar.cpp" $, 6030 $, "[test.c:4]: (error) Uninitialized variable: fred.a\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6031:
6032: $valueFlowUninit_ $(@expr1073746302 "cppcheck-2.8/test/testuninitvar.cpp" $, 6032 $, "struct S { int n; int m; };\nvoid f(void) {\n struct S s;\n for (s.n = 0; s.n <= 10; s.n++) { }\n}" , "test.c" $)
6033:
|
6036:
6037: ;
6038: $if $(@expr1073746303 $!@expr1073746304 $assertEquals $(@expr1073746305 "cppcheck-2.8/test/testuninitvar.cpp" $, 6038 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6039:
6040: $valueFlowUninit_ $(@expr1073746308 "cppcheck-2.8/test/testuninitvar.cpp" $, 6040 $, "void test2() {\n  struct { char type; } s_d;\n  if (foo(&s_d.type)){}\n}" $)
6041:
6042:
6043: ;
6044: $if $(@expr1073746309 $!@expr1073746310 $assertEquals $(@expr1073746311 "cppcheck-2.8/test/testuninitvar.cpp" $, 6044 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6045:
6046:
6047: $valueFlowUninit_ $(@expr1073746314 "cppcheck-2.8/test/testuninitvar.cpp" $, 6047 $, "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { clear(ab); z = ab.a; }\n}" $)
6048:
6049:
6050:
6051: ;
6052: $if $(@expr1073746315 $!@expr1073746316 $assertEquals $(@expr1073746317 "cppcheck-2.8/test/testuninitvar.cpp" $, 6052 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6053:
6054: $valueFlowUninit_ $(@expr1073746320 "cppcheck-2.8/test/testuninitvar.cpp" $, 6054 $, "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { ab.a = ab.a + 1; }\n}" $)
6055:
6056:
6057:
6058: ;
6059: $todoAssertEquals $(@expr1073746321 "cppcheck-2.8/test/testuninitvar.cpp" $, 6059 $, "[test.cpp:4]: (error) Uninitialized variable: ab.a\n" $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) ;
6060:
6061: $valueFlowUninit_ $(@expr1073746324 "cppcheck-2.8/test/testuninitvar.cpp" $, 6061 $, "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { init(&ab); z = ab.a; }\n}" $)
6062:
6063:
6064:
6065: ;
6066: $if $(@expr1073746325 $!@expr1073746326 $assertEquals $(@expr1073746327 "cppcheck-2.8/test/testuninitvar.cpp" $, 6066 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6067:
6068:
6069: $valueFlowUninit_ $(@expr1073746330 "cppcheck-2.8/test/testuninitvar.cpp" $, 6069 $, "struct AB { int a[10]; int b; };\nvoid f() {\n    struct AB ab;\n    int *p = ab.a;\n}" $)
6070:
6071:
6072:
6073: ;
6074: $if $(@expr1073746331 $!@expr1073746332 $assertEquals $(@expr1073746333 "cppcheck-2.8/test/testuninitvar.cpp" $, 6074 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6075:
6076:
6077: $valueFlowUninit_ $(@expr1073746336 "cppcheck-2.8/test/testuninitvar.cpp" $, 6077 $, "struct A { int x; };\nvoid foo() {\n  struct A a;\n  int& x = a.x;\n  x = 0;\n  return a.x;\n}" $)
6078:
|
6082:
6083: ;
6084: $if $(@expr1073746337 $!@expr1073746338 $assertEquals $(@expr1073746339 "cppcheck-2.8/test/testuninitvar.cpp" $, 6084 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6085:
6086:
6087: $valueFlowUninit_ $(@expr1073746342 "cppcheck-2.8/test/testuninitvar.cpp" $, 6087 $, "struct AB { int a=1; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n    int b = ab.b;\n}" $)
6088:
|
6091:
6092: ;
6093: $if $(@expr1073746343 $!@expr1073746344 $assertEquals $(@expr1073746345 "cppcheck-2.8/test/testuninitvar.cpp" $, 6093 $, "[test.cpp:4]: (error) Uninitialized variable: ab.a\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6094:
6095:
6096: $valueFlowUninit_ $(@expr1073746348 "cppcheck-2.8/test/testuninitvar.cpp" $, 6096 $, "struct A {\n    std::map<int, int> m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" $)
6097:
|
6102:
6103: ;
6104: $if $(@expr1073746349 $!@expr1073746350 $assertEquals $(@expr1073746351 "cppcheck-2.8/test/testuninitvar.cpp" $, 6104 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6105:
6106:
6107: $valueFlowUninit_ $(@expr1073746354 "cppcheck-2.8/test/testuninitvar.cpp" $, 6107 $, "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" , "test.cpp" $)
6108:
|
6114:
6115: ;
6116: $if $(@expr1073746355 $!@expr1073746356 $assertEquals $(@expr1073746357 "cppcheck-2.8/test/testuninitvar.cpp" $, 6116 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6117:
6118:
6119: $valueFlowUninit_ $(@expr1073746360 "cppcheck-2.8/test/testuninitvar.cpp" $, 6119 $, "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" , "test.c" $)
6120:
|
6126:
6127: ;
6128: $if $(@expr1073746361 $!@expr1073746362 $assertEquals $(@expr1073746363 "cppcheck-2.8/test/testuninitvar.cpp" $, 6128 $, "[test.c:7]: (error) Uninitialized variable: a.m\n" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6129:
6130:
6131: $valueFlowUninit_ $(@expr1073746366 "cppcheck-2.8/test/testuninitvar.cpp" $, 6131 $, "class C { C(); }\nstruct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" $)
6132:
|
6138:
6139: ;
6140: $if $(@expr1073746367 $!@expr1073746368 $assertEquals $(@expr1073746369 "cppcheck-2.8/test/testuninitvar.cpp" $, 6140 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6141:
6142: $valueFlowUninit_ $(@expr1073746372 "cppcheck-2.8/test/testuninitvar.cpp" $, 6142 $, "struct S {\n   int t[1];\n};\nint f(const S* ps) {\n   return ps->t[0];\n}\nvoid g() {\n   S s;\n   s.t[0] = 1;\n   f(&s);\n}\n" $)
6143:
|
6151:
6152: ;
6153: $if $(@expr1073746373 $!@expr1073746374 $assertEquals $(@expr1073746375 "cppcheck-2.8/test/testuninitvar.cpp" $, 6153 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6154:
6155: $valueFlowUninit_ $(@expr1073746378 "cppcheck-2.8/test/testuninitvar.cpp" $, 6155 $, "struct X {\n   int a, b;\n};\nstruct S {\n   X t;\n};\nint f(const S* ps) {\n   return ps->t.a;\n}\nvoid g() {\n   S s;\n   s.t.a = 1;\n   f(&s);\n}\n" $)
6156:
|
6167:
6168: ;
6169: $if $(@expr1073746379 $!@expr1073746380 $assertEquals $(@expr1073746381 "cppcheck-2.8/test/testuninitvar.cpp" $, 6169 $, "" $, errout@var100 .@expr4224 str (@expr4225 ) $) $) { $return ; }
6170:
6171: $valueFlowUninit_ $(@expr1073746384 "cppcheck-2.8/test/testuninitvar.cpp" $, 6171 $, "typedef struct { int a; int b; int c; } ABC;\nvoid setabc(int x, const ABC* const abc) {\n    sum = abc->a + abc->b + abc->c;\n}\nvoid f(void) {\n    ABC abc;\n    abc.a = 1;\n    setabc(123, &abc);\n}\n" $)
6172:
|
6178:
6179: ;
6180: $todoAssertEquals $(@expr1073746385 "cppcheck-2.8/test/testuninitvar.cpp" $, 6180 $, "[test.cpp:8] -> [test.cpp:3]: (error) Uninitialized variable: abc->b\n[test.cpp:8] -> [test.cpp:3]: (error) Uninitialized variable: abc->c\n" $, "[test.cpp:8] -> [test.cpp:3]: (error) Uninitialized variable: abc->b\n" $, errout@var100 .@expr4224 str (@expr4225 ) $)
6181:
6182:
6183: ;
6184: }
6185:
6186: void uninitvar_memberfunction ( ) {
6187:
6188: $valueFlowUninit_ $(@expr1073746388 "cppcheck-2.8/test/testuninitvar.cpp" $, 6188 $, "struct C {\n    int x();\n};\nvoid f() {\n    C *c;\n    if (c->x() == 4) {}\n}" $)
6189:
|
6193:
6194: ;
6195: $if $(@expr1073746389 $!@expr1073746390 $assertEquals $(@expr1073746391 "cppcheck-2.8/test/testuninitvar.cpp" $, 6195 $, "[test.cpp:6]: (error) Uninitialized variable: c\n" $, errout@var100 .@expr4568 str (@expr4569 ) $) $) { $return ; }
6196:
6197: $valueFlowUninit_ $(@expr1073746394 "cppcheck-2.8/test/testuninitvar.cpp" $, 6197 $, "struct A { \n    int i; \n    void f();\n};\nvoid g() {\n    A a;\n    a.f();\n}\n" $)
6198:
|
6203:
6204: ;
6205: $if $(@expr1073746395 $!@expr1073746396 $assertEquals $(@expr1073746397 "cppcheck-2.8/test/testuninitvar.cpp" $, 6205 $, "" $, errout@var100 .@expr4568 str (@expr4569 ) $) $) { $return ; }
6206: }
6207:
6208: void uninitvar_nonmember ( ) {
6209: $valueFlowUninit_ $(@expr1073746400 "cppcheck-2.8/test/testuninitvar.cpp" $, 6209 $, "struct Foo {\n  int bar;\n};\n\nint main() {\n  Foo* foo;\n  foo->bar = 3;\n}" $)
6210:
|
6215:
6216: ;
6217: $if $(@expr1073746401 $!@expr1073746402 $assertEquals $(@expr1073746403 "cppcheck-2.8/test/testuninitvar.cpp" $, 6217 $, "[test.cpp:7]: (error) Uninitialized variable: foo\n" $, errout@var100 .@expr1073746404 str (@expr1073746405 ) $) $) { $return ; }
6218: }
6219:
6220: void isVariableUsageDeref ( ) {
6221:
6222: $checkUninitVar_ $(@expr1073746406 "cppcheck-2.8/test/testuninitvar.cpp" $, 6222 $, "void f() {\n    char a[10];\n    char c = *a;\n}" $)
6223:
6224:
6225: ;
6226: $if $(@expr1073746407 $!@expr1073746408 $assertEquals $(@expr1073746409 "cppcheck-2.8/test/testuninitvar.cpp" $, 6226 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr4586 str (@expr4587 ) $) $) { $return ; }
6227:
6228:
6229: $checkUninitVar_ $(@expr1073746412 "cppcheck-2.8/test/testuninitvar.cpp" $, 6229 $, "void f() {\n    char a[SIZE+10];\n    char c = *a;\n}" $)
6230:
6231:
6232: ;
6233: $if $(@expr1073746413 $!@expr1073746414 $assertEquals $(@expr1073746415 "cppcheck-2.8/test/testuninitvar.cpp" $, 6233 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr4586 str (@expr4587 ) $) $) { $return ; }
6234:
6235: $checkUninitVar_ $(@expr1073746418 "cppcheck-2.8/test/testuninitvar.cpp" $, 6235 $, "void f() {\n    char a[10];\n    *a += 10;\n}" $)
6236:
6237:
6238: ;
6239: $if $(@expr1073746419 $!@expr1073746420 $assertEquals $(@expr1073746421 "cppcheck-2.8/test/testuninitvar.cpp" $, 6239 $, "[test.cpp:3]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr4586 str (@expr4587 ) $) $) { $return ; }
6240:
6241: $checkUninitVar_ $(@expr1073746424 "cppcheck-2.8/test/testuninitvar.cpp" $, 6241 $, "void f() {\n  int a[10][10];\n  dostuff(*a);\n}" $)
6242:
6243:
6244: ;
6245: $if $(@expr1073746425 $!@expr1073746426 $assertEquals $(@expr1073746427 "cppcheck-2.8/test/testuninitvar.cpp" $, 6245 $, "" $, errout@var100 .@expr4586 str (@expr4587 ) $) $) { $return ; }
6246:
6247: $checkUninitVar_ $(@expr1073746430 "cppcheck-2.8/test/testuninitvar.cpp" $, 6247 $, "void f() {\n    void (*fp[1]) (void) = {function1};\n    (*fp[0])();\n}" $)
6248:
6249:
6250: ;
6251: $if $(@expr1073746431 $!@expr1073746432 $assertEquals $(@expr1073746433 "cppcheck-2.8/test/testuninitvar.cpp" $, 6251 $, "" $, errout@var100 .@expr4586 str (@expr4587 ) $) $) { $return ; }
6252: }
6253:
6254: void isVariableUsageDerefValueflow ( )
6255: {
6256:
6257: $valueFlowUninit_ $(@expr1073746436 "cppcheck-2.8/test/testuninitvar.cpp" $, 6257 $, "void f() {\n    char a[10];\n    char c = *a;\n}" $)
6258:
6259:
6260: ;
6261: $if $(@expr1073746437 $!@expr1073746438 $assertEquals $(@expr1073746439 "cppcheck-2.8/test/testuninitvar.cpp" $, 6261 $, "[test.cpp:3]: (error) Uninitialized variable: *a\n" $, errout@var100 .@expr4616 str (@expr4617 ) $) $) { $return ; }
6262:
6263:
6264: $valueFlowUninit_ $(@expr1073746442 "cppcheck-2.8/test/testuninitvar.cpp" $, 6264 $, "void f() {\n    char a[SIZE+10];\n    char c = *a;\n}" $)
6265:
6266:
6267: ;
6268: $if $(@expr1073746443 $!@expr1073746444 $assertEquals $(@expr1073746445 "cppcheck-2.8/test/testuninitvar.cpp" $, 6268 $, "[test.cpp:3]: (error) Uninitialized variable: *a\n" $, errout@var100 .@expr4616 str (@expr4617 ) $) $) { $return ; }
6269:
6270: $valueFlowUninit_ $(@expr1073746448 "cppcheck-2.8/test/testuninitvar.cpp" $, 6270 $, "void f() {\n    char a[10];\n    *a += 10;\n}" $)
6271:
6272:
6273: ;
6274: $if $(@expr1073746449 $!@expr1073746450 $assertEquals $(@expr1073746451 "cppcheck-2.8/test/testuninitvar.cpp" $, 6274 $, "[test.cpp:3]: (error) Uninitialized variable: *a\n" $, errout@var100 .@expr4616 str (@expr4617 ) $) $) { $return ; }
6275:
6276: $valueFlowUninit_ $(@expr1073746454 "cppcheck-2.8/test/testuninitvar.cpp" $, 6276 $, "void f() {\n  int a[10][10];\n  dostuff(*a);\n}" $)
6277:
6278:
6279: ;
6280: $if $(@expr1073746455 $!@expr1073746456 $assertEquals $(@expr1073746457 "cppcheck-2.8/test/testuninitvar.cpp" $, 6280 $, "" $, errout@var100 .@expr4616 str (@expr4617 ) $) $) { $return ; }
6281:
6282: $valueFlowUninit_ $(@expr1073746460 "cppcheck-2.8/test/testuninitvar.cpp" $, 6282 $, "void f() {\n    void (*fp[1]) (void) = {function1};\n    (*fp[0])();\n}" $)
6283:
6284:
6285: ;
6286: $if $(@expr1073746461 $!@expr1073746462 $assertEquals $(@expr1073746463 "cppcheck-2.8/test/testuninitvar.cpp" $, 6286 $, "" $, errout@var100 .@expr4616 str (@expr4617 ) $) $) { $return ; }
6287:
6288: $valueFlowUninit_ $(@expr1073746466 "cppcheck-2.8/test/testuninitvar.cpp" $, 6288 $, "template <typename T, int value> T Get() {return value;}\nchar f() {\n  char buf[10];\n  for(int i = 0; i < Get<int,10>() ; ++i) \n     buf[i] = 0;\n  return buf[0];\n}\n" $)
6289:
|
6293:
6294: ;
6295: $if $(@expr1073746467 $!@expr1073746468 $assertEquals $(@expr1073746469 "cppcheck-2.8/test/testuninitvar.cpp" $, 6295 $, "" $, errout@var100 .@expr4616 str (@expr4617 ) $) $) { $return ; }
6296:
6297: $valueFlowUninit_ $(@expr1073746472 "cppcheck-2.8/test/testuninitvar.cpp" $, 6297 $, "static void Foo(double* p) {\n p[0] = 0;\n p[1] = 0;\n p[2] = 0;\n p[3] = 0;\n}\ndouble f() {\n  double L[2][2];\n  Foo(*L);\n  return L[0][0];\n}\n" $)
6298:
|
6306:
6307: ;
6308: $if $(@expr1073746473 $!@expr1073746474 $assertEquals $(@expr1073746475 "cppcheck-2.8/test/testuninitvar.cpp" $, 6308 $, "" $, errout@var100 .@expr4616 str (@expr4617 ) $) $) { $return ; }
6309: }
6310:
6311: void uninitvar_memberaccess ( ) {
6312: $valueFlowUninit_ $(@expr1073746478 "cppcheck-2.8/test/testuninitvar.cpp" $, 6312 $, "struct foo{char *bar;};\nvoid f(unsigned long long *p) {\n    foo a;\n    ((&a)->bar) =  reinterpret_cast<char*>(*p);\n    if ((&a)->bar) ;\n}" $)
6313:
|
6316:
6317: ;
6318: $if $(@expr1073746479 $!@expr1073746480 $assertEquals $(@expr1073746481 "cppcheck-2.8/test/testuninitvar.cpp" $, 6318 $, "" $, errout@var100 .@expr4658 str (@expr4659 ) $) $) { $return ; }
6319:
6320: $valueFlowUninit_ $(@expr1073746484 "cppcheck-2.8/test/testuninitvar.cpp" $, 6320 $, "struct foo{char *bar;};\nvoid f(unsigned long long *p) {\n    foo a;\n    ((&(a))->bar) =  reinterpret_cast<char*>(*p);\n    if ((&a)->bar) ;\n}" $)
6321:
|
6324:
6325: ;
6326: $if $(@expr1073746485 $!@expr1073746486 $assertEquals $(@expr1073746487 "cppcheck-2.8/test/testuninitvar.cpp" $, 6326 $, "" $, errout@var100 .@expr4658 str (@expr4659 ) $) $) { $return ; }
6327:
6328: $valueFlowUninit_ $(@expr1073746490 "cppcheck-2.8/test/testuninitvar.cpp" $, 6328 $, "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A::B>& x) {\n    A::B b;\n    b.i = 123;\n    x.push_back(b);\n}\n" $)
6329:
|
6337:
6338: ;
6339: $if $(@expr1073746491 $!@expr1073746492 $assertEquals $(@expr1073746493 "cppcheck-2.8/test/testuninitvar.cpp" $, 6339 $, "" $, errout@var100 .@expr4658 str (@expr4659 ) $) $) { $return ; }
6340:
6341: $valueFlowUninit_ $(@expr1073746496 "cppcheck-2.8/test/testuninitvar.cpp" $, 6341 $, "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A::B>& x) {\n    A::B b;\n    x.push_back(b);\n}\n" $)
6342:
|
6349:
6350: ;
6351: $if $(@expr1073746497 $!@expr1073746498 $assertEquals $(@expr1073746499 "cppcheck-2.8/test/testuninitvar.cpp" $, 6351 $, "[test.cpp:9]: (error) Uninitialized variable: b\n" $, errout@var100 .@expr4658 str (@expr4659 ) $) $) { $return ; }
6352:
6353: $valueFlowUninit_ $(@expr1073746502 "cppcheck-2.8/test/testuninitvar.cpp" $, 6353 $, "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A>&x) {\n    A a;\n    a.j = 123;\n    x.push_back(a);\n}\n" $)
6354:
|
6362:
6363: ;
6364:
6365: $valueFlowUninit_ $(@expr1073746503 "cppcheck-2.8/test/testuninitvar.cpp" $, 6365 $, "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A>& x) {\n    A a;\n    x.push_back(a);\n}\n" $)
6366:
|
6373:
6374: ;
6375: $if $(@expr1073746504 $!@expr1073746505 $assertEquals $(@expr1073746506 "cppcheck-2.8/test/testuninitvar.cpp" $, 6375 $, "[test.cpp:9]: (error) Uninitialized variable: a\n" $, errout@var100 .@expr4658 str (@expr4659 ) $) $) { $return ; }
6376:
6377: $valueFlowUninit_ $(@expr1073746509 "cppcheck-2.8/test/testuninitvar.cpp" $, 6377 $, "struct S { struct T { int* p; } t[2]; };\nvoid f() {\n    S s;\n    *&s.t[0].p = 0;\n}\nvoid g() {\n    S s;\n    ((*&(*&s.t[0].p))) = 0;\n}\n" $)
6378:
|
6384:
6385: ;
6386: $if $(@expr1073746510 $!@expr1073746511 $assertEquals $(@expr1073746512 "cppcheck-2.8/test/testuninitvar.cpp" $, 6386 $, "" $, errout@var100 .@expr4658 str (@expr4659 ) $) $) { $return ; }
6387:
6388: $valueFlowUninit_ $(@expr1073746515 "cppcheck-2.8/test/testuninitvar.cpp" $, 6388 $, "struct S { int i; };\nvoid f() {\n    struct S s;\n    int x = -3;\n    int y = x < (1, s.i);\n}\n" $)
6389:
|
6392:
6393: ;
6394: $if $(@expr1073746516 $!@expr1073746517 $assertEquals $(@expr1073746518 "cppcheck-2.8/test/testuninitvar.cpp" $, 6394 $, "[test.cpp:5]: (error) Uninitialized variable: s.i\n" $, errout@var100 .@expr4658 str (@expr4659 ) $) $) { $return ; }
6395: }
6396:
6397: void ctu_ ( const char * file@var135 , int line@var136 , const char code@var137 [ ] ) {
6398:
6399: errout@var100 .@expr1073746521 str (@expr1073746522 "" ) ;
6400:
6401:
6402: Tokenizer tokenizer@var138 (@expr1073746523 &@expr4700 settings@var102 , this@expr4701 ) ;
6403: std ::@expr1073746526 istringstream istr@var139 (@expr1073746527 code@var137 ) ;
6404: $assert_ $(@expr1073746528 file@var135 $, line@var136 $, $(@expr1073746529 tokenizer@var138 .@expr1073746530 tokenize (@expr1073746531 istr@var139 , "test.cpp" ) $) $) ;
6405:
6406: CTU ::@expr1073746532 FileInfo * ctu@var140 ; ctu@var140 =@expr1073746533 CTU ::@expr1073746534 getFileInfo (@expr1073746535 &@expr4712 tokenizer@var138 ) ;
6407:
6408:
6409: std ::@expr1073746537 list < Check ::@expr1073746538 FileInfo *@expr1073746539 > fileInfo@var141 ;
6410: CheckUninitVar check@var142 (@expr1073746540 &@expr4712 tokenizer@var138 , &@expr4700 settings@var102 , this@expr4701 ) ;
6411: fileInfo@var141 .@expr1073746543 push_back (@expr1073746544 check@var142 .@expr1073746545 getFileInfo (@expr1073746546 &@expr4712 tokenizer@var138 , &@expr4700 settings@var102 ) ) ;
6412: check@var142 .@expr1073746549 analyseWholeProgram (@expr1073746550 ctu@var140 , fileInfo@var141 , settings@var102 , *@expr1073746551 this@expr4701 ) ;
6413: while (@expr1073746552 !@expr1073746553 fileInfo@var141 .@expr1073746554 empty (@expr1073746555 ) ) {
6414: delete fileInfo@var141 .@expr1073746556 back (@expr1073746557 ) ;
6415: fileInfo@var141 .@expr1073746558 pop_back (@expr1073746559 ) ;
6416: }
6417: delete ctu@var140 ;
6418: }
6419:
6420: void ctuTest ( ) {
6421: $ctu_ $(@expr1073746560 "cppcheck-2.8/test/testuninitvar.cpp" $, 6421 $, "void f(int *p) {\n    a = *p;\n}\nint main() {\n  int x;\n  f(&x);\n}" $)
6422:
|
6426:
6427: ;
6428: $if $(@expr1073746561 $!@expr1073746562 $assertEquals $(@expr1073746563 "cppcheck-2.8/test/testuninitvar.cpp" $, 6428 $, "[test.cpp:6] -> [test.cpp:2]: (error) Using argument p that points at uninitialized variable x\n" $, errout@var100 .@expr4740 str (@expr4741 ) $) $) { $return ; }
6429:
6430: $ctu_ $(@expr1073746566 "cppcheck-2.8/test/testuninitvar.cpp" $, 6430 $, "void use(int *p) { a = *p + 3; }\nvoid call(int x, int *p) { x++; use(p); }\nint main() {\n  int x;\n  call(4,&x);\n}" $)
6431:
|
6434:
6435: ;
6436: $if $(@expr1073746567 $!@expr1073746568 $assertEquals $(@expr1073746569 "cppcheck-2.8/test/testuninitvar.cpp" $, 6436 $, "[test.cpp:5] -> [test.cpp:2] -> [test.cpp:1]: (error) Using argument p that points at uninitialized variable x\n" $, errout@var100 .@expr4740 str (@expr4741 ) $) $) { $return ; }
6437:
6438: $ctu_ $(@expr1073746572 "cppcheck-2.8/test/testuninitvar.cpp" $, 6438 $, "void dostuff(int *x, int *y) {\n  if (!var)\n    return -1;\n  *x = *y;\n}\n\nvoid f() {\n  int x;\n  dostuff(a, &x);\n}" $)
6439:
|
6446:
6447: ;
6448: $if $(@expr1073746573 $!@expr1073746574 $assertEquals $(@expr1073746575 "cppcheck-2.8/test/testuninitvar.cpp" $, 6448 $, "" $, errout@var100 .@expr4740 str (@expr4741 ) $) $) { $return ; }
6449:
6450: $ctu_ $(@expr1073746578 "cppcheck-2.8/test/testuninitvar.cpp" $, 6450 $, "void dostuff(int *x, int *y) {\n  if (cond)\n    *y = -1;\n  *x = *y;\n}\n\nvoid f() {\n  int x;\n  dostuff(a, &x);\n}" $)
6451:
|
6458:
6459: ;
6460: $if $(@expr1073746579 $!@expr1073746580 $assertEquals $(@expr1073746581 "cppcheck-2.8/test/testuninitvar.cpp" $, 6460 $, "" $, errout@var100 .@expr4740 str (@expr4741 ) $) $) { $return ; }
6461:
6462: $ctu_ $(@expr1073746584 "cppcheck-2.8/test/testuninitvar.cpp" $, 6462 $, "void f(int *p) {\n    a = sizeof(*p);\n}\nint main() {\n  int x;\n  f(&x);\n}" $)
6463:
|
6467:
6468: ;
6469: $if $(@expr1073746585 $!@expr1073746586 $assertEquals $(@expr1073746587 "cppcheck-2.8/test/testuninitvar.cpp" $, 6469 $, "" $, errout@var100 .@expr4740 str (@expr4741 ) $) $) { $return ; }
6470:
6471: $ctu_ $(@expr1073746590 "cppcheck-2.8/test/testuninitvar.cpp" $, 6471 $, "void f(int *v) {\n  std::cin >> *v;\n}\nint main() {\n  int x;\n  f(&x);\n}" $)
6472:
|
6476:
6477: ;
6478: $if $(@expr1073746591 $!@expr1073746592 $assertEquals $(@expr1073746593 "cppcheck-2.8/test/testuninitvar.cpp" $, 6478 $, "" $, errout@var100 .@expr4740 str (@expr4741 ) $) $) { $return ; }
6479:
6480: $ctu_ $(@expr1073746596 "cppcheck-2.8/test/testuninitvar.cpp" $, 6480 $, "void increment(int& i) { ++i; }\nint f() {\n    int n;\n    increment(n);\n    return n;\n}\n" $)
6481:
|
6484:
6485: ;
6486: $if $(@expr1073746597 $!@expr1073746598 $assertEquals $(@expr1073746599 "cppcheck-2.8/test/testuninitvar.cpp" $, 6486 $, "[test.cpp:4] -> [test.cpp:1]: (error) Using argument i that points at uninitialized variable n\n" $, errout@var100 .@expr4740 str (@expr4741 ) $) $) { $return ; }
6487:
6488: $ctu_ $(@expr1073746602 "cppcheck-2.8/test/testuninitvar.cpp" $, 6488 $, "void increment(int* i) { ++(*i); }\nint f() {\n    int n;\n    increment(&n);\n    return n;\n}\n" $)
6489:
|
6492:
6493: ;
6494: $if $(@expr1073746603 $!@expr1073746604 $assertEquals $(@expr1073746605 "cppcheck-2.8/test/testuninitvar.cpp" $, 6494 $, "[test.cpp:4] -> [test.cpp:1]: (error) Using argument i that points at uninitialized variable n\n" $, errout@var100 .@expr4740 str (@expr4741 ) $) $) { $return ; }
6495: }
6496: } ;
6497:
6498: $namespace ${ TestUninitVar instance_TestUninitVar@var143 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@197}
  v {!<=-1,!>=2,0@197}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 35
  "TestUninitVar" always "TestUninitVar"
Line 41
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 43
  ( always {!<=-1,!>=2}
  "uninitvar1" always "uninitvar1"
  false always 0
  false always 0
Line 44
  ( always {!<=-1,!>=2}
  "uninitvar_warn_once" always "uninitvar_warn_once"
  false always 0
  false always 0
Line 45
  ( always {!<=-1,!>=2}
  "uninitvar_decl" always "uninitvar_decl"
  false always 0
  false always 0
Line 46
  ( always {!<=-1,!>=2}
  "uninitvar_bitop" always "uninitvar_bitop"
  false always 0
  false always 0
Line 47
  ( always {!<=-1,!>=2}
  "uninitvar_alloc" always "uninitvar_alloc"
  false always 0
  false always 0
Line 48
  ( always {!<=-1,!>=2}
  "uninitvar_arrays" always "uninitvar_arrays"
  false always 0
  false always 0
Line 49
  ( always {!<=-1,!>=2}
  "uninitvar_class" always "uninitvar_class"
  false always 0
  false always 0
Line 50
  ( always {!<=-1,!>=2}
  "uninitvar_enum" always "uninitvar_enum"
  false always 0
  false always 0
Line 51
  ( always {!<=-1,!>=2}
  "uninitvar_if" always "uninitvar_if"
  false always 0
  false always 0
Line 52
  ( always {!<=-1,!>=2}
  "uninitvar_loops" always "uninitvar_loops"
  false always 0
  false always 0
Line 53
  ( always {!<=-1,!>=2}
  "uninitvar_switch" always "uninitvar_switch"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "uninitvar_references" always "uninitvar_references"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "uninitvar_return" always "uninitvar_return"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "uninitvar_assign" always "uninitvar_assign"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "uninitvar_strncpy" always "uninitvar_strncpy"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "func_uninit_var" always "func_uninit_var"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "func_uninit_pointer" always "func_uninit_pointer"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "uninitvar_typeof" always "uninitvar_typeof"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "uninitvar_ignore" always "uninitvar_ignore"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "uninitvar2" always "uninitvar2"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "uninitvar3" always "uninitvar3"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "uninitvar4" always "uninitvar4"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "uninitvar5" always "uninitvar5"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "uninitvar2_func" always "uninitvar2_func"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "uninitvar2_value" always "uninitvar2_value"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "valueFlowUninit2_value" always "valueFlowUninit2_value"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "uninitStructMember" always "uninitStructMember"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "uninitvar2_while" always "uninitvar2_while"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "uninitvar2_4494" always "uninitvar2_4494"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "uninitvar2_malloc" always "uninitvar2_malloc"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "uninitvar8" always "uninitvar8"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "uninitvar9" always "uninitvar9"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "uninitvar10" always "uninitvar10"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "uninitvar11" always "uninitvar11"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "uninitvar12" always "uninitvar12"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "uninitvar13" always "uninitvar13"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "uninitvar_unconditionalTry" always "uninitvar_unconditionalTry"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "uninitvar_funcptr" always "uninitvar_funcptr"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "uninitvar_operator" always "uninitvar_operator"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "uninitvar_ternaryexpression" always "uninitvar_ternaryexpression"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "uninitvar_pointertoarray" always "uninitvar_pointertoarray"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "uninitvar_cpp11ArrayInit" always "uninitvar_cpp11ArrayInit"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "uninitvar_rangeBasedFor" always "uninitvar_rangeBasedFor"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "uninitvar_static" always "uninitvar_static"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "checkExpr" always "checkExpr"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "trac_4871" always "trac_4871"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "syntax_error" always "syntax_error"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "trac_5970" always "trac_5970"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "valueFlowUninitTest" always "valueFlowUninitTest"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "valueFlowUninitBreak" always "valueFlowUninitBreak"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "valueFlowUninitStructMembers" always "valueFlowUninitStructMembers"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "uninitvar_ipa" always "uninitvar_ipa"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "uninitvar_memberfunction" always "uninitvar_memberfunction"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "uninitvar_nonmember" always "uninitvar_nonmember"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "isVariableUsageDeref" always "isVariableUsageDeref"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "isVariableUsageDerefValueflow" always "isVariableUsageDerefValueflow"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "uninitvar_memberaccess" always "uninitvar_memberaccess"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "ctuTest" always "ctuTest"
  false always 0
  false always 0
Line 108
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
  , always 0
  debugwarnings always {!<=-1,!>=2}
  = always 0
  false always 0
Line 110
  "" always ""
Line 113
  = {!<=-1,!>=2,0@30}
  debugwarnings {!<=-1,!>=2,0@30}
Line 114
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 115
  code possible {"void f() {\n    char a[10];\n    char c = *a;\n}"@24,"void f() {\n    char a[SIZE+10];\n    char c = *a;\n}"@25,"void f() {\n    char a[10];\n    *a += 10;\n}"@26,"void f() {\n  int a[10][10];\n  dostuff(*a);\n}"@27,"void f() {\n    void (*fp[1]) (void) = {function1};\n    (*fp[0])();\n}"@28,"void DES_ede3_ofb64_encrypt() {\n  DES_cblock d;\n  char *dp;\n  dp=(char *)d;\n  init(dp);\n}"@191,"struct flex_array {};\nstruct cgroup_taskset {};\nvoid cgroup_attach_task() {\n  struct flex_array *group;\n  struct cgroup_taskset tset = { };\n  do { } while_each_thread(leader, tsk);\n}"@192,"void pickup(int a) {\nbool using_planner_action;\nif (a)   {\n  using_planner_action = false;\n}\nelse {\n  try\n  {}\n  catch (std::exception &ex) {\n    return;\n  }\n  using_planner_action = true;\n}\nif (using_planner_action) {}\n}"@193,"struct AB { int a; int b; };\nvoid f() {\n    struct AB *ab = (struct AB*)calloc(1, sizeof(*ab));\n}"@194,"struct X {   typedef struct { int p; } P_t;   static int arr[]; }; int X::arr[] = {42}; void f() {   std::vector<X::P_t> result;   X::P_t P;   P.p = 0;   result.push_back(P); }"@195}
Line 116
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testuninitvar.cpp"@24,"cppcheck-2.8/test/testuninitvar.cpp"@25,"cppcheck-2.8/test/testuninitvar.cpp"@26,"cppcheck-2.8/test/testuninitvar.cpp"@27,"cppcheck-2.8/test/testuninitvar.cpp"@28,"cppcheck-2.8/test/testuninitvar.cpp"@191,"cppcheck-2.8/test/testuninitvar.cpp"@192,"cppcheck-2.8/test/testuninitvar.cpp"@193,"cppcheck-2.8/test/testuninitvar.cpp"@194,"cppcheck-2.8/test/testuninitvar.cpp"@195}
  line inconclusive {6222@24,6229@25,6235@26,6241@27,6247@28,4629@191,4625@192,4599@193,4591@194,4576@195}
  fname inconclusive {"test.c"@191,"test.c"@228,"test.c"@242,"test.c"@243,"test.c"@245,"test.c"@247,"test.c"@248,"test.c"@249,"test.c"@250,"test.c"@3}
Line 119
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 122
  = always 0
  false always 0
Line 130
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  130 always 130
  "void foo() {\n    int a;\n    b = c - a;\n}" always "void foo() {\n    int a;\n    b = c - a;\n}"
Line 134
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  134 always 134
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 136
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  136 always 136
  "void foo() {\n    int a;\n    b = a - c;\n}" always "void foo() {\n    int a;\n    b = a - c;\n}"
Line 140
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  140 always 140
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 144
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  144 always 144
  "void foo() {\n    const int a;\n    b = c - a;\n}" always "void foo() {\n    const int a;\n    b = c - a;\n}"
Line 148
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  148 always 148
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 151
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  151 always 151
  "void foo() {\n    int *p;\n    realloc(p,10);\n}" always "void foo() {\n    int *p;\n    realloc(p,10);\n}"
Line 155
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  155 always 155
  "[test.cpp:3]: (error) Uninitialized variable: p\n" always "[test.cpp:3]: (error) Uninitialized variable: p\n"
Line 157
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  157 always 157
  "void foo() {\n    char *p = malloc(100);\n    char *tmp = realloc(p,1000);\n    if (!tmp) free(p);\n}" always "void foo() {\n    char *p = malloc(100);\n    char *tmp = realloc(p,1000);\n    if (!tmp) free(p);\n}"
Line 162
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  162 always 162
  "" always ""
Line 164
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  164 always 164
  "void foo() {\n    int *p = NULL;\n    realloc(p,10);\n}" always "void foo() {\n    int *p = NULL;\n    realloc(p,10);\n}"
Line 168
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  168 always 168
  "" always ""
Line 172
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  172 always 172
  "static void foo()\n{\n    Foo *p;\n    p->abcd();\n}" always "static void foo()\n{\n    Foo *p;\n    p->abcd();\n}"
Line 177
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  177 always 177
  "[test.cpp:4]: (error) Uninitialized variable: p\n" always "[test.cpp:4]: (error) Uninitialized variable: p\n"
Line 180
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  180 always 180
  "static void foo()\n{\n    Foo<int> *p;\n    p->abcd();\n}" always "static void foo()\n{\n    Foo<int> *p;\n    p->abcd();\n}"
Line 185
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  185 always 185
  "[test.cpp:4]: (error) Uninitialized variable: p\n" always "[test.cpp:4]: (error) Uninitialized variable: p\n"
Line 188
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  188 always 188
  "void f(Foo *p)\n{\n    int a;\n    p->a = malloc(4 * a);\n}" always "void f(Foo *p)\n{\n    int a;\n    p->a = malloc(4 * a);\n}"
Line 193
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  193 always 193
  "[test.cpp:4]: (error) Uninitialized variable: a\n" always "[test.cpp:4]: (error) Uninitialized variable: a\n"
Line 195
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  195 always 195
  "static void foo()\n{\n    int *p;\n    delete p;\n}" always "static void foo()\n{\n    int *p;\n    delete p;\n}"
Line 200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  200 always 200
  "[test.cpp:4]: (error) Uninitialized variable: p\n" always "[test.cpp:4]: (error) Uninitialized variable: p\n"
Line 202
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  202 always 202
  "static void foo()\n{\n    int *p;\n    delete [] p;\n}" always "static void foo()\n{\n    int *p;\n    delete [] p;\n}"
Line 207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  207 always 207
  "[test.cpp:4]: (error) Uninitialized variable: p\n" always "[test.cpp:4]: (error) Uninitialized variable: p\n"
Line 209
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  209 always 209
  "static void foo()\n{\n    int *p;\n    *p = 135;\n}" always "static void foo()\n{\n    int *p;\n    *p = 135;\n}"
Line 214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  214 always 214
  "[test.cpp:4]: (error) Uninitialized variable: p\n" always "[test.cpp:4]: (error) Uninitialized variable: p\n"
Line 216
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  216 always 216
  "static void foo()\n{\n    int *p;\n    p[0] = 135;\n}" always "static void foo()\n{\n    int *p;\n    p[0] = 135;\n}"
Line 221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  221 always 221
  "[test.cpp:4]: (error) Uninitialized variable: p\n" always "[test.cpp:4]: (error) Uninitialized variable: p\n"
Line 223
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  223 always 223
  "static void foo()\n{\n    int *x;\n    int y = *x;\n}" always "static void foo()\n{\n    int *x;\n    int y = *x;\n}"
Line 228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  228 always 228
  "[test.cpp:4]: (error) Uninitialized variable: x\n" always "[test.cpp:4]: (error) Uninitialized variable: x\n"
Line 230
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  230 always 230
  "static void foo()\n{\n    int *x;\n    int &y(*x);\n}" always "static void foo()\n{\n    int *x;\n    int &y(*x);\n}"
Line 235
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  235 always 235
  "[test.cpp:4]: (error) Uninitialized variable: x\n" always "[test.cpp:4]: (error) Uninitialized variable: x\n"
Line 237
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  237 always 237
  "void foo()\n{\n    int x;\n    int *y = &x;\n}" always "void foo()\n{\n    int x;\n    int *y = &x;\n}"
Line 242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  242 always 242
  "" always ""
Line 244
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  244 always 244
  "void foo()\n{\n    int *x;\n    int *&y = x;\n}" always "void foo()\n{\n    int *x;\n    int *&y = x;\n}"
Line 249
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  249 always 249
  "" always ""
Line 251
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  251 always 251
  "void foo()\n{\n    int x = xyz::x;\n}" always "void foo()\n{\n    int x = xyz::x;\n}"
Line 255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  255 always 255
  "" always ""
Line 257
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  257 always 257
  "void f()\n{\n    int a;\n    a = 5 + a;\n}" always "void f()\n{\n    int a;\n    a = 5 + a;\n}"
Line 262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  262 always 262
  "[test.cpp:4]: (error) Uninitialized variable: a\n" always "[test.cpp:4]: (error) Uninitialized variable: a\n"
Line 264
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  264 always 264
  "void f()\n{\n    int a;\n    a++;\n}" always "void f()\n{\n    int a;\n    a++;\n}"
Line 269
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  269 always 269
  "[test.cpp:4]: (error) Uninitialized variable: a\n" always "[test.cpp:4]: (error) Uninitialized variable: a\n"
Line 271
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  271 always 271
  "void f()\n{\n    extern int a;\n    a++;\n}" always "void f()\n{\n    extern int a;\n    a++;\n}"
Line 276
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  276 always 276
  "" always ""
Line 279
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  279 always 279
  "void f()\n{\n    int a;\n    bar(4 * a);\n}" always "void f()\n{\n    int a;\n    bar(4 * a);\n}"
Line 284
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  284 always 284
  "[test.cpp:4]: (error) Uninitialized variable: a\n" always "[test.cpp:4]: (error) Uninitialized variable: a\n"
Line 286
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  286 always 286
  "static void foo()\n{\n    int i;\n    if (i);\n}" always "static void foo()\n{\n    int i;\n    if (i);\n}"
Line 291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  291 always 291
  "[test.cpp:4]: (error) Uninitialized variable: i\n" always "[test.cpp:4]: (error) Uninitialized variable: i\n"
Line 293
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  293 always 293
  "static void foo()\n{\n    int i;\n    for (int x = 0; i < 10; x++);\n}" always "static void foo()\n{\n    int i;\n    for (int x = 0; i < 10; x++);\n}"
Line 298
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  298 always 298
  "[test.cpp:4]: (error) Uninitialized variable: i\n" always "[test.cpp:4]: (error) Uninitialized variable: i\n"
Line 300
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  300 always 300
  "static void foo()\n{\n    int i;\n    for (int x = 0; x < 10; i++);\n}" always "static void foo()\n{\n    int i;\n    for (int x = 0; x < 10; i++);\n}"
Line 305
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  305 always 305
  "[test.cpp:4]: (error) Uninitialized variable: i\n" always "[test.cpp:4]: (error) Uninitialized variable: i\n"
Line 307
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  307 always 307
  "static void foo(int x)\n{\n    int i;\n    if (x)\n        i = 0;\n    i++;\n}" always "static void foo(int x)\n{\n    int i;\n    if (x)\n        i = 0;\n    i++;\n}"
Line 314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  314 always 314
  "[test.cpp:6]: (error) Uninitialized variable: i\n" always "[test.cpp:6]: (error) Uninitialized variable: i\n"
Line 316
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  316 always 316
  "static void foo()\n{\n    int ar[10];\n    int i;\n    ar[i] = 0;\n}" always "static void foo()\n{\n    int ar[10];\n    int i;\n    ar[i] = 0;\n}"
Line 322
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  322 always 322
  "[test.cpp:5]: (error) Uninitialized variable: i\n" always "[test.cpp:5]: (error) Uninitialized variable: i\n"
Line 324
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  324 always 324
  "static void foo()\n{\n    int x, y;\n    x = (y = 10);\n    int z = y * 2;\n}" always "static void foo()\n{\n    int x, y;\n    x = (y = 10);\n    int z = y * 2;\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  330 always 330
  "" always ""
Line 332
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  332 always 332
  "static void foo() {\n    int x, y;\n    x = ((y) = 10);\n}" always "static void foo() {\n    int x, y;\n    x = ((y) = 10);\n}"
Line 336
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  336 always 336
  "" always ""
Line 339
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  339 always 339
  "void f() {\n    int a;\n    int b = 1;\n    (b += a) = 1;\n}" always "void f() {\n    int a;\n    int b = 1;\n    (b += a) = 1;\n}"
Line 344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  344 always 344
  "[test.cpp:4]: (error) Uninitialized variable: a\n" always "[test.cpp:4]: (error) Uninitialized variable: a\n"
Line 346
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  346 always 346
  "int f() {\n    int a,b,c;\n    a = b = c;\n}" always "int f() {\n    int a,b,c;\n    a = b = c;\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 350
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  350 always 350
  "[test.cpp:3]: (error) Uninitialized variable: c\n" always "[test.cpp:3]: (error) Uninitialized variable: c\n"
Line 352
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  352 always 352
  "static void foo()\n{\n    Foo p;\n    p.abcd();\n}" always "static void foo()\n{\n    Foo p;\n    p.abcd();\n}"
Line 357
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  357 always 357
  "" always ""
Line 359
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  359 always 359
  "static void foo()\n{\n    Foo p;\n    int x = p.abcd();\n}" always "static void foo()\n{\n    Foo p;\n    int x = p.abcd();\n}"
Line 364
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  364 always 364
  "" always ""
Line 369
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  369 always 369
  "void a()\n{\n    A ret;\n    return ret;\n}" always "void a()\n{\n    A ret;\n    return ret;\n}"
Line 374
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  374 always 374
  "" always ""
Line 376
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  376 always 376
  "void a()\n{\n    A ret;\n    return ret;\n}\n" always "void a()\n{\n    A ret;\n    return ret;\n}\n"
  "test.c" always "test.c"
Line 382
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  382 always 382
  "[test.c:4]: (error) Uninitialized variable: ret\n" always "[test.c:4]: (error) Uninitialized variable: ret\n"
Line 387
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  387 always 387
  "void f(float x) {\n  union lf { long l; float f; } u_lf;\n  float hx = (u_lf.f = (x), u_lf.l);\n}" always "void f(float x) {\n  union lf { long l; float f; } u_lf;\n  float hx = (u_lf.f = (x), u_lf.l);\n}"
  "test.c" always "test.c"
  false always 0
Line 392
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  392 always 392
  "" always ""
Line 394
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  394 always 394
  "void a()\n{\n    int x[10];\n    int *y = x;\n}" always "void a()\n{\n    int x[10];\n    int *y = x;\n}"
Line 399
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  399 always 399
  "" always ""
Line 401
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  401 always 401
  "void a()\n{\n    int x;\n    int *y = &x;\n    *y = 0;\n    x++;\n}" always "void a()\n{\n    int x;\n    int *y = &x;\n    *y = 0;\n    x++;\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 408
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  408 always 408
  "" always ""
Line 410
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  410 always 410
  "void a()\n{\n    char x[10], y[10];\n    char *z = x;\n    memset(z, 0, sizeof(x));\n    memcpy(y, x, sizeof(x));\n}" always "void a()\n{\n    char x[10], y[10];\n    char *z = x;\n    memset(z, 0, sizeof(x));\n    memcpy(y, x, sizeof(x));\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 417
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  417 always 417
  "" always ""
Line 421
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  421 always 421
  "int a() {\n    int ret;\n    std::cin >> ret;\n    ret++;\n}" always "int a() {\n    int ret;\n    std::cin >> ret;\n    ret++;\n}"
Line 426
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  426 always 426
  "" always ""
Line 428
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  428 always 428
  "void f(int b) {\n    int a;\n    std::cin >> b >> a;\n    return a;}" always "void f(int b) {\n    int a;\n    std::cin >> b >> a;\n    return a;}"
Line 433
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  433 always 433
  "" always ""
Line 435
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  435 always 435
  "void f() {\n    int ret[2];\n    std::cin >> ret[0];\n}" always "void f() {\n    int ret[2];\n    std::cin >> ret[0];\n}"
Line 439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  439 always 439
  "" always ""
Line 441
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  441 always 441
  "void f(int i) {\n    int a;\n    i >> a;\n}" always "void f(int i) {\n    int a;\n    i >> a;\n}"
Line 445
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  445 always 445
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 447
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  447 always 447
  "int a() {\n    int ret;\n    int a = value >> ret;\n}\n" always "int a() {\n    int ret;\n    int a = value >> ret;\n}\n"
  "test.c" always "test.c"
Line 452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  452 always 452
  "[test.c:3]: (error) Uninitialized variable: ret\n" always "[test.c:3]: (error) Uninitialized variable: ret\n"
Line 454
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  454 always 454
  "void foo() {\n    Node node;\n    int x;\n    node[\"abcd\"] >> x;\n}" always "void foo() {\n    Node node;\n    int x;\n    node[\"abcd\"] >> x;\n}"
Line 459
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  459 always 459
  "" always ""
Line 461
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  461 always 461
  "int a(FArchive &arc) {\n    int *p;\n    arc << p;\n    return *p;\n}" always "int a(FArchive &arc) {\n    int *p;\n    arc << p;\n    return *p;\n}"
Line 466
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  466 always 466
  "[test.cpp:3]: (error) Uninitialized variable: p\n" always "[test.cpp:3]: (error) Uninitialized variable: p\n"
Line 468
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  468 always 468
  "void a() {\n    int ret;\n    a = value << ret;\n}\n" always "void a() {\n    int ret;\n    a = value << ret;\n}\n"
  "test.c" always "test.c"
Line 473
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  473 always 473
  "[test.c:3]: (error) Uninitialized variable: ret\n" always "[test.c:3]: (error) Uninitialized variable: ret\n"
Line 476
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  476 always 476
  "int f() {\n    int a;\n    a << 1;\n    return a;\n}" always "int f() {\n    int a;\n    a << 1;\n    return a;\n}"
Line 481
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  481 always 481
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 484
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  484 always 484
  "void f() {\n    int a;\n    std::cout << a;\n}" always "void f() {\n    int a;\n    std::cout << a;\n}"
Line 488
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  488 always 488
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 490
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  490 always 490
  "void f(std::ostringstream& os) {\n    int a;\n    os << a;\n}" always "void f(std::ostringstream& os) {\n    int a;\n    os << a;\n}"
Line 494
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  494 always 494
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 496
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  496 always 496
  "void f() {\n    int a;\n    std::cout << 1 << a;\n}" always "void f() {\n    int a;\n    std::cout << 1 << a;\n}"
Line 500
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  500 always 500
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 502
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  502 always 502
  "void f(std::ostringstream& os) {\n    int a;\n    os << 1 << a;\n}" always "void f(std::ostringstream& os) {\n    int a;\n    os << 1 << a;\n}"
Line 506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  506 always 506
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 510
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  510 always 510
  "void f() {\n  char *p = new char[10];\n  std::cout << (void *)p << 1;\n}" always "void f() {\n  char *p = new char[10];\n  std::cout << (void *)p << 1;\n}"
Line 514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  514 always 514
  "" always ""
Line 516
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  516 always 516
  "void f() {\n  char p[10];\n  std::cout << (void *)p << 1;\n}" always "void f() {\n  char p[10];\n  std::cout << (void *)p << 1;\n}"
Line 520
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  520 always 520
  "" always ""
Line 522
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  522 always 522
  "void f() {\n  char *p = new char[10];\n  std::cout << p << 1;\n}" always "void f() {\n  char *p = new char[10];\n  std::cout << p << 1;\n}"
Line 526
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  526 always 526
  "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n" always "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n"
Line 528
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  528 always 528
  "void f() {\n  int *p = new int[10];\n  std::cout << p << 1;\n}" always "void f() {\n  int *p = new int[10];\n  std::cout << p << 1;\n}"
Line 532
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  532 always 532
  "" always ""
Line 534
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  534 always 534
  "void f() {\n  int i[10];\n  std::cout << i;\n  char c[10];\n  std::cout << c;\n  wchar_t w[10];\n  std::cout << w;\n}" always "void f() {\n  int i[10];\n  std::cout << i;\n  char c[10];\n  std::cout << c;\n  wchar_t w[10];\n  std::cout << w;\n}"
Line 542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  542 always 542
  "[test.cpp:5]: (error) Uninitialized variable: c\n[test.cpp:7]: (error) Uninitialized variable: w\n" always "[test.cpp:5]: (error) Uninitialized variable: c\n[test.cpp:7]: (error) Uninitialized variable: w\n"
Line 546
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  546 always 546
  "void f() {\n  char p[10];\n  std::cout << p << 1;\n}" always "void f() {\n  char p[10];\n  std::cout << p << 1;\n}"
Line 550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  550 always 550
  "[test.cpp:3]: (error) Uninitialized variable: p\n" always "[test.cpp:3]: (error) Uninitialized variable: p\n"
Line 552
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  552 always 552
  "void f() {\n  char p[10];\n  std::cout << *p << 1;\n}" always "void f() {\n  char p[10];\n  std::cout << *p << 1;\n}"
Line 556
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  556 always 556
  "[test.cpp:3]: (error) Uninitialized variable: p\n" always "[test.cpp:3]: (error) Uninitialized variable: p\n"
Line 561
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  561 always 561
  "void f() {\n  int x;\n  a & x;\n}" always "void f() {\n  int x;\n  a & x;\n}"
Line 565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  565 always 565
  "" always ""
Line 567
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  567 always 567
  "void f(int a) {\n  int x;\n  a & x;\n}" always "void f(int a) {\n  int x;\n  a & x;\n}"
Line 571
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  571 always 571
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 573
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  573 always 573
  "void f() {\n  int a,b,c;\n  ar & a & b & c;\n}" always "void f() {\n  int a,b,c;\n  ar & a & b & c;\n}"
Line 577
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  577 always 577
  "" always ""
Line 579
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  579 always 579
  "void a() {\n    int x;\n    asm();\n    x++;\n}" always "void a() {\n    int x;\n    asm();\n    x++;\n}"
Line 584
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  584 always 584
  "" always ""
Line 586
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  586 always 586
  "void a()\n{\n    int x[10];\n    struct xyz xyz1 = { .x = x };\n}" always "void a()\n{\n    int x[10];\n    struct xyz xyz1 = { .x = x };\n}"
Line 591
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  591 always 591
  "" always ""
Line 593
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  593 always 593
  "void a()\n{\n    struct S *s;\n    s->x = 0;\n}" always "void a()\n{\n    struct S *s;\n    s->x = 0;\n}"
Line 598
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  598 always 598
  "[test.cpp:4]: (error) Uninitialized variable: s\n" always "[test.cpp:4]: (error) Uninitialized variable: s\n"
Line 600
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  600 always 600
  "void foo()\n{\n   char *buf = malloc(100);\n   struct ABC *abc = buf;\n}" always "void foo()\n{\n   char *buf = malloc(100);\n   struct ABC *abc = buf;\n}"
Line 605
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  605 always 605
  "" always ""
Line 607
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  607 always 607
  "class Fred {\npublic:\n    FILE *f;\n    ~Fred();\n}\nFred::~Fred()\n{\n    fclose(f);\n}" always "class Fred {\npublic:\n    FILE *f;\n    ~Fred();\n}\nFred::~Fred()\n{\n    fclose(f);\n}"
Line 616
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  616 always 616
  "" always ""
Line 618
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  618 always 618
  "void f()\n{\n    int c;\n    ab(sizeof(xyz), &c);\n    if (c);\n}" always "void f()\n{\n    int c;\n    ab(sizeof(xyz), &c);\n    if (c);\n}"
Line 624
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  624 always 624
  "" always ""
Line 626
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  626 always 626
  "void f()\n{\n    int c;\n    a = (f2(&c));\n    c++;\n}" always "void f()\n{\n    int c;\n    a = (f2(&c));\n    c++;\n}"
Line 632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  632 always 632
  "" always ""
Line 634
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  634 always 634
  "void f(int a)\n{\n    if (a) {\n        char *p;\n        *p = 0;\n    }\n}" always "void f(int a)\n{\n    if (a) {\n        char *p;\n        *p = 0;\n    }\n}"
Line 641
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  641 always 641
  "[test.cpp:5]: (error) Uninitialized variable: p\n" always "[test.cpp:5]: (error) Uninitialized variable: p\n"
Line 644
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  644 always 644
  "void f()\n{\n    int c;\n    c += 2;\n}" always "void f()\n{\n    int c;\n    c += 2;\n}"
Line 649
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  649 always 649
  "[test.cpp:4]: (error) Uninitialized variable: c\n" always "[test.cpp:4]: (error) Uninitialized variable: c\n"
Line 651
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  651 always 651
  "void f()\n{\n    int a[10];\n    a[0] = 10 - a[1];\n}" always "void f()\n{\n    int a[10];\n    a[0] = 10 - a[1];\n}"
Line 656
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  656 always 656
  "[test.cpp:4]: (error) Uninitialized variable: a[1]\n" always "[test.cpp:4]: (error) Uninitialized variable: a[1]\n"
Line 659
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  659 always 659
  "void foo(int x)\n{\n    long b;\n    if (g()) {\n        b =2;\n        goto found;\n    }\n\n    return;\n\nfound:\n    int a = b;\n}" always "void foo(int x)\n{\n    long b;\n    if (g()) {\n        b =2;\n        goto found;\n    }\n\n    return;\n\nfound:\n    int a = b;\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 672
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  672 always 672
  "" always ""
Line 674
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  674 always 674
  "int foo()\n{\n    jmp_buf env;\n    int a;\n    int val = setjmp(env);\n    if(val)\n        return a;\n    a = 1;\n    longjmp(env, 1);\n}" always "int foo()\n{\n    jmp_buf env;\n    int a;\n    int val = setjmp(env);\n    if(val)\n        return a;\n    a = 1;\n    longjmp(env, 1);\n}"
Line 684
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  684 always 684
  "" always ""
Line 687
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  687 always 687
  "int foo()\n{\n  int retval;\n  if (condition) {\n    for12(1,2) { }\n    retval = 1;\n  }\n  else\n    retval = 2;\n  return retval;\n}" always "int foo()\n{\n  int retval;\n  if (condition) {\n    for12(1,2) { }\n    retval = 1;\n  }\n  else\n    retval = 2;\n  return retval;\n}"
Line 698
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  698 always 698
  "" always ""
Line 700
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  700 always 700
  "int foo()\n{\n    int i;\n    goto exit;\n    i++;\nexit:\n}" always "int foo()\n{\n    int i;\n    goto exit;\n    i++;\nexit:\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 707
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  707 always 707
  "" always ""
Line 709
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  709 always 709
  "int foo() {\n    int x,y=0;\nagain:\n    if (y) return x;\n    x = a;\n    y = 1;\n    goto again;\n}" always "int foo() {\n    int x,y=0;\nagain:\n    if (y) return x;\n    x = a;\n    y = 1;\n    goto again;\n}"
  "test.c" always "test.c"
  false always 0
Line 717
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  717 always 717
  "" always ""
Line 720
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  720 always 720
  "MachineLoopRange *MachineLoopRanges::getLoopRange(const MachineLoop *Loop) {\n  MachineLoopRange *&Range = Cache[Loop];\n  if (!Range)\n    Range = new MachineLoopRange(Loop, Allocator, *Indexes);\n  return Range;\n}" always "MachineLoopRange *MachineLoopRanges::getLoopRange(const MachineLoop *Loop) {\n  MachineLoopRange *&Range = Cache[Loop];\n  if (!Range)\n    Range = new MachineLoopRange(Loop, Allocator, *Indexes);\n  return Range;\n}"
Line 726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  726 always 726
  "" always ""
Line 729
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  729 always 729
  "int f(int x)  {\n    int iter;\n    {\n        union\n        {\n            int asInt;\n            double asDouble;\n        };\n\n        iter = x;\n    }\n    return 1 + iter;\n}" always "int f(int x)  {\n    int iter;\n    {\n        union\n        {\n            int asInt;\n            double asDouble;\n        };\n\n        iter = x;\n    }\n    return 1 + iter;\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 742
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  742 always 742
  "" always ""
Line 745
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  745 always 745
  "int f() {\n    int i = 0;\n    int j{ i };\n    return j;\n}" always "int f() {\n    int i = 0;\n    int j{ i };\n    return j;\n}"
Line 750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  750 always 750
  "" always ""
Line 753
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  753 always 753
  "float foo() {\n  float source[2] = {3.1, 3.1};\n  float (*sink)[2] = &source;\n  return (*sink)[0];\n}" always "float foo() {\n  float source[2] = {3.1, 3.1};\n  float (*sink)[2] = &source;\n  return (*sink)[0];\n}"
Line 758
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  758 always 758
  "" always ""
Line 761
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  761 always 761
  "void f(void)\n{\n    int x;\n    int z = (x) & ~__round_mask(1, 1);\n}" always "void f(void)\n{\n    int x;\n    int z = (x) & ~__round_mask(1, 1);\n}"
Line 766
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  766 always 766
  "[test.cpp:4]: (error) Uninitialized variable: x\n" always "[test.cpp:4]: (error) Uninitialized variable: x\n"
Line 768
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  768 always 768
  "void f(void)\n{\n    int x;\n    int z = (x) | ~__round_mask(1, 1);\n}" always "void f(void)\n{\n    int x;\n    int z = (x) | ~__round_mask(1, 1);\n}"
Line 773
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  773 always 773
  "[test.cpp:4]: (error) Uninitialized variable: x\n" always "[test.cpp:4]: (error) Uninitialized variable: x\n"
Line 775
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  775 always 775
  "int __round_mask(int, int);\nvoid f(void)\n{\n    int x;\n    int* z = &x;\n}" always "int __round_mask(int, int);\nvoid f(void)\n{\n    int x;\n    int* z = &x;\n}"
Line 781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  781 always 781
  "" always ""
Line 787
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  787 always 787
  "void f() {\n  int x;\n  a = x;\n  b = x;\n}" always "void f() {\n  int x;\n  a = x;\n  b = x;\n}"
Line 792
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  792 always 792
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 797
  38 always 38
  = always "void f() {\n    dfs a;\n    return a;\n}"
  "void f() {\n    dfs a;\n    return a;\n}" always "void f() {\n    dfs a;\n    return a;\n}"
Line 803
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  803 always 803
  code always "void f() {\n    dfs a;\n    return a;\n}"
  "test.cpp" always "test.cpp"
Line 804
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  804 always 804
  "" always ""
Line 807
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  807 always 807
  code always "void f() {\n    dfs a;\n    return a;\n}"
  "test.c" always "test.c"
Line 808
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  808 always 808
  "[test.c:3]: (error) Uninitialized variable: a\n" always "[test.c:3]: (error) Uninitialized variable: a\n"
Line 810
  70 always 70
  = always "struct AB { int a,b; };\nvoid f() {\n    struct AB ab;\n    return ab;\n}"
  "struct AB { int a,b; };\nvoid f() {\n    struct AB ab;\n    return ab;\n}" always "struct AB { int a,b; };\nvoid f() {\n    struct AB ab;\n    return ab;\n}"
Line 815
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  815 always 815
  code2 always "struct AB { int a,b; };\nvoid f() {\n    struct AB ab;\n    return ab;\n}"
  "test.cpp" always "test.cpp"
Line 816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  816 always 816
  "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n[test.cpp:4]: (error) Uninitialized struct member: ab.b\n" always "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n[test.cpp:4]: (error) Uninitialized struct member: ab.b\n"
Line 818
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  818 always 818
  code2 always "struct AB { int a,b; };\nvoid f() {\n    struct AB ab;\n    return ab;\n}"
  "test.c" always "test.c"
Line 819
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  819 always 819
  "[test.c:4]: (error) Uninitialized variable: ab\n" always "[test.c:4]: (error) Uninitialized variable: ab\n"
Line 822
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  822 always 822
  "void f() {\n    std::map<int,bool> x;\n    return x;\n}" always "void f() {\n    std::map<int,bool> x;\n    return x;\n}"
Line 826
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  826 always 826
  "" always ""
Line 829
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  829 always 829
  "void f() {\n    std::vector<int> *x = NULL;\n    return x;\n}" always "void f() {\n    std::vector<int> *x = NULL;\n    return x;\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  833 always 833
  "" always ""
Line 836
  68 always 68
  = always "<?xml version=\"1.0\"?>\n<def format=\"1\">  <podtype name=\"_tm\"/></def>"
  "<?xml version=\"1.0\"?>\n<def format=\"1\">  <podtype name=\"_tm\"/></def>" always "<?xml version=\"1.0\"?>\n<def format=\"1\">  <podtype name=\"_tm\"/></def>"
Line 840
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  840 always 840
  true always 1
  xmldata always "<?xml version=\"1.0\"?>\n<def format=\"1\">  <podtype name=\"_tm\"/></def>"
  sizeof always 68
  ( always 68
  xmldata always "<?xml version=\"1.0\"?>\n<def format=\"1\">  <podtype name=\"_tm\"/></def>"
Line 841
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  841 always 841
  "void f() {\n  Fred _tm;\n  _tm.dostuff();\n}" always "void f() {\n  Fred _tm;\n  _tm.dostuff();\n}"
Line 845
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  845 always 845
  "" always ""
Line 848
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  848 always 848
  "A *f() {\n    A a,b;\n    b[0] = 0;    return a;\n}" always "A *f() {\n    A a,b;\n    b[0] = 0;    return a;\n}"
  "test.c" always "test.c"
  false always 0
Line 853
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  853 always 853
  "" always ""
Line 858
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  858 always 858
  "namespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    typedef unsigned long _Bit_type;\n    struct _Bit_reference\n    {\n        _Bit_type * _M_p;\n        _Bit_type _M_mask;\n        _Bit_reference(_Bit_type * __x, _Bit_type __y)\n         : _M_p(__x), _M_mask(__y) { }\n    };\n}" always "namespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    typedef unsigned long _Bit_type;\n    struct _Bit_reference\n    {\n        _Bit_type * _M_p;\n        _Bit_type _M_mask;\n        _Bit_reference(_Bit_type * __x, _Bit_type __y)\n         : _M_p(__x), _M_mask(__y) { }\n    };\n}"
Line 870
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  870 always 870
  "" always ""
Line 876
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  876 always 876
  "void foo() {\n    int b;\n    c = a | b;\n}" always "void foo() {\n    int b;\n    c = a | b;\n}"
Line 880
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  880 always 880
  "[test.cpp:3]: (error) Uninitialized variable: b\n" always "[test.cpp:3]: (error) Uninitialized variable: b\n"
Line 882
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  882 always 882
  "void foo() {\n    int b;\n    c = b | a;\n}" always "void foo() {\n    int b;\n    c = b | a;\n}"
Line 886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  886 always 886
  "[test.cpp:3]: (error) Uninitialized variable: b\n" always "[test.cpp:3]: (error) Uninitialized variable: b\n"
Line 892
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  892 always 892
  "static void foo(int x)\n{\n    Foo *p;\n    if (x)\n        p = new Foo;\n    p->abcd();\n}" always "static void foo(int x)\n{\n    Foo *p;\n    if (x)\n        p = new Foo;\n    p->abcd();\n}"
Line 899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  899 always 899
  "[test.cpp:6]: (error) Uninitialized variable: p\n" always "[test.cpp:6]: (error) Uninitialized variable: p\n"
Line 901
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  901 always 901
  "static void foo(int x)\n{\n    int a;\n    if (x==1);\n    if (x==2);\n    x = a;\n}" always "static void foo(int x)\n{\n    int a;\n    if (x==1);\n    if (x==2);\n    x = a;\n}"
Line 908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  908 always 908
  "[test.cpp:6]: (error) Uninitialized variable: a\n" always "[test.cpp:6]: (error) Uninitialized variable: a\n"
Line 910
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  910 always 910
  "int foo() {\n    int i;\n    if (1)\n        i = 11;\n    return i;\n}" always "int foo() {\n    int i;\n    if (1)\n        i = 11;\n    return i;\n}"
Line 916
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  916 always 916
  "" always ""
Line 918
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  918 always 918
  "int bar(int x) {\n    int n;\n    if ( x == 23)\n      n = 1;\n    else if ( x == 11 )\n      n = 2;\n    return n;\n}" always "int bar(int x) {\n    int n;\n    if ( x == 23)\n      n = 1;\n    else if ( x == 11 )\n      n = 2;\n    return n;\n}"
Line 926
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  926 always 926
  "error" always "error"
  "" always ""
Line 928
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  928 always 928
  "int foo()\n{\n    int i;\n    if (x)\n        i = 22;\n    else\n        i = 33;\n    return i;\n}" always "int foo()\n{\n    int i;\n    if (x)\n        i = 22;\n    else\n        i = 33;\n    return i;\n}"
Line 937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  937 always 937
  "" always ""
Line 939
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  939 always 939
  "int foo(int x)\n{\n    int i;\n    if (x < 2)\n        i = 22;\n    else if (x >= 2)\n        i = 33;\n    return i;\n}" always "int foo(int x)\n{\n    int i;\n    if (x < 2)\n        i = 22;\n    else if (x >= 2)\n        i = 33;\n    return i;\n}"
Line 948
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  948 always 948
  "" always ""
Line 950
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  950 always 950
  "int foo()\n{\n    int i;\n    if (x)\n        i = 22;\n    else\n    {\n        char *y = {0};\n        i = 33;\n    }\n    return i;\n}" always "int foo()\n{\n    int i;\n    if (x)\n        i = 22;\n    else\n    {\n        char *y = {0};\n        i = 33;\n    }\n    return i;\n}"
Line 962
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  962 always 962
  "" always ""
Line 964
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  964 always 964
  "int foo()\n{\n    int i;\n    if (x)\n    {\n        struct abc abc1 = (struct abc) { .a=0, .b=0, .c=0 };\n        i = 22;\n    }\n    else\n    {\n        i = 33;\n    }\n    return i;\n}" always "int foo()\n{\n    int i;\n    if (x)\n    {\n        struct abc abc1 = (struct abc) { .a=0, .b=0, .c=0 };\n        i = 22;\n    }\n    else\n    {\n        i = 33;\n    }\n    return i;\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  978 always 978
  "" always ""
Line 980
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  980 always 980
  "static void foo(int x)\n{\n    Foo *p;\n    if (x)\n        p = new Foo;\n    if (x)\n        p->abcd();\n}" always "static void foo(int x)\n{\n    Foo *p;\n    if (x)\n        p = new Foo;\n    if (x)\n        p->abcd();\n}"
Line 988
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  988 always 988
  "" always ""
Line 990
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  990 always 990
  "void foo(int a)\n{\n    int n;\n    int condition;\n    if(a == 1) {\n        n=0;\n        condition=0;\n    }\n    else {\n        n=1;\n    }\n\n    if( n == 0) {\n        a=condition;\n    }\n}" always "void foo(int a)\n{\n    int n;\n    int condition;\n    if(a == 1) {\n        n=0;\n        condition=0;\n    }\n    else {\n        n=1;\n    }\n\n    if( n == 0) {\n        a=condition;\n    }\n}"
Line 1006
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1006 always 1006
  "" always ""
Line 1008
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1008 always 1008
  "void f()\n{\n    C *c;\n    if (fun(&c));\n    c->Release();\n}" always "void f()\n{\n    C *c;\n    if (fun(&c));\n    c->Release();\n}"
Line 1014
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1014 always 1014
  "" always ""
Line 1016
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1016 always 1016
  "void f() {\n    C c;\n    if (fun(&c.d));\n    return c;\n}" always "void f() {\n    C c;\n    if (fun(&c.d));\n    return c;\n}"
Line 1021
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1021 always 1021
  "" always ""
Line 1023
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1023 always 1023
  "void f() {\n   char a[10];\n   if (a[0] = x){}\n}" always "void f() {\n   char a[10];\n   if (a[0] = x){}\n}"
Line 1027
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1027 always 1027
  "" always ""
Line 1029
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1029 always 1029
  "int foo(int x)\n{\n    int i;\n    if (one())\n        i = 1;\n    else\n        return 3;\n    return i;\n}" always "int foo(int x)\n{\n    int i;\n    if (one())\n        i = 1;\n    else\n        return 3;\n    return i;\n}"
Line 1038
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1038 always 1038
  "" always ""
Line 1041
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1041 always 1041
  "void foo(int x) {\n    int a;\n    if (x)\n        a = 1;\n    if (!x)\n        return;\n    b = (c - a);\n}" always "void foo(int x) {\n    int a;\n    if (x)\n        a = 1;\n    if (!x)\n        return;\n    b = (c - a);\n}"
Line 1049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1049 always 1049
  "" always ""
Line 1051
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1051 always 1051
  "int foo()\n{\n    int ret;\n    if (one())\n        ret = 1;\n    else\n        throw 3;\n    return ret;\n}" always "int foo()\n{\n    int ret;\n    if (one())\n        ret = 1;\n    else\n        throw 3;\n    return ret;\n}"
Line 1060
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1060 always 1060
  "" always ""
Line 1062
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1062 always 1062
  "int f(int a)\n{\n    int ret;\n    if (a == 1)\n        ret = 1;\n    else\n        XYZ ret = 2;\n    return ret;\n}" always "int f(int a)\n{\n    int ret;\n    if (a == 1)\n        ret = 1;\n    else\n        XYZ ret = 2;\n    return ret;\n}"
Line 1071
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1071 always 1071
  "[test.cpp:8]: (error) Uninitialized variable: ret\n" always "[test.cpp:8]: (error) Uninitialized variable: ret\n"
Line 1073
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1073 always 1073
  "int f(int a, int b)\n{\n   int x;\n   if (a)\n      x = a;\n   else {\n      do { } while (f2());\n      x = b;\n   }\n   return x;\n}" always "int f(int a, int b)\n{\n   int x;\n   if (a)\n      x = a;\n   else {\n      do { } while (f2());\n      x = b;\n   }\n   return x;\n}"
Line 1084
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1084 always 1084
  "" always ""
Line 1086
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1086 always 1086
  "void foo(long verbose,bool bFlag)\n{\n  double t;\n  if (bFlag)\n  {\n    if (verbose)\n      t = 1;\n    if (verbose)\n      std::cout << (12-t);\n  }\n}" always "void foo(long verbose,bool bFlag)\n{\n  double t;\n  if (bFlag)\n  {\n    if (verbose)\n      t = 1;\n    if (verbose)\n      std::cout << (12-t);\n  }\n}"
Line 1097
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1097 always 1097
  "" always ""
Line 1099
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1099 always 1099
  "int test(int cond1, int cond2) {\n  int foo;\n  if (cond1 || cond2) {\n     if (cond2)\n        foo = 0;\n  }\n  if (cond2) {\n    int t = foo*foo;\n  }\n}" always "int test(int cond1, int cond2) {\n  int foo;\n  if (cond1 || cond2) {\n     if (cond2)\n        foo = 0;\n  }\n  if (cond2) {\n    int t = foo*foo;\n  }\n}"
Line 1109
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1109 always 1109
  "" always ""
Line 1111
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1111 always 1111
  "void foo(int *pix) {\n    int dest_x;\n    {\n        if (pix)\n            dest_x = 123;\n    }\n    if (pix)\n        a = dest_x;\n}" always "void foo(int *pix) {\n    int dest_x;\n    {\n        if (pix)\n            dest_x = 123;\n    }\n    if (pix)\n        a = dest_x;\n}"
Line 1120
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1120 always 1120
  "" always ""
Line 1123
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1123 always 1123
  "static void foo(int v) {\n    int x;\n    x = v <= 0 ? -1 : x;\n}" always "static void foo(int v) {\n    int x;\n    x = v <= 0 ? -1 : x;\n}"
Line 1127
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1127 always 1127
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 1129
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1129 always 1129
  "void foo()\n{\n    const char *msgid1, *msgid2;\n    int ret = bar(&msgid1);\n    if (ret > 0) {\n        ret = bar(&msgid2);\n    }\n    ret = ret <= 0 ? -1 :\n          strcmp(msgid1, msgid2) == 0;\n}" always "void foo()\n{\n    const char *msgid1, *msgid2;\n    int ret = bar(&msgid1);\n    if (ret > 0) {\n        ret = bar(&msgid2);\n    }\n    ret = ret <= 0 ? -1 :\n          strcmp(msgid1, msgid2) == 0;\n}"
Line 1139
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1139 always 1139
  "" always ""
Line 1141
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1141 always 1141
  "void foo(int a, int b)\n{\n    int x; x = (a<b) ? 1 : 0;\n    int y = y;\n}" always "void foo(int a, int b)\n{\n    int x; x = (a<b) ? 1 : 0;\n    int y = y;\n}"
Line 1146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1146 always 1146
  "[test.cpp:4]: (error) Uninitialized variable: y\n" always "[test.cpp:4]: (error) Uninitialized variable: y\n"
Line 1148
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1148 always 1148
  "void foo() {\n  int x = (x = bar()) ? x : 0;\n}" always "void foo() {\n  int x = (x = bar()) ? x : 0;\n}"
Line 1151
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1151 always 1151
  "" always ""
Line 1154
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1154 always 1154
  "int foo()\n{\n  int retval;\n  if (condition) {\n    { }\n    retval = 1; }\n  else\n    retval = 2;\n  return retval;\n}" always "int foo()\n{\n  int retval;\n  if (condition) {\n    { }\n    retval = 1; }\n  else\n    retval = 2;\n  return retval;\n}"
Line 1164
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1164 always 1164
  "" always ""
Line 1166
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1166 always 1166
  "void foo()\n{\n  {\n    for (int i = 0; i < 10; ++i)\n    { }\n  }\n\n  { }\n}" always "void foo()\n{\n  {\n    for (int i = 0; i < 10; ++i)\n    { }\n  }\n\n  { }\n}"
Line 1175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1175 always 1175
  "" always ""
Line 1178
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1178 always 1178
  "void f() {\n    int x;\n    if (abc) { x = 123; }\n    else { a = ({b=c;}); x = 456; }\n    ++x;\n}" always "void f() {\n    int x;\n    if (abc) { x = 123; }\n    else { a = ({b=c;}); x = 456; }\n    ++x;\n}"
Line 1184
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1184 always 1184
  "" always ""
Line 1187
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1187 always 1187
  "void f()\n{\n    char *c1,*c2;\n    if(strcoll(c1,c2))\n    {\n    }\n}" always "void f()\n{\n    char *c1,*c2;\n    if(strcoll(c1,c2))\n    {\n    }\n}"
Line 1194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1194 always 1194
  "[test.cpp:4]: (error) Uninitialized variable: c1\n[test.cpp:4]: (error) Uninitialized variable: c2\n" always "[test.cpp:4]: (error) Uninitialized variable: c1\n[test.cpp:4]: (error) Uninitialized variable: c2\n"
Line 1197
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1197 always 1197
  "void f(char *c1, char *c2)\n{\n    if(strcoll(c1,c2))\n    {\n    }\n}" always "void f(char *c1, char *c2)\n{\n    if(strcoll(c1,c2))\n    {\n    }\n}"
Line 1203
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1203 always 1203
  "" always ""
Line 1205
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1205 always 1205
  "void f()\n{\n    char *c1;\n    c1=strcpy(c1,\"test\");\n}" always "void f()\n{\n    char *c1;\n    c1=strcpy(c1,\"test\");\n}"
Line 1210
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1210 always 1210
  "[test.cpp:4]: (error) Uninitialized variable: c1\n" always "[test.cpp:4]: (error) Uninitialized variable: c1\n"
Line 1212
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1212 always 1212
  "void f(char *c1)\n{\n    c1=strcpy(c1,\"test\");\n}" always "void f(char *c1)\n{\n    c1=strcpy(c1,\"test\");\n}"
Line 1216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1216 always 1216
  "" always ""
Line 1218
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1218 always 1218
  "void f() {\n  X var;\n  memset(var, 0, sizeof(var));\n}" always "void f() {\n  X var;\n  memset(var, 0, sizeof(var));\n}"
  "test.c" always "test.c"
Line 1222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1222 always 1222
  "" always ""
Line 1224
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1224 always 1224
  "int f() {\n    bool b = e();\n    int v;\n    if (b)\n        doStuff(&v);\n    int v2 = (b) ? v / 5 : 0;\n    int v3;\n    if (b)\n        v3 = 50;\n    int v4 = (b) ? v3 + 5 : 0;\n    int v5;\n    int v6 = v5;\n    doStuff(&v5);\n    int v7 = v5;\n    return v2 + v4 + v6 + v7;\n}\n" always "int f() {\n    bool b = e();\n    int v;\n    if (b)\n        doStuff(&v);\n    int v2 = (b) ? v / 5 : 0;\n    int v3;\n    if (b)\n        v3 = 50;\n    int v4 = (b) ? v3 + 5 : 0;\n    int v5;\n    int v6 = v5;\n    doStuff(&v5);\n    int v7 = v5;\n    return v2 + v4 + v6 + v7;\n}\n"
Line 1240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1240 always 1240
  "[test.cpp:12]: (error) Uninitialized variable: v5\n" always "[test.cpp:12]: (error) Uninitialized variable: v5\n"
Line 1248
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1248 always 1248
  "void f()\n{\n    for (int i = 0; i < 4; ++i) {\n        int a;\n        b(4*a);\n    }}" always "void f()\n{\n    for (int i = 0; i < 4; ++i) {\n        int a;\n        b(4*a);\n    }}"
Line 1255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1255 always 1255
  "[test.cpp:5]: (error) Uninitialized variable: a\n" always "[test.cpp:5]: (error) Uninitialized variable: a\n"
Line 1257
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1257 always 1257
  "void f() {\n    int k;\n    for (int i = 0; i < 4; ++i) {\n        k = k + 2;\n    }\n}" always "void f() {\n    int k;\n    for (int i = 0; i < 4; ++i) {\n        k = k + 2;\n    }\n}"
Line 1263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1263 always 1263
  "[test.cpp:4]: (error) Uninitialized variable: k\n" always "[test.cpp:4]: (error) Uninitialized variable: k\n"
Line 1265
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1265 always 1265
  "void f() {\n    gchar sel[10];\n    for (int i = 0; i < 4; ++i) {\n        int sz = sizeof(sel);\n    }\n}" always "void f() {\n    gchar sel[10];\n    for (int i = 0; i < 4; ++i) {\n        int sz = sizeof(sel);\n    }\n}"
Line 1271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1271 always 1271
  "" always ""
Line 1273
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1273 always 1273
  "enum ABCD { A, B, C, D };\n\nstatic void f(char *str ) {\n    enum ABCD i;\n    for (i = 0; i < D; i++) {\n        str[i] = 0;\n    }\n}" always "enum ABCD { A, B, C, D };\n\nstatic void f(char *str ) {\n    enum ABCD i;\n    for (i = 0; i < D; i++) {\n        str[i] = 0;\n    }\n}"
Line 1281
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1281 always 1281
  "" always ""
Line 1283
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1283 always 1283
  "void x() {\n    do  {\n        Token * tok;\n        for (tok = a; tok; tok = tok->next())\n        {\n        }\n    } while (tok2);\n}" always "void x() {\n    do  {\n        Token * tok;\n        for (tok = a; tok; tok = tok->next())\n        {\n        }\n    } while (tok2);\n}"
Line 1291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1291 always 1291
  "" always ""
Line 1293
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1293 always 1293
  "void foo(void) {\n    int a = 0;\n    int x;\n\n    for (;;) {\n        if (!a || 12 < x) {\n            a = 1;\n            x = 2;\n        }\n    }\n}" always "void foo(void) {\n    int a = 0;\n    int x;\n\n    for (;;) {\n        if (!a || 12 < x) {\n            a = 1;\n            x = 2;\n        }\n    }\n}"
Line 1304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1304 always 1304
  "" always ""
Line 1306
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1306 always 1306
  "void foo(void) {\n    int a = 0;\n    int x;\n\n    for (;;) {\n        if (!a || 12 < x) {\n            a = 1;\n        }\n    }\n}" always "void foo(void) {\n    int a = 0;\n    int x;\n\n    for (;;) {\n        if (!a || 12 < x) {\n            a = 1;\n        }\n    }\n}"
Line 1316
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1316 always 1316
  "[test.cpp:6]: (error) Uninitialized variable: x\n" always "[test.cpp:6]: (error) Uninitialized variable: x\n"
Line 1318
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1318 always 1318
  "void foo(int n) {\n  int one[10];\n  for (int rank = 0; rank < n; ++rank) {\n    for (int i=0;i<rank;i++)\n      f = one[i];\n    one[rank] = -1;\n  }\n}" always "void foo(int n) {\n  int one[10];\n  for (int rank = 0; rank < n; ++rank) {\n    for (int i=0;i<rank;i++)\n      f = one[i];\n    one[rank] = -1;\n  }\n}"
Line 1326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1326 always 1326
  "" always ""
Line 1329
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1329 always 1329
  "void f() {\n    container c;\n    for (iterator it : c) {\n    }\n}" always "void f() {\n    container c;\n    for (iterator it : c) {\n    }\n}"
Line 1334
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1334 always 1334
  "" always ""
Line 1337
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1337 always 1337
  "void f(int x) {\n    const PoolItem* pItem;\n    while (x > 0) {\n        if (GetItem(&pItem) && (*pItem != rPool))\n        { }\n        x--;\n    }\n}" always "void f(int x) {\n    const PoolItem* pItem;\n    while (x > 0) {\n        if (GetItem(&pItem) && (*pItem != rPool))\n        { }\n        x--;\n    }\n}"
Line 1345
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1345 always 1345
  "" always ""
Line 1347
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1347 always 1347
  "void f(int x, const PoolItem& rPool) {\n    const PoolItem* pItem;\n    while (x > 0) {\n        if (*pItem != rPool)\n        { }\n        x--;\n    }\n}" always "void f(int x, const PoolItem& rPool) {\n    const PoolItem* pItem;\n    while (x > 0) {\n        if (*pItem != rPool)\n        { }\n        x--;\n    }\n}"
Line 1355
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1355 always 1355
  "[test.cpp:4]: (error) Uninitialized variable: pItem\n" always "[test.cpp:4]: (error) Uninitialized variable: pItem\n"
Line 1358
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1358 always 1358
  "int foo(char *a) {\n    int x;\n\n    for (int i = 0; i < 10; ++i) {\n        if (a[i] == 'x') {\n            x = i;\n            break;\n        }\n    }\n\n    return x;\n}" always "int foo(char *a) {\n    int x;\n\n    for (int i = 0; i < 10; ++i) {\n        if (a[i] == 'x') {\n            x = i;\n            break;\n        }\n    }\n\n    return x;\n}"
Line 1370
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1370 always 1370
  "[test.cpp:11]: (error) Uninitialized variable: x\n" always "[test.cpp:11]: (error) Uninitialized variable: x\n"
  "" always ""
Line 1373
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1373 always 1373
  "void foo() {\n    while (true) {\n        int x;\n        if (y) x = 0;\n        else break;\n        return x;\n    }\n}" always "void foo() {\n    while (true) {\n        int x;\n        if (y) x = 0;\n        else break;\n        return x;\n    }\n}"
Line 1381
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1381 always 1381
  "" always ""
Line 1384
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1384 always 1384
  "int foo(char* in, bool b) {\n    char* c;\n    if (b) for (c = in; *c == 0; ++c) {}\n    else c = in + strlen(in) - 1;\n    *c = 0;\n}" always "int foo(char* in, bool b) {\n    char* c;\n    if (b) for (c = in; *c == 0; ++c) {}\n    else c = in + strlen(in) - 1;\n    *c = 0;\n}"
Line 1390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1390 always 1390
  "" always ""
Line 1394
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1394 always 1394
  "void foo() {\n    int learn;\n    for (int index = 0; index < 10; index++) {\n        if (!(learn & PORT_LEARN_DISABLE))\n            learn = 123;\n    }\n}" always "void foo() {\n    int learn;\n    for (int index = 0; index < 10; index++) {\n        if (!(learn & PORT_LEARN_DISABLE))\n            learn = 123;\n    }\n}"
Line 1401
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1401 always 1401
  "[test.cpp:4]: (error) Uninitialized variable: learn\n" always "[test.cpp:4]: (error) Uninitialized variable: learn\n"
Line 1404
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1404 always 1404
  "void foo() {\n  Entry *entry, *nextEntry;\n  for(int i = 0; i < 10; i++) {\n    for(entry = buckets[i]; entry != NULL; entry = nextEntry) {\n      nextEntry = entry->next;\n    }\n  }\n}\n" always "void foo() {\n  Entry *entry, *nextEntry;\n  for(int i = 0; i < 10; i++) {\n    for(entry = buckets[i]; entry != NULL; entry = nextEntry) {\n      nextEntry = entry->next;\n    }\n  }\n}\n"
Line 1412
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1412 always 1412
  "" always ""
Line 1414
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1414 always 1414
  "void foo() {\n  Entry *entry, *nextEntry;\n  for(int i = 0; i < 10; i++) {\n    for(entry = buckets[i]; entry != NULL; entry = nextEntry) {\n    }\n  }\n}\n" always "void foo() {\n  Entry *entry, *nextEntry;\n  for(int i = 0; i < 10; i++) {\n    for(entry = buckets[i]; entry != NULL; entry = nextEntry) {\n    }\n  }\n}\n"
Line 1421
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1421 always 1421
  "[test.cpp:4]: (error) Uninitialized variable: nextEntry\n" always "[test.cpp:4]: (error) Uninitialized variable: nextEntry\n"
Line 1423
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1423 always 1423
  "void f(int x) {\n    list *f = NULL;\n    list *l;\n\n    while (--x) {\n        if (!f)\n            f = c;\n        else\n            l->next = c;\n        l = c;\n    }\n}\n" always "void f(int x) {\n    list *f = NULL;\n    list *l;\n\n    while (--x) {\n        if (!f)\n            f = c;\n        else\n            l->next = c;\n        l = c;\n    }\n}\n"
Line 1435
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1435 always 1435
  "" always ""
Line 1438
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1438 always 1438
  "void f(void)\n{\n    int* p;\n    do\n    {\n        if (true) {;}\n        else\n        {\n            return;\n        }\n        *p = 7;\n        p = new int(9);\n    } while (*p != 8);\n}" always "void f(void)\n{\n    int* p;\n    do\n    {\n        if (true) {;}\n        else\n        {\n            return;\n        }\n        *p = 7;\n        p = new int(9);\n    } while (*p != 8);\n}"
Line 1452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1452 always 1452
  "[test.cpp:11]: (error) Uninitialized variable: p\n" always "[test.cpp:11]: (error) Uninitialized variable: p\n"
Line 1455
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1455 always 1455
  "void f(void)\n{\n    int* p;\n    while (*p != 8) {\n        *p = 7;\n        p = new int(9);\n    }\n}" always "void f(void)\n{\n    int* p;\n    while (*p != 8) {\n        *p = 7;\n        p = new int(9);\n    }\n}"
Line 1463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1463 always 1463
  "[test.cpp:4]: (error) Uninitialized variable: p\n" always "[test.cpp:4]: (error) Uninitialized variable: p\n"
Line 1466
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1466 always 1466
  "int foo(int *p) {\n  int x;\n  while (true) {\n    switch (*p) {\n    case 1:\n        return x;\n    case 2:\n        x = 123;\n        break;\n    };\n    ++p\n  }\n}" always "int foo(int *p) {\n  int x;\n  while (true) {\n    switch (*p) {\n    case 1:\n        return x;\n    case 2:\n        x = 123;\n        break;\n    };\n    ++p\n  }\n}"
Line 1479
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1479 always 1479
  "" always ""
Line 1484
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1484 always 1484
  "void f(int x)\n{\n    short c;\n    switch(x) {\n    case 1:\n        c++;\n        break;\n    };\n}" always "void f(int x)\n{\n    short c;\n    switch(x) {\n    case 1:\n        c++;\n        break;\n    };\n}"
Line 1493
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1493 always 1493
  "[test.cpp:6]: (error) Uninitialized variable: c\n" always "[test.cpp:6]: (error) Uninitialized variable: c\n"
  "" always ""
Line 1495
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1495 always 1495
  "char * f()\n{\n    static char ret[200];\n    memset(ret, 0, 200);\n    switch (x)\n    {\n        case 1: return ret;\n        case 2: return ret;\n    }\n    return 0;\n}" always "char * f()\n{\n    static char ret[200];\n    memset(ret, 0, 200);\n    switch (x)\n    {\n        case 1: return ret;\n        case 2: return ret;\n    }\n    return 0;\n}"
Line 1506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1506 always 1506
  "" always ""
Line 1508
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1508 always 1508
  "int foo(const int iVar, unsigned int slot, unsigned int pin)\n{\n    int i;\n    if (iVar == 0)\n    {\n        switch (slot)\n        {\n            case 4:  return 5;\n            default: return -1;\n        }\n    }\n    else\n    {\n        switch (pin)\n        {\n            case 0:   i =  2; break;\n            default:  i = -1; break;\n        }\n    }\n    return i;\n}" always "int foo(const int iVar, unsigned int slot, unsigned int pin)\n{\n    int i;\n    if (iVar == 0)\n    {\n        switch (slot)\n        {\n            case 4:  return 5;\n            default: return -1;\n        }\n    }\n    else\n    {\n        switch (pin)\n        {\n            case 0:   i =  2; break;\n            default:  i = -1; break;\n        }\n    }\n    return i;\n}"
Line 1529
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1529 always 1529
  "" always ""
Line 1532
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1532 always 1532
  "int a()\n{\n    int x;\n    switch (foo(&x))\n    {\n        case 1:\n            return x;\n    }\n}" always "int a()\n{\n    int x;\n    switch (foo(&x))\n    {\n        case 1:\n            return x;\n    }\n}"
Line 1541
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1541 always 1541
  "" always ""
Line 1544
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1544 always 1544
  "void f() {\n    int a;\n    ({\n    switch(sizeof(int)) {\n    case 4:\n    default:\n        (a)=0;\n        break;\n    };\n    })\n}" always "void f() {\n    int a;\n    ({\n    switch(sizeof(int)) {\n    case 4:\n    default:\n        (a)=0;\n        break;\n    };\n    })\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 1555
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1555 always 1555
  "" always ""
Line 1560
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1560 always 1560
  "void f()\n{\n    char a[10];\n    a[a[0]] = 0;\n}" always "void f()\n{\n    char a[10];\n    a[a[0]] = 0;\n}"
Line 1565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1565 always 1565
  "[test.cpp:4]: (error) Uninitialized variable: a[0]\n" always "[test.cpp:4]: (error) Uninitialized variable: a[0]\n"
Line 1567
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1567 always 1567
  "int f()\n{\n    char a[10];\n    *a = '\\0';\n    int i = strlen(a);\n}" always "int f()\n{\n    char a[10];\n    *a = '\\0';\n    int i = strlen(a);\n}"
Line 1573
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1573 always 1573
  "" always ""
Line 1575
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1575 always 1575
  "void f()\n{\n    char a, b[10];\n    a = b[0] = 0;\n}" always "void f()\n{\n    char a, b[10];\n    a = b[0] = 0;\n}"
Line 1580
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1580 always 1580
  "" always ""
Line 1582
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1582 always 1582
  "void f()\n{\n    char a[10], b[10];\n    a[0] = b[0] = 0;\n}" always "void f()\n{\n    char a[10], b[10];\n    a[0] = b[0] = 0;\n}"
Line 1587
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1587 always 1587
  "" always ""
Line 1589
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1589 always 1589
  "void f()\n{\n    char a[10], *p;\n    *(p = a) = 0;\n}" always "void f()\n{\n    char a[10], *p;\n    *(p = a) = 0;\n}"
Line 1594
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1594 always 1594
  "" always ""
Line 1596
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1596 always 1596
  "void f() {\n    char a[10], *p;\n    p = &(a[10]);\n}" always "void f() {\n    char a[10], *p;\n    p = &(a[10]);\n}"
Line 1600
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1600 always 1600
  "" always ""
Line 1603
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1603 always 1603
  "void f() {\n    char a[10], *p;\n    p = c?a:0;\n}" always "void f() {\n    char a[10], *p;\n    p = c?a:0;\n}"
Line 1607
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1607 always 1607
  "" always ""
Line 1609
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1609 always 1609
  "void f(int x) {\n    char a[10], c;\n    c = *(x?a:0);\n}" always "void f(int x) {\n    char a[10], c;\n    c = *(x?a:0);\n}"
Line 1613
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1613 always 1613
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 1615
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1615 always 1615
  "void f() {\n    char a[10], c;\n    strcpy(dest, x?a:\"\");\n}" always "void f() {\n    char a[10], c;\n    strcpy(dest, x?a:\"\");\n}"
Line 1619
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1619 always 1619
  "error" always "error"
  "" always ""
Line 1621
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1621 always 1621
  "void f(int x) {\n  int a[2];\n  y *= (x ? 1 : 2);\n}" always "void f(int x) {\n  int a[2];\n  y *= (x ? 1 : 2);\n}"
Line 1625
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1625 always 1625
  "" always ""
Line 1628
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1628 always 1628
  "void f()\n{\n    char c[50] = \"\";\n    strcat(c, \"test\");\n}" always "void f()\n{\n    char c[50] = \"\";\n    strcat(c, \"test\");\n}"
Line 1633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1633 always 1633
  "" always ""
Line 1635
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1635 always 1635
  "void f(char *s2) {\n    char s[20];\n    strcpy(s2, s);\n};" always "void f(char *s2) {\n    char s[20];\n    strcpy(s2, s);\n};"
Line 1639
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1639 always 1639
  "[test.cpp:3]: (error) Uninitialized variable: s\n" always "[test.cpp:3]: (error) Uninitialized variable: s\n"
Line 1641
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1641 always 1641
  "void f() {\n    char s[20];\n    strcat(s, \"abc\");\n};" always "void f() {\n    char s[20];\n    strcat(s, \"abc\");\n};"
Line 1645
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1645 always 1645
  "[test.cpp:3]: (error) Uninitialized variable: s\n" always "[test.cpp:3]: (error) Uninitialized variable: s\n"
Line 1647
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1647 always 1647
  "void f() {\n    char s[20];\n    strchr(s, ' ');\n};" always "void f() {\n    char s[20];\n    strchr(s, ' ');\n};"
Line 1651
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1651 always 1651
  "[test.cpp:3]: (error) Uninitialized variable: s\n" always "[test.cpp:3]: (error) Uninitialized variable: s\n"
Line 1653
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1653 always 1653
  "void foo()\n{\n        int y[2];\n        int s;\n        GetField( y + 0, y + 1 );\n        s = y[0] * y[1];\n}" always "void foo()\n{\n        int y[2];\n        int s;\n        GetField( y + 0, y + 1 );\n        s = y[0] * y[1];\n}"
Line 1660
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1660 always 1660
  "" always ""
Line 1662
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1662 always 1662
  "void foo()\n{\n        int a[2];\n        init(a - 1);\n        int b = a[0];\n}" always "void foo()\n{\n        int a[2];\n        init(a - 1);\n        int b = a[0];\n}"
Line 1668
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1668 always 1668
  "" always ""
Line 1670
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1670 always 1670
  "void foo()\n{\n        Fred a[2];\n        Fred b = a[0];\n}" always "void foo()\n{\n        Fred a[2];\n        Fred b = a[0];\n}"
Line 1675
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1675 always 1675
  "" always ""
Line 1677
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1677 always 1677
  "void foo() {\n  char buf[1024];\n  char *b = (char *) (((uintptr_t) buf + 63) & ~(uintptr_t) 63);\n}\n" always "void foo() {\n  char buf[1024];\n  char *b = (char *) (((uintptr_t) buf + 63) & ~(uintptr_t) 63);\n}\n"
Line 1681
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1681 always 1681
  "" always ""
Line 1683
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1683 always 1683
  "void foo() {\n  char buf[1024];\n  char x = *(char *) (((uintptr_t) buf + 63) & ~(uintptr_t) 63);\n}\n" always "void foo() {\n  char buf[1024];\n  char x = *(char *) (((uintptr_t) buf + 63) & ~(uintptr_t) 63);\n}\n"
Line 1687
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1687 always 1687
  "[test.cpp:3]: (error) Uninitialized variable: buf\n" always "[test.cpp:3]: (error) Uninitialized variable: buf\n"
Line 1690
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1690 always 1690
  "void f(int i);\nvoid foo()\n{\n    int a[10];\n    f(a[0]);\n}" always "void f(int i);\nvoid foo()\n{\n    int a[10];\n    f(a[0]);\n}"
Line 1696
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1696 always 1696
  "[test.cpp:5]: (error) Uninitialized variable: a\n" always "[test.cpp:5]: (error) Uninitialized variable: a\n"
Line 1699
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1699 always 1699
  "void foo() {\n        char a[2];\n        unsigned long b = (unsigned long)(a+2) & ~7;\n}" always "void foo() {\n        char a[2];\n        unsigned long b = (unsigned long)(a+2) & ~7;\n}"
Line 1703
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1703 always 1703
  "" always ""
Line 1705
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1705 always 1705
  "void f() {\n    char a[2];\n    printf(\"%s\", a);\n}" always "void f() {\n    char a[2];\n    printf(\"%s\", a);\n}"
Line 1709
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1709 always 1709
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
  "" always ""
Line 1711
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1711 always 1711
  "void f() {\n    const char *a;\n    printf(\"%s\", a=\"abc\");\n}" always "void f() {\n    const char *a;\n    printf(\"%s\", a=\"abc\");\n}"
Line 1715
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1715 always 1715
  "" always ""
Line 1717
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1717 always 1717
  "void f() {\n    char header[1];\n    *((unsigned char*)(header)) = 0xff;\n    return header[0];\n}" always "void f() {\n    char header[1];\n    *((unsigned char*)(header)) = 0xff;\n    return header[0];\n}"
Line 1722
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1722 always 1722
  "" always ""
Line 1724
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1724 always 1724
  "void f() {\n    char header[1];\n    *((unsigned char*)((unsigned char *)(header))) = 0xff;\n    return header[0];\n}" always "void f() {\n    char header[1];\n    *((unsigned char*)((unsigned char *)(header))) = 0xff;\n    return header[0];\n}"
Line 1729
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1729 always 1729
  "" always ""
Line 1731
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1731 always 1731
  "void f() {\n    ABC abc;\n    int a[1];\n\n    abc.a = a;\n    init(&abc);\n    return a[0];\n}" always "void f() {\n    ABC abc;\n    int a[1];\n\n    abc.a = a;\n    init(&abc);\n    return a[0];\n}"
Line 1739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1739 always 1739
  "" always ""
Line 1742
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1742 always 1742
  "void f(){\n   char *strMsg = \"This is a message\";\n   char *buffer=(char*)malloc(128*sizeof(char));\n   strcpy(strMsg,buffer);\n   free(buffer);\n}" always "void f(){\n   char *strMsg = \"This is a message\";\n   char *buffer=(char*)malloc(128*sizeof(char));\n   strcpy(strMsg,buffer);\n   free(buffer);\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 1748
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1748 always 1748
  "[test.cpp:4]: (error) Memory is allocated but not initialized: buffer\n" always "[test.cpp:4]: (error) Memory is allocated but not initialized: buffer\n"
Line 1750
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1750 always 1750
  "void f(){\n   char *strMsg = \"This is a message\";\n   char *buffer=static_cast<char*>(malloc(128*sizeof(char)));\n   strcpy(strMsg,buffer);\n   free(buffer);\n}" always "void f(){\n   char *strMsg = \"This is a message\";\n   char *buffer=static_cast<char*>(malloc(128*sizeof(char)));\n   strcpy(strMsg,buffer);\n   free(buffer);\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 1756
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1756 always 1756
  "[test.cpp:4]: (error) Memory is allocated but not initialized: buffer\n" always "[test.cpp:4]: (error) Memory is allocated but not initialized: buffer\n"
Line 1759
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1759 always 1759
  "int foo() {\n    int a[1] = {5};\n    return a[0];\n}" always "int foo() {\n    int a[1] = {5};\n    return a[0];\n}"
Line 1763
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1763 always 1763
  "" always ""
Line 1765
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1765 always 1765
  "int foo() {\n    int a[2][2] = {{3,4}, {5,6}};\n    return a[0][1];\n}" always "int foo() {\n    int a[2][2] = {{3,4}, {5,6}};\n    return a[0][1];\n}"
Line 1769
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1769 always 1769
  "" always ""
Line 1771
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1771 always 1771
  "int foo() {\n    int a[1];\n    return a[0];\n}" always "int foo() {\n    int a[1];\n    return a[0];\n}"
Line 1775
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1775 always 1775
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 1777
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1777 always 1777
  "int foo() {\n    int a[2][2];\n    return a[0][1];\n}" always "int foo() {\n    int a[2][2];\n    return a[0][1];\n}"
Line 1781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1781 always 1781
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 1783
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1783 always 1783
  "int foo() {\n    int a[10];\n    dostuff(a[0]);\n}" always "int foo() {\n    int a[10];\n    dostuff(a[0]);\n}"
Line 1787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1787 always 1787
  "" always ""
Line 1790
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1790 always 1790
  "void f() {\n    int *a[2][19];\n    int **b = a[0];\n}" always "void f() {\n    int *a[2][19];\n    int **b = a[0];\n}"
Line 1794
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1794 always 1794
  "" always ""
Line 1797
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1797 always 1797
  "void bar(PSTR x);\nvoid foo() {\n  char x[10];\n  bar(x);\n}" always "void bar(PSTR x);\nvoid foo() {\n  char x[10];\n  bar(x);\n}"
Line 1802
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1802 always 1802
  "" always ""
Line 1805
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1805 always 1805
  "struct Fred { int x; int y; };\nvoid f() {\n  struct Fred fred[10];\n  fred[1].x = 0;\n}" always "struct Fred { int x; int y; };\nvoid f() {\n  struct Fred fred[10];\n  fred[1].x = 0;\n}"
  "test.c" always "test.c"
Line 1811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1811 always 1811
  "" always ""
Line 1813
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1813 always 1813
  "char f() {\n    std::array<char, 1> a;\n    return a[0];\n}\n" always "char f() {\n    std::array<char, 1> a;\n    return a[0];\n}\n"
Line 1817
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1817 always 1817
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 1819
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1819 always 1819
  "std::string f() {\n    std::array<std::string, 1> a;\n    return a[0];\n}\n" always "std::string f() {\n    std::array<std::string, 1> a;\n    return a[0];\n}\n"
Line 1823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1823 always 1823
  "" always ""
Line 1827
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1827 always 1827
  "void draw_quad(float z)  {\n    int i;\n    float (*vertices)[2][4];\n    vertices[0][0][0] = z;\n    vertices[0][0][1] = z;\n    vertices[1][0][0] = z;\n    vertices[1][0][1] = z;\n    vertices[2][0][0] = z;\n    vertices[2][0][1] = z;\n    vertices[3][0][0] = z;\n    vertices[3][0][1] = z;\n    for (i = 0; i < 4; i++) {\n        vertices[i][0][2] = z;\n        vertices[i][0][3] = 1.0;\n        vertices[i][1][0] = 2.0;\n        vertices[i][1][1] = 3.0;\n        vertices[i][1][2] = 4.0;\n        vertices[i][1][3] = 5.0;\n    }\n}" always "void draw_quad(float z)  {\n    int i;\n    float (*vertices)[2][4];\n    vertices[0][0][0] = z;\n    vertices[0][0][1] = z;\n    vertices[1][0][0] = z;\n    vertices[1][0][1] = z;\n    vertices[2][0][0] = z;\n    vertices[2][0][1] = z;\n    vertices[3][0][0] = z;\n    vertices[3][0][1] = z;\n    for (i = 0; i < 4; i++) {\n        vertices[i][0][2] = z;\n        vertices[i][0][3] = 1.0;\n        vertices[i][1][0] = 2.0;\n        vertices[i][1][1] = 3.0;\n        vertices[i][1][2] = 4.0;\n        vertices[i][1][3] = 5.0;\n    }\n}"
Line 1847
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1847 always 1847
  "[test.cpp:4]: (error) Uninitialized variable: vertices\n" always "[test.cpp:4]: (error) Uninitialized variable: vertices\n"
Line 1850
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1850 always 1850
  "void f() {\n    std::array<int, 3> *PArr[2] = { p0, p1 };\n    (*PArr[0])[2] = 0;\n    (*PArr[1])[2] = 0;\n}\n" always "void f() {\n    std::array<int, 3> *PArr[2] = { p0, p1 };\n    (*PArr[0])[2] = 0;\n    (*PArr[1])[2] = 0;\n}\n"
Line 1855
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1855 always 1855
  "" always ""
Line 1859
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1859 always 1859
  "double foo(bool flag) {\n    double adIHPoint_local[4][4]{};\n    function(*adIHPoint_local);\n}" always "double foo(bool flag) {\n    double adIHPoint_local[4][4]{};\n    function(*adIHPoint_local);\n}"
Line 1863
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1863 always 1863
  "" always ""
Line 1868
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1868 always 1868
  "void f() {\n    char *s = (char *)malloc(100);\n    strcat(s, \"abc\");\n};" always "void f() {\n    char *s = (char *)malloc(100);\n    strcat(s, \"abc\");\n};"
Line 1872
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1872 always 1872
  "[test.cpp:3]: (error) Memory is allocated but not initialized: s\n" always "[test.cpp:3]: (error) Memory is allocated but not initialized: s\n"
Line 1874
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1874 always 1874
  "void f()\n{\n    char *s1 = new char[10];\n    char *s2 = new char[strlen(s1)];\n};" always "void f()\n{\n    char *s1 = new char[10];\n    char *s2 = new char[strlen(s1)];\n};"
Line 1879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1879 always 1879
  "[test.cpp:4]: (error) Memory is allocated but not initialized: s1\n" always "[test.cpp:4]: (error) Memory is allocated but not initialized: s1\n"
Line 1881
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1881 always 1881
  "void f()\n{\n    char *p = (char*)malloc(64);\n    int x = p[0];\n}" always "void f()\n{\n    char *p = (char*)malloc(64);\n    int x = p[0];\n}"
Line 1886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1886 always 1886
  "[test.cpp:4]: (error) Memory is allocated but not initialized: p\n" always "[test.cpp:4]: (error) Memory is allocated but not initialized: p\n"
Line 1888
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1888 always 1888
  "void f() {\n    char *p = (char*)malloc(64);\n    if (p[0]) { }\n}" always "void f() {\n    char *p = (char*)malloc(64);\n    if (p[0]) { }\n}"
Line 1892
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1892 always 1892
  "[test.cpp:3]: (error) Memory is allocated but not initialized: p[0]\n" always "[test.cpp:3]: (error) Memory is allocated but not initialized: p[0]\n"
Line 1894
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1894 always 1894
  "char f() {\n    char *p = (char*)malloc(64);\n    return p[0];\n}" always "char f() {\n    char *p = (char*)malloc(64);\n    return p[0];\n}"
Line 1898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1898 always 1898
  "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n" always "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n"
Line 1900
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1900 always 1900
  "void f()\n{\n    Fred *fred = new Fred;\n    fred->foo();\n}" always "void f()\n{\n    Fred *fred = new Fred;\n    fred->foo();\n}"
Line 1905
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1905 always 1905
  "" always ""
Line 1907
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1907 always 1907
  "struct Fred { int i; Fred(int, float); };\nvoid f() {\n    Fred *fred = new Fred(1, 2);\n    fred->foo();\n}" always "struct Fred { int i; Fred(int, float); };\nvoid f() {\n    Fred *fred = new Fred(1, 2);\n    fred->foo();\n}"
Line 1912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1912 always 1912
  "" always ""
Line 1914
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1914 always 1914
  "void f()\n{\n    Fred *fred = malloc(sizeof(Fred));\n    x(&fred->f);\n}" always "void f()\n{\n    Fred *fred = malloc(sizeof(Fred));\n    x(&fred->f);\n}"
Line 1919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1919 always 1919
  "" always ""
Line 1921
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1921 always 1921
  "void f()\n{\n    Fred *fred = malloc(sizeof(Fred));\n    x(fred->f);\n}" always "void f()\n{\n    Fred *fred = malloc(sizeof(Fred));\n    x(fred->f);\n}"
Line 1926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1926 always 1926
  "" always ""
Line 1928
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1928 always 1928
  "void foo(char *s)\n{\n    char *a = malloc(100);\n    *a = *s;\n}" always "void foo(char *s)\n{\n    char *a = malloc(100);\n    *a = *s;\n}"
Line 1933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1933 always 1933
  "" always ""
Line 1935
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1935 always 1935
  "void foo()\n{\n    char *a;\n    if (a);\n}" always "void foo()\n{\n    char *a;\n    if (a);\n}"
Line 1940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1940 always 1940
  "[test.cpp:4]: (error) Uninitialized variable: a\n" always "[test.cpp:4]: (error) Uninitialized variable: a\n"
Line 1942
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1942 always 1942
  "void foo()\n{\n    char *a = malloc(100);\n    if (a);\n}" always "void foo()\n{\n    char *a = malloc(100);\n    if (a);\n}"
Line 1947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1947 always 1947
  "" always ""
Line 1949
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1949 always 1949
  "void foo()\n{\n    ABC *abc = malloc(100);\n    abc->a = 123;\n}" always "void foo()\n{\n    ABC *abc = malloc(100);\n    abc->a = 123;\n}"
Line 1954
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1954 always 1954
  "" always ""
Line 1956
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1956 always 1956
  "void foo()\n{\n    ABC *abc = malloc(100);\n    abc->a.word = 123;\n}" always "void foo()\n{\n    ABC *abc = malloc(100);\n    abc->a.word = 123;\n}"
Line 1961
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1961 always 1961
  "" always ""
Line 1963
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1963 always 1963
  "void foo()\n{\n    ABC *abc = malloc(100);\n    abc->a = 123;\n    abc->a += 123;\n}" always "void foo()\n{\n    ABC *abc = malloc(100);\n    abc->a = 123;\n    abc->a += 123;\n}"
Line 1969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1969 always 1969
  "" always ""
Line 1971
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1971 always 1971
  "void foo()\n{\n    ABC *abc = malloc(100);\n    free(abc);\n}" always "void foo()\n{\n    ABC *abc = malloc(100);\n    free(abc);\n}"
Line 1976
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1976 always 1976
  "" always ""
Line 1978
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1978 always 1978
  "void f()\n{\n    char *s = (char*)malloc(100);\n    if (!s)\n        return;\n    char c = *s;\n}" always "void f()\n{\n    char *s = (char*)malloc(100);\n    if (!s)\n        return;\n    char c = *s;\n}"
Line 1985
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1985 always 1985
  "[test.cpp:6]: (error) Memory is allocated but not initialized: s\n" always "[test.cpp:6]: (error) Memory is allocated but not initialized: s\n"
  "" always ""
Line 1988
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1988 always 1988
  "void f() {\n    uintptr_t x = malloc(100);\n    uintptr_t y = x + 10;\n}" always "void f() {\n    uintptr_t x = malloc(100);\n    uintptr_t y = x + 10;\n}"
Line 1992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1992 always 1992
  "" always ""
Line 1994
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  1994 always 1994
  "void f() {\n  z_stream strm;\n  char* buf = malloc(10);\n  strm.next_out = buf;\n  deflate(&strm, Z_FINISH);\n  memcpy(body, buf, 10);\n}" always "void f() {\n  z_stream strm;\n  char* buf = malloc(10);\n  strm.next_out = buf;\n  deflate(&strm, Z_FINISH);\n  memcpy(body, buf, 10);\n}"
Line 2001
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2001 always 2001
  "" always ""
Line 2004
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2004 always 2004
  "struct StgStrm {\n    StgIo& rIo;\n    StgStrm(StgIo&);\n    virtual sal_Int32 Write();\n};\nvoid Tmp2Strm() {\n    StgStrm* pNewStrm;\n    if (someflag)\n        pNewStrm = new StgStrm(rIo);\n    else\n        pNewStrm = new StgStrm(rIo);\n    pNewStrm->Write();\n}" always "struct StgStrm {\n    StgIo& rIo;\n    StgStrm(StgIo&);\n    virtual sal_Int32 Write();\n};\nvoid Tmp2Strm() {\n    StgStrm* pNewStrm;\n    if (someflag)\n        pNewStrm = new StgStrm(rIo);\n    else\n        pNewStrm = new StgStrm(rIo);\n    pNewStrm->Write();\n}"
Line 2017
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2017 always 2017
  "" always ""
Line 2020
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2020 always 2020
  "struct EMFPFont {\n    bool family;\n    void Initialize();\n};\nvoid processObjectRecord() {\n    EMFPFont *font = new EMFPFont();\n    font->Initialize();\n}" always "struct EMFPFont {\n    bool family;\n    void Initialize();\n};\nvoid processObjectRecord() {\n    EMFPFont *font = new EMFPFont();\n    font->Initialize();\n}"
Line 2028
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2028 always 2028
  "" always ""
Line 2031
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2031 always 2031
  "void foo(){\n    int* p1 = new int(314);\n    int* p2 = new int();\n    int* arr = new int[5]();\n    std::cout << *p1 << *p2 << arr[0];\n}" always "void foo(){\n    int* p1 = new int(314);\n    int* p2 = new int();\n    int* arr = new int[5]();\n    std::cout << *p1 << *p2 << arr[0];\n}"
Line 2037
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2037 always 2037
  "" always ""
Line 2040
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2040 always 2040
  "int main() {\n    char * pBuf = new(10);\n    a = *pBuf;\n}" always "int main() {\n    char * pBuf = new(10);\n    a = *pBuf;\n}"
  "test.c" always "test.c"
Line 2044
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2044 always 2044
  "" always ""
Line 2046
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2046 always 2046
  "class A {};\nvoid f() {\n    A* a = new A{};\n}\n" always "class A {};\nvoid f() {\n    A* a = new A{};\n}\n"
Line 2050
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2050 always 2050
  "" always ""
Line 2055
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2055 always 2055
  "class Fred\n{\n    int i;\n    int a() { return i; }\n};" always "class Fred\n{\n    int i;\n    int a() { return i; }\n};"
Line 2060
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2060 always 2060
  "" always ""
Line 2062
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2062 always 2062
  "void f()\n{\n    struct Relative {\n        Surface *surface;\n        void MoveTo(int x, int y) {\n            surface->MoveTo();\n        }\n    };\n}" always "void f()\n{\n    struct Relative {\n        Surface *surface;\n        void MoveTo(int x, int y) {\n            surface->MoveTo();\n        }\n    };\n}"
Line 2071
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2071 always 2071
  "" always ""
Line 2073
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2073 always 2073
  "void f()\n{\n    static const struct ab {\n        int a,b;\n        int get_a() { return a; }    } = { 0, 0 };\n}" always "void f()\n{\n    static const struct ab {\n        int a,b;\n        int get_a() { return a; }    } = { 0, 0 };\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 2080
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2080 always 2080
  "" always ""
Line 2082
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2082 always 2082
  "void f()\n{\n    int i;\n    {\n        union ab {\n            int a,b;\n        }\n        i = 0;\n    }\n    return i;\n}" always "void f()\n{\n    int i;\n    {\n        union ab {\n            int a,b;\n        }\n        i = 0;\n    }\n    return i;\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 2093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2093 always 2093
  "" always ""
Line 2095
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2095 always 2095
  "void f(int x) {\n    struct AB ab;\n    x = ab.x = 12;\n}" always "void f(int x) {\n    struct AB ab;\n    x = ab.x = 12;\n}"
Line 2099
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2099 always 2099
  "" always ""
Line 2104
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2104 always 2104
  "void f()\n{\n    enum AB { a, b };\n    AB ab;\n    if (ab);\n}" always "void f()\n{\n    enum AB { a, b };\n    AB ab;\n    if (ab);\n}"
Line 2110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2110 always 2110
  "[test.cpp:5]: (error) Uninitialized variable: ab\n" always "[test.cpp:5]: (error) Uninitialized variable: ab\n"
Line 2115
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2115 always 2115
  "void f()\n{\n    int a;\n    int &b = a;\n    b = 0;\n    int x = a;\n}" always "void f()\n{\n    int a;\n    int &b = a;\n    b = 0;\n    int x = a;\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 2122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2122 always 2122
  "" always ""
Line 2124
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2124 always 2124
  "void f(struct blame_entry *ent)\n{\n    struct origin *suspect = ent->suspect;\n    char hex[41];\n    strcpy(hex, sha1_to_hex(suspect->commit->object.sha1));\n}" always "void f(struct blame_entry *ent)\n{\n    struct origin *suspect = ent->suspect;\n    char hex[41];\n    strcpy(hex, sha1_to_hex(suspect->commit->object.sha1));\n}"
Line 2130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2130 always 2130
  "" always ""
Line 2132
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2132 always 2132
  "void foo()\n{\n    const std::string s(x());\n    strchr(s.c_str(), ',');\n}" always "void foo()\n{\n    const std::string s(x());\n    strchr(s.c_str(), ',');\n}"
Line 2137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2137 always 2137
  "" always ""
Line 2140
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2140 always 2140
  "void f() {\n    struct thing { int value; };\n    thing it;\n    int& referenced_int = it.value;\n    referenced_int = 123;\n}" always "void f() {\n    struct thing { int value; };\n    thing it;\n    int& referenced_int = it.value;\n    referenced_int = 123;\n}"
Line 2146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2146 always 2146
  "" always ""
Line 2151
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2151 always 2151
  "static int foo() {\n    int ret;\n    return ret;\n}" always "static int foo() {\n    int ret;\n    return ret;\n}"
Line 2155
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2155 always 2155
  "[test.cpp:3]: (error) Uninitialized variable: ret\n" always "[test.cpp:3]: (error) Uninitialized variable: ret\n"
Line 2157
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2157 always 2157
  "static int foo() {\n    int ret;\n    return ret+5;\n}" always "static int foo() {\n    int ret;\n    return ret+5;\n}"
Line 2161
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2161 always 2161
  "[test.cpp:3]: (error) Uninitialized variable: ret\n" always "[test.cpp:3]: (error) Uninitialized variable: ret\n"
Line 2163
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2163 always 2163
  "static int foo() {\n    int ret;\n    return ret = 5;\n}" always "static int foo() {\n    int ret;\n    return ret = 5;\n}"
Line 2167
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2167 always 2167
  "" always ""
Line 2170
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2170 always 2170
  "static int foo() {\n    int ret;\n    cin >> ret;\n    return ret;\n}" always "static int foo() {\n    int ret;\n    cin >> ret;\n    return ret;\n}"
Line 2175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2175 always 2175
  "" always ""
Line 2177
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2177 always 2177
  "static int foo() {\n    int ret;\n    return cin >> ret;\n}\n" always "static int foo() {\n    int ret;\n    return cin >> ret;\n}\n"
  "test.c" always "test.c"
Line 2181
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2181 always 2181
  "[test.c:3]: (error) Uninitialized variable: ret\n" always "[test.c:3]: (error) Uninitialized variable: ret\n"
Line 2186
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2186 always 2186
  "wchar_t f() { int i; return btowc(i); }" always "wchar_t f() { int i; return btowc(i); }"
Line 2187
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2187 always 2187
  "[test.cpp:1]: (error) Uninitialized variable: i\n" always "[test.cpp:1]: (error) Uninitialized variable: i\n"
Line 2189
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2189 always 2189
  "wchar_t f(int i) { return btowc(i); }" always "wchar_t f(int i) { return btowc(i); }"
Line 2190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2190 always 2190
  "" always ""
Line 2193
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2193 always 2193
  "void setvalue(int &x) {\n  x = 0;\n  return 123;\n}\nint f() {\n  int x;\n  return setvalue(x);\n}" always "void setvalue(int &x) {\n  x = 0;\n  return 123;\n}\nint f() {\n  int x;\n  return setvalue(x);\n}"
Line 2202
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2202 always 2202
  "" always ""
Line 2207
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2207 always 2207
  "void f(bool b) {\n    double f;\n    if (b)   {  }\n    else  {\n        f = 0.0;\n    }\n    printf (\"%f\",f);\n}" always "void f(bool b) {\n    double f;\n    if (b)   {  }\n    else  {\n        f = 0.0;\n    }\n    printf (\"%f\",f);\n}"
Line 2215
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2215 always 2215
  "[test.cpp:7]: (error) Uninitialized variable: f\n" always "[test.cpp:7]: (error) Uninitialized variable: f\n"
Line 2218
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2218 always 2218
  "void f(bool b) {\n    double f;\n    if (b)   { f = 1.0 }\n    else  {\n        f = 0.0;\n    }\n    printf (\"%f\",f);\n}" always "void f(bool b) {\n    double f;\n    if (b)   { f = 1.0 }\n    else  {\n        f = 0.0;\n    }\n    printf (\"%f\",f);\n}"
Line 2226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2226 always 2226
  "" always ""
Line 2230
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2230 always 2230
  "int f(int x) {\n    int y;\n    return x ? 1 : y;\n}" always "int f(int x) {\n    int y;\n    return x ? 1 : y;\n}"
Line 2234
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2234 always 2234
  "[test.cpp:3]: (error) Uninitialized variable: y\n" always "[test.cpp:3]: (error) Uninitialized variable: y\n"
Line 2238
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2238 always 2238
  "int f() {\n    int i;\n    return x(&i) ? i : 0;\n}" always "int f() {\n    int i;\n    return x(&i) ? i : 0;\n}"
Line 2242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2242 always 2242
  "" always ""
Line 2244
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2244 always 2244
  "int f() {\n    int i;\n    return x() ? i : 0;\n}" always "int f() {\n    int i;\n    return x() ? i : 0;\n}"
Line 2248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2248 always 2248
  "[test.cpp:3]: (error) Uninitialized variable: i\n" always "[test.cpp:3]: (error) Uninitialized variable: i\n"
Line 2254
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2254 always 2254
  "char a()\n{\n    char key;\n    struct A msg = { .buf = {&key} };\n    init(&msg);\n    key++;\n}" always "char a()\n{\n    char key;\n    struct A msg = { .buf = {&key} };\n    init(&msg);\n    key++;\n}"
Line 2261
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2261 always 2261
  "" always ""
Line 2264
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2264 always 2264
  "int f() {\n    int result;\n    int *res[] = {&result};\n    foo(res);\n    return result;\n}" always "int f() {\n    int result;\n    int *res[] = {&result};\n    foo(res);\n    return result;\n}"
Line 2270
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2270 always 2270
  "" always ""
Line 2273
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2273 always 2273
  "int f() {\n    char a[10];\n    char *b[] = {a};\n    foo(b);\n    return atoi(a);\n}" always "int f() {\n    char a[10];\n    char *b[] = {a};\n    foo(b);\n    return atoi(a);\n}"
Line 2279
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2279 always 2279
  "" always ""
Line 2282
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2282 always 2282
  "int f() {\n    int a;\n    int *p[] = { &a };\n    *p[0] = 0;\n    return a;\n}" always "int f() {\n    int a;\n    int *p[] = { &a };\n    *p[0] = 0;\n    return a;\n}"
Line 2288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2288 always 2288
  "" always ""
Line 2297
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2297 always 2297
  "void f()\n{\n    char a[100];\n    strncpy(a, s, 20);\n    strncat(a, s, 20);\n}" always "void f()\n{\n    char a[100];\n    strncpy(a, s, 20);\n    strncat(a, s, 20);\n}"
Line 2303
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2303 always 2303
  "[test.cpp:5]: (error) Dangerous usage of 'a' (strncpy doesn't always null-terminate it).\n" always "[test.cpp:5]: (error) Dangerous usage of 'a' (strncpy doesn't always null-terminate it).\n"
  "" always ""
Line 2305
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2305 always 2305
  "void f()\n{\n    char a[100];\n    strncpy(a, \"hello\", 3);\n    strncat(a, \"world\", 20);\n}" always "void f()\n{\n    char a[100];\n    strncpy(a, \"hello\", 3);\n    strncat(a, \"world\", 20);\n}"
Line 2311
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2311 always 2311
  "[test.cpp:5]: (error) Dangerous usage of 'a' (strncpy doesn't always null-terminate it).\n" always "[test.cpp:5]: (error) Dangerous usage of 'a' (strncpy doesn't always null-terminate it).\n"
  "" always ""
Line 2313
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2313 always 2313
  "void f()\n{\n    char a[100];\n    strncpy(a, \"hello\", sizeof(a));\n    strncat(a, \"world\", 20);\n}" always "void f()\n{\n    char a[100];\n    strncpy(a, \"hello\", sizeof(a));\n    strncat(a, \"world\", 20);\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 2319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2319 always 2319
  "" always ""
Line 2323
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2323 always 2323
  "void f() {\n    char a[100];\n    strncpy(a,p,10);\n    memcmp(a,q,10);\n}" always "void f() {\n    char a[100];\n    strncpy(a,p,10);\n    memcmp(a,q,10);\n}"
Line 2328
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2328 always 2328
  "" always ""
Line 2330
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2330 always 2330
  "void f() {\n    char a[100];\n    strncpy(a,p,10);\n    if (memcmp(a,q,10)==0);\n}" always "void f() {\n    char a[100];\n    strncpy(a,p,10);\n    if (memcmp(a,q,10)==0);\n}"
Line 2335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2335 always 2335
  "" always ""
Line 2339
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2339 always 2339
  "void f(const char dev[], char *str) {\n    char buf[10];\n    strncpy(buf, dev, 10);\n    strncpy(str, buf, 10);\n}" always "void f(const char dev[], char *str) {\n    char buf[10];\n    strncpy(buf, dev, 10);\n    strncpy(str, buf, 10);\n}"
Line 2344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2344 always 2344
  "" always ""
Line 2346
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2346 always 2346
  "void f() {\n  char dst[4];\n  const char* source = \"You\";\n  strncpy(dst, source, sizeof(dst));\n  char value = dst[2];\n}" always "void f() {\n  char dst[4];\n  const char* source = \"You\";\n  strncpy(dst, source, sizeof(dst));\n  char value = dst[2];\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 2352
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2352 always 2352
  "" always ""
Line 2357
  "int a(int x) { return x + x; }" always "int a(int x) { return x + x; }"
Line 2359
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2359 always 2359
  "void b() {\n    int x;\n    a(x);\n}" always "void b() {\n    int x;\n    a(x);\n}"
  ( {lifetime[Object]=(funca+"void b() {\n    int x;\n    a(x);\n}"),!0}
Line 2364
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2364 always 2364
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 2366
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2366 always 2366
  "void b() {\n    int *p;\n    a(*p);\n}" always "void b() {\n    int *p;\n    a(*p);\n}"
  ( {lifetime[Object]=(funca+"void b() {\n    int *p;\n    a(*p);\n}"),!0}
Line 2371
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2371 always 2371
  "[test.cpp:3]: (error) Uninitialized variable: p\n" always "[test.cpp:3]: (error) Uninitialized variable: p\n"
Line 2377
  "void a(int *p) { *p = 0; }" always "void a(int *p) { *p = 0; }"
Line 2380
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2380 always 2380
  "void b() {\n    int buf[10];\n    a(buf);\n}" always "void b() {\n    int buf[10];\n    a(buf);\n}"
  ( {lifetime[Object]=(funca+"void b() {\n    int buf[10];\n    a(buf);\n}"),!0}
Line 2385
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2385 always 2385
  "" always ""
Line 2388
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2388 always 2388
  "void b() {\n    int *p;\n    a(p);\n}" always "void b() {\n    int *p;\n    a(p);\n}"
  ( {lifetime[Object]=(funca+"void b() {\n    int *p;\n    a(p);\n}"),!0}
Line 2393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2393 always 2393
  "[test.cpp:3]: (error) Uninitialized variable: p\n" always "[test.cpp:3]: (error) Uninitialized variable: p\n"
Line 2397
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2397 always 2397
  "void f() {\n    struct Fred *fred;\n    typeof(fred->x);\n}" always "void f() {\n    struct Fred *fred;\n    typeof(fred->x);\n}"
Line 2401
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2401 always 2401
  "" always ""
Line 2403
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2403 always 2403
  "void f() {\n    struct SData * s;\n    ab(typeof(s->status));\n}" always "void f() {\n    struct SData * s;\n    ab(typeof(s->status));\n}"
Line 2407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2407 always 2407
  "" always ""
Line 2409
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2409 always 2409
  "void f() {\n    struct SData * s;\n    TYPEOF(s->status);\n}" always "void f() {\n    struct SData * s;\n    TYPEOF(s->status);\n}"
Line 2413
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2413 always 2413
  "" always ""
  "[test.cpp:3]: (error) Uninitialized variable: s\n" always "[test.cpp:3]: (error) Uninitialized variable: s\n"
Line 2415
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2415 always 2415
  "void f() {\n    int *n = ({ typeof(*n) z;  (typeof(*n)*)z; })\n}" always "void f() {\n    int *n = ({ typeof(*n) z;  (typeof(*n)*)z; })\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 2418
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2418 always 2418
  "" always ""
Line 2422
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2422 always 2422
  "void foo() {\n  int i;\n  dostuff((int&)i, 0);\n}" always "void foo() {\n  int i;\n  dostuff((int&)i, 0);\n}"
Line 2426
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2426 always 2426
  "" always ""
Line 2428
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2428 always 2428
  "int foo() {\n  int i;\n  return (int&)i + 2;\n}" always "int foo() {\n  int i;\n  return (int&)i + 2;\n}"
Line 2432
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2432 always 2432
  "[test.cpp:3]: (error) Uninitialized variable: i\n" always "[test.cpp:3]: (error) Uninitialized variable: i\n"
Line 2434
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2434 always 2434
  "void foo() {\n  int i;\n  dostuff(*&i, 0);\n}" always "void foo() {\n  int i;\n  dostuff(*&i, 0);\n}"
Line 2438
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2438 always 2438
  "" always ""
Line 2440
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2440 always 2440
  "int foo() {\n  int i;\n  return *&i;\n}" always "int foo() {\n  int i;\n  return *&i;\n}"
Line 2444
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2444 always 2444
  "[test.cpp:3]: (error) Uninitialized variable: i\n" always "[test.cpp:3]: (error) Uninitialized variable: i\n"
Line 2449
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2449 always 2449
  "void f() {\n    int x;\n    x++;\n}" always "void f() {\n    int x;\n    x++;\n}"
Line 2453
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2453 always 2453
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 2456
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2456 always 2456
  "void f() {\n    int x;\n    str[x] = 0;\n}" always "void f() {\n    int x;\n    str[x] = 0;\n}"
Line 2460
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2460 always 2460
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 2462
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2462 always 2462
  "void f() {\n    int buf[12];\n    printf (\"%d\", buf[0] );\n}" always "void f() {\n    int buf[12];\n    printf (\"%d\", buf[0] );\n}"
Line 2466
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2466 always 2466
  "[test.cpp:3]: (error) Uninitialized variable: buf\n" always "[test.cpp:3]: (error) Uninitialized variable: buf\n"
Line 2468
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2468 always 2468
  "void f() {\n    int x;\n    int y = x & 3;\n}" always "void f() {\n    int x;\n    int y = x & 3;\n}"
Line 2472
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2472 always 2472
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 2474
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2474 always 2474
  "void f() {\n    int x;\n    int y = 3 & x;\n}" always "void f() {\n    int x;\n    int y = 3 & x;\n}"
Line 2478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2478 always 2478
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 2480
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2480 always 2480
  "void f() {\n    int x;\n    x = 3 + x;\n}" always "void f() {\n    int x;\n    x = 3 + x;\n}"
Line 2484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2484 always 2484
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 2486
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2486 always 2486
  "void f() {\n    int x;\n    x = x;\n}" always "void f() {\n    int x;\n    x = x;\n}"
Line 2490
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2490 always 2490
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 2493
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2493 always 2493
  "void f() {\n    struct ABC *abc;\n    abc->a = 0;\n}" always "void f() {\n    struct ABC *abc;\n    abc->a = 0;\n}"
Line 2497
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2497 always 2497
  "[test.cpp:3]: (error) Uninitialized variable: abc\n" always "[test.cpp:3]: (error) Uninitialized variable: abc\n"
Line 2499
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2499 always 2499
  "int f() {\n    static int x;\n    return ++x;\n}" always "int f() {\n    static int x;\n    return ++x;\n}"
Line 2503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2503 always 2503
  "" always ""
Line 2505
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2505 always 2505
  "int f() {\n    extern int x;\n    return ++x;\n}" always "int f() {\n    extern int x;\n    return ++x;\n}"
Line 2509
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2509 always 2509
  "" always ""
Line 2511
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2511 always 2511
  "void f() {\n    int x;\n    *(((char *)&x) + 0) = 0;\n}" always "void f() {\n    int x;\n    *(((char *)&x) + 0) = 0;\n}"
  "test.c" always "test.c"
  false always 0
Line 2515
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2515 always 2515
  "" always ""
Line 2517
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2517 always 2517
  "void f() {\n    int x;\n    do_something(&((char*)&x)[0], 1);\n}" always "void f() {\n    int x;\n    do_something(&((char*)&x)[0], 1);\n}"
Line 2521
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2521 always 2521
  "" always ""
Line 2523
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2523 always 2523
  "void f() {\n    int x;\n    char *p = (char*)&x + 1;\n}" always "void f() {\n    int x;\n    char *p = (char*)&x + 1;\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 2527
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2527 always 2527
  "" always ""
Line 2529
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2529 always 2529
  "void f() {\n    int i;\n    i=f(), i!=2;\n}" always "void f() {\n    int i;\n    i=f(), i!=2;\n}"
Line 2533
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2533 always 2533
  "" always ""
Line 2536
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2536 always 2536
  "void f(void) {\n    int x;\n    if (x) { }\n}" always "void f(void) {\n    int x;\n    if (x) { }\n}"
Line 2540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2540 always 2540
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 2542
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2542 always 2542
  "void f() {\n    int x;\n    if (1 == (3 & x)) { }\n}" always "void f() {\n    int x;\n    if (1 == (3 & x)) { }\n}"
Line 2546
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2546 always 2546
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 2549
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2549 always 2549
  "int f(int *ptr) {\n    int a;\n    int *p = ptr ? ptr : &a;\n}" always "int f(int *ptr) {\n    int a;\n    int *p = ptr ? ptr : &a;\n}"
Line 2553
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2553 always 2553
  "" always ""
Line 2555
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2555 always 2555
  "int f(int a) {\n    int x;\n    if (a==3) { x=2; }\n    y = (a==3) ? x : a;\n}" always "int f(int a) {\n    int x;\n    if (a==3) { x=2; }\n    y = (a==3) ? x : a;\n}"
Line 2560
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2560 always 2560
  "" always ""
Line 2563
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2563 always 2563
  "void f() {\n    int x = ({ 1 + 2; });\n    int y = 1 + (x ? y : y);\n}" always "void f() {\n    int x = ({ 1 + 2; });\n    int y = 1 + (x ? y : y);\n}"
Line 2567
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2567 always 2567
  "[test.cpp:3]: (error) Uninitialized variable: y\n" always "[test.cpp:3]: (error) Uninitialized variable: y\n"
Line 2571
  44 always 44
  = always "void f() {\n    int x;\n    if (i >> x) { }\n}"
  "void f() {\n    int x;\n    if (i >> x) { }\n}" always "void f() {\n    int x;\n    if (i >> x) { }\n}"
Line 2575
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2575 always 2575
  code always "void f() {\n    int x;\n    if (i >> x) { }\n}"
  "test.cpp" always "test.cpp"
Line 2576
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2576 always 2576
  "" always ""
Line 2578
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2578 always 2578
  code always "void f() {\n    int x;\n    if (i >> x) { }\n}"
  "test.c" always "test.c"
Line 2579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2579 always 2579
  "[test.c:3]: (error) Uninitialized variable: x\n" always "[test.c:3]: (error) Uninitialized variable: x\n"
Line 2582
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2582 always 2582
  "void f() {\n    int i, i2;\n    strm >> i >> i2;\n}" always "void f() {\n    int i, i2;\n    strm >> i >> i2;\n}"
Line 2586
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2586 always 2586
  "" always ""
Line 2589
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2589 always 2589
  "int f() {\n    int ret;\n    if (a) { ret = 1; }\n    else { {} ret = 2; }\n    return ret;\n}" always "int f() {\n    int ret;\n    if (a) { ret = 1; }\n    else { {} ret = 2; }\n    return ret;\n}"
Line 2595
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2595 always 2595
  "" always ""
Line 2597
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2597 always 2597
  "int f() {\n    int ret;\n    if (a) { ret = 1; }\n    else { s=foo(1,{2,3},4); ret = 2; }\n    return ret;\n}" always "int f() {\n    int ret;\n    if (a) { ret = 1; }\n    else { s=foo(1,{2,3},4); ret = 2; }\n    return ret;\n}"
Line 2603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2603 always 2603
  "" always ""
Line 2606
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2606 always 2606
  "void f() {\n    int x;\n    if (y == 1) { x = 1; }\n    else { if (y == 2) { x = 1; } }\n    return x;\n}" always "void f() {\n    int x;\n    if (y == 1) { x = 1; }\n    else { if (y == 2) { x = 1; } }\n    return x;\n}"
Line 2612
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2612 always 2612
  "[test.cpp:5]: (error) Uninitialized variable: x\n" always "[test.cpp:5]: (error) Uninitialized variable: x\n"
Line 2614
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2614 always 2614
  "void f() {\n    int x;\n    if (y == 1) { x = 1; }\n    else { if (y == 2) { x = 1; } }\n    if (y == 3) { }\n    return x;\n}" always "void f() {\n    int x;\n    if (y == 1) { x = 1; }\n    else { if (y == 2) { x = 1; } }\n    if (y == 3) { }\n    return x;\n}"
Line 2621
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2621 always 2621
  "[test.cpp:6]: (error) Uninitialized variable: x\n" always "[test.cpp:6]: (error) Uninitialized variable: x\n"
Line 2624
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2624 always 2624
  "void f() {\n    int a;\n    if (init(&a)) { }\n    a++;\n}" always "void f() {\n    int a;\n    if (init(&a)) { }\n    a++;\n}"
Line 2629
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2629 always 2629
  "" always ""
Line 2632
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2632 always 2632
  "void f() {\n    int x;\n    if (y == 1) { return; }\n    else { x = 1; }\n    return x;\n}" always "void f() {\n    int x;\n    if (y == 1) { return; }\n    else { x = 1; }\n    return x;\n}"
Line 2638
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2638 always 2638
  "" always ""
Line 2640
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2640 always 2640
  "void f() {\n    int x;\n    if (y == 1) { return; }\n    return x;\n}" always "void f() {\n    int x;\n    if (y == 1) { return; }\n    return x;\n}"
Line 2645
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2645 always 2645
  "[test.cpp:4]: (error) Uninitialized variable: x\n" always "[test.cpp:4]: (error) Uninitialized variable: x\n"
Line 2647
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2647 always 2647
  "int f(int x) {\n    int ret;\n    if (!x) {\n        ret = -123;\n        goto out1;\n    }\n    return 0;\nout1:\nout2:\n    return ret;\n}" always "int f(int x) {\n    int ret;\n    if (!x) {\n        ret = -123;\n        goto out1;\n    }\n    return 0;\nout1:\nout2:\n    return ret;\n}"
  "test.c" always "test.c"
Line 2658
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2658 always 2658
  "" always ""
Line 2660
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2660 always 2660
  "void f() {\n    int i;\n    if (x) {\n        i = 1;\n    } else {\n        goto out;\n    }\n    i++;\n}" always "void f() {\n    int i;\n    if (x) {\n        i = 1;\n    } else {\n        goto out;\n    }\n    i++;\n}"
Line 2669
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2669 always 2669
  "" always ""
Line 2671
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2671 always 2671
  "int f() {\n    int i,x;\n    for (i=0;i<9;++i)\n        if (foo) break;\n    return x;\n}" always "int f() {\n    int i,x;\n    for (i=0;i<9;++i)\n        if (foo) break;\n    return x;\n}"
Line 2677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2677 always 2677
  "[test.cpp:5]: (error) Uninitialized variable: x\n" always "[test.cpp:5]: (error) Uninitialized variable: x\n"
Line 2679
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2679 always 2679
  "int f() {\n    int x;\n    while (foo)\n        if (bar) break;\n    return x;\n}" always "int f() {\n    int x;\n    while (foo)\n        if (bar) break;\n    return x;\n}"
Line 2685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2685 always 2685
  "[test.cpp:5]: (error) Uninitialized variable: x\n" always "[test.cpp:5]: (error) Uninitialized variable: x\n"
Line 2688
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2688 always 2688
  "void f() {\n    try {\n    } catch (CException* e) {\n        trace();\n        e->Delete();\n    }\n}" always "void f() {\n    try {\n    } catch (CException* e) {\n        trace();\n        e->Delete();\n    }\n}"
Line 2695
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2695 always 2695
  "" always ""
Line 2697
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2697 always 2697
  "void f() {\n    try {\n    } catch (const char* e) {\n        A a = e;\n    }\n}" always "void f() {\n    try {\n    } catch (const char* e) {\n        A a = e;\n    }\n}"
Line 2703
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2703 always 2703
  "" always ""
Line 2706
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2706 always 2706
  "void f() {\n    int x;\n    if (y == 1) { exit(0); }\n    else { x = 1; }\n    return x;\n}" always "void f() {\n    int x;\n    if (y == 1) { exit(0); }\n    else { x = 1; }\n    return x;\n}"
Line 2712
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2712 always 2712
  "" always ""
Line 2715
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2715 always 2715
  "void foo() {\n    int i;\n    ({ if (0); });\n    for_each(i) { }\n}" always "void foo() {\n    int i;\n    ({ if (0); });\n    for_each(i) { }\n}"
  "test.c" always "test.c"
  false always 0
Line 2722
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2722 always 2722
  "void f(int a) {\n    int i;\n    if (a) i = 0;\n    if (a) i++;\n}" always "void f(int a) {\n    int i;\n    if (a) i = 0;\n    if (a) i++;\n}"
Line 2727
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2727 always 2727
  "" always ""
Line 2729
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2729 always 2729
  "void f() {\n    int a,b=0;\n    if (x) {\n        if (y) {\n            a = 0;\n            b = 1;\n        }\n    }\n    if (b) a++;\n}" always "void f() {\n    int a,b=0;\n    if (x) {\n        if (y) {\n            a = 0;\n            b = 1;\n        }\n    }\n    if (b) a++;\n}"
Line 2739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2739 always 2739
  "" always ""
Line 2741
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2741 always 2741
  "void f() {\n    int a=0, b;\n    if (x) { }\n    else { if (y==2) { a=1; b=2; } }\n    if (a) { ++b; }\n}" always "void f() {\n    int a=0, b;\n    if (x) { }\n    else { if (y==2) { a=1; b=2; } }\n    if (a) { ++b; }\n}"
Line 2747
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2747 always 2747
  "" always ""
Line 2749
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2749 always 2749
  "static void f(int x, int y) {\n    int a;\n    if (x == 0) { a = y; }\n    if (x == 0 && (a == 1)) { }\n}" always "static void f(int x, int y) {\n    int a;\n    if (x == 0) { a = y; }\n    if (x == 0 && (a == 1)) { }\n}"
Line 2754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2754 always 2754
  "" always ""
Line 2756
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2756 always 2756
  "static void f() {\n    int a=0, b;\n    if (something) { a = dostuff(&b); }\n    if (!a || b) { }\n}" always "static void f() {\n    int a=0, b;\n    if (something) { a = dostuff(&b); }\n    if (!a || b) { }\n}"
Line 2761
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2761 always 2761
  "" always ""
Line 2763
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2763 always 2763
  "static void f(int x, int y) {\n    int a;\n    if (x == 0 && (a == 1)) { }\n}" always "static void f(int x, int y) {\n    int a;\n    if (x == 0 && (a == 1)) { }\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 2767
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2767 always 2767
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 2769
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2769 always 2769
  "void f() {\n    int a;\n    if (x) { a = 0; }\n    if (x) { if (y) { a++; } }\n}" always "void f() {\n    int a;\n    if (x) { a = 0; }\n    if (x) { if (y) { a++; } }\n}"
Line 2774
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2774 always 2774
  "" always ""
Line 2776
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2776 always 2776
  "void f() {\n    int a;\n    if (x) { a = 0; }\n    if (x) { if (y) { } else { a++; } }\n}" always "void f() {\n    int a;\n    if (x) { a = 0; }\n    if (x) { if (y) { } else { a++; } }\n}"
Line 2781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2781 always 2781
  "" always ""
Line 2783
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2783 always 2783
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    if (x) ab = getAB();\n    else ab.a = 0;\n    if (ab.a == 1) b = ab.b;\n}" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    if (x) ab = getAB();\n    else ab.a = 0;\n    if (ab.a == 1) b = ab.b;\n}"
  "test.c" always "test.c"
Line 2790
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2790 always 2790
  "" always ""
Line 2792
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2792 always 2792
  "int f(void) {\n    int a;\n    int i;\n    if (x) { noreturn(); }\n    else { i = 0; }\n    if (i==1) { a = 0; }\n    else { a = 1; }\n    return a;\n}" always "int f(void) {\n    int a;\n    int i;\n    if (x) { noreturn(); }\n    else { i = 0; }\n    if (i==1) { a = 0; }\n    else { a = 1; }\n    return a;\n}"
Line 2801
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2801 always 2801
  "" always ""
Line 2803
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2803 always 2803
  "int f(int a) {\n    int x = 0, y;\n    if (a) x = 1;\n    else return 0;\n    if (x) y = 123;\n    else {}\n    return y;\n}" always "int f(int a) {\n    int x = 0, y;\n    if (a) x = 1;\n    else return 0;\n    if (x) y = 123;\n    else {}\n    return y;\n}"
Line 2811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2811 always 2811
  "" always ""
Line 2813
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2813 always 2813
  "int f(int a) {\n    int x;\n    if (a < 2) exit(1);\n    else if (a == 2) x = 0;\n    else exit(2);\n    return x;\n}" always "int f(int a) {\n    int x;\n    if (a < 2) exit(1);\n    else if (a == 2) x = 0;\n    else exit(2);\n    return x;\n}"
Line 2820
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2820 always 2820
  "" always ""
Line 2822
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2822 always 2822
  "int f(int a) {\n    int x = 1, y;\n    if (a) x = 0;\n    else return 0;\n    if (x) {}\n    else y = 123;\n    return y;\n}" always "int f(int a) {\n    int x = 1, y;\n    if (a) x = 0;\n    else return 0;\n    if (x) {}\n    else y = 123;\n    return y;\n}"
Line 2830
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2830 always 2830
  "" always ""
Line 2832
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2832 always 2832
  "void f(int x) {\n  int value;\n  if (x !=-1)\n    value = getvalue();\n  if (x == -1 || value > 300) {}\n}" always "void f(int x) {\n  int value;\n  if (x !=-1)\n    value = getvalue();\n  if (x == -1 || value > 300) {}\n}"
Line 2838
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2838 always 2838
  "" always ""
Line 2840
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2840 always 2840
  "enum t_err { ERR_NONE, ERR_BAD_ARGS };\nstruct box_t { int value; };\nint init_box(box_t *p, int v);\n\nvoid foo(int ret) {\n    box_t box2;\n    if (ret == ERR_NONE)\n        ret = init_box(&box2, 20);\n    if (ret == ERR_NONE)\n        z = x + box2.value;\n}" always "enum t_err { ERR_NONE, ERR_BAD_ARGS };\nstruct box_t { int value; };\nint init_box(box_t *p, int v);\n\nvoid foo(int ret) {\n    box_t box2;\n    if (ret == ERR_NONE)\n        ret = init_box(&box2, 20);\n    if (ret == ERR_NONE)\n        z = x + box2.value;\n}"
Line 2851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2851 always 2851
  "" always ""
Line 2853
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2853 always 2853
  "void f(int x) {\n  int value;\n  if (x == 32)\n    value = getvalue();\n  if (x == 1)\n    v = value;\n}" always "void f(int x) {\n  int value;\n  if (x == 32)\n    value = getvalue();\n  if (x == 1)\n    v = value;\n}"
Line 2860
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2860 always 2860
  "[test.cpp:6]: (error) Uninitialized variable: value\n" always "[test.cpp:6]: (error) Uninitialized variable: value\n"
Line 2862
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2862 always 2862
  "void f(int x) {\n  int value;\n  if (x == 32)\n    value = getvalue();\n  if (x == 32) {}\n  else v = value;\n}" always "void f(int x) {\n  int value;\n  if (x == 32)\n    value = getvalue();\n  if (x == 32) {}\n  else v = value;\n}"
Line 2869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2869 always 2869
  "[test.cpp:6]: (error) Uninitialized variable: value\n" always "[test.cpp:6]: (error) Uninitialized variable: value\n"
Line 2871
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2871 always 2871
  "static int x;int f() {\n    int y;\n    if (x) g();\n    if (x) y = 123;\n    else y = 456;\n    return y;\n}" always "static int x;int f() {\n    int y;\n    if (x) g();\n    if (x) y = 123;\n    else y = 456;\n    return y;\n}"
Line 2879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2879 always 2879
  "" always ""
Line 2881
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2881 always 2881
  "static int x;int f() {\n    int y;\n    if (!x) g();\n    if (x) y = 123;\n    else y = 456;\n    return y;\n}" always "static int x;int f() {\n    int y;\n    if (!x) g();\n    if (x) y = 123;\n    else y = 456;\n    return y;\n}"
Line 2889
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2889 always 2889
  "" always ""
Line 2891
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2891 always 2891
  "void f(int a) {\n  int x;\n  if (a) x=123;\n  if (!a) {\n    if (!a) {}\n    else if (x) {}\n  }\n}" always "void f(int a) {\n  int x;\n  if (a) x=123;\n  if (!a) {\n    if (!a) {}\n    else if (x) {}\n  }\n}"
Line 2899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2899 always 2899
  "" always ""
Line 2902
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2902 always 2902
  "void f() {\n    int x;\n    asm();\n    x++;\n}" always "void f() {\n    int x;\n    asm();\n    x++;\n}"
Line 2907
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2907 always 2907
  "" always ""
Line 2910
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2910 always 2910
  "void f() {\n    int i;\n    sizeof(i+1);\n}" always "void f() {\n    int i;\n    sizeof(i+1);\n}"
Line 2914
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2914 always 2914
  "" always ""
Line 2916
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2916 always 2916
  "void f() {\n    int i;\n    if (100 == sizeof(i+1));\n}" always "void f() {\n    int i;\n    if (100 == sizeof(i+1));\n}"
Line 2920
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2920 always 2920
  "" always ""
Line 2922
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2922 always 2922
  "void f() {\n    struct ABC *abc;\n    int i = ARRAY_SIZE(abc.a);}" always "void f() {\n    struct ABC *abc;\n    int i = ARRAY_SIZE(abc.a);}"
Line 2928
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2928 always 2928
  "void f() {\n    int *abc;\n    typeof(*abc);\n}" always "void f() {\n    int *abc;\n    typeof(*abc);\n}"
Line 2932
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2932 always 2932
  "" always ""
Line 2934
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2934 always 2934
  "void f() {\n    struct ABC *abc;\n    return do_something(typeof(*abc));\n}" always "void f() {\n    struct ABC *abc;\n    return do_something(typeof(*abc));\n}"
Line 2938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2938 always 2938
  "" always ""
Line 2940
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2940 always 2940
  "void f() {\n    A *a;\n    a = malloc(sizeof(*a));\n}" always "void f() {\n    A *a;\n    a = malloc(sizeof(*a));\n}"
Line 2944
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2944 always 2944
  "" always ""
Line 2947
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2947 always 2947
  "void f() {\n    int a,b;\n    if (&a == &b);\n}" always "void f() {\n    int a,b;\n    if (&a == &b);\n}"
Line 2951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2951 always 2951
  "" always ""
Line 2953
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2953 always 2953
  "void f() {\n    int a;\n    x((LPARAM)(RECT*)&a);\n}" always "void f() {\n    int a;\n    x((LPARAM)(RECT*)&a);\n}"
Line 2957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2957 always 2957
  "" always ""
Line 2959
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2959 always 2959
  "int main() {\n    int done;\n    dostuff(1, (AuPointer) &done);\n}" always "int main() {\n    int done;\n    dostuff(1, (AuPointer) &done);\n}"
Line 2963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2963 always 2963
  "" always ""
Line 2965
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2965 always 2965
  "void f() {\n    long a;\n    &a;\n}" always "void f() {\n    long a;\n    &a;\n}"
Line 2969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2969 always 2969
  "" always ""
Line 2971
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2971 always 2971
  "void f() {\n    int a = ({ long b = (long)(123); 2 + b; });\n}" always "void f() {\n    int a = ({ long b = (long)(123); 2 + b; });\n}"
  "test.c" always "test.c"
Line 2974
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2974 always 2974
  "" always ""
Line 2979
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2979 always 2979
  "void f() {\n    int buf[10];\n    int &x = buf[0];\n    buf[0] = 0;\n    x++;\n}" always "void f() {\n    int buf[10];\n    int &x = buf[0];\n    buf[0] = 0;\n    x++;\n}"
Line 2985
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2985 always 2985
  "" always ""
Line 2991
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2991 always 2991
  "void f() {\n    x<char> c;\n    c << 2345;\n}" always "void f() {\n    x<char> c;\n    c << 2345;\n}"
Line 2995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2995 always 2995
  "" always ""
Line 2998
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  2998 always 2998
  "void f() {\n    char c;\n    char a = c << 2;\n}" always "void f() {\n    char c;\n    char a = c << 2;\n}"
Line 3002
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3002 always 3002
  "[test.cpp:3]: (error) Uninitialized variable: c\n" always "[test.cpp:3]: (error) Uninitialized variable: c\n"
Line 3006
  269 always 269
  = always "struct Fred {\n    void Sync(dsmp_t& type, int& len, int limit = 123);\n    void Sync(int& syncpos, dsmp_t& type, int& len, int limit = 123);\n    void FindSyncPoint();\n};\nvoid Fred::FindSyncPoint() {\n    dsmp_t type;\n    int syncpos, len;\n    Sync(syncpos, type, len);\n}"
  "struct Fred {\n    void Sync(dsmp_t& type, int& len, int limit = 123);\n    void Sync(int& syncpos, dsmp_t& type, int& len, int limit = 123);\n    void FindSyncPoint();\n};\nvoid Fred::FindSyncPoint() {\n    dsmp_t type;\n    int syncpos, len;\n    Sync(syncpos, type, len);\n}" always "struct Fred {\n    void Sync(dsmp_t& type, int& len, int limit = 123);\n    void Sync(int& syncpos, dsmp_t& type, int& len, int limit = 123);\n    void FindSyncPoint();\n};\nvoid Fred::FindSyncPoint() {\n    dsmp_t type;\n    int syncpos, len;\n    Sync(syncpos, type, len);\n}"
Line 3016
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3016 always 3016
  code always "struct Fred {\n    void Sync(dsmp_t& type, int& len, int limit = 123);\n    void Sync(int& syncpos, dsmp_t& type, int& len, int limit = 123);\n    void FindSyncPoint();\n};\nvoid Fred::FindSyncPoint() {\n    dsmp_t type;\n    int syncpos, len;\n    Sync(syncpos, type, len);\n}"
  "test.cpp" always "test.cpp"
Line 3017
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3017 always 3017
  "" always ""
Line 3021
  104 always 104
  = always "namespace Ns { class C; }\nvoid f1() { char *p; *p = 0; }\nclass Ns::C* p;\nvoid f2() { char *p; *p = 0; }"
  "namespace Ns { class C; }\nvoid f1() { char *p; *p = 0; }\nclass Ns::C* p;\nvoid f2() { char *p; *p = 0; }" always "namespace Ns { class C; }\nvoid f1() { char *p; *p = 0; }\nclass Ns::C* p;\nvoid f2() { char *p; *p = 0; }"
Line 3025
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3025 always 3025
  code always "namespace Ns { class C; }\nvoid f1() { char *p; *p = 0; }\nclass Ns::C* p;\nvoid f2() { char *p; *p = 0; }"
  "test.cpp" always "test.cpp"
Line 3026
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3026 always 3026
  "[test.cpp:2]: (error) Uninitialized variable: p\n[test.cpp:4]: (error) Uninitialized variable: p\n" always "[test.cpp:2]: (error) Uninitialized variable: p\n[test.cpp:4]: (error) Uninitialized variable: p\n"
Line 3031
  191 always 191
  = always "class Foo {\n    template <unsigned int i>\n    bool bar() {\n        return true;\n    }\n};\ntemplate <>\nbool Foo::bar<9>() {\n    return true;\n}\nint global() {\n    int bar = 1;\n    return bar;\n}"
  "class Foo {\n    template <unsigned int i>\n    bool bar() {\n        return true;\n    }\n};\ntemplate <>\nbool Foo::bar<9>() {\n    return true;\n}\nint global() {\n    int bar = 1;\n    return bar;\n}" always "class Foo {\n    template <unsigned int i>\n    bool bar() {\n        return true;\n    }\n};\ntemplate <>\nbool Foo::bar<9>() {\n    return true;\n}\nint global() {\n    int bar = 1;\n    return bar;\n}"
Line 3045
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3045 always 3045
  code always "class Foo {\n    template <unsigned int i>\n    bool bar() {\n        return true;\n    }\n};\ntemplate <>\nbool Foo::bar<9>() {\n    return true;\n}\nint global() {\n    int bar = 1;\n    return bar;\n}"
  "test.cpp" always "test.cpp"
Line 3046
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3046 always 3046
  "" always ""
Line 3050
  68 always 68
  = always "bool get(int &var);\nvoid foo () {\n    int x;\n    x = get(x) && x;\n}"
  "bool get(int &var);\nvoid foo () {\n    int x;\n    x = get(x) && x;\n}" always "bool get(int &var);\nvoid foo () {\n    int x;\n    x = get(x) && x;\n}"
Line 3055
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3055 always 3055
  code always "bool get(int &var);\nvoid foo () {\n    int x;\n    x = get(x) && x;\n}"
  "test.cpp" always "test.cpp"
Line 3056
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3056 always 3056
  "" always ""
Line 3060
  65 always 65
  = always "void fp() {\n  std::stringstream ss;\n  for (int i; ss >> i;) {}\n}"
  "void fp() {\n  std::stringstream ss;\n  for (int i; ss >> i;) {}\n}" always "void fp() {\n  std::stringstream ss;\n  for (int i; ss >> i;) {}\n}"
Line 3064
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3064 always 3064
  code always "void fp() {\n  std::stringstream ss;\n  for (int i; ss >> i;) {}\n}"
Line 3065
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3065 always 3065
  "" always ""
Line 3069
  215 always 215
  = always "int func(void)\n{ int rez;\n  struct sccb* ccb;\n \n  do\n  { if ((ccb = calloc(1, sizeof(*ccb))) == NULL)\n    { rez = 1;\n      break;\n    }\n    rez = 0;\n  } while (0);\n \n  if (rez != 0)\n    free(ccb);\n \n  return rez;\n}"
  "int func(void)\n{ int rez;\n  struct sccb* ccb;\n \n  do\n  { if ((ccb = calloc(1, sizeof(*ccb))) == NULL)\n    { rez = 1;\n      break;\n    }\n    rez = 0;\n  } while (0);\n \n  if (rez != 0)\n    free(ccb);\n \n  return rez;\n}" always "int func(void)\n{ int rez;\n  struct sccb* ccb;\n \n  do\n  { if ((ccb = calloc(1, sizeof(*ccb))) == NULL)\n    { rez = 1;\n      break;\n    }\n    rez = 0;\n  } while (0);\n \n  if (rez != 0)\n    free(ccb);\n \n  return rez;\n}"
Line 3086
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3086 always 3086
  code always "int func(void)\n{ int rez;\n  struct sccb* ccb;\n \n  do\n  { if ((ccb = calloc(1, sizeof(*ccb))) == NULL)\n    { rez = 1;\n      break;\n    }\n    rez = 0;\n  } while (0);\n \n  if (rez != 0)\n    free(ccb);\n \n  return rez;\n}"
Line 3087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3087 always 3087
  "" always ""
Line 3092
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3092 always 3092
  "int f() {\n    int i;\n    {\n        return i;\n    }\n}" always "int f() {\n    int i;\n    {\n        return i;\n    }\n}"
Line 3098
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3098 always 3098
  "[test.cpp:4]: (error) Uninitialized variable: i\n" always "[test.cpp:4]: (error) Uninitialized variable: i\n"
Line 3100
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3100 always 3100
  "int f() {\n    int i;\n    try {\n        return i;\n    } catch(...) {}\n}" always "int f() {\n    int i;\n    try {\n        return i;\n    } catch(...) {}\n}"
Line 3106
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3106 always 3106
  "[test.cpp:4]: (error) Uninitialized variable: i\n" always "[test.cpp:4]: (error) Uninitialized variable: i\n"
Line 3108
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3108 always 3108
  "void f(bool x) {\n    bool b;\n    {\n        auto g = []{};\n        b = x;\n    }\n    if (b) {}\n}\n" always "void f(bool x) {\n    bool b;\n    {\n        auto g = []{};\n        b = x;\n    }\n    if (b) {}\n}\n"
Line 3116
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3116 always 3116
  "" always ""
Line 3118
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3118 always 3118
  "void f(bool x) {\n    bool b;\n    {\n        int i[2]{ 1, 2 };\n        b = x;\n    }\n    if (b) {}\n}\n" always "void f(bool x) {\n    bool b;\n    {\n        int i[2]{ 1, 2 };\n        b = x;\n    }\n    if (b) {}\n}\n"
Line 3126
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3126 always 3126
  "" always ""
Line 3128
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3128 always 3128
  "void f(bool x) {\n    bool b;\n    {\n        auto g = []{};\n    }\n    if (b) {}\n}\n" always "void f(bool x) {\n    bool b;\n    {\n        auto g = []{};\n    }\n    if (b) {}\n}\n"
Line 3135
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3135 always 3135
  "[test.cpp:6]: (error) Uninitialized variable: b\n" always "[test.cpp:6]: (error) Uninitialized variable: b\n"
Line 3141
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3141 always 3141
  "void getLibraryContainer() {\n    Reference< XStorageBasedLibraryContainer >(*Factory)(const Reference< XComponentContext >&, const Reference< XStorageBasedDocument >&)\n        = &DocumentDialogLibraryContainer::create;\n    rxContainer.set((*Factory)(m_aContext, xDocument));\n}" always "void getLibraryContainer() {\n    Reference< XStorageBasedLibraryContainer >(*Factory)(const Reference< XComponentContext >&, const Reference< XStorageBasedDocument >&)\n        = &DocumentDialogLibraryContainer::create;\n    rxContainer.set((*Factory)(m_aContext, xDocument));\n}"
Line 3146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3146 always 3146
  "" always ""
Line 3148
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3148 always 3148
  "void foo() {\n    void* x;\n    int (*f)(int, int) = x;\n    dostuff((*f)(a,b));\n}" always "void foo() {\n    void* x;\n    int (*f)(int, int) = x;\n    dostuff((*f)(a,b));\n}"
Line 3153
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3153 always 3153
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 3155
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3155 always 3155
  "void getLibraryContainer() {\n    Reference< XStorageBasedLibraryContainer >(*Factory)(const Reference< XComponentContext >&, const Reference< XStorageBasedDocument >&);\n    rxContainer.set((*Factory)(m_aContext, xDocument));\n}" always "void getLibraryContainer() {\n    Reference< XStorageBasedLibraryContainer >(*Factory)(const Reference< XComponentContext >&, const Reference< XStorageBasedDocument >&);\n    rxContainer.set((*Factory)(m_aContext, xDocument));\n}"
Line 3159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3159 always 3159
  "[test.cpp:3]: (error) Uninitialized variable: Factory\n" always "[test.cpp:3]: (error) Uninitialized variable: Factory\n"
Line 3165
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3165 always 3165
  "struct Source { Source& operator>>(int& i) { i = 0; return *this; } };\nstruct Sink { int v; };\nSource foo;\nvoid uninit() {\n  Sink s;\n  int n = 1 >> s.v;\n};\nvoid notUninit() {\n  Sink s1;\n  foo >> s1.v;\n  Sink s2;\n  int n;\n  foo >> s2.v >> n;\n}" always "struct Source { Source& operator>>(int& i) { i = 0; return *this; } };\nstruct Sink { int v; };\nSource foo;\nvoid uninit() {\n  Sink s;\n  int n = 1 >> s.v;\n};\nvoid notUninit() {\n  Sink s1;\n  foo >> s1.v;\n  Sink s2;\n  int n;\n  foo >> s2.v >> n;\n}"
Line 3179
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3179 always 3179
  "[test.cpp:6]: (error) Uninitialized struct member: s.v\n" always "[test.cpp:6]: (error) Uninitialized struct member: s.v\n"
Line 3181
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3181 always 3181
  "struct Fred { int a; };\nvoid foo() {\n  Fred fred;\n  std::cin >> fred.a;\n}" always "struct Fred { int a; };\nvoid foo() {\n  Fred fred;\n  std::cin >> fred.a;\n}"
Line 3186
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3186 always 3186
  "" always ""
Line 3192
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3192 always 3192
  "void bar(const int a, const int * const b);\nint foo(void) {\n   int a;\n   int *b = 0;\n   bar(a,b);\n   return 0;\n}" always "void bar(const int a, const int * const b);\nint foo(void) {\n   int a;\n   int *b = 0;\n   bar(a,b);\n   return 0;\n}"
Line 3199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3199 always 3199
  "[test.cpp:5]: (error) Uninitialized variable: a\n" always "[test.cpp:5]: (error) Uninitialized variable: a\n"
Line 3202
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3202 always 3202
  "void a(char);\nvoid b() {\n    char c;\n    a(c);\n}" always "void a(char);\nvoid b() {\n    char c;\n    a(c);\n}"
Line 3207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3207 always 3207
  "[test.cpp:4]: (error) Uninitialized variable: c\n" always "[test.cpp:4]: (error) Uninitialized variable: c\n"
Line 3209
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3209 always 3209
  "void a(char c);\nvoid b() {\n    char c;\n    a(c);\n}" always "void a(char c);\nvoid b() {\n    char c;\n    a(c);\n}"
Line 3214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3214 always 3214
  "[test.cpp:4]: (error) Uninitialized variable: c\n" always "[test.cpp:4]: (error) Uninitialized variable: c\n"
Line 3216
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3216 always 3216
  "void a(const char c);\nvoid b() {\n    char c;\n    a(c);\n}" always "void a(const char c);\nvoid b() {\n    char c;\n    a(c);\n}"
Line 3221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3221 always 3221
  "[test.cpp:4]: (error) Uninitialized variable: c\n" always "[test.cpp:4]: (error) Uninitialized variable: c\n"
Line 3223
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3223 always 3223
  "void a(char *c);\nvoid b() {\n    char c;\n    a(&c);\n}" always "void a(char *c);\nvoid b() {\n    char c;\n    a(&c);\n}"
Line 3228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3228 always 3228
  "" always ""
Line 3230
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3230 always 3230
  "void a(pstr s);\nvoid b() {\n    char c;\n    a(&c);\n}" always "void a(pstr s);\nvoid b() {\n    char c;\n    a(&c);\n}"
Line 3235
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3235 always 3235
  "" always ""
Line 3237
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3237 always 3237
  "void a(const char *c);\nvoid b() {\n    char c;\n    a(&c);\n    c++;\n}" always "void a(const char *c);\nvoid b() {\n    char c;\n    a(&c);\n    c++;\n}"
Line 3243
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3243 always 3243
  "[test.cpp:5]: (error) Uninitialized variable: c\n" always "[test.cpp:5]: (error) Uninitialized variable: c\n"
  "" always ""
Line 3246
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3246 always 3246
  "void a(char c);\nvoid b() {\n    char *c;\n    a(*c);\n}" always "void a(char c);\nvoid b() {\n    char *c;\n    a(*c);\n}"
Line 3251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3251 always 3251
  "[test.cpp:4]: (error) Uninitialized variable: c\n" always "[test.cpp:4]: (error) Uninitialized variable: c\n"
Line 3254
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3254 always 3254
  "void a(char *c);\nvoid b() {\n    char *c;\n    a(c);\n}" always "void a(char *c);\nvoid b() {\n    char *c;\n    a(c);\n}"
Line 3259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3259 always 3259
  "[test.cpp:4]: (error) Uninitialized variable: c\n" always "[test.cpp:4]: (error) Uninitialized variable: c\n"
Line 3261
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3261 always 3261
  "typedef struct { int a; int b; } AB;\nvoid a(AB *ab);\nvoid b() {\n    AB *ab;\n    a(ab);\n}" always "typedef struct { int a; int b; } AB;\nvoid a(AB *ab);\nvoid b() {\n    AB *ab;\n    a(ab);\n}"
Line 3267
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3267 always 3267
  "[test.cpp:5]: (error) Uninitialized variable: ab\n" always "[test.cpp:5]: (error) Uninitialized variable: ab\n"
Line 3269
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3269 always 3269
  "void a(const char *c);\nvoid b() {\n    char *c;\n    a(c);\n}" always "void a(const char *c);\nvoid b() {\n    char *c;\n    a(c);\n}"
Line 3274
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3274 always 3274
  "[test.cpp:4]: (error) Uninitialized variable: c\n" always "[test.cpp:4]: (error) Uninitialized variable: c\n"
Line 3276
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3276 always 3276
  "void a(const char c[]);\nvoid b() {\n    char *c;\n    a(c);\n}" always "void a(const char c[]);\nvoid b() {\n    char *c;\n    a(c);\n}"
Line 3281
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3281 always 3281
  "[test.cpp:4]: (error) Uninitialized variable: c\n" always "[test.cpp:4]: (error) Uninitialized variable: c\n"
Line 3283
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3283 always 3283
  "void a(char **c);\nvoid b() {\n    char *c;\n    a(&c);\n}" always "void a(char **c);\nvoid b() {\n    char *c;\n    a(&c);\n}"
Line 3288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3288 always 3288
  "" always ""
Line 3290
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3290 always 3290
  "void a(char *c);\nvoid b() {\n    char *c;\n    a(&c);\n}" always "void a(char *c);\nvoid b() {\n    char *c;\n    a(&c);\n}"
Line 3295
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3295 always 3295
  "" always ""
Line 3297
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3297 always 3297
  "void a(const char **c);\nvoid b() {\n    const char *c;\n    a(&c);\n}" always "void a(const char **c);\nvoid b() {\n    const char *c;\n    a(&c);\n}"
Line 3302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3302 always 3302
  "" always ""
Line 3305
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3305 always 3305
  "int calc(const int *p, int n);\nvoid f() {\n    int x[10];\n    calc(x,10);\n}" always "int calc(const int *p, int n);\nvoid f() {\n    int x[10];\n    calc(x,10);\n}"
Line 3310
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3310 always 3310
  "[test.cpp:4]: (error) Uninitialized variable: x\n" always "[test.cpp:4]: (error) Uninitialized variable: x\n"
  "" always ""
Line 3313
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3313 always 3313
  "void f() {\n    int x[10];\n    int &x0(*x);\n}" always "void f() {\n    int x[10];\n    int &x0(*x);\n}"
Line 3317
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3317 always 3317
  "" always ""
Line 3320
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3320 always 3320
  "struct ABC { int a; };\nvoid clear(struct ABC &abc);\nint f() {\n    struct ABC abc;\n    clear(abc);\n    return abc.a;\n}" always "struct ABC { int a; };\nvoid clear(struct ABC &abc);\nint f() {\n    struct ABC abc;\n    clear(abc);\n    return abc.a;\n}"
Line 3327
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3327 always 3327
  "" always ""
Line 3329
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3329 always 3329
  "void write_packet() {\n    time_t now0;\n    time(&now0);\n}" always "void write_packet() {\n    time_t now0;\n    time(&now0);\n}"
  "test.c" always "test.c"
Line 3333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3333 always 3333
  "" always ""
Line 3335
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3335 always 3335
  "void write_packet() {\n    time_t* now0;\n    time(now0);\n}" always "void write_packet() {\n    time_t* now0;\n    time(now0);\n}"
  "test.c" always "test.c"
Line 3339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3339 always 3339
  "[test.c:3]: (error) Uninitialized variable: now0\n" always "[test.c:3]: (error) Uninitialized variable: now0\n"
Line 3341
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3341 always 3341
  "void write_packet() {\n    char now0;\n    strcmp(&now0, sth);\n}" always "void write_packet() {\n    char now0;\n    strcmp(&now0, sth);\n}"
  "test.c" always "test.c"
Line 3345
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3345 always 3345
  "[test.c:3]: (error) Uninitialized variable: now0\n" always "[test.c:3]: (error) Uninitialized variable: now0\n"
Line 3349
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3349 always 3349
  "void a(struct Fred *fred) {\n    fred->x = 0;\n}\n\nvoid b() {\n    struct Fred *p;\n    a(p);\n}" always "void a(struct Fred *fred) {\n    fred->x = 0;\n}\n\nvoid b() {\n    struct Fred *p;\n    a(p);\n}"
Line 3357
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3357 always 3357
  "[test.cpp:7]: (error) Uninitialized variable: p\n" always "[test.cpp:7]: (error) Uninitialized variable: p\n"
Line 3360
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3360 always 3360
  "void a(char *buf) {\n    buf[0] = 0;\n}\nvoid b() {\n    char buf[10];\n    a(buf);\n    buf[1] = buf[0];\n}" always "void a(char *buf) {\n    buf[0] = 0;\n}\nvoid b() {\n    char buf[10];\n    a(buf);\n    buf[1] = buf[0];\n}"
Line 3368
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3368 always 3368
  "" always ""
Line 3371
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3371 always 3371
  "void f() {\n  struct listnode *item;\n  list_for_each(item, &key_list) {}\n}" always "void f() {\n  struct listnode *item;\n  list_for_each(item, &key_list) {}\n}"
Line 3375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3375 always 3375
  "" always ""
Line 3379
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3379 always 3379
  "void f() {\n    int i;\n    if (x) {\n        int y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}" always "void f() {\n    int i;\n    if (x) {\n        int y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 3387
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3387 always 3387
  "" always ""
Line 3389
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3389 always 3389
  "void f() {\n    int i, y;\n    if (x) {\n        y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}" always "void f() {\n    int i, y;\n    if (x) {\n        y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}"
  "test.cpp" always "test.cpp"
  false always 0
Line 3397
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3397 always 3397
  "" always ""
Line 3399
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3399 always 3399
  "void f() {\n    int i, y;\n    if (x) y = -ENOMEM;\n    else y = get_value(i);\n    if (y != 0) return;\n    i++;\n}" always "void f() {\n    int i, y;\n    if (x) y = -ENOMEM;\n    else y = get_value(i);\n    if (y != 0) return;\n    i++;\n}"
Line 3406
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3406 always 3406
  "" always ""
Line 3408
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3408 always 3408
  "void f(int x) {\n    int i;\n    if (x) i = 0;\n    if (!x || i>0) {}\n}" always "void f(int x) {\n    int i;\n    if (x) i = 0;\n    if (!x || i>0) {}\n}"
Line 3413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3413 always 3413
  "" always ""
Line 3415
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3415 always 3415
  "void f(int x) {\n    int i;\n    if (!x) { }\n    else i = 0;\n    if (x || i>0) {}\n}" always "void f(int x) {\n    int i;\n    if (!x) { }\n    else i = 0;\n    if (x || i>0) {}\n}"
Line 3421
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3421 always 3421
  "[test.cpp:5]: (error) Uninitialized variable: i\n" always "[test.cpp:5]: (error) Uninitialized variable: i\n"
Line 3423
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3423 always 3423
  "void f(int x) {\n    int i;\n    if (x) { }\n    else i = 0;\n    if (x || i>0) {}\n}" always "void f(int x) {\n    int i;\n    if (x) { }\n    else i = 0;\n    if (x || i>0) {}\n}"
Line 3429
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3429 always 3429
  "" always ""
Line 3431
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3431 always 3431
  "int f(int x) {\n    int y;\n    if (x) y = do_something();\n    if (!x) return 0;\n    return y;\n}" always "int f(int x) {\n    int y;\n    if (x) y = do_something();\n    if (!x) return 0;\n    return y;\n}"
Line 3437
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3437 always 3437
  "" always ""
Line 3440
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3440 always 3440
  "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return x ? 2*a : 0;\n}" always "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return x ? 2*a : 0;\n}"
Line 3446
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3446 always 3446
  "" always ""
Line 3448
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3448 always 3448
  "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return y ? 2*a : 3*a;\n}" always "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return y ? 2*a : 3*a;\n}"
Line 3454
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3454 always 3454
  "[test.cpp:5]: (error) Uninitialized variable: a\n" always "[test.cpp:5]: (error) Uninitialized variable: a\n"
Line 3456
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3456 always 3456
  "void f() {\n    int a;\n    dostuff(\"ab\" cd \"ef\", x?a:z);\n}" always "void f() {\n    int a;\n    dostuff(\"ab\" cd \"ef\", x?a:z);\n}"
Line 3462
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3462 always 3462
  "void f(int x) {\n    int i;\n    if (a(x)) i = 0;\n    if (b(x)) return;\n    i++;\n}" always "void f(int x) {\n    int i;\n    if (a(x)) i = 0;\n    if (b(x)) return;\n    i++;\n}"
Line 3468
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3468 always 3468
  "" always ""
Line 3470
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3470 always 3470
  "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        if (x) i++;\n    }\n}" always "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        if (x) i++;\n    }\n}"
Line 3477
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3477 always 3477
  "" always ""
Line 3479
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3479 always 3479
  "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        i++;\n    }\n}" always "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        i++;\n    }\n}"
Line 3486
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3486 always 3486
  "error" always "error"
  "" always ""
Line 3492
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3492 always 3492
  "void f() {\n    int i;\n    if (x) {\n        int y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}" always "void f() {\n    int i;\n    if (x) {\n        int y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}"
  "test.cpp" always "test.cpp"
Line 3501
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3501 always 3501
  "" always ""
Line 3503
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3503 always 3503
  "void f() {\n    int i, y;\n    if (x) {\n        y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}" always "void f() {\n    int i, y;\n    if (x) {\n        y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}"
  "test.cpp" always "test.cpp"
Line 3512
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3512 always 3512
  "" always ""
Line 3514
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3514 always 3514
  "void f() {\n    int i, y;\n    if (x) y = -ENOMEM;\n    else y = get_value(i);\n    if (y != 0) return;\n    i++;\n}" always "void f() {\n    int i, y;\n    if (x) y = -ENOMEM;\n    else y = get_value(i);\n    if (y != 0) return;\n    i++;\n}"
Line 3521
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3521 always 3521
  "" always ""
Line 3523
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3523 always 3523
  "void f(int x) {\n    int i;\n    if (!x) i = 0;\n    if (!x || i>0) {}\n}" always "void f(int x) {\n    int i;\n    if (!x) i = 0;\n    if (!x || i>0) {}\n}"
Line 3528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3528 always 3528
  "[test.cpp:3] -> [test.cpp:4]: (error) Uninitialized variable: i\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Uninitialized variable: i\n"
Line 3530
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3530 always 3530
  "void f(int x) {\n    int i;\n    if (x) i = 0;\n    if (!x || i>0) {}\n}" always "void f(int x) {\n    int i;\n    if (x) i = 0;\n    if (!x || i>0) {}\n}"
Line 3535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3535 always 3535
  "" always ""
Line 3537
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3537 always 3537
  "void f(int x) {\n    int i;\n    if (!x) { }\n    else i = 0;\n    if (x || i>0) {}\n}" always "void f(int x) {\n    int i;\n    if (!x) { }\n    else i = 0;\n    if (x || i>0) {}\n}"
Line 3543
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3543 always 3543
  "[test.cpp:3] -> [test.cpp:5]: (error) Uninitialized variable: i\n" always "[test.cpp:3] -> [test.cpp:5]: (error) Uninitialized variable: i\n"
Line 3545
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3545 always 3545
  "void f(int x) {\n    int i;\n    if (x) { }\n    else i = 0;\n    if (x || i>0) {}\n}" always "void f(int x) {\n    int i;\n    if (x) { }\n    else i = 0;\n    if (x || i>0) {}\n}"
Line 3551
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3551 always 3551
  "" always ""
Line 3553
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3553 always 3553
  "int f(int x) {\n    int y;\n    if (x) y = do_something();\n    if (!x) return 0;\n    return y;\n}" always "int f(int x) {\n    int y;\n    if (x) y = do_something();\n    if (!x) return 0;\n    return y;\n}"
Line 3559
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3559 always 3559
  "" always ""
Line 3562
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3562 always 3562
  "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return x ? 2*a : 0;\n}" always "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return x ? 2*a : 0;\n}"
Line 3568
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3568 always 3568
  "" always ""
Line 3570
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3570 always 3570
  "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return y ? 2*a : 3*a;\n}" always "int f(int x) {\n    int a;\n    if (x)\n        a = y;\n    return y ? 2*a : 3*a;\n}"
Line 3576
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3576 always 3576
  "[test.cpp:3] -> [test.cpp:5]: (error) Uninitialized variable: a\n" always "[test.cpp:3] -> [test.cpp:5]: (error) Uninitialized variable: a\n"
Line 3578
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3578 always 3578
  "void f() {\n    int a;\n    dostuff(\"ab\" cd \"ef\", x?a:z);\n}" always "void f() {\n    int a;\n    dostuff(\"ab\" cd \"ef\", x?a:z);\n}"
Line 3584
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3584 always 3584
  "void f(int x) {\n    int i;\n    if (a(x)) i = 0;\n    if (b(x)) return;\n    i++;\n}" always "void f(int x) {\n    int i;\n    if (a(x)) i = 0;\n    if (b(x)) return;\n    i++;\n}"
Line 3590
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3590 always 3590
  "" always ""
Line 3592
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3592 always 3592
  "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        if (x) i++;\n    }\n}" always "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        if (x) i++;\n    }\n}"
Line 3599
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3599 always 3599
  "" always ""
Line 3601
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3601 always 3601
  "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        i++;\n    }\n}" always "void f(int x) {\n    int i;\n    if (x) i = 0;\n    while (condition) {\n        i++;\n    }\n}"
Line 3608
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3608 always 3608
  "error" always "error"
  "" always ""
Line 3610
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3610 always 3610
  "void f ( void ){\n int *p;\n int a[ 2 ] = { [ 0 ] = *p++, [ 1 ] = 1 };\n}" always "void f ( void ){\n int *p;\n int a[ 2 ] = { [ 0 ] = *p++, [ 1 ] = 1 };\n}"
Line 3614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3614 always 3614
  "[test.cpp:3]: (error) Uninitialized variable: p\n" always "[test.cpp:3]: (error) Uninitialized variable: p\n"
Line 3616
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3616 always 3616
  "void f(int height) {\n    int a[11];\n    int *p = a;\n    int step = 2;\n    for (int i = 0; i < (height * step); i += step)\n        *p++ = 0;\n    for (int i = 0; i < height; i++)\n        if (a[i]) {}\n}\n" always "void f(int height) {\n    int a[11];\n    int *p = a;\n    int step = 2;\n    for (int i = 0; i < (height * step); i += step)\n        *p++ = 0;\n    for (int i = 0; i < height; i++)\n        if (a[i]) {}\n}\n"
Line 3625
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3625 always 3625
  "" always ""
Line 3629
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3629 always 3629
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n}" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n}"
Line 3634
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3634 always 3634
  "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n" always "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n"
Line 3636
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3636 always 3636
  "struct AB { int a; int b; };\nvoid f(void) {\n    AB ab;\n    int a = ab.a;\n}" always "struct AB { int a; int b; };\nvoid f(void) {\n    AB ab;\n    int a = ab.a;\n}"
Line 3641
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3641 always 3641
  "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n" always "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n"
Line 3643
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3643 always 3643
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = ab.a + 1;\n}" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = ab.a + 1;\n}"
Line 3648
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3648 always 3648
  "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n" always "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n"
Line 3650
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3650 always 3650
  "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}\n" always "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}\n"
  "test.c" always "test.c"
Line 3657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3657 always 3657
  "[test.c:6]: (error) Uninitialized struct member: ab.b\n" always "[test.c:6]: (error) Uninitialized struct member: ab.b\n"
Line 3659
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3659 always 3659
  "struct AB { int a; int b; };\nvoid do_something(int a);\nvoid f(void) {\n    struct AB ab;\n    do_something(ab.a);\n}\n" always "struct AB { int a; int b; };\nvoid do_something(int a);\nvoid f(void) {\n    struct AB ab;\n    do_something(ab.a);\n}\n"
  "test.c" always "test.c"
Line 3665
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3665 always 3665
  "[test.c:5]: (error) Uninitialized struct member: ab.a\n" always "[test.c:5]: (error) Uninitialized struct member: ab.a\n"
Line 3667
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3667 always 3667
  "struct AB { int a; int b; };\nvoid do_something(const struct AB &ab) { a = ab.a; }\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}" always "struct AB { int a; int b; };\nvoid do_something(const struct AB &ab) { a = ab.a; }\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}"
Line 3674
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3674 always 3674
  "" always ""
Line 3676
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3676 always 3676
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n}\n"
  "test.c" always "test.c"
Line 3681
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3681 always 3681
  "[test.c:4]: (error) Uninitialized struct member: ab.a\n" always "[test.c:4]: (error) Uninitialized struct member: ab.a\n"
Line 3683
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3683 always 3683
  "struct AB { int a; int b; };\nvoid f(void) {\n    AB ab1;\n    AB ab2 = { ab1.a, 0 };\n}" always "struct AB { int a; int b; };\nvoid f(void) {\n    AB ab1;\n    AB ab2 = { ab1.a, 0 };\n}"
Line 3688
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3688 always 3688
  "[test.cpp:4]: (error) Uninitialized struct member: ab1.a\n" always "[test.cpp:4]: (error) Uninitialized struct member: ab1.a\n"
Line 3690
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3690 always 3690
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    buf[ab.a] = 0;\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    buf[ab.a] = 0;\n}\n"
  "test.c" always "test.c"
Line 3695
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3695 always 3695
  "[test.c:4]: (error) Uninitialized struct member: ab.a\n" always "[test.c:4]: (error) Uninitialized struct member: ab.a\n"
Line 3697
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3697 always 3697
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = ab;\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = ab;\n}\n"
  "test.c" always "test.c"
Line 3703
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3703 always 3703
  "[test.c:5]: (error) Uninitialized struct member: ab.b\n" always "[test.c:5]: (error) Uninitialized struct member: ab.b\n"
Line 3705
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3705 always 3705
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = *(&ab);\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = *(&ab);\n}\n"
  "test.c" always "test.c"
Line 3711
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3711 always 3711
  "[test.c:5]: (error) Uninitialized struct member: ab.b\n" always "[test.c:5]: (error) Uninitialized struct member: ab.b\n"
Line 3713
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3713 always 3713
  "void f(void) {\n    struct AB ab;\n    int x;\n    ab.a = (addr)&x;\n    dostuff(&ab,0);\n}\n" always "void f(void) {\n    struct AB ab;\n    int x;\n    ab.a = (addr)&x;\n    dostuff(&ab,0);\n}\n"
  "test.c" always "test.c"
Line 3719
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3719 always 3719
  "" always ""
Line 3721
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3721 always 3721
  "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}" always "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}"
Line 3727
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3727 always 3727
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 3729
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3729 always 3729
  "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}" always "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}"
Line 3735
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3735 always 3735
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 3737
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3737 always 3737
  "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; element->v;\n}" always "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; element->v;\n}"
Line 3743
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3743 always 3743
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 3745
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3745 always 3745
  "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}" always "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}"
Line 3751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3751 always 3751
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 3753
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3753 always 3753
  "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}" always "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}"
Line 3759
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3759 always 3759
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 3761
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3761 always 3761
  "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}" always "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}"
Line 3767
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3767 always 3767
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 3769
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3769 always 3769
  "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; element->v;\n}" always "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; element->v;\n}"
Line 3775
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3775 always 3775
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 3777
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3777 always 3777
  "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}" always "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}"
Line 3783
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3783 always 3783
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 3785
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3785 always 3785
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    assign(&ab.a, 0);\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    assign(&ab.a, 0);\n}\n"
  "test.c" always "test.c"
Line 3790
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3790 always 3790
  "" always ""
Line 3792
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3792 always 3792
  "struct Cstring { char *text; int size, alloc; };\nint maybe();\nvoid f() {\n    Cstring res;\n    if ( ! maybe() ) return;\n    ( ((res).text = (void*)0), ((res).size = (res).alloc = 0) );\n}" always "struct Cstring { char *text; int size, alloc; };\nint maybe();\nvoid f() {\n    Cstring res;\n    if ( ! maybe() ) return;\n    ( ((res).text = (void*)0), ((res).size = (res).alloc = 0) );\n}"
Line 3799
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3799 always 3799
  "" always ""
Line 3802
  219 always 219
  = always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"uninitvar_funcArgInTest\">\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n  <function name=\"uninitvar_funcArgOutTest\">\n    <arg nr=\"1\" direction=\"out\"/>\n  </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"uninitvar_funcArgInTest\">\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n  <function name=\"uninitvar_funcArgOutTest\">\n    <arg nr=\"1\" direction=\"out\"/>\n  </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"uninitvar_funcArgInTest\">\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n  <function name=\"uninitvar_funcArgOutTest\">\n    <arg nr=\"1\" direction=\"out\"/>\n  </function>\n</def>"
Line 3812
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3812 always 3812
  true always 1
  argDirectionsTestXmlData always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"uninitvar_funcArgInTest\">\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n  <function name=\"uninitvar_funcArgOutTest\">\n    <arg nr=\"1\" direction=\"out\"/>\n  </function>\n</def>"
  ( always !<=-1
  argDirectionsTestXmlData always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"uninitvar_funcArgInTest\">\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n  <function name=\"uninitvar_funcArgOutTest\">\n    <arg nr=\"1\" direction=\"out\"/>\n  </function>\n</def>"
  / always 219
  ( always 1
  argDirectionsTestXmlData always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"uninitvar_funcArgInTest\">\n    <arg nr=\"1\" direction=\"in\"/>\n  </function>\n  <function name=\"uninitvar_funcArgOutTest\">\n    <arg nr=\"1\" direction=\"out\"/>\n  </function>\n</def>"
Line 3814
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3814 always 3814
  "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    uninitvar_funcArgInTest(&ab);\n    x = ab;\n}\n" always "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    uninitvar_funcArgInTest(&ab);\n    x = ab;\n}\n"
  "test.c" always "test.c"
Line 3820
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3820 always 3820
  "[test.c:5]: (error) Uninitialized struct member: ab.a\n" always "[test.c:5]: (error) Uninitialized struct member: ab.a\n"
Line 3822
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3822 always 3822
  "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    uninitvar_funcArgOutTest(&ab);\n    x = ab;\n}\n" always "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    uninitvar_funcArgOutTest(&ab);\n    x = ab;\n}\n"
  "test.c" always "test.c"
Line 3828
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3828 always 3828
  "" always ""
Line 3831
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3831 always 3831
  "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    ab.b = 0;\n    do_something(ab);\n}\n" always "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    ab.b = 0;\n    do_something(ab);\n}\n"
  "test.c" always "test.c"
Line 3839
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3839 always 3839
  "" always ""
Line 3842
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3842 always 3842
  "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(ab.a, STR);\n}\n" always "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(ab.a, STR);\n}\n"
  "test.c" always "test.c"
Line 3847
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3847 always 3847
  "" always ""
Line 3849
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3849 always 3849
  "struct AB { unsigned char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy((char *)ab.a, STR);\n}\n" always "struct AB { unsigned char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy((char *)ab.a, STR);\n}\n"
  "test.c" always "test.c"
Line 3854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3854 always 3854
  "" always ""
Line 3856
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3856 always 3856
  "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(x, ab.a);\n}\n" always "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(x, ab.a);\n}\n"
  "test.c" always "test.c"
Line 3861
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3861 always 3861
  "[test.c:4]: (error) Uninitialized variable: ab.a\n" always "[test.c:4]: (error) Uninitialized variable: ab.a\n"
  "" always ""
Line 3863
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3863 always 3863
  "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    dosomething(ab.a);\n}\n" always "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    dosomething(ab.a);\n}\n"
  "test.c" always "test.c"
Line 3868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3868 always 3868
  "" always ""
Line 3871
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3871 always 3871
  "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab = getAB();\n    do_something(ab);\n}\n" always "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab = getAB();\n    do_something(ab);\n}\n"
  "test.c" always "test.c"
Line 3878
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3878 always 3878
  "" always ""
Line 3882
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3882 always 3882
  "struct AB { int a; int b; void set(); };\nvoid f(void) {\n    struct AB ab;\n    ab.set();\n    x = ab;\n}" always "struct AB { int a; int b; void set(); };\nvoid f(void) {\n    struct AB ab;\n    ab.set();\n    x = ab;\n}"
Line 3888
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3888 always 3888
  "" always ""
Line 3890
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3890 always 3890
  "struct AB { int a; int get() const; };\nvoid f(void) {\n    struct AB ab;\n    ab.get();\n    x = ab;\n}" always "struct AB { int a; int get() const; };\nvoid f(void) {\n    struct AB ab;\n    ab.get();\n    x = ab;\n}"
Line 3896
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3896 always 3896
  "[test.cpp:5]: (error) Uninitialized struct member: ab.a\n" always "[test.cpp:5]: (error) Uninitialized struct member: ab.a\n"
Line 3898
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3898 always 3898
  "struct AB { int a; void dostuff() {} };\nvoid f(void) {\n    struct AB ab;\n    ab.dostuff();\n    x = ab;\n}" always "struct AB { int a; void dostuff() {} };\nvoid f(void) {\n    struct AB ab;\n    ab.dostuff();\n    x = ab;\n}"
Line 3904
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3904 always 3904
  "error" always "error"
  "" always ""
Line 3907
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3907 always 3907
  "struct AB { int a; struct { int b; int c; } s; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    ab.s.b = 2;\n    ab.s.c = 3;\n    do_something(ab);\n}\n" always "struct AB { int a; struct { int b; int c; } s; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    ab.s.b = 2;\n    ab.s.c = 3;\n    do_something(ab);\n}\n"
  "test.c" always "test.c"
Line 3916
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3916 always 3916
  "" always ""
Line 3918
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3918 always 3918
  "struct conf {\n    char x;\n};\n\nvoid do_something(struct conf ant_conf);\n\nvoid f(void) {\n   struct conf c;\n   initdata(&c);\n   do_something(c);\n}\n" always "struct conf {\n    char x;\n};\n\nvoid do_something(struct conf ant_conf);\n\nvoid f(void) {\n   struct conf c;\n   initdata(&c);\n   do_something(c);\n}\n"
  "test.c" always "test.c"
Line 3929
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3929 always 3929
  "" always ""
Line 3931
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3931 always 3931
  "struct PIXEL {\n    union  {\n        struct { unsigned char red,green,blue,alpha; };\n        unsigned int color;\n    };\n};\n\nunsigned char f() {\n    struct PIXEL p1;\n    p1.color = 255;\n    return p1.red;\n}" always "struct PIXEL {\n    union  {\n        struct { unsigned char red,green,blue,alpha; };\n        unsigned int color;\n    };\n};\n\nunsigned char f() {\n    struct PIXEL p1;\n    p1.color = 255;\n    return p1.red;\n}"
Line 3943
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3943 always 3943
  "" always ""
Line 3945
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3945 always 3945
  "struct AB { int a; int b; };\nint f() {\n  struct AB *ab;\n  for (i = 1; i < 10; i++) {\n    if (condition && (ab = getab()) != NULL) {\n      a = ab->a;\n    }\n  }\n}" always "struct AB { int a; int b; };\nint f() {\n  struct AB *ab;\n  for (i = 1; i < 10; i++) {\n    if (condition && (ab = getab()) != NULL) {\n      a = ab->a;\n    }\n  }\n}"
Line 3954
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3954 always 3954
  "" always ""
Line 3956
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3956 always 3956
  "struct AB { int a; int b; };\nint f(int x) {\n  struct AB *ab;\n  if (x == 0) {\n    ab = getab();\n  }\n  if (x == 0 && (ab != NULL || ab->a == 0)) { }\n}" always "struct AB { int a; int b; };\nint f(int x) {\n  struct AB *ab;\n  if (x == 0) {\n    ab = getab();\n  }\n  if (x == 0 && (ab != NULL || ab->a == 0)) { }\n}"
Line 3964
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3964 always 3964
  "" always ""
Line 3966
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3966 always 3966
  "struct A { int *x; };\nvoid foo(void *info, void*p);\nvoid bar(void) {\n  struct A *delete = 0;\n  foo( info, NULL );\n}" always "struct A { int *x; };\nvoid foo(void *info, void*p);\nvoid bar(void) {\n  struct A *delete = 0;\n  foo( info, NULL );\n}"
Line 3972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3972 always 3972
  "" always ""
Line 3974
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3974 always 3974
  "struct ABC { int a; int b; int c; };\nvoid foo(int x, const struct ABC *abc);\nvoid bar(void) {\n  struct ABC abc;\n  foo(123, &abc);\n  return abc.b;\n}" always "struct ABC { int a; int b; int c; };\nvoid foo(int x, const struct ABC *abc);\nvoid bar(void) {\n  struct ABC abc;\n  foo(123, &abc);\n  return abc.b;\n}"
Line 3981
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3981 always 3981
  "[test.cpp:5]: (error) Uninitialized struct member: abc.a\n[test.cpp:5]: (error) Uninitialized struct member: abc.b\n[test.cpp:5]: (error) Uninitialized struct member: abc.c\n" always "[test.cpp:5]: (error) Uninitialized struct member: abc.a\n[test.cpp:5]: (error) Uninitialized struct member: abc.b\n[test.cpp:5]: (error) Uninitialized struct member: abc.c\n"
  "[test.cpp:6]: (error) Uninitialized struct member: abc.b\n" always "[test.cpp:6]: (error) Uninitialized struct member: abc.b\n"
Line 3987
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3987 always 3987
  "struct ABC { int a; int b; int c; };\nvoid foo() {\n  struct ABC abc;\n  dostuff((uint32_t *)&abc.a);\n}" always "struct ABC { int a; int b; int c; };\nvoid foo() {\n  struct ABC abc;\n  dostuff((uint32_t *)&abc.a);\n}"
Line 3992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3992 always 3992
  "" always ""
Line 3994
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3994 always 3994
  "void f(void) {\n    struct tm t;\n    t.tm_year = 123;\n}" always "void f(void) {\n    struct tm t;\n    t.tm_year = 123;\n}"
Line 3998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  3998 always 3998
  "" always ""
Line 4001
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4001 always 4001
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.b;\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.b;\n}\n"
  "test.c" always "test.c"
Line 4007
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4007 always 4007
  "[test.c:5]: (error) Uninitialized struct member: ab.b\n" always "[test.c:5]: (error) Uninitialized struct member: ab.b\n"
Line 4009
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4009 always 4009
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.a;\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.a;\n}\n"
  "test.c" always "test.c"
Line 4015
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4015 always 4015
  "" always ""
Line 4017
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4017 always 4017
  "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    s.a = 0;\n    return s;\n}\n" always "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    s.a = 0;\n    return s;\n}\n"
Line 4023
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4023 always 4023
  "[test.cpp:5]: (error) Uninitialized struct member: s.b\n" always "[test.cpp:5]: (error) Uninitialized struct member: s.b\n"
Line 4025
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4025 always 4025
  "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    return s.a ? 1 : 2;\n}\n" always "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    return s.a ? 1 : 2;\n}\n"
Line 4030
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4030 always 4030
  "[test.cpp:4]: (error) Uninitialized struct member: s.a\n" always "[test.cpp:4]: (error) Uninitialized struct member: s.a\n"
Line 4033
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4033 always 4033
  "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.a == 0) { }\n}\n" always "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.a == 0) { }\n}\n"
  "test.c" always "test.c"
Line 4043
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4043 always 4043
  "" always ""
Line 4045
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4045 always 4045
  "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.b == 0) { }\n}\n" always "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.b == 0) { }\n}\n"
  "test.c" always "test.c"
  false always 0
Line 4055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4055 always 4055
  "[test.c:9]: (error) Uninitialized struct member: fred.b\n" always "[test.c:9]: (error) Uninitialized struct member: fred.b\n"
Line 4057
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4057 always 4057
  "struct Fred { int a; };\nvoid f() {\n    struct Fred fred;\n    if (fred.a==1) {}\n}" always "struct Fred { int a; };\nvoid f() {\n    struct Fred fred;\n    if (fred.a==1) {}\n}"
  "test.c" always "test.c"
Line 4062
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4062 always 4062
  "[test.c:4]: (error) Uninitialized struct member: fred.a\n" always "[test.c:4]: (error) Uninitialized struct member: fred.a\n"
Line 4064
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4064 always 4064
  "struct S { int n; int m; };\nvoid f(void) {\n struct S s;\n for (s.n = 0; s.n <= 10; s.n++) { }\n}" always "struct S { int n; int m; };\nvoid f(void) {\n struct S s;\n for (s.n = 0; s.n <= 10; s.n++) { }\n}"
  "test.c" always "test.c"
Line 4069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4069 always 4069
  "" always ""
Line 4071
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4071 always 4071
  "void test2() {\n  struct { char type; } s_d;\n  if (foo(&s_d.type)){}\n}" always "void test2() {\n  struct { char type; } s_d;\n  if (foo(&s_d.type)){}\n}"
Line 4075
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4075 always 4075
  "" always ""
Line 4078
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4078 always 4078
  "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { clear(ab); z = ab.a; }\n}" always "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { clear(ab); z = ab.a; }\n}"
Line 4083
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4083 always 4083
  "" always ""
Line 4085
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4085 always 4085
  "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { ab.a = ab.a + 1; }\n}" always "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { ab.a = ab.a + 1; }\n}"
Line 4090
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4090 always 4090
  "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n" always "[test.cpp:4]: (error) Uninitialized struct member: ab.a\n"
Line 4092
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4092 always 4092
  "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { init(&ab); z = ab.a; }\n}" always "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { init(&ab); z = ab.a; }\n}"
Line 4097
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4097 always 4097
  "" always ""
Line 4100
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4100 always 4100
  "struct AB { int a[10]; int b; };\nvoid f() {\n    struct AB ab;\n    int *p = ab.a;\n}" always "struct AB { int a[10]; int b; };\nvoid f() {\n    struct AB ab;\n    int *p = ab.a;\n}"
Line 4105
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4105 always 4105
  "" always ""
Line 4108
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4108 always 4108
  "struct A { int x; };\nvoid foo() {\n  struct A a;\n  int& x = a.x;\n  x = 0;\n  return a.x;\n}" always "struct A { int x; };\nvoid foo() {\n  struct A a;\n  int& x = a.x;\n  x = 0;\n  return a.x;\n}"
Line 4115
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4115 always 4115
  "" always ""
Line 4118
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4118 always 4118
  "struct AB { int a=1; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n    int b = ab.b;\n}" always "struct AB { int a=1; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n    int b = ab.b;\n}"
Line 4124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4124 always 4124
  "[test.cpp:5]: (error) Uninitialized struct member: ab.b\n" always "[test.cpp:5]: (error) Uninitialized struct member: ab.b\n"
Line 4127
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4127 always 4127
  "struct A {\n    std::map<int, int> m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" always "struct A {\n    std::map<int, int> m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}"
Line 4135
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4135 always 4135
  "" always ""
Line 4138
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4138 always 4138
  "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" always "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}"
  "test.cpp" always "test.cpp"
Line 4146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4146 always 4146
  "" always ""
Line 4149
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4149 always 4149
  "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" always "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}"
  "test.c" always "test.c"
Line 4157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4157 always 4157
  "[test.c:7]: (error) Uninitialized struct member: a.m\n" always "[test.c:7]: (error) Uninitialized struct member: a.m\n"
Line 4160
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4160 always 4160
  "class C { C(); }\nstruct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" always "class C { C(); }\nstruct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}"
Line 4169
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4169 always 4169
  "" always ""
Line 4172
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4172 always 4172
  "struct S { char *p; int len; };\nvoid f() {\n    S s;\n    s.p = nullptr;\n    char* q = (s).p;\n}\n" always "struct S { char *p; int len; };\nvoid f() {\n    S s;\n    s.p = nullptr;\n    char* q = (s).p;\n}\n"
Line 4178
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4178 always 4178
  "" always ""
Line 4185
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4185 always 4185
  "void f() {\n    int x;\n    while (a) {\n        x = x + 1;\n    }\n}" always "void f() {\n    int x;\n    while (a) {\n        x = x + 1;\n    }\n}"
Line 4191
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4191 always 4191
  "[test.cpp:4]: (error) Uninitialized variable: x\n" always "[test.cpp:4]: (error) Uninitialized variable: x\n"
Line 4193
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4193 always 4193
  "void f() {\n    int x;\n    do {\n        x = x + 1;\n    } while (a);\n}" always "void f() {\n    int x;\n    do {\n        x = x + 1;\n    } while (a);\n}"
Line 4199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4199 always 4199
  "[test.cpp:4]: (error) Uninitialized variable: x\n" always "[test.cpp:4]: (error) Uninitialized variable: x\n"
Line 4201
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4201 always 4201
  "void f() {\n    for (int x = x; x < 10; x++) {}\n}" always "void f() {\n    for (int x = x; x < 10; x++) {}\n}"
Line 4204
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4204 always 4204
  "[test.cpp:2]: (error) Uninitialized variable: x\n" always "[test.cpp:2]: (error) Uninitialized variable: x\n"
Line 4207
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4207 always 4207
  "void f() {\n    for (Element *ptr3 = ptr3->Next(); ptr3; ptr3 = ptr3->Next()) {}\n}" always "void f() {\n    for (Element *ptr3 = ptr3->Next(); ptr3; ptr3 = ptr3->Next()) {}\n}"
Line 4210
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4210 always 4210
  "[test.cpp:2]: (error) Uninitialized variable: ptr3\n" always "[test.cpp:2]: (error) Uninitialized variable: ptr3\n"
Line 4213
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4213 always 4213
  "void f() {\n    int x;\n    while (a) {\n        init(&x);\n        x++;\n    }\n}" always "void f() {\n    int x;\n    while (a) {\n        init(&x);\n        x++;\n    }\n}"
Line 4220
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4220 always 4220
  "" always ""
Line 4222
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4222 always 4222
  "void f() {\n    int x;\n    while (a) {\n        if (b) x++;\n        else x = 0;\n    }\n}" always "void f() {\n    int x;\n    while (a) {\n        if (b) x++;\n        else x = 0;\n    }\n}"
Line 4229
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4229 always 4229
  "" always ""
Line 4231
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4231 always 4231
  "void f() {\n    int x;\n    for (int i = 0; i < 10; i += x) {\n        x = y;\n    }\n}" always "void f() {\n    int x;\n    for (int i = 0; i < 10; i += x) {\n        x = y;\n    }\n}"
Line 4237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4237 always 4237
  "" always ""
Line 4239
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4239 always 4239
  "void f() {\n    int x;\n    for (int i = 0; i < 10; i += x) { }\n}" always "void f() {\n    int x;\n    for (int i = 0; i < 10; i += x) { }\n}"
Line 4243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4243 always 4243
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 4245
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4245 always 4245
  "int f() {\n    int i;\n    for (i=0;i<9;++i)\n        if (foo()) return i;\n    return 9;\n}" always "int f() {\n    int i;\n    for (i=0;i<9;++i)\n        if (foo()) return i;\n    return 9;\n}"
Line 4251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4251 always 4251
  "" always ""
Line 4253
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4253 always 4253
  "void f() {\n    int i;\n    do {} while (!getvalue(&i));\n    i++;\n}" always "void f() {\n    int i;\n    do {} while (!getvalue(&i));\n    i++;\n}"
Line 4258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4258 always 4258
  "" always ""
Line 4260
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4260 always 4260
  "int f(void) {\n   int x;\n   while (a()) {\n       if (b()) {\n           x = 1;\n           break;       }\n   }\n   return x;\n}" always "int f(void) {\n   int x;\n   while (a()) {\n       if (b()) {\n           x = 1;\n           break;       }\n   }\n   return x;\n}"
Line 4270
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4270 always 4270
  "error" always "error"
  "" always ""
Line 4272
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4272 always 4272
  "int f(void) {\n   int x;\n   while (a()) {\n       if (b() && (x=1)) {\n           return x;\n       }\n   }\n   return 0;\n}" always "int f(void) {\n   int x;\n   while (a()) {\n       if (b() && (x=1)) {\n           return x;\n       }\n   }\n   return 0;\n}"
Line 4281
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4281 always 4281
  "" always ""
Line 4284
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4284 always 4284
  "void f(void) {\n   int x;\n   for (;;) {\n       int a = x+1;\n       do_something(a);\n   }\n}" always "void f(void) {\n   int x;\n   for (;;) {\n       int a = x+1;\n       do_something(a);\n   }\n}"
Line 4291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4291 always 4291
  "[test.cpp:4]: (error) Uninitialized variable: x\n" always "[test.cpp:4]: (error) Uninitialized variable: x\n"
Line 4293
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4293 always 4293
  "struct AB {int a; int b;};\nvoid f(void) {\n   struct AB ab;\n   while (true) {\n       int a = 1+ab.a;\n       do_something(a);\n   }\n}\n" always "struct AB {int a; int b;};\nvoid f(void) {\n   struct AB ab;\n   while (true) {\n       int a = 1+ab.a;\n       do_something(a);\n   }\n}\n"
  "test.c" always "test.c"
Line 4301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4301 always 4301
  "[test.c:5]: (error) Uninitialized struct member: ab.a\n" always "[test.c:5]: (error) Uninitialized struct member: ab.a\n"
Line 4303
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4303 always 4303
  "void f(int i) {\n    float *buffer;\n    if(i>10) buffer = f;\n    if(i>10) {\n        for (int i=0;i<10;i++)\n            buffer[i] = 0;\n    }\n}" always "void f(int i) {\n    float *buffer;\n    if(i>10) buffer = f;\n    if(i>10) {\n        for (int i=0;i<10;i++)\n            buffer[i] = 0;\n    }\n}"
Line 4311
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4311 always 4311
  "" always ""
Line 4313
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4313 always 4313
  "void f(){\n    int x;\n    for (int i = 0; i < 10; i++) {\n        asm(\"foo\");\n        if (x & 0xf1) { }\n    }\n}" always "void f(){\n    int x;\n    for (int i = 0; i < 10; i++) {\n        asm(\"foo\");\n        if (x & 0xf1) { }\n    }\n}"
Line 4320
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4320 always 4320
  "" always ""
Line 4322
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4322 always 4322
  "static void f(void) {\n    struct ABC *abc;\n    for (i = 0; i < 10; i++)\n        x += sizeof(*abc);\n}" always "static void f(void) {\n    struct ABC *abc;\n    for (i = 0; i < 10; i++)\n        x += sizeof(*abc);\n}"
Line 4327
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4327 always 4327
  "" always ""
Line 4329
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4329 always 4329
  "void f(void) {\n    int i;\n    while (x) {\n        for (i = 0; i < 5; i++)\n            a[i] = b[i];\n    }\n}" always "void f(void) {\n    int i;\n    while (x) {\n        for (i = 0; i < 5; i++)\n            a[i] = b[i];\n    }\n}"
Line 4336
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4336 always 4336
  "" always ""
Line 4338
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4338 always 4338
  "void f(void) {\n    struct Foo *foo;\n    while (true) {\n            foo = malloc(sizeof(*foo));\n            foo->x = 0;\n    }\n}" always "void f(void) {\n    struct Foo *foo;\n    while (true) {\n            foo = malloc(sizeof(*foo));\n            foo->x = 0;\n    }\n}"
Line 4345
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4345 always 4345
  "" always ""
Line 4347
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4347 always 4347
  "void f(void) {\n  int i;\n  while (x) {\n    for (i=0,y=i;;){}\n  }\n}" always "void f(void) {\n  int i;\n  while (x) {\n    for (i=0,y=i;;){}\n  }\n}"
Line 4353
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4353 always 4353
  "" always ""
Line 4355
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4355 always 4355
  "void f() {\n  char *p = (char *)malloc(256);\n  while(*p && *p == '_')\n    p++;\n}" always "void f() {\n  char *p = (char *)malloc(256);\n  while(*p && *p == '_')\n    p++;\n}"
Line 4360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4360 always 4360
  "[test.cpp:3]: (error) Memory is allocated but not initialized: *p\n" always "[test.cpp:3]: (error) Memory is allocated but not initialized: *p\n"
Line 4363
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4363 always 4363
  "void f() {\n  for (int i;;i++)\n    dostuff(&i);\n}" always "void f() {\n  for (int i;;i++)\n    dostuff(&i);\n}"
Line 4367
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4367 always 4367
  "" always ""
Line 4370
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4370 always 4370
  "void f() {\n  for (int i;;i++)\n    a=i;\n}" always "void f() {\n  for (int i;;i++)\n    a=i;\n}"
Line 4374
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4374 always 4374
  "[test.cpp:2]: (error) Uninitialized variable: i\n" always "[test.cpp:2]: (error) Uninitialized variable: i\n"
Line 4376
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4376 always 4376
  "namespace N {\n    template<typename T>\n    class C {};\n    using V = class C<void>;\n}\nint f() {\n    int r = 0;\n    for (int x; x < 4; x++)\n        r += x;\n    return r;\n}\n" always "namespace N {\n    template<typename T>\n    class C {};\n    using V = class C<void>;\n}\nint f() {\n    int r = 0;\n    for (int x; x < 4; x++)\n        r += x;\n    return r;\n}\n"
Line 4387
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4387 always 4387
  "[test.cpp:8]: (error) Uninitialized variable: x\n" always "[test.cpp:8]: (error) Uninitialized variable: x\n"
Line 4391
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4391 always 4391
  "namespace N1 {\n    class Fred {\n    public:\n        static void f1(char *p) { *p = 0; }\n    };\n    void fa(void) { char *p; Fred::f1(p); }\n    void fb(void) { char *p; Fred::f2(p); }\n    void fc(void) { char *p; ::N1::Fred::f1(p); }\n    void fd(void) { char *p; ::N1::Fred::f2(p); }\n}\nnamespace N2 {\n    static void f1(char *p) { *p = 0; }\n    void fa(void) { char *p; f1(p); }\n    void fb(void) { char *p; f2(p); }\n    void fc(void) { char *p; N1::Fred::f1(p); }\n    void fd(void) { char *p; N1::Fred::f2(p); }\n    void fe(void) { char *p; ::N1::Fred::f1(p); }\n    void ff(void) { char *p; ::N1::Fred::f2(p); }\n    void fg(void) { char *p; Foo::f1(p); }\n    void fh(void) { char *p; Foo::f2(p); }\n}" always "namespace N1 {\n    class Fred {\n    public:\n        static void f1(char *p) { *p = 0; }\n    };\n    void fa(void) { char *p; Fred::f1(p); }\n    void fb(void) { char *p; Fred::f2(p); }\n    void fc(void) { char *p; ::N1::Fred::f1(p); }\n    void fd(void) { char *p; ::N1::Fred::f2(p); }\n}\nnamespace N2 {\n    static void f1(char *p) { *p = 0; }\n    void fa(void) { char *p; f1(p); }\n    void fb(void) { char *p; f2(p); }\n    void fc(void) { char *p; N1::Fred::f1(p); }\n    void fd(void) { char *p; N1::Fred::f2(p); }\n    void fe(void) { char *p; ::N1::Fred::f1(p); }\n    void ff(void) { char *p; ::N1::Fred::f2(p); }\n    void fg(void) { char *p; Foo::f1(p); }\n    void fh(void) { char *p; Foo::f2(p); }\n}"
Line 4412
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4412 always 4412
  "[test.cpp:6]: (error) Uninitialized variable: p\n[test.cpp:8]: (error) Uninitialized variable: p\n[test.cpp:13]: (error) Uninitialized variable: p\n[test.cpp:15]: (error) Uninitialized variable: p\n[test.cpp:17]: (error) Uninitialized variable: p\n" always "[test.cpp:6]: (error) Uninitialized variable: p\n[test.cpp:8]: (error) Uninitialized variable: p\n[test.cpp:13]: (error) Uninitialized variable: p\n[test.cpp:15]: (error) Uninitialized variable: p\n[test.cpp:17]: (error) Uninitialized variable: p\n"
Line 4418
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4418 always 4418
  "class Fred {\npublic:\n    void f1(char *p) { *p = 0; }\n};\nFred fred;\nvoid f(void) {\n    char *p;\n    fred.f1(p);\n}" always "class Fred {\npublic:\n    void f1(char *p) { *p = 0; }\n};\nFred fred;\nvoid f(void) {\n    char *p;\n    fred.f1(p);\n}"
Line 4427
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4427 always 4427
  "[test.cpp:8]: (error) Uninitialized variable: p\n" always "[test.cpp:8]: (error) Uninitialized variable: p\n"
Line 4429
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4429 always 4429
  "class Fred {\npublic:\n    class Wilma {\n    public:\n        class Barney {\n        public:\n            class Betty {\n            public:\n                void f1(char *p) { *p = 0; }\n            };\n            Betty betty;\n        };\n        Barney barney;\n    };\n    Wilma wilma;\n};\nFred fred;\nvoid f(void) {\n    char *p;\n    fred.wilma.barney.betty.f1(p);\n}" always "class Fred {\npublic:\n    class Wilma {\n    public:\n        class Barney {\n        public:\n            class Betty {\n            public:\n                void f1(char *p) { *p = 0; }\n            };\n            Betty betty;\n        };\n        Barney barney;\n    };\n    Wilma wilma;\n};\nFred fred;\nvoid f(void) {\n    char *p;\n    fred.wilma.barney.betty.f1(p);\n}"
Line 4450
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4450 always 4450
  "[test.cpp:20]: (error) Uninitialized variable: p\n" always "[test.cpp:20]: (error) Uninitialized variable: p\n"
Line 4454
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4454 always 4454
  "int f() {\n    int *p = (int*)malloc(40);\n    return *p;\n}" always "int f() {\n    int *p = (int*)malloc(40);\n    return *p;\n}"
Line 4458
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4458 always 4458
  "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n" always "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n"
Line 4460
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4460 always 4460
  "void f() {\n    int *p = (int*)malloc(40);\n    int var = *p;\n}" always "void f() {\n    int *p = (int*)malloc(40);\n    int var = *p;\n}"
Line 4464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4464 always 4464
  "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n" always "[test.cpp:3]: (error) Memory is allocated but not initialized: p\n"
Line 4466
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4466 always 4466
  "struct AB { int a; int b; };\nint f() {\n    struct AB *ab = (AB*)malloc(sizeof(struct AB));\n    return ab->a;\n}" always "struct AB { int a; int b; };\nint f() {\n    struct AB *ab = (AB*)malloc(sizeof(struct AB));\n    return ab->a;\n}"
Line 4471
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4471 always 4471
  "[test.cpp:4]: (error) Memory is allocated but not initialized: ab\n[test.cpp:4]: (error) Uninitialized struct member: ab.a\n" always "[test.cpp:4]: (error) Memory is allocated but not initialized: ab\n[test.cpp:4]: (error) Uninitialized struct member: ab.a\n"
Line 4475
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4475 always 4475
  "struct t_udf_file {  int dir_left; };\n\nvoid f() {\n  struct t_udf_file *newf;\n  newf = malloc(sizeof(*newf));\n  if (!newf) {};\n}" always "struct t_udf_file {  int dir_left; };\n\nvoid f() {\n  struct t_udf_file *newf;\n  newf = malloc(sizeof(*newf));\n  if (!newf) {};\n}"
Line 4482
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4482 always 4482
  "" always ""
Line 4484
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4484 always 4484
  "void f() {\n    char *s = malloc(100);\n    if (s != NULL) { }\n}" always "void f() {\n    char *s = malloc(100);\n    if (s != NULL) { }\n}"
Line 4488
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4488 always 4488
  "" always ""
Line 4490
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4490 always 4490
  "void f() {\n    char *p = malloc(100);\n    p || assert_failed();\n}" always "void f() {\n    char *p = malloc(100);\n    p || assert_failed();\n}"
Line 4494
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4494 always 4494
  "" always ""
Line 4496
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4496 always 4496
  "void f() {\n    char *p = malloc(100);\n    x = p;\n}" always "void f() {\n    char *p = malloc(100);\n    x = p;\n}"
Line 4500
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4500 always 4500
  "" always ""
Line 4502
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4502 always 4502
  "int* f() {\n    int *p = (int*)malloc(40);\n    return p;\n}" always "int* f() {\n    int *p = (int*)malloc(40);\n    return p;\n}"
Line 4506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4506 always 4506
  "" always ""
Line 4509
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4509 always 4509
  "int f(int *p) {\n    if (*p == 1) {}\n    p = (int*)malloc(256);\n    return *p;\n}" always "int f(int *p) {\n    if (*p == 1) {}\n    p = (int*)malloc(256);\n    return *p;\n}"
Line 4514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4514 always 4514
  "[test.cpp:4]: (error) Memory is allocated but not initialized: p\n" always "[test.cpp:4]: (error) Memory is allocated but not initialized: p\n"
Line 4516
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4516 always 4516
  "struct AB { int a; int b; };\nint f(struct AB *ab) {\n    if (ab->a == 1) {}\n    ab = (AB*)malloc(sizeof(struct AB));\n    return ab->a;\n}" always "struct AB { int a; int b; };\nint f(struct AB *ab) {\n    if (ab->a == 1) {}\n    ab = (AB*)malloc(sizeof(struct AB));\n    return ab->a;\n}"
Line 4522
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4522 always 4522
  "[test.cpp:5]: (error) Uninitialized struct member: ab.a\n" always "[test.cpp:5]: (error) Uninitialized struct member: ab.a\n"
Line 4524
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4524 always 4524
  "struct AB { int a; int b; };\nvoid do_something(struct AB *ab);\nvoid f() {\n    struct AB *ab = (AB*)malloc(sizeof(struct AB));\n    do_something(ab);\n}" always "struct AB { int a; int b; };\nvoid do_something(struct AB *ab);\nvoid f() {\n    struct AB *ab = (AB*)malloc(sizeof(struct AB));\n    do_something(ab);\n}"
Line 4530
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4530 always 4530
  "" always ""
Line 4533
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4533 always 4533
  "void *vlc_custom_create (vlc_object_t *parent, size_t length, const char *typename) {\n  assert (length >= sizeof (vlc_object_t));\n}" always "void *vlc_custom_create (vlc_object_t *parent, size_t length, const char *typename) {\n  assert (length >= sizeof (vlc_object_t));\n}"
Line 4536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4536 always 4536
  "" always ""
Line 4540
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4540 always 4540
  "struct B { int asd; };\nint f() {\n    int a=0;\n    struct B *b;\n    if (x) {\n        a = 1;\n        b = p;\n    }\n    return a ? b->asd : 0;\n}" always "struct B { int asd; };\nint f() {\n    int a=0;\n    struct B *b;\n    if (x) {\n        a = 1;\n        b = p;\n    }\n    return a ? b->asd : 0;\n}"
Line 4550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4550 always 4550
  "" always ""
Line 4554
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4554 always 4554
  "void function(Entry& entry) {\n    for (auto* expr : entry.exprs) {\n        expr->operate();\n        expr->operate();\n    }\n}" always "void function(Entry& entry) {\n    for (auto* expr : entry.exprs) {\n        expr->operate();\n        expr->operate();\n    }\n}"
Line 4560
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4560 always 4560
  "" always ""
Line 4562
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4562 always 4562
  "void f() {\n    int *item;\n    for (item: itemList) {}\n}" always "void f() {\n    int *item;\n    for (item: itemList) {}\n}"
Line 4566
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4566 always 4566
  "" always ""
Line 4568
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4568 always 4568
  "void f() {\n    int buf[10];\n    for (int &i: buf) { i = 0; }\n}" always "void f() {\n    int buf[10];\n    for (int &i: buf) { i = 0; }\n}"
Line 4572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4572 always 4572
  "" always ""
Line 4576
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4576 always 4576
  "struct X {   typedef struct { int p; } P_t;   static int arr[]; }; int X::arr[] = {42}; void f() {   std::vector<X::P_t> result;   X::P_t P;   P.p = 0;   result.push_back(P); }" always "struct X {   typedef struct { int p; } P_t;   static int arr[]; }; int X::arr[] = {42}; void f() {   std::vector<X::P_t> result;   X::P_t P;   P.p = 0;   result.push_back(P); }"
Line 4587
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4587 always 4587
  "" always ""
Line 4591
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4591 always 4591
  "struct AB { int a; int b; };\nvoid f() {\n    struct AB *ab = (struct AB*)calloc(1, sizeof(*ab));\n}" always "struct AB { int a; int b; };\nvoid f() {\n    struct AB *ab = (struct AB*)calloc(1, sizeof(*ab));\n}"
Line 4595
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4595 always 4595
  "" always ""
Line 4599
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4599 always 4599
  "void pickup(int a) {\nbool using_planner_action;\nif (a)   {\n  using_planner_action = false;\n}\nelse {\n  try\n  {}\n  catch (std::exception &ex) {\n    return;\n  }\n  using_planner_action = true;\n}\nif (using_planner_action) {}\n}" always "void pickup(int a) {\nbool using_planner_action;\nif (a)   {\n  using_planner_action = false;\n}\nelse {\n  try\n  {}\n  catch (std::exception &ex) {\n    return;\n  }\n  using_planner_action = true;\n}\nif (using_planner_action) {}\n}"
Line 4614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4614 always 4614
  "" always ""
Line 4618
  183 always 183
  = always "struct flex_array {};\nstruct cgroup_taskset {};\nvoid cgroup_attach_task() {\n  struct flex_array *group;\n  struct cgroup_taskset tset = { };\n  do { } while_each_thread(leader, tsk);\n}"
  "struct flex_array {};\nstruct cgroup_taskset {};\nvoid cgroup_attach_task() {\n  struct flex_array *group;\n  struct cgroup_taskset tset = { };\n  do { } while_each_thread(leader, tsk);\n}" always "struct flex_array {};\nstruct cgroup_taskset {};\nvoid cgroup_attach_task() {\n  struct flex_array *group;\n  struct cgroup_taskset tset = { };\n  do { } while_each_thread(leader, tsk);\n}"
Line 4625
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4625 always 4625
  code always "struct flex_array {};\nstruct cgroup_taskset {};\nvoid cgroup_attach_task() {\n  struct flex_array *group;\n  struct cgroup_taskset tset = { };\n  do { } while_each_thread(leader, tsk);\n}"
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4625 always 4625
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4625 always 4625
  false always 0
Line 4629
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4629 always 4629
  "void DES_ede3_ofb64_encrypt() {\n  DES_cblock d;\n  char *dp;\n  dp=(char *)d;\n  init(dp);\n}" always "void DES_ede3_ofb64_encrypt() {\n  DES_cblock d;\n  char *dp;\n  dp=(char *)d;\n  init(dp);\n}"
  "test.c" always "test.c"
Line 4638
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 4641
  "" always ""
Line 4644
  = always 0
  false always 0
Line 4647
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 4648
  code possible {"struct foo{char *bar;};\nvoid f(unsigned long long *p) {\n    foo a;\n    ((&a)->bar) =  reinterpret_cast<char*>(*p);\n    if ((&a)->bar) ;\n}"@9,"struct foo{char *bar;};\nvoid f(unsigned long long *p) {\n    foo a;\n    ((&(a))->bar) =  reinterpret_cast<char*>(*p);\n    if ((&a)->bar) ;\n}"@10,"struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A::B>& x) {\n    A::B b;\n    b.i = 123;\n    x.push_back(b);\n}\n"@11,"struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A::B>& x) {\n    A::B b;\n    x.push_back(b);\n}\n"@12,"struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A>&x) {\n    A a;\n    a.j = 123;\n    x.push_back(a);\n}\n"@13,"struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A>& x) {\n    A a;\n    x.push_back(a);\n}\n"@14,"struct S { struct T { int* p; } t[2]; };\nvoid f() {\n    S s;\n    *&s.t[0].p = 0;\n}\nvoid g() {\n    S s;\n    ((*&(*&s.t[0].p))) = 0;\n}\n"@15,"struct S { int i; };\nvoid f() {\n    struct S s;\n    int x = -3;\n    int y = x < (1, s.i);\n}\n"@16,"void f() {\n    char a[10];\n    char c = *a;\n}"@17,"void f() {\n    char a[SIZE+10];\n    char c = *a;\n}"@18}
Line 4649
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testuninitvar.cpp"@9,"cppcheck-2.8/test/testuninitvar.cpp"@10,"cppcheck-2.8/test/testuninitvar.cpp"@11,"cppcheck-2.8/test/testuninitvar.cpp"@12,"cppcheck-2.8/test/testuninitvar.cpp"@13,"cppcheck-2.8/test/testuninitvar.cpp"@14,"cppcheck-2.8/test/testuninitvar.cpp"@15,"cppcheck-2.8/test/testuninitvar.cpp"@16,"cppcheck-2.8/test/testuninitvar.cpp"@17,"cppcheck-2.8/test/testuninitvar.cpp"@18}
  line inconclusive {6312@9,6320@10,6328@11,6341@12,6353@13,6365@14,6377@15,6388@16,6257@17,6264@18}
  fname inconclusive {"test.c"@35,"test.c"@37,"test.c"@38,"test.c"@39,"test.c"@40,"test.c"@49,"test.c"@51,"test.c"@52,"test.c"@53,"test.c"@54}
Line 4652
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 4659
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4659 always 4659
  "typedef struct\n{\n    int x;\n    unsigned int flag : 1;\n} status;\nbool foo(const status * const s)\n{\n    return s->flag;\n}\nvoid bar(const status * const s)\n{\n    if( foo(s) == 1) {;}\n}\nvoid f(void)\n{\n    status s;\n    s.x = 42;\n    bar(&s);\n}" always "typedef struct\n{\n    int x;\n    unsigned int flag : 1;\n} status;\nbool foo(const status * const s)\n{\n    return s->flag;\n}\nvoid bar(const status * const s)\n{\n    if( foo(s) == 1) {;}\n}\nvoid f(void)\n{\n    status s;\n    s.x = 42;\n    bar(&s);\n}"
Line 4678
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4678 always 4678
  "[test.cpp:18] -> [test.cpp:12] -> [test.cpp:8]: (error) Uninitialized variable: s->flag\n" always "[test.cpp:18] -> [test.cpp:12] -> [test.cpp:8]: (error) Uninitialized variable: s->flag\n"
Line 4682
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4682 always 4682
  "void foo() {\n    int a;\n    b = c - a;\n}" always "void foo() {\n    int a;\n    b = c - a;\n}"
Line 4686
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4686 always 4686
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 4688
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4688 always 4688
  "void foo() {\n    int a;\n    b = a - c;\n}" always "void foo() {\n    int a;\n    b = a - c;\n}"
Line 4692
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4692 always 4692
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 4696
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4696 always 4696
  "void foo() {\n    const int a;\n    b = c - a;\n}" always "void foo() {\n    const int a;\n    b = c - a;\n}"
Line 4700
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4700 always 4700
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 4703
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4703 always 4703
  "void foo() {\n    int *p;\n    realloc(p,10);\n}" always "void foo() {\n    int *p;\n    realloc(p,10);\n}"
Line 4707
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4707 always 4707
  "[test.cpp:3]: (error) Uninitialized variable: p\n" always "[test.cpp:3]: (error) Uninitialized variable: p\n"
Line 4709
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4709 always 4709
  "void foo() {\n    char *p = malloc(100);\n    char *tmp = realloc(p,1000);\n    if (!tmp) free(p);\n}" always "void foo() {\n    char *p = malloc(100);\n    char *tmp = realloc(p,1000);\n    if (!tmp) free(p);\n}"
Line 4714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4714 always 4714
  "" always ""
Line 4716
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4716 always 4716
  "void foo() {\n    int *p = NULL;\n    realloc(p,10);\n}" always "void foo() {\n    int *p = NULL;\n    realloc(p,10);\n}"
Line 4720
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4720 always 4720
  "" always ""
Line 4722
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4722 always 4722
  "void f() {\n  int x;\n  switch (x) {}\n}" always "void f() {\n  int x;\n  switch (x) {}\n}"
Line 4726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4726 always 4726
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 4728
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4728 always 4728
  "int f() {\n  int x;\n  init(x);\n  return x;\n}" always "int f() {\n  int x;\n  init(x);\n  return x;\n}"
Line 4733
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4733 always 4733
  "" always ""
Line 4735
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4735 always 4735
  "void f() {\n  char **x;\n  if (2 < sizeof(*x)) {}\n}" always "void f() {\n  char **x;\n  if (2 < sizeof(*x)) {}\n}"
Line 4739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4739 always 4739
  "" always ""
Line 4741
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4741 always 4741
  "void foo() {\n    int a;\n    int x[] = {a,2};\n}" always "void foo() {\n    int a;\n    int x[] = {a,2};\n}"
Line 4745
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4745 always 4745
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 4747
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4747 always 4747
  "void foo()\n{\n    int x;\n    int *y = &x;\n}" always "void foo()\n{\n    int x;\n    int *y = &x;\n}"
Line 4752
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4752 always 4752
  "" always ""
Line 4754
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4754 always 4754
  "void foo()\n{\n    int *x;\n    int *&y = x;\n    y = nullptr;\n}" always "void foo()\n{\n    int *x;\n    int *&y = x;\n    y = nullptr;\n}"
Line 4760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4760 always 4760
  "" always ""
Line 4762
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4762 always 4762
  "void foo()\n{\n    int x = xyz::x;\n}" always "void foo()\n{\n    int x = xyz::x;\n}"
Line 4766
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4766 always 4766
  "" always ""
Line 4768
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4768 always 4768
  "void f()\n{\n    extern int a;\n    a++;\n}" always "void f()\n{\n    extern int a;\n    a++;\n}"
Line 4773
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4773 always 4773
  "" always ""
Line 4775
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4775 always 4775
  "static void foo()\n{\n    int x, y;\n    x = (y = 10);\n    int z = y * 2;\n}" always "static void foo()\n{\n    int x, y;\n    x = (y = 10);\n    int z = y * 2;\n}"
Line 4781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4781 always 4781
  "" always ""
Line 4783
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4783 always 4783
  "static void foo() {\n    int x, y;\n    x = ((y) = 10);\n}" always "static void foo() {\n    int x, y;\n    x = ((y) = 10);\n}"
Line 4787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4787 always 4787
  "" always ""
Line 4789
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4789 always 4789
  "static void foo()\n{\n    Foo p;\n    p.abcd();\n}" always "static void foo()\n{\n    Foo p;\n    p.abcd();\n}"
Line 4794
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4794 always 4794
  "" always ""
Line 4796
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4796 always 4796
  "static void foo()\n{\n    Foo p;\n    int x = p.abcd();\n}" always "static void foo()\n{\n    Foo p;\n    int x = p.abcd();\n}"
Line 4801
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4801 always 4801
  "" always ""
Line 4804
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4804 always 4804
  "struct AB { int a; int b; };\nvoid f(void) {\n  AB ab;\n  AB *p = &ab;\n  p->a = 1;\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n  AB ab;\n  AB *p = &ab;\n  p->a = 1;\n}\n"
Line 4810
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4810 always 4810
  "" always ""
Line 4812
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4812 always 4812
  "struct S {\n    S& rIo;\n    S(S&);\n    void Write();\n};\nvoid foo(bool b, struct S &io) {\n    S* p;\n    if (b)\n        p = new S(io);\n    p->Write();\n}" always "struct S {\n    S& rIo;\n    S(S&);\n    void Write();\n};\nvoid foo(bool b, struct S &io) {\n    S* p;\n    if (b)\n        p = new S(io);\n    p->Write();\n}"
Line 4823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4823 always 4823
  "[test.cpp:8] -> [test.cpp:10]: (error) Uninitialized variable: p.rIo\n" always "[test.cpp:8] -> [test.cpp:10]: (error) Uninitialized variable: p.rIo\n"
Line 4827
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4827 always 4827
  "void a()\n{\n    A ret;\n    return ret;\n}" always "void a()\n{\n    A ret;\n    return ret;\n}"
Line 4832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4832 always 4832
  "" always ""
Line 4835
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4835 always 4835
  "void f(float x) {\n  union lf { long l; float f; } u_lf;\n  float hx = (u_lf.f = (x), u_lf.l);\n}" always "void f(float x) {\n  union lf { long l; float f; } u_lf;\n  float hx = (u_lf.f = (x), u_lf.l);\n}"
Line 4839
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4839 always 4839
  "" always ""
Line 4842
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4842 always 4842
  "void a()\n{\n    int x[10];\n    int *y = x;\n}" always "void a()\n{\n    int x[10];\n    int *y = x;\n}"
Line 4847
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4847 always 4847
  "" always ""
Line 4849
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4849 always 4849
  "void a()\n{\n    int x;\n    int *y = &x;\n    *y = 0;\n    x++;\n}" always "void a()\n{\n    int x;\n    int *y = &x;\n    *y = 0;\n    x++;\n}"
Line 4856
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4856 always 4856
  "" always ""
Line 4858
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4858 always 4858
  "void a()\n{\n    char x[10], y[10];\n    char *z = x;\n    memset(z, 0, sizeof(x));\n    memcpy(y, x, sizeof(x));\n}" always "void a()\n{\n    char x[10], y[10];\n    char *z = x;\n    memset(z, 0, sizeof(x));\n    memcpy(y, x, sizeof(x));\n}"
Line 4865
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4865 always 4865
  "" always ""
Line 4869
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4869 always 4869
  "int a() {\n    int ret;\n    std::cin >> ret;\n    ret++;\n}" always "int a() {\n    int ret;\n    std::cin >> ret;\n    ret++;\n}"
Line 4874
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4874 always 4874
  "" always ""
Line 4876
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4876 always 4876
  "void f(int b) {\n    int a;\n    std::cin >> b >> a;\n    return a;}" always "void f(int b) {\n    int a;\n    std::cin >> b >> a;\n    return a;}"
Line 4881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4881 always 4881
  "" always ""
Line 4883
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4883 always 4883
  "void foo() {\n    Node node;\n    int x;\n    node[\"abcd\"] >> x;\n}" always "void foo() {\n    Node node;\n    int x;\n    node[\"abcd\"] >> x;\n}"
Line 4888
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4888 always 4888
  "" always ""
Line 4890
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4890 always 4890
  "int a(FArchive &arc) {\n    int *p;\n    arc << p;\n    return *p;\n}" always "int a(FArchive &arc) {\n    int *p;\n    arc << p;\n    return *p;\n}"
Line 4895
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4895 always 4895
  "[test.cpp:3]: (error) Uninitialized variable: p\n" always "[test.cpp:3]: (error) Uninitialized variable: p\n"
Line 4898
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4898 always 4898
  "void f() {\n    int a;\n    a << 1;\n    return a;\n}" always "void f() {\n    int a;\n    a << 1;\n    return a;\n}"
Line 4903
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4903 always 4903
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 4906
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4906 always 4906
  "struct S {\n    int one;\n    int two;\n};\n\nvoid test(std::istringstream& in) {\n    S p;\n    in >> p.one >> p.two;\n}" always "struct S {\n    int one;\n    int two;\n};\n\nvoid test(std::istringstream& in) {\n    S p;\n    in >> p.one >> p.two;\n}"
Line 4915
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4915 always 4915
  "" always ""
Line 4918
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4918 always 4918
  "struct S { int x; };\nvoid f() {\n    S s;\n    return s(1);\n}" always "struct S { int x; };\nvoid f() {\n    S s;\n    return s(1);\n}"
Line 4923
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4923 always 4923
  "" always ""
Line 4925
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4925 always 4925
  "void a() {\n    int x;\n    asm();\n    x++;\n}" always "void a() {\n    int x;\n    asm();\n    x++;\n}"
Line 4930
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4930 always 4930
  "" always ""
Line 4932
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4932 always 4932
  "void a()\n{\n    int x[10];\n    struct xyz xyz1 = { .x = x };\n}" always "void a()\n{\n    int x[10];\n    struct xyz xyz1 = { .x = x };\n}"
Line 4937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4937 always 4937
  "" always ""
Line 4939
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4939 always 4939
  "void foo()\n{\n   char *buf = malloc(100);\n   struct ABC *abc = buf;\n}" always "void foo()\n{\n   char *buf = malloc(100);\n   struct ABC *abc = buf;\n}"
Line 4944
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4944 always 4944
  "" always ""
Line 4946
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4946 always 4946
  "class Fred {\npublic:\n    FILE *f;\n    ~Fred();\n}\nFred::~Fred()\n{\n    fclose(f);\n}" always "class Fred {\npublic:\n    FILE *f;\n    ~Fred();\n}\nFred::~Fred()\n{\n    fclose(f);\n}"
Line 4955
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4955 always 4955
  "" always ""
Line 4957
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4957 always 4957
  "void f()\n{\n    int c;\n    ab(sizeof(xyz), &c);\n    if (c);\n}" always "void f()\n{\n    int c;\n    ab(sizeof(xyz), &c);\n    if (c);\n}"
Line 4963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4963 always 4963
  "" always ""
Line 4965
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4965 always 4965
  "void f()\n{\n    int c;\n    a = (f2(&c));\n    c++;\n}" always "void f()\n{\n    int c;\n    a = (f2(&c));\n    c++;\n}"
Line 4971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4971 always 4971
  "" always ""
Line 4974
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4974 always 4974
  "void foo(int x)\n{\n    long b;\n    if (g()) {\n        b =2;\n        goto found;\n    }\n\n    return;\n\nfound:\n    int a = b;\n}" always "void foo(int x)\n{\n    long b;\n    if (g()) {\n        b =2;\n        goto found;\n    }\n\n    return;\n\nfound:\n    int a = b;\n}"
Line 4987
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4987 always 4987
  "" always ""
Line 4989
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4989 always 4989
  "int foo()\n{\n    jmp_buf env;\n    int a;\n    int val = setjmp(env);\n    if(val)\n        return a;\n    a = 1;\n    longjmp(env, 1);\n}" always "int foo()\n{\n    jmp_buf env;\n    int a;\n    int val = setjmp(env);\n    if(val)\n        return a;\n    a = 1;\n    longjmp(env, 1);\n}"
Line 4999
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  4999 always 4999
  "" always ""
Line 5002
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5002 always 5002
  "void f() {\n    X *item;\n    for (item: itemList) {}\n}" always "void f() {\n    X *item;\n    for (item: itemList) {}\n}"
Line 5006
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5006 always 5006
  "" always ""
Line 5008
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5008 always 5008
  "X f() {\n    if (!itemList.empty()) {\n        X* item;\n        for(item: itemList) {}\n        return *item;\n    }\n    return X{};\n}\n" always "X f() {\n    if (!itemList.empty()) {\n        X* item;\n        for(item: itemList) {}\n        return *item;\n    }\n    return X{};\n}\n"
Line 5016
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5016 always 5016
  "" always ""
Line 5019
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5019 always 5019
  "int foo()\n{\n  int retval;\n  if (condition) {\n    for12(1,2) { }\n    retval = 1;\n  }\n  else\n    retval = 2;\n  return retval;\n}" always "int foo()\n{\n  int retval;\n  if (condition) {\n    for12(1,2) { }\n    retval = 1;\n  }\n  else\n    retval = 2;\n  return retval;\n}"
Line 5030
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5030 always 5030
  "" always ""
Line 5032
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5032 always 5032
  "void foo(struct qb_list_head *list) {\n    struct qb_list_head *iter;\n    qb_list_for_each(iter, list) {}\n}\n" always "void foo(struct qb_list_head *list) {\n    struct qb_list_head *iter;\n    qb_list_for_each(iter, list) {}\n}\n"
Line 5036
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5036 always 5036
  "" always ""
Line 5038
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5038 always 5038
  "void json_parse_nat_type_flags(json_t *root) {\n    int index;\n    json_array_foreach(root, index, value) {}\n}" always "void json_parse_nat_type_flags(json_t *root) {\n    int index;\n    json_array_foreach(root, index, value) {}\n}"
Line 5042
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5042 always 5042
  "" always ""
Line 5044
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5044 always 5044
  "int foo()\n{\n    int i;\n    goto exit;\n    i++;\nexit:\n}" always "int foo()\n{\n    int i;\n    goto exit;\n    i++;\nexit:\n}"
Line 5051
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5051 always 5051
  "" always ""
Line 5053
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5053 always 5053
  "int foo() {\n    int x,y=0;\nagain:\n    if (y) return x;\n    x = a;\n    y = 1;\n    goto again;\n}" always "int foo() {\n    int x,y=0;\nagain:\n    if (y) return x;\n    x = a;\n    y = 1;\n    goto again;\n}"
Line 5061
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5061 always 5061
  "" always ""
Line 5064
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5064 always 5064
  "int f(int x)  {\n    int iter;\n    {\n        union\n        {\n            int asInt;\n            double asDouble;\n        };\n\n        iter = x;\n    }\n    return 1 + iter;\n}" always "int f(int x)  {\n    int iter;\n    {\n        union\n        {\n            int asInt;\n            double asDouble;\n        };\n\n        iter = x;\n    }\n    return 1 + iter;\n}"
Line 5077
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5077 always 5077
  "" always ""
Line 5080
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5080 always 5080
  "int f() {\n    int i = 0;\n    int j{ i };\n    return j;\n}" always "int f() {\n    int i = 0;\n    int j{ i };\n    return j;\n}"
Line 5085
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5085 always 5085
  "" always ""
Line 5088
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5088 always 5088
  "float foo() {\n  float source[2] = {3.1, 3.1};\n  float (*sink)[2] = &source;\n  return (*sink)[0];\n}" always "float foo() {\n  float source[2] = {3.1, 3.1};\n  float (*sink)[2] = &source;\n  return (*sink)[0];\n}"
Line 5093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5093 always 5093
  "" always ""
Line 5096
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5096 always 5096
  "void f(int b) {\n    int a;\n    if (b == 10)\n        a = 1;\n    if (b == 13)\n        a = 1;\n    if (b == 'x') {}\n    if (a) {}\n}" always "void f(int b) {\n    int a;\n    if (b == 10)\n        a = 1;\n    if (b == 13)\n        a = 1;\n    if (b == 'x') {}\n    if (a) {}\n}"
Line 5105
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5105 always 5105
  "[test.cpp:8]: (error) Uninitialized variable: a\n" always "[test.cpp:8]: (error) Uninitialized variable: a\n"
  "" always ""
Line 5107
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5107 always 5107
  "void h() {\n  int i;\n  int* v = &i;\n  sscanf(\"0\", \"%d\", v);\n}" always "void h() {\n  int i;\n  int* v = &i;\n  sscanf(\"0\", \"%d\", v);\n}"
Line 5112
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5112 always 5112
  "" always ""
Line 5114
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5114 always 5114
  "void test(int p) {\n    int f;\n    if (p > 0)\n        f = 0;\n    if (p > 1)\n        f += 1;\n}" always "void test(int p) {\n    int f;\n    if (p > 0)\n        f = 0;\n    if (p > 1)\n        f += 1;\n}"
Line 5121
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5121 always 5121
  "" always ""
Line 5123
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5123 always 5123
  "unsigned char get();\nchar f() {\n    unsigned char c;\n    do {\n        c = get();\n    } while (isalpha(c) == 0);\n    return static_cast<char>(c);\n}\n" always "unsigned char get();\nchar f() {\n    unsigned char c;\n    do {\n        c = get();\n    } while (isalpha(c) == 0);\n    return static_cast<char>(c);\n}\n"
Line 5131
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5131 always 5131
  "" always ""
Line 5133
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5133 always 5133
  "void f(int x)\n{\n   int i;\n   char value;\n   for(i = 0; i < 1; i++) {\n       if(x > 1)\n           value = 0;\n    }\n    printf(\"\", value);\n}\n" always "void f(int x)\n{\n   int i;\n   char value;\n   for(i = 0; i < 1; i++) {\n       if(x > 1)\n           value = 0;\n    }\n    printf(\"\", value);\n}\n"
Line 5143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5143 always 5143
  "[test.cpp:6] -> [test.cpp:9]: (error) Uninitialized variable: value\n" always "[test.cpp:6] -> [test.cpp:9]: (error) Uninitialized variable: value\n"
Line 5145
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5145 always 5145
  "void f(int x)\n{\n   int i;\n   char value;\n   for(i = 0; i < 1; i++) {\n       if(x > 1)\n           value = 0;\n       else\n           value = 1;\n    }\n    printf(\"\", value);\n}\n" always "void f(int x)\n{\n   int i;\n   char value;\n   for(i = 0; i < 1; i++) {\n       if(x > 1)\n           value = 0;\n       else\n           value = 1;\n    }\n    printf(\"\", value);\n}\n"
Line 5157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5157 always 5157
  "" always ""
Line 5160
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5160 always 5160
  "int f (const struct FileFuncDefs *ffd) {\n  int c;\n  (*ffd->zread)(&c, 1);\n  return c;\n}\n" always "int f (const struct FileFuncDefs *ffd) {\n  int c;\n  (*ffd->zread)(&c, 1);\n  return c;\n}\n"
Line 5165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5165 always 5165
  "" always ""
Line 5167
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5167 always 5167
  "int foo(unsigned int code) {\n  int res;\n\n  (* (utility_table[code])) (&res);\n  return (res);\n}\n" always "int foo(unsigned int code) {\n  int res;\n\n  (* (utility_table[code])) (&res);\n  return (res);\n}\n"
Line 5172
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5172 always 5172
  "" always ""
Line 5174
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5174 always 5174
  "struct Archive {\n    bool isNull;\n    friend void operator&(const Archive &, bool &isNull);\n};\nvoid load(Archive& ar) {\n    bool isNull;\n    ar & isNull;\n    if (!isNull) {}\n}\n" always "struct Archive {\n    bool isNull;\n    friend void operator&(const Archive &, bool &isNull);\n};\nvoid load(Archive& ar) {\n    bool isNull;\n    ar & isNull;\n    if (!isNull) {}\n}\n"
Line 5183
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5183 always 5183
  "" always ""
Line 5186
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5186 always 5186
  "struct Foo {\n    int i{};\n    static const float cf;\n};\nconst float Foo::cf = 0.1f;\nint bar() {\n    Foo f;\n    return f.i;\n}\n" always "struct Foo {\n    int i{};\n    static const float cf;\n};\nconst float Foo::cf = 0.1f;\nint bar() {\n    Foo f;\n    return f.i;\n}\n"
Line 5195
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5195 always 5195
  "" always ""
Line 5198
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5198 always 5198
  "void foo() {\n    int cnt;\n    do {\n        cnt = 32 ;\n    }\n    while ( 0 ) ;\n    if (cnt != 0) {}\n}\n" always "void foo() {\n    int cnt;\n    do {\n        cnt = 32 ;\n    }\n    while ( 0 ) ;\n    if (cnt != 0) {}\n}\n"
Line 5206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5206 always 5206
  "" always ""
Line 5209
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5209 always 5209
  "void dowork( int me ) {\n    if ( me == 0 ) {}\n}\n\nint main() {\n    int me;\n     dowork(me);\n}" always "void dowork( int me ) {\n    if ( me == 0 ) {}\n}\n\nint main() {\n    int me;\n     dowork(me);\n}"
Line 5217
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5217 always 5217
  "[test.cpp:7]: (error) Uninitialized variable: me\n" always "[test.cpp:7]: (error) Uninitialized variable: me\n"
Line 5219
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5219 always 5219
  "int foo() {\n  int x;\n  int a = x;\n  return a;\n}" always "int foo() {\n  int x;\n  int a = x;\n  return a;\n}"
Line 5224
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5224 always 5224
  "[test.cpp:3]: (error) Uninitialized variable: x\n" always "[test.cpp:3]: (error) Uninitialized variable: x\n"
Line 5227
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5227 always 5227
  "uint32_t foo(uint32_t in) {\n    uint32_t out, mask = 0x7F;\n    while (mask ^ 0x7FFFFFFF)\n        out = in & ~mask;\n    return out;\n}\n" always "uint32_t foo(uint32_t in) {\n    uint32_t out, mask = 0x7F;\n    while (mask ^ 0x7FFFFFFF)\n        out = in & ~mask;\n    return out;\n}\n"
Line 5233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5233 always 5233
  "" always ""
Line 5236
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5236 always 5236
  "int f(int b) {\n    int a;\n    if (!b)\n        a = 1;\n    if (b)\n        return a;\n    else\n        return -1;\n}\n" always "int f(int b) {\n    int a;\n    if (!b)\n        a = 1;\n    if (b)\n        return a;\n    else\n        return -1;\n}\n"
Line 5245
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5245 always 5245
  "[test.cpp:3] -> [test.cpp:6]: (error) Uninitialized variable: a\n" always "[test.cpp:3] -> [test.cpp:6]: (error) Uninitialized variable: a\n"
Line 5248
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5248 always 5248
  "int func(void) {\n    int rez;\n    struct sccb* ccb;\n    do {\n        if ((ccb = calloc(1, sizeof(*ccb))) == NULL) {\n            rez = 1;\n            break;\n        }\n        rez = 0;\n    } while (0);\n    if (rez != 0)\n        free(ccb);\n    return rez;\n}\n" always "int func(void) {\n    int rez;\n    struct sccb* ccb;\n    do {\n        if ((ccb = calloc(1, sizeof(*ccb))) == NULL) {\n            rez = 1;\n            break;\n        }\n        rez = 0;\n    } while (0);\n    if (rez != 0)\n        free(ccb);\n    return rez;\n}\n"
Line 5262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5262 always 5262
  "" always ""
Line 5265
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5265 always 5265
  "struct CharDataOnly {\n   char data[100];\n};\nCharDataOnly f() {\n   CharDataOnly testData;\n   strcpy(testData.data, \"string smaller than size\");\n   return testData;\n}\n" always "struct CharDataOnly {\n   char data[100];\n};\nCharDataOnly f() {\n   CharDataOnly testData;\n   strcpy(testData.data, \"string smaller than size\");\n   return testData;\n}\n"
Line 5273
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5273 always 5273
  "" always ""
Line 5276
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5276 always 5276
  "typedef union {\n    struct { int x; };\n    int v[1];\n} U;\nvoid init(int* d) {\n    *d = 42;\n}\nvoid f() {\n    U u;\n    init(u.v);\n    printf(\"%d\\n\", u.x);\n}\n" always "typedef union {\n    struct { int x; };\n    int v[1];\n} U;\nvoid init(int* d) {\n    *d = 42;\n}\nvoid f() {\n    U u;\n    init(u.v);\n    printf(\"%d\\n\", u.x);\n}\n"
Line 5288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5288 always 5288
  "" always ""
Line 5291
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5291 always 5291
  "union U {\n    char c[2];\n    uint16_t u16;\n};\nuint16_t f(std::istream& is) {\n    U u;\n    is.read(u.c, 2);\n    return u.u16;\n}\n" always "union U {\n    char c[2];\n    uint16_t u16;\n};\nuint16_t f(std::istream& is) {\n    U u;\n    is.read(u.c, 2);\n    return u.u16;\n}\n"
Line 5300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5300 always 5300
  "" always ""
Line 5302
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5302 always 5302
  "void f() {\n  char src, dest;\n  std::memcpy(&dest, &src, 1);\n}\n" always "void f() {\n  char src, dest;\n  std::memcpy(&dest, &src, 1);\n}\n"
Line 5306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5306 always 5306
  "[test.cpp:3]: (error) Uninitialized variable: &src\n" always "[test.cpp:3]: (error) Uninitialized variable: &src\n"
Line 5309
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5309 always 5309
  "void f(const void* ptr, bool* result) {\n  int dummy;\n  *result = (&dummy < ptr);\n}\n" always "void f(const void* ptr, bool* result) {\n  int dummy;\n  *result = (&dummy < ptr);\n}\n"
Line 5313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5313 always 5313
  "" always ""
Line 5315
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5315 always 5315
  "struct A {\n    int x;\n};\nvoid f() {\n    A a;\n    A* p = &a;\n    p->x = 1;\n}\n" always "struct A {\n    int x;\n};\nvoid f() {\n    A a;\n    A* p = &a;\n    p->x = 1;\n}\n"
Line 5323
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5323 always 5323
  "" always ""
Line 5325
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5325 always 5325
  "struct A {\n    int x;\n};\nvoid g(const int&);\nvoid f() {\n    A a;\n    g(a.x);\n}\n" always "struct A {\n    int x;\n};\nvoid g(const int&);\nvoid f() {\n    A a;\n    g(a.x);\n}\n"
Line 5333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5333 always 5333
  "[test.cpp:7]: (error) Uninitialized variable: a.x\n" always "[test.cpp:7]: (error) Uninitialized variable: a.x\n"
Line 5335
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5335 always 5335
  "struct A {\n    int x;\n};\nvoid g(const int&);\nvoid f() {\n    A a;\n    A* p = &a;\n    g(p->x);\n}\n" always "struct A {\n    int x;\n};\nvoid g(const int&);\nvoid f() {\n    A a;\n    A* p = &a;\n    g(p->x);\n}\n"
Line 5344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5344 always 5344
  "[test.cpp:7] -> [test.cpp:8]: (error) Uninitialized variable: p->x\n" always "[test.cpp:7] -> [test.cpp:8]: (error) Uninitialized variable: p->x\n"
Line 5346
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5346 always 5346
  "void f() {\n    int a;\n    a++;\n}\n" always "void f() {\n    int a;\n    a++;\n}\n"
Line 5350
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5350 always 5350
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 5353
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5353 always 5353
  "int g(int);\nvoid f() {\n    int received[NSIG];\n    for (int sig = 0; sig < NSIG; sig++)\n        received[sig] = g(sig);\n    for (int sig = 0; sig < NSIG; sig++)\n        if (received[sig]) {}\n}\n" always "int g(int);\nvoid f() {\n    int received[NSIG];\n    for (int sig = 0; sig < NSIG; sig++)\n        received[sig] = g(sig);\n    for (int sig = 0; sig < NSIG; sig++)\n        if (received[sig]) {}\n}\n"
Line 5361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5361 always 5361
  "" always ""
Line 5365
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5365 always 5365
  "struct wcsstruct {\n    int *wcsprm;\n};\n\nvoid copy_wcs(wcsstruct *wcsin) {\n    wcsstruct *x;\n    memcpy(wcsin, x, sizeof(wcsstruct));\n    x->wcsprm = NULL;\n}" always "struct wcsstruct {\n    int *wcsprm;\n};\n\nvoid copy_wcs(wcsstruct *wcsin) {\n    wcsstruct *x;\n    memcpy(wcsin, x, sizeof(wcsstruct));\n    x->wcsprm = NULL;\n}"
Line 5374
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5374 always 5374
  "[test.cpp:7]: (error) Uninitialized variable: x\n" always "[test.cpp:7]: (error) Uninitialized variable: x\n"
Line 5376
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5376 always 5376
  "struct wcsstruct {\n    int *wcsprm;\n};\n\nvoid copy_wcs(wcsstruct *wcsin) {\n    wcsstruct *x;\n    sizeof(x);\n    x->wcsprm = NULL;\n}" always "struct wcsstruct {\n    int *wcsprm;\n};\n\nvoid copy_wcs(wcsstruct *wcsin) {\n    wcsstruct *x;\n    sizeof(x);\n    x->wcsprm = NULL;\n}"
Line 5385
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5385 always 5385
  "[test.cpp:8]: (error) Uninitialized variable: x\n" always "[test.cpp:8]: (error) Uninitialized variable: x\n"
Line 5387
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5387 always 5387
  "struct wcsstruct {\n    int *wcsprm;\n};\n\nvoid init_wcs(wcsstruct *x) { if (x->wcsprm != NULL); }\n\nvoid copy_wcs() {\n    wcsstruct *x;\n    x->wcsprm = NULL;\n    init_wcs(x);\n}" always "struct wcsstruct {\n    int *wcsprm;\n};\n\nvoid init_wcs(wcsstruct *x) { if (x->wcsprm != NULL); }\n\nvoid copy_wcs() {\n    wcsstruct *x;\n    x->wcsprm = NULL;\n    init_wcs(x);\n}"
Line 5398
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5398 always 5398
  "[test.cpp:9]: (error) Uninitialized variable: x\n" always "[test.cpp:9]: (error) Uninitialized variable: x\n"
Line 5403
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5403 always 5403
  "typedef struct  {\n    int flags;\n} someType_t;\nvoid bar(const someType_t * const p)  {\n    if( (p->flags & 0xF000) == 0xF000){}\n}\nvoid f(void) {\n    someType_t gVar;\n    bar(&gVar);\n}" always "typedef struct  {\n    int flags;\n} someType_t;\nvoid bar(const someType_t * const p)  {\n    if( (p->flags & 0xF000) == 0xF000){}\n}\nvoid f(void) {\n    someType_t gVar;\n    bar(&gVar);\n}"
Line 5413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5413 always 5413
  "[test.cpp:9] -> [test.cpp:5]: (error) Uninitialized variable: p->flags\n" always "[test.cpp:9] -> [test.cpp:5]: (error) Uninitialized variable: p->flags\n"
Line 5415
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5415 always 5415
  "typedef struct\n{\n        int flags[3];\n} someType_t;\nvoid f(void) {\n        someType_t gVar;\n        if(gVar.flags[1] == 42){}\n}" always "typedef struct\n{\n        int flags[3];\n} someType_t;\nvoid f(void) {\n        someType_t gVar;\n        if(gVar.flags[1] == 42){}\n}"
Line 5423
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5423 always 5423
  "[test.cpp:7]: (error) Uninitialized variable: gVar.flags\n" always "[test.cpp:7]: (error) Uninitialized variable: gVar.flags\n"
Line 5425
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5425 always 5425
  "void foo() {\n  union {\n    struct hdr cm;\n    char control[123];\n  } u;\n  char *x = u.control;\n}" always "void foo() {\n  union {\n    struct hdr cm;\n    char control[123];\n  } u;\n  char *x = u.control;\n}"
Line 5432
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5432 always 5432
  "" always ""
Line 5434
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5434 always 5434
  "struct pc_data {\n    struct {\n        char   * strefa;\n    } wampiryzm;\n};\nvoid f() {\n    struct pc_data *pcdata;\n    if ( *pcdata->wampiryzm.strefa == '\\0' ) { }\n}" always "struct pc_data {\n    struct {\n        char   * strefa;\n    } wampiryzm;\n};\nvoid f() {\n    struct pc_data *pcdata;\n    if ( *pcdata->wampiryzm.strefa == '\\0' ) { }\n}"
Line 5443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5443 always 5443
  "[test.cpp:8]: (error) Uninitialized variable: pcdata\n" always "[test.cpp:8]: (error) Uninitialized variable: pcdata\n"
Line 5446
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5446 always 5446
  "struct S {\n  int x;\n  int y;\n};\n\nvoid f() {\n    struct S s1;\n    int * x = &s1.x;\n    struct S s2 = {*x, 0};\n}" always "struct S {\n  int x;\n  int y;\n};\n\nvoid f() {\n    struct S s1;\n    int * x = &s1.x;\n    struct S s2 = {*x, 0};\n}"
Line 5456
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5456 always 5456
  "[test.cpp:8] -> [test.cpp:9]: (error) Uninitialized variable: *x\n" always "[test.cpp:8] -> [test.cpp:9]: (error) Uninitialized variable: *x\n"
Line 5458
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5458 always 5458
  "struct S {\n  int x;\n  int y;\n};\n\nvoid f() {\n    struct S s1;\n    struct S s2;\n    int * x = &s1.x;\n    s2.x = *x;\n}" always "struct S {\n  int x;\n  int y;\n};\n\nvoid f() {\n    struct S s1;\n    struct S s2;\n    int * x = &s1.x;\n    s2.x = *x;\n}"
Line 5469
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5469 always 5469
  "[test.cpp:9] -> [test.cpp:10]: (error) Uninitialized variable: *x\n" always "[test.cpp:9] -> [test.cpp:10]: (error) Uninitialized variable: *x\n"
Line 5471
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5471 always 5471
  "void f(bool * x) {\n    *x = false;\n}\nvoid g() {\n    bool b;\n    f(&b);\n}" always "void f(bool * x) {\n    *x = false;\n}\nvoid g() {\n    bool b;\n    f(&b);\n}"
Line 5478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5478 always 5478
  "" always ""
Line 5480
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5480 always 5480
  "void f(bool * x) {\n    if (x != nullptr)\n        x = 1;\n}\nvoid g() {\n    bool x;\n    f(&x);\n}" always "void f(bool * x) {\n    if (x != nullptr)\n        x = 1;\n}\nvoid g() {\n    bool x;\n    f(&x);\n}"
Line 5488
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5488 always 5488
  "" always ""
Line 5490
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5490 always 5490
  "void f() {\n    bool b;\n    bool * x = &b;\n    if (x != nullptr)\n        x = 1;\n}" always "void f() {\n    bool b;\n    bool * x = &b;\n    if (x != nullptr)\n        x = 1;\n}"
Line 5496
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5496 always 5496
  "" always ""
Line 5498
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5498 always 5498
  "struct A { bool b; };void f(A * x) {\n    x->b = false;\n}\nvoid g() {\n    A b;\n    f(&b);\n}" always "struct A { bool b; };void f(A * x) {\n    x->b = false;\n}\nvoid g() {\n    A b;\n    f(&b);\n}"
Line 5506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5506 always 5506
  "" always ""
Line 5508
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5508 always 5508
  "std::string f() {\n    std::ostringstream ostr;\n    ostr << \"\";\n    return ostr.str();\n}" always "std::string f() {\n    std::ostringstream ostr;\n    ostr << \"\";\n    return ostr.str();\n}"
Line 5513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5513 always 5513
  "" always ""
Line 5515
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5515 always 5515
  "struct s {\n    char a[20];\n};\nvoid c(struct s *sarg) {\n    sarg->a[0] = '\\0';\n}\nvoid b(struct s *sarg) {\n    c(sarg);\n}\nvoid a() {\n    struct s s1;\n    b(&s1);\n}" always "struct s {\n    char a[20];\n};\nvoid c(struct s *sarg) {\n    sarg->a[0] = '\\0';\n}\nvoid b(struct s *sarg) {\n    c(sarg);\n}\nvoid a() {\n    struct s s1;\n    b(&s1);\n}"
Line 5528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5528 always 5528
  "" always ""
Line 5531
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5531 always 5531
  "struct A {\n    double x;\n};\ndouble b() {\n    A * c;\n    c->x = 42;\n    return c->x;\n}" always "struct A {\n    double x;\n};\ndouble b() {\n    A * c;\n    c->x = 42;\n    return c->x;\n}"
Line 5539
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5539 always 5539
  "[test.cpp:6]: (error) Uninitialized variable: c\n" always "[test.cpp:6]: (error) Uninitialized variable: c\n"
Line 5542
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5542 always 5542
  "struct A {\n    double x;\n};\ndouble b() {\n    A c;\n    c.x = 42;\n    return c.x;\n}" always "struct A {\n    double x;\n};\ndouble b() {\n    A c;\n    c.x = 42;\n    return c.x;\n}"
Line 5550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5550 always 5550
  "" always ""
Line 5552
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5552 always 5552
  "struct A {\n    double x;\n};\ndouble d(A * e) {\n    e->x = 42;\n    return e->x;\n}\ndouble b() {\n    A c;\n    return d(&c);\n}" always "struct A {\n    double x;\n};\ndouble d(A * e) {\n    e->x = 42;\n    return e->x;\n}\ndouble b() {\n    A c;\n    return d(&c);\n}"
Line 5563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5563 always 5563
  "" always ""
Line 5566
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5566 always 5566
  "struct VZ   {\n    double typ;\n};\nvoid read() {\n    struct VZ vz;\n    struct VZ* pvz = &vz;\n    vz.typ      = 42;\n    if (pvz->typ == 0)\n        return;\n}" always "struct VZ   {\n    double typ;\n};\nvoid read() {\n    struct VZ vz;\n    struct VZ* pvz = &vz;\n    vz.typ      = 42;\n    if (pvz->typ == 0)\n        return;\n}"
Line 5576
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5576 always 5576
  "" always ""
Line 5579
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5579 always 5579
  "struct kf {\n    double x;\n};\nvoid set(kf* k) {\n    k->x = 0;\n}\nvoid cal() {\n    KF b;\n    KF* pb = &b;\n    set( pb);\n    if (pb->x)\n        return;\n}" always "struct kf {\n    double x;\n};\nvoid set(kf* k) {\n    k->x = 0;\n}\nvoid cal() {\n    KF b;\n    KF* pb = &b;\n    set( pb);\n    if (pb->x)\n        return;\n}"
Line 5592
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5592 always 5592
  "" always ""
Line 5595
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5595 always 5595
  "void f(int *a) {\n  int b = 0;\n  memcpy(a, &b, sizeof(b));\n}\nvoid g() {\n  int i;\n  f(&i);\n}" always "void f(int *a) {\n  int b = 0;\n  memcpy(a, &b, sizeof(b));\n}\nvoid g() {\n  int i;\n  f(&i);\n}"
Line 5603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5603 always 5603
  "" always ""
Line 5606
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5606 always 5606
  "static void g(bool * result, int num, int num2, size_t * buflen) {\n  if (*result && *buflen >= 5) {}\n}\nvoid f() {\n  size_t bytesCopied;\n  bool copied_all = true;\n  g(&copied_all, 5, 6, &bytesCopied);\n}" always "static void g(bool * result, int num, int num2, size_t * buflen) {\n  if (*result && *buflen >= 5) {}\n}\nvoid f() {\n  size_t bytesCopied;\n  bool copied_all = true;\n  g(&copied_all, 5, 6, &bytesCopied);\n}"
Line 5614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5614 always 5614
  "[test.cpp:7] -> [test.cpp:2]: (error) Uninitialized variable: *buflen\n" always "[test.cpp:7] -> [test.cpp:2]: (error) Uninitialized variable: *buflen\n"
Line 5617
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5617 always 5617
  "uint32_t f(uint8_t *mem) {\n    uint32_t u32;\n    uint8_t *buf = (uint8_t *)(&u32);\n    buf[0] = mem[0];\n    return(*(uint32_t *)buf);\n}\n" always "uint32_t f(uint8_t *mem) {\n    uint32_t u32;\n    uint8_t *buf = (uint8_t *)(&u32);\n    buf[0] = mem[0];\n    return(*(uint32_t *)buf);\n}\n"
Line 5623
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5623 always 5623
  "" always ""
Line 5628
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5628 always 5628
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    if (ab.b == 2) {}\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    if (ab.b == 2) {}\n}\n"
Line 5634
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5634 always 5634
  "[test.cpp:5]: (error) Uninitialized variable: ab.b\n" always "[test.cpp:5]: (error) Uninitialized variable: ab.b\n"
Line 5636
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5636 always 5636
  "struct AB { int a; int b; };\nvoid do_something(const struct AB &ab) { a = ab.a; }\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}" always "struct AB { int a; int b; };\nvoid do_something(const struct AB &ab) { a = ab.a; }\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}"
Line 5643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5643 always 5643
  "" always ""
Line 5645
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5645 always 5645
  "struct AB { int a; int b; };\nvoid do_something(const struct AB &ab) { a = ab.b; }\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}" always "struct AB { int a; int b; };\nvoid do_something(const struct AB &ab) { a = ab.b; }\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    do_something(ab);\n}"
Line 5652
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5652 always 5652
  "[test.cpp:6] -> [test.cpp:2]: (error) Uninitialized variable: ab.b\n" always "[test.cpp:6] -> [test.cpp:2]: (error) Uninitialized variable: ab.b\n"
Line 5654
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5654 always 5654
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n}\n"
  "test.c" always "test.c"
Line 5660
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5660 always 5660
  "[test.c:4]: (error) Uninitialized variable: ab.a\n" always "[test.c:4]: (error) Uninitialized variable: ab.a\n"
Line 5662
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5662 always 5662
  "struct AB { int a; int b; };\nvoid f(void) {\n    AB ab1;\n    AB ab2 = { ab1.a, 0 };\n}" always "struct AB { int a; int b; };\nvoid f(void) {\n    AB ab1;\n    AB ab2 = { ab1.a, 0 };\n}"
Line 5667
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5667 always 5667
  "[test.cpp:4]: (error) Uninitialized variable: ab1.a\n" always "[test.cpp:4]: (error) Uninitialized variable: ab1.a\n"
Line 5669
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5669 always 5669
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    buf[ab.a] = 0;\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    buf[ab.a] = 0;\n}\n"
  "test.c" always "test.c"
Line 5675
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5675 always 5675
  "[test.c:4]: (error) Uninitialized variable: ab.a\n" always "[test.c:4]: (error) Uninitialized variable: ab.a\n"
Line 5677
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5677 always 5677
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = ab;\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = ab;\n}\n"
  "test.c" always "test.c"
Line 5684
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5684 always 5684
  "[test.c:5]: (error) Uninitialized variable: ab.b\n" always "[test.c:5]: (error) Uninitialized variable: ab.b\n"
Line 5686
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5686 always 5686
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = *(&ab);\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    x = *(&ab);\n}\n"
  "test.c" always "test.c"
Line 5693
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5693 always 5693
  "[test.c:5]: (error) Uninitialized variable: *(&ab).b\n" always "[test.c:5]: (error) Uninitialized variable: *(&ab).b\n"
Line 5695
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5695 always 5695
  "void f(void) {\n    struct AB ab;\n    int x;\n    ab.a = (void*)&x;\n    dostuff(&ab,0);\n}\n" always "void f(void) {\n    struct AB ab;\n    int x;\n    ab.a = (void*)&x;\n    dostuff(&ab,0);\n}\n"
  "test.c" always "test.c"
Line 5702
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5702 always 5702
  "" always ""
Line 5704
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5704 always 5704
  "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}" always "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}"
Line 5710
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5710 always 5710
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 5712
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5712 always 5712
  "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}" always "struct Element {\n    static void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}"
Line 5718
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5718 always 5718
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 5720
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5720 always 5720
  "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; element->v;\n}" always "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; element->v;\n}"
Line 5726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5726 always 5726
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 5728
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5728 always 5728
  "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}" always "struct Element {\n    static int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}"
Line 5734
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5734 always 5734
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 5736
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5736 always 5736
  "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}" always "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; element->f();\n}"
Line 5742
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5742 always 5742
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 5744
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5744 always 5744
  "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}" always "struct Element {\n    void f() { }\n};\nvoid test() {\n    Element *element; (*element).f();\n}"
Line 5750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5750 always 5750
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 5752
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5752 always 5752
  "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; element->v;\n}" always "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; element->v;\n}"
Line 5758
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5758 always 5758
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 5760
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5760 always 5760
  "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}" always "struct Element {\n    int v;\n};\nvoid test() {\n    Element *element; (*element).v;\n}"
Line 5766
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5766 always 5766
  "[test.cpp:5]: (error) Uninitialized variable: element\n" always "[test.cpp:5]: (error) Uninitialized variable: element\n"
Line 5768
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5768 always 5768
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    assign(&ab.a, 0);\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    assign(&ab.a, 0);\n}\n"
  "test.c" always "test.c"
Line 5774
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5774 always 5774
  "" always ""
Line 5776
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5776 always 5776
  "struct Cstring { char *text; int size, alloc; };\nint maybe();\nvoid f() {\n    Cstring res;\n    if ( ! maybe() ) return;\n    ( ((res).text = (void*)0), ((res).size = (res).alloc = 0) );\n}" always "struct Cstring { char *text; int size, alloc; };\nint maybe();\nvoid f() {\n    Cstring res;\n    if ( ! maybe() ) return;\n    ( ((res).text = (void*)0), ((res).size = (res).alloc = 0) );\n}"
Line 5784
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5784 always 5784
  "" always ""
Line 5786
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5786 always 5786
  "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    ab.b = 0;\n    do_something(ab);\n}\n" always "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    ab.b = 0;\n    do_something(ab);\n}\n"
  "test.c" always "test.c"
Line 5795
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5795 always 5795
  "" always ""
Line 5798
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5798 always 5798
  "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(ab.a, STR);\n}\n" always "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(ab.a, STR);\n}\n"
  "test.c" always "test.c"
Line 5804
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5804 always 5804
  "" always ""
Line 5806
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5806 always 5806
  "struct AB { unsigned char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy((char *)ab.a, STR);\n}\n" always "struct AB { unsigned char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy((char *)ab.a, STR);\n}\n"
  "test.c" always "test.c"
Line 5812
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5812 always 5812
  "" always ""
Line 5814
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5814 always 5814
  "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(x, ab.a);\n}\n" always "struct AB { char a[10]; };\nvoid f(void) {\n    struct AB ab;\n    strcpy(x, ab.a);\n}\n"
  "test.c" always "test.c"
Line 5820
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5820 always 5820
  "[test.c:4]: (error) Uninitialized variable: ab.a\n" always "[test.c:4]: (error) Uninitialized variable: ab.a\n"
  "" always ""
Line 5822
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5822 always 5822
  "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    dosomething(ab.a);\n}\n" always "struct AB { int a; };\nvoid f(void) {\n    struct AB ab;\n    dosomething(ab.a);\n}\n"
  "test.c" always "test.c"
Line 5828
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5828 always 5828
  "" always ""
Line 5831
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5831 always 5831
  "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab = getAB();\n    do_something(ab);\n}\n" always "struct AB { int a; int b; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab = getAB();\n    do_something(ab);\n}\n"
  "test.c" always "test.c"
Line 5839
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5839 always 5839
  "" always ""
Line 5843
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5843 always 5843
  "struct AB { int a; int b; void set(); };\nvoid f(void) {\n    struct AB ab;\n    ab.set();\n    x = ab;\n}" always "struct AB { int a; int b; void set(); };\nvoid f(void) {\n    struct AB ab;\n    ab.set();\n    x = ab;\n}"
Line 5849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5849 always 5849
  "" always ""
Line 5851
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5851 always 5851
  "struct AB { int a; int get() const; };\nvoid f(void) {\n    struct AB ab;\n    ab.get();\n    x = ab;\n}" always "struct AB { int a; int get() const; };\nvoid f(void) {\n    struct AB ab;\n    ab.get();\n    x = ab;\n}"
Line 5857
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5857 always 5857
  "[test.cpp:4]: (error) Uninitialized variable: ab\n" always "[test.cpp:4]: (error) Uninitialized variable: ab\n"
Line 5859
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5859 always 5859
  "struct AB { int a; void dostuff() {} };\nvoid f(void) {\n    struct AB ab;\n    ab.dostuff();\n    x = ab;\n}" always "struct AB { int a; void dostuff() {} };\nvoid f(void) {\n    struct AB ab;\n    ab.dostuff();\n    x = ab;\n}"
Line 5865
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5865 always 5865
  "error" always "error"
  "" always ""
Line 5868
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5868 always 5868
  "struct AB { int a; struct { int b; int c; } s; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    ab.s.b = 2;\n    ab.s.c = 3;\n    do_something(ab);\n}\n" always "struct AB { int a; struct { int b; int c; } s; };\nvoid do_something(const struct AB ab);\nvoid f(void) {\n    struct AB ab;\n    ab.a = 1;\n    ab.s.b = 2;\n    ab.s.c = 3;\n    do_something(ab);\n}\n"
  "test.c" always "test.c"
Line 5878
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5878 always 5878
  "" always ""
Line 5880
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5880 always 5880
  "struct conf {\n    char x;\n};\n\nvoid do_something(struct conf ant_conf);\n\nvoid f(void) {\n   struct conf c;\n   initdata(&c);\n   do_something(c);\n}\n" always "struct conf {\n    char x;\n};\n\nvoid do_something(struct conf ant_conf);\n\nvoid f(void) {\n   struct conf c;\n   initdata(&c);\n   do_something(c);\n}\n"
  "test.c" always "test.c"
Line 5892
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5892 always 5892
  "" always ""
Line 5894
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5894 always 5894
  "struct PIXEL {\n    union  {\n        struct { unsigned char red,green,blue,alpha; };\n        unsigned int color;\n    };\n};\n\nunsigned char f() {\n    struct PIXEL p1;\n    p1.color = 255;\n    return p1.red;\n}" always "struct PIXEL {\n    union  {\n        struct { unsigned char red,green,blue,alpha; };\n        unsigned int color;\n    };\n};\n\nunsigned char f() {\n    struct PIXEL p1;\n    p1.color = 255;\n    return p1.red;\n}"
Line 5906
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5906 always 5906
  "" always ""
Line 5908
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5908 always 5908
  "struct AB { int a; int b; };\nint f() {\n  struct AB *ab;\n  for (i = 1; i < 10; i++) {\n    if (condition && (ab = getab()) != NULL) {\n      a = ab->a;\n    }\n  }\n}" always "struct AB { int a; int b; };\nint f() {\n  struct AB *ab;\n  for (i = 1; i < 10; i++) {\n    if (condition && (ab = getab()) != NULL) {\n      a = ab->a;\n    }\n  }\n}"
Line 5917
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5917 always 5917
  "" always ""
Line 5919
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5919 always 5919
  "struct AB { int a; int b; };\nint f(int x) {\n  struct AB *ab;\n  if (x == 0) {\n    ab = getab();\n  }\n  if (x == 0 && (ab != NULL || ab->a == 0)) { }\n}" always "struct AB { int a; int b; };\nint f(int x) {\n  struct AB *ab;\n  if (x == 0) {\n    ab = getab();\n  }\n  if (x == 0 && (ab != NULL || ab->a == 0)) { }\n}"
Line 5927
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5927 always 5927
  "" always ""
Line 5929
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5929 always 5929
  "struct A { int *x; };\nvoid foo(void *info, void*p);\nvoid bar(void) {\n  struct A *delete = 0;\n  foo( info, NULL );\n}" always "struct A { int *x; };\nvoid foo(void *info, void*p);\nvoid bar(void) {\n  struct A *delete = 0;\n  foo( info, NULL );\n}"
Line 5935
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5935 always 5935
  "" always ""
Line 5937
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5937 always 5937
  "struct ABC { int a; int b; int c; };\nvoid foo(int x, const struct ABC *abc);\nvoid bar(void) {\n  struct ABC abc;\n  foo(123, &abc);\n  return abc.b;\n}" always "struct ABC { int a; int b; int c; };\nvoid foo(int x, const struct ABC *abc);\nvoid bar(void) {\n  struct ABC abc;\n  foo(123, &abc);\n  return abc.b;\n}"
Line 5944
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5944 always 5944
  "[test.cpp:5]: (error) Uninitialized variable: abc.a\n[test.cpp:5]: (error) Uninitialized variable: abc.b\n[test.cpp:5]: (error) Uninitialized variable: abc.c\n" always "[test.cpp:5]: (error) Uninitialized variable: abc.a\n[test.cpp:5]: (error) Uninitialized variable: abc.b\n[test.cpp:5]: (error) Uninitialized variable: abc.c\n"
  "" always ""
Line 5950
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5950 always 5950
  "struct ABC { int a; int b; int c; };\nvoid foo() {\n  struct ABC abc;\n  dostuff((uint32_t *)&abc.a);\n}" always "struct ABC { int a; int b; int c; };\nvoid foo() {\n  struct ABC abc;\n  dostuff((uint32_t *)&abc.a);\n}"
Line 5955
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5955 always 5955
  "" always ""
Line 5957
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5957 always 5957
  "void f(void) {\n    struct tm t;\n    t.tm_year = 123;\n}" always "void f(void) {\n    struct tm t;\n    t.tm_year = 123;\n}"
Line 5961
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5961 always 5961
  "" always ""
Line 5964
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5964 always 5964
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.b;\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.b;\n}\n"
  "test.c" always "test.c"
Line 5971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5971 always 5971
  "[test.c:5]: (error) Uninitialized variable: ab.b\n" always "[test.c:5]: (error) Uninitialized variable: ab.b\n"
Line 5973
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5973 always 5973
  "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.a;\n}\n" always "struct AB { int a; int b; };\nvoid f(void) {\n    struct AB ab;\n    ab.a = 0;\n    return ab.a;\n}\n"
  "test.c" always "test.c"
Line 5980
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5980 always 5980
  "" always ""
Line 5982
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5982 always 5982
  "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    s.a = 0;\n    return s;\n}\n" always "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    s.a = 0;\n    return s;\n}\n"
Line 5988
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5988 always 5988
  "[test.cpp:5]: (error) Uninitialized variable: s.b\n" always "[test.cpp:5]: (error) Uninitialized variable: s.b\n"
Line 5990
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5990 always 5990
  "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    return s.a ? 1 : 2;\n}\n" always "struct S { int a; int b; };\nvoid f(void) {\n    struct S s;\n    return s.a ? 1 : 2;\n}\n"
Line 5995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5995 always 5995
  "[test.cpp:4]: (error) Uninitialized variable: s.a\n" always "[test.cpp:4]: (error) Uninitialized variable: s.a\n"
Line 5998
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  5998 always 5998
  "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.a == 0) { }\n}\n" always "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.a == 0) { }\n}\n"
  "test.c" always "test.c"
Line 6009
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6009 always 6009
  "" always ""
Line 6011
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6011 always 6011
  "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.b == 0) { }\n}\n" always "struct FRED {\n    int a;\n    int b;\n};\n\nvoid f(void) {\n   struct FRED fred;\n   fred.a = do_something();\n   if (fred.b == 0) { }\n}\n"
  "test.c" always "test.c"
Line 6022
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6022 always 6022
  "[test.c:9]: (error) Uninitialized variable: fred.b\n" always "[test.c:9]: (error) Uninitialized variable: fred.b\n"
Line 6024
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6024 always 6024
  "struct Fred { int a; };\nvoid f() {\n    struct Fred fred;\n    if (fred.a==1) {}\n}" always "struct Fred { int a; };\nvoid f() {\n    struct Fred fred;\n    if (fred.a==1) {}\n}"
  "test.c" always "test.c"
Line 6030
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6030 always 6030
  "[test.c:4]: (error) Uninitialized variable: fred.a\n" always "[test.c:4]: (error) Uninitialized variable: fred.a\n"
Line 6032
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6032 always 6032
  "struct S { int n; int m; };\nvoid f(void) {\n struct S s;\n for (s.n = 0; s.n <= 10; s.n++) { }\n}" always "struct S { int n; int m; };\nvoid f(void) {\n struct S s;\n for (s.n = 0; s.n <= 10; s.n++) { }\n}"
  "test.c" always "test.c"
Line 6038
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6038 always 6038
  "" always ""
Line 6040
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6040 always 6040
  "void test2() {\n  struct { char type; } s_d;\n  if (foo(&s_d.type)){}\n}" always "void test2() {\n  struct { char type; } s_d;\n  if (foo(&s_d.type)){}\n}"
Line 6044
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6044 always 6044
  "" always ""
Line 6047
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6047 always 6047
  "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { clear(ab); z = ab.a; }\n}" always "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { clear(ab); z = ab.a; }\n}"
Line 6052
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6052 always 6052
  "" always ""
Line 6054
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6054 always 6054
  "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { ab.a = ab.a + 1; }\n}" always "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { ab.a = ab.a + 1; }\n}"
Line 6059
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6059 always 6059
  "[test.cpp:4]: (error) Uninitialized variable: ab.a\n" always "[test.cpp:4]: (error) Uninitialized variable: ab.a\n"
  "" always ""
Line 6061
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6061 always 6061
  "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { init(&ab); z = ab.a; }\n}" always "struct AB { int a; };\nvoid f() {\n    struct AB ab;\n    while (x) { init(&ab); z = ab.a; }\n}"
Line 6066
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6066 always 6066
  "" always ""
Line 6069
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6069 always 6069
  "struct AB { int a[10]; int b; };\nvoid f() {\n    struct AB ab;\n    int *p = ab.a;\n}" always "struct AB { int a[10]; int b; };\nvoid f() {\n    struct AB ab;\n    int *p = ab.a;\n}"
Line 6074
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6074 always 6074
  "" always ""
Line 6077
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6077 always 6077
  "struct A { int x; };\nvoid foo() {\n  struct A a;\n  int& x = a.x;\n  x = 0;\n  return a.x;\n}" always "struct A { int x; };\nvoid foo() {\n  struct A a;\n  int& x = a.x;\n  x = 0;\n  return a.x;\n}"
Line 6084
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6084 always 6084
  "" always ""
Line 6087
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6087 always 6087
  "struct AB { int a=1; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n    int b = ab.b;\n}" always "struct AB { int a=1; int b; };\nvoid f(void) {\n    struct AB ab;\n    int a = ab.a;\n    int b = ab.b;\n}"
Line 6093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6093 always 6093
  "[test.cpp:4]: (error) Uninitialized variable: ab.a\n" always "[test.cpp:4]: (error) Uninitialized variable: ab.a\n"
Line 6096
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6096 always 6096
  "struct A {\n    std::map<int, int> m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" always "struct A {\n    std::map<int, int> m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}"
Line 6104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6104 always 6104
  "" always ""
Line 6107
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6107 always 6107
  "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" always "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}"
  "test.cpp" always "test.cpp"
Line 6116
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6116 always 6116
  "" always ""
Line 6119
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6119 always 6119
  "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" always "struct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}"
  "test.c" always "test.c"
Line 6128
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6128 always 6128
  "[test.c:7]: (error) Uninitialized variable: a.m\n" always "[test.c:7]: (error) Uninitialized variable: a.m\n"
Line 6131
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6131 always 6131
  "class C { C(); }\nstruct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}" always "class C { C(); }\nstruct A {\n    C m;\n    int i;\n};\nvoid foo() {\n    A a;\n    x = a.m;\n}"
Line 6140
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6140 always 6140
  "" always ""
Line 6142
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6142 always 6142
  "struct S {\n   int t[1];\n};\nint f(const S* ps) {\n   return ps->t[0];\n}\nvoid g() {\n   S s;\n   s.t[0] = 1;\n   f(&s);\n}\n" always "struct S {\n   int t[1];\n};\nint f(const S* ps) {\n   return ps->t[0];\n}\nvoid g() {\n   S s;\n   s.t[0] = 1;\n   f(&s);\n}\n"
Line 6153
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6153 always 6153
  "" always ""
Line 6155
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6155 always 6155
  "struct X {\n   int a, b;\n};\nstruct S {\n   X t;\n};\nint f(const S* ps) {\n   return ps->t.a;\n}\nvoid g() {\n   S s;\n   s.t.a = 1;\n   f(&s);\n}\n" always "struct X {\n   int a, b;\n};\nstruct S {\n   X t;\n};\nint f(const S* ps) {\n   return ps->t.a;\n}\nvoid g() {\n   S s;\n   s.t.a = 1;\n   f(&s);\n}\n"
Line 6169
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6169 always 6169
  "" always ""
Line 6171
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6171 always 6171
  "typedef struct { int a; int b; int c; } ABC;\nvoid setabc(int x, const ABC* const abc) {\n    sum = abc->a + abc->b + abc->c;\n}\nvoid f(void) {\n    ABC abc;\n    abc.a = 1;\n    setabc(123, &abc);\n}\n" always "typedef struct { int a; int b; int c; } ABC;\nvoid setabc(int x, const ABC* const abc) {\n    sum = abc->a + abc->b + abc->c;\n}\nvoid f(void) {\n    ABC abc;\n    abc.a = 1;\n    setabc(123, &abc);\n}\n"
Line 6180
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6180 always 6180
  "[test.cpp:8] -> [test.cpp:3]: (error) Uninitialized variable: abc->b\n[test.cpp:8] -> [test.cpp:3]: (error) Uninitialized variable: abc->c\n" always "[test.cpp:8] -> [test.cpp:3]: (error) Uninitialized variable: abc->b\n[test.cpp:8] -> [test.cpp:3]: (error) Uninitialized variable: abc->c\n"
  "[test.cpp:8] -> [test.cpp:3]: (error) Uninitialized variable: abc->b\n" always "[test.cpp:8] -> [test.cpp:3]: (error) Uninitialized variable: abc->b\n"
Line 6188
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6188 always 6188
  "struct C {\n    int x();\n};\nvoid f() {\n    C *c;\n    if (c->x() == 4) {}\n}" always "struct C {\n    int x();\n};\nvoid f() {\n    C *c;\n    if (c->x() == 4) {}\n}"
Line 6195
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6195 always 6195
  "[test.cpp:6]: (error) Uninitialized variable: c\n" always "[test.cpp:6]: (error) Uninitialized variable: c\n"
Line 6197
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6197 always 6197
  "struct A { \n    int i; \n    void f();\n};\nvoid g() {\n    A a;\n    a.f();\n}\n" always "struct A { \n    int i; \n    void f();\n};\nvoid g() {\n    A a;\n    a.f();\n}\n"
Line 6205
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6205 always 6205
  "" always ""
Line 6209
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6209 always 6209
  "struct Foo {\n  int bar;\n};\n\nint main() {\n  Foo* foo;\n  foo->bar = 3;\n}" always "struct Foo {\n  int bar;\n};\n\nint main() {\n  Foo* foo;\n  foo->bar = 3;\n}"
Line 6217
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6217 always 6217
  "[test.cpp:7]: (error) Uninitialized variable: foo\n" always "[test.cpp:7]: (error) Uninitialized variable: foo\n"
Line 6222
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6222 always 6222
  "void f() {\n    char a[10];\n    char c = *a;\n}" always "void f() {\n    char a[10];\n    char c = *a;\n}"
Line 6226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6226 always 6226
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 6229
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6229 always 6229
  "void f() {\n    char a[SIZE+10];\n    char c = *a;\n}" always "void f() {\n    char a[SIZE+10];\n    char c = *a;\n}"
Line 6233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6233 always 6233
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 6235
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6235 always 6235
  "void f() {\n    char a[10];\n    *a += 10;\n}" always "void f() {\n    char a[10];\n    *a += 10;\n}"
Line 6239
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6239 always 6239
  "[test.cpp:3]: (error) Uninitialized variable: a\n" always "[test.cpp:3]: (error) Uninitialized variable: a\n"
Line 6241
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6241 always 6241
  "void f() {\n  int a[10][10];\n  dostuff(*a);\n}" always "void f() {\n  int a[10][10];\n  dostuff(*a);\n}"
Line 6245
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6245 always 6245
  "" always ""
Line 6247
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6247 always 6247
  "void f() {\n    void (*fp[1]) (void) = {function1};\n    (*fp[0])();\n}" always "void f() {\n    void (*fp[1]) (void) = {function1};\n    (*fp[0])();\n}"
Line 6251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6251 always 6251
  "" always ""
Line 6257
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6257 always 6257
  "void f() {\n    char a[10];\n    char c = *a;\n}" always "void f() {\n    char a[10];\n    char c = *a;\n}"
Line 6261
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6261 always 6261
  "[test.cpp:3]: (error) Uninitialized variable: *a\n" always "[test.cpp:3]: (error) Uninitialized variable: *a\n"
Line 6264
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6264 always 6264
  "void f() {\n    char a[SIZE+10];\n    char c = *a;\n}" always "void f() {\n    char a[SIZE+10];\n    char c = *a;\n}"
Line 6268
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6268 always 6268
  "[test.cpp:3]: (error) Uninitialized variable: *a\n" always "[test.cpp:3]: (error) Uninitialized variable: *a\n"
Line 6270
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6270 always 6270
  "void f() {\n    char a[10];\n    *a += 10;\n}" always "void f() {\n    char a[10];\n    *a += 10;\n}"
Line 6274
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6274 always 6274
  "[test.cpp:3]: (error) Uninitialized variable: *a\n" always "[test.cpp:3]: (error) Uninitialized variable: *a\n"
Line 6276
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6276 always 6276
  "void f() {\n  int a[10][10];\n  dostuff(*a);\n}" always "void f() {\n  int a[10][10];\n  dostuff(*a);\n}"
Line 6280
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6280 always 6280
  "" always ""
Line 6282
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6282 always 6282
  "void f() {\n    void (*fp[1]) (void) = {function1};\n    (*fp[0])();\n}" always "void f() {\n    void (*fp[1]) (void) = {function1};\n    (*fp[0])();\n}"
Line 6286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6286 always 6286
  "" always ""
Line 6288
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6288 always 6288
  "template <typename T, int value> T Get() {return value;}\nchar f() {\n  char buf[10];\n  for(int i = 0; i < Get<int,10>() ; ++i) \n     buf[i] = 0;\n  return buf[0];\n}\n" always "template <typename T, int value> T Get() {return value;}\nchar f() {\n  char buf[10];\n  for(int i = 0; i < Get<int,10>() ; ++i) \n     buf[i] = 0;\n  return buf[0];\n}\n"
Line 6295
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6295 always 6295
  "" always ""
Line 6297
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6297 always 6297
  "static void Foo(double* p) {\n p[0] = 0;\n p[1] = 0;\n p[2] = 0;\n p[3] = 0;\n}\ndouble f() {\n  double L[2][2];\n  Foo(*L);\n  return L[0][0];\n}\n" always "static void Foo(double* p) {\n p[0] = 0;\n p[1] = 0;\n p[2] = 0;\n p[3] = 0;\n}\ndouble f() {\n  double L[2][2];\n  Foo(*L);\n  return L[0][0];\n}\n"
Line 6308
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6308 always 6308
  "" always ""
Line 6312
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6312 always 6312
  "struct foo{char *bar;};\nvoid f(unsigned long long *p) {\n    foo a;\n    ((&a)->bar) =  reinterpret_cast<char*>(*p);\n    if ((&a)->bar) ;\n}" always "struct foo{char *bar;};\nvoid f(unsigned long long *p) {\n    foo a;\n    ((&a)->bar) =  reinterpret_cast<char*>(*p);\n    if ((&a)->bar) ;\n}"
Line 6318
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6318 always 6318
  "" always ""
Line 6320
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6320 always 6320
  "struct foo{char *bar;};\nvoid f(unsigned long long *p) {\n    foo a;\n    ((&(a))->bar) =  reinterpret_cast<char*>(*p);\n    if ((&a)->bar) ;\n}" always "struct foo{char *bar;};\nvoid f(unsigned long long *p) {\n    foo a;\n    ((&(a))->bar) =  reinterpret_cast<char*>(*p);\n    if ((&a)->bar) ;\n}"
Line 6326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6326 always 6326
  "" always ""
Line 6328
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6328 always 6328
  "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A::B>& x) {\n    A::B b;\n    b.i = 123;\n    x.push_back(b);\n}\n" always "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A::B>& x) {\n    A::B b;\n    b.i = 123;\n    x.push_back(b);\n}\n"
Line 6339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6339 always 6339
  "" always ""
Line 6341
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6341 always 6341
  "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A::B>& x) {\n    A::B b;\n    x.push_back(b);\n}\n" always "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A::B>& x) {\n    A::B b;\n    x.push_back(b);\n}\n"
Line 6351
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6351 always 6351
  "[test.cpp:9]: (error) Uninitialized variable: b\n" always "[test.cpp:9]: (error) Uninitialized variable: b\n"
Line 6353
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6353 always 6353
  "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A>&x) {\n    A a;\n    a.j = 123;\n    x.push_back(a);\n}\n" always "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A>&x) {\n    A a;\n    a.j = 123;\n    x.push_back(a);\n}\n"
Line 6365
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6365 always 6365
  "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A>& x) {\n    A a;\n    x.push_back(a);\n}\n" always "struct A {\n    struct B {\n        int i;\n    };\n    int j;\n};\nvoid f(std::vector<A>& x) {\n    A a;\n    x.push_back(a);\n}\n"
Line 6375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6375 always 6375
  "[test.cpp:9]: (error) Uninitialized variable: a\n" always "[test.cpp:9]: (error) Uninitialized variable: a\n"
Line 6377
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6377 always 6377
  "struct S { struct T { int* p; } t[2]; };\nvoid f() {\n    S s;\n    *&s.t[0].p = 0;\n}\nvoid g() {\n    S s;\n    ((*&(*&s.t[0].p))) = 0;\n}\n" always "struct S { struct T { int* p; } t[2]; };\nvoid f() {\n    S s;\n    *&s.t[0].p = 0;\n}\nvoid g() {\n    S s;\n    ((*&(*&s.t[0].p))) = 0;\n}\n"
Line 6386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6386 always 6386
  "" always ""
Line 6388
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6388 always 6388
  "struct S { int i; };\nvoid f() {\n    struct S s;\n    int x = -3;\n    int y = x < (1, s.i);\n}\n" always "struct S { int i; };\nvoid f() {\n    struct S s;\n    int x = -3;\n    int y = x < (1, s.i);\n}\n"
Line 6394
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6394 always 6394
  "[test.cpp:5]: (error) Uninitialized variable: s.i\n" always "[test.cpp:5]: (error) Uninitialized variable: s.i\n"
Line 6399
  "" always ""
Line 6402
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 6403
  code possible {"void f(int *p) {\n    a = *p;\n}\nint main() {\n  int x;\n  f(&x);\n}"@1,"void use(int *p) { a = *p + 3; }\nvoid call(int x, int *p) { x++; use(p); }\nint main() {\n  int x;\n  call(4,&x);\n}"@2,"void dostuff(int *x, int *y) {\n  if (!var)\n    return -1;\n  *x = *y;\n}\n\nvoid f() {\n  int x;\n  dostuff(a, &x);\n}"@3,"void dostuff(int *x, int *y) {\n  if (cond)\n    *y = -1;\n  *x = *y;\n}\n\nvoid f() {\n  int x;\n  dostuff(a, &x);\n}"@4,"void f(int *p) {\n    a = sizeof(*p);\n}\nint main() {\n  int x;\n  f(&x);\n}"@5,"void f(int *v) {\n  std::cin >> *v;\n}\nint main() {\n  int x;\n  f(&x);\n}"@6,"void increment(int& i) { ++i; }\nint f() {\n    int n;\n    increment(n);\n    return n;\n}\n"@7,"void increment(int* i) { ++(*i); }\nint f() {\n    int n;\n    increment(&n);\n    return n;\n}\n"@8}
Line 6404
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testuninitvar.cpp"@1,"cppcheck-2.8/test/testuninitvar.cpp"@2,"cppcheck-2.8/test/testuninitvar.cpp"@3,"cppcheck-2.8/test/testuninitvar.cpp"@4,"cppcheck-2.8/test/testuninitvar.cpp"@5,"cppcheck-2.8/test/testuninitvar.cpp"@6,"cppcheck-2.8/test/testuninitvar.cpp"@7,"cppcheck-2.8/test/testuninitvar.cpp"@8}
  line inconclusive {6421@1,6430@2,6438@3,6450@4,6462@5,6471@6,6480@7,6488@8}
  "test.cpp" always "test.cpp"
Line 6406
  & {lifetime[Address]=(tokenizer),!0}
Line 6410
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 6411
  fileInfo always size=0
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
Line 6412
  fileInfo always size=1
  this always !0
Line 6413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 6414
  fileInfo always !size=0
Line 6415
  fileInfo always !size=0
Line 6421
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6421 always 6421
  "void f(int *p) {\n    a = *p;\n}\nint main() {\n  int x;\n  f(&x);\n}" always "void f(int *p) {\n    a = *p;\n}\nint main() {\n  int x;\n  f(&x);\n}"
Line 6428
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6428 always 6428
  "[test.cpp:6] -> [test.cpp:2]: (error) Using argument p that points at uninitialized variable x\n" always "[test.cpp:6] -> [test.cpp:2]: (error) Using argument p that points at uninitialized variable x\n"
Line 6430
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6430 always 6430
  "void use(int *p) { a = *p + 3; }\nvoid call(int x, int *p) { x++; use(p); }\nint main() {\n  int x;\n  call(4,&x);\n}" always "void use(int *p) { a = *p + 3; }\nvoid call(int x, int *p) { x++; use(p); }\nint main() {\n  int x;\n  call(4,&x);\n}"
Line 6436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6436 always 6436
  "[test.cpp:5] -> [test.cpp:2] -> [test.cpp:1]: (error) Using argument p that points at uninitialized variable x\n" always "[test.cpp:5] -> [test.cpp:2] -> [test.cpp:1]: (error) Using argument p that points at uninitialized variable x\n"
Line 6438
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6438 always 6438
  "void dostuff(int *x, int *y) {\n  if (!var)\n    return -1;\n  *x = *y;\n}\n\nvoid f() {\n  int x;\n  dostuff(a, &x);\n}" always "void dostuff(int *x, int *y) {\n  if (!var)\n    return -1;\n  *x = *y;\n}\n\nvoid f() {\n  int x;\n  dostuff(a, &x);\n}"
Line 6448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6448 always 6448
  "" always ""
Line 6450
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6450 always 6450
  "void dostuff(int *x, int *y) {\n  if (cond)\n    *y = -1;\n  *x = *y;\n}\n\nvoid f() {\n  int x;\n  dostuff(a, &x);\n}" always "void dostuff(int *x, int *y) {\n  if (cond)\n    *y = -1;\n  *x = *y;\n}\n\nvoid f() {\n  int x;\n  dostuff(a, &x);\n}"
Line 6460
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6460 always 6460
  "" always ""
Line 6462
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6462 always 6462
  "void f(int *p) {\n    a = sizeof(*p);\n}\nint main() {\n  int x;\n  f(&x);\n}" always "void f(int *p) {\n    a = sizeof(*p);\n}\nint main() {\n  int x;\n  f(&x);\n}"
Line 6469
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6469 always 6469
  "" always ""
Line 6471
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6471 always 6471
  "void f(int *v) {\n  std::cin >> *v;\n}\nint main() {\n  int x;\n  f(&x);\n}" always "void f(int *v) {\n  std::cin >> *v;\n}\nint main() {\n  int x;\n  f(&x);\n}"
Line 6478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6478 always 6478
  "" always ""
Line 6480
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6480 always 6480
  "void increment(int& i) { ++i; }\nint f() {\n    int n;\n    increment(n);\n    return n;\n}\n" always "void increment(int& i) { ++i; }\nint f() {\n    int n;\n    increment(n);\n    return n;\n}\n"
Line 6486
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6486 always 6486
  "[test.cpp:4] -> [test.cpp:1]: (error) Using argument i that points at uninitialized variable n\n" always "[test.cpp:4] -> [test.cpp:1]: (error) Using argument i that points at uninitialized variable n\n"
Line 6488
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6488 always 6488
  "void increment(int* i) { ++(*i); }\nint f() {\n    int n;\n    increment(&n);\n    return n;\n}\n" always "void increment(int* i) { ++(*i); }\nint f() {\n    int n;\n    increment(&n);\n    return n;\n}\n"
Line 6494
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testuninitvar.cpp" always "cppcheck-2.8/test/testuninitvar.cpp"
  6494 always 6494
  "[test.cpp:4] -> [test.cpp:1]: (error) Using argument i that points at uninitialized variable n\n" always "[test.cpp:4] -> [test.cpp:1]: (error) Using argument i that points at uninitialized variable n\n"
