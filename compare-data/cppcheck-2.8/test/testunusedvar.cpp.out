

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741951 expected@var22 !=@expr1073741952 actual@var23 ) {
62: std ::@expr1073741953 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741954 expected@var22 ;
64: std ::@expr1073741955 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741956 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741957 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741958 str (@expr1073741959 ) , actualStr@var26 .@expr1073741960 str (@expr1073741961 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741962 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741963 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741964 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741965 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testunusedvar.cpp

1:
|
29:
30: class TestUnusedVar : public TestFixture {
31: public:
32: TestUnusedVar ( ) : TestFixture ( "TestUnusedVar" ) { }
33:
34: private:
35: Settings settings@var102 ;
36:
37: void run ( ) override {
38: settings@var102 .@expr144 severity@var103 .@expr145 enable (@expr1073741970 Severity ::@expr1073741971 style@expr1073741966 ) ;
39: settings@var102 .@expr144 severity@var103 .@expr145 enable (@expr1073741974 Severity ::@expr1073741975 information@expr1073741967 ) ;
40: settings@var102 .@expr1073741976 checkLibrary@var104 =@expr1073741977 true ;
41: $do ${ $if $(@expr1073741978 settings@var102 .@expr1073741979 library@var105 $.@expr1073741980 $load $(@expr1073741981 $exename@var11 $.@expr1073741982 $c_str $(@expr1073741983 $) $, "std.cfg" $) $.@expr1073741984 $errorcode $!=@expr1073741985 $Library $::@expr1073741986 $ErrorCode $::@expr1073741987 $OK $) ${ $complainMissingLib $(@expr1073741988 "std.cfg" $) $; $return $; $} $} $while $(@expr1073741989 $false $) ;
42:
43: $do ${ $if $(@expr1073741990 $prepareTest $(@expr1073741991 "isRecordTypeWithoutSideEffects" $) $) ${ $setVerbose $(@expr1073741992 $false $) $; isRecordTypeWithoutSideEffects $(@expr1073741993 $) $; $} $} $while $(@expr1073741994 $false $) ;
44: $do ${ $if $(@expr1073741995 $prepareTest $(@expr1073741996 "cleanFunction" $) $) ${ $setVerbose $(@expr1073741997 $false $) $; cleanFunction $(@expr1073741998 $) $; $} $} $while $(@expr1073741999 $false $) ;
45:
46: $do ${ $if $(@expr1073742000 $prepareTest $(@expr1073742001 "emptyclass" $) $) ${ $setVerbose $(@expr1073742002 $false $) $; emptyclass $(@expr1073742003 $) $; $} $} $while $(@expr1073742004 $false $) ;
47: $do ${ $if $(@expr1073742005 $prepareTest $(@expr1073742006 "emptystruct" $) $) ${ $setVerbose $(@expr1073742007 $false $) $; emptystruct $(@expr1073742008 $) $; $} $} $while $(@expr1073742009 $false $) ;
48:
49: $do ${ $if $(@expr1073742010 $prepareTest $(@expr1073742011 "structmember1" $) $) ${ $setVerbose $(@expr1073742012 $false $) $; structmember1 $(@expr1073742013 $) $; $} $} $while $(@expr1073742014 $false $) ;
50: $do ${ $if $(@expr1073742015 $prepareTest $(@expr1073742016 "structmember2" $) $) ${ $setVerbose $(@expr1073742017 $false $) $; structmember2 $(@expr1073742018 $) $; $} $} $while $(@expr1073742019 $false $) ;
51: $do ${ $if $(@expr1073742020 $prepareTest $(@expr1073742021 "structmember3" $) $) ${ $setVerbose $(@expr1073742022 $false $) $; structmember3 $(@expr1073742023 $) $; $} $} $while $(@expr1073742024 $false $) ;
52: $do ${ $if $(@expr1073742025 $prepareTest $(@expr1073742026 "structmember4" $) $) ${ $setVerbose $(@expr1073742027 $false $) $; structmember4 $(@expr1073742028 $) $; $} $} $while $(@expr1073742029 $false $) ;
53: $do ${ $if $(@expr1073742030 $prepareTest $(@expr1073742031 "structmember5" $) $) ${ $setVerbose $(@expr1073742032 $false $) $; structmember5 $(@expr1073742033 $) $; $} $} $while $(@expr1073742034 $false $) ;
54: $do ${ $if $(@expr1073742035 $prepareTest $(@expr1073742036 "structmember6" $) $) ${ $setVerbose $(@expr1073742037 $false $) $; structmember6 $(@expr1073742038 $) $; $} $} $while $(@expr1073742039 $false $) ;
55: $do ${ $if $(@expr1073742040 $prepareTest $(@expr1073742041 "structmember7" $) $) ${ $setVerbose $(@expr1073742042 $false $) $; structmember7 $(@expr1073742043 $) $; $} $} $while $(@expr1073742044 $false $) ;
56: $do ${ $if $(@expr1073742045 $prepareTest $(@expr1073742046 "structmember8" $) $) ${ $setVerbose $(@expr1073742047 $false $) $; structmember8 $(@expr1073742048 $) $; $} $} $while $(@expr1073742049 $false $) ;
57: $do ${ $if $(@expr1073742050 $prepareTest $(@expr1073742051 "structmember9" $) $) ${ $setVerbose $(@expr1073742052 $false $) $; structmember9 $(@expr1073742053 $) $; $} $} $while $(@expr1073742054 $false $) ;
58: $do ${ $if $(@expr1073742055 $prepareTest $(@expr1073742056 "structmember_extern" $) $) ${ $setVerbose $(@expr1073742057 $false $) $; structmember_extern $(@expr1073742058 $) $; $} $} $while $(@expr1073742059 $false $) ;
59: $do ${ $if $(@expr1073742060 $prepareTest $(@expr1073742061 "structmember10" $) $) ${ $setVerbose $(@expr1073742062 $false $) $; structmember10 $(@expr1073742063 $) $; $} $} $while $(@expr1073742064 $false $) ;
60: $do ${ $if $(@expr1073742065 $prepareTest $(@expr1073742066 "structmember11" $) $) ${ $setVerbose $(@expr1073742067 $false $) $; structmember11 $(@expr1073742068 $) $; $} $} $while $(@expr1073742069 $false $) ;
61: $do ${ $if $(@expr1073742070 $prepareTest $(@expr1073742071 "structmember12" $) $) ${ $setVerbose $(@expr1073742072 $false $) $; structmember12 $(@expr1073742073 $) $; $} $} $while $(@expr1073742074 $false $) ;
62: $do ${ $if $(@expr1073742075 $prepareTest $(@expr1073742076 "structmember13" $) $) ${ $setVerbose $(@expr1073742077 $false $) $; structmember13 $(@expr1073742078 $) $; $} $} $while $(@expr1073742079 $false $) ;
63: $do ${ $if $(@expr1073742080 $prepareTest $(@expr1073742081 "structmember14" $) $) ${ $setVerbose $(@expr1073742082 $false $) $; structmember14 $(@expr1073742083 $) $; $} $} $while $(@expr1073742084 $false $) ;
64: $do ${ $if $(@expr1073742085 $prepareTest $(@expr1073742086 "structmember15" $) $) ${ $setVerbose $(@expr1073742087 $false $) $; structmember15 $(@expr1073742088 $) $; $} $} $while $(@expr1073742089 $false $) ;
65: $do ${ $if $(@expr1073742090 $prepareTest $(@expr1073742091 "structmember_sizeof" $) $) ${ $setVerbose $(@expr1073742092 $false $) $; structmember_sizeof $(@expr1073742093 $) $; $} $} $while $(@expr1073742094 $false $) ;
66: $do ${ $if $(@expr1073742095 $prepareTest $(@expr1073742096 "structmember16" $) $) ${ $setVerbose $(@expr1073742097 $false $) $; structmember16 $(@expr1073742098 $) $; $} $} $while $(@expr1073742099 $false $) ;
67: $do ${ $if $(@expr1073742100 $prepareTest $(@expr1073742101 "structmember17" $) $) ${ $setVerbose $(@expr1073742102 $false $) $; structmember17 $(@expr1073742103 $) $; $} $} $while $(@expr1073742104 $false $) ;
68: $do ${ $if $(@expr1073742105 $prepareTest $(@expr1073742106 "structmember18" $) $) ${ $setVerbose $(@expr1073742107 $false $) $; structmember18 $(@expr1073742108 $) $; $} $} $while $(@expr1073742109 $false $) ;
69: $do ${ $if $(@expr1073742110 $prepareTest $(@expr1073742111 "structmember19" $) $) ${ $setVerbose $(@expr1073742112 $false $) $; structmember19 $(@expr1073742113 $) $; $} $} $while $(@expr1073742114 $false $) ;
70: $do ${ $if $(@expr1073742115 $prepareTest $(@expr1073742116 "structmember20" $) $) ${ $setVerbose $(@expr1073742117 $false $) $; structmember20 $(@expr1073742118 $) $; $} $} $while $(@expr1073742119 $false $) ;
71:
72: $do ${ $if $(@expr1073742120 $prepareTest $(@expr1073742121 "localvar1" $) $) ${ $setVerbose $(@expr1073742122 $false $) $; localvar1 $(@expr1073742123 $) $; $} $} $while $(@expr1073742124 $false $) ;
73: $do ${ $if $(@expr1073742125 $prepareTest $(@expr1073742126 "localvar2" $) $) ${ $setVerbose $(@expr1073742127 $false $) $; localvar2 $(@expr1073742128 $) $; $} $} $while $(@expr1073742129 $false $) ;
74: $do ${ $if $(@expr1073742130 $prepareTest $(@expr1073742131 "localvar3" $) $) ${ $setVerbose $(@expr1073742132 $false $) $; localvar3 $(@expr1073742133 $) $; $} $} $while $(@expr1073742134 $false $) ;
75: $do ${ $if $(@expr1073742135 $prepareTest $(@expr1073742136 "localvar4" $) $) ${ $setVerbose $(@expr1073742137 $false $) $; localvar4 $(@expr1073742138 $) $; $} $} $while $(@expr1073742139 $false $) ;
76: $do ${ $if $(@expr1073742140 $prepareTest $(@expr1073742141 "localvar5" $) $) ${ $setVerbose $(@expr1073742142 $false $) $; localvar5 $(@expr1073742143 $) $; $} $} $while $(@expr1073742144 $false $) ;
77: $do ${ $if $(@expr1073742145 $prepareTest $(@expr1073742146 "localvar6" $) $) ${ $setVerbose $(@expr1073742147 $false $) $; localvar6 $(@expr1073742148 $) $; $} $} $while $(@expr1073742149 $false $) ;
78: $do ${ $if $(@expr1073742150 $prepareTest $(@expr1073742151 "localvar8" $) $) ${ $setVerbose $(@expr1073742152 $false $) $; localvar8 $(@expr1073742153 $) $; $} $} $while $(@expr1073742154 $false $) ;
79: $do ${ $if $(@expr1073742155 $prepareTest $(@expr1073742156 "localvar9" $) $) ${ $setVerbose $(@expr1073742157 $false $) $; localvar9 $(@expr1073742158 $) $; $} $} $while $(@expr1073742159 $false $) ;
80: $do ${ $if $(@expr1073742160 $prepareTest $(@expr1073742161 "localvar10" $) $) ${ $setVerbose $(@expr1073742162 $false $) $; localvar10 $(@expr1073742163 $) $; $} $} $while $(@expr1073742164 $false $) ;
81: $do ${ $if $(@expr1073742165 $prepareTest $(@expr1073742166 "localvar11" $) $) ${ $setVerbose $(@expr1073742167 $false $) $; localvar11 $(@expr1073742168 $) $; $} $} $while $(@expr1073742169 $false $) ;
82: $do ${ $if $(@expr1073742170 $prepareTest $(@expr1073742171 "localvar12" $) $) ${ $setVerbose $(@expr1073742172 $false $) $; localvar12 $(@expr1073742173 $) $; $} $} $while $(@expr1073742174 $false $) ;
83: $do ${ $if $(@expr1073742175 $prepareTest $(@expr1073742176 "localvar13" $) $) ${ $setVerbose $(@expr1073742177 $false $) $; localvar13 $(@expr1073742178 $) $; $} $} $while $(@expr1073742179 $false $) ;
84: $do ${ $if $(@expr1073742180 $prepareTest $(@expr1073742181 "localvar14" $) $) ${ $setVerbose $(@expr1073742182 $false $) $; localvar14 $(@expr1073742183 $) $; $} $} $while $(@expr1073742184 $false $) ;
85: $do ${ $if $(@expr1073742185 $prepareTest $(@expr1073742186 "localvar15" $) $) ${ $setVerbose $(@expr1073742187 $false $) $; localvar15 $(@expr1073742188 $) $; $} $} $while $(@expr1073742189 $false $) ;
86: $do ${ $if $(@expr1073742190 $prepareTest $(@expr1073742191 "localvar16" $) $) ${ $setVerbose $(@expr1073742192 $false $) $; localvar16 $(@expr1073742193 $) $; $} $} $while $(@expr1073742194 $false $) ;
87: $do ${ $if $(@expr1073742195 $prepareTest $(@expr1073742196 "localvar17" $) $) ${ $setVerbose $(@expr1073742197 $false $) $; localvar17 $(@expr1073742198 $) $; $} $} $while $(@expr1073742199 $false $) ;
88: $do ${ $if $(@expr1073742200 $prepareTest $(@expr1073742201 "localvar18" $) $) ${ $setVerbose $(@expr1073742202 $false $) $; localvar18 $(@expr1073742203 $) $; $} $} $while $(@expr1073742204 $false $) ;
89: $do ${ $if $(@expr1073742205 $prepareTest $(@expr1073742206 "localvar19" $) $) ${ $setVerbose $(@expr1073742207 $false $) $; localvar19 $(@expr1073742208 $) $; $} $} $while $(@expr1073742209 $false $) ;
90: $do ${ $if $(@expr1073742210 $prepareTest $(@expr1073742211 "localvar20" $) $) ${ $setVerbose $(@expr1073742212 $false $) $; localvar20 $(@expr1073742213 $) $; $} $} $while $(@expr1073742214 $false $) ;
91: $do ${ $if $(@expr1073742215 $prepareTest $(@expr1073742216 "localvar21" $) $) ${ $setVerbose $(@expr1073742217 $false $) $; localvar21 $(@expr1073742218 $) $; $} $} $while $(@expr1073742219 $false $) ;
92: $do ${ $if $(@expr1073742220 $prepareTest $(@expr1073742221 "localvar22" $) $) ${ $setVerbose $(@expr1073742222 $false $) $; localvar22 $(@expr1073742223 $) $; $} $} $while $(@expr1073742224 $false $) ;
93: $do ${ $if $(@expr1073742225 $prepareTest $(@expr1073742226 "localvar23" $) $) ${ $setVerbose $(@expr1073742227 $false $) $; localvar23 $(@expr1073742228 $) $; $} $} $while $(@expr1073742229 $false $) ;
94: $do ${ $if $(@expr1073742230 $prepareTest $(@expr1073742231 "localvar24" $) $) ${ $setVerbose $(@expr1073742232 $false $) $; localvar24 $(@expr1073742233 $) $; $} $} $while $(@expr1073742234 $false $) ;
95: $do ${ $if $(@expr1073742235 $prepareTest $(@expr1073742236 "localvar25" $) $) ${ $setVerbose $(@expr1073742237 $false $) $; localvar25 $(@expr1073742238 $) $; $} $} $while $(@expr1073742239 $false $) ;
96: $do ${ $if $(@expr1073742240 $prepareTest $(@expr1073742241 "localvar26" $) $) ${ $setVerbose $(@expr1073742242 $false $) $; localvar26 $(@expr1073742243 $) $; $} $} $while $(@expr1073742244 $false $) ;
97: $do ${ $if $(@expr1073742245 $prepareTest $(@expr1073742246 "localvar27" $) $) ${ $setVerbose $(@expr1073742247 $false $) $; localvar27 $(@expr1073742248 $) $; $} $} $while $(@expr1073742249 $false $) ;
98: $do ${ $if $(@expr1073742250 $prepareTest $(@expr1073742251 "localvar28" $) $) ${ $setVerbose $(@expr1073742252 $false $) $; localvar28 $(@expr1073742253 $) $; $} $} $while $(@expr1073742254 $false $) ;
99: $do ${ $if $(@expr1073742255 $prepareTest $(@expr1073742256 "localvar29" $) $) ${ $setVerbose $(@expr1073742257 $false $) $; localvar29 $(@expr1073742258 $) $; $} $} $while $(@expr1073742259 $false $) ;
100: $do ${ $if $(@expr1073742260 $prepareTest $(@expr1073742261 "localvar30" $) $) ${ $setVerbose $(@expr1073742262 $false $) $; localvar30 $(@expr1073742263 $) $; $} $} $while $(@expr1073742264 $false $) ;
101: $do ${ $if $(@expr1073742265 $prepareTest $(@expr1073742266 "localvar31" $) $) ${ $setVerbose $(@expr1073742267 $false $) $; localvar31 $(@expr1073742268 $) $; $} $} $while $(@expr1073742269 $false $) ;
102: $do ${ $if $(@expr1073742270 $prepareTest $(@expr1073742271 "localvar32" $) $) ${ $setVerbose $(@expr1073742272 $false $) $; localvar32 $(@expr1073742273 $) $; $} $} $while $(@expr1073742274 $false $) ;
103: $do ${ $if $(@expr1073742275 $prepareTest $(@expr1073742276 "localvar33" $) $) ${ $setVerbose $(@expr1073742277 $false $) $; localvar33 $(@expr1073742278 $) $; $} $} $while $(@expr1073742279 $false $) ;
104: $do ${ $if $(@expr1073742280 $prepareTest $(@expr1073742281 "localvar34" $) $) ${ $setVerbose $(@expr1073742282 $false $) $; localvar34 $(@expr1073742283 $) $; $} $} $while $(@expr1073742284 $false $) ;
105: $do ${ $if $(@expr1073742285 $prepareTest $(@expr1073742286 "localvar35" $) $) ${ $setVerbose $(@expr1073742287 $false $) $; localvar35 $(@expr1073742288 $) $; $} $} $while $(@expr1073742289 $false $) ;
106: $do ${ $if $(@expr1073742290 $prepareTest $(@expr1073742291 "localvar36" $) $) ${ $setVerbose $(@expr1073742292 $false $) $; localvar36 $(@expr1073742293 $) $; $} $} $while $(@expr1073742294 $false $) ;
107: $do ${ $if $(@expr1073742295 $prepareTest $(@expr1073742296 "localvar37" $) $) ${ $setVerbose $(@expr1073742297 $false $) $; localvar37 $(@expr1073742298 $) $; $} $} $while $(@expr1073742299 $false $) ;
108: $do ${ $if $(@expr1073742300 $prepareTest $(@expr1073742301 "localvar38" $) $) ${ $setVerbose $(@expr1073742302 $false $) $; localvar38 $(@expr1073742303 $) $; $} $} $while $(@expr1073742304 $false $) ;
109: $do ${ $if $(@expr1073742305 $prepareTest $(@expr1073742306 "localvar39" $) $) ${ $setVerbose $(@expr1073742307 $false $) $; localvar39 $(@expr1073742308 $) $; $} $} $while $(@expr1073742309 $false $) ;
110: $do ${ $if $(@expr1073742310 $prepareTest $(@expr1073742311 "localvar40" $) $) ${ $setVerbose $(@expr1073742312 $false $) $; localvar40 $(@expr1073742313 $) $; $} $} $while $(@expr1073742314 $false $) ;
111: $do ${ $if $(@expr1073742315 $prepareTest $(@expr1073742316 "localvar41" $) $) ${ $setVerbose $(@expr1073742317 $false $) $; localvar41 $(@expr1073742318 $) $; $} $} $while $(@expr1073742319 $false $) ;
112: $do ${ $if $(@expr1073742320 $prepareTest $(@expr1073742321 "localvar42" $) $) ${ $setVerbose $(@expr1073742322 $false $) $; localvar42 $(@expr1073742323 $) $; $} $} $while $(@expr1073742324 $false $) ;
113: $do ${ $if $(@expr1073742325 $prepareTest $(@expr1073742326 "localvar43" $) $) ${ $setVerbose $(@expr1073742327 $false $) $; localvar43 $(@expr1073742328 $) $; $} $} $while $(@expr1073742329 $false $) ;
114: $do ${ $if $(@expr1073742330 $prepareTest $(@expr1073742331 "localvar44" $) $) ${ $setVerbose $(@expr1073742332 $false $) $; localvar44 $(@expr1073742333 $) $; $} $} $while $(@expr1073742334 $false $) ;
115: $do ${ $if $(@expr1073742335 $prepareTest $(@expr1073742336 "localvar45" $) $) ${ $setVerbose $(@expr1073742337 $false $) $; localvar45 $(@expr1073742338 $) $; $} $} $while $(@expr1073742339 $false $) ;
116: $do ${ $if $(@expr1073742340 $prepareTest $(@expr1073742341 "localvar46" $) $) ${ $setVerbose $(@expr1073742342 $false $) $; localvar46 $(@expr1073742343 $) $; $} $} $while $(@expr1073742344 $false $) ;
117: $do ${ $if $(@expr1073742345 $prepareTest $(@expr1073742346 "localvar47" $) $) ${ $setVerbose $(@expr1073742347 $false $) $; localvar47 $(@expr1073742348 $) $; $} $} $while $(@expr1073742349 $false $) ;
118: $do ${ $if $(@expr1073742350 $prepareTest $(@expr1073742351 "localvar48" $) $) ${ $setVerbose $(@expr1073742352 $false $) $; localvar48 $(@expr1073742353 $) $; $} $} $while $(@expr1073742354 $false $) ;
119: $do ${ $if $(@expr1073742355 $prepareTest $(@expr1073742356 "localvar49" $) $) ${ $setVerbose $(@expr1073742357 $false $) $; localvar49 $(@expr1073742358 $) $; $} $} $while $(@expr1073742359 $false $) ;
120: $do ${ $if $(@expr1073742360 $prepareTest $(@expr1073742361 "localvar50" $) $) ${ $setVerbose $(@expr1073742362 $false $) $; localvar50 $(@expr1073742363 $) $; $} $} $while $(@expr1073742364 $false $) ;
121: $do ${ $if $(@expr1073742365 $prepareTest $(@expr1073742366 "localvar51" $) $) ${ $setVerbose $(@expr1073742367 $false $) $; localvar51 $(@expr1073742368 $) $; $} $} $while $(@expr1073742369 $false $) ;
122: $do ${ $if $(@expr1073742370 $prepareTest $(@expr1073742371 "localvar52" $) $) ${ $setVerbose $(@expr1073742372 $false $) $; localvar52 $(@expr1073742373 $) $; $} $} $while $(@expr1073742374 $false $) ;
123: $do ${ $if $(@expr1073742375 $prepareTest $(@expr1073742376 "localvar53" $) $) ${ $setVerbose $(@expr1073742377 $false $) $; localvar53 $(@expr1073742378 $) $; $} $} $while $(@expr1073742379 $false $) ;
124: $do ${ $if $(@expr1073742380 $prepareTest $(@expr1073742381 "localvar54" $) $) ${ $setVerbose $(@expr1073742382 $false $) $; localvar54 $(@expr1073742383 $) $; $} $} $while $(@expr1073742384 $false $) ;
125: $do ${ $if $(@expr1073742385 $prepareTest $(@expr1073742386 "localvar55" $) $) ${ $setVerbose $(@expr1073742387 $false $) $; localvar55 $(@expr1073742388 $) $; $} $} $while $(@expr1073742389 $false $) ;
126: $do ${ $if $(@expr1073742390 $prepareTest $(@expr1073742391 "localvar56" $) $) ${ $setVerbose $(@expr1073742392 $false $) $; localvar56 $(@expr1073742393 $) $; $} $} $while $(@expr1073742394 $false $) ;
127: $do ${ $if $(@expr1073742395 $prepareTest $(@expr1073742396 "localvar57" $) $) ${ $setVerbose $(@expr1073742397 $false $) $; localvar57 $(@expr1073742398 $) $; $} $} $while $(@expr1073742399 $false $) ;
128: $do ${ $if $(@expr1073742400 $prepareTest $(@expr1073742401 "localvar58" $) $) ${ $setVerbose $(@expr1073742402 $false $) $; localvar58 $(@expr1073742403 $) $; $} $} $while $(@expr1073742404 $false $) ;
129: $do ${ $if $(@expr1073742405 $prepareTest $(@expr1073742406 "localvar59" $) $) ${ $setVerbose $(@expr1073742407 $false $) $; localvar59 $(@expr1073742408 $) $; $} $} $while $(@expr1073742409 $false $) ;
130: $do ${ $if $(@expr1073742410 $prepareTest $(@expr1073742411 "localvar60" $) $) ${ $setVerbose $(@expr1073742412 $false $) $; localvar60 $(@expr1073742413 $) $; $} $} $while $(@expr1073742414 $false $) ;
131: $do ${ $if $(@expr1073742415 $prepareTest $(@expr1073742416 "localvar61" $) $) ${ $setVerbose $(@expr1073742417 $false $) $; localvar61 $(@expr1073742418 $) $; $} $} $while $(@expr1073742419 $false $) ;
132: $do ${ $if $(@expr1073742420 $prepareTest $(@expr1073742421 "localvar62" $) $) ${ $setVerbose $(@expr1073742422 $false $) $; localvar62 $(@expr1073742423 $) $; $} $} $while $(@expr1073742424 $false $) ;
133: $do ${ $if $(@expr1073742425 $prepareTest $(@expr1073742426 "localvar63" $) $) ${ $setVerbose $(@expr1073742427 $false $) $; localvar63 $(@expr1073742428 $) $; $} $} $while $(@expr1073742429 $false $) ;
134: $do ${ $if $(@expr1073742430 $prepareTest $(@expr1073742431 "localvarloops" $) $) ${ $setVerbose $(@expr1073742432 $false $) $; localvarloops $(@expr1073742433 $) $; $} $} $while $(@expr1073742434 $false $) ;
135: $do ${ $if $(@expr1073742435 $prepareTest $(@expr1073742436 "localvaralias1" $) $) ${ $setVerbose $(@expr1073742437 $false $) $; localvaralias1 $(@expr1073742438 $) $; $} $} $while $(@expr1073742439 $false $) ;
136: $do ${ $if $(@expr1073742440 $prepareTest $(@expr1073742441 "localvaralias2" $) $) ${ $setVerbose $(@expr1073742442 $false $) $; localvaralias2 $(@expr1073742443 $) $; $} $} $while $(@expr1073742444 $false $) ;
137: $do ${ $if $(@expr1073742445 $prepareTest $(@expr1073742446 "localvaralias3" $) $) ${ $setVerbose $(@expr1073742447 $false $) $; localvaralias3 $(@expr1073742448 $) $; $} $} $while $(@expr1073742449 $false $) ;
138: $do ${ $if $(@expr1073742450 $prepareTest $(@expr1073742451 "localvaralias4" $) $) ${ $setVerbose $(@expr1073742452 $false $) $; localvaralias4 $(@expr1073742453 $) $; $} $} $while $(@expr1073742454 $false $) ;
139: $do ${ $if $(@expr1073742455 $prepareTest $(@expr1073742456 "localvaralias5" $) $) ${ $setVerbose $(@expr1073742457 $false $) $; localvaralias5 $(@expr1073742458 $) $; $} $} $while $(@expr1073742459 $false $) ;
140: $do ${ $if $(@expr1073742460 $prepareTest $(@expr1073742461 "localvaralias6" $) $) ${ $setVerbose $(@expr1073742462 $false $) $; localvaralias6 $(@expr1073742463 $) $; $} $} $while $(@expr1073742464 $false $) ;
141: $do ${ $if $(@expr1073742465 $prepareTest $(@expr1073742466 "localvaralias7" $) $) ${ $setVerbose $(@expr1073742467 $false $) $; localvaralias7 $(@expr1073742468 $) $; $} $} $while $(@expr1073742469 $false $) ;
142: $do ${ $if $(@expr1073742470 $prepareTest $(@expr1073742471 "localvaralias8" $) $) ${ $setVerbose $(@expr1073742472 $false $) $; localvaralias8 $(@expr1073742473 $) $; $} $} $while $(@expr1073742474 $false $) ;
143: $do ${ $if $(@expr1073742475 $prepareTest $(@expr1073742476 "localvaralias9" $) $) ${ $setVerbose $(@expr1073742477 $false $) $; localvaralias9 $(@expr1073742478 $) $; $} $} $while $(@expr1073742479 $false $) ;
144: $do ${ $if $(@expr1073742480 $prepareTest $(@expr1073742481 "localvaralias10" $) $) ${ $setVerbose $(@expr1073742482 $false $) $; localvaralias10 $(@expr1073742483 $) $; $} $} $while $(@expr1073742484 $false $) ;
145: $do ${ $if $(@expr1073742485 $prepareTest $(@expr1073742486 "localvaralias11" $) $) ${ $setVerbose $(@expr1073742487 $false $) $; localvaralias11 $(@expr1073742488 $) $; $} $} $while $(@expr1073742489 $false $) ;
146: $do ${ $if $(@expr1073742490 $prepareTest $(@expr1073742491 "localvaralias12" $) $) ${ $setVerbose $(@expr1073742492 $false $) $; localvaralias12 $(@expr1073742493 $) $; $} $} $while $(@expr1073742494 $false $) ;
147: $do ${ $if $(@expr1073742495 $prepareTest $(@expr1073742496 "localvaralias13" $) $) ${ $setVerbose $(@expr1073742497 $false $) $; localvaralias13 $(@expr1073742498 $) $; $} $} $while $(@expr1073742499 $false $) ;
148: $do ${ $if $(@expr1073742500 $prepareTest $(@expr1073742501 "localvaralias14" $) $) ${ $setVerbose $(@expr1073742502 $false $) $; localvaralias14 $(@expr1073742503 $) $; $} $} $while $(@expr1073742504 $false $) ;
149: $do ${ $if $(@expr1073742505 $prepareTest $(@expr1073742506 "localvaralias15" $) $) ${ $setVerbose $(@expr1073742507 $false $) $; localvaralias15 $(@expr1073742508 $) $; $} $} $while $(@expr1073742509 $false $) ;
150: $do ${ $if $(@expr1073742510 $prepareTest $(@expr1073742511 "localvaralias16" $) $) ${ $setVerbose $(@expr1073742512 $false $) $; localvaralias16 $(@expr1073742513 $) $; $} $} $while $(@expr1073742514 $false $) ;
151: $do ${ $if $(@expr1073742515 $prepareTest $(@expr1073742516 "localvaralias17" $) $) ${ $setVerbose $(@expr1073742517 $false $) $; localvaralias17 $(@expr1073742518 $) $; $} $} $while $(@expr1073742519 $false $) ;
152: $do ${ $if $(@expr1073742520 $prepareTest $(@expr1073742521 "localvaralias18" $) $) ${ $setVerbose $(@expr1073742522 $false $) $; localvaralias18 $(@expr1073742523 $) $; $} $} $while $(@expr1073742524 $false $) ;
153: $do ${ $if $(@expr1073742525 $prepareTest $(@expr1073742526 "localvaralias19" $) $) ${ $setVerbose $(@expr1073742527 $false $) $; localvaralias19 $(@expr1073742528 $) $; $} $} $while $(@expr1073742529 $false $) ;
154: $do ${ $if $(@expr1073742530 $prepareTest $(@expr1073742531 "localvarasm" $) $) ${ $setVerbose $(@expr1073742532 $false $) $; localvarasm $(@expr1073742533 $) $; $} $} $while $(@expr1073742534 $false $) ;
155: $do ${ $if $(@expr1073742535 $prepareTest $(@expr1073742536 "localvarstatic" $) $) ${ $setVerbose $(@expr1073742537 $false $) $; localvarstatic $(@expr1073742538 $) $; $} $} $while $(@expr1073742539 $false $) ;
156: $do ${ $if $(@expr1073742540 $prepareTest $(@expr1073742541 "localvarextern" $) $) ${ $setVerbose $(@expr1073742542 $false $) $; localvarextern $(@expr1073742543 $) $; $} $} $while $(@expr1073742544 $false $) ;
157: $do ${ $if $(@expr1073742545 $prepareTest $(@expr1073742546 "localvardynamic1" $) $) ${ $setVerbose $(@expr1073742547 $false $) $; localvardynamic1 $(@expr1073742548 $) $; $} $} $while $(@expr1073742549 $false $) ;
158: $do ${ $if $(@expr1073742550 $prepareTest $(@expr1073742551 "localvardynamic2" $) $) ${ $setVerbose $(@expr1073742552 $false $) $; localvardynamic2 $(@expr1073742553 $) $; $} $} $while $(@expr1073742554 $false $) ;
159: $do ${ $if $(@expr1073742555 $prepareTest $(@expr1073742556 "localvardynamic3" $) $) ${ $setVerbose $(@expr1073742557 $false $) $; localvardynamic3 $(@expr1073742558 $) $; $} $} $while $(@expr1073742559 $false $) ;
160: $do ${ $if $(@expr1073742560 $prepareTest $(@expr1073742561 "localvararray1" $) $) ${ $setVerbose $(@expr1073742562 $false $) $; localvararray1 $(@expr1073742563 $) $; $} $} $while $(@expr1073742564 $false $) ;
161: $do ${ $if $(@expr1073742565 $prepareTest $(@expr1073742566 "localvararray2" $) $) ${ $setVerbose $(@expr1073742567 $false $) $; localvararray2 $(@expr1073742568 $) $; $} $} $while $(@expr1073742569 $false $) ;
162: $do ${ $if $(@expr1073742570 $prepareTest $(@expr1073742571 "localvararray3" $) $) ${ $setVerbose $(@expr1073742572 $false $) $; localvararray3 $(@expr1073742573 $) $; $} $} $while $(@expr1073742574 $false $) ;
163: $do ${ $if $(@expr1073742575 $prepareTest $(@expr1073742576 "localvararray4" $) $) ${ $setVerbose $(@expr1073742577 $false $) $; localvararray4 $(@expr1073742578 $) $; $} $} $while $(@expr1073742579 $false $) ;
164: $do ${ $if $(@expr1073742580 $prepareTest $(@expr1073742581 "localvararray5" $) $) ${ $setVerbose $(@expr1073742582 $false $) $; localvararray5 $(@expr1073742583 $) $; $} $} $while $(@expr1073742584 $false $) ;
165: $do ${ $if $(@expr1073742585 $prepareTest $(@expr1073742586 "localvarstring1" $) $) ${ $setVerbose $(@expr1073742587 $false $) $; localvarstring1 $(@expr1073742588 $) $; $} $} $while $(@expr1073742589 $false $) ;
166: $do ${ $if $(@expr1073742590 $prepareTest $(@expr1073742591 "localvarstring2" $) $) ${ $setVerbose $(@expr1073742592 $false $) $; localvarstring2 $(@expr1073742593 $) $; $} $} $while $(@expr1073742594 $false $) ;
167: $do ${ $if $(@expr1073742595 $prepareTest $(@expr1073742596 "localvarconst1" $) $) ${ $setVerbose $(@expr1073742597 $false $) $; localvarconst1 $(@expr1073742598 $) $; $} $} $while $(@expr1073742599 $false $) ;
168: $do ${ $if $(@expr1073742600 $prepareTest $(@expr1073742601 "localvarconst2" $) $) ${ $setVerbose $(@expr1073742602 $false $) $; localvarconst2 $(@expr1073742603 $) $; $} $} $while $(@expr1073742604 $false $) ;
169: $do ${ $if $(@expr1073742605 $prepareTest $(@expr1073742606 "localvarreturn" $) $) ${ $setVerbose $(@expr1073742607 $false $) $; localvarreturn $(@expr1073742608 $) $; $} $} $while $(@expr1073742609 $false $) ;
170: $do ${ $if $(@expr1073742610 $prepareTest $(@expr1073742611 "localvarmaybeunused" $) $) ${ $setVerbose $(@expr1073742612 $false $) $; localvarmaybeunused $(@expr1073742613 $) $; $} $} $while $(@expr1073742614 $false $) ;
171:
172: $do ${ $if $(@expr1073742615 $prepareTest $(@expr1073742616 "localvarthrow" $) $) ${ $setVerbose $(@expr1073742617 $false $) $; localvarthrow $(@expr1073742618 $) $; $} $} $while $(@expr1073742619 $false $) ;
173:
174: $do ${ $if $(@expr1073742620 $prepareTest $(@expr1073742621 "localVarStd" $) $) ${ $setVerbose $(@expr1073742622 $false $) $; localVarStd $(@expr1073742623 $) $; $} $} $while $(@expr1073742624 $false $) ;
175: $do ${ $if $(@expr1073742625 $prepareTest $(@expr1073742626 "localVarClass" $) $) ${ $setVerbose $(@expr1073742627 $false $) $; localVarClass $(@expr1073742628 $) $; $} $} $while $(@expr1073742629 $false $) ;
176: $do ${ $if $(@expr1073742630 $prepareTest $(@expr1073742631 "localVarSmartPtr" $) $) ${ $setVerbose $(@expr1073742632 $false $) $; localVarSmartPtr $(@expr1073742633 $) $; $} $} $while $(@expr1073742634 $false $) ;
177:
178:
179: $do ${ $if $(@expr1073742635 $prepareTest $(@expr1073742636 "localvarStruct1" $) $) ${ $setVerbose $(@expr1073742637 $false $) $; localvarStruct1 $(@expr1073742638 $) $; $} $} $while $(@expr1073742639 $false $) ;
180: $do ${ $if $(@expr1073742640 $prepareTest $(@expr1073742641 "localvarStruct2" $) $) ${ $setVerbose $(@expr1073742642 $false $) $; localvarStruct2 $(@expr1073742643 $) $; $} $} $while $(@expr1073742644 $false $) ;
181: $do ${ $if $(@expr1073742645 $prepareTest $(@expr1073742646 "localvarStruct3" $) $) ${ $setVerbose $(@expr1073742647 $false $) $; localvarStruct3 $(@expr1073742648 $) $; $} $} $while $(@expr1073742649 $false $) ;
182: $do ${ $if $(@expr1073742650 $prepareTest $(@expr1073742651 "localvarStruct5" $) $) ${ $setVerbose $(@expr1073742652 $false $) $; localvarStruct5 $(@expr1073742653 $) $; $} $} $while $(@expr1073742654 $false $) ;
183: $do ${ $if $(@expr1073742655 $prepareTest $(@expr1073742656 "localvarStruct6" $) $) ${ $setVerbose $(@expr1073742657 $false $) $; localvarStruct6 $(@expr1073742658 $) $; $} $} $while $(@expr1073742659 $false $) ;
184: $do ${ $if $(@expr1073742660 $prepareTest $(@expr1073742661 "localvarStruct7" $) $) ${ $setVerbose $(@expr1073742662 $false $) $; localvarStruct7 $(@expr1073742663 $) $; $} $} $while $(@expr1073742664 $false $) ;
185: $do ${ $if $(@expr1073742665 $prepareTest $(@expr1073742666 "localvarStruct8" $) $) ${ $setVerbose $(@expr1073742667 $false $) $; localvarStruct8 $(@expr1073742668 $) $; $} $} $while $(@expr1073742669 $false $) ;
186: $do ${ $if $(@expr1073742670 $prepareTest $(@expr1073742671 "localvarStruct9" $) $) ${ $setVerbose $(@expr1073742672 $false $) $; localvarStruct9 $(@expr1073742673 $) $; $} $} $while $(@expr1073742674 $false $) ;
187: $do ${ $if $(@expr1073742675 $prepareTest $(@expr1073742676 "localvarStruct10" $) $) ${ $setVerbose $(@expr1073742677 $false $) $; localvarStruct10 $(@expr1073742678 $) $; $} $} $while $(@expr1073742679 $false $) ;
188: $do ${ $if $(@expr1073742680 $prepareTest $(@expr1073742681 "localvarStruct11" $) $) ${ $setVerbose $(@expr1073742682 $false $) $; localvarStruct11 $(@expr1073742683 $) $; $} $} $while $(@expr1073742684 $false $) ;
189: $do ${ $if $(@expr1073742685 $prepareTest $(@expr1073742686 "localvarStruct12" $) $) ${ $setVerbose $(@expr1073742687 $false $) $; localvarStruct12 $(@expr1073742688 $) $; $} $} $while $(@expr1073742689 $false $) ;
190: $do ${ $if $(@expr1073742690 $prepareTest $(@expr1073742691 "localvarStruct13" $) $) ${ $setVerbose $(@expr1073742692 $false $) $; localvarStruct13 $(@expr1073742693 $) $; $} $} $while $(@expr1073742694 $false $) ;
191: $do ${ $if $(@expr1073742695 $prepareTest $(@expr1073742696 "localvarStructArray" $) $) ${ $setVerbose $(@expr1073742697 $false $) $; localvarStructArray $(@expr1073742698 $) $; $} $} $while $(@expr1073742699 $false $) ;
192: $do ${ $if $(@expr1073742700 $prepareTest $(@expr1073742701 "localvarUnion1" $) $) ${ $setVerbose $(@expr1073742702 $false $) $; localvarUnion1 $(@expr1073742703 $) $; $} $} $while $(@expr1073742704 $false $) ;
193:
194: $do ${ $if $(@expr1073742705 $prepareTest $(@expr1073742706 "localvarOp" $) $) ${ $setVerbose $(@expr1073742707 $false $) $; localvarOp $(@expr1073742708 $) $; $} $} $while $(@expr1073742709 $false $) ;
195: $do ${ $if $(@expr1073742710 $prepareTest $(@expr1073742711 "localvarInvert" $) $) ${ $setVerbose $(@expr1073742712 $false $) $; localvarInvert $(@expr1073742713 $) $; $} $} $while $(@expr1073742714 $false $) ;
196: $do ${ $if $(@expr1073742715 $prepareTest $(@expr1073742716 "localvarIf" $) $) ${ $setVerbose $(@expr1073742717 $false $) $; localvarIf $(@expr1073742718 $) $; $} $} $while $(@expr1073742719 $false $) ;
197: $do ${ $if $(@expr1073742720 $prepareTest $(@expr1073742721 "localvarIfElse" $) $) ${ $setVerbose $(@expr1073742722 $false $) $; localvarIfElse $(@expr1073742723 $) $; $} $} $while $(@expr1073742724 $false $) ;
198: $do ${ $if $(@expr1073742725 $prepareTest $(@expr1073742726 "localvarDeclaredInIf" $) $) ${ $setVerbose $(@expr1073742727 $false $) $; localvarDeclaredInIf $(@expr1073742728 $) $; $} $} $while $(@expr1073742729 $false $) ;
199: $do ${ $if $(@expr1073742730 $prepareTest $(@expr1073742731 "localvarOpAssign" $) $) ${ $setVerbose $(@expr1073742732 $false $) $; localvarOpAssign $(@expr1073742733 $) $; $} $} $while $(@expr1073742734 $false $) ;
200: $do ${ $if $(@expr1073742735 $prepareTest $(@expr1073742736 "localvarFor" $) $) ${ $setVerbose $(@expr1073742737 $false $) $; localvarFor $(@expr1073742738 $) $; $} $} $while $(@expr1073742739 $false $) ;
201: $do ${ $if $(@expr1073742740 $prepareTest $(@expr1073742741 "localvarForEach" $) $) ${ $setVerbose $(@expr1073742742 $false $) $; localvarForEach $(@expr1073742743 $) $; $} $} $while $(@expr1073742744 $false $) ;
202: $do ${ $if $(@expr1073742745 $prepareTest $(@expr1073742746 "localvarShift1" $) $) ${ $setVerbose $(@expr1073742747 $false $) $; localvarShift1 $(@expr1073742748 $) $; $} $} $while $(@expr1073742749 $false $) ;
203: $do ${ $if $(@expr1073742750 $prepareTest $(@expr1073742751 "localvarShift3" $) $) ${ $setVerbose $(@expr1073742752 $false $) $; localvarShift3 $(@expr1073742753 $) $; $} $} $while $(@expr1073742754 $false $) ;
204: $do ${ $if $(@expr1073742755 $prepareTest $(@expr1073742756 "localvarCast" $) $) ${ $setVerbose $(@expr1073742757 $false $) $; localvarCast $(@expr1073742758 $) $; $} $} $while $(@expr1073742759 $false $) ;
205: $do ${ $if $(@expr1073742760 $prepareTest $(@expr1073742761 "localvarClass" $) $) ${ $setVerbose $(@expr1073742762 $false $) $; localvarClass $(@expr1073742763 $) $; $} $} $while $(@expr1073742764 $false $) ;
206: $do ${ $if $(@expr1073742765 $prepareTest $(@expr1073742766 "localvarUnused" $) $) ${ $setVerbose $(@expr1073742767 $false $) $; localvarUnused $(@expr1073742768 $) $; $} $} $while $(@expr1073742769 $false $) ;
207: $do ${ $if $(@expr1073742770 $prepareTest $(@expr1073742771 "localvarFunction" $) $) ${ $setVerbose $(@expr1073742772 $false $) $; localvarFunction $(@expr1073742773 $) $; $} $} $while $(@expr1073742774 $false $) ;
208: $do ${ $if $(@expr1073742775 $prepareTest $(@expr1073742776 "localvarIfNOT" $) $) ${ $setVerbose $(@expr1073742777 $false $) $; localvarIfNOT $(@expr1073742778 $) $; $} $} $while $(@expr1073742779 $false $) ;
209: $do ${ $if $(@expr1073742780 $prepareTest $(@expr1073742781 "localvarAnd" $) $) ${ $setVerbose $(@expr1073742782 $false $) $; localvarAnd $(@expr1073742783 $) $; $} $} $while $(@expr1073742784 $false $) ;
210: $do ${ $if $(@expr1073742785 $prepareTest $(@expr1073742786 "localvarSwitch" $) $) ${ $setVerbose $(@expr1073742787 $false $) $; localvarSwitch $(@expr1073742788 $) $; $} $} $while $(@expr1073742789 $false $) ;
211: $do ${ $if $(@expr1073742790 $prepareTest $(@expr1073742791 "localvarNULL" $) $) ${ $setVerbose $(@expr1073742792 $false $) $; localvarNULL $(@expr1073742793 $) $; $} $} $while $(@expr1073742794 $false $) ;
212: $do ${ $if $(@expr1073742795 $prepareTest $(@expr1073742796 "localvarUnusedGoto" $) $) ${ $setVerbose $(@expr1073742797 $false $) $; localvarUnusedGoto $(@expr1073742798 $) $; $} $} $while $(@expr1073742799 $false $) ;
213: $do ${ $if $(@expr1073742800 $prepareTest $(@expr1073742801 "localvarRangeBasedFor" $) $) ${ $setVerbose $(@expr1073742802 $false $) $; localvarRangeBasedFor $(@expr1073742803 $) $; $} $} $while $(@expr1073742804 $false $) ;
214: $do ${ $if $(@expr1073742805 $prepareTest $(@expr1073742806 "localvarAssignInWhile" $) $) ${ $setVerbose $(@expr1073742807 $false $) $; localvarAssignInWhile $(@expr1073742808 $) $; $} $} $while $(@expr1073742809 $false $) ;
215: $do ${ $if $(@expr1073742810 $prepareTest $(@expr1073742811 "localvarTemplate" $) $) ${ $setVerbose $(@expr1073742812 $false $) $; localvarTemplate $(@expr1073742813 $) $; $} $} $while $(@expr1073742814 $false $) ;
216: $do ${ $if $(@expr1073742815 $prepareTest $(@expr1073742816 "localvarFuncPtr" $) $) ${ $setVerbose $(@expr1073742817 $false $) $; localvarFuncPtr $(@expr1073742818 $) $; $} $} $while $(@expr1073742819 $false $) ;
217: $do ${ $if $(@expr1073742820 $prepareTest $(@expr1073742821 "localvarAddr" $) $) ${ $setVerbose $(@expr1073742822 $false $) $; localvarAddr $(@expr1073742823 $) $; $} $} $while $(@expr1073742824 $false $) ;
218: $do ${ $if $(@expr1073742825 $prepareTest $(@expr1073742826 "localvarDelete" $) $) ${ $setVerbose $(@expr1073742827 $false $) $; localvarDelete $(@expr1073742828 $) $; $} $} $while $(@expr1073742829 $false $) ;
219: $do ${ $if $(@expr1073742830 $prepareTest $(@expr1073742831 "localvarLambda" $) $) ${ $setVerbose $(@expr1073742832 $false $) $; localvarLambda $(@expr1073742833 $) $; $} $} $while $(@expr1073742834 $false $) ;
220: $do ${ $if $(@expr1073742835 $prepareTest $(@expr1073742836 "localvarStructuredBinding" $) $) ${ $setVerbose $(@expr1073742837 $false $) $; localvarStructuredBinding $(@expr1073742838 $) $; $} $} $while $(@expr1073742839 $false $) ;
221:
222: $do ${ $if $(@expr1073742840 $prepareTest $(@expr1073742841 "localvarCppInitialization" $) $) ${ $setVerbose $(@expr1073742842 $false $) $; localvarCppInitialization $(@expr1073742843 $) $; $} $} $while $(@expr1073742844 $false $) ;
223: $do ${ $if $(@expr1073742845 $prepareTest $(@expr1073742846 "localvarCpp11Initialization" $) $) ${ $setVerbose $(@expr1073742847 $false $) $; localvarCpp11Initialization $(@expr1073742848 $) $; $} $} $while $(@expr1073742849 $false $) ;
224:
225: $do ${ $if $(@expr1073742850 $prepareTest $(@expr1073742851 "chainedAssignment" $) $) ${ $setVerbose $(@expr1073742852 $false $) $; chainedAssignment $(@expr1073742853 $) $; $} $} $while $(@expr1073742854 $false $) ;
226:
227: $do ${ $if $(@expr1073742855 $prepareTest $(@expr1073742856 "crash1" $) $) ${ $setVerbose $(@expr1073742857 $false $) $; crash1 $(@expr1073742858 $) $; $} $} $while $(@expr1073742859 $false $) ;
228: $do ${ $if $(@expr1073742860 $prepareTest $(@expr1073742861 "crash2" $) $) ${ $setVerbose $(@expr1073742862 $false $) $; crash2 $(@expr1073742863 $) $; $} $} $while $(@expr1073742864 $false $) ;
229: $do ${ $if $(@expr1073742865 $prepareTest $(@expr1073742866 "usingNamespace" $) $) ${ $setVerbose $(@expr1073742867 $false $) $; usingNamespace $(@expr1073742868 $) $; $} $} $while $(@expr1073742869 $false $) ;
230:
231: $do ${ $if $(@expr1073742870 $prepareTest $(@expr1073742871 "lambdaFunction" $) $) ${ $setVerbose $(@expr1073742872 $false $) $; lambdaFunction $(@expr1073742873 $) $; $} $} $while $(@expr1073742874 $false $) ;
232: $do ${ $if $(@expr1073742875 $prepareTest $(@expr1073742876 "namespaces" $) $) ${ $setVerbose $(@expr1073742877 $false $) $; namespaces $(@expr1073742878 $) $; $} $} $while $(@expr1073742879 $false $) ;
233: $do ${ $if $(@expr1073742880 $prepareTest $(@expr1073742881 "bracesInitCpp11" $) $) ${ $setVerbose $(@expr1073742882 $false $) $; bracesInitCpp11 $(@expr1073742883 $) $; $} $} $while $(@expr1073742884 $false $) ;
234:
235: $do ${ $if $(@expr1073742885 $prepareTest $(@expr1073742886 "argument" $) $) ${ $setVerbose $(@expr1073742887 $false $) $; argument $(@expr1073742888 $) $; $} $} $while $(@expr1073742889 $false $) ;
236: $do ${ $if $(@expr1073742890 $prepareTest $(@expr1073742891 "argumentClass" $) $) ${ $setVerbose $(@expr1073742892 $false $) $; argumentClass $(@expr1073742893 $) $; $} $} $while $(@expr1073742894 $false $) ;
237: $do ${ $if $(@expr1073742895 $prepareTest $(@expr1073742896 "escapeAlias" $) $) ${ $setVerbose $(@expr1073742897 $false $) $; escapeAlias $(@expr1073742898 $) $; $} $} $while $(@expr1073742899 $false $) ;
238: $do ${ $if $(@expr1073742900 $prepareTest $(@expr1073742901 "volatileData" $) $) ${ $setVerbose $(@expr1073742902 $false $) $; volatileData $(@expr1073742903 $) $; $} $} $while $(@expr1073742904 $false $) ;
239: $do ${ $if $(@expr1073742905 $prepareTest $(@expr1073742906 "globalData" $) $) ${ $setVerbose $(@expr1073742907 $false $) $; globalData $(@expr1073742908 $) $; $} $} $while $(@expr1073742909 $false $) ;
240: }
241:
242:
243:
244: void checkStructMemberUsage_ ( const char * file@var106 , int line@var107 , const char code@var108 [ ] , const std :: list < Directive > * directives@var109 = nullptr ) {
245:
246: errout@var100 .@expr1073742910 str (@expr1073742911 "" ) ;
247:
248: Preprocessor preprocessor@var110 (@expr1073742912 settings@var102 , nullptr ) ;
249: if (@expr1073742913 directives@var109 ) {
250: preprocessor@var110 .@expr1073742914 setDirectives (@expr1073742915 *@expr1073742916 directives@var109 ) ; }
251:
252:
253: Tokenizer tokenizer@var111 (@expr1073742917 &@expr1094 settings@var102 , this@expr1095 ) ;
254: tokenizer@var111 .@expr1073742920 setPreprocessor (@expr1073742921 &@expr1073742922 preprocessor@var110 ) ;
255: std ::@expr1073742923 istringstream istr@var112 (@expr1073742924 code@var108 ) ;
256: $assert_ $(@expr1073742925 file@var106 $, line@var107 $, $(@expr1073742926 tokenizer@var111 .@expr1073742927 tokenize (@expr1073742928 istr@var112 , "test.cpp" ) $) $) ;
257:
258:
259: CheckUnusedVar checkUnusedVar@var113 (@expr1073742929 &@expr1073742930 tokenizer@var111 , &@expr1094 settings@var102 , this@expr1095 ) ;
260: checkUnusedVar@var113 .@expr1073742932 checkStructMemberUsage (@expr1073742933 ) ;
261: }
262:
263: void isRecordTypeWithoutSideEffects ( ) {
264: $functionVariableUsage_ $(@expr1073742934 "cppcheck-2.8/test/testunusedvar.cpp" $, 264 $, "class A {};\nvoid f() {\n   A a;\n}" $)
265:
266:
267:
268: ;
269: $if $(@expr1073742935 $!@expr1073742936 $assertEquals $(@expr1073742937 "cppcheck-2.8/test/testunusedvar.cpp" $, 269 $, "[test.cpp:3]: (style) Unused variable: a\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
270:
271: $functionVariableUsage_ $(@expr1073742940 "cppcheck-2.8/test/testunusedvar.cpp" $, 271 $, "class A {};\nclass B {\npublic:\n   A a;\n};\nvoid f() {\n   B b;\n}" $)
272:
|
278:
279: ;
280: $if $(@expr1073742941 $!@expr1073742942 $assertEquals $(@expr1073742943 "cppcheck-2.8/test/testunusedvar.cpp" $, 280 $, "[test.cpp:7]: (style) Unused variable: b\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
281:
282: $functionVariableUsage_ $(@expr1073742946 "cppcheck-2.8/test/testunusedvar.cpp" $, 282 $, "class C {\npublic:\n   C() = default;\n};\nvoid f() {\n   C c;\n}" $)
283:
|
288:
289: ;
290: $if $(@expr1073742947 $!@expr1073742948 $assertEquals $(@expr1073742949 "cppcheck-2.8/test/testunusedvar.cpp" $, 290 $, "[test.cpp:6]: (style) Unused variable: c\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
291:
292: $functionVariableUsage_ $(@expr1073742952 "cppcheck-2.8/test/testunusedvar.cpp" $, 292 $, "class D {\npublic:\n   D() {}\n};\nvoid f() {\n   D d;\n}" $)
293:
|
298:
299: ;
300: $if $(@expr1073742953 $!@expr1073742954 $assertEquals $(@expr1073742955 "cppcheck-2.8/test/testunusedvar.cpp" $, 300 $, "[test.cpp:6]: (style) Unused variable: d\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
301:
302: $functionVariableUsage_ $(@expr1073742958 "cppcheck-2.8/test/testunusedvar.cpp" $, 302 $, "class E {\npublic:\n   uint32_t u{1};\n};\nvoid f() {\n   E e;\n}" $)
303:
|
308:
309: ;
310: $if $(@expr1073742959 $!@expr1073742960 $assertEquals $(@expr1073742961 "cppcheck-2.8/test/testunusedvar.cpp" $, 310 $, "[test.cpp:6]: (style) Unused variable: e\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
311:
312: $functionVariableUsage_ $(@expr1073742964 "cppcheck-2.8/test/testunusedvar.cpp" $, 312 $, "class F {\npublic:\n   F() : x(0) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
313:
|
319:
320: ;
321: $if $(@expr1073742965 $!@expr1073742966 $assertEquals $(@expr1073742967 "cppcheck-2.8/test/testunusedvar.cpp" $, 321 $, "[test.cpp:7]: (style) Unused variable: f\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
322:
323: $functionVariableUsage_ $(@expr1073742970 "cppcheck-2.8/test/testunusedvar.cpp" $, 323 $, "class F {\npublic:\n   F() : x{0} {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
324:
|
330:
331: ;
332: $if $(@expr1073742971 $!@expr1073742972 $assertEquals $(@expr1073742973 "cppcheck-2.8/test/testunusedvar.cpp" $, 332 $, "[test.cpp:7]: (style) Unused variable: f\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
333:
334: $functionVariableUsage_ $(@expr1073742976 "cppcheck-2.8/test/testunusedvar.cpp" $, 334 $, "int y = 0;\nclass F {\npublic:\n   F() : x(y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
335:
|
342:
343: ;
344: $if $(@expr1073742977 $!@expr1073742978 $assertEquals $(@expr1073742979 "cppcheck-2.8/test/testunusedvar.cpp" $, 344 $, "[test.cpp:8]: (style) Unused variable: f\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
345:
346: $functionVariableUsage_ $(@expr1073742982 "cppcheck-2.8/test/testunusedvar.cpp" $, 346 $, "int y = 0;class F {\npublic:\n   F() : x(++y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
347:
|
354:
355: ;
356: $if $(@expr1073742983 $!@expr1073742984 $assertEquals $(@expr1073742985 "cppcheck-2.8/test/testunusedvar.cpp" $, 356 $, "[test.cpp:7]: (style) Unused variable: f\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
357:
358: $functionVariableUsage_ $(@expr1073742988 "cppcheck-2.8/test/testunusedvar.cpp" $, 358 $, "int y = 0;class F {\npublic:\n   F() : x(--y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
359:
|
366:
367: ;
368: $if $(@expr1073742989 $!@expr1073742990 $assertEquals $(@expr1073742991 "cppcheck-2.8/test/testunusedvar.cpp" $, 368 $, "[test.cpp:7]: (style) Unused variable: f\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
369:
370: $functionVariableUsage_ $(@expr1073742994 "cppcheck-2.8/test/testunusedvar.cpp" $, 370 $, "int y = 0;class F {\npublic:\n   F() : x(y+=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
371:
|
378:
379: ;
380: $if $(@expr1073742995 $!@expr1073742996 $assertEquals $(@expr1073742997 "cppcheck-2.8/test/testunusedvar.cpp" $, 380 $, "[test.cpp:7]: (style) Unused variable: f\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
381:
382: $functionVariableUsage_ $(@expr1073743000 "cppcheck-2.8/test/testunusedvar.cpp" $, 382 $, "int y = 0;class F {\npublic:\n   F() : x(y-=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
383:
|
390:
391: ;
392: $if $(@expr1073743001 $!@expr1073743002 $assertEquals $(@expr1073743003 "cppcheck-2.8/test/testunusedvar.cpp" $, 392 $, "[test.cpp:7]: (style) Unused variable: f\n" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
393:
394:
395: $functionVariableUsage_ $(@expr1073743006 "cppcheck-2.8/test/testunusedvar.cpp" $, 395 $, "class F {\npublic:\n   F() {\n       int i = 0;\n       (void) i;   }\n};\nvoid f() {\n   F f;\n}" $)
396:
|
404:
405: ;
406: $todoAssertEquals $(@expr1073743007 "cppcheck-2.8/test/testunusedvar.cpp" $, 406 $, "error" $, "" $, errout@var100 .@expr1114 str (@expr1115 ) $) ;
407:
408:
409: $functionVariableUsage_ $(@expr1073743010 "cppcheck-2.8/test/testunusedvar.cpp" $, 409 $, "class F {\npublic:\n   F() {\n       int i = 0;\n       (void) i;   }\n};\nclass G {\npublic:\n   F f;\n};\nvoid f() {\n   G g;\n}" $)
410:
|
422:
423: ;
424: $if $(@expr1073743011 $!@expr1073743012 $assertEquals $(@expr1073743013 "cppcheck-2.8/test/testunusedvar.cpp" $, 424 $, "" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
425:
426:
427: $functionVariableUsage_ $(@expr1073743016 "cppcheck-2.8/test/testunusedvar.cpp" $, 427 $, "class F {\npublic:\n   F() {\n       int i = 0;\n       (void) i;   }\n};\nclass G {\npublic:\n   G() : f(F()) {}\n   F f;};\nvoid f() {\n   G g;\n}" $)
428:
|
441:
442: ;
443: $if $(@expr1073743017 $!@expr1073743018 $assertEquals $(@expr1073743019 "cppcheck-2.8/test/testunusedvar.cpp" $, 443 $, "" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
444:
445:
446: $functionVariableUsage_ $(@expr1073743022 "cppcheck-2.8/test/testunusedvar.cpp" $, 446 $, "class H {\npublic:\n   unknown_type u{1};\n};\nvoid f() {\n   H h;\n}" $)
447:
|
452:
453: ;
454: $if $(@expr1073743023 $!@expr1073743024 $assertEquals $(@expr1073743025 "cppcheck-2.8/test/testunusedvar.cpp" $, 454 $, "" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
455:
456:
457: $functionVariableUsage_ $(@expr1073743028 "cppcheck-2.8/test/testunusedvar.cpp" $, 457 $, "class H {\npublic:\n   H() : x{0}, u(1) {}\n   int x;   unknown_type u;\n};\nvoid f() {\n   H h;\n}" $)
458:
|
465:
466: ;
467: $if $(@expr1073743029 $!@expr1073743030 $assertEquals $(@expr1073743031 "cppcheck-2.8/test/testunusedvar.cpp" $, 467 $, "" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
468:
469:
470: $functionVariableUsage_ $(@expr1073743034 "cppcheck-2.8/test/testunusedvar.cpp" $, 470 $, "unknown_type y = 0;\nclass F {\npublic:\n   F() : x(y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
471:
|
478:
479: ;
480: $if $(@expr1073743035 $!@expr1073743036 $assertEquals $(@expr1073743037 "cppcheck-2.8/test/testunusedvar.cpp" $, 480 $, "" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
481:
482: $functionVariableUsage_ $(@expr1073743040 "cppcheck-2.8/test/testunusedvar.cpp" $, 482 $, "int sideEffectFunc();\nclass F {\npublic:\n   F() : x(sideEffectFunc()) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
483:
|
490:
491: ;
492: $if $(@expr1073743041 $!@expr1073743042 $assertEquals $(@expr1073743043 "cppcheck-2.8/test/testunusedvar.cpp" $, 492 $, "" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
493:
494: $functionVariableUsage_ $(@expr1073743046 "cppcheck-2.8/test/testunusedvar.cpp" $, 494 $, "class F {\npublic:\n   F() : x(++unknownValue) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
495:
|
501:
502: ;
503: $if $(@expr1073743047 $!@expr1073743048 $assertEquals $(@expr1073743049 "cppcheck-2.8/test/testunusedvar.cpp" $, 503 $, "" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
504:
505: $functionVariableUsage_ $(@expr1073743052 "cppcheck-2.8/test/testunusedvar.cpp" $, 505 $, "class F {\npublic:\n   F() : x(--unknownValue) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
506:
|
512:
513: ;
514: $if $(@expr1073743053 $!@expr1073743054 $assertEquals $(@expr1073743055 "cppcheck-2.8/test/testunusedvar.cpp" $, 514 $, "" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
515:
516: $functionVariableUsage_ $(@expr1073743058 "cppcheck-2.8/test/testunusedvar.cpp" $, 516 $, "class F {\npublic:\n   F() : x(unknownValue+=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
517:
|
523:
524: ;
525: $if $(@expr1073743059 $!@expr1073743060 $assertEquals $(@expr1073743061 "cppcheck-2.8/test/testunusedvar.cpp" $, 525 $, "" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
526:
527: $functionVariableUsage_ $(@expr1073743064 "cppcheck-2.8/test/testunusedvar.cpp" $, 527 $, "class F {\npublic:\n   F() : x(unknownValue-=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
528:
|
534:
535: ;
536: $if $(@expr1073743065 $!@expr1073743066 $assertEquals $(@expr1073743067 "cppcheck-2.8/test/testunusedvar.cpp" $, 536 $, "" $, errout@var100 .@expr1114 str (@expr1115 ) $) $) { $return ; }
537: }
538:
539: void cleanFunction ( ) {
540:
541: $functionVariableUsage_ $(@expr1073743070 "cppcheck-2.8/test/testunusedvar.cpp" $, 541 $, "class F {\npublic:\n   F() : x(func()) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" $)
542:
|
548:
549: ;
550: $if $(@expr1073743071 $!@expr1073743072 $assertEquals $(@expr1073743073 "cppcheck-2.8/test/testunusedvar.cpp" $, 550 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
551:
552:
553: $functionVariableUsage_ $(@expr1073743076 "cppcheck-2.8/test/testunusedvar.cpp" $, 553 $, "int func();\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
554:
|
561:
562: ;
563: $if $(@expr1073743077 $!@expr1073743078 $assertEquals $(@expr1073743079 "cppcheck-2.8/test/testunusedvar.cpp" $, 563 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
564:
565:
566: $functionVariableUsage_ $(@expr1073743082 "cppcheck-2.8/test/testunusedvar.cpp" $, 566 $, "int func() { return 1; }\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
567:
|
574:
575: ;
576: $if $(@expr1073743083 $!@expr1073743084 $assertEquals $(@expr1073743085 "cppcheck-2.8/test/testunusedvar.cpp" $, 576 $, "[test.cpp:8]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
577:
578:
579: $functionVariableUsage_ $(@expr1073743088 "cppcheck-2.8/test/testunusedvar.cpp" $, 579 $, "int func() {\n   int x = 1;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
580:
|
590:
591: ;
592: $if $(@expr1073743089 $!@expr1073743090 $assertEquals $(@expr1073743091 "cppcheck-2.8/test/testunusedvar.cpp" $, 592 $, "[test.cpp:11]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
593:
594:
595: $functionVariableUsage_ $(@expr1073743094 "cppcheck-2.8/test/testunusedvar.cpp" $, 595 $, "int func() {\n   unknown_type x = 1;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
596:
|
606:
607: ;
608: $if $(@expr1073743095 $!@expr1073743096 $assertEquals $(@expr1073743097 "cppcheck-2.8/test/testunusedvar.cpp" $, 608 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
609:
610:
611: $functionVariableUsage_ $(@expr1073743100 "cppcheck-2.8/test/testunusedvar.cpp" $, 611 $, "int func() {\n   return unknown_var;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
612:
|
621:
622: ;
623: $if $(@expr1073743101 $!@expr1073743102 $assertEquals $(@expr1073743103 "cppcheck-2.8/test/testunusedvar.cpp" $, 623 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
624:
625:
626: $functionVariableUsage_ $(@expr1073743106 "cppcheck-2.8/test/testunusedvar.cpp" $, 626 $, "int x = 1;\nint func() {\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
627:
|
637:
638: ;
639: $if $(@expr1073743107 $!@expr1073743108 $assertEquals $(@expr1073743109 "cppcheck-2.8/test/testunusedvar.cpp" $, 639 $, "[test.cpp:11]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
640:
641:
642: $functionVariableUsage_ $(@expr1073743112 "cppcheck-2.8/test/testunusedvar.cpp" $, 642 $, "int x = 1;\nint func() {\n   return x++;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
643:
|
653:
654: ;
655: $if $(@expr1073743113 $!@expr1073743114 $assertEquals $(@expr1073743115 "cppcheck-2.8/test/testunusedvar.cpp" $, 655 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
656:
657:
658: $functionVariableUsage_ $(@expr1073743118 "cppcheck-2.8/test/testunusedvar.cpp" $, 658 $, "int x = 1;\nint func() {\n   x++;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
659:
|
670:
671: ;
672: $if $(@expr1073743119 $!@expr1073743120 $assertEquals $(@expr1073743121 "cppcheck-2.8/test/testunusedvar.cpp" $, 672 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
673:
674: $functionVariableUsage_ $(@expr1073743124 "cppcheck-2.8/test/testunusedvar.cpp" $, 674 $, "int x = 1;\nint func() {\n   --x;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
675:
|
686:
687: ;
688: $if $(@expr1073743125 $!@expr1073743126 $assertEquals $(@expr1073743127 "cppcheck-2.8/test/testunusedvar.cpp" $, 688 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
689:
690: $functionVariableUsage_ $(@expr1073743130 "cppcheck-2.8/test/testunusedvar.cpp" $, 690 $, "int x = 1;\nint func() {\n   x += 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
691:
|
702:
703: ;
704: $if $(@expr1073743131 $!@expr1073743132 $assertEquals $(@expr1073743133 "cppcheck-2.8/test/testunusedvar.cpp" $, 704 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
705:
706: $functionVariableUsage_ $(@expr1073743136 "cppcheck-2.8/test/testunusedvar.cpp" $, 706 $, "int x = 1;\nint func() {\n   x = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
707:
|
718:
719: ;
720: $if $(@expr1073743137 $!@expr1073743138 $assertEquals $(@expr1073743139 "cppcheck-2.8/test/testunusedvar.cpp" $, 720 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
721:
722:
723: $functionVariableUsage_ $(@expr1073743142 "cppcheck-2.8/test/testunusedvar.cpp" $, 723 $, "int global = 1;\nint func() {\n   int x = global + 1;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
724:
|
735:
736: ;
737: $if $(@expr1073743143 $!@expr1073743144 $assertEquals $(@expr1073743145 "cppcheck-2.8/test/testunusedvar.cpp" $, 737 $, "[test.cpp:12]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
738:
739:
740: $functionVariableUsage_ $(@expr1073743148 "cppcheck-2.8/test/testunusedvar.cpp" $, 740 $, "int x[] = {0, 1, 3};\nint func() {\n   x[0] = 4;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
741:
|
752:
753: ;
754: $if $(@expr1073743149 $!@expr1073743150 $assertEquals $(@expr1073743151 "cppcheck-2.8/test/testunusedvar.cpp" $, 754 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
755:
756: $functionVariableUsage_ $(@expr1073743154 "cppcheck-2.8/test/testunusedvar.cpp" $, 756 $, "int x[] = {0, 1, 3};\nint func() {\n   *x = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
757:
|
768:
769: ;
770: $if $(@expr1073743155 $!@expr1073743156 $assertEquals $(@expr1073743157 "cppcheck-2.8/test/testunusedvar.cpp" $, 770 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
771:
772: $functionVariableUsage_ $(@expr1073743160 "cppcheck-2.8/test/testunusedvar.cpp" $, 772 $, "int x[] = {0, 1, 3};\nint func() {\n   *(x) = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
773:
|
784:
785: ;
786: $if $(@expr1073743161 $!@expr1073743162 $assertEquals $(@expr1073743163 "cppcheck-2.8/test/testunusedvar.cpp" $, 786 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
787:
788:
789: $functionVariableUsage_ $(@expr1073743166 "cppcheck-2.8/test/testunusedvar.cpp" $, 789 $, "int x[] = {0, 1, 3};\nint func() {\n   *(x + 1) = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
790:
|
801:
802: ;
803: $if $(@expr1073743167 $!@expr1073743168 $assertEquals $(@expr1073743169 "cppcheck-2.8/test/testunusedvar.cpp" $, 803 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
804:
805: $functionVariableUsage_ $(@expr1073743172 "cppcheck-2.8/test/testunusedvar.cpp" $, 805 $, "int x[][] = {{0, 1}, {2, 3}};\nint func() {\n   *((x + 1) + 1) = 4;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
806:
|
817:
818: ;
819: $if $(@expr1073743173 $!@expr1073743174 $assertEquals $(@expr1073743175 "cppcheck-2.8/test/testunusedvar.cpp" $, 819 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
820:
821: $functionVariableUsage_ $(@expr1073743178 "cppcheck-2.8/test/testunusedvar.cpp" $, 821 $, "int x[] = {0, 1, 3};\nint func() {\n   int local = *(x + 1);\n   (void) local;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
822:
|
834:
835: ;
836: $if $(@expr1073743179 $!@expr1073743180 $assertEquals $(@expr1073743181 "cppcheck-2.8/test/testunusedvar.cpp" $, 836 $, "[test.cpp:13]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
837:
838: $functionVariableUsage_ $(@expr1073743184 "cppcheck-2.8/test/testunusedvar.cpp" $, 838 $, "int x[] = {0, 1, 3};\nint func() {\n   int* local = x + 2;\n   (void) local;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
839:
|
851:
852: ;
853: $if $(@expr1073743185 $!@expr1073743186 $assertEquals $(@expr1073743187 "cppcheck-2.8/test/testunusedvar.cpp" $, 853 $, "[test.cpp:13]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
854:
855: $functionVariableUsage_ $(@expr1073743190 "cppcheck-2.8/test/testunusedvar.cpp" $, 855 $, "int x[] = {0, 1, 3};\nint func() {\n   int* local = x + 2;\n   return *local;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
856:
|
867:
868: ;
869: $if $(@expr1073743191 $!@expr1073743192 $assertEquals $(@expr1073743193 "cppcheck-2.8/test/testunusedvar.cpp" $, 869 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
870:
871: $functionVariableUsage_ $(@expr1073743196 "cppcheck-2.8/test/testunusedvar.cpp" $, 871 $, "int x[] = {0, 1, 3};\nint func() {\n   return *(x + 1);\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
872:
|
882:
883: ;
884: $if $(@expr1073743197 $!@expr1073743198 $assertEquals $(@expr1073743199 "cppcheck-2.8/test/testunusedvar.cpp" $, 884 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
885:
886:
887: $functionVariableUsage_ $(@expr1073743202 "cppcheck-2.8/test/testunusedvar.cpp" $, 887 $, "int func() {\n   int x = 1;\n   x = 2;\n   x++;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
888:
|
900:
901: ;
902: $if $(@expr1073743203 $!@expr1073743204 $assertEquals $(@expr1073743205 "cppcheck-2.8/test/testunusedvar.cpp" $, 902 $, "[test.cpp:13]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
903:
904:
905: $functionVariableUsage_ $(@expr1073743208 "cppcheck-2.8/test/testunusedvar.cpp" $, 905 $, "class A {};\nA func() {\n   A a;\n   return a;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   A x;\n};\nvoid f() {\n   C c;\n}" $)
906:
|
917:
918: ;
919: $if $(@expr1073743209 $!@expr1073743210 $assertEquals $(@expr1073743211 "cppcheck-2.8/test/testunusedvar.cpp" $, 919 $, "[test.cpp:12]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
920:
921:
922: $functionVariableUsage_ $(@expr1073743214 "cppcheck-2.8/test/testunusedvar.cpp" $, 922 $, "class A {\npublic:\n   unknown_type u{1};\n};\nint func() {\n   A a;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
923:
|
937:
938: ;
939: $if $(@expr1073743215 $!@expr1073743216 $assertEquals $(@expr1073743217 "cppcheck-2.8/test/testunusedvar.cpp" $, 939 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
940:
941:
942: $functionVariableUsage_ $(@expr1073743220 "cppcheck-2.8/test/testunusedvar.cpp" $, 942 $, "int func() {\n   unknown_type a;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
943:
|
953:
954: ;
955: $if $(@expr1073743221 $!@expr1073743222 $assertEquals $(@expr1073743223 "cppcheck-2.8/test/testunusedvar.cpp" $, 955 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
956:
957:
958: $functionVariableUsage_ $(@expr1073743226 "cppcheck-2.8/test/testunusedvar.cpp" $, 958 $, "int another_func() { return 1;}\nint func() {\n   another_func();\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
959:
|
970:
971: ;
972: $if $(@expr1073743227 $!@expr1073743228 $assertEquals $(@expr1073743229 "cppcheck-2.8/test/testunusedvar.cpp" $, 972 $, "[test.cpp:12]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
973:
974:
975: $functionVariableUsage_ $(@expr1073743232 "cppcheck-2.8/test/testunusedvar.cpp" $, 975 $, "int global = 1;int another_func() {\n   global++;\n   return global;}\nint func() {\n   another_func();\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
976:
|
990:
991: ;
992: $if $(@expr1073743233 $!@expr1073743234 $assertEquals $(@expr1073743235 "cppcheck-2.8/test/testunusedvar.cpp" $, 992 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
993:
994:
995: $functionVariableUsage_ $(@expr1073743238 "cppcheck-2.8/test/testunusedvar.cpp" $, 995 $, "int func() {\n   unknown_func();\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
996:
|
1006:
1007: ;
1008: $if $(@expr1073743239 $!@expr1073743240 $assertEquals $(@expr1073743241 "cppcheck-2.8/test/testunusedvar.cpp" $, 1008 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1009:
1010:
1011: $functionVariableUsage_ $(@expr1073743244 "cppcheck-2.8/test/testunusedvar.cpp" $, 1011 $, "int func(int i) {\n   if (i != 2) {\n       func(i++);\n       return 2;\n   }\n   return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1012:
|
1025:
1026: ;
1027: $if $(@expr1073743245 $!@expr1073743246 $assertEquals $(@expr1073743247 "cppcheck-2.8/test/testunusedvar.cpp" $, 1027 $, "[test.cpp:14]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1028:
1029:
1030: $functionVariableUsage_ $(@expr1073743250 "cppcheck-2.8/test/testunusedvar.cpp" $, 1030 $, "void another_func() {\n   func(0);\n}\nint func(int i) {\n   if (i != 2) {\n       another_func();\n       return 2;\n   }\n   return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1031:
|
1047:
1048: ;
1049: $if $(@expr1073743251 $!@expr1073743252 $assertEquals $(@expr1073743253 "cppcheck-2.8/test/testunusedvar.cpp" $, 1049 $, "[test.cpp:17]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1050:
1051:
1052: $functionVariableUsage_ $(@expr1073743256 "cppcheck-2.8/test/testunusedvar.cpp" $, 1052 $, "int global = 1;\nint func(int i) {\n   if (i != 2) {\n       global++;\n       func(i++);\n       return 2;\n   }\n   return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1053:
|
1068:
1069: ;
1070: $if $(@expr1073743257 $!@expr1073743258 $assertEquals $(@expr1073743259 "cppcheck-2.8/test/testunusedvar.cpp" $, 1070 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1071:
1072:
1073: $functionVariableUsage_ $(@expr1073743262 "cppcheck-2.8/test/testunusedvar.cpp" $, 1073 $, "int func(int i) {\n   if (i == 0) { return 0;}\n   else { return unknownSideEffectFunction(); }\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1074:
|
1084:
1085: ;
1086: $if $(@expr1073743263 $!@expr1073743264 $assertEquals $(@expr1073743265 "cppcheck-2.8/test/testunusedvar.cpp" $, 1086 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1087:
1088:
1089: $functionVariableUsage_ $(@expr1073743268 "cppcheck-2.8/test/testunusedvar.cpp" $, 1089 $, "int func(int i) {\n   if (i == 0) { return 0;}\n   else { return i; }\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1090:
|
1100:
1101: ;
1102: $if $(@expr1073743269 $!@expr1073743270 $assertEquals $(@expr1073743271 "cppcheck-2.8/test/testunusedvar.cpp" $, 1102 $, "[test.cpp:11]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1103:
1104:
1105: $functionVariableUsage_ $(@expr1073743274 "cppcheck-2.8/test/testunusedvar.cpp" $, 1105 $, "int func(int i) {\n   if (i == 0) { return unknownSideEffectFunction();}\n   else { return unknown_var; }\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1106:
|
1116:
1117: ;
1118: $if $(@expr1073743275 $!@expr1073743276 $assertEquals $(@expr1073743277 "cppcheck-2.8/test/testunusedvar.cpp" $, 1118 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1119:
1120:
1121: $functionVariableUsage_ $(@expr1073743280 "cppcheck-2.8/test/testunusedvar.cpp" $, 1121 $, "int func(int i) {\n    return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1122:
|
1131:
1132: ;
1133: $if $(@expr1073743281 $!@expr1073743282 $assertEquals $(@expr1073743283 "cppcheck-2.8/test/testunusedvar.cpp" $, 1133 $, "[test.cpp:10]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1134:
1135:
1136: $functionVariableUsage_ $(@expr1073743286 "cppcheck-2.8/test/testunusedvar.cpp" $, 1136 $, "char buf[10];\nint func(char* p) {\n   *p = 0;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func(buf)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1137:
|
1148:
1149: ;
1150: $if $(@expr1073743287 $!@expr1073743288 $assertEquals $(@expr1073743289 "cppcheck-2.8/test/testunusedvar.cpp" $, 1150 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1151:
1152:
1153: $functionVariableUsage_ $(@expr1073743292 "cppcheck-2.8/test/testunusedvar.cpp" $, 1153 $, "int global = 1;\nint func() {\n   int* p = &global;\n   *p = 0;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1154:
|
1166:
1167: ;
1168: $if $(@expr1073743293 $!@expr1073743294 $assertEquals $(@expr1073743295 "cppcheck-2.8/test/testunusedvar.cpp" $, 1168 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1169:
1170:
1171: $functionVariableUsage_ $(@expr1073743298 "cppcheck-2.8/test/testunusedvar.cpp" $, 1171 $, "int global = 1;\nint func() {\n   int* p = &global;\n   (void) p;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1172:
|
1184:
1185: ;
1186: $if $(@expr1073743299 $!@expr1073743300 $assertEquals $(@expr1073743301 "cppcheck-2.8/test/testunusedvar.cpp" $, 1186 $, "[test.cpp:13]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1187:
1188:
1189: $functionVariableUsage_ $(@expr1073743304 "cppcheck-2.8/test/testunusedvar.cpp" $, 1189 $, "struct S { int x; } s;\nint func() {\n   s.x = 1;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1190:
|
1201:
1202: ;
1203: $if $(@expr1073743305 $!@expr1073743306 $assertEquals $(@expr1073743307 "cppcheck-2.8/test/testunusedvar.cpp" $, 1203 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1204:
1205:
1206: $functionVariableUsage_ $(@expr1073743310 "cppcheck-2.8/test/testunusedvar.cpp" $, 1206 $, "struct S { int x; } s;\nint func() {\n   int y = s.x + 1;\n   return y;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1207:
|
1218:
1219: ;
1220: $if $(@expr1073743311 $!@expr1073743312 $assertEquals $(@expr1073743313 "cppcheck-2.8/test/testunusedvar.cpp" $, 1220 $, "[test.cpp:12]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1221:
1222:
1223: $functionVariableUsage_ $(@expr1073743316 "cppcheck-2.8/test/testunusedvar.cpp" $, 1223 $, "struct S { int x; };\nstruct S* s = new(struct S);\nint func() {\n   s->x = 1;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1224:
|
1236:
1237: ;
1238: $if $(@expr1073743317 $!@expr1073743318 $assertEquals $(@expr1073743319 "cppcheck-2.8/test/testunusedvar.cpp" $, 1238 $, "" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1239:
1240:
1241: $functionVariableUsage_ $(@expr1073743322 "cppcheck-2.8/test/testunusedvar.cpp" $, 1241 $, "struct S { int x; };\nstruct S* s = new(struct S);\nint func() {\n   int y = s->x + 1;\n   return y;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" $)
1242:
|
1254:
1255: ;
1256: $if $(@expr1073743323 $!@expr1073743324 $assertEquals $(@expr1073743325 "cppcheck-2.8/test/testunusedvar.cpp" $, 1256 $, "[test.cpp:13]: (style) Unused variable: c\n" $, errout@var100 .@expr1250 str (@expr1251 ) $) $) { $return ; }
1257: }
1258:
1259:
1260: void emptyclass ( ) {
1261: $functionVariableUsage_ $(@expr1073743328 "cppcheck-2.8/test/testunusedvar.cpp" $, 1261 $, "class Carla {\n};\nclass Fred : Carla {\n};\nvoid foo() {\n    Fred fred;\n    throw fred;\n}" $)
1262:
|
1267:
1268: ;
1269: $if $(@expr1073743329 $!@expr1073743330 $assertEquals $(@expr1073743331 "cppcheck-2.8/test/testunusedvar.cpp" $, 1269 $, "" $, errout@var100 .@expr1073743332 str (@expr1073743333 ) $) $) { $return ; }
1270: }
1271:
1272:
1273: void emptystruct ( ) {
1274: $functionVariableUsage_ $(@expr1073743334 "cppcheck-2.8/test/testunusedvar.cpp" $, 1274 $, "struct Fred {\n};\nvoid foo() {\n    Fred fred;\n    throw fred;\n}" $)
1275:
|
1278:
1279: ;
1280: $if $(@expr1073743335 $!@expr1073743336 $assertEquals $(@expr1073743337 "cppcheck-2.8/test/testunusedvar.cpp" $, 1280 $, "" $, errout@var100 .@expr1073743338 str (@expr1073743339 ) $) $) { $return ; }
1281: }
1282:
1283: void structmember1 ( ) {
1284: $checkStructMemberUsage_ $(@expr1073743340 "cppcheck-2.8/test/testunusedvar.cpp" $, 1284 $, "struct abc\n{\n    int a;\n    int b;\n    int c;\n};" $)
1285:
|
1288:
1289: ;
1290: $if $(@expr1073743341 $!@expr1073743342 $assertEquals $(@expr1073743343 "cppcheck-2.8/test/testunusedvar.cpp" $, 1290 $, "[test.cpp:3]: (style) struct member 'abc::a' is never used.\n[test.cpp:4]: (style) struct member 'abc::b' is never used.\n[test.cpp:5]: (style) struct member 'abc::c' is never used.\n" $, errout@var100 .@expr1520 str (@expr1521 ) $) $) { $return
1291:
1292: ; }
1293:
1294: $checkStructMemberUsage_ $(@expr1073743346 "cppcheck-2.8/test/testunusedvar.cpp" $, 1294 $, "union abc\n{\n    int a;\n    int b;\n    int c;\n};" $)
1295:
|
1298:
1299: ;
1300: $if $(@expr1073743347 $!@expr1073743348 $assertEquals $(@expr1073743349 "cppcheck-2.8/test/testunusedvar.cpp" $, 1300 $, "[test.cpp:3]: (style) union member 'abc::a' is never used.\n[test.cpp:4]: (style) union member 'abc::b' is never used.\n[test.cpp:5]: (style) union member 'abc::c' is never used.\n" $, errout@var100 .@expr1520 str (@expr1521 ) $) $) { $return
1301:
1302: ; }
1303: }
1304:
1305: void structmember2 ( ) {
1306: $checkStructMemberUsage_ $(@expr1073743352 "cppcheck-2.8/test/testunusedvar.cpp" $, 1306 $, "struct ABC\n{\n    int a;\n    int b;\n    int c;\n};\n\nvoid foo()\n{\n    struct ABC abc;\n    int a = abc.a;\n    int b = abc.b;\n    int c = abc.c;\n}" $)
1307:
|
1318:
1319: ;
1320: $if $(@expr1073743353 $!@expr1073743354 $assertEquals $(@expr1073743355 "cppcheck-2.8/test/testunusedvar.cpp" $, 1320 $, "" $, errout@var100 .@expr1073743356 str (@expr1073743357 ) $) $) { $return ; }
1321: }
1322:
1323: void structmember3 ( ) {
1324: $checkStructMemberUsage_ $(@expr1073743358 "cppcheck-2.8/test/testunusedvar.cpp" $, 1324 $, "struct ABC\n{\n    int a;\n    int b;\n    int c;\n};\n\nstatic struct ABC abc[] = { {1, 2, 3} };\n\nvoid foo()\n{\n    int a = abc[0].a;\n    int b = abc[0].b;\n    int c = abc[0].c;\n}" $)
1325:
|
1337:
1338: ;
1339: $if $(@expr1073743359 $!@expr1073743360 $assertEquals $(@expr1073743361 "cppcheck-2.8/test/testunusedvar.cpp" $, 1339 $, "" $, errout@var100 .@expr1073743362 str (@expr1073743363 ) $) $) { $return ; }
1340: }
1341:
1342: void structmember4 ( ) {
1343: $checkStructMemberUsage_ $(@expr1073743364 "cppcheck-2.8/test/testunusedvar.cpp" $, 1343 $, "struct ABC\n{\n    const int a;\n};\n\nvoid foo()\n{\n    ABC abc;\n    if (abc.a == 2);\n}" $)
1344:
|
1351:
1352: ;
1353: $if $(@expr1073743365 $!@expr1073743366 $assertEquals $(@expr1073743367 "cppcheck-2.8/test/testunusedvar.cpp" $, 1353 $, "" $, errout@var100 .@expr1073743368 str (@expr1073743369 ) $) $) { $return ; }
1354: }
1355:
1356: void structmember5 ( ) {
1357: $checkStructMemberUsage_ $(@expr1073743370 "cppcheck-2.8/test/testunusedvar.cpp" $, 1357 $, "struct AB\n{\n    int a;\n    int b;\n    void reset()\n    {\n        a = 1;\n        b = 2;\n    }\n};\n\nvoid foo()\n{\n    struct AB ab;\n    ab.reset();\n}" $)
1358:
|
1371:
1372: ;
1373: $if $(@expr1073743371 $!@expr1073743372 $assertEquals $(@expr1073743373 "cppcheck-2.8/test/testunusedvar.cpp" $, 1373 $, "" $, errout@var100 .@expr1073743374 str (@expr1073743375 ) $) $) { $return ; }
1374: }
1375:
1376: void structmember6 ( ) {
1377: $checkStructMemberUsage_ $(@expr1073743376 "cppcheck-2.8/test/testunusedvar.cpp" $, 1377 $, "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(char *buf)\n{\n    struct AB *ab = (struct AB *)&buf[10];\n}" $)
1378:
|
1385:
1386: ;
1387: $if $(@expr1073743377 $!@expr1073743378 $assertEquals $(@expr1073743379 "cppcheck-2.8/test/testunusedvar.cpp" $, 1387 $, "" $, errout@var100 .@expr1556 str (@expr1557 ) $) $) { $return ; }
1388:
1389: $checkStructMemberUsage_ $(@expr1073743382 "cppcheck-2.8/test/testunusedvar.cpp" $, 1389 $, "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(char *buf)\n{\n    struct AB *ab = (AB *)&buf[10];\n}" $)
1390:
|
1397:
1398: ;
1399: $if $(@expr1073743383 $!@expr1073743384 $assertEquals $(@expr1073743385 "cppcheck-2.8/test/testunusedvar.cpp" $, 1399 $, "" $, errout@var100 .@expr1556 str (@expr1557 ) $) $) { $return ; }
1400: }
1401:
1402: void structmember7 ( ) {
1403: $checkStructMemberUsage_ $(@expr1073743388 "cppcheck-2.8/test/testunusedvar.cpp" $, 1403 $, "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(struct AB *ab)\n{\n    ab->a = 0;\n}" $)
1404:
|
1411:
1412: ;
1413: $if $(@expr1073743389 $!@expr1073743390 $assertEquals $(@expr1073743391 "cppcheck-2.8/test/testunusedvar.cpp" $, 1413 $, "[test.cpp:4]: (style) struct member 'AB::b' is never used.\n" $, errout@var100 .@expr1568 str (@expr1569 ) $) $) { $return ; }
1414:
1415: $checkStructMemberUsage_ $(@expr1073743394 "cppcheck-2.8/test/testunusedvar.cpp" $, 1415 $, "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(struct AB _shuge *ab)\n{\n    ab->a = 0;\n}" $)
1416:
|
1423:
1424: ;
1425: $if $(@expr1073743395 $!@expr1073743396 $assertEquals $(@expr1073743397 "cppcheck-2.8/test/testunusedvar.cpp" $, 1425 $, "[test.cpp:4]: (style) struct member 'AB::b' is never used.\n" $, errout@var100 .@expr1568 str (@expr1569 ) $) $) { $return ; }
1426: }
1427:
1428: void structmember8 ( ) {
1429: $checkStructMemberUsage_ $(@expr1073743400 "cppcheck-2.8/test/testunusedvar.cpp" $, 1429 $, "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(char *ab)\n{\n    ((AB *)ab)->b = 0;\n}" $)
1430:
|
1437:
1438: ;
1439: $if $(@expr1073743401 $!@expr1073743402 $assertEquals $(@expr1073743403 "cppcheck-2.8/test/testunusedvar.cpp" $, 1439 $, "" $, errout@var100 .@expr1073743404 str (@expr1073743405 ) $) $) { $return ; }
1440: }
1441:
1442: void structmember9 ( ) {
1443: $checkStructMemberUsage_ $(@expr1073743406 "cppcheck-2.8/test/testunusedvar.cpp" $, 1443 $, "struct base {\n    int a;\n};\n\nstruct derived : public base {}" $)
1444:
|
1447:
1448: ;
1449: $if $(@expr1073743407 $!@expr1073743408 $assertEquals $(@expr1073743409 "cppcheck-2.8/test/testunusedvar.cpp" $, 1449 $, "" $, errout@var100 .@expr1073743410 str (@expr1073743411 ) $) $) { $return ; }
1450: }
1451:
1452: void structmember10 ( ) {
1453:
1454: $checkStructMemberUsage_ $(@expr1073743412 "cppcheck-2.8/test/testunusedvar.cpp" $, 1454 $, "struct abc {\n    Fred fred;\n};" $)
1455:
1456: ;
1457: $if $(@expr1073743413 $!@expr1073743414 $assertEquals $(@expr1073743415 "cppcheck-2.8/test/testunusedvar.cpp" $, 1457 $, "" $, errout@var100 .@expr1073743416 str (@expr1073743417 ) $) $) { $return ; }
1458: }
1459:
1460: void structmember11 ( ) {
1461: $checkStructMemberUsage_ $(@expr1073743418 "cppcheck-2.8/test/testunusedvar.cpp" $, 1461 $, "struct abc { int x; };\nstruct abc s = {0};\nvoid f() { do_something(&s); }" $)
1462:
1463: ;
1464: $if $(@expr1073743419 $!@expr1073743420 $assertEquals $(@expr1073743421 "cppcheck-2.8/test/testunusedvar.cpp" $, 1464 $, "" $, errout@var100 .@expr1598 str (@expr1599 ) $) $) { $return ; }
1465:
1466: $checkStructMemberUsage_ $(@expr1073743424 "cppcheck-2.8/test/testunusedvar.cpp" $, 1466 $, "struct abc { int x; };\nstruct abc s = {0};\nvoid f() { }" $)
1467:
1468: ;
1469: $todoAssertEquals $(@expr1073743425 "cppcheck-2.8/test/testunusedvar.cpp" $, 1469 $, "abc::x is not used" $, "" $, errout@var100 .@expr1598 str (@expr1599 ) $) ;
1470: }
1471:
1472: void structmember12 ( ) {
1473: $checkStructMemberUsage_ $(@expr1073743428 "cppcheck-2.8/test/testunusedvar.cpp" $, 1473 $, "#include <stdio.h>\nstruct\n{\n    union\n    {\n        struct\n        {\n            int a;\n        } struct1;\n    };\n} var = {0};\nint main(int argc, char *argv[])\n{\n    printf(\"var.struct1.a = %d\", var.struct1.a);\n    return 1;\n}" $)
1474:
|
1487:
1488: ;
1489: $if $(@expr1073743429 $!@expr1073743430 $assertEquals $(@expr1073743431 "cppcheck-2.8/test/testunusedvar.cpp" $, 1489 $, "" $, errout@var100 .@expr1073743432 str (@expr1073743433 ) $) $) { $return ; }
1490: }
1491:
1492: void structmember13 ( ) {
1493: $checkStructMemberUsage_ $(@expr1073743434 "cppcheck-2.8/test/testunusedvar.cpp" $, 1493 $, "struct S {\n  int x;\n} __attribute__((packed));" $)
1494:
1495: ;
1496: $if $(@expr1073743435 $!@expr1073743436 $assertEquals $(@expr1073743437 "cppcheck-2.8/test/testunusedvar.cpp" $, 1496 $, "" $, errout@var100 .@expr1073743438 str (@expr1073743439 ) $) $) { $return ; }
1497: }
1498:
1499: void structmember14 ( ) {
1500: $checkStructMemberUsage_ $(@expr1073743440 "cppcheck-2.8/test/testunusedvar.cpp" $, 1500 $, "struct bstr { char *bstart; size_t len; };\nstruct bstr bstr0(void) {\n  return (struct bstr){\"hello\",6};\n}" $)
1501:
1502:
1503: ;
1504: $if $(@expr1073743441 $!@expr1073743442 $assertEquals $(@expr1073743443 "cppcheck-2.8/test/testunusedvar.cpp" $, 1504 $, "" $, errout@var100 .@expr1073743444 str (@expr1073743445 ) $) $) { $return ; }
1505: }
1506:
1507: void structmember15 ( ) {
1508: std ::@expr1073743446 list < Directive > directives@var114 ;
1509: directives@var114 .@expr1073743447 emplace_back (@expr1073743448 "test.cpp" , 1 , "#pragma pack(1)" ) ;
1510: $checkStructMemberUsage_ $(@expr1073743449 "cppcheck-2.8/test/testunusedvar.cpp" $, 1510 $, "\nstruct Foo { int x; int y; };" , &@expr1073743450 directives@var114 $) ;
1511: $if $(@expr1073743451 $!@expr1073743452 $assertEquals $(@expr1073743453 "cppcheck-2.8/test/testunusedvar.cpp" $, 1511 $, "" $, errout@var100 .@expr1073743454 str (@expr1073743455 ) $) $) { $return ; }
1512: }
1513:
1514: void structmember_extern ( ) {
1515:
1516: $checkStructMemberUsage_ $(@expr1073743456 "cppcheck-2.8/test/testunusedvar.cpp" $, 1516 $, "extern struct AB\n{\n    int a;\n    int b;\n} ab;\n\nvoid foo()\n{\n    ab.b = 0;\n}" $)
1517:
|
1524:
1525: ;
1526: $if $(@expr1073743457 $!@expr1073743458 $assertEquals $(@expr1073743459 "cppcheck-2.8/test/testunusedvar.cpp" $, 1526 $, "" $, errout@var100 .@expr1636 str (@expr1637 ) $) $) { $return ; }
1527:
1528:
1529: $checkStructMemberUsage_ $(@expr1073743462 "cppcheck-2.8/test/testunusedvar.cpp" $, 1529 $, "struct AB\n{\n    int a;\n    int b;\n} ab;\n\nvoid foo()\n{\n    ab.b = 0;\n}" $)
1530:
|
1537:
1538: ;
1539: $if $(@expr1073743463 $!@expr1073743464 $assertEquals $(@expr1073743465 "cppcheck-2.8/test/testunusedvar.cpp" $, 1539 $, "" $, errout@var100 .@expr1636 str (@expr1637 ) $) $) { $return ; }
1540:
1541:
1542: $checkStructMemberUsage_ $(@expr1073743468 "cppcheck-2.8/test/testunusedvar.cpp" $, 1542 $, "static struct AB\n{\n    int a;\n    int b;\n} ab;\n\nvoid foo()\n{\n    ab.b = 0;\n}" $)
1543:
|
1550:
1551: ;
1552: $if $(@expr1073743469 $!@expr1073743470 $assertEquals $(@expr1073743471 "cppcheck-2.8/test/testunusedvar.cpp" $, 1552 $, "[test.cpp:3]: (style) struct member 'AB::a' is never used.\n" $, errout@var100 .@expr1636 str (@expr1637 ) $) $) { $return ; }
1553:
1554: $checkStructMemberUsage_ $(@expr1073743474 "cppcheck-2.8/test/testunusedvar.cpp" $, 1554 $, "struct A\n{\n    static const int a = 0;\n};\n\nint foo()\n{\n    return A::a;\n}" $)
1555:
|
1561:
1562: ;
1563: $if $(@expr1073743475 $!@expr1073743476 $assertEquals $(@expr1073743477 "cppcheck-2.8/test/testunusedvar.cpp" $, 1563 $, "" $, errout@var100 .@expr1636 str (@expr1637 ) $) $) { $return ; }
1564: }
1565:
1566: void structmember_sizeof ( ) {
1567: $checkStructMemberUsage_ $(@expr1073743480 "cppcheck-2.8/test/testunusedvar.cpp" $, 1567 $, "struct Header {\n  uint8_t message_type;\n}\n\ninput.skip(sizeof(Header));" $)
1568:
1569:
1570:
1571: ;
1572: $if $(@expr1073743481 $!@expr1073743482 $assertEquals $(@expr1073743483 "cppcheck-2.8/test/testunusedvar.cpp" $, 1572 $, "" $, errout@var100 .@expr1660 str (@expr1661 ) $) $) { $return ; }
1573:
1574: $checkStructMemberUsage_ $(@expr1073743486 "cppcheck-2.8/test/testunusedvar.cpp" $, 1574 $, "struct Header {\n  uint8_t message_type;\n}\n\ninput.skip(sizeof(struct Header));" $)
1575:
1576:
1577:
1578: ;
1579: $if $(@expr1073743487 $!@expr1073743488 $assertEquals $(@expr1073743489 "cppcheck-2.8/test/testunusedvar.cpp" $, 1579 $, "" $, errout@var100 .@expr1660 str (@expr1661 ) $) $) { $return ; }
1580: }
1581:
1582: void structmember16 ( ) {
1583: $checkStructMemberUsage_ $(@expr1073743492 "cppcheck-2.8/test/testunusedvar.cpp" $, 1583 $, "struct S {\n  static const int N = 128;\n  char E[N];\n};\n" $)
1584:
1585:
1586: ;
1587: $if $(@expr1073743493 $!@expr1073743494 $assertEquals $(@expr1073743495 "cppcheck-2.8/test/testunusedvar.cpp" $, 1587 $, "[test.cpp:3]: (style) struct member 'S::E' is never used.\n" $, errout@var100 .@expr1073743496 str (@expr1073743497 ) $) $) { $return ; }
1588: }
1589:
1590: void structmember17 ( ) {
1591: $checkStructMemberUsage_ $(@expr1073743498 "cppcheck-2.8/test/testunusedvar.cpp" $, 1591 $, "struct tagT { int i; };\nvoid f() {\n    struct tagT t{};\n    t.i = 0;\n    g(t);\n};\n" $)
1592:
|
1595:
1596: ;
1597: $if $(@expr1073743499 $!@expr1073743500 $assertEquals $(@expr1073743501 "cppcheck-2.8/test/testunusedvar.cpp" $, 1597 $, "" $, errout@var100 .@expr1678 str (@expr1679 ) $) $) { $return ; }
1598:
1599: $checkStructMemberUsage_ $(@expr1073743504 "cppcheck-2.8/test/testunusedvar.cpp" $, 1599 $, "typedef struct tagT { int i; } typeT;\nvoid f() {\n    struct typeT t{};\n    t.i = 0;\n    g(t);\n};\n" $)
1600:
|
1603:
1604: ;
1605: $if $(@expr1073743505 $!@expr1073743506 $assertEquals $(@expr1073743507 "cppcheck-2.8/test/testunusedvar.cpp" $, 1605 $, "" $, errout@var100 .@expr1678 str (@expr1679 ) $) $) { $return ; }
1606:
1607: $checkStructMemberUsage_ $(@expr1073743510 "cppcheck-2.8/test/testunusedvar.cpp" $, 1607 $, "struct T { int i; };\nvoid f() {\n    struct T t{};\n    t.i = 0;\n    g(t);\n};\n" $)
1608:
|
1611:
1612: ;
1613: $todoAssertEquals $(@expr1073743511 "cppcheck-2.8/test/testunusedvar.cpp" $, 1613 $, "" $, "[test.cpp:1]: (style) struct member 'T::i' is never used.\n" $, errout@var100 .@expr1678 str (@expr1679 ) $) ;
1614: }
1615:
1616: void structmember18 ( ) {
1617: $checkStructMemberUsage_ $(@expr1073743514 "cppcheck-2.8/test/testunusedvar.cpp" $, 1617 $, "struct S { uint8_t padding[500]; };\nstatic S s = { 0 };\nuint8_t f() {\n    uint8_t* p = (uint8_t*)&s;\n    return p[10];\n};\n" $)
1618:
|
1621:
1622: ;
1623: $if $(@expr1073743515 $!@expr1073743516 $assertEquals $(@expr1073743517 "cppcheck-2.8/test/testunusedvar.cpp" $, 1623 $, "" $, errout@var100 .@expr1694 str (@expr1695 ) $) $) { $return ; }
1624:
1625: $checkStructMemberUsage_ $(@expr1073743520 "cppcheck-2.8/test/testunusedvar.cpp" $, 1625 $, "struct S { uint8_t padding[500]; };\nuint8_t f(const S& s) {\n    std::cout << &s;\n    auto p = reinterpret_cast<const uint8_t*>(&s);\n    return p[10];\n};\n" $)
1626:
|
1629:
1630: ;
1631: $if $(@expr1073743521 $!@expr1073743522 $assertEquals $(@expr1073743523 "cppcheck-2.8/test/testunusedvar.cpp" $, 1631 $, "" $, errout@var100 .@expr1694 str (@expr1695 ) $) $) { $return ; }
1632: }
1633:
1634: void structmember19 ( ) {
1635: $checkStructMemberUsage_ $(@expr1073743528 "cppcheck-2.8/test/testunusedvar.cpp" $, 1635 $, "class C {};\nstruct S {\n    char* p;\n    std::string str;\n    C c;\n};\nvoid f(S* s) {}\n" $)
1636:
|
1640:
1641: ;
1642: $if $(@expr1073743529 $!@expr1073743530 $assertEquals $(@expr1073743531 "cppcheck-2.8/test/testunusedvar.cpp" $, 1642 $, "[test.cpp:3]: (style) struct member 'S::p' is never used.\n[test.cpp:4]: (style) struct member 'S::str' is never used.\n[test.cpp:5]: (style) struct member 'S::c' is never used.\n" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return
1643:
1644:
1645: ; }
1646:
1647: $checkStructMemberUsage_ $(@expr1073743534 "cppcheck-2.8/test/testunusedvar.cpp" $, 1647 $, "class C {};\nstruct S {\n    char* p;\n    std::string str;\n    C c;\n};\nvoid f(S& s) {}\n" $)
1648:
|
1652:
1653: ;
1654: $if $(@expr1073743535 $!@expr1073743536 $assertEquals $(@expr1073743537 "cppcheck-2.8/test/testunusedvar.cpp" $, 1654 $, "[test.cpp:3]: (style) struct member 'S::p' is never used.\n[test.cpp:4]: (style) struct member 'S::str' is never used.\n[test.cpp:5]: (style) struct member 'S::c' is never used.\n" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return
1655:
1656:
1657: ; }
1658:
1659: $checkStructMemberUsage_ $(@expr1073743540 "cppcheck-2.8/test/testunusedvar.cpp" $, 1659 $, "struct S {\n    struct T {\n        int i;\n    } t[2];\n};\nS s[1];\nint f() {\n    return s[0].t[1].i;\n}\n" $)
1660:
|
1666:
1667: ;
1668: $if $(@expr1073743541 $!@expr1073743542 $assertEquals $(@expr1073743543 "cppcheck-2.8/test/testunusedvar.cpp" $, 1668 $, "" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return ; }
1669:
1670: $checkStructMemberUsage_ $(@expr1073743546 "cppcheck-2.8/test/testunusedvar.cpp" $, 1670 $, "struct S { int a; };\nstruct T { S s; };\nint f(const T** tp) {\n    return tp[0]->s.a;\n}\n" $)
1671:
1672:
1673:
1674: ;
1675: $if $(@expr1073743547 $!@expr1073743548 $assertEquals $(@expr1073743549 "cppcheck-2.8/test/testunusedvar.cpp" $, 1675 $, "" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return ; }
1676:
1677: $checkStructMemberUsage_ $(@expr1073743552 "cppcheck-2.8/test/testunusedvar.cpp" $, 1677 $, "struct S { int a; };\nint f(const S* sp) {\n    return (*sp).a; \n}\n" $)
1678:
1679:
1680: ;
1681: $if $(@expr1073743553 $!@expr1073743554 $assertEquals $(@expr1073743555 "cppcheck-2.8/test/testunusedvar.cpp" $, 1681 $, "" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return ; }
1682:
1683: $checkStructMemberUsage_ $(@expr1073743558 "cppcheck-2.8/test/testunusedvar.cpp" $, 1683 $, "struct S { int a; };\nint f(const S** spp) {\n    return spp[0]->a;\n}\n" $)
1684:
1685:
1686: ;
1687: $if $(@expr1073743559 $!@expr1073743560 $assertEquals $(@expr1073743561 "cppcheck-2.8/test/testunusedvar.cpp" $, 1687 $, "" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return ; }
1688:
1689: $checkStructMemberUsage_ $(@expr1073743564 "cppcheck-2.8/test/testunusedvar.cpp" $, 1689 $, "struct S { int a; };\nint f(const S** spp) {\n    return spp[0][0].a;\n}\n" $)
1690:
1691:
1692: ;
1693: $if $(@expr1073743565 $!@expr1073743566 $assertEquals $(@expr1073743567 "cppcheck-2.8/test/testunusedvar.cpp" $, 1693 $, "" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return ; }
1694:
1695: $checkStructMemberUsage_ $(@expr1073743570 "cppcheck-2.8/test/testunusedvar.cpp" $, 1695 $, "struct S { int a; };\nint f(const S* sp) {\n    return sp[0].a;\n}\n" $)
1696:
1697:
1698: ;
1699: $if $(@expr1073743571 $!@expr1073743572 $assertEquals $(@expr1073743573 "cppcheck-2.8/test/testunusedvar.cpp" $, 1699 $, "" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return ; }
1700:
1701: $checkStructMemberUsage_ $(@expr1073743576 "cppcheck-2.8/test/testunusedvar.cpp" $, 1701 $, "struct S { int a; };\nint f(const S* sp) {\n    return sp->a;\n}\n" $)
1702:
1703:
1704: ;
1705: $if $(@expr1073743577 $!@expr1073743578 $assertEquals $(@expr1073743579 "cppcheck-2.8/test/testunusedvar.cpp" $, 1705 $, "" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return ; }
1706:
1707: $checkStructMemberUsage_ $(@expr1073743582 "cppcheck-2.8/test/testunusedvar.cpp" $, 1707 $, "typedef struct { int i; } A;\ntypedef struct { std::vector<A> v; } B;\nconst A& f(const std::vector<const B*>& b, int idx) {\n    const A& a = b[0]->v[idx];\n    return a;\n}\n" $)
1708:
|
1711:
1712: ;
1713: $if $(@expr1073743583 $!@expr1073743584 $assertEquals $(@expr1073743585 "cppcheck-2.8/test/testunusedvar.cpp" $, 1713 $, "[test.cpp:1]: (style) struct member 'A::i' is never used.\n" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return
1714: ; }
1715:
1716: settings@var102 .@expr1764 enforcedLang@var115 =@expr1073743589 Settings ::@expr1073743590 C@expr1073743526 ;
1717: $checkStructMemberUsage_ $(@expr1073743591 "cppcheck-2.8/test/testunusedvar.cpp" $, 1717 $, "struct A {\n    struct B {\n        int x;\n    } b;\n} a;\nvoid f() {\n    struct B* pb = &a.b;\n    pb->x = 1;\n}\n" $)
1718:
|
1724:
1725: ;
1726: $if $(@expr1073743592 $!@expr1073743593 $assertEquals $(@expr1073743594 "cppcheck-2.8/test/testunusedvar.cpp" $, 1726 $, "" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return ; }
1727:
1728: $checkStructMemberUsage_ $(@expr1073743597 "cppcheck-2.8/test/testunusedvar.cpp" $, 1728 $, "union U {\n    struct A {\n        struct B {\n            int x;\n        } b;\n    } a;\n    struct C {\n        short s[2];\n    } c;\n} u;\nvoid f() {\n    struct B* pb = &u.a.b;\n    pb->x = 1;\n    struct C* pc = &u.c;\n    pc->s[0] = 1;\n}\n" $)
1729:
|
1742:
1743: ;
1744: $if $(@expr1073743598 $!@expr1073743599 $assertEquals $(@expr1073743600 "cppcheck-2.8/test/testunusedvar.cpp" $, 1744 $, "" $, errout@var100 .@expr1708 str (@expr1709 ) $) $) { $return ; }
1745: settings@var102 .@expr1764 enforcedLang@var115 =@expr1073743604 Settings ::@expr1073743605 None@expr1073743527 ;
1746: }
1747:
1748: void structmember20 ( ) {
1749: $checkStructMemberUsage_ $(@expr1073743606 "cppcheck-2.8/test/testunusedvar.cpp" $, 1749 $, "void f() {\n    {\n    }\n    {\n        struct S { int a; };\n        S s{};\n        {\n            if (s.a) {}\n        }\n    }\n}\n" $)
1750:
|
1758:
1759: ;
1760: $if $(@expr1073743607 $!@expr1073743608 $assertEquals $(@expr1073743609 "cppcheck-2.8/test/testunusedvar.cpp" $, 1760 $, "" $, errout@var100 .@expr1073743610 str (@expr1073743611 ) $) $) { $return ; }
1761: }
1762:
1763: void functionVariableUsage_ ( const char * file@var116 , int line@var117 , const char code@var118 [ ] , const char filename@var119 [ 9 ] = "test.cpp" ) {
1764:
1765: errout@var100 .@expr1073743612 str (@expr1073743613 "" ) ;
1766:
1767:
1768: Tokenizer tokenizer@var120 (@expr1073743614 &@expr1791 settings@var102 , this@expr1792 ) ;
1769: std ::@expr1073743617 istringstream istr@var121 (@expr1073743618 code@var118 ) ;
1770: $assert_ $(@expr1073743619 file@var116 $, line@var117 $, $(@expr1073743620 tokenizer@var120 .@expr1073743621 tokenize (@expr1073743622 istr@var121 , filename@var119 ) $) $) ;
1771:
1772:
1773: CheckUnusedVar checkUnusedVar@var122 (@expr1073743623 &@expr1073743624 tokenizer@var120 , &@expr1791 settings@var102 , this@expr1792 ) ;
1774: checkUnusedVar@var122 .@expr1073743626 checkFunctionVariableUsage (@expr1073743627 ) ;
1775: }
1776:
1777: void localvar1 ( ) {
1778:
1779: $functionVariableUsage_ $(@expr1073743628 "cppcheck-2.8/test/testunusedvar.cpp" $, 1779 $, "void foo()\n{\n    int i = 0;\n}" $)
1780:
1781:
1782: ;
1783: $if $(@expr1073743629 $!@expr1073743630 $assertEquals $(@expr1073743631 "cppcheck-2.8/test/testunusedvar.cpp" $, 1783 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1784:
1785: $functionVariableUsage_ $(@expr1073743634 "cppcheck-2.8/test/testunusedvar.cpp" $, 1785 $, "void foo()\n{\n    int i(0);\n}" $)
1786:
1787:
1788: ;
1789: $if $(@expr1073743635 $!@expr1073743636 $assertEquals $(@expr1073743637 "cppcheck-2.8/test/testunusedvar.cpp" $, 1789 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1790:
|
1793:
1794: $functionVariableUsage_ $(@expr1073743640 "cppcheck-2.8/test/testunusedvar.cpp" $, 1794 $, "void foo()\n{\n    int i(a);\n}" $)
1795:
1796:
1797: ;
1798: $if $(@expr1073743641 $!@expr1073743642 $assertEquals $(@expr1073743643 "cppcheck-2.8/test/testunusedvar.cpp" $, 1798 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1799:
1800: $functionVariableUsage_ $(@expr1073743646 "cppcheck-2.8/test/testunusedvar.cpp" $, 1800 $, "void foo()\n{\n    int j = 0;\n    int i(j);\n}" $)
1801:
1802:
1803:
1804: ;
1805: $if $(@expr1073743647 $!@expr1073743648 $assertEquals $(@expr1073743649 "cppcheck-2.8/test/testunusedvar.cpp" $, 1805 $, "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1806:
1807: $functionVariableUsage_ $(@expr1073743652 "cppcheck-2.8/test/testunusedvar.cpp" $, 1807 $, "void foo()\n{\n    int j = 0;\n    int & i = j;\n    x(j);\n}" $)
1808:
|
1811:
1812: ;
1813: $if $(@expr1073743653 $!@expr1073743654 $assertEquals $(@expr1073743655 "cppcheck-2.8/test/testunusedvar.cpp" $, 1813 $, "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1814:
1815: $functionVariableUsage_ $(@expr1073743658 "cppcheck-2.8/test/testunusedvar.cpp" $, 1815 $, "void foo()\n{\n    int j = 0;\n    const int & i = j;\n    x(j);\n}" $)
1816:
|
1819:
1820: ;
1821: $if $(@expr1073743659 $!@expr1073743660 $assertEquals $(@expr1073743661 "cppcheck-2.8/test/testunusedvar.cpp" $, 1821 $, "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1822:
1823: $functionVariableUsage_ $(@expr1073743664 "cppcheck-2.8/test/testunusedvar.cpp" $, 1823 $, "void foo()\n{\n    int j = 0;\n    int & i(j);\n    x(j);\n}" $)
1824:
|
1827:
1828: ;
1829: $if $(@expr1073743665 $!@expr1073743666 $assertEquals $(@expr1073743667 "cppcheck-2.8/test/testunusedvar.cpp" $, 1829 $, "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1830:
1831: $functionVariableUsage_ $(@expr1073743670 "cppcheck-2.8/test/testunusedvar.cpp" $, 1831 $, "void foo()\n{\n    int j = 0;\n    const int & i(j);\n    x(j);\n}" $)
1832:
|
1835:
1836: ;
1837: $if $(@expr1073743671 $!@expr1073743672 $assertEquals $(@expr1073743673 "cppcheck-2.8/test/testunusedvar.cpp" $, 1837 $, "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1838:
1839: $functionVariableUsage_ $(@expr1073743676 "cppcheck-2.8/test/testunusedvar.cpp" $, 1839 $, "void foo()\n{\n    int * j = Data;\n    int * i(j);\n}" $)
1840:
1841:
1842:
1843: ;
1844: $if $(@expr1073743677 $!@expr1073743678 $assertEquals $(@expr1073743679 "cppcheck-2.8/test/testunusedvar.cpp" $, 1844 $, "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1845:
1846: $functionVariableUsage_ $(@expr1073743682 "cppcheck-2.8/test/testunusedvar.cpp" $, 1846 $, "void foo()\n{\n    int * j = Data;\n    const int * i(j);\n}" $)
1847:
1848:
1849:
1850: ;
1851: $if $(@expr1073743683 $!@expr1073743684 $assertEquals $(@expr1073743685 "cppcheck-2.8/test/testunusedvar.cpp" $, 1851 $, "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1852:
1853: $functionVariableUsage_ $(@expr1073743688 "cppcheck-2.8/test/testunusedvar.cpp" $, 1853 $, "void foo()\n{\n    bool i = false;\n}" $)
1854:
1855:
1856: ;
1857: $if $(@expr1073743689 $!@expr1073743690 $assertEquals $(@expr1073743691 "cppcheck-2.8/test/testunusedvar.cpp" $, 1857 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1858:
1859: $functionVariableUsage_ $(@expr1073743694 "cppcheck-2.8/test/testunusedvar.cpp" $, 1859 $, "void foo()\n{\n    bool i = true;\n}" $)
1860:
1861:
1862: ;
1863: $if $(@expr1073743695 $!@expr1073743696 $assertEquals $(@expr1073743697 "cppcheck-2.8/test/testunusedvar.cpp" $, 1863 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1864:
1865: $functionVariableUsage_ $(@expr1073743700 "cppcheck-2.8/test/testunusedvar.cpp" $, 1865 $, "void foo()\n{\n    char *i;\n    i = fgets();\n}" $)
1866:
1867:
1868:
1869: ;
1870: $if $(@expr1073743701 $!@expr1073743702 $assertEquals $(@expr1073743703 "cppcheck-2.8/test/testunusedvar.cpp" $, 1870 $, "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1871:
1872:
1873: $functionVariableUsage_ $(@expr1073743706 "cppcheck-2.8/test/testunusedvar.cpp" $, 1873 $, "undefined foo()\n{\n    undefined i = 0;\n}" $)
1874:
1875:
1876: ;
1877:
1878:
1879: $functionVariableUsage_ $(@expr1073743707 "cppcheck-2.8/test/testunusedvar.cpp" $, 1879 $, "undefined foo()\n{\n    undefined i = 0;\n}\n" , "test.c" $)
1880:
1881:
1882:
1883: ;
1884: $if $(@expr1073743708 $!@expr1073743709 $assertEquals $(@expr1073743710 "cppcheck-2.8/test/testunusedvar.cpp" $, 1884 $, "[test.c:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1885:
1886: $functionVariableUsage_ $(@expr1073743713 "cppcheck-2.8/test/testunusedvar.cpp" $, 1886 $, "void foo()\n{\n    int i = undefined;\n}" $)
1887:
1888:
1889: ;
1890: $if $(@expr1073743714 $!@expr1073743715 $assertEquals $(@expr1073743716 "cppcheck-2.8/test/testunusedvar.cpp" $, 1890 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1891:
1892: $functionVariableUsage_ $(@expr1073743719 "cppcheck-2.8/test/testunusedvar.cpp" $, 1892 $, "void foo()\n{\n    int * i = Data;\n}" $)
1893:
1894:
1895: ;
1896: $if $(@expr1073743720 $!@expr1073743721 $assertEquals $(@expr1073743722 "cppcheck-2.8/test/testunusedvar.cpp" $, 1896 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1897:
1898: $functionVariableUsage_ $(@expr1073743725 "cppcheck-2.8/test/testunusedvar.cpp" $, 1898 $, "void foo()\n{\n    void * i = Data;\n}" $)
1899:
1900:
1901: ;
1902: $if $(@expr1073743726 $!@expr1073743727 $assertEquals $(@expr1073743728 "cppcheck-2.8/test/testunusedvar.cpp" $, 1902 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1903:
1904: $functionVariableUsage_ $(@expr1073743731 "cppcheck-2.8/test/testunusedvar.cpp" $, 1904 $, "void foo()\n{\n    const void * i = Data;\n}" $)
1905:
1906:
1907: ;
1908: $if $(@expr1073743732 $!@expr1073743733 $assertEquals $(@expr1073743734 "cppcheck-2.8/test/testunusedvar.cpp" $, 1908 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1909:
1910: $functionVariableUsage_ $(@expr1073743737 "cppcheck-2.8/test/testunusedvar.cpp" $, 1910 $, "void foo()\n{\n    struct S * i = DATA;\n}" $)
1911:
1912:
1913: ;
1914: $if $(@expr1073743738 $!@expr1073743739 $assertEquals $(@expr1073743740 "cppcheck-2.8/test/testunusedvar.cpp" $, 1914 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1915:
1916: $functionVariableUsage_ $(@expr1073743743 "cppcheck-2.8/test/testunusedvar.cpp" $, 1916 $, "void foo()\n{\n    const struct S * i = DATA;\n}" $)
1917:
1918:
1919: ;
1920: $if $(@expr1073743744 $!@expr1073743745 $assertEquals $(@expr1073743746 "cppcheck-2.8/test/testunusedvar.cpp" $, 1920 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1921:
1922: $functionVariableUsage_ $(@expr1073743749 "cppcheck-2.8/test/testunusedvar.cpp" $, 1922 $, "void foo()\n{\n    struct S & i = j;\n}" $)
1923:
1924:
1925: ;
1926: $if $(@expr1073743750 $!@expr1073743751 $assertEquals $(@expr1073743752 "cppcheck-2.8/test/testunusedvar.cpp" $, 1926 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1927:
1928: $functionVariableUsage_ $(@expr1073743755 "cppcheck-2.8/test/testunusedvar.cpp" $, 1928 $, "void foo()\n{\n    const struct S & i = j;\n}" $)
1929:
1930:
1931: ;
1932: $if $(@expr1073743756 $!@expr1073743757 $assertEquals $(@expr1073743758 "cppcheck-2.8/test/testunusedvar.cpp" $, 1932 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1933:
1934: $functionVariableUsage_ $(@expr1073743761 "cppcheck-2.8/test/testunusedvar.cpp" $, 1934 $, "void foo()\n{\n    undefined * i = X;\n}" $)
1935:
1936:
1937: ;
1938: $if $(@expr1073743762 $!@expr1073743763 $assertEquals $(@expr1073743764 "cppcheck-2.8/test/testunusedvar.cpp" $, 1938 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1939:
1940: $functionVariableUsage_ $(@expr1073743767 "cppcheck-2.8/test/testunusedvar.cpp" $, 1940 $, "void foo()\n{\n    int i = 0;\n    int j = i;\n}" $)
1941:
1942:
1943:
1944: ;
1945: $if $(@expr1073743768 $!@expr1073743769 $assertEquals $(@expr1073743770 "cppcheck-2.8/test/testunusedvar.cpp" $, 1945 $, "[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1946:
1947: $functionVariableUsage_ $(@expr1073743773 "cppcheck-2.8/test/testunusedvar.cpp" $, 1947 $, "void foo()\n{\n    int i[10] = { 0 };\n}" $)
1948:
1949:
1950: ;
1951: $if $(@expr1073743774 $!@expr1073743775 $assertEquals $(@expr1073743776 "cppcheck-2.8/test/testunusedvar.cpp" $, 1951 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1952:
1953: $functionVariableUsage_ $(@expr1073743779 "cppcheck-2.8/test/testunusedvar.cpp" $, 1953 $, "void foo(int n)\n{\n    int i[n] = { 0 };\n}" $)
1954:
1955:
1956: ;
1957: $if $(@expr1073743780 $!@expr1073743781 $assertEquals $(@expr1073743782 "cppcheck-2.8/test/testunusedvar.cpp" $, 1957 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1958:
1959: $functionVariableUsage_ $(@expr1073743785 "cppcheck-2.8/test/testunusedvar.cpp" $, 1959 $, "void foo()\n{\n    char i[10] = \"123456789\";\n}" $)
1960:
1961:
1962: ;
1963: $if $(@expr1073743786 $!@expr1073743787 $assertEquals $(@expr1073743788 "cppcheck-2.8/test/testunusedvar.cpp" $, 1963 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1964:
1965: $functionVariableUsage_ $(@expr1073743791 "cppcheck-2.8/test/testunusedvar.cpp" $, 1965 $, "void foo()\n{\n    char *i = \"123456789\";\n}" $)
1966:
1967:
1968: ;
1969: $if $(@expr1073743792 $!@expr1073743793 $assertEquals $(@expr1073743794 "cppcheck-2.8/test/testunusedvar.cpp" $, 1969 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1970:
1971: $functionVariableUsage_ $(@expr1073743797 "cppcheck-2.8/test/testunusedvar.cpp" $, 1971 $, "void foo()\n{\n    int i = 0;\n}" $)
1972:
1973:
1974: ;
1975: $if $(@expr1073743798 $!@expr1073743799 $assertEquals $(@expr1073743800 "cppcheck-2.8/test/testunusedvar.cpp" $, 1975 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1976:
1977: $functionVariableUsage_ $(@expr1073743803 "cppcheck-2.8/test/testunusedvar.cpp" $, 1977 $, "void foo()\n{\n    int i = 0,code=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n    }\n}" $)
1978:
|
1983:
1984: ;
1985: $if $(@expr1073743804 $!@expr1073743805 $assertEquals $(@expr1073743806 "cppcheck-2.8/test/testunusedvar.cpp" $, 1985 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
1986:
1987: $functionVariableUsage_ $(@expr1073743809 "cppcheck-2.8/test/testunusedvar.cpp" $, 1987 $, "void foo()\n{\n    int i = 0,code=10,d=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        d = code;\n    }\n}" $)
1988:
|
1994:
1995: ;
1996: $if $(@expr1073743810 $!@expr1073743811 $assertEquals $(@expr1073743812 "cppcheck-2.8/test/testunusedvar.cpp" $, 1996 $, "[test.cpp:3]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return
1997:
1998: ; }
1999:
2000: $functionVariableUsage_ $(@expr1073743815 "cppcheck-2.8/test/testunusedvar.cpp" $, 2000 $, "void foo()\n{\n    int i = 0,code=10,d=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        g(d);\n        d = code;\n    }\n}" $)
2001:
|
2008:
2009: ;
2010: $if $(@expr1073743816 $!@expr1073743817 $assertEquals $(@expr1073743818 "cppcheck-2.8/test/testunusedvar.cpp" $, 2010 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2011:
2012: $functionVariableUsage_ $(@expr1073743821 "cppcheck-2.8/test/testunusedvar.cpp" $, 2012 $, "void foo()\n{\n    int i = 0,code=10,d=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        if (i == 3) {\n            return d;\n        }\n        d = code;\n    }\n}" $)
2013:
|
2022:
2023: ;
2024: $if $(@expr1073743822 $!@expr1073743823 $assertEquals $(@expr1073743824 "cppcheck-2.8/test/testunusedvar.cpp" $, 2024 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2025:
2026: $functionVariableUsage_ $(@expr1073743827 "cppcheck-2.8/test/testunusedvar.cpp" $, 2026 $, "void foo()\n{\n    int i = 0,a=10,b=20;\n    for(i = 0; i < 10; i++) {\n        std::cout<<a<<std::endl;\n        int tmp=a;\n        a=b;\n        b=tmp;\n    }\n}" $)
2027:
|
2034:
2035: ;
2036: $if $(@expr1073743828 $!@expr1073743829 $assertEquals $(@expr1073743830 "cppcheck-2.8/test/testunusedvar.cpp" $, 2036 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2037:
2038: $functionVariableUsage_ $(@expr1073743833 "cppcheck-2.8/test/testunusedvar.cpp" $, 2038 $, "void foo()\n{\n    int code=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n    }\n}" $)
2039:
|
2044:
2045: ;
2046: $if $(@expr1073743834 $!@expr1073743835 $assertEquals $(@expr1073743836 "cppcheck-2.8/test/testunusedvar.cpp" $, 2046 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2047:
2048: $functionVariableUsage_ $(@expr1073743839 "cppcheck-2.8/test/testunusedvar.cpp" $, 2048 $, "void foo()\n{\n    int code=10,d=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        d += code;\n    }\n}" $)
2049:
|
2055:
2056: ;
2057: $if $(@expr1073743840 $!@expr1073743841 $assertEquals $(@expr1073743842 "cppcheck-2.8/test/testunusedvar.cpp" $, 2057 $, "[test.cpp:3]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return
2058: ; }
2059:
2060: $functionVariableUsage_ $(@expr1073743845 "cppcheck-2.8/test/testunusedvar.cpp" $, 2060 $, "void foo()\n{\n    int code=10,d=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        g(d);\n        d += code;\n    }\n}" $)
2061:
|
2068:
2069: ;
2070: $if $(@expr1073743846 $!@expr1073743847 $assertEquals $(@expr1073743848 "cppcheck-2.8/test/testunusedvar.cpp" $, 2070 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2071:
2072: $functionVariableUsage_ $(@expr1073743851 "cppcheck-2.8/test/testunusedvar.cpp" $, 2072 $, "void foo()\n{\n    int code=10,d=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        if (i == 3) {\n            return d;\n        }\n        d += code;\n    }\n}" $)
2073:
|
2082:
2083: ;
2084: $if $(@expr1073743852 $!@expr1073743853 $assertEquals $(@expr1073743854 "cppcheck-2.8/test/testunusedvar.cpp" $, 2084 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2085:
2086: $functionVariableUsage_ $(@expr1073743857 "cppcheck-2.8/test/testunusedvar.cpp" $, 2086 $, "void foo()\n{\n    int a=10,b=20;\n    while(a != 30) {\n        std::cout<<a<<std::endl;\n        int tmp=a;\n        a=b;\n        b=tmp;\n    }\n}" $)
2087:
|
2094:
2095: ;
2096: $if $(@expr1073743858 $!@expr1073743859 $assertEquals $(@expr1073743860 "cppcheck-2.8/test/testunusedvar.cpp" $, 2096 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2097:
2098: $functionVariableUsage_ $(@expr1073743863 "cppcheck-2.8/test/testunusedvar.cpp" $, 2098 $, "void foo()\n{\n    int code=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n    } while(code < 20);\n}" $)
2099:
|
2104:
2105: ;
2106: $if $(@expr1073743864 $!@expr1073743865 $assertEquals $(@expr1073743866 "cppcheck-2.8/test/testunusedvar.cpp" $, 2106 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2107:
2108: $functionVariableUsage_ $(@expr1073743869 "cppcheck-2.8/test/testunusedvar.cpp" $, 2108 $, "void foo()\n{\n    int code=10,d=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n        d += code;\n    } while(code < 20);\n}" $)
2109:
|
2115:
2116: ;
2117: $if $(@expr1073743870 $!@expr1073743871 $assertEquals $(@expr1073743872 "cppcheck-2.8/test/testunusedvar.cpp" $, 2117 $, "[test.cpp:3]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return
2118: ; }
2119:
2120: $functionVariableUsage_ $(@expr1073743875 "cppcheck-2.8/test/testunusedvar.cpp" $, 2120 $, "void foo()\n{\n    int code=10,d=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n        g(d);\n        d += code;\n    } while(code < 20);\n}" $)
2121:
|
2128:
2129: ;
2130: $if $(@expr1073743876 $!@expr1073743877 $assertEquals $(@expr1073743878 "cppcheck-2.8/test/testunusedvar.cpp" $, 2130 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2131:
2132: $functionVariableUsage_ $(@expr1073743881 "cppcheck-2.8/test/testunusedvar.cpp" $, 2132 $, "void foo()\n{\n    int code=10,d=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n        if (i == 3) {\n            return d;\n        }\n        d += code;\n    } while(code < 20);\n}" $)
2133:
|
2142:
2143: ;
2144: $if $(@expr1073743882 $!@expr1073743883 $assertEquals $(@expr1073743884 "cppcheck-2.8/test/testunusedvar.cpp" $, 2144 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2145:
2146: $functionVariableUsage_ $(@expr1073743887 "cppcheck-2.8/test/testunusedvar.cpp" $, 2146 $, "void foo()\n{\n    int a=10,b=20;\n    do {\n        std::cout<<a<<std::endl;\n        int tmp=a;\n        a=b;\n        b=tmp;\n    } while( a!=30 );\n}" $)
2147:
|
2154:
2155: ;
2156: $if $(@expr1073743888 $!@expr1073743889 $assertEquals $(@expr1073743890 "cppcheck-2.8/test/testunusedvar.cpp" $, 2156 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2157:
2158: $functionVariableUsage_ $(@expr1073743893 "cppcheck-2.8/test/testunusedvar.cpp" $, 2158 $, "void foo()\n{\n    int code=10;\n    for(int i=0; i < 10; i++) {\n        if(true) {\n            std::cout<<code<<std::endl;\n            code += 2;\n        }\n    }\n}" $)
2159:
|
2166:
2167: ;
2168: $if $(@expr1073743894 $!@expr1073743895 $assertEquals $(@expr1073743896 "cppcheck-2.8/test/testunusedvar.cpp" $, 2168 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2169:
2170: $functionVariableUsage_ $(@expr1073743899 "cppcheck-2.8/test/testunusedvar.cpp" $, 2170 $, "void foo()\n{\n    int code=10;\n    for(int i=0; i < 10; i++) {\n        if(true) {\n            std::cout<<code<<std::endl;\n        }\n        code += 2;\n    }\n}" $)
2171:
|
2178:
2179: ;
2180: $if $(@expr1073743900 $!@expr1073743901 $assertEquals $(@expr1073743902 "cppcheck-2.8/test/testunusedvar.cpp" $, 2180 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2181:
2182: $functionVariableUsage_ $(@expr1073743905 "cppcheck-2.8/test/testunusedvar.cpp" $, 2182 $, "void foo()\n{\n    int code=10;\n    while(code < 20) {\n        if(true) {\n            std::cout<<code<<std::endl;\n            code += 2;\n        }\n    }\n}" $)
2183:
|
2190:
2191: ;
2192: $if $(@expr1073743906 $!@expr1073743907 $assertEquals $(@expr1073743908 "cppcheck-2.8/test/testunusedvar.cpp" $, 2192 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2193:
2194: $functionVariableUsage_ $(@expr1073743911 "cppcheck-2.8/test/testunusedvar.cpp" $, 2194 $, "void foo()\n{\n    int code=10;\n    do {\n        if(true) {\n            std::cout<<code<<std::endl;\n            code += 2;\n        }\n    } while(code < 20);\n}" $)
2195:
|
2202:
2203: ;
2204: $if $(@expr1073743912 $!@expr1073743913 $assertEquals $(@expr1073743914 "cppcheck-2.8/test/testunusedvar.cpp" $, 2204 $, "" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2205:
2206: $functionVariableUsage_ $(@expr1073743917 "cppcheck-2.8/test/testunusedvar.cpp" $, 2206 $, "void foo(int j = 0) {\n    int i = 0;\n}" $)
2207:
2208: ;
2209: $if $(@expr1073743918 $!@expr1073743919 $assertEquals $(@expr1073743920 "cppcheck-2.8/test/testunusedvar.cpp" $, 2209 $, "[test.cpp:2]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1808 str (@expr1809 ) $) $) { $return ; }
2210:
2211: }
2212:
2213: void localvar2 ( ) {
2214:
2215:
2216: $functionVariableUsage_ $(@expr1073743923 "cppcheck-2.8/test/testunusedvar.cpp" $, 2216 $, "int foo()\n{\n    int i;\n    return i;\n}" $)
2217:
2218:
2219:
2220: ;
2221: $if $(@expr1073743924 $!@expr1073743925 $assertEquals $(@expr1073743926 "cppcheck-2.8/test/testunusedvar.cpp" $, 2221 $, "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2222:
2223: $functionVariableUsage_ $(@expr1073743929 "cppcheck-2.8/test/testunusedvar.cpp" $, 2223 $, "bool foo()\n{\n    bool i;\n    return i;\n}" $)
2224:
2225:
2226:
2227: ;
2228: $if $(@expr1073743930 $!@expr1073743931 $assertEquals $(@expr1073743932 "cppcheck-2.8/test/testunusedvar.cpp" $, 2228 $, "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2229:
2230:
2231: $functionVariableUsage_ $(@expr1073743935 "cppcheck-2.8/test/testunusedvar.cpp" $, 2231 $, "undefined foo()\n{\n    undefined i;\n    return i;\n}" $)
2232:
2233:
2234:
2235: ;
2236: $if $(@expr1073743936 $!@expr1073743937 $assertEquals $(@expr1073743938 "cppcheck-2.8/test/testunusedvar.cpp" $, 2236 $, "" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2237:
2238: $functionVariableUsage_ $(@expr1073743941 "cppcheck-2.8/test/testunusedvar.cpp" $, 2238 $, "undefined foo()\n{\n    undefined i;\n    return i;\n}\n" , "test.c" $)
2239:
|
2242:
2243: ;
2244: $if $(@expr1073743942 $!@expr1073743943 $assertEquals $(@expr1073743944 "cppcheck-2.8/test/testunusedvar.cpp" $, 2244 $, "[test.c:3]: (style) Variable 'i' is not assigned a value.\n" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2245:
2246: $functionVariableUsage_ $(@expr1073743947 "cppcheck-2.8/test/testunusedvar.cpp" $, 2246 $, "undefined *foo()\n{\n    undefined * i;\n    return i;\n}" $)
2247:
2248:
2249:
2250: ;
2251: $if $(@expr1073743948 $!@expr1073743949 $assertEquals $(@expr1073743950 "cppcheck-2.8/test/testunusedvar.cpp" $, 2251 $, "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2252:
2253: $functionVariableUsage_ $(@expr1073743953 "cppcheck-2.8/test/testunusedvar.cpp" $, 2253 $, "int *foo()\n{\n    int * i;\n    return i;\n}" $)
2254:
2255:
2256:
2257: ;
2258: $if $(@expr1073743954 $!@expr1073743955 $assertEquals $(@expr1073743956 "cppcheck-2.8/test/testunusedvar.cpp" $, 2258 $, "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2259:
2260: $functionVariableUsage_ $(@expr1073743959 "cppcheck-2.8/test/testunusedvar.cpp" $, 2260 $, "const int *foo()\n{\n    const int * i;\n    return i;\n}" $)
2261:
2262:
2263:
2264: ;
2265: $if $(@expr1073743960 $!@expr1073743961 $assertEquals $(@expr1073743962 "cppcheck-2.8/test/testunusedvar.cpp" $, 2265 $, "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2266:
2267: $functionVariableUsage_ $(@expr1073743965 "cppcheck-2.8/test/testunusedvar.cpp" $, 2267 $, "struct S *foo()\n{\n    struct S * i;\n    return i;\n}" $)
2268:
2269:
2270:
2271: ;
2272: $if $(@expr1073743966 $!@expr1073743967 $assertEquals $(@expr1073743968 "cppcheck-2.8/test/testunusedvar.cpp" $, 2272 $, "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2273:
2274: $functionVariableUsage_ $(@expr1073743971 "cppcheck-2.8/test/testunusedvar.cpp" $, 2274 $, "const struct S *foo()\n{\n    const struct S * i;\n    return i;\n}" $)
2275:
2276:
2277:
2278: ;
2279: $if $(@expr1073743972 $!@expr1073743973 $assertEquals $(@expr1073743974 "cppcheck-2.8/test/testunusedvar.cpp" $, 2279 $, "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2280:
2281:
2282: $functionVariableUsage_ $(@expr1073743977 "cppcheck-2.8/test/testunusedvar.cpp" $, 2282 $, "void foo()\n{\n    int a[10];\n    f(a[0]);\n}" $)
2283:
2284:
2285:
2286: ;
2287: $if $(@expr1073743978 $!@expr1073743979 $assertEquals $(@expr1073743980 "cppcheck-2.8/test/testunusedvar.cpp" $, 2287 $, "" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2288:
2289:
2290: $functionVariableUsage_ $(@expr1073743983 "cppcheck-2.8/test/testunusedvar.cpp" $, 2290 $, "void foo()\n{\n    int a[10];\n    f(a[0], 0);\n}" $)
2291:
2292:
2293:
2294: ;
2295: $if $(@expr1073743984 $!@expr1073743985 $assertEquals $(@expr1073743986 "cppcheck-2.8/test/testunusedvar.cpp" $, 2295 $, "" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2296:
2297:
2298: $functionVariableUsage_ $(@expr1073743989 "cppcheck-2.8/test/testunusedvar.cpp" $, 2298 $, "void foo()\n{\n    int a[10];\n    f(0, a[0]);\n}" $)
2299:
2300:
2301:
2302: ;
2303: $if $(@expr1073743990 $!@expr1073743991 $assertEquals $(@expr1073743992 "cppcheck-2.8/test/testunusedvar.cpp" $, 2303 $, "" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2304:
2305:
2306: $functionVariableUsage_ $(@expr1073743995 "cppcheck-2.8/test/testunusedvar.cpp" $, 2306 $, "void foo()\n{\n    int a[10];\n    f(0, a[0], 0);\n}" $)
2307:
2308:
2309:
2310: ;
2311: $if $(@expr1073743996 $!@expr1073743997 $assertEquals $(@expr1073743998 "cppcheck-2.8/test/testunusedvar.cpp" $, 2311 $, "" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2312:
2313:
2314: $functionVariableUsage_ $(@expr1073744001 "cppcheck-2.8/test/testunusedvar.cpp" $, 2314 $, "void f(const int & i) { }\nvoid foo()\n{\n    int a[10];\n    f(a[0]);\n}" $)
2315:
|
2318:
2319: ;
2320: $todoAssertEquals $(@expr1073744002 "cppcheck-2.8/test/testunusedvar.cpp" $, 2320 $, "[test.cpp:4]: (style) Variable 'a' is not assigned a value.\n" $, "" $, errout@var100 .@expr2103 str (@expr2104 ) $)
2321: ;
2322:
2323:
2324: $functionVariableUsage_ $(@expr1073744005 "cppcheck-2.8/test/testunusedvar.cpp" $, 2324 $, "void f(int & i) { }\nvoid foo()\n{\n    int a[10];\n    f(a[0]);\n}" $)
2325:
|
2328:
2329: ;
2330: $if $(@expr1073744006 $!@expr1073744007 $assertEquals $(@expr1073744008 "cppcheck-2.8/test/testunusedvar.cpp" $, 2330 $, "" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2331:
2332: $functionVariableUsage_ $(@expr1073744011 "cppcheck-2.8/test/testunusedvar.cpp" $, 2332 $, "void f(int * i);\nvoid foo()\n{\n    int a[10];\n    f(a+1);\n}" $)
2333:
|
2336:
2337: ;
2338: $if $(@expr1073744012 $!@expr1073744013 $assertEquals $(@expr1073744014 "cppcheck-2.8/test/testunusedvar.cpp" $, 2338 $, "" $, errout@var100 .@expr2103 str (@expr2104 ) $) $) { $return ; }
2339:
2340: }
2341:
2342: void localvar3 ( ) {
2343: $functionVariableUsage_ $(@expr1073744017 "cppcheck-2.8/test/testunusedvar.cpp" $, 2343 $, "void foo(int abc)\n{\n    int i;\n    if ( abc )\n        ;\n    else i = 0;\n}" $)
2344:
|
2348:
2349: ;
2350: $if $(@expr1073744018 $!@expr1073744019 $assertEquals $(@expr1073744020 "cppcheck-2.8/test/testunusedvar.cpp" $, 2350 $, "[test.cpp:6]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr1073744021 str (@expr1073744022 ) $) $) { $return ; }
2351: }
2352:
2353: void localvar4 ( ) {
2354: $functionVariableUsage_ $(@expr1073744023 "cppcheck-2.8/test/testunusedvar.cpp" $, 2354 $, "void foo()\n{\n    int i = 0;\n    f(i);\n}" $)
2355:
2356:
2357:
2358: ;
2359: $if $(@expr1073744024 $!@expr1073744025 $assertEquals $(@expr1073744026 "cppcheck-2.8/test/testunusedvar.cpp" $, 2359 $, "" $, errout@var100 .@expr2203 str (@expr2204 ) $) $) { $return ; }
2360:
2361: $functionVariableUsage_ $(@expr1073744029 "cppcheck-2.8/test/testunusedvar.cpp" $, 2361 $, "void foo()\n{\n    int i = 0;\n    f(&i);\n}" $)
2362:
2363:
2364:
2365: ;
2366: $if $(@expr1073744030 $!@expr1073744031 $assertEquals $(@expr1073744032 "cppcheck-2.8/test/testunusedvar.cpp" $, 2366 $, "" $, errout@var100 .@expr2203 str (@expr2204 ) $) $) { $return ; }
2367: }
2368:
2369: void localvar5 ( ) {
2370: $functionVariableUsage_ $(@expr1073744035 "cppcheck-2.8/test/testunusedvar.cpp" $, 2370 $, "void foo()\n{\n    int a = 0;\n    b = (char)a;\n}" $)
2371:
2372:
2373:
2374: ;
2375: $if $(@expr1073744036 $!@expr1073744037 $assertEquals $(@expr1073744038 "cppcheck-2.8/test/testunusedvar.cpp" $, 2375 $, "" $, errout@var100 .@expr1073744039 str (@expr1073744040 ) $) $) { $return ; }
2376: }
2377:
2378: void localvar6 ( ) {
2379: $functionVariableUsage_ $(@expr1073744041 "cppcheck-2.8/test/testunusedvar.cpp" $, 2379 $, "void foo() {\n    int b[10];\n    for (int i=0;i<10;++i)\n        b[i] = 0;\n}" $)
2380:
2381:
2382:
2383: ;
2384: $if $(@expr1073744042 $!@expr1073744043 $assertEquals $(@expr1073744044 "cppcheck-2.8/test/testunusedvar.cpp" $, 2384 $, "[test.cpp:4]: (style) Variable 'b[i]' is assigned a value that is never used.\n" $, errout@var100 .@expr2221 str (@expr2222 ) $) $) { $return ; }
2385:
2386: $functionVariableUsage_ $(@expr1073744047 "cppcheck-2.8/test/testunusedvar.cpp" $, 2386 $, "void foo() {\n    int a = 0;\n    int b[10];\n    for (int i=0;i<10;++i)\n        b[i] = ++a;\n}" $)
2387:
|
2390:
2391: ;
2392: $if $(@expr1073744048 $!@expr1073744049 $assertEquals $(@expr1073744050 "cppcheck-2.8/test/testunusedvar.cpp" $, 2392 $, "[test.cpp:5]: (style) Variable 'b[i]' is assigned a value that is never used.\n" $, errout@var100 .@expr2221 str (@expr2222 ) $) $) { $return ; }
2393:
2394: $functionVariableUsage_ $(@expr1073744053 "cppcheck-2.8/test/testunusedvar.cpp" $, 2394 $, "void foo() {\n    int b[10];\n    for (int i=0;i<10;++i)\n        *(b+i) = 0;\n}" $)
2395:
2396:
2397:
2398: ;
2399: $todoAssertEquals $(@expr1073744054 "cppcheck-2.8/test/testunusedvar.cpp" $, 2399 $, "[test.cpp:4]: (style) Variable '*(b+i)' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr2221 str (@expr2222 ) $) ;
2400: }
2401:
2402: void localvar8 ( ) {
2403: $functionVariableUsage_ $(@expr1073744057 "cppcheck-2.8/test/testunusedvar.cpp" $, 2403 $, "void foo()\n{\n    int i;\n}" $)
2404:
2405:
2406: ;
2407: $if $(@expr1073744058 $!@expr1073744059 $assertEquals $(@expr1073744060 "cppcheck-2.8/test/testunusedvar.cpp" $, 2407 $, "[test.cpp:3]: (style) Unused variable: i\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2408:
2409: $functionVariableUsage_ $(@expr1073744063 "cppcheck-2.8/test/testunusedvar.cpp" $, 2409 $, "void foo()\n{\n    int i[2];\n}" $)
2410:
2411:
2412: ;
2413: $if $(@expr1073744064 $!@expr1073744065 $assertEquals $(@expr1073744066 "cppcheck-2.8/test/testunusedvar.cpp" $, 2413 $, "[test.cpp:3]: (style) Unused variable: i\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2414:
2415: $functionVariableUsage_ $(@expr1073744069 "cppcheck-2.8/test/testunusedvar.cpp" $, 2415 $, "void foo()\n{\n    void * i;\n}" $)
2416:
2417:
2418: ;
2419: $if $(@expr1073744070 $!@expr1073744071 $assertEquals $(@expr1073744072 "cppcheck-2.8/test/testunusedvar.cpp" $, 2419 $, "[test.cpp:3]: (style) Unused variable: i\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2420:
2421: $functionVariableUsage_ $(@expr1073744075 "cppcheck-2.8/test/testunusedvar.cpp" $, 2421 $, "void foo()\n{\n    const void * i;\n}" $)
2422:
2423:
2424: ;
2425: $if $(@expr1073744076 $!@expr1073744077 $assertEquals $(@expr1073744078 "cppcheck-2.8/test/testunusedvar.cpp" $, 2425 $, "[test.cpp:3]: (style) Unused variable: i\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2426:
2427:
2428:
2429: $functionVariableUsage_ $(@expr1073744081 "cppcheck-2.8/test/testunusedvar.cpp" $, 2429 $, "void foo()\n{\n    A * i;\n}" $)
2430:
2431:
2432: ;
2433: $if $(@expr1073744082 $!@expr1073744083 $assertEquals $(@expr1073744084 "cppcheck-2.8/test/testunusedvar.cpp" $, 2433 $, "[test.cpp:3]: (style) Unused variable: i\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2434:
2435: $functionVariableUsage_ $(@expr1073744087 "cppcheck-2.8/test/testunusedvar.cpp" $, 2435 $, "void foo()\n{\n    struct A * i;\n}" $)
2436:
2437:
2438: ;
2439: $if $(@expr1073744088 $!@expr1073744089 $assertEquals $(@expr1073744090 "cppcheck-2.8/test/testunusedvar.cpp" $, 2439 $, "[test.cpp:3]: (style) Unused variable: i\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2440:
2441: $functionVariableUsage_ $(@expr1073744093 "cppcheck-2.8/test/testunusedvar.cpp" $, 2441 $, "void foo()\n{\n    const struct A * i;\n}" $)
2442:
2443:
2444: ;
2445: $if $(@expr1073744094 $!@expr1073744095 $assertEquals $(@expr1073744096 "cppcheck-2.8/test/testunusedvar.cpp" $, 2445 $, "[test.cpp:3]: (style) Unused variable: i\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2446:
2447: $functionVariableUsage_ $(@expr1073744099 "cppcheck-2.8/test/testunusedvar.cpp" $, 2447 $, "void foo()\n{\n    int * i[2];\n}" $)
2448:
2449:
2450: ;
2451: $todoAssertEquals $(@expr1073744100 "cppcheck-2.8/test/testunusedvar.cpp" $, 2451 $, "[test.cpp:3]: (style) Unused variable: i\n" $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) ;
2452:
2453: $functionVariableUsage_ $(@expr1073744103 "cppcheck-2.8/test/testunusedvar.cpp" $, 2453 $, "void foo()\n{\n    const int * i[2];\n}" $)
2454:
2455:
2456: ;
2457: $todoAssertEquals $(@expr1073744104 "cppcheck-2.8/test/testunusedvar.cpp" $, 2457 $, "[test.cpp:3]: (style) Unused variable: i\n" $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) ;
2458:
2459: $functionVariableUsage_ $(@expr1073744107 "cppcheck-2.8/test/testunusedvar.cpp" $, 2459 $, "void foo()\n{\n    void * i[2];\n}" $)
2460:
2461:
2462: ;
2463: $todoAssertEquals $(@expr1073744108 "cppcheck-2.8/test/testunusedvar.cpp" $, 2463 $, "[test.cpp:3]: (style) Unused variable: i\n" $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) ;
2464:
2465: $functionVariableUsage_ $(@expr1073744111 "cppcheck-2.8/test/testunusedvar.cpp" $, 2465 $, "void foo()\n{\n    const void * i[2];\n}" $)
2466:
2467:
2468: ;
2469: $todoAssertEquals $(@expr1073744112 "cppcheck-2.8/test/testunusedvar.cpp" $, 2469 $, "[test.cpp:3]: (style) Unused variable: i\n" $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) ;
2470:
2471: $functionVariableUsage_ $(@expr1073744115 "cppcheck-2.8/test/testunusedvar.cpp" $, 2471 $, "void foo()\n{\n    struct A * i[2];\n}" $)
2472:
2473:
2474: ;
2475: $todoAssertEquals $(@expr1073744116 "cppcheck-2.8/test/testunusedvar.cpp" $, 2475 $, "[test.cpp:3]: (style) Unused variable: i\n" $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) ;
2476:
2477: $functionVariableUsage_ $(@expr1073744119 "cppcheck-2.8/test/testunusedvar.cpp" $, 2477 $, "void foo()\n{\n    const struct A * i[2];\n}" $)
2478:
2479:
2480: ;
2481: $todoAssertEquals $(@expr1073744120 "cppcheck-2.8/test/testunusedvar.cpp" $, 2481 $, "[test.cpp:3]: (style) Unused variable: i\n" $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) ;
2482:
2483: $functionVariableUsage_ $(@expr1073744123 "cppcheck-2.8/test/testunusedvar.cpp" $, 2483 $, "void foo(int n)\n{\n    int i[n];\n}" $)
2484:
2485:
2486: ;
2487: $if $(@expr1073744124 $!@expr1073744125 $assertEquals $(@expr1073744126 "cppcheck-2.8/test/testunusedvar.cpp" $, 2487 $, "[test.cpp:3]: (style) Unused variable: i\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2488:
2489: $functionVariableUsage_ $(@expr1073744129 "cppcheck-2.8/test/testunusedvar.cpp" $, 2489 $, "void foo()\n{\n    int i = 0;\n    int &j = i;\n}" $)
2490:
2491:
2492:
2493: ;
2494: $if $(@expr1073744130 $!@expr1073744131 $assertEquals $(@expr1073744132 "cppcheck-2.8/test/testunusedvar.cpp" $, 2494 $, "[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return
2495:
2496: ; }
2497:
2498: $functionVariableUsage_ $(@expr1073744135 "cppcheck-2.8/test/testunusedvar.cpp" $, 2498 $, "void foo()\n{\n    int i;\n    int &j = i;\n}" $)
2499:
2500:
2501:
2502: ;
2503: $if $(@expr1073744136 $!@expr1073744137 $assertEquals $(@expr1073744138 "cppcheck-2.8/test/testunusedvar.cpp" $, 2503 $, "[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: i\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return
2504: ; }
2505:
2506: $functionVariableUsage_ $(@expr1073744141 "cppcheck-2.8/test/testunusedvar.cpp" $, 2506 $, "void foo()\n{\n    int i;\n    int &j = i;\n    j = 0;\n}" $)
2507:
|
2510:
2511: ;
2512: $todoAssertEquals $(@expr1073744142 "cppcheck-2.8/test/testunusedvar.cpp" $, 2512 $, "[test.cpp:5]: (style) Variable 'i' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $)
2513:
2514: ;
2515:
2516: $functionVariableUsage_ $(@expr1073744145 "cppcheck-2.8/test/testunusedvar.cpp" $, 2516 $, "double foo()\n{\n    double i = 0.0;\n    const double j = i;\n    return j;\n}" $)
2517:
|
2520:
2521: ;
2522: $if $(@expr1073744146 $!@expr1073744147 $assertEquals $(@expr1073744148 "cppcheck-2.8/test/testunusedvar.cpp" $, 2522 $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2523:
2524: $functionVariableUsage_ $(@expr1073744151 "cppcheck-2.8/test/testunusedvar.cpp" $, 2524 $, "void foo()\n{\n    A * i;\n    i->f();\n}" $)
2525:
2526:
2527:
2528: ;
2529: $if $(@expr1073744152 $!@expr1073744153 $assertEquals $(@expr1073744154 "cppcheck-2.8/test/testunusedvar.cpp" $, 2529 $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2530:
2531: $functionVariableUsage_ $(@expr1073744157 "cppcheck-2.8/test/testunusedvar.cpp" $, 2531 $, "void foo()\n{\n    char * i;\n    if (i);\n}" $)
2532:
2533:
2534:
2535: ;
2536: $if $(@expr1073744158 $!@expr1073744159 $assertEquals $(@expr1073744160 "cppcheck-2.8/test/testunusedvar.cpp" $, 2536 $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2537:
2538: $functionVariableUsage_ $(@expr1073744163 "cppcheck-2.8/test/testunusedvar.cpp" $, 2538 $, "void foo()\n{\n    char * i = 0;\n    if (i);\n}" $)
2539:
2540:
2541:
2542: ;
2543: $if $(@expr1073744164 $!@expr1073744165 $assertEquals $(@expr1073744166 "cppcheck-2.8/test/testunusedvar.cpp" $, 2543 $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2544:
2545: $functionVariableUsage_ $(@expr1073744169 "cppcheck-2.8/test/testunusedvar.cpp" $, 2545 $, "void foo()\n{\n    char * i = new char[10];\n    if (i);\n}" $)
2546:
2547:
2548:
2549: ;
2550: $if $(@expr1073744170 $!@expr1073744171 $assertEquals $(@expr1073744172 "cppcheck-2.8/test/testunusedvar.cpp" $, 2550 $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2551:
2552: $functionVariableUsage_ $(@expr1073744175 "cppcheck-2.8/test/testunusedvar.cpp" $, 2552 $, "void foo()\n{\n    char *i;\n    f(i);\n}" $)
2553:
2554:
2555:
2556: ;
2557:
2558: $functionVariableUsage_ $(@expr1073744176 "cppcheck-2.8/test/testunusedvar.cpp" $, 2558 $, "int a;\nvoid foo()\n{\n    return &a;\n}" $)
2559:
2560:
2561:
2562: ;
2563: $if $(@expr1073744177 $!@expr1073744178 $assertEquals $(@expr1073744179 "cppcheck-2.8/test/testunusedvar.cpp" $, 2563 $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2564:
2565: $functionVariableUsage_ $(@expr1073744182 "cppcheck-2.8/test/testunusedvar.cpp" $, 2565 $, "int a[10];\nvoid foo()\n{\n    int *p = a;\n    for (int i = 0; i < 10; i++)\n        p[i] = 0;\n}" $)
2566:
|
2570:
2571: ;
2572: $if $(@expr1073744183 $!@expr1073744184 $assertEquals $(@expr1073744185 "cppcheck-2.8/test/testunusedvar.cpp" $, 2572 $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2573:
2574: $functionVariableUsage_ $(@expr1073744188 "cppcheck-2.8/test/testunusedvar.cpp" $, 2574 $, "int a[10];\nvoid foo()\n{\n    int *p = &a[0];\n    for (int i = 0; i < 10; i++)\n        p[i] = 0;\n}" $)
2575:
|
2579:
2580: ;
2581: $if $(@expr1073744189 $!@expr1073744190 $assertEquals $(@expr1073744191 "cppcheck-2.8/test/testunusedvar.cpp" $, 2581 $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2582:
2583: $functionVariableUsage_ $(@expr1073744194 "cppcheck-2.8/test/testunusedvar.cpp" $, 2583 $, "void foo()\n{\n    int a[10];\n    int x;\n    a[0] = 0;\n    x = a[0];\n}" $)
2584:
|
2588:
2589: ;
2590: $if $(@expr1073744195 $!@expr1073744196 $assertEquals $(@expr1073744197 "cppcheck-2.8/test/testunusedvar.cpp" $, 2590 $, "[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2591:
2592:
2593: $functionVariableUsage_ $(@expr1073744200 "cppcheck-2.8/test/testunusedvar.cpp" $, 2593 $, "void foo()\n{\n    int a, b, c;\n    a = b = c = f();\n}" $)
2594:
2595:
2596:
2597: ;
2598: $if $(@expr1073744201 $!@expr1073744202 $assertEquals $(@expr1073744203 "cppcheck-2.8/test/testunusedvar.cpp" $, 2598 $, "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\n" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return
2599:
2600:
2601: ; }
2602:
2603: $functionVariableUsage_ $(@expr1073744206 "cppcheck-2.8/test/testunusedvar.cpp" $, 2603 $, "int * foo()\n{\n    return &undefined[0];\n}" $)
2604:
2605:
2606: ;
2607: $if $(@expr1073744207 $!@expr1073744208 $assertEquals $(@expr1073744209 "cppcheck-2.8/test/testunusedvar.cpp" $, 2607 $, "" $, errout@var100 .@expr2237 str (@expr2238 ) $) $) { $return ; }
2608: }
2609:
2610: void localvar9 ( ) {
2611:
2612: $functionVariableUsage_ $(@expr1073744212 "cppcheck-2.8/test/testunusedvar.cpp" $, 2612 $, "void foo()\n{\n    int a[10];\n    for (int i = 0; i < 10; )\n        a[i++] = 0;\n}" $)
2613:
|
2616:
2617: ;
2618: $todoAssertEquals $(@expr1073744213 "cppcheck-2.8/test/testunusedvar.cpp" $, 2618 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr1073744214 str (@expr1073744215 ) $)
2619:
2620: ;
2621: }
2622:
2623: void localvar10 ( ) {
2624: $functionVariableUsage_ $(@expr1073744216 "cppcheck-2.8/test/testunusedvar.cpp" $, 2624 $, "void foo(int x)\n{\n    int i;\n    if (x) {\n        int i;\n    } else {\n        int i;\n    }\n}" $)
2625:
|
2631:
2632: ;
2633: $if $(@expr1073744217 $!@expr1073744218 $assertEquals $(@expr1073744219 "cppcheck-2.8/test/testunusedvar.cpp" $, 2633 $, "[test.cpp:3]: (style) Unused variable: i\n[test.cpp:5]: (style) Unused variable: i\n[test.cpp:7]: (style) Unused variable: i\n" $, errout@var100 .@expr2396 str (@expr2397 ) $) $) { $return
2634:
2635: ; }
2636:
2637: $functionVariableUsage_ $(@expr1073744222 "cppcheck-2.8/test/testunusedvar.cpp" $, 2637 $, "void foo(int x)\n{\n    int i;\n    if (x)\n        int i;\n    else\n        int i;\n}" $)
2638:
|
2643:
2644: ;
2645: $if $(@expr1073744223 $!@expr1073744224 $assertEquals $(@expr1073744225 "cppcheck-2.8/test/testunusedvar.cpp" $, 2645 $, "[test.cpp:3]: (style) Unused variable: i\n[test.cpp:5]: (style) Unused variable: i\n[test.cpp:7]: (style) Unused variable: i\n" $, errout@var100 .@expr2396 str (@expr2397 ) $) $) { $return
2646:
2647: ; }
2648:
2649: $functionVariableUsage_ $(@expr1073744228 "cppcheck-2.8/test/testunusedvar.cpp" $, 2649 $, "void foo(int x)\n{\n    int i;\n    if (x) {\n        int i;\n    } else {\n        int i = 0;\n    }\n}" $)
2650:
|
2656:
2657: ;
2658: $if $(@expr1073744229 $!@expr1073744230 $assertEquals $(@expr1073744231 "cppcheck-2.8/test/testunusedvar.cpp" $, 2658 $, "[test.cpp:7]: (style) Variable 'i' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: i\n[test.cpp:5]: (style) Unused variable: i\n" $, errout@var100 .@expr2396 str (@expr2397 ) $) $) { $return
2659:
2660: ; }
2661:
2662: $functionVariableUsage_ $(@expr1073744234 "cppcheck-2.8/test/testunusedvar.cpp" $, 2662 $, "void foo(int x)\n{\n    int i;\n    if (x) {\n        int i;\n    } else {\n        int i;\n    }\n    i = 1;\n}" $)
2663:
|
2670:
2671: ;
2672: $if $(@expr1073744235 $!@expr1073744236 $assertEquals $(@expr1073744237 "cppcheck-2.8/test/testunusedvar.cpp" $, 2672 $, "[test.cpp:9]: (style) Variable 'i' is assigned a value that is never used.\n[test.cpp:5]: (style) Unused variable: i\n[test.cpp:7]: (style) Unused variable: i\n" $, errout@var100 .@expr2396 str (@expr2397 ) $) $) { $return
2673:
2674: ; }
2675: }
2676:
2677: void localvar11 ( ) {
2678: $functionVariableUsage_ $(@expr1073744240 "cppcheck-2.8/test/testunusedvar.cpp" $, 2678 $, "void foo(int x)\n{\n    int a = 0;\n    if (x == 1)\n    {\n        a = 123;\n        return;\n    }\n    x = a;\n}" $)
2679:
|
2686:
2687: ;
2688: $if $(@expr1073744241 $!@expr1073744242 $assertEquals $(@expr1073744243 "cppcheck-2.8/test/testunusedvar.cpp" $, 2688 $, "[test.cpp:6]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:9]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr2420 str (@expr2421 ) $) $) { $return
2689: ; }
2690:
2691:
2692:
2693: $functionVariableUsage_ $(@expr1073744246 "cppcheck-2.8/test/testunusedvar.cpp" $, 2693 $, "void foo(int x)\n{\n    int a = 0;\n    if (x == 1)\n        a = 123;\n    else if (x == 2)\n        a = 456;\n    else\n        return;\n    x = a;\n}" $)
2694:
|
2702:
2703: ;
2704: $if $(@expr1073744247 $!@expr1073744248 $assertEquals $(@expr1073744249 "cppcheck-2.8/test/testunusedvar.cpp" $, 2704 $, "[test.cpp:10]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr2420 str (@expr2421 ) $) $) { $return ; }
2705: }
2706:
2707: void localvar12 ( ) {
2708:
2709: $functionVariableUsage_ $(@expr1073744252 "cppcheck-2.8/test/testunusedvar.cpp" $, 2709 $, "void foo()\n{\n    int a, b, c, d, e, f;\n    a = b = c = d = e = f = 15;\n}" $)
2710:
2711:
2712:
2713: ;
2714: $if $(@expr1073744253 $!@expr1073744254 $assertEquals $(@expr1073744255 "cppcheck-2.8/test/testunusedvar.cpp" $, 2714 $, "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'e' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'f' is assigned a value that is never used.\n" $, errout@var100 .@expr2432 str (@expr2433 ) $) $) { $return
2715:
|
2720:
2721: ; }
2722:
2723: $functionVariableUsage_ $(@expr1073744258 "cppcheck-2.8/test/testunusedvar.cpp" $, 2723 $, "void foo()\n{\n    int a, b, c = 0;\n    a = b = c;\n\n}" $)
2724:
|
2727:
2728: ;
2729:
2730: $todoAssertEquals $(@expr1073744259 "cppcheck-2.8/test/testunusedvar.cpp" $, 2730 $, "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'c' is assigned a value that is never used.\n" $, "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n" $, errout@var100 .@expr2432 str (@expr2433 ) $)
2731:
|
2736:
2737: ;
2738: }
2739:
2740: void localvar13 ( ) {
2741:
2742: $functionVariableUsage_ $(@expr1073744262 "cppcheck-2.8/test/testunusedvar.cpp" $, 2742 $, "void foo( OBJECT *obj )\n{\n    int x;\n    x = obj->ySize / 8;\n}" $)
2743:
2744:
2745:
2746: ;
2747: $if $(@expr1073744263 $!@expr1073744264 $assertEquals $(@expr1073744265 "cppcheck-2.8/test/testunusedvar.cpp" $, 2747 $, "[test.cpp:4]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr1073744266 str (@expr1073744267 ) $) $) { $return ; }
2748: }
2749:
2750: void localvar14 ( ) {
2751:
2752: $functionVariableUsage_ $(@expr1073744268 "cppcheck-2.8/test/testunusedvar.cpp" $, 2752 $, "void foo()\n{\n    int a[10];\n}" $)
2753:
2754:
2755: ;
2756: $if $(@expr1073744269 $!@expr1073744270 $assertEquals $(@expr1073744271 "cppcheck-2.8/test/testunusedvar.cpp" $, 2756 $, "[test.cpp:3]: (style) Unused variable: a\n" $, errout@var100 .@expr1073744272 str (@expr1073744273 ) $) $) { $return ; }
2757: }
2758:
2759: void localvar15 ( ) {
2760: $functionVariableUsage_ $(@expr1073744274 "cppcheck-2.8/test/testunusedvar.cpp" $, 2760 $, "int foo()\n{\n    int a = 5;\n    int b[a];\n    b[0] = 0;\n    return b[0];\n}" $)
2761:
|
2765:
2766: ;
2767: $if $(@expr1073744275 $!@expr1073744276 $assertEquals $(@expr1073744277 "cppcheck-2.8/test/testunusedvar.cpp" $, 2767 $, "" $, errout@var100 .@expr2454 str (@expr2455 ) $) $) { $return ; }
2768:
2769: $functionVariableUsage_ $(@expr1073744280 "cppcheck-2.8/test/testunusedvar.cpp" $, 2769 $, "int foo()\n{\n    int a = 5;\n    int * b[a];\n    b[0] = &c;\n    return *b[0];\n}" $)
2770:
|
2774:
2775: ;
2776: $if $(@expr1073744281 $!@expr1073744282 $assertEquals $(@expr1073744283 "cppcheck-2.8/test/testunusedvar.cpp" $, 2776 $, "" $, errout@var100 .@expr2454 str (@expr2455 ) $) $) { $return ; }
2777:
2778: $functionVariableUsage_ $(@expr1073744286 "cppcheck-2.8/test/testunusedvar.cpp" $, 2778 $, "int * foo()\n{\n    int a = 5;\n    const int * b[a];\n    b[0] = &c;\n    return b[0];\n}" $)
2779:
|
2783:
2784: ;
2785: $if $(@expr1073744287 $!@expr1073744288 $assertEquals $(@expr1073744289 "cppcheck-2.8/test/testunusedvar.cpp" $, 2785 $, "" $, errout@var100 .@expr2454 str (@expr2455 ) $) $) { $return ; }
2786:
2787: $functionVariableUsage_ $(@expr1073744292 "cppcheck-2.8/test/testunusedvar.cpp" $, 2787 $, "struct B * foo()\n{\n    int a = 5;\n    struct B * b[a];\n    b[0] = &c;\n    return b[0];\n}" $)
2788:
|
2792:
2793: ;
2794: $if $(@expr1073744293 $!@expr1073744294 $assertEquals $(@expr1073744295 "cppcheck-2.8/test/testunusedvar.cpp" $, 2794 $, "" $, errout@var100 .@expr2454 str (@expr2455 ) $) $) { $return ; }
2795:
2796: $functionVariableUsage_ $(@expr1073744298 "cppcheck-2.8/test/testunusedvar.cpp" $, 2796 $, "const struct B * foo()\n{\n    int a = 5;\n    const struct B * b[a];\n    b[0] = &c;\n    return b[0];\n}" $)
2797:
|
2801:
2802: ;
2803: $if $(@expr1073744299 $!@expr1073744300 $assertEquals $(@expr1073744301 "cppcheck-2.8/test/testunusedvar.cpp" $, 2803 $, "" $, errout@var100 .@expr2454 str (@expr2455 ) $) $) { $return ; }
2804: }
2805:
2806: void localvar16 ( ) {
2807: $functionVariableUsage_ $(@expr1073744304 "cppcheck-2.8/test/testunusedvar.cpp" $, 2807 $, "void foo()\n{\n    char buf[5];\n    char *ptr = buf;\n    *(ptr++) = 0;\n}" $)
2808:
|
2811:
2812: ;
2813: $todoAssertEquals $(@expr1073744305 "cppcheck-2.8/test/testunusedvar.cpp" $, 2813 $, "[test.cpp:5]: (style) Variable 'buf' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr2482 str (@expr2483 ) $) ;
2814:
2815:
2816: $functionVariableUsage_ $(@expr1073744308 "cppcheck-2.8/test/testunusedvar.cpp" $, 2816 $, "void foo() {\n    char buf[5];\n    char *data[2];\n    data[0] = buf;\n    do_something(data);\n}" $)
2817:
|
2820:
2821: ;
2822: $if $(@expr1073744309 $!@expr1073744310 $assertEquals $(@expr1073744311 "cppcheck-2.8/test/testunusedvar.cpp" $, 2822 $, "" $, errout@var100 .@expr2482 str (@expr2483 ) $) $) { $return ; }
2823:
2824: $functionVariableUsage_ $(@expr1073744314 "cppcheck-2.8/test/testunusedvar.cpp" $, 2824 $, "void foo() {\n    char buf1[5];\n    char buf2[5];\n    char *data[2];\n    data[0] = buf1;\n    data[1] = buf2;\n    do_something(data);\n}" $)
2825:
|
2830:
2831: ;
2832: $if $(@expr1073744315 $!@expr1073744316 $assertEquals $(@expr1073744317 "cppcheck-2.8/test/testunusedvar.cpp" $, 2832 $, "" $, errout@var100 .@expr2482 str (@expr2483 ) $) $) { $return ; }
2833: }
2834:
2835: void localvar17 ( ) {
2836:
2837:
2838: $functionVariableUsage_ $(@expr1073744320 "cppcheck-2.8/test/testunusedvar.cpp" $, 2838 $, "void foo()\n{\n    struct DATA *data = DATA;\n    char *k = data->req;\n    char *ptr;\n    char *line_start;\n    ptr = data->buffer;\n    line_start = ptr;\n    data->info = k;\n    line_start = ptr;\n}" $)
2839:
|
2847:
2848: ;
2849: $if $(@expr1073744321 $!@expr1073744322 $assertEquals $(@expr1073744323 "cppcheck-2.8/test/testunusedvar.cpp" $, 2849 $, "[test.cpp:10]: (style) Variable 'line_start' is assigned a value that is never used.\n" $, errout@var100 .@expr1073744324 str (@expr1073744325 ) $) $) { $return ; }
2850:
2851: }
2852:
2853: void localvar18 ( ) {
2854: $functionVariableUsage_ $(@expr1073744326 "cppcheck-2.8/test/testunusedvar.cpp" $, 2854 $, "A::A(int iValue) {\n    UserDefinedException* pe = new UserDefinedException();\n    throw pe;\n}" $)
2855:
2856:
2857: ;
2858: $if $(@expr1073744327 $!@expr1073744328 $assertEquals $(@expr1073744329 "cppcheck-2.8/test/testunusedvar.cpp" $, 2858 $, "" $, errout@var100 .@expr1073744330 str (@expr1073744331 ) $) $) { $return ; }
2859: }
2860:
2861: void localvar19 ( ) {
2862: $functionVariableUsage_ $(@expr1073744332 "cppcheck-2.8/test/testunusedvar.cpp" $, 2862 $, "void foo() {\n    int a[10];\n    int c;\n    c = *(a);\n}" $)
2863:
2864:
2865:
2866: ;
2867: $if $(@expr1073744333 $!@expr1073744334 $assertEquals $(@expr1073744335 "cppcheck-2.8/test/testunusedvar.cpp" $, 2867 $, "[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\n[test.cpp:2]: (style) Variable 'a' is not assigned a value.\n" $, errout@var100 .@expr1073744336 str (@expr1073744337 ) $) $) { $return
2868: ; }
2869: }
2870:
2871: void localvar20 ( ) {
2872: $functionVariableUsage_ $(@expr1073744338 "cppcheck-2.8/test/testunusedvar.cpp" $, 2872 $, "void foo()\n{\n    char c1 = 'c';\n    char c2[] = { c1 };\n    a(c2);\n}" $)
2873:
|
2876:
2877: ;
2878: $if $(@expr1073744339 $!@expr1073744340 $assertEquals $(@expr1073744341 "cppcheck-2.8/test/testunusedvar.cpp" $, 2878 $, "" $, errout@var100 .@expr1073744342 str (@expr1073744343 ) $) $) { $return ; }
2879: }
2880:
2881: void localvar21 ( ) {
2882: $functionVariableUsage_ $(@expr1073744344 "cppcheck-2.8/test/testunusedvar.cpp" $, 2882 $, "void foo()\n{\n    char buffer[1024];\n    bar((void *)buffer);\n}" $)
2883:
2884:
2885:
2886: ;
2887: $if $(@expr1073744345 $!@expr1073744346 $assertEquals $(@expr1073744347 "cppcheck-2.8/test/testunusedvar.cpp" $, 2887 $, "" $, errout@var100 .@expr1073744348 str (@expr1073744349 ) $) $) { $return ; }
2888: }
2889:
2890: void localvar22 ( ) {
2891: $functionVariableUsage_ $(@expr1073744350 "cppcheck-2.8/test/testunusedvar.cpp" $, 2891 $, "int foo(int u, int v)\n{\n    int h, i;\n    h = 0 ? u : v;\n    i = 1 ? u : v;\n    return h + i;\n}" $)
2892:
|
2896:
2897: ;
2898: $if $(@expr1073744351 $!@expr1073744352 $assertEquals $(@expr1073744353 "cppcheck-2.8/test/testunusedvar.cpp" $, 2898 $, "" $, errout@var100 .@expr1073744354 str (@expr1073744355 ) $) $) { $return ; }
2899: }
2900:
2901: void localvar23 ( ) {
2902: $functionVariableUsage_ $(@expr1073744356 "cppcheck-2.8/test/testunusedvar.cpp" $, 2902 $, "int foo(int c)\n{\n    int a;\n    int b[10];\n    a = b[c] = 0;\n    return a;\n}" $)
2903:
|
2907:
2908: ;
2909: $if $(@expr1073744357 $!@expr1073744358 $assertEquals $(@expr1073744359 "cppcheck-2.8/test/testunusedvar.cpp" $, 2909 $, "[test.cpp:5]: (style) Variable 'b[c]' is assigned a value that is never used.\n" $, errout@var100 .@expr1073744360 str (@expr1073744361 ) $) $) { $return ; }
2910: }
2911:
2912: void localvar24 ( ) {
2913: $functionVariableUsage_ $(@expr1073744362 "cppcheck-2.8/test/testunusedvar.cpp" $, 2913 $, "class MyException\n{\n    virtual void raise() const\n    {\n        throw *this;\n    }\n}" $)
2914:
|
2918:
2919: ;
2920: $if $(@expr1073744363 $!@expr1073744364 $assertEquals $(@expr1073744365 "cppcheck-2.8/test/testunusedvar.cpp" $, 2920 $, "" $, errout@var100 .@expr1073744366 str (@expr1073744367 ) $) $) { $return ; }
2921: }
2922:
2923: void localvar25 ( ) {
2924: $functionVariableUsage_ $(@expr1073744368 "cppcheck-2.8/test/testunusedvar.cpp" $, 2924 $, "int main() {\n    int ppos = 1;\n    int pneg = 0;\n    const char*edge = ppos? \" +\" : pneg ? \" -\" : \"\";\n    printf(\"This should be a '+' -> %s\\n\", edge);\n    return 0;\n}" $)
2925:
|
2929:
2930: ;
2931: $if $(@expr1073744369 $!@expr1073744370 $assertEquals $(@expr1073744371 "cppcheck-2.8/test/testunusedvar.cpp" $, 2931 $, "" $, errout@var100 .@expr1073744372 str (@expr1073744373 ) $) $) { $return ; }
2932: }
2933:
2934: void localvar26 ( ) {
2935: $functionVariableUsage_ $(@expr1073744374 "cppcheck-2.8/test/testunusedvar.cpp" $, 2935 $, "int main() {\n    const Fred &fred = getfred();\n    int *p = fred.x();\n    *p = 0;}" $)
2936:
2937:
2938:
2939: ;
2940: $if $(@expr1073744375 $!@expr1073744376 $assertEquals $(@expr1073744377 "cppcheck-2.8/test/testunusedvar.cpp" $, 2940 $, "" $, errout@var100 .@expr1073744378 str (@expr1073744379 ) $) $) { $return ; }
2941: }
2942:
2943: void localvar27 ( ) {
2944: $functionVariableUsage_ $(@expr1073744380 "cppcheck-2.8/test/testunusedvar.cpp" $, 2944 $, "void f(struct s *ptr) {\n    int param = 1;\n    ptr->param = param++;\n}" $)
2945:
2946:
2947: ;
2948: $if $(@expr1073744381 $!@expr1073744382 $assertEquals $(@expr1073744383 "cppcheck-2.8/test/testunusedvar.cpp" $, 2948 $, "[test.cpp:3]: (style) Variable 'param' is assigned a value that is never used.\n" $, errout@var100 .@expr1073744384 str (@expr1073744385 ) $) $) { $return ; }
2949: }
2950:
2951: void localvar28 ( ) {
2952: $functionVariableUsage_ $(@expr1073744386 "cppcheck-2.8/test/testunusedvar.cpp" $, 2952 $, "void f(char* buffer, int value) {\n    char* pos = buffer;\n    int size = value;\n    *(int*)pos = size;\n}" $)
2953:
2954:
2955:
2956: ;
2957: $if $(@expr1073744387 $!@expr1073744388 $assertEquals $(@expr1073744389 "cppcheck-2.8/test/testunusedvar.cpp" $, 2957 $, "" $, errout@var100 .@expr1073744390 str (@expr1073744391 ) $) $) { $return ; }
2958: }
2959:
2960: void localvar29 ( ) {
2961: $functionVariableUsage_ $(@expr1073744392 "cppcheck-2.8/test/testunusedvar.cpp" $, 2961 $, "void f() {\n    float s_ranges[] = { 0, 256 };\n    float* ranges[] = { s_ranges };\n    cout << ranges[0][0];\n}" $)
2962:
2963:
2964:
2965: ;
2966: $if $(@expr1073744393 $!@expr1073744394 $assertEquals $(@expr1073744395 "cppcheck-2.8/test/testunusedvar.cpp" $, 2966 $, "" $, errout@var100 .@expr1073744396 str (@expr1073744397 ) $) $) { $return ; }
2967: }
2968:
2969: void localvar30 ( ) {
2970: $functionVariableUsage_ $(@expr1073744398 "cppcheck-2.8/test/testunusedvar.cpp" $, 2970 $, "void f() {\n    Engine *engine = e;\n    x->engine = engine->clone();\n}" $)
2971:
2972:
2973: ;
2974: $if $(@expr1073744399 $!@expr1073744400 $assertEquals $(@expr1073744401 "cppcheck-2.8/test/testunusedvar.cpp" $, 2974 $, "" $, errout@var100 .@expr1073744402 str (@expr1073744403 ) $) $) { $return ; }
2975: }
2976:
2977: void localvar31 ( ) {
2978: $functionVariableUsage_ $(@expr1073744404 "cppcheck-2.8/test/testunusedvar.cpp" $, 2978 $, "void f() {\n    int x = 0;\n    a.x = x - b;\n}" $)
2979:
2980:
2981: ;
2982: $if $(@expr1073744405 $!@expr1073744406 $assertEquals $(@expr1073744407 "cppcheck-2.8/test/testunusedvar.cpp" $, 2982 $, "" $, errout@var100 .@expr1073744408 str (@expr1073744409 ) $) $) { $return ; }
2983: }
2984:
2985: void localvar32 ( ) {
2986:
2987: $functionVariableUsage_ $(@expr1073744410 "cppcheck-2.8/test/testunusedvar.cpp" $, 2987 $, "void f() {\n    int x;\n    fstream &f = getfile();\n    f >> x;\n}" $)
2988:
2989:
2990:
2991: ;
2992: $if $(@expr1073744411 $!@expr1073744412 $assertEquals $(@expr1073744413 "cppcheck-2.8/test/testunusedvar.cpp" $, 2992 $, "" $, errout@var100 .@expr2590 str (@expr2591 ) $) $) { $return ; }
2993:
2994:
2995: $functionVariableUsage_ $(@expr1073744416 "cppcheck-2.8/test/testunusedvar.cpp" $, 2995 $, "void f(int x) {\n    C c;\n    if (c >>= x) {}\n}" $)
2996:
2997:
2998: ;
2999: $if $(@expr1073744417 $!@expr1073744418 $assertEquals $(@expr1073744419 "cppcheck-2.8/test/testunusedvar.cpp" $, 2999 $, "[test.cpp:3]: (information) --check-library: Provide <type-checks><unusedvar> configuration for C\n" $, errout@var100 .@expr2590 str (@expr2591 ) $) $) { $return ; }
3000:
3001: $functionVariableUsage_ $(@expr1073744422 "cppcheck-2.8/test/testunusedvar.cpp" $, 3001 $, "void f(int x) {\n    C c;\n    if (c >>= x) {}\n}" , "test.c" $)
3002:
3003:
3004: ;
3005: $if $(@expr1073744423 $!@expr1073744424 $assertEquals $(@expr1073744425 "cppcheck-2.8/test/testunusedvar.cpp" $, 3005 $, "[test.c:3]: (style) Variable 'c' is assigned a value that is never used.\n" $, errout@var100 .@expr2590 str (@expr2591 ) $) $) { $return ; }
3006:
3007: $functionVariableUsage_ $(@expr1073744428 "cppcheck-2.8/test/testunusedvar.cpp" $, 3007 $, "void f() {\n    int x, y;\n    std::cin >> x >> y;\n}" $)
3008:
3009:
3010: ;
3011: $if $(@expr1073744429 $!@expr1073744430 $assertEquals $(@expr1073744431 "cppcheck-2.8/test/testunusedvar.cpp" $, 3011 $, "" $, errout@var100 .@expr2590 str (@expr2591 ) $) $) { $return ; }
3012:
3013:
3014: $functionVariableUsage_ $(@expr1073744434 "cppcheck-2.8/test/testunusedvar.cpp" $, 3014 $, "void f(C c) {\n  int x;\n  c & x;\n}" $)
3015:
3016:
3017: ;
3018: $if $(@expr1073744435 $!@expr1073744436 $assertEquals $(@expr1073744437 "cppcheck-2.8/test/testunusedvar.cpp" $, 3018 $, "" $, errout@var100 .@expr2590 str (@expr2591 ) $) $) { $return ; }
3019: }
3020:
3021: void localvar33 ( ) {
3022: $functionVariableUsage_ $(@expr1073744440 "cppcheck-2.8/test/testunusedvar.cpp" $, 3022 $, "void f() {\n    Abc* abc = getabc();\n    while (0 != (abc = abc->next())) {\n        ++nOldNum;\n    }\n}" $)
3023:
|
3026:
3027: ;
3028: $if $(@expr1073744441 $!@expr1073744442 $assertEquals $(@expr1073744443 "cppcheck-2.8/test/testunusedvar.cpp" $, 3028 $, "" $, errout@var100 .@expr1073744444 str (@expr1073744445 ) $) $) { $return ; }
3029: }
3030:
3031: void localvar34 ( ) {
3032: $functionVariableUsage_ $(@expr1073744446 "cppcheck-2.8/test/testunusedvar.cpp" $, 3032 $, "void f() {\n    int i = 0;\n    if (false) {\n    } else {\n        j -= i;\n    }\n}" $)
3033:
|
3037:
3038: ;
3039: $if $(@expr1073744447 $!@expr1073744448 $assertEquals $(@expr1073744449 "cppcheck-2.8/test/testunusedvar.cpp" $, 3039 $, "" $, errout@var100 .@expr1073744450 str (@expr1073744451 ) $) $) { $return ; }
3040: }
3041:
3042: void localvar35 ( ) {
3043: $functionVariableUsage_ $(@expr1073744452 "cppcheck-2.8/test/testunusedvar.cpp" $, 3043 $, "void f() {\n    int a, b;\n    x(1,a,b);\n}" $)
3044:
3045:
3046: ;
3047: $if $(@expr1073744453 $!@expr1073744454 $assertEquals $(@expr1073744455 "cppcheck-2.8/test/testunusedvar.cpp" $, 3047 $, "" $, errout@var100 .@expr1073744456 str (@expr1073744457 ) $) $) { $return ; }
3048: }
3049:
3050: void localvar36 ( ) {
3051: $functionVariableUsage_ $(@expr1073744458 "cppcheck-2.8/test/testunusedvar.cpp" $, 3051 $, "int f() {\n    int a, b;\n    a = 2 * (b = 3);\n    return a + b;\n}" $)
3052:
3053:
3054:
3055: ;
3056: $if $(@expr1073744459 $!@expr1073744460 $assertEquals $(@expr1073744461 "cppcheck-2.8/test/testunusedvar.cpp" $, 3056 $, "" $, errout@var100 .@expr2638 str (@expr2639 ) $) $) { $return ; }
3057:
3058: $functionVariableUsage_ $(@expr1073744464 "cppcheck-2.8/test/testunusedvar.cpp" $, 3058 $, "int f() {\n    int a,b;\n    x(a, b=2);\n}" $)
3059:
3060:
3061: ;
3062: $if $(@expr1073744465 $!@expr1073744466 $assertEquals $(@expr1073744467 "cppcheck-2.8/test/testunusedvar.cpp" $, 3062 $, "" $, errout@var100 .@expr2638 str (@expr2639 ) $) $) { $return ; }
3063:
3064: $functionVariableUsage_ $(@expr1073744470 "cppcheck-2.8/test/testunusedvar.cpp" $, 3064 $, "int foo() {\n    int a = 0;\n    bar(a=a+2);\n}" $)
3065:
3066:
3067: ;
3068: $if $(@expr1073744471 $!@expr1073744472 $assertEquals $(@expr1073744473 "cppcheck-2.8/test/testunusedvar.cpp" $, 3068 $, "" $, errout@var100 .@expr2638 str (@expr2639 ) $) $) { $return ; }
3069:
3070: $functionVariableUsage_ $(@expr1073744476 "cppcheck-2.8/test/testunusedvar.cpp" $, 3070 $, "int foo() {\n    int a = 0;\n    bar(a=2);\n}" $)
3071:
3072:
3073: ;
3074: $todoAssertEquals $(@expr1073744477 "cppcheck-2.8/test/testunusedvar.cpp" $, 3074 $, "error" $, "" $, errout@var100 .@expr2638 str (@expr2639 ) $) ;
3075:
3076: $functionVariableUsage_ $(@expr1073744480 "cppcheck-2.8/test/testunusedvar.cpp" $, 3076 $, "void bar(int);\nint foo() {\n    int a = 0;\n    bar(a=a+2);\n}" $)
3077:
3078:
3079:
3080: ;
3081: $todoAssertEquals $(@expr1073744481 "cppcheck-2.8/test/testunusedvar.cpp" $, 3081 $, "error" $, "" $, errout@var100 .@expr2638 str (@expr2639 ) $) ;
3082: }
3083:
3084: void localvar37 ( ) {
3085: $functionVariableUsage_ $(@expr1073744484 "cppcheck-2.8/test/testunusedvar.cpp" $, 3085 $, "void f() {\n    int a = 2;\n    ints.at(a) = 0;\n}" $)
3086:
3087:
3088: ;
3089: $if $(@expr1073744485 $!@expr1073744486 $assertEquals $(@expr1073744487 "cppcheck-2.8/test/testunusedvar.cpp" $, 3089 $, "" $, errout@var100 .@expr1073744488 str (@expr1073744489 ) $) $) { $return ; }
3090: }
3091:
3092: void localvar38 ( ) {
3093: $functionVariableUsage_ $(@expr1073744490 "cppcheck-2.8/test/testunusedvar.cpp" $, 3093 $, "std::string f() {\n    const char code[] = \"foo\";\n    const std::string s1(sizeof_(code));\n    const std::string s2 = sizeof_(code);\n    return(s1+s2);\n}" $)
3094:
|
3097:
3098: ;
3099: $if $(@expr1073744491 $!@expr1073744492 $assertEquals $(@expr1073744493 "cppcheck-2.8/test/testunusedvar.cpp" $, 3099 $, "" $, errout@var100 .@expr1073744494 str (@expr1073744495 ) $) $) { $return ; }
3100: }
3101:
3102: void localvar39 ( ) {
3103: $functionVariableUsage_ $(@expr1073744496 "cppcheck-2.8/test/testunusedvar.cpp" $, 3103 $, "void f() {\n    int a = 1;\n    foo(x*a);\n}" $)
3104:
3105:
3106: ;
3107: $if $(@expr1073744497 $!@expr1073744498 $assertEquals $(@expr1073744499 "cppcheck-2.8/test/testunusedvar.cpp" $, 3107 $, "" $, errout@var100 .@expr1073744500 str (@expr1073744501 ) $) $) { $return ; }
3108: }
3109:
3110: void localvar40 ( ) {
3111: $functionVariableUsage_ $(@expr1073744502 "cppcheck-2.8/test/testunusedvar.cpp" $, 3111 $, "int f() {\n    int a = 1;\n    return x & a;\n}" $)
3112:
3113:
3114: ;
3115: $if $(@expr1073744503 $!@expr1073744504 $assertEquals $(@expr1073744505 "cppcheck-2.8/test/testunusedvar.cpp" $, 3115 $, "" $, errout@var100 .@expr1073744506 str (@expr1073744507 ) $) $) { $return ; }
3116: }
3117:
3118: void localvar41 ( ) {
3119:
3120: $functionVariableUsage_ $(@expr1073744508 "cppcheck-2.8/test/testunusedvar.cpp" $, 3120 $, "int f() {\n    int x = 1;\n    int y = FOO::VALUE * x;\n    return y;\n}" $)
3121:
3122:
3123:
3124: ;
3125: $if $(@expr1073744509 $!@expr1073744510 $assertEquals $(@expr1073744511 "cppcheck-2.8/test/testunusedvar.cpp" $, 3125 $, "" $, errout@var100 .@expr1073744512 str (@expr1073744513 ) $) $) { $return ; }
3126: }
3127:
3128: void localvar42 ( ) {
3129: $functionVariableUsage_ $(@expr1073744514 "cppcheck-2.8/test/testunusedvar.cpp" $, 3129 $, "float g_float = 1;\nextern void SomeTestFunc(float);\nvoid MyFuncError()\n{\n    const float floatA = 2.2f;\n    const float floatTot = g_float * floatA;\n    SomeTestFunc(floatTot);\n}" $)
3130:
|
3135:
3136: ;
3137: $if $(@expr1073744515 $!@expr1073744516 $assertEquals $(@expr1073744517 "cppcheck-2.8/test/testunusedvar.cpp" $, 3137 $, "" $, errout@var100 .@expr2694 str (@expr2695 ) $) $) { $return ; }
3138:
3139: $functionVariableUsage_ $(@expr1073744520 "cppcheck-2.8/test/testunusedvar.cpp" $, 3139 $, "float g_float = 1;\nextern void SomeTestFunc(float);\nvoid MyFuncNoError()\n{\n    const float floatB = 2.2f;\n    const float floatTot = floatB * g_float;\n    SomeTestFunc(floatTot);\n}" $)
3140:
|
3145:
3146: ;
3147: $if $(@expr1073744521 $!@expr1073744522 $assertEquals $(@expr1073744523 "cppcheck-2.8/test/testunusedvar.cpp" $, 3147 $, "" $, errout@var100 .@expr2694 str (@expr2695 ) $) $) { $return ; }
3148:
3149: $functionVariableUsage_ $(@expr1073744526 "cppcheck-2.8/test/testunusedvar.cpp" $, 3149 $, "float g_float = 1;\nextern void SomeTestFunc(float);\nvoid MyFuncNoError2()\n{\n    const float floatC = 2.2f;\n    float floatTot = g_float * floatC;\n    SomeTestFunc(floatTot);\n}" $)
3150:
|
3155:
3156: ;
3157: $if $(@expr1073744527 $!@expr1073744528 $assertEquals $(@expr1073744529 "cppcheck-2.8/test/testunusedvar.cpp" $, 3157 $, "" $, errout@var100 .@expr2694 str (@expr2695 ) $) $) { $return ; }
3158: }
3159:
3160: void localvar43 ( ) {
3161: $functionVariableUsage_ $(@expr1073744532 "cppcheck-2.8/test/testunusedvar.cpp" $, 3161 $, "void bar()\n{\n    int * piArray = NULL;\n    unsigned int uiArrayLength = 2048;\n    unsigned int uiIndex;\n\n    try\n    {\n        piArray = new int[uiArrayLength];\n    }\n    catch (...)\n    {\n        SOME_MACRO\n        delete [] piArray;\n        return;\n    }\n    for (uiIndex = 0; uiIndex < uiArrayLength; uiIndex++)\n    {\n        piArray[uiIndex] = -1234;\n    }\n    delete [] piArray;\n}" $)
3162:
|
3181:
3182: ;
3183: $if $(@expr1073744533 $!@expr1073744534 $assertEquals $(@expr1073744535 "cppcheck-2.8/test/testunusedvar.cpp" $, 3183 $, "" $, errout@var100 .@expr1073744536 str (@expr1073744537 ) $) $) { $return ; }
3184: }
3185:
3186: void localvar44 ( ) {
3187: $functionVariableUsage_ $(@expr1073744538 "cppcheck-2.8/test/testunusedvar.cpp" $, 3187 $, "void func() {\n    int *sp_mem[2] = { global1, global2 };\n    sp_mem[0][3] = 123;\n}" $)
3188:
3189:
3190: ;
3191: $if $(@expr1073744539 $!@expr1073744540 $assertEquals $(@expr1073744541 "cppcheck-2.8/test/testunusedvar.cpp" $, 3191 $, "" $, errout@var100 .@expr1073744542 str (@expr1073744543 ) $) $) { $return ; }
3192: }
3193:
3194: void localvar45 ( ) {
3195: $functionVariableUsage_ $(@expr1073744544 "cppcheck-2.8/test/testunusedvar.cpp" $, 3195 $, "int func() {\n    int a = 123;\n    int b = (short)-a;;\n    return b;\n}" $)
3196:
3197:
3198:
3199: ;
3200: $if $(@expr1073744545 $!@expr1073744546 $assertEquals $(@expr1073744547 "cppcheck-2.8/test/testunusedvar.cpp" $, 3200 $, "" $, errout@var100 .@expr1073744548 str (@expr1073744549 ) $) $) { $return ; }
3201: }
3202:
3203: void localvar46 ( ) {
3204: $functionVariableUsage_ $(@expr1073744550 "cppcheck-2.8/test/testunusedvar.cpp" $, 3204 $, "int func() {\n    int i = 0;\n    int j{i};\n    return j;\n}" $)
3205:
3206:
3207:
3208: ;
3209: $if $(@expr1073744551 $!@expr1073744552 $assertEquals $(@expr1073744553 "cppcheck-2.8/test/testunusedvar.cpp" $, 3209 $, "" $, errout@var100 .@expr2730 str (@expr2731 ) $) $) { $return ; }
3210:
3211: $functionVariableUsage_ $(@expr1073744556 "cppcheck-2.8/test/testunusedvar.cpp" $, 3211 $, "void f(bool b, bool c, double& r) {\n    double d{};\n    if (b) {\n      d = g();\n      r += d;\n    }\n    if (c) {\n      d = h();\n      r += d;\n    }\n}\n" $)
3212:
|
3220:
3221: ;
3222: $if $(@expr1073744557 $!@expr1073744558 $assertEquals $(@expr1073744559 "cppcheck-2.8/test/testunusedvar.cpp" $, 3222 $, "" $, errout@var100 .@expr2730 str (@expr2731 ) $) $) { $return ; }
3223:
3224: $functionVariableUsage_ $(@expr1073744562 "cppcheck-2.8/test/testunusedvar.cpp" $, 3224 $, "int func() {\n    std::mutex m;\n    std::unique_lock<std::mutex> l{ m };\n    return 0;\n}" $)
3225:
3226:
3227:
3228: ;
3229: $if $(@expr1073744563 $!@expr1073744564 $assertEquals $(@expr1073744565 "cppcheck-2.8/test/testunusedvar.cpp" $, 3229 $, "" $, errout@var100 .@expr2730 str (@expr2731 ) $) $) { $return ; }
3230:
3231: $functionVariableUsage_ $(@expr1073744568 "cppcheck-2.8/test/testunusedvar.cpp" $, 3231 $, "int func() {\n    std::shared_lock<std::shared_timed_mutex> lock( m );\n}" $)
3232:
3233: ;
3234: $if $(@expr1073744569 $!@expr1073744570 $assertEquals $(@expr1073744571 "cppcheck-2.8/test/testunusedvar.cpp" $, 3234 $, "" $, errout@var100 .@expr2730 str (@expr2731 ) $) $) { $return ; }
3235:
3236: $functionVariableUsage_ $(@expr1073744574 "cppcheck-2.8/test/testunusedvar.cpp" $, 3236 $, "void f() {\n    std::shared_lock lock = GetLock();\n}" $)
3237:
3238: ;
3239: $if $(@expr1073744575 $!@expr1073744576 $assertEquals $(@expr1073744577 "cppcheck-2.8/test/testunusedvar.cpp" $, 3239 $, "" $, errout@var100 .@expr2730 str (@expr2731 ) $) $) { $return ; }
3240:
3241: $functionVariableUsage_ $(@expr1073744580 "cppcheck-2.8/test/testunusedvar.cpp" $, 3241 $, "void f() {\n    auto&& g = std::lock_guard<std::mutex> { mutex };\n}\n" $)
3242:
3243: ;
3244: $todoAssertEquals $(@expr1073744581 "cppcheck-2.8/test/testunusedvar.cpp" $, 3244 $, "" $, "[test.cpp:2]: (style) Variable 'g' is assigned a value that is never used.\n" $, errout@var100 .@expr2730 str (@expr2731 ) $) ;
3245:
3246: $functionVariableUsage_ $(@expr1073744584 "cppcheck-2.8/test/testunusedvar.cpp" $, 3246 $, "void f() {\n    auto a = RAII();\n    auto b { RAII() };\n}\n" $)
3247:
3248:
3249: ;
3250: $if $(@expr1073744585 $!@expr1073744586 $assertEquals $(@expr1073744587 "cppcheck-2.8/test/testunusedvar.cpp" $, 3250 $, "" $, errout@var100 .@expr2730 str (@expr2731 ) $) $) { $return ; }
3251: }
3252:
3253: void localvar47 ( ) {
3254:
3255: $functionVariableUsage_ $(@expr1073744590 "cppcheck-2.8/test/testunusedvar.cpp" $, 3255 $, "void f() {\n    int (SfxUndoManager::*retrieveCount)(bool) const\n        = (flag) ? &SfxUndoManager::foo : &SfxUndoManager::bar;\n}" $)
3256:
3257:
3258: ;
3259: $if $(@expr1073744591 $!@expr1073744592 $assertEquals $(@expr1073744593 "cppcheck-2.8/test/testunusedvar.cpp" $, 3259 $, "[test.cpp:3]: (style) Variable 'retrieveCount' is assigned a value that is never used.\n" $, errout@var100 .@expr1073744594 str (@expr1073744595 ) $) $) { $return ; }
3260:
3261: }
3262:
3263: void localvar48 ( ) {
3264: $functionVariableUsage_ $(@expr1073744596 "cppcheck-2.8/test/testunusedvar.cpp" $, 3264 $, "void foo() {\n  long (*pKoeff)[256] = new long[9][256];\n}" $)
3265:
3266: ;
3267: $if $(@expr1073744597 $!@expr1073744598 $assertEquals $(@expr1073744599 "cppcheck-2.8/test/testunusedvar.cpp" $, 3267 $, "" $, errout@var100 .@expr1073744600 str (@expr1073744601 ) $) $) { $return ; }
3268: }
3269:
3270: void localvar49 ( ) {
3271: $functionVariableUsage_ $(@expr1073744602 "cppcheck-2.8/test/testunusedvar.cpp" $, 3271 $, "class A {\n    public:\n        typedef enum { ID1,ID2,ID3 } Id_t;\n        typedef struct {Id_t id; std::string a; } x_t;\n        std::vector<x_t> m_vec;\n        std::vector<x_t> Get(void);\n        void DoSomething();\n};\nstd::vector<A::x_t> A::Get(void) {\n    return m_vec;\n}\nconst std::string Bar() {\n    return \"x\";\n}\nvoid A::DoSomething(void) {\n    const std::string x = Bar();\n}" $)
3272:
|
3286:
3287: ;
3288: $if $(@expr1073744603 $!@expr1073744604 $assertEquals $(@expr1073744605 "cppcheck-2.8/test/testunusedvar.cpp" $, 3288 $, "[test.cpp:16]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr1073744606 str (@expr1073744607 ) $) $) { $return ; }
3289: }
3290:
3291: void localvar50 ( ) {
3292:
3293: $functionVariableUsage_ $(@expr1073744608 "cppcheck-2.8/test/testunusedvar.cpp" $, 3293 $, "void foo() {\n  char buf1[10];\n  dostuff(cond?buf1:buf2);\n}" $)
3294:
3295:
3296: ;
3297: $if $(@expr1073744609 $!@expr1073744610 $assertEquals $(@expr1073744611 "cppcheck-2.8/test/testunusedvar.cpp" $, 3297 $, "" $, errout@var100 .@expr2788 str (@expr2789 ) $) $) { $return ; }
3298:
3299: $functionVariableUsage_ $(@expr1073744614 "cppcheck-2.8/test/testunusedvar.cpp" $, 3299 $, "void foo() {\n  char buf1[10];\n  dostuff(cond?buf2:buf1);\n}" $)
3300:
3301:
3302: ;
3303: $if $(@expr1073744615 $!@expr1073744616 $assertEquals $(@expr1073744617 "cppcheck-2.8/test/testunusedvar.cpp" $, 3303 $, "" $, errout@var100 .@expr2788 str (@expr2789 ) $) $) { $return ; }
3304:
3305:
3306: $functionVariableUsage_ $(@expr1073744620 "cppcheck-2.8/test/testunusedvar.cpp" $, 3306 $, "void foo(int c) {\n  char buf1[10], buf2[10];\n  char *p = c ? buf1 : buf2;\n  dostuff(p);\n}" $)
3307:
3308:
3309:
3310: ;
3311: $if $(@expr1073744621 $!@expr1073744622 $assertEquals $(@expr1073744623 "cppcheck-2.8/test/testunusedvar.cpp" $, 3311 $, "" $, errout@var100 .@expr2788 str (@expr2789 ) $) $) { $return ; }
3312: }
3313:
3314: void localvar51 ( ) {
3315:
3316: $functionVariableUsage_ $(@expr1073744626 "cppcheck-2.8/test/testunusedvar.cpp" $, 3316 $, "void foo(const Token *var) {\n  const Token *tok = nameToken();\n  tok = tok->next();\n}" $)
3317:
3318:
3319: ;
3320: $if $(@expr1073744627 $!@expr1073744628 $assertEquals $(@expr1073744629 "cppcheck-2.8/test/testunusedvar.cpp" $, 3320 $, "[test.cpp:3]: (style) Variable 'tok' is assigned a value that is never used.\n" $, errout@var100 .@expr2806 str (@expr2807 ) $) $) { $return ; }
3321:
3322: $functionVariableUsage_ $(@expr1073744632 "cppcheck-2.8/test/testunusedvar.cpp" $, 3322 $, "void foo() {\n  int x = 4;\n  x = 15 + x;\n}" $)
3323:
3324:
3325: ;
3326: $if $(@expr1073744633 $!@expr1073744634 $assertEquals $(@expr1073744635 "cppcheck-2.8/test/testunusedvar.cpp" $, 3326 $, "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr2806 str (@expr2807 ) $) $) { $return ; }
3327: }
3328:
3329: void localvar52 ( ) {
3330: $functionVariableUsage_ $(@expr1073744638 "cppcheck-2.8/test/testunusedvar.cpp" $, 3330 $, "void foo() {\n  std::vector<int> data;\n  data[2] = 32;\n  return data;\n}" $)
3331:
3332:
3333:
3334: ;
3335: $if $(@expr1073744639 $!@expr1073744640 $assertEquals $(@expr1073744641 "cppcheck-2.8/test/testunusedvar.cpp" $, 3335 $, "" $, errout@var100 .@expr1073744642 str (@expr1073744643 ) $) $) { $return ; }
3336: }
3337:
3338: void localvar53 ( ) {
3339: $functionVariableUsage_ $(@expr1073744644 "cppcheck-2.8/test/testunusedvar.cpp" $, 3339 $, "void foo(int a, int loop) {\n  bool x = false;\n  while (loop) {\n    if (a) {\n      x = true;\n      continue;\n    }\n  }\n}" $)
3340:
|
3346:
3347: ;
3348: $if $(@expr1073744645 $!@expr1073744646 $assertEquals $(@expr1073744647 "cppcheck-2.8/test/testunusedvar.cpp" $, 3348 $, "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr2824 str (@expr2825 ) $) $) { $return ; }
3349:
3350: $functionVariableUsage_ $(@expr1073744650 "cppcheck-2.8/test/testunusedvar.cpp" $, 3350 $, "void foo(int a, int loop) {\n  bool x = false;\n  while (loop) {\n    if (a) {\n      x = true;\n      continue;\n    }\n  }\n  return x;\n}" $)
3351:
|
3358:
3359: ;
3360: $if $(@expr1073744651 $!@expr1073744652 $assertEquals $(@expr1073744653 "cppcheck-2.8/test/testunusedvar.cpp" $, 3360 $, "" $, errout@var100 .@expr2824 str (@expr2825 ) $) $) { $return ; }
3361: }
3362:
3363: void localvar54 ( ) {
3364: $functionVariableUsage_ $(@expr1073744656 "cppcheck-2.8/test/testunusedvar.cpp" $, 3364 $, "Padding fun() {\n  Distance d = DISTANCE;\n  return (Padding){ d, d, d, d };\n}" $)
3365:
3366:
3367: ;
3368: $if $(@expr1073744657 $!@expr1073744658 $assertEquals $(@expr1073744659 "cppcheck-2.8/test/testunusedvar.cpp" $, 3368 $, "" $, errout@var100 .@expr1073744660 str (@expr1073744661 ) $) $) { $return ; }
3369: }
3370:
3371: void localvar55 ( ) {
3372: $functionVariableUsage_ $(@expr1073744662 "cppcheck-2.8/test/testunusedvar.cpp" $, 3372 $, "void f(int mode) {\n    int x = 0;\n\n    for (int i = 0; i < 10; i++) {\n        if (mode == 0x04)\n            x = 0;\n        if (mode == 0x0f) {\n            x = address;\n            data[x] = 0;\n        }\n    }\n}" $)
3373:
|
3382:
3383: ;
3384: $if $(@expr1073744663 $!@expr1073744664 $assertEquals $(@expr1073744665 "cppcheck-2.8/test/testunusedvar.cpp" $, 3384 $, "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr1073744666 str (@expr1073744667 ) $) $) { $return
3385:
3386: ; }
3387: }
3388:
3389: void localvar56 ( ) {
3390: $functionVariableUsage_ $(@expr1073744668 "cppcheck-2.8/test/testunusedvar.cpp" $, 3390 $, "void f()\n{\n    int x = 31;\n    mask[x] |= 123;\n}" $)
3391:
3392:
3393:
3394: ;
3395: $if $(@expr1073744669 $!@expr1073744670 $assertEquals $(@expr1073744671 "cppcheck-2.8/test/testunusedvar.cpp" $, 3395 $, "" $, errout@var100 .@expr1073744672 str (@expr1073744673 ) $) $) { $return ; }
3396: }
3397:
3398: void localvar57 ( ) {
3399: $functionVariableUsage_ $(@expr1073744674 "cppcheck-2.8/test/testunusedvar.cpp" $, 3399 $, "void f()\n{\n    int x = 0;\n    x++;\n}" $)
3400:
3401:
3402:
3403: ;
3404: $if $(@expr1073744675 $!@expr1073744676 $assertEquals $(@expr1073744677 "cppcheck-2.8/test/testunusedvar.cpp" $, 3404 $, "[test.cpp:4]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr1073744678 str (@expr1073744679 ) $) $) { $return ; }
3405: }
3406:
3407: void localvar58 ( ) {
3408: $functionVariableUsage_ $(@expr1073744680 "cppcheck-2.8/test/testunusedvar.cpp" $, 3408 $, "void f() {\n    int x = 0;\n    if (--x > 0) {}\n}" $)
3409:
3410:
3411: ;
3412: $if $(@expr1073744681 $!@expr1073744682 $assertEquals $(@expr1073744683 "cppcheck-2.8/test/testunusedvar.cpp" $, 3412 $, "" $, errout@var100 .@expr2860 str (@expr2861 ) $) $) { $return ; }
3413:
3414: $functionVariableUsage_ $(@expr1073744686 "cppcheck-2.8/test/testunusedvar.cpp" $, 3414 $, "void f() {\n    int x = 0;\n    if (x-- > 0) {}\n}" $)
3415:
3416:
3417: ;
3418: $if $(@expr1073744687 $!@expr1073744688 $assertEquals $(@expr1073744689 "cppcheck-2.8/test/testunusedvar.cpp" $, 3418 $, "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr2860 str (@expr2861 ) $) $) { $return ; }
3419: }
3420:
3421: void localvar59 ( ) {
3422: $functionVariableUsage_ $(@expr1073744692 "cppcheck-2.8/test/testunusedvar.cpp" $, 3422 $, "Response foo() {\n    const std::vector<char> cmanifest = z;\n    return {.a = cmanifest, .b =0};\n}" $)
3423:
3424:
3425: ;
3426: $if $(@expr1073744693 $!@expr1073744694 $assertEquals $(@expr1073744695 "cppcheck-2.8/test/testunusedvar.cpp" $, 3426 $, "" $, errout@var100 .@expr1073744696 str (@expr1073744697 ) $) $) { $return ; }
3427: }
3428:
3429: void localvar60 ( ) {
3430: $functionVariableUsage_ $(@expr1073744698 "cppcheck-2.8/test/testunusedvar.cpp" $, 3430 $, "void Scale(double scale) {\n    for (int i = 0; i < m_points.size(); ++i) {\n        auto& p = m_points[i];\n        p += scale;\n    }\n}" $)
3431:
|
3434:
3435: ;
3436: $if $(@expr1073744699 $!@expr1073744700 $assertEquals $(@expr1073744701 "cppcheck-2.8/test/testunusedvar.cpp" $, 3436 $, "" $, errout@var100 .@expr1073744702 str (@expr1073744703 ) $) $) { $return ; }
3437: }
3438:
3439: void localvar61 ( ) {
3440: $functionVariableUsage_ $(@expr1073744704 "cppcheck-2.8/test/testunusedvar.cpp" $, 3440 $, "void g(int& i);\nvoid f() {\n    int var = 0;\n    g(var);\n    var = 2;\n}\n" $)
3441:
|
3444:
3445: ;
3446: $if $(@expr1073744705 $!@expr1073744706 $assertEquals $(@expr1073744707 "cppcheck-2.8/test/testunusedvar.cpp" $, 3446 $, "[test.cpp:5]: (style) Variable 'var' is assigned a value that is never used.\n" $, errout@var100 .@expr1073744708 str (@expr1073744709 ) $) $) { $return ; }
3447: }
3448:
3449: void localvar62 ( ) {
3450: $functionVariableUsage_ $(@expr1073744710 "cppcheck-2.8/test/testunusedvar.cpp" $, 3450 $, "void f() {\n    S* s = nullptr;\n}\n" $)
3451:
3452: ;
3453: $if $(@expr1073744711 $!@expr1073744712 $assertEquals $(@expr1073744713 "cppcheck-2.8/test/testunusedvar.cpp" $, 3453 $, "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" $, errout@var100 .@expr2890 str (@expr2891 ) $) $) { $return ; }
3454:
3455: $functionVariableUsage_ $(@expr1073744716 "cppcheck-2.8/test/testunusedvar.cpp" $, 3455 $, "void f() {\n    S* s{};\n}\n" $)
3456:
3457: ;
3458: $todoAssertEquals $(@expr1073744717 "cppcheck-2.8/test/testunusedvar.cpp" $, 3458 $, "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr2890 str (@expr2891 ) $) ;
3459:
3460: $functionVariableUsage_ $(@expr1073744720 "cppcheck-2.8/test/testunusedvar.cpp" $, 3460 $, "int f() {\n    int i = 0, j = 1;\n    return i;\n}\n" $)
3461:
3462:
3463: ;
3464: $if $(@expr1073744721 $!@expr1073744722 $assertEquals $(@expr1073744723 "cppcheck-2.8/test/testunusedvar.cpp" $, 3464 $, "[test.cpp:2]: (style) Variable 'j' is assigned a value that is never used.\n" $, errout@var100 .@expr2890 str (@expr2891 ) $) $) { $return ; }
3465:
3466: $functionVariableUsage_ $(@expr1073744726 "cppcheck-2.8/test/testunusedvar.cpp" $, 3466 $, "int f() {\n    int i = 0, j = 1;\n    return j;\n}\n" $)
3467:
3468:
3469: ;
3470: $if $(@expr1073744727 $!@expr1073744728 $assertEquals $(@expr1073744729 "cppcheck-2.8/test/testunusedvar.cpp" $, 3470 $, "[test.cpp:2]: (style) Variable 'i' is assigned a value that is never used.\n" $, errout@var100 .@expr2890 str (@expr2891 ) $) $) { $return ; }
3471:
3472: $functionVariableUsage_ $(@expr1073744732 "cppcheck-2.8/test/testunusedvar.cpp" $, 3472 $, "void f() {\n    int i = 1; while (i) { i = g(); }\n}\n" $)
3473:
3474: ;
3475: $if $(@expr1073744733 $!@expr1073744734 $assertEquals $(@expr1073744735 "cppcheck-2.8/test/testunusedvar.cpp" $, 3475 $, "" $, errout@var100 .@expr2890 str (@expr2891 ) $) $) { $return ; }
3476: }
3477:
3478: void localvar63 ( ) {
3479: $functionVariableUsage_ $(@expr1073744738 "cppcheck-2.8/test/testunusedvar.cpp" $, 3479 $, "void f(void) {\n  int x=3;\n  goto y;\n  y:return;\n}" $)
3480:
3481:
3482:
3483: ;
3484: $if $(@expr1073744739 $!@expr1073744740 $assertEquals $(@expr1073744741 "cppcheck-2.8/test/testunusedvar.cpp" $, 3484 $, "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr1073744742 str (@expr1073744743 ) $) $) { $return ; }
3485: }
3486:
3487: void localvarloops ( ) {
3488:
3489: $functionVariableUsage_ $(@expr1073744744 "cppcheck-2.8/test/testunusedvar.cpp" $, 3489 $, "void fun(int c) {\n  int x;\n  while (c) { x=10; }\n}" $)
3490:
3491:
3492: ;
3493: $if $(@expr1073744745 $!@expr1073744746 $assertEquals $(@expr1073744747 "cppcheck-2.8/test/testunusedvar.cpp" $, 3493 $, "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3494:
3495: $functionVariableUsage_ $(@expr1073744750 "cppcheck-2.8/test/testunusedvar.cpp" $, 3495 $, "void dostuff(int x);\nvoid fun(int y, int c) {\n  int x = 1;\n  while (c) {\n    dostuff(x);\n    if (y) { x=10; break; }\n  }\n}" $)
3496:
|
3501:
3502: ;
3503: $if $(@expr1073744751 $!@expr1073744752 $assertEquals $(@expr1073744753 "cppcheck-2.8/test/testunusedvar.cpp" $, 3503 $, "[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3504:
3505: $functionVariableUsage_ $(@expr1073744756 "cppcheck-2.8/test/testunusedvar.cpp" $, 3505 $, "void dostuff(int &x);\nvoid fun() {\n  int x = 1;\n  while (c) {\n    dostuff(x);\n    if (y) { x=10; break; }\n  }\n}" $)
3506:
|
3511:
3512: ;
3513: $if $(@expr1073744757 $!@expr1073744758 $assertEquals $(@expr1073744759 "cppcheck-2.8/test/testunusedvar.cpp" $, 3513 $, "[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3514:
3515: $functionVariableUsage_ $(@expr1073744762 "cppcheck-2.8/test/testunusedvar.cpp" $, 3515 $, "void fun() {\n  int x = 0;\n  while (c) {\n    dostuff(x);\n    x = 10;\n  }\n}" $)
3516:
|
3520:
3521: ;
3522: $if $(@expr1073744763 $!@expr1073744764 $assertEquals $(@expr1073744765 "cppcheck-2.8/test/testunusedvar.cpp" $, 3522 $, "" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3523:
3524: $functionVariableUsage_ $(@expr1073744768 "cppcheck-2.8/test/testunusedvar.cpp" $, 3524 $, "void fun() {\n  int x = 0;\n  while (x < 10) { x = x + 1; }\n}" $)
3525:
3526:
3527: ;
3528: $if $(@expr1073744769 $!@expr1073744770 $assertEquals $(@expr1073744771 "cppcheck-2.8/test/testunusedvar.cpp" $, 3528 $, "" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3529:
3530: $functionVariableUsage_ $(@expr1073744774 "cppcheck-2.8/test/testunusedvar.cpp" $, 3530 $, "void fun()\n{\n    int   status = 0;\n    for (ind = 0; ((ind < nrArgs) && (status < 10)); ind++)\n        status = x;\n}" $)
3531:
|
3534:
3535: ;
3536: $if $(@expr1073744775 $!@expr1073744776 $assertEquals $(@expr1073744777 "cppcheck-2.8/test/testunusedvar.cpp" $, 3536 $, "" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3537:
3538: $functionVariableUsage_ $(@expr1073744780 "cppcheck-2.8/test/testunusedvar.cpp" $, 3538 $, "void f()\n{\n    int sum = 0U;\n    for (i = 0U; i < 2U; i++)\n        sum += 123;\n}" $)
3539:
|
3542:
3543: ;
3544: $if $(@expr1073744781 $!@expr1073744782 $assertEquals $(@expr1073744783 "cppcheck-2.8/test/testunusedvar.cpp" $, 3544 $, "[test.cpp:3]: (style) Variable 'sum' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 'sum' is assigned a value that is never used.\n" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return
3545: ; }
3546:
3547: $functionVariableUsage_ $(@expr1073744786 "cppcheck-2.8/test/testunusedvar.cpp" $, 3547 $, "void f(int c) {\n    int b = 0;\n    while (g()) {\n        int a = c;\n        b = a;\n        if (a == 4)\n            a = 5;\n    }\n    h(b);\n}\n" $)
3548:
|
3555:
3556: ;
3557: $if $(@expr1073744787 $!@expr1073744788 $assertEquals $(@expr1073744789 "cppcheck-2.8/test/testunusedvar.cpp" $, 3557 $, "[test.cpp:7]: (style) Variable 'a' is assigned a value that is never used.\n" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3558:
3559: $functionVariableUsage_ $(@expr1073744792 "cppcheck-2.8/test/testunusedvar.cpp" $, 3559 $, "void f(const std::vector<int>& v) {\n    while (g()) {\n        const std::vector<int>& v2 = h();\n        if (std::vector<int>{ 1, 2, 3 }.size() > v2.size()) {}\n    }\n}\n" $)
3560:
|
3563:
3564: ;
3565: $if $(@expr1073744793 $!@expr1073744794 $assertEquals $(@expr1073744795 "cppcheck-2.8/test/testunusedvar.cpp" $, 3565 $, "" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3566:
3567: $functionVariableUsage_ $(@expr1073744798 "cppcheck-2.8/test/testunusedvar.cpp" $, 3567 $, "void f(const std::vector<int>& v) {\n    while (g()) {\n        const std::vector<int>& v2 = h();\n        if (std::vector<int>({ 1, 2, 3 }).size() > v2.size()) {}\n    }\n}\n" $)
3568:
|
3571:
3572: ;
3573: $if $(@expr1073744799 $!@expr1073744800 $assertEquals $(@expr1073744801 "cppcheck-2.8/test/testunusedvar.cpp" $, 3573 $, "" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3574:
3575: $functionVariableUsage_ $(@expr1073744804 "cppcheck-2.8/test/testunusedvar.cpp" $, 3575 $, "void f(const std::string &c) {\n    std::string s = str();\n    if (s[0] == '>')\n        s[0] = '<';\n    if (s == c) {}\n}\n" $)
3576:
|
3579:
3580: ;
3581: $if $(@expr1073744805 $!@expr1073744806 $assertEquals $(@expr1073744807 "cppcheck-2.8/test/testunusedvar.cpp" $, 3581 $, "" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3582:
3583: $functionVariableUsage_ $(@expr1073744810 "cppcheck-2.8/test/testunusedvar.cpp" $, 3583 $, "void f(bool b) {\n    std::map<std::string, std::vector<std::string>> m;\n    if (b) {\n        const std::string n = g();\n        std::vector<std::string> c = h();\n        m[n] = c;\n    }\n    j(m);\n}\n" $)
3584:
|
3590:
3591: ;
3592: $if $(@expr1073744811 $!@expr1073744812 $assertEquals $(@expr1073744813 "cppcheck-2.8/test/testunusedvar.cpp" $, 3592 $, "" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3593:
3594: $functionVariableUsage_ $(@expr1073744816 "cppcheck-2.8/test/testunusedvar.cpp" $, 3594 $, "struct S { int i; };\nS f(S s, bool b) {\n    if (b)\n        s.i = 1;\n    return s;\n}\n" $)
3595:
|
3598:
3599: ;
3600: $if $(@expr1073744817 $!@expr1073744818 $assertEquals $(@expr1073744819 "cppcheck-2.8/test/testunusedvar.cpp" $, 3600 $, "" $, errout@var100 .@expr2924 str (@expr2925 ) $) $) { $return ; }
3601: }
3602:
3603: void localvaralias1 ( ) {
3604: $functionVariableUsage_ $(@expr1073744822 "cppcheck-2.8/test/testunusedvar.cpp" $, 3604 $, "void foo()\n{\n    int a;\n    int *b = &a;\n}" $)
3605:
3606:
3607:
3608: ;
3609: $if $(@expr1073744823 $!@expr1073744824 $assertEquals $(@expr1073744825 "cppcheck-2.8/test/testunusedvar.cpp" $, 3609 $, "[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: a\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return
3610: ; }
3611:
3612: $functionVariableUsage_ $(@expr1073744828 "cppcheck-2.8/test/testunusedvar.cpp" $, 3612 $, "void foo()\n{\n    int a[10];\n    int *b = a;\n}" $)
3613:
3614:
3615:
3616: ;
3617: $if $(@expr1073744829 $!@expr1073744830 $assertEquals $(@expr1073744831 "cppcheck-2.8/test/testunusedvar.cpp" $, 3617 $, "[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: a\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return
3618: ; }
3619:
3620: $functionVariableUsage_ $(@expr1073744834 "cppcheck-2.8/test/testunusedvar.cpp" $, 3620 $, "void foo()\n{\n    int a;\n    int *b = &a;\n    *b = 0;\n}" $)
3621:
|
3624:
3625: ;
3626: $todoAssertEquals $(@expr1073744835 "cppcheck-2.8/test/testunusedvar.cpp" $, 3626 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3627:
3628: ;
3629:
3630: $functionVariableUsage_ $(@expr1073744838 "cppcheck-2.8/test/testunusedvar.cpp" $, 3630 $, "void foo()\n{\n    int a;\n    char *b = (char *)&a;\n    *b = 0;\n}" $)
3631:
|
3634:
3635: ;
3636: $todoAssertEquals $(@expr1073744839 "cppcheck-2.8/test/testunusedvar.cpp" $, 3636 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3637:
3638: ;
3639:
3640: $functionVariableUsage_ $(@expr1073744842 "cppcheck-2.8/test/testunusedvar.cpp" $, 3640 $, "void foo()\n{\n    int a;\n    char *b = (char *)(&a);\n    *b = 0;\n}" $)
3641:
|
3644:
3645: ;
3646: $todoAssertEquals $(@expr1073744843 "cppcheck-2.8/test/testunusedvar.cpp" $, 3646 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3647:
3648: ;
3649:
3650: $functionVariableUsage_ $(@expr1073744846 "cppcheck-2.8/test/testunusedvar.cpp" $, 3650 $, "void foo()\n{\n    int a;\n    const char *b = (const char *)&a;\n    *b = 0;\n}" $)
3651:
|
3654:
3655: ;
3656: $todoAssertEquals $(@expr1073744847 "cppcheck-2.8/test/testunusedvar.cpp" $, 3656 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3657:
3658: ;
3659:
3660: $functionVariableUsage_ $(@expr1073744850 "cppcheck-2.8/test/testunusedvar.cpp" $, 3660 $, "void foo()\n{\n    int a;\n    const char *b = (const char *)(&a);\n    *b = 0;\n}" $)
3661:
|
3664:
3665: ;
3666: $todoAssertEquals $(@expr1073744851 "cppcheck-2.8/test/testunusedvar.cpp" $, 3666 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3667:
3668: ;
3669:
3670: $functionVariableUsage_ $(@expr1073744854 "cppcheck-2.8/test/testunusedvar.cpp" $, 3670 $, "void foo()\n{\n    int a;\n    char *b = static_cast<char *>(&a);\n    *b = 0;\n}" $)
3671:
|
3674:
3675: ;
3676: $todoAssertEquals $(@expr1073744855 "cppcheck-2.8/test/testunusedvar.cpp" $, 3676 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3677:
3678: ;
3679:
3680: $functionVariableUsage_ $(@expr1073744858 "cppcheck-2.8/test/testunusedvar.cpp" $, 3680 $, "void foo()\n{\n    int a;\n    const char *b = static_cast<const char *>(&a);\n    *b = 0;\n}" $)
3681:
|
3684:
3685: ;
3686: $todoAssertEquals $(@expr1073744859 "cppcheck-2.8/test/testunusedvar.cpp" $, 3686 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3687:
3688: ;
3689:
3690:
3691: $functionVariableUsage_ $(@expr1073744862 "cppcheck-2.8/test/testunusedvar.cpp" $, 3691 $, "int a;\nvoid foo()\n{\n    int *b = &a;\n}" $)
3692:
3693:
3694:
3695: ;
3696: $if $(@expr1073744863 $!@expr1073744864 $assertEquals $(@expr1073744865 "cppcheck-2.8/test/testunusedvar.cpp" $, 3696 $, "[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3697:
3698:
3699: $functionVariableUsage_ $(@expr1073744868 "cppcheck-2.8/test/testunusedvar.cpp" $, 3699 $, "void foo(int a)\n{\n    int *b = &a;\n}" $)
3700:
3701:
3702: ;
3703: $if $(@expr1073744869 $!@expr1073744870 $assertEquals $(@expr1073744871 "cppcheck-2.8/test/testunusedvar.cpp" $, 3703 $, "[test.cpp:3]: (style) Variable 'b' is assigned a value that is never used.\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3704:
3705:
3706: $functionVariableUsage_ $(@expr1073744874 "cppcheck-2.8/test/testunusedvar.cpp" $, 3706 $, "class A\n{\n    int a;\n    void foo()\n    {\n        int *b = &a;\n    }\n};" $)
3707:
|
3712:
3713: ;
3714: $if $(@expr1073744875 $!@expr1073744876 $assertEquals $(@expr1073744877 "cppcheck-2.8/test/testunusedvar.cpp" $, 3714 $, "[test.cpp:6]: (style) Variable 'b' is assigned a value that is never used.\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3715:
3716: $functionVariableUsage_ $(@expr1073744880 "cppcheck-2.8/test/testunusedvar.cpp" $, 3716 $, "int a;\nvoid foo()\n{\n    int *b = &a;\n    *b = 0;\n}" $)
3717:
|
3720:
3721: ;
3722: $if $(@expr1073744881 $!@expr1073744882 $assertEquals $(@expr1073744883 "cppcheck-2.8/test/testunusedvar.cpp" $, 3722 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3723:
3724: $functionVariableUsage_ $(@expr1073744886 "cppcheck-2.8/test/testunusedvar.cpp" $, 3724 $, "void foo(int a)\n{\n    int *b = &a;\n    *b = 0;\n}" $)
3725:
3726:
3727:
3728: ;
3729: $if $(@expr1073744887 $!@expr1073744888 $assertEquals $(@expr1073744889 "cppcheck-2.8/test/testunusedvar.cpp" $, 3729 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3730:
3731: $functionVariableUsage_ $(@expr1073744892 "cppcheck-2.8/test/testunusedvar.cpp" $, 3731 $, "class A\n{\n    int a;\n    void foo()\n    {\n        int *b = &a;\n        *b = 0;\n    }\n}" $)
3732:
|
3738:
3739: ;
3740: $if $(@expr1073744893 $!@expr1073744894 $assertEquals $(@expr1073744895 "cppcheck-2.8/test/testunusedvar.cpp" $, 3740 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3741:
3742: $functionVariableUsage_ $(@expr1073744898 "cppcheck-2.8/test/testunusedvar.cpp" $, 3742 $, "void foo()\n{\n    int a[10];\n    int *b = a;\n    *b = 0;\n}" $)
3743:
|
3746:
3747: ;
3748: $todoAssertEquals $(@expr1073744899 "cppcheck-2.8/test/testunusedvar.cpp" $, 3748 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3749:
3750: ;
3751:
3752: $functionVariableUsage_ $(@expr1073744902 "cppcheck-2.8/test/testunusedvar.cpp" $, 3752 $, "void foo()\n{\n    int a[10];\n    char *b = (char *)a;\n    *b = 0;\n}" $)
3753:
|
3756:
3757: ;
3758: $todoAssertEquals $(@expr1073744903 "cppcheck-2.8/test/testunusedvar.cpp" $, 3758 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3759:
3760: ;
3761:
3762: $functionVariableUsage_ $(@expr1073744906 "cppcheck-2.8/test/testunusedvar.cpp" $, 3762 $, "void foo()\n{\n    int a[10];\n    char *b = (char *)(a);\n    *b = 0;\n}" $)
3763:
|
3766:
3767: ;
3768: $todoAssertEquals $(@expr1073744907 "cppcheck-2.8/test/testunusedvar.cpp" $, 3768 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3769:
3770: ;
3771:
3772: $functionVariableUsage_ $(@expr1073744910 "cppcheck-2.8/test/testunusedvar.cpp" $, 3772 $, "void foo()\n{\n    int a[10];\n    const char *b = (const char *)a;\n    *b = 0;\n}" $)
3773:
|
3776:
3777: ;
3778: $todoAssertEquals $(@expr1073744911 "cppcheck-2.8/test/testunusedvar.cpp" $, 3778 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3779:
3780: ;
3781:
3782: $functionVariableUsage_ $(@expr1073744914 "cppcheck-2.8/test/testunusedvar.cpp" $, 3782 $, "void foo()\n{\n    int a[10];\n    const char *b = (const char *)(a);\n    *b = 0;\n}" $)
3783:
|
3786:
3787: ;
3788: $todoAssertEquals $(@expr1073744915 "cppcheck-2.8/test/testunusedvar.cpp" $, 3788 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3789:
3790: ;
3791:
3792: $functionVariableUsage_ $(@expr1073744918 "cppcheck-2.8/test/testunusedvar.cpp" $, 3792 $, "void foo()\n{\n    int a[10];\n    char *b = static_cast<char *>(a);\n    *b = 0;\n}" $)
3793:
|
3796:
3797: ;
3798: $todoAssertEquals $(@expr1073744919 "cppcheck-2.8/test/testunusedvar.cpp" $, 3798 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3799:
3800: ;
3801:
3802: $functionVariableUsage_ $(@expr1073744922 "cppcheck-2.8/test/testunusedvar.cpp" $, 3802 $, "void foo()\n{\n    int a[10];\n    const char *b = static_cast<const char *>(a);\n    *b = 0;\n}" $)
3803:
|
3806:
3807: ;
3808: $todoAssertEquals $(@expr1073744923 "cppcheck-2.8/test/testunusedvar.cpp" $, 3808 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3809:
3810: ;
3811:
3812: $functionVariableUsage_ $(@expr1073744926 "cppcheck-2.8/test/testunusedvar.cpp" $, 3812 $, "int a[10];\nvoid foo()\n{\n    int *b = a;\n    *b = 0;\n}" $)
3813:
|
3816:
3817: ;
3818: $if $(@expr1073744927 $!@expr1073744928 $assertEquals $(@expr1073744929 "cppcheck-2.8/test/testunusedvar.cpp" $, 3818 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3819:
3820: $functionVariableUsage_ $(@expr1073744932 "cppcheck-2.8/test/testunusedvar.cpp" $, 3820 $, "int a[10];\nvoid foo()\n{\n    int *b = a;\n    int *c = b;\n    *c = 0;\n}" $)
3821:
|
3825:
3826: ;
3827: $if $(@expr1073744933 $!@expr1073744934 $assertEquals $(@expr1073744935 "cppcheck-2.8/test/testunusedvar.cpp" $, 3827 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3828:
3829: $functionVariableUsage_ $(@expr1073744938 "cppcheck-2.8/test/testunusedvar.cpp" $, 3829 $, "void foo()\n{\n    int *b = a;\n    int *c = b;\n    *c = 0;\n}" $)
3830:
|
3833:
3834: ;
3835: $if $(@expr1073744939 $!@expr1073744940 $assertEquals $(@expr1073744941 "cppcheck-2.8/test/testunusedvar.cpp" $, 3835 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3836:
3837: $functionVariableUsage_ $(@expr1073744944 "cppcheck-2.8/test/testunusedvar.cpp" $, 3837 $, "void foo()\n{\n    int *b = a;\n    int *c = b;\n    *c = b[0];\n}" $)
3838:
|
3841:
3842: ;
3843: $if $(@expr1073744945 $!@expr1073744946 $assertEquals $(@expr1073744947 "cppcheck-2.8/test/testunusedvar.cpp" $, 3843 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3844:
3845:
3846: $functionVariableUsage_ $(@expr1073744950 "cppcheck-2.8/test/testunusedvar.cpp" $, 3846 $, "void foo()\n{\n    int *b = a;\n    int c = b[0];\n    x(c);\n}" $)
3847:
|
3850:
3851: ;
3852: $if $(@expr1073744951 $!@expr1073744952 $assertEquals $(@expr1073744953 "cppcheck-2.8/test/testunusedvar.cpp" $, 3852 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3853:
3854: $functionVariableUsage_ $(@expr1073744956 "cppcheck-2.8/test/testunusedvar.cpp" $, 3854 $, "void foo()\n{\n    int *b = a;\n    int c = b[0];\n    x(c);\n}" $)
3855:
|
3858:
3859: ;
3860: $if $(@expr1073744957 $!@expr1073744958 $assertEquals $(@expr1073744959 "cppcheck-2.8/test/testunusedvar.cpp" $, 3860 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3861:
3862: $functionVariableUsage_ $(@expr1073744962 "cppcheck-2.8/test/testunusedvar.cpp" $, 3862 $, "int a[10];\nvoid foo()\n{\n    int *b = &a[0];\n    a[0] = b[0];\n}" $)
3863:
|
3866:
3867: ;
3868: $if $(@expr1073744963 $!@expr1073744964 $assertEquals $(@expr1073744965 "cppcheck-2.8/test/testunusedvar.cpp" $, 3868 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3869:
3870: $functionVariableUsage_ $(@expr1073744968 "cppcheck-2.8/test/testunusedvar.cpp" $, 3870 $, "void foo()\n{\n    int *b = &a[0];\n    a[0] = b[0];\n}" $)
3871:
3872:
3873:
3874: ;
3875: $if $(@expr1073744969 $!@expr1073744970 $assertEquals $(@expr1073744971 "cppcheck-2.8/test/testunusedvar.cpp" $, 3875 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3876:
3877: $functionVariableUsage_ $(@expr1073744974 "cppcheck-2.8/test/testunusedvar.cpp" $, 3877 $, "void foo()\n{\n    int *b = a;\n    a[0] = b[0];\n}" $)
3878:
3879:
3880:
3881: ;
3882: $if $(@expr1073744975 $!@expr1073744976 $assertEquals $(@expr1073744977 "cppcheck-2.8/test/testunusedvar.cpp" $, 3882 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3883:
3884: $functionVariableUsage_ $(@expr1073744980 "cppcheck-2.8/test/testunusedvar.cpp" $, 3884 $, "void foo(int a[10])\n{\n    int *b = a;\n    *b = 0;\n}" $)
3885:
3886:
3887:
3888: ;
3889: $if $(@expr1073744981 $!@expr1073744982 $assertEquals $(@expr1073744983 "cppcheck-2.8/test/testunusedvar.cpp" $, 3889 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3890:
3891: $functionVariableUsage_ $(@expr1073744986 "cppcheck-2.8/test/testunusedvar.cpp" $, 3891 $, "class A\n{\n    int a[10];\n    void foo()\n    {\n        int *b = a;\n        *b = 0;\n    }\n}" $)
3892:
|
3898:
3899: ;
3900: $if $(@expr1073744987 $!@expr1073744988 $assertEquals $(@expr1073744989 "cppcheck-2.8/test/testunusedvar.cpp" $, 3900 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3901:
3902: $functionVariableUsage_ $(@expr1073744992 "cppcheck-2.8/test/testunusedvar.cpp" $, 3902 $, "void foo()\n{\n    int a[10];\n    int *b = a;\n    int *c = b;\n    *c = 0;\n}" $)
3903:
|
3907:
3908: ;
3909: $todoAssertEquals $(@expr1073744993 "cppcheck-2.8/test/testunusedvar.cpp" $, 3909 $, "[test.cpp:6]: (style) Variable 'a' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3910:
3911: ;
3912:
3913: $functionVariableUsage_ $(@expr1073744996 "cppcheck-2.8/test/testunusedvar.cpp" $, 3913 $, "void foo()\n{\n    int a[10];\n    int b[10];\n    int *c = a;\n    int *d = b;\n    *d = 0;\n}" $)
3914:
|
3919:
3920: ;
3921: $if $(@expr1073744997 $!@expr1073744998 $assertEquals $(@expr1073744999 "cppcheck-2.8/test/testunusedvar.cpp" $, 3921 $, "[test.cpp:5]: (style) Variable 'c' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: a\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return
3922:
3923: ; }
3924:
3925: $functionVariableUsage_ $(@expr1073745002 "cppcheck-2.8/test/testunusedvar.cpp" $, 3925 $, "void foo()\n{\n    int a[10];\n    int b[10];\n    int *c = a;\n    c = b;\n    *c = 0;\n}" $)
3926:
|
3931:
3932: ;
3933: $if $(@expr1073745003 $!@expr1073745004 $assertEquals $(@expr1073745005 "cppcheck-2.8/test/testunusedvar.cpp" $, 3933 $, "[test.cpp:3]: (style) Unused variable: a\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return
3934:
3935: ; }
3936:
3937: $functionVariableUsage_ $(@expr1073745008 "cppcheck-2.8/test/testunusedvar.cpp" $, 3937 $, "void foo()\n{\n    int a[10];\n    int b[10];\n    int *c = a;\n    c = b;\n    *c = 0;\n    c = a;\n    *c = 0;\n}" $)
3938:
|
3945:
3946: ;
3947: $todoAssertEquals $(@expr1073745009 "cppcheck-2.8/test/testunusedvar.cpp" $, 3947 $, "[test.cpp:9]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3948:
3949:
3950: ;
3951:
3952: $functionVariableUsage_ $(@expr1073745012 "cppcheck-2.8/test/testunusedvar.cpp" $, 3952 $, "void foo()\n{\n    int a[10], * b = a + 10;\n    b[-10] = 1;\n}" $)
3953:
3954:
3955:
3956: ;
3957: $todoAssertEquals $(@expr1073745013 "cppcheck-2.8/test/testunusedvar.cpp" $, 3957 $, "[test.cpp:4]: (style) Variable 'b[-10]' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3958:
3959: ;
3960:
3961: $functionVariableUsage_ $(@expr1073745016 "cppcheck-2.8/test/testunusedvar.cpp" $, 3961 $, "void foo()\n{\n    int a[10], * b = a + 10;\n    b[-10] = 0;\n    int * c = b - 10;\n}" $)
3962:
|
3965:
3966: ;
3967: $if $(@expr1073745017 $!@expr1073745018 $assertEquals $(@expr1073745019 "cppcheck-2.8/test/testunusedvar.cpp" $, 3967 $, "[test.cpp:5]: (style) Variable 'c' is assigned a value that is never used.\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return
3968: ; }
3969:
3970: $functionVariableUsage_ $(@expr1073745022 "cppcheck-2.8/test/testunusedvar.cpp" $, 3970 $, "void foo()\n{\n    int a[10], * b = a + 10;\n    int * c = b - 10;\n    c[1] = 3;\n}" $)
3971:
|
3974:
3975: ;
3976: $todoAssertEquals $(@expr1073745023 "cppcheck-2.8/test/testunusedvar.cpp" $, 3976 $, "[test.cpp:5]: (style) Variable 'c[1]' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3977:
3978: ;
3979:
3980: $functionVariableUsage_ $(@expr1073745026 "cppcheck-2.8/test/testunusedvar.cpp" $, 3980 $, "void foo()\n{\n    int a[10], * b = a + 10;\n    int * c = b - 10;\n    c[1] = c[0];\n}" $)
3981:
|
3984:
3985: ;
3986: $todoAssertEquals $(@expr1073745027 "cppcheck-2.8/test/testunusedvar.cpp" $, 3986 $, "[test.cpp:5]: (style) Variable 'c[1]' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
3987:
3988: ;
3989:
3990: $functionVariableUsage_ $(@expr1073745030 "cppcheck-2.8/test/testunusedvar.cpp" $, 3990 $, "void foo() {\n    int a[2], *b[2];\n    a[0] = 123;\n    b[0] = &a[0];\n    int *d = b[0];\n    return *d;\n}" $)
3991:
|
3995:
3996: ;
3997: $if $(@expr1073745031 $!@expr1073745032 $assertEquals $(@expr1073745033 "cppcheck-2.8/test/testunusedvar.cpp" $, 3997 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
3998:
3999: $functionVariableUsage_ $(@expr1073745036 "cppcheck-2.8/test/testunusedvar.cpp" $, 3999 $, "void foo() {\n    entry a[2], *b[2];\n    a[0].value = 123;\n    b[0] = &a[0];\n    int d = b[0].value;\n    return d;\n}" $)
4000:
|
4004:
4005: ;
4006: $if $(@expr1073745037 $!@expr1073745038 $assertEquals $(@expr1073745039 "cppcheck-2.8/test/testunusedvar.cpp" $, 4006 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
4007:
4008: $functionVariableUsage_ $(@expr1073745042 "cppcheck-2.8/test/testunusedvar.cpp" $, 4008 $, "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    struct S * s = (struct S *)a;\n    s->c[0] = 0;\n}" $)
4009:
|
4013:
4014: ;
4015: $if $(@expr1073745043 $!@expr1073745044 $assertEquals $(@expr1073745045 "cppcheck-2.8/test/testunusedvar.cpp" $, 4015 $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return ; }
4016:
4017: $functionVariableUsage_ $(@expr1073745048 "cppcheck-2.8/test/testunusedvar.cpp" $, 4017 $, "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    struct S * s = (struct S *)a;\n}" $)
4018:
|
4021:
4022: ;
4023: $if $(@expr1073745049 $!@expr1073745050 $assertEquals $(@expr1073745051 "cppcheck-2.8/test/testunusedvar.cpp" $, 4023 $, "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return
4024: ; }
4025:
4026: $functionVariableUsage_ $(@expr1073745054 "cppcheck-2.8/test/testunusedvar.cpp" $, 4026 $, "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    const struct S * s = (const struct S *)a;\n}" $)
4027:
|
4030:
4031: ;
4032: $if $(@expr1073745055 $!@expr1073745056 $assertEquals $(@expr1073745057 "cppcheck-2.8/test/testunusedvar.cpp" $, 4032 $, "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return
4033: ; }
4034:
4035: $functionVariableUsage_ $(@expr1073745060 "cppcheck-2.8/test/testunusedvar.cpp" $, 4035 $, "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    struct S * s = static_cast<struct S *>(a);\n}" $)
4036:
|
4039:
4040: ;
4041: $if $(@expr1073745061 $!@expr1073745062 $assertEquals $(@expr1073745063 "cppcheck-2.8/test/testunusedvar.cpp" $, 4041 $, "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return
4042: ; }
4043:
4044: $functionVariableUsage_ $(@expr1073745066 "cppcheck-2.8/test/testunusedvar.cpp" $, 4044 $, "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    const struct S * s = static_cast<const struct S *>(a);\n}" $)
4045:
|
4048:
4049: ;
4050: $if $(@expr1073745067 $!@expr1073745068 $assertEquals $(@expr1073745069 "cppcheck-2.8/test/testunusedvar.cpp" $, 4050 $, "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return
4051: ; }
4052:
4053: $functionVariableUsage_ $(@expr1073745072 "cppcheck-2.8/test/testunusedvar.cpp" $, 4053 $, "int a[10];\nvoid foo()\n{\n    int b[10];\n    int c[10];\n    int *d;\n    d = b;\n    d = a;\n    d = c;\n    *d = 0;\n}" $)
4054:
|
4062:
4063: ;
4064: $if $(@expr1073745073 $!@expr1073745074 $assertEquals $(@expr1073745075 "cppcheck-2.8/test/testunusedvar.cpp" $, 4064 $, "[test.cpp:4]: (style) Unused variable: b\n" $, errout@var100 .@expr3002 str (@expr3003 ) $) $) { $return
4065: ; }
4066:
4067: $functionVariableUsage_ $(@expr1073745078 "cppcheck-2.8/test/testunusedvar.cpp" $, 4067 $, "int a[10];\nvoid foo()\n{\n    int b[10];\n    int c[10];\n    int *d;\n    d = b; *d = 0;\n    d = a; *d = 0;\n    d = c; *d = 0;\n}" $)
4068:
|
4075:
4076: ;
4077: $todoAssertEquals $(@expr1073745079 "cppcheck-2.8/test/testunusedvar.cpp" $, 4077 $, "[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:9]: (style) Variable 'c' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3002 str (@expr3003 ) $)
4078:
4079:
4080: ;
4081: }
4082:
4083: void localvaralias2 ( ) {
4084: $functionVariableUsage_ $(@expr1073745082 "cppcheck-2.8/test/testunusedvar.cpp" $, 4084 $, "void foo()\n{\n    int * a;\n    x(a);\n}" $)
4085:
4086:
4087:
4088: ;
4089: $if $(@expr1073745083 $!@expr1073745084 $assertEquals $(@expr1073745085 "cppcheck-2.8/test/testunusedvar.cpp" $, 4089 $, "" $, errout@var100 .@expr1073745086 str (@expr1073745087 ) $) $) { $return ; }
4090: }
4091:
4092: void localvaralias3 ( ) {
4093: $functionVariableUsage_ $(@expr1073745088 "cppcheck-2.8/test/testunusedvar.cpp" $, 4093 $, "void foo()\n{\n    BROWSEINFO    info;\n    char          szDisplayName[MAX_PATH];\n    info.pszDisplayName = szDisplayName;\n    SHBrowseForFolder(&info);\n}" $)
4094:
|
4098:
4099: ;
4100: $if $(@expr1073745089 $!@expr1073745090 $assertEquals $(@expr1073745091 "cppcheck-2.8/test/testunusedvar.cpp" $, 4100 $, "" $, errout@var100 .@expr1073745092 str (@expr1073745093 ) $) $) { $return ; }
4101: }
4102:
4103: void localvaralias4 ( ) {
4104: $functionVariableUsage_ $(@expr1073745094 "cppcheck-2.8/test/testunusedvar.cpp" $, 4104 $, "struct AB { int a; int b; } ab;\nvoid foo()\n{\n    int * a = &ab.a;\n}" $)
4105:
4106:
4107:
4108: ;
4109: $if $(@expr1073745095 $!@expr1073745096 $assertEquals $(@expr1073745097 "cppcheck-2.8/test/testunusedvar.cpp" $, 4109 $, "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n" $, errout@var100 .@expr3274 str (@expr3275 ) $) $) { $return ; }
4110:
4111: $functionVariableUsage_ $(@expr1073745100 "cppcheck-2.8/test/testunusedvar.cpp" $, 4111 $, "struct AB { int a; int b; } ab;\nvoid foo()\n{\n    int * a = &ab.a;\n    *a = 0;\n}" $)
4112:
|
4115:
4116: ;
4117: $if $(@expr1073745101 $!@expr1073745102 $assertEquals $(@expr1073745103 "cppcheck-2.8/test/testunusedvar.cpp" $, 4117 $, "" $, errout@var100 .@expr3274 str (@expr3275 ) $) $) { $return ; }
4118:
4119: $functionVariableUsage_ $(@expr1073745106 "cppcheck-2.8/test/testunusedvar.cpp" $, 4119 $, "struct AB { int a; int b; };\nvoid foo()\n{\n    struct AB ab;\n    int * a = &ab.a;\n}" $)
4120:
|
4123:
4124: ;
4125: $if $(@expr1073745107 $!@expr1073745108 $assertEquals $(@expr1073745109 "cppcheck-2.8/test/testunusedvar.cpp" $, 4125 $, "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'ab' is not assigned a value.\n" $, errout@var100 .@expr3274 str (@expr3275 ) $) $) { $return
4126: ; }
4127:
4128: $functionVariableUsage_ $(@expr1073745112 "cppcheck-2.8/test/testunusedvar.cpp" $, 4128 $, "struct AB { int a; int b; };\nvoid foo()\n{\n    struct AB ab;\n    int * a = &ab.a;\n    *a = 0;\n}" $)
4129:
|
4133:
4134: ;
4135: $if $(@expr1073745113 $!@expr1073745114 $assertEquals $(@expr1073745115 "cppcheck-2.8/test/testunusedvar.cpp" $, 4135 $, "" $, errout@var100 .@expr3274 str (@expr3275 ) $) $) { $return ; }
4136: }
4137:
4138: void localvaralias5 ( ) {
4139: $functionVariableUsage_ $(@expr1073745118 "cppcheck-2.8/test/testunusedvar.cpp" $, 4139 $, "char foo()\n{\n    char buf[8];\n    char *p = &buf[0];\n    *p++ = 0;\n    return buf[0];\n}" $)
4140:
|
4144:
4145: ;
4146: $if $(@expr1073745119 $!@expr1073745120 $assertEquals $(@expr1073745121 "cppcheck-2.8/test/testunusedvar.cpp" $, 4146 $, "" $, errout@var100 .@expr3298 str (@expr3299 ) $) $) { $return ; }
4147:
4148: $functionVariableUsage_ $(@expr1073745124 "cppcheck-2.8/test/testunusedvar.cpp" $, 4148 $, "char foo()\n{\n    char buf[8];\n    char *p = &buf[1];\n    *p-- = 0;\n    return buf[0];\n}" $)
4149:
|
4153:
4154: ;
4155: $if $(@expr1073745125 $!@expr1073745126 $assertEquals $(@expr1073745127 "cppcheck-2.8/test/testunusedvar.cpp" $, 4155 $, "" $, errout@var100 .@expr3298 str (@expr3299 ) $) $) { $return ; }
4156:
4157: $functionVariableUsage_ $(@expr1073745130 "cppcheck-2.8/test/testunusedvar.cpp" $, 4157 $, "char foo()\n{\n    char buf[8];\n    char *p = &buf[0];\n    *++p = 0;\n    return buf[0];\n}" $)
4158:
|
4162:
4163: ;
4164: $if $(@expr1073745131 $!@expr1073745132 $assertEquals $(@expr1073745133 "cppcheck-2.8/test/testunusedvar.cpp" $, 4164 $, "" $, errout@var100 .@expr3298 str (@expr3299 ) $) $) { $return ; }
4165:
4166: $functionVariableUsage_ $(@expr1073745136 "cppcheck-2.8/test/testunusedvar.cpp" $, 4166 $, "char foo()\n{\n    char buf[8];\n    char *p = &buf[1];\n    *--p = 0;\n    return buf[0];\n}" $)
4167:
|
4171:
4172: ;
4173: $if $(@expr1073745137 $!@expr1073745138 $assertEquals $(@expr1073745139 "cppcheck-2.8/test/testunusedvar.cpp" $, 4173 $, "" $, errout@var100 .@expr3298 str (@expr3299 ) $) $) { $return ; }
4174: }
4175:
4176: void localvaralias6 ( ) {
4177:
4178: $functionVariableUsage_ $(@expr1073745142 "cppcheck-2.8/test/testunusedvar.cpp" $, 4178 $, "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    } else {\n        srcdata = vdata;\n    }\n    b(srcdata);\n}" $)
4179:
|
4188:
4189: ;
4190: $if $(@expr1073745143 $!@expr1073745144 $assertEquals $(@expr1073745145 "cppcheck-2.8/test/testunusedvar.cpp" $, 4190 $, "" $, errout@var100 .@expr3322 str (@expr3323 ) $) $) { $return ; }
4191:
4192: $functionVariableUsage_ $(@expr1073745148 "cppcheck-2.8/test/testunusedvar.cpp" $, 4192 $, "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n        srcdata = vdata;\n    }\n    b(srcdata);\n}" $)
4193:
|
4201:
4202: ;
4203: $todoAssertEquals $(@expr1073745149 "cppcheck-2.8/test/testunusedvar.cpp" $, 4203 $, "[test.cpp:6]: (style) Variable 'buf' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3322 str (@expr3323 ) $)
4204:
4205: ;
4206:
4207: $functionVariableUsage_ $(@expr1073745152 "cppcheck-2.8/test/testunusedvar.cpp" $, 4207 $, "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}" $)
4208:
|
4216:
4217: ;
4218: $todoAssertEquals $(@expr1073745153 "cppcheck-2.8/test/testunusedvar.cpp" $, 4218 $, "[test.cpp:6]: (style) Variable 'buf' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3322 str (@expr3323 ) $)
4219:
4220: ;
4221:
4222: $functionVariableUsage_ $(@expr1073745156 "cppcheck-2.8/test/testunusedvar.cpp" $, 4222 $, "void foo(char *vdata)\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}" $)
4223:
|
4230:
4231: ;
4232: $if $(@expr1073745157 $!@expr1073745158 $assertEquals $(@expr1073745159 "cppcheck-2.8/test/testunusedvar.cpp" $, 4232 $, "[test.cpp:3]: (style) Unused variable: buf\n" $, errout@var100 .@expr3322 str (@expr3323 ) $) $) { $return ; }
4233:
4234: $functionVariableUsage_ $(@expr1073745162 "cppcheck-2.8/test/testunusedvar.cpp" $, 4234 $, "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        srcdata = vdata;\n    }\n    srcdata = buf;\n    b(srcdata);\n}" $)
4235:
|
4242:
4243: ;
4244: $if $(@expr1073745163 $!@expr1073745164 $assertEquals $(@expr1073745165 "cppcheck-2.8/test/testunusedvar.cpp" $, 4244 $, "" $, errout@var100 .@expr3322 str (@expr3323 ) $) $) { $return ; }
4245:
4246: $functionVariableUsage_ $(@expr1073745168 "cppcheck-2.8/test/testunusedvar.cpp" $, 4246 $, "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    } else {\n        srcdata = vdata;\n    }\n    b(srcdata);\n}" $)
4247:
|
4257:
4258: ;
4259: $if $(@expr1073745169 $!@expr1073745170 $assertEquals $(@expr1073745171 "cppcheck-2.8/test/testunusedvar.cpp" $, 4259 $, "" $, errout@var100 .@expr3322 str (@expr3323 ) $) $) { $return ; }
4260:
4261: $functionVariableUsage_ $(@expr1073745174 "cppcheck-2.8/test/testunusedvar.cpp" $, 4261 $, "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n        srcdata = vdata;\n    }\n    b(srcdata);\n}" $)
4262:
|
4271:
4272: ;
4273: $todoAssertEquals $(@expr1073745175 "cppcheck-2.8/test/testunusedvar.cpp" $, 4273 $, "[test.cpp:7]: (style) Variable 'buf' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3322 str (@expr3323 ) $)
4274:
4275: ;
4276:
4277: $functionVariableUsage_ $(@expr1073745178 "cppcheck-2.8/test/testunusedvar.cpp" $, 4277 $, "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}" $)
4278:
|
4287:
4288: ;
4289: $todoAssertEquals $(@expr1073745179 "cppcheck-2.8/test/testunusedvar.cpp" $, 4289 $, "[test.cpp:7]: (style) Variable 'buf' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3322 str (@expr3323 ) $)
4290:
4291: ;
4292:
4293: $functionVariableUsage_ $(@expr1073745182 "cppcheck-2.8/test/testunusedvar.cpp" $, 4293 $, "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}" $)
4294:
|
4302:
4303: ;
4304: $if $(@expr1073745183 $!@expr1073745184 $assertEquals $(@expr1073745185 "cppcheck-2.8/test/testunusedvar.cpp" $, 4304 $, "[test.cpp:3]: (style) Unused variable: buf\n" $, errout@var100 .@expr3322 str (@expr3323 ) $) $) { $return ; }
4305:
4306: $functionVariableUsage_ $(@expr1073745188 "cppcheck-2.8/test/testunusedvar.cpp" $, 4306 $, "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        srcdata = vdata;\n    }\n    srcdata = buf;\n    b(srcdata);\n}" $)
4307:
|
4315:
4316: ;
4317: $if $(@expr1073745189 $!@expr1073745190 $assertEquals $(@expr1073745191 "cppcheck-2.8/test/testunusedvar.cpp" $, 4317 $, "[test.cpp:5]: (style) Unused variable: vdata\n" $, errout@var100 .@expr3322 str (@expr3323 ) $) $) { $return ; }
4318: }
4319:
4320: void localvaralias7 ( ) {
4321: $functionVariableUsage_ $(@expr1073745194 "cppcheck-2.8/test/testunusedvar.cpp" $, 4321 $, "void foo()\n{\n    char *c[10];\n    char **cp;\n    cp = c;\n    *cp = 0;\n}" $)
4322:
|
4326:
4327: ;
4328: $if $(@expr1073745195 $!@expr1073745196 $assertEquals $(@expr1073745197 "cppcheck-2.8/test/testunusedvar.cpp" $, 4328 $, "" $, errout@var100 .@expr1073745198 str (@expr1073745199 ) $) $) { $return ; }
4329: }
4330:
4331: void localvaralias8 ( ) {
4332: $functionVariableUsage_ $(@expr1073745200 "cppcheck-2.8/test/testunusedvar.cpp" $, 4332 $, "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    else\n        pb = b4;\n    b(pb);\n}" $)
4333:
|
4347:
4348: ;
4349: $if $(@expr1073745201 $!@expr1073745202 $assertEquals $(@expr1073745203 "cppcheck-2.8/test/testunusedvar.cpp" $, 4349 $, "" $, errout@var100 .@expr3380 str (@expr3381 ) $) $) { $return ; }
4350:
4351: $functionVariableUsage_ $(@expr1073745206 "cppcheck-2.8/test/testunusedvar.cpp" $, 4351 $, "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    else {\n        pb = b1;\n        pb = b4;\n    }\n    b(pb);\n}" $)
4352:
|
4368:
4369: ;
4370: $if $(@expr1073745207 $!@expr1073745208 $assertEquals $(@expr1073745209 "cppcheck-2.8/test/testunusedvar.cpp" $, 4370 $, "" $, errout@var100 .@expr3380 str (@expr3381 ) $) $) { $return ; }
4371:
4372: $functionVariableUsage_ $(@expr1073745212 "cppcheck-2.8/test/testunusedvar.cpp" $, 4372 $, "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    else {\n        pb = b1;\n        pb = b2;\n        pb = b3;\n        pb = b4;\n    }\n    b(pb);\n}" $)
4373:
|
4391:
4392: ;
4393: $if $(@expr1073745213 $!@expr1073745214 $assertEquals $(@expr1073745215 "cppcheck-2.8/test/testunusedvar.cpp" $, 4393 $, "" $, errout@var100 .@expr3380 str (@expr3381 ) $) $) { $return ; }
4394:
4395:
4396: $functionVariableUsage_ $(@expr1073745218 "cppcheck-2.8/test/testunusedvar.cpp" $, 4396 $, "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    pb = b4;\n    b(pb);\n}" $)
4397:
|
4410:
4411: ;
4412: $if $(@expr1073745219 $!@expr1073745220 $assertEquals $(@expr1073745221 "cppcheck-2.8/test/testunusedvar.cpp" $, 4412 $, "[test.cpp:3]: (style) Unused variable: b1\n[test.cpp:4]: (style) Unused variable: b2\n[test.cpp:5]: (style) Unused variable: b3\n" $, errout@var100 .@expr3380 str (@expr3381 ) $) $) { $return
4413:
4414: ; }
4415:
4416: $functionVariableUsage_ $(@expr1073745224 "cppcheck-2.8/test/testunusedvar.cpp" $, 4416 $, "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n            else\n                pb = b4;\n        }\n    }\n    b(pb);\n}" $)
4417:
|
4435:
4436: ;
4437: $if $(@expr1073745225 $!@expr1073745226 $assertEquals $(@expr1073745227 "cppcheck-2.8/test/testunusedvar.cpp" $, 4437 $, "" $, errout@var100 .@expr3380 str (@expr3381 ) $) $) { $return ; }
4438:
4439: $functionVariableUsage_ $(@expr1073745230 "cppcheck-2.8/test/testunusedvar.cpp" $, 4439 $, "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n            else {\n                pb = b1;\n                pb = b4;\n            }\n        }\n    }\n    b(pb);\n}" $)
4440:
|
4460:
4461: ;
4462: $if $(@expr1073745231 $!@expr1073745232 $assertEquals $(@expr1073745233 "cppcheck-2.8/test/testunusedvar.cpp" $, 4462 $, "" $, errout@var100 .@expr3380 str (@expr3381 ) $) $) { $return ; }
4463:
4464: $functionVariableUsage_ $(@expr1073745236 "cppcheck-2.8/test/testunusedvar.cpp" $, 4464 $, "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n            else {\n                pb = b1;\n                pb = b2;\n                pb = b3;\n                pb = b4;\n            }\n        }\n    }\n    b(pb);\n}" $)
4465:
|
4487:
4488: ;
4489: $if $(@expr1073745237 $!@expr1073745238 $assertEquals $(@expr1073745239 "cppcheck-2.8/test/testunusedvar.cpp" $, 4489 $, "" $, errout@var100 .@expr3380 str (@expr3381 ) $) $) { $return ; }
4490:
4491: $functionVariableUsage_ $(@expr1073745242 "cppcheck-2.8/test/testunusedvar.cpp" $, 4491 $, "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n        }\n    }\n    pb = b4;\n    b(pb);\n}" $)
4492:
|
4509:
4510: ;
4511: $if $(@expr1073745243 $!@expr1073745244 $assertEquals $(@expr1073745245 "cppcheck-2.8/test/testunusedvar.cpp" $, 4511 $, "[test.cpp:3]: (style) Unused variable: b1\n[test.cpp:4]: (style) Unused variable: b2\n[test.cpp:5]: (style) Unused variable: b3\n" $, errout@var100 .@expr3380 str (@expr3381 ) $) $) { $return
4512:
4513: ; }
4514: }
4515:
4516: void localvaralias9 ( ) {
4517: $functionVariableUsage_ $(@expr1073745248 "cppcheck-2.8/test/testunusedvar.cpp" $, 4517 $, "void foo()\n{\n    Foo foo;\n    Foo &ref = foo;\n    ref[0] = 123;\n}" $)
4518:
|
4521:
4522: ;
4523: $if $(@expr1073745249 $!@expr1073745250 $assertEquals $(@expr1073745251 "cppcheck-2.8/test/testunusedvar.cpp" $, 4523 $, "" $, errout@var100 .@expr3428 str (@expr3429 ) $) $) { $return ; }
4524:
4525: $functionVariableUsage_ $(@expr1073745254 "cppcheck-2.8/test/testunusedvar.cpp" $, 4525 $, "void foo()\n{\n    Foo foo;\n    Foo &ref = foo;\n    ref[0] = 123;\n}" , "test.c" $)
4526:
|
4530:
4531: ;
4532: $todoAssertEquals $(@expr1073745255 "cppcheck-2.8/test/testunusedvar.cpp" $, 4532 $, "[test.c:5]: (style) Variable 'foo' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3428 str (@expr3429 ) $)
4533:
4534: ;
4535: }
4536:
4537: void localvaralias10 ( ) {
4538: $functionVariableUsage_ $(@expr1073745258 "cppcheck-2.8/test/testunusedvar.cpp" $, 4538 $, "void foo(Foo &foo)\n{\n    Foo &ref = foo;\n    int *x = &ref.x();\n    *x = 0;\n}" $)
4539:
|
4542:
4543: ;
4544: $if $(@expr1073745259 $!@expr1073745260 $assertEquals $(@expr1073745261 "cppcheck-2.8/test/testunusedvar.cpp" $, 4544 $, "" $, errout@var100 .@expr3438 str (@expr3439 ) $) $) { $return ; }
4545:
4546: $functionVariableUsage_ $(@expr1073745264 "cppcheck-2.8/test/testunusedvar.cpp" $, 4546 $, "void foo(Foo &foo)\n{\n    Foo &ref = foo;\n    int *x = &ref.x;\n    *x = 0;\n}" , "test.c" $)
4547:
|
4551:
4552: ;
4553: $if $(@expr1073745265 $!@expr1073745266 $assertEquals $(@expr1073745267 "cppcheck-2.8/test/testunusedvar.cpp" $, 4553 $, "" $, errout@var100 .@expr3438 str (@expr3439 ) $) $) { $return ; }
4554: }
4555:
4556: void localvaralias11 ( ) {
4557: $functionVariableUsage_ $(@expr1073745270 "cppcheck-2.8/test/testunusedvar.cpp" $, 4557 $, "void f(Foo &foo) {\n    std::set<int>::iterator x = foo.dostuff();\n    *(x) = 0;\n}" $)
4558:
4559:
4560: ;
4561: $if $(@expr1073745271 $!@expr1073745272 $assertEquals $(@expr1073745273 "cppcheck-2.8/test/testunusedvar.cpp" $, 4561 $, "" $, errout@var100 .@expr1073745274 str (@expr1073745275 ) $) $) { $return ; }
4562: }
4563:
4564: void localvaralias12 ( ) {
4565: $functionVariableUsage_ $(@expr1073745276 "cppcheck-2.8/test/testunusedvar.cpp" $, 4565 $, "void f(void) {\n    int a[4];\n    int *b = (int*)((int*)a+1);\n    x(b);\n}" $)
4566:
4567:
4568:
4569: ;
4570: $if $(@expr1073745277 $!@expr1073745278 $assertEquals $(@expr1073745279 "cppcheck-2.8/test/testunusedvar.cpp" $, 4570 $, "" $, errout@var100 .@expr3456 str (@expr3457 ) $) $) { $return ; }
4571:
4572: $functionVariableUsage_ $(@expr1073745282 "cppcheck-2.8/test/testunusedvar.cpp" $, 4572 $, "int f(void) {\n    int x=1,y;\n    y = (x * a) / 100;\n    return y;\n}" $)
4573:
4574:
4575:
4576: ;
4577: $if $(@expr1073745283 $!@expr1073745284 $assertEquals $(@expr1073745285 "cppcheck-2.8/test/testunusedvar.cpp" $, 4577 $, "" $, errout@var100 .@expr3456 str (@expr3457 ) $) $) { $return ; }
4578: }
4579:
4580: void localvaralias13 ( ) {
4581: $functionVariableUsage_ $(@expr1073745288 "cppcheck-2.8/test/testunusedvar.cpp" $, 4581 $, "void f(char *p) {\n    char a[4];\n    p = a;\n    strcpy(p, \"x\");\n}" $)
4582:
4583:
4584:
4585: ;
4586: $if $(@expr1073745289 $!@expr1073745290 $assertEquals $(@expr1073745291 "cppcheck-2.8/test/testunusedvar.cpp" $, 4586 $, "" $, errout@var100 .@expr3468 str (@expr3469 ) $) $) { $return ; }
4587:
4588: $functionVariableUsage_ $(@expr1073745294 "cppcheck-2.8/test/testunusedvar.cpp" $, 4588 $, "void f(char *p) {\n    char a[4];\n    p = a;\n    strcpy(p, \"x\");\n}" $)
4589:
4590:
4591:
4592: ;
4593: $todoAssertEquals $(@expr1073745295 "cppcheck-2.8/test/testunusedvar.cpp" $, 4593 $, "a is assigned value that is never used" $, "" $, errout@var100 .@expr3468 str (@expr3469 ) $) ;
4594: }
4595:
4596: void localvaralias14 ( ) {
4597: $functionVariableUsage_ $(@expr1073745298 "cppcheck-2.8/test/testunusedvar.cpp" $, 4597 $, "char * dostuff(char *p);\nvoid f() {\n    char a[4], *p=a;\n    p = dostuff(p);\n}" $)
4598:
4599:
4600:
4601: ;
4602: $if $(@expr1073745299 $!@expr1073745300 $assertEquals $(@expr1073745301 "cppcheck-2.8/test/testunusedvar.cpp" $, 4602 $, "[test.cpp:4]: (style) Variable 'p' is assigned a value that is never used.\n" $, errout@var100 .@expr3478 str (@expr3479 ) $) $) { $return ; }
4603:
4604: $functionVariableUsage_ $(@expr1073745304 "cppcheck-2.8/test/testunusedvar.cpp" $, 4604 $, "char * dostuff(char *&p);\nvoid f() {\n    char a[4], *p=a;\n    p = dostuff(p);\n}" $)
4605:
4606:
4607:
4608: ;
4609: $if $(@expr1073745305 $!@expr1073745306 $assertEquals $(@expr1073745307 "cppcheck-2.8/test/testunusedvar.cpp" $, 4609 $, "" $, errout@var100 .@expr3478 str (@expr3479 ) $) $) { $return ; }
4610:
4611: $functionVariableUsage_ $(@expr1073745310 "cppcheck-2.8/test/testunusedvar.cpp" $, 4611 $, "void f() {\n    char a[4], *p=a;\n    p = dostuff(p);\n}" $)
4612:
4613:
4614: ;
4615: $if $(@expr1073745311 $!@expr1073745312 $assertEquals $(@expr1073745313 "cppcheck-2.8/test/testunusedvar.cpp" $, 4615 $, "" $, errout@var100 .@expr3478 str (@expr3479 ) $) $) { $return ; }
4616: }
4617:
4618: void localvaralias15 ( ) {
4619: $functionVariableUsage_ $(@expr1073745316 "cppcheck-2.8/test/testunusedvar.cpp" $, 4619 $, "void f() {\n  int x=3;\n  int *p = &x;\n  int *p2[1] = {p};\n  dostuff(p2);\n}" $)
4620:
|
4623:
4624: ;
4625: $if $(@expr1073745317 $!@expr1073745318 $assertEquals $(@expr1073745319 "cppcheck-2.8/test/testunusedvar.cpp" $, 4625 $, "" $, errout@var100 .@expr1073745320 str (@expr1073745321 ) $) $) { $return ; }
4626: }
4627:
4628: void localvaralias16 ( ) {
4629: $functionVariableUsage_ $(@expr1073745322 "cppcheck-2.8/test/testunusedvar.cpp" $, 4629 $, "void f() {\n  auto x = dostuff();\n  p = x;\n  x->data[0] = 9;\n}" $)
4630:
4631:
4632:
4633: ;
4634: $if $(@expr1073745323 $!@expr1073745324 $assertEquals $(@expr1073745325 "cppcheck-2.8/test/testunusedvar.cpp" $, 4634 $, "" $, errout@var100 .@expr1073745326 str (@expr1073745327 ) $) $) { $return ; }
4635: }
4636:
4637: void localvaralias17 ( ) {
4638: $functionVariableUsage_ $(@expr1073745328 "cppcheck-2.8/test/testunusedvar.cpp" $, 4638 $, "void f() {\n  int x;\n  unknown_type p = &x;\n  *p = 9;\n}" , "test.c" $)
4639:
4640:
4641:
4642: ;
4643: $if $(@expr1073745329 $!@expr1073745330 $assertEquals $(@expr1073745331 "cppcheck-2.8/test/testunusedvar.cpp" $, 4643 $, "" $, errout@var100 .@expr1073745332 str (@expr1073745333 ) $) $) { $return ; }
4644: }
4645:
4646: void localvaralias18 ( ) {
4647: $functionVariableUsage_ $(@expr1073745334 "cppcheck-2.8/test/testunusedvar.cpp" $, 4647 $, "void add( std::vector< std::pair< int, double > >& v)\n{\n    std::vector< std::pair< int, double > >::iterator it;\n    for ( it = v.begin(); it != v.end(); ++it )\n    {\n        if ( x )\n        {\n            ( *it ).second = 0;\n            break;\n        }\n    }\n}" $)
4648:
|
4657:
4658: ;
4659: $if $(@expr1073745335 $!@expr1073745336 $assertEquals $(@expr1073745337 "cppcheck-2.8/test/testunusedvar.cpp" $, 4659 $, "" $, errout@var100 .@expr1073745338 str (@expr1073745339 ) $) $) { $return ; }
4660: }
4661:
4662: void localvaralias19 ( ) {
4663: $functionVariableUsage_ $(@expr1073745340 "cppcheck-2.8/test/testunusedvar.cpp" $, 4663 $, "void f() {\n    bool b0{}, b1{};\n    struct {\n        bool* pb;\n        int val;\n    } Map[] = { {&b0, 0}, {&b1, 1} };\n    b0 = true;\n    for (auto & m : Map)\n        if (m.pb && *m.pb)\n            m.val = 1;\n}\n" $)
4664:
|
4672:
4673: ;
4674: $if $(@expr1073745341 $!@expr1073745342 $assertEquals $(@expr1073745343 "cppcheck-2.8/test/testunusedvar.cpp" $, 4674 $, "" $, errout@var100 .@expr1073745344 str (@expr1073745345 ) $) $) { $return ; }
4675: }
4676:
4677: void localvarasm ( ) {
4678:
4679: $functionVariableUsage_ $(@expr1073745346 "cppcheck-2.8/test/testunusedvar.cpp" $, 4679 $, "void foo(int &b)\n{\n    int a;\n    asm();\n    b = a;\n}" $)
4680:
|
4683:
4684: ;
4685: $if $(@expr1073745347 $!@expr1073745348 $assertEquals $(@expr1073745349 "cppcheck-2.8/test/testunusedvar.cpp" $, 4685 $, "" $, errout@var100 .@expr1073745350 str (@expr1073745351 ) $) $) { $return ; }
4686: }
4687:
4688: void localvarStruct1 ( ) {
4689: $functionVariableUsage_ $(@expr1073745352 "cppcheck-2.8/test/testunusedvar.cpp" $, 4689 $, "void foo()\n{\n    static const struct{ int x, y, w, h; } bounds = {1,2,3,4};\n    return bounds.x + bounds.y + bounds.w + bounds.h;\n}" $)
4690:
4691:
4692:
4693: ;
4694: $if $(@expr1073745353 $!@expr1073745354 $assertEquals $(@expr1073745355 "cppcheck-2.8/test/testunusedvar.cpp" $, 4694 $, "" $, errout@var100 .@expr1073745356 str (@expr1073745357 ) $) $) { $return ; }
4695: }
4696:
4697: void localvarStruct2 ( ) {
4698: $functionVariableUsage_ $(@expr1073745358 "cppcheck-2.8/test/testunusedvar.cpp" $, 4698 $, "void foo()\n{\n    struct ABC { int a, b, c; };\n    struct ABC abc = { 1, 2, 3 };\n}" $)
4699:
4700:
4701:
4702: ;
4703: $if $(@expr1073745359 $!@expr1073745360 $assertEquals $(@expr1073745361 "cppcheck-2.8/test/testunusedvar.cpp" $, 4703 $, "[test.cpp:4]: (style) Variable 'abc' is assigned a value that is never used.\n" $, errout@var100 .@expr1073745362 str (@expr1073745363 ) $) $) { $return ; }
4704: }
4705:
4706: void localvarStruct3 ( ) {
4707: $functionVariableUsage_ $(@expr1073745364 "cppcheck-2.8/test/testunusedvar.cpp" $, 4707 $, "void foo()\n{\n    int a = 10;\n    union { struct { unsigned char x; }; unsigned char z; };\n    do {\n        func();\n    } while(a--);\n}" $)
4708:
|
4713:
4714: ;
4715: $todoAssertEquals $(@expr1073745365 "cppcheck-2.8/test/testunusedvar.cpp" $, 4715 $, "[test.cpp:4]: (style) Unused variable: x\n[test.cpp:4]: (style) Unused variable: z\n" $, "" $, errout@var100 .@expr1073745366 str (@expr1073745367 ) $)
4716: ;
4717: }
4718:
4719: void localvarStruct5 ( ) {
4720:
4721: $functionVariableUsage_ $(@expr1073745368 "cppcheck-2.8/test/testunusedvar.cpp" $, 4721 $, "int foo() {\n    A a;\n    return a.i;\n}" $)
4722:
4723:
4724: ;
4725: $if $(@expr1073745369 $!@expr1073745370 $assertEquals $(@expr1073745371 "cppcheck-2.8/test/testunusedvar.cpp" $, 4725 $, "" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4726:
4727: $functionVariableUsage_ $(@expr1073745374 "cppcheck-2.8/test/testunusedvar.cpp" $, 4727 $, "int foo() {\n    A a;\n    return 0;\n}" $)
4728:
4729:
4730: ;
4731: $if $(@expr1073745375 $!@expr1073745376 $assertEquals $(@expr1073745377 "cppcheck-2.8/test/testunusedvar.cpp" $, 4731 $, "" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4732:
4733: $functionVariableUsage_ $(@expr1073745380 "cppcheck-2.8/test/testunusedvar.cpp" $, 4733 $, "int foo() {\n    A a;\n    return 0;\n}\n" , "test.c" $)
4734:
4735:
4736:
4737: ;
4738: $if $(@expr1073745381 $!@expr1073745382 $assertEquals $(@expr1073745383 "cppcheck-2.8/test/testunusedvar.cpp" $, 4738 $, "[test.c:2]: (style) Unused variable: a\n" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4739:
4740:
4741: $functionVariableUsage_ $(@expr1073745386 "cppcheck-2.8/test/testunusedvar.cpp" $, 4741 $, "struct A { int i; };\nint foo() {\n    A a;\n    return a.i;\n}" $)
4742:
4743:
4744:
4745: ;
4746: $if $(@expr1073745387 $!@expr1073745388 $assertEquals $(@expr1073745389 "cppcheck-2.8/test/testunusedvar.cpp" $, 4746 $, "" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4747:
4748: $functionVariableUsage_ $(@expr1073745392 "cppcheck-2.8/test/testunusedvar.cpp" $, 4748 $, "struct A { int i; };\nint foo() {\n    A a;\n    a.i = 0;\n    return 0;\n}" $)
4749:
|
4752:
4753: ;
4754: $if $(@expr1073745393 $!@expr1073745394 $assertEquals $(@expr1073745395 "cppcheck-2.8/test/testunusedvar.cpp" $, 4754 $, "[test.cpp:4]: (style) Variable 'a.i' is assigned a value that is never used.\n" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4755:
4756: $functionVariableUsage_ $(@expr1073745398 "cppcheck-2.8/test/testunusedvar.cpp" $, 4756 $, "struct A { int i; };\nint foo() {\n    A a = { 0 };\n    return 0;\n}" $)
4757:
4758:
4759:
4760: ;
4761: $if $(@expr1073745399 $!@expr1073745400 $assertEquals $(@expr1073745401 "cppcheck-2.8/test/testunusedvar.cpp" $, 4761 $, "[test.cpp:3]: (style) Variable 'a' is assigned a value that is never used.\n" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4762:
4763:
4764: $functionVariableUsage_ $(@expr1073745404 "cppcheck-2.8/test/testunusedvar.cpp" $, 4764 $, "class A { int i; };\nint foo() {\n    A a = { 0 };\n    return 0;\n}" $)
4765:
4766:
4767:
4768: ;
4769: $if $(@expr1073745405 $!@expr1073745406 $assertEquals $(@expr1073745407 "cppcheck-2.8/test/testunusedvar.cpp" $, 4769 $, "[test.cpp:3]: (style) Variable 'a' is assigned a value that is never used.\n" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4770:
4771:
4772: $functionVariableUsage_ $(@expr1073745410 "cppcheck-2.8/test/testunusedvar.cpp" $, 4772 $, "class A { int i; public: A(); { } };\nint foo() {\n    A a;\n    return 0;\n}" $)
4773:
4774:
4775:
4776: ;
4777: $if $(@expr1073745411 $!@expr1073745412 $assertEquals $(@expr1073745413 "cppcheck-2.8/test/testunusedvar.cpp" $, 4777 $, "" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4778:
4779: $functionVariableUsage_ $(@expr1073745416 "cppcheck-2.8/test/testunusedvar.cpp" $, 4779 $, "struct A { int i; };\nint foo() {\n    A a;\n    return 0;\n}" $)
4780:
4781:
4782:
4783: ;
4784: $if $(@expr1073745417 $!@expr1073745418 $assertEquals $(@expr1073745419 "cppcheck-2.8/test/testunusedvar.cpp" $, 4784 $, "[test.cpp:3]: (style) Unused variable: a\n" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4785:
4786: $functionVariableUsage_ $(@expr1073745422 "cppcheck-2.8/test/testunusedvar.cpp" $, 4786 $, "class A { int i; };\nint foo() {\n    A a;\n    return 0;\n}" $)
4787:
4788:
4789:
4790: ;
4791: $if $(@expr1073745423 $!@expr1073745424 $assertEquals $(@expr1073745425 "cppcheck-2.8/test/testunusedvar.cpp" $, 4791 $, "[test.cpp:3]: (style) Unused variable: a\n" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4792:
4793: $functionVariableUsage_ $(@expr1073745428 "cppcheck-2.8/test/testunusedvar.cpp" $, 4793 $, "class A { int i; public: A(); { } };\nint foo() {\n    A a;\n    return 0;\n}" $)
4794:
4795:
4796:
4797: ;
4798: $if $(@expr1073745429 $!@expr1073745430 $assertEquals $(@expr1073745431 "cppcheck-2.8/test/testunusedvar.cpp" $, 4798 $, "" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4799:
4800: $functionVariableUsage_ $(@expr1073745434 "cppcheck-2.8/test/testunusedvar.cpp" $, 4800 $, "class A { unknown i; };\nint foo() {\n    A a;\n    return 0;\n}" $)
4801:
4802:
4803:
4804: ;
4805: $if $(@expr1073745435 $!@expr1073745436 $assertEquals $(@expr1073745437 "cppcheck-2.8/test/testunusedvar.cpp" $, 4805 $, "" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4806:
4807: $functionVariableUsage_ $(@expr1073745440 "cppcheck-2.8/test/testunusedvar.cpp" $, 4807 $, "class A : public Fred { int i; };\nint foo() {\n    A a;\n    return 0;\n}" $)
4808:
4809:
4810:
4811: ;
4812: $if $(@expr1073745441 $!@expr1073745442 $assertEquals $(@expr1073745443 "cppcheck-2.8/test/testunusedvar.cpp" $, 4812 $, "" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4813:
4814: $functionVariableUsage_ $(@expr1073745446 "cppcheck-2.8/test/testunusedvar.cpp" $, 4814 $, "class Fred {char c;};\nclass A : public Fred { int i; };\nint foo() {\n    A a;\n    return 0;\n}" $)
4815:
|
4818:
4819: ;
4820: $if $(@expr1073745447 $!@expr1073745448 $assertEquals $(@expr1073745449 "cppcheck-2.8/test/testunusedvar.cpp" $, 4820 $, "[test.cpp:4]: (style) Unused variable: a\n" $, errout@var100 .@expr3548 str (@expr3549 ) $) $) { $return ; }
4821: }
4822:
4823: void localvarStruct6 ( ) {
4824: $functionVariableUsage_ $(@expr1073745452 "cppcheck-2.8/test/testunusedvar.cpp" $, 4824 $, "class Type { };\nclass A {\npublic:\n    Type & get() { return t; }\nprivate:\n    Type t;\n};" $)
4825:
|
4829:
4830: ;
4831: $if $(@expr1073745453 $!@expr1073745454 $assertEquals $(@expr1073745455 "cppcheck-2.8/test/testunusedvar.cpp" $, 4831 $, "" $, errout@var100 .@expr1073745456 str (@expr1073745457 ) $) $) { $return ; }
4832: }
4833:
4834: void localvarStruct7 ( ) {
4835: $functionVariableUsage_ $(@expr1073745458 "cppcheck-2.8/test/testunusedvar.cpp" $, 4835 $, "struct IMAPARG {\n  void *text;\n};\n\nvoid fun() {\n  IMAPARG *args, aatt;\n  args = &aatt;\n  aatt.text = tmp;\n  dostuff(args);\n}" $)
4836:
|
4843:
4844: ;
4845: $if $(@expr1073745459 $!@expr1073745460 $assertEquals $(@expr1073745461 "cppcheck-2.8/test/testunusedvar.cpp" $, 4845 $, "" $, errout@var100 .@expr3638 str (@expr3639 ) $) $) { $return ; }
4846:
4847:
4848: $functionVariableUsage_ $(@expr1073745464 "cppcheck-2.8/test/testunusedvar.cpp" $, 4848 $, "struct ARG {\n  int a;\n  int b;\n};\n\nvoid fun() {\n  ARG aatt;\n  int *p = &aatt.b;\n  aatt.a = 123;\n  dostuff(p);\n}" $)
4849:
|
4857:
4858: ;
4859: $if $(@expr1073745465 $!@expr1073745466 $assertEquals $(@expr1073745467 "cppcheck-2.8/test/testunusedvar.cpp" $, 4859 $, "[test.cpp:9]: (style) Variable 'aatt.a' is assigned a value that is never used.\n" $, errout@var100 .@expr3638 str (@expr3639 ) $) $) { $return ; }
4860:
4861: $functionVariableUsage_ $(@expr1073745470 "cppcheck-2.8/test/testunusedvar.cpp" $, 4861 $, "struct AB {\n  int a;\n  int b;\n};\n\nvoid fun() {\n  AB ab;\n  int &a = ab.a;\n  ab.a = 123;\n  dostuff(a);\n}" $)
4862:
|
4870:
4871: ;
4872: $if $(@expr1073745471 $!@expr1073745472 $assertEquals $(@expr1073745473 "cppcheck-2.8/test/testunusedvar.cpp" $, 4872 $, "" $, errout@var100 .@expr3638 str (@expr3639 ) $) $) { $return ; }
4873: }
4874:
4875: void localvarStruct8 ( ) {
4876: $functionVariableUsage_ $(@expr1073745476 "cppcheck-2.8/test/testunusedvar.cpp" $, 4876 $, "struct s {\n     union {\n         struct {\n             int fld1 : 16;\n             int fld2 : 16;\n         };\n         int raw;\n     };\n};\n\nvoid foo() {\n      struct s test;\n      test.raw = 0x100;\n      dostuff(test.fld1, test.fld2);\n}" $)
4877:
|
4889:
4890: ;
4891: $if $(@expr1073745477 $!@expr1073745478 $assertEquals $(@expr1073745479 "cppcheck-2.8/test/testunusedvar.cpp" $, 4891 $, "" $, errout@var100 .@expr1073745480 str (@expr1073745481 ) $) $) { $return ; }
4892: }
4893:
4894: void localvarStruct9 ( ) {
4895: $functionVariableUsage_ $(@expr1073745482 "cppcheck-2.8/test/testunusedvar.cpp" $, 4895 $, "struct XY { int x; int y; };\n\nvoid foo() {\n      struct XY xy(get());\n      return xy.x + xy.y;\n}" $)
4896:
|
4899:
4900: ;
4901: $if $(@expr1073745483 $!@expr1073745484 $assertEquals $(@expr1073745485 "cppcheck-2.8/test/testunusedvar.cpp" $, 4901 $, "" $, errout@var100 .@expr1073745486 str (@expr1073745487 ) $) $) { $return ; }
4902: }
4903:
4904: void localvarStruct10 ( ) {
4905: $functionVariableUsage_ $(@expr1073745488 "cppcheck-2.8/test/testunusedvar.cpp" $, 4905 $, "struct S { int x; };\n\nvoid foo(const struct S s2) {\n    struct S s;\n    s.x = 3;\n    memcpy (&s, &s2, sizeof (S));\n}" $)
4906:
|
4910:
4911: ;
4912: $if $(@expr1073745489 $!@expr1073745490 $assertEquals $(@expr1073745491 "cppcheck-2.8/test/testunusedvar.cpp" $, 4912 $, "[test.cpp:5]: (style) Variable 's.x' is assigned a value that is never used.\n" $, errout@var100 .@expr1073745492 str (@expr1073745493 ) $) $) { $return ; }
4913: }
4914:
4915: void localvarStruct11 ( ) {
4916: $functionVariableUsage_ $(@expr1073745494 "cppcheck-2.8/test/testunusedvar.cpp" $, 4916 $, "struct Point { int x; int y; };\nPoint scale(Point *p);\n\nint foo() {\n    Point p;\n    p.x = 42;\n    return scale(&p).y;\n}" $)
4917:
|
4922:
4923: ;
4924: $if $(@expr1073745495 $!@expr1073745496 $assertEquals $(@expr1073745497 "cppcheck-2.8/test/testunusedvar.cpp" $, 4924 $, "" $, errout@var100 .@expr1073745498 str (@expr1073745499 ) $) $) { $return ; }
4925: }
4926:
4927: void localvarStruct12 ( ) {
4928: $functionVariableUsage_ $(@expr1073745500 "cppcheck-2.8/test/testunusedvar.cpp" $, 4928 $, "struct S { bool& Ref(); };\n\nvoid Set() {\n    S s;\n    s.Ref() = true;\n}" $)
4929:
|
4932:
4933: ;
4934: $if $(@expr1073745501 $!@expr1073745502 $assertEquals $(@expr1073745503 "cppcheck-2.8/test/testunusedvar.cpp" $, 4934 $, "" $, errout@var100 .@expr1073745504 str (@expr1073745505 ) $) $) { $return ; }
4935: }
4936:
4937: void localvarStruct13 ( ) {
4938: $functionVariableUsage_ $(@expr1073745506 "cppcheck-2.8/test/testunusedvar.cpp" $, 4938 $, "int f() {\n    std::vector<std::string> Mode;\n    Info Block = {\n        {\n            { &Mode  },\n            { &Level }\n        }\n    };\n    Mode.resize(N);\n    for (int i = 0; i < N; ++i)\n        Mode[i] = \"abc\";\n    return Save(&Block);\n}\n" $)
4939:
|
4949:
4950: ;
4951: $if $(@expr1073745507 $!@expr1073745508 $assertEquals $(@expr1073745509 "cppcheck-2.8/test/testunusedvar.cpp" $, 4951 $, "" $, errout@var100 .@expr1073745510 str (@expr1073745511 ) $) $) { $return ; }
4952: }
4953:
4954: void localvarStructArray ( ) {
4955:
4956:
4957:
4958: $functionVariableUsage_ $(@expr1073745512 "cppcheck-2.8/test/testunusedvar.cpp" $, 4958 $, "void f() {\n    struct X x[10];\n    x[0].a = 5;\n}" $)
4959:
4960:
4961: ;
4962: $if $(@expr1073745513 $!@expr1073745514 $assertEquals $(@expr1073745515 "cppcheck-2.8/test/testunusedvar.cpp" $, 4962 $, "[test.cpp:3]: (style) Variable 'x[0].a' is assigned a value that is never used.\n" $, errout@var100 .@expr1073745516 str (@expr1073745517 ) $) $) { $return ; }
4963: }
4964:
4965: void localvarUnion1 ( ) {
4966:
4967: $functionVariableUsage_ $(@expr1073745518 "cppcheck-2.8/test/testunusedvar.cpp" $, 4967 $, "static short read(FILE *fp) {\n    typedef union { short s; unsigned char c[2]; } u;\n    u x;\n    x.c[0] = fgetuc(fp);\n    x.c[1] = fgetuc(fp);\n    return x.s;\n}" $)
4968:
|
4972:
4973: ;
4974: $if $(@expr1073745519 $!@expr1073745520 $assertEquals $(@expr1073745521 "cppcheck-2.8/test/testunusedvar.cpp" $, 4974 $, "" $, errout@var100 .@expr1073745522 str (@expr1073745523 ) $) $) { $return ; }
4975: }
4976:
4977: void localvarOp ( ) {
4978: const char op@var123 [@expr1073745524 9 ] =@expr1073745525 "+-*/%&|^" ;
4979: for (@expr1073745526 const char *@expr1073745527 p@var124 =@expr1073745528 op@var123 ; *@expr3705 p@var124 ; ++@expr1073745530 p@var124 ) {
4980: std ::@expr1073745531 string code@var125 (@expr1073745532 "int main()\n{\n    int tmp = 10;\n    return 123 "
4981:
4982:
4983: +@expr1073745533 std ::@expr1073745534 string (@expr1073745535 1 , *@expr3705 p@var124 ) +@expr1073745537 " tmp;\n}"
4984: ) ;
4985: $functionVariableUsage_ $(@expr1073745538 "cppcheck-2.8/test/testunusedvar.cpp" $, 4985 $, code@var125 .@expr1073745539 c_str (@expr1073745540 ) $) ;
4986: $if $(@expr1073745541 $!@expr1073745542 $assertEquals $(@expr1073745543 "cppcheck-2.8/test/testunusedvar.cpp" $, 4986 $, "" $, errout@var100 .@expr1073745544 str (@expr1073745545 ) $) $) { $return ; }
4987: }
4988: }
4989:
4990: void localvarInvert ( ) {
4991: $functionVariableUsage_ $(@expr1073745546 "cppcheck-2.8/test/testunusedvar.cpp" $, 4991 $, "int main()\n{\n    int tmp = 10;\n    return ~tmp;\n}" $)
4992:
4993:
4994:
4995: ;
4996: $if $(@expr1073745547 $!@expr1073745548 $assertEquals $(@expr1073745549 "cppcheck-2.8/test/testunusedvar.cpp" $, 4996 $, "" $, errout@var100 .@expr1073745550 str (@expr1073745551 ) $) $) { $return ; }
4997: }
4998:
4999: void localvarIf ( ) {
5000: $functionVariableUsage_ $(@expr1073745552 "cppcheck-2.8/test/testunusedvar.cpp" $, 5000 $, "int main()\n{\n    int tmp = 10;\n    if ( tmp )\n        return 1;\n    return 0;\n}" $)
5001:
|
5005:
5006: ;
5007: $if $(@expr1073745553 $!@expr1073745554 $assertEquals $(@expr1073745555 "cppcheck-2.8/test/testunusedvar.cpp" $, 5007 $, "" $, errout@var100 .@expr1073745556 str (@expr1073745557 ) $) $) { $return ; }
5008: }
5009:
5010: void localvarIfElse ( ) {
5011: $functionVariableUsage_ $(@expr1073745558 "cppcheck-2.8/test/testunusedvar.cpp" $, 5011 $, "int foo()\n{\n    int tmp1 = 1;\n    int tmp2 = 2;\n    int tmp3 = 3;\n    return tmp1 ? tmp2 : tmp3;\n}" $)
5012:
|
5016:
5017: ;
5018: $if $(@expr1073745559 $!@expr1073745560 $assertEquals $(@expr1073745561 "cppcheck-2.8/test/testunusedvar.cpp" $, 5018 $, "" $, errout@var100 .@expr1073745562 str (@expr1073745563 ) $) $) { $return ; }
5019: }
5020:
5021: void localvarDeclaredInIf ( ) {
5022: $functionVariableUsage_ $(@expr1073745564 "cppcheck-2.8/test/testunusedvar.cpp" $, 5022 $, "int foo(int x)\n{\n    if (int y = x % 2)\n        return 2;\n    else\n        return 1;\n}" $)
5023:
|
5027:
5028: ;
5029: $if $(@expr1073745565 $!@expr1073745566 $assertEquals $(@expr1073745567 "cppcheck-2.8/test/testunusedvar.cpp" $, 5029 $, "[test.cpp:3]: (style) Variable 'y' is assigned a value that is never used.\n" $, errout@var100 .@expr3744 str (@expr3745 ) $) $) { $return ; }
5030:
5031: $functionVariableUsage_ $(@expr1073745570 "cppcheck-2.8/test/testunusedvar.cpp" $, 5031 $, "int foo(int x)\n{\n    if (int y = x % 2)\n        return y;\n    else\n        return 1;\n}" $)
5032:
|
5036:
5037: ;
5038: $if $(@expr1073745571 $!@expr1073745572 $assertEquals $(@expr1073745573 "cppcheck-2.8/test/testunusedvar.cpp" $, 5038 $, "" $, errout@var100 .@expr3744 str (@expr3745 ) $) $) { $return ; }
5039:
5040: $functionVariableUsage_ $(@expr1073745576 "cppcheck-2.8/test/testunusedvar.cpp" $, 5040 $, "int foo(int x)\n{\n    if (int y = x % 2)\n        return 2;\n    else\n        return y;\n}" $)
5041:
|
5045:
5046: ;
5047: $if $(@expr1073745577 $!@expr1073745578 $assertEquals $(@expr1073745579 "cppcheck-2.8/test/testunusedvar.cpp" $, 5047 $, "" $, errout@var100 .@expr3744 str (@expr3745 ) $) $) { $return ; }
5048: }
5049:
5050: void localvarOpAssign ( ) {
5051: $functionVariableUsage_ $(@expr1073745582 "cppcheck-2.8/test/testunusedvar.cpp" $, 5051 $, "void foo()\n{\n    int a = 1;\n    int b = 2;\n    a |= b;\n}" $)
5052:
|
5055:
5056: ;
5057: $if $(@expr1073745583 $!@expr1073745584 $assertEquals $(@expr1073745585 "cppcheck-2.8/test/testunusedvar.cpp" $, 5057 $, "[test.cpp:3]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" $, errout@var100 .@expr3762 str (@expr3763 ) $) $) { $return
5058: ; }
5059:
5060: $functionVariableUsage_ $(@expr1073745588 "cppcheck-2.8/test/testunusedvar.cpp" $, 5060 $, "void foo() {\n    int a = 1;\n    (b).x += a;\n}" $)
5061:
5062:
5063: ;
5064: $if $(@expr1073745589 $!@expr1073745590 $assertEquals $(@expr1073745591 "cppcheck-2.8/test/testunusedvar.cpp" $, 5064 $, "" $, errout@var100 .@expr3762 str (@expr3763 ) $) $) { $return ; }
5065:
5066: $functionVariableUsage_ $(@expr1073745594 "cppcheck-2.8/test/testunusedvar.cpp" $, 5066 $, "void foo() {\n    int a=1, b[10];\n    b[0] = x;\n    a += b[0];\n    return a;\n}" $)
5067:
|
5070:
5071: ;
5072: $if $(@expr1073745595 $!@expr1073745596 $assertEquals $(@expr1073745597 "cppcheck-2.8/test/testunusedvar.cpp" $, 5072 $, "" $, errout@var100 .@expr3762 str (@expr3763 ) $) $) { $return ; }
5073:
5074: $functionVariableUsage_ $(@expr1073745600 "cppcheck-2.8/test/testunusedvar.cpp" $, 5074 $, "void f(int *start, int *stop) {\n  int length = *start - *stop;\n  if (length < 10000)\n    length = 10000;\n  *stop -= length;\n}" $)
5075:
|
5078:
5079: ;
5080: $if $(@expr1073745601 $!@expr1073745602 $assertEquals $(@expr1073745603 "cppcheck-2.8/test/testunusedvar.cpp" $, 5080 $, "" $, errout@var100 .@expr3762 str (@expr3763 ) $) $) { $return ; }
5081:
5082: $functionVariableUsage_ $(@expr1073745606 "cppcheck-2.8/test/testunusedvar.cpp" $, 5082 $, "void f(int a) {\n  int x = 3;\n  a &= ~x;\n  return a;\n}" $)
5083:
5084:
5085:
5086: ;
5087: $if $(@expr1073745607 $!@expr1073745608 $assertEquals $(@expr1073745609 "cppcheck-2.8/test/testunusedvar.cpp" $, 5087 $, "" $, errout@var100 .@expr3762 str (@expr3763 ) $) $) { $return ; }
5088:
5089:
5090: $functionVariableUsage_ $(@expr1073745612 "cppcheck-2.8/test/testunusedvar.cpp" $, 5090 $, "void f() {\n  Fred fred;\n  int *a; a = b;\n  fred += a;\n}" $)
5091:
5092:
5093:
5094: ;
5095: $if $(@expr1073745613 $!@expr1073745614 $assertEquals $(@expr1073745615 "cppcheck-2.8/test/testunusedvar.cpp" $, 5095 $, "[test.cpp:4]: (information) --check-library: Provide <type-checks><unusedvar> configuration for Fred\n" $, errout@var100 .@expr3762 str (@expr3763 ) $) $) { $return ; }
5096:
5097:
5098: $functionVariableUsage_ $(@expr1073745618 "cppcheck-2.8/test/testunusedvar.cpp" $, 5098 $, "void f(std::pair<int,int> x) {\n  std::pair<int,int> fred;\n  fred = x;\n}" $)
5099:
5100:
5101: ;
5102: $if $(@expr1073745619 $!@expr1073745620 $assertEquals $(@expr1073745621 "cppcheck-2.8/test/testunusedvar.cpp" $, 5102 $, "[test.cpp:3]: (style) Variable 'fred' is assigned a value that is never used.\n" $, errout@var100 .@expr3762 str (@expr3763 ) $) $) { $return ; }
5103: }
5104:
5105: void localvarFor ( ) {
5106: $functionVariableUsage_ $(@expr1073745624 "cppcheck-2.8/test/testunusedvar.cpp" $, 5106 $, "void foo()\n{\n    int a = 1;\n    for (;a;);\n}" $)
5107:
5108:
5109:
5110: ;
5111: $if $(@expr1073745625 $!@expr1073745626 $assertEquals $(@expr1073745627 "cppcheck-2.8/test/testunusedvar.cpp" $, 5111 $, "" $, errout@var100 .@expr3804 str (@expr3805 ) $) $) { $return ; }
5112:
5113: $functionVariableUsage_ $(@expr1073745630 "cppcheck-2.8/test/testunusedvar.cpp" $, 5113 $, "void foo() {\n    for (int i = 0; (pci = cdi_list_get(pciDevices, i)); i++)\n    {}\n}" $)
5114:
5115:
5116: ;
5117: $if $(@expr1073745631 $!@expr1073745632 $assertEquals $(@expr1073745633 "cppcheck-2.8/test/testunusedvar.cpp" $, 5117 $, "" $, errout@var100 .@expr3804 str (@expr3805 ) $) $) { $return ; }
5118: }
5119:
5120: void localvarForEach ( ) {
5121: $functionVariableUsage_ $(@expr1073745636 "cppcheck-2.8/test/testunusedvar.cpp" $, 5121 $, "void foo() {\n    int i = -1;\n    int a[] = {1,2,3};\n    FOREACH_X (int x, a) {\n        if (i==x) return x;\n        i = x;\n    }\n}" $)
5122:
|
5127:
5128: ;
5129: $if $(@expr1073745637 $!@expr1073745638 $assertEquals $(@expr1073745639 "cppcheck-2.8/test/testunusedvar.cpp" $, 5129 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5130:
5131:
5132: $functionVariableUsage_ $(@expr1073745642 "cppcheck-2.8/test/testunusedvar.cpp" $, 5132 $, "void f() {\n  std::map<int,int> ints;\n  ints[0]= 1;\n  for each(std::pair<int,int> i in ints) { x += i.first; }\n}" $)
5133:
5134:
5135:
5136: ;
5137: $if $(@expr1073745643 $!@expr1073745644 $assertEquals $(@expr1073745645 "cppcheck-2.8/test/testunusedvar.cpp" $, 5137 $, "" $, errout@var100 .@expr3816 str (@expr3817 ) $) $) { $return ; }
5138: }
5139:
5140: void localvarShift1 ( ) {
5141: $functionVariableUsage_ $(@expr1073745648 "cppcheck-2.8/test/testunusedvar.cpp" $, 5141 $, "int foo()\n{\n    int var = 1;\n    return 1 >> var;\n}" $)
5142:
5143:
5144:
5145: ;
5146: $if $(@expr1073745649 $!@expr1073745650 $assertEquals $(@expr1073745651 "cppcheck-2.8/test/testunusedvar.cpp" $, 5146 $, "" $, errout@var100 .@expr1073745652 str (@expr1073745653 ) $) $) { $return ; }
5147: }
5148:
5149: void localvarShift3 ( ) {
5150: $functionVariableUsage_ $(@expr1073745654 "cppcheck-2.8/test/testunusedvar.cpp" $, 5150 $, "int foo()\n{\n    QList<int *> ints;\n    ints << 1;\n}" $)
5151:
5152:
5153:
5154: ;
5155: $if $(@expr1073745655 $!@expr1073745656 $assertEquals $(@expr1073745657 "cppcheck-2.8/test/testunusedvar.cpp" $, 5155 $, "" $, errout@var100 .@expr3834 str (@expr3835 ) $) $) { $return ; }
5156:
5157: $functionVariableUsage_ $(@expr1073745660 "cppcheck-2.8/test/testunusedvar.cpp" $, 5157 $, "int foo() {\n    int x;\n    x << 1;\n    return x;\n}" $)
5158:
5159:
5160:
5161: ;
5162: $if $(@expr1073745661 $!@expr1073745662 $assertEquals $(@expr1073745663 "cppcheck-2.8/test/testunusedvar.cpp" $, 5162 $, "" $, errout@var100 .@expr3834 str (@expr3835 ) $) $) { $return ; }
5163: }
5164:
5165: void localvarCast ( ) {
5166: $functionVariableUsage_ $(@expr1073745666 "cppcheck-2.8/test/testunusedvar.cpp" $, 5166 $, "int foo()\n{\n    int a = 1;\n    int b = static_cast<int>(a);\n    return b;\n}" $)
5167:
|
5170:
5171: ;
5172: $if $(@expr1073745667 $!@expr1073745668 $assertEquals $(@expr1073745669 "cppcheck-2.8/test/testunusedvar.cpp" $, 5172 $, "" $, errout@var100 .@expr1073745670 str (@expr1073745671 ) $) $) { $return ; }
5173: }
5174:
5175: void localvarClass ( ) {
5176: $functionVariableUsage_ $(@expr1073745672 "cppcheck-2.8/test/testunusedvar.cpp" $, 5176 $, "int foo()\n{\n    class B : public A {\n        int a;\n        int f() { return a; }\n    } b;\n}" $)
5177:
|
5181:
5182: ;
5183: $if $(@expr1073745673 $!@expr1073745674 $assertEquals $(@expr1073745675 "cppcheck-2.8/test/testunusedvar.cpp" $, 5183 $, "" $, errout@var100 .@expr1073745676 str (@expr1073745677 ) $) $) { $return ; }
5184: }
5185:
5186: void localvarUnused ( ) {
5187: $functionVariableUsage_ $(@expr1073745678 "cppcheck-2.8/test/testunusedvar.cpp" $, 5187 $, "int foo()\n{\n    bool test __attribute__((unused));\n}" $)
5188:
5189:
5190: ;
5191: $if $(@expr1073745679 $!@expr1073745680 $assertEquals $(@expr1073745681 "cppcheck-2.8/test/testunusedvar.cpp" $, 5191 $, "" $, errout@var100 .@expr3858 str (@expr3859 ) $) $) { $return ; }
5192:
5193: $functionVariableUsage_ $(@expr1073745684 "cppcheck-2.8/test/testunusedvar.cpp" $, 5193 $, "int foo()\n{\n    bool test __attribute__((unused)) = true;\n}" $)
5194:
5195:
5196: ;
5197: $if $(@expr1073745685 $!@expr1073745686 $assertEquals $(@expr1073745687 "cppcheck-2.8/test/testunusedvar.cpp" $, 5197 $, "" $, errout@var100 .@expr3858 str (@expr3859 ) $) $) { $return ; }
5198:
5199: $functionVariableUsage_ $(@expr1073745690 "cppcheck-2.8/test/testunusedvar.cpp" $, 5199 $, "int foo()\n{\n    bool __attribute__((unused)) test;\n}" $)
5200:
5201:
5202: ;
5203: $if $(@expr1073745691 $!@expr1073745692 $assertEquals $(@expr1073745693 "cppcheck-2.8/test/testunusedvar.cpp" $, 5203 $, "" $, errout@var100 .@expr3858 str (@expr3859 ) $) $) { $return ; }
5204:
5205: $functionVariableUsage_ $(@expr1073745696 "cppcheck-2.8/test/testunusedvar.cpp" $, 5205 $, "int foo()\n{\n    bool __attribute__((unused)) test = true;\n}" $)
5206:
5207:
5208: ;
5209: $if $(@expr1073745697 $!@expr1073745698 $assertEquals $(@expr1073745699 "cppcheck-2.8/test/testunusedvar.cpp" $, 5209 $, "" $, errout@var100 .@expr3858 str (@expr3859 ) $) $) { $return ; }
5210:
5211: $functionVariableUsage_ $(@expr1073745702 "cppcheck-2.8/test/testunusedvar.cpp" $, 5211 $, "int foo()\n{\n    bool test __attribute__((used));\n}" $)
5212:
5213:
5214: ;
5215: $if $(@expr1073745703 $!@expr1073745704 $assertEquals $(@expr1073745705 "cppcheck-2.8/test/testunusedvar.cpp" $, 5215 $, "" $, errout@var100 .@expr3858 str (@expr3859 ) $) $) { $return ; }
5216:
5217: $functionVariableUsage_ $(@expr1073745708 "cppcheck-2.8/test/testunusedvar.cpp" $, 5217 $, "int foo()\n{\n    bool __attribute__((used)) test;\n}" $)
5218:
5219:
5220: ;
5221: $if $(@expr1073745709 $!@expr1073745710 $assertEquals $(@expr1073745711 "cppcheck-2.8/test/testunusedvar.cpp" $, 5221 $, "" $, errout@var100 .@expr3858 str (@expr3859 ) $) $) { $return ; }
5222: }
5223:
5224: void localvarFunction ( ) {
5225: $functionVariableUsage_ $(@expr1073745714 "cppcheck-2.8/test/testunusedvar.cpp" $, 5225 $, "void check_dlsym(void*& h)\n{\n  typedef void (*function_type) (void);\n  function_type fn;\n  fn = reinterpret_cast<function_type>(dlsym(h, \"try_allocation\"));\n  fn();\n}" $)
5226:
|
5230:
5231: ;
5232: $if $(@expr1073745715 $!@expr1073745716 $assertEquals $(@expr1073745717 "cppcheck-2.8/test/testunusedvar.cpp" $, 5232 $, "" $, errout@var100 .@expr1073745718 str (@expr1073745719 ) $) $) { $return ; }
5233: }
5234:
5235: void localvarstatic ( ) {
5236: $functionVariableUsage_ $(@expr1073745720 "cppcheck-2.8/test/testunusedvar.cpp" $, 5236 $, "void foo()\n{\n    static int i;\n    static const int ci;\n    static std::string s;\n    static const std::string cs;\n}" $)
5237:
|
5241:
5242: ;
5243: $if $(@expr1073745721 $!@expr1073745722 $assertEquals $(@expr1073745723 "cppcheck-2.8/test/testunusedvar.cpp" $, 5243 $, "[test.cpp:3]: (style) Unused variable: i\n[test.cpp:4]: (style) Unused variable: ci\n[test.cpp:5]: (style) Unused variable: s\n[test.cpp:6]: (style) Unused variable: cs\n" $, errout@var100 .@expr3900 str (@expr3901 ) $) $) { $return
5244:
5245:
5246:
5247: ; }
5248:
5249: $functionVariableUsage_ $(@expr1073745726 "cppcheck-2.8/test/testunusedvar.cpp" $, 5249 $, "void foo()\n{\n    static int i = 0;\n}" $)
5250:
5251:
5252: ;
5253: $todoAssertEquals $(@expr1073745727 "cppcheck-2.8/test/testunusedvar.cpp" $, 5253 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3900 str (@expr3901 ) $)
5254:
5255: ;
5256:
5257: $functionVariableUsage_ $(@expr1073745730 "cppcheck-2.8/test/testunusedvar.cpp" $, 5257 $, "void foo()\n{\n    static int i(0);\n}" $)
5258:
5259:
5260: ;
5261: $todoAssertEquals $(@expr1073745731 "cppcheck-2.8/test/testunusedvar.cpp" $, 5261 $, "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3900 str (@expr3901 ) $)
5262:
5263: ;
5264:
5265: $functionVariableUsage_ $(@expr1073745734 "cppcheck-2.8/test/testunusedvar.cpp" $, 5265 $, "void foo()\n{\n    static int j = 0;\n    static int i(j);\n}" $)
5266:
5267:
5268:
5269: ;
5270: $todoAssertEquals $(@expr1073745735 "cppcheck-2.8/test/testunusedvar.cpp" $, 5270 $, "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3900 str (@expr3901 ) $)
5271:
5272: ;
5273:
5274: $functionVariableUsage_ $(@expr1073745738 "cppcheck-2.8/test/testunusedvar.cpp" $, 5274 $, "int * foo(int x)\n{\n    static int a[] = { 3, 4, 5, 6 };\n    static int b[] = { 4, 5, 6, 7 };\n    static int c[] = { 5, 6, 7, 8 };\n    b[1] = 1;\n    return x ? a : c;\n}" $)
5275:
|
5280:
5281: ;
5282: $todoAssertEquals $(@expr1073745739 "cppcheck-2.8/test/testunusedvar.cpp" $, 5282 $, "[test.cpp:6]: (style) Variable 'b' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr3900 str (@expr3901 ) $)
5283:
5284: ;
5285:
5286: $functionVariableUsage_ $(@expr1073745742 "cppcheck-2.8/test/testunusedvar.cpp" $, 5286 $, "void foo()\n{\n    static int i = 0;\n    if(i < foo())\n        i += 5;\n}" $)
5287:
|
5290:
5291: ;
5292: $if $(@expr1073745743 $!@expr1073745744 $assertEquals $(@expr1073745745 "cppcheck-2.8/test/testunusedvar.cpp" $, 5292 $, "" $, errout@var100 .@expr3900 str (@expr3901 ) $) $) { $return ; }
5293:
5294: $functionVariableUsage_ $(@expr1073745748 "cppcheck-2.8/test/testunusedvar.cpp" $, 5294 $, "void foo() {\n    static int x = 0;\n    print(x);\n    if(x > 5)\n        x = 0;\n    else\n        x++;\n}" $)
5295:
|
5300:
5301: ;
5302: $if $(@expr1073745749 $!@expr1073745750 $assertEquals $(@expr1073745751 "cppcheck-2.8/test/testunusedvar.cpp" $, 5302 $, "" $, errout@var100 .@expr3900 str (@expr3901 ) $) $) { $return ; }
5303:
5304: $functionVariableUsage_ $(@expr1073745754 "cppcheck-2.8/test/testunusedvar.cpp" $, 5304 $, "void foo(int value) {\n    static int array[16] = {0};\n    if(array[value]) {}\n    array[value] = 1;\n}" $)
5305:
5306:
5307:
5308: ;
5309: $if $(@expr1073745755 $!@expr1073745756 $assertEquals $(@expr1073745757 "cppcheck-2.8/test/testunusedvar.cpp" $, 5309 $, "" $, errout@var100 .@expr3900 str (@expr3901 ) $) $) { $return ; }
5310: }
5311:
5312: void localvarextern ( ) {
5313: $functionVariableUsage_ $(@expr1073745760 "cppcheck-2.8/test/testunusedvar.cpp" $, 5313 $, "void foo() {\n    extern int i;\n    i = 0;\n}" $)
5314:
5315:
5316: ;
5317: $if $(@expr1073745761 $!@expr1073745762 $assertEquals $(@expr1073745763 "cppcheck-2.8/test/testunusedvar.cpp" $, 5317 $, "" $, errout@var100 .@expr1073745764 str (@expr1073745765 ) $) $) { $return ; }
5318: }
5319:
5320: void localvardynamic1 ( ) {
5321: $functionVariableUsage_ $(@expr1073745766 "cppcheck-2.8/test/testunusedvar.cpp" $, 5321 $, "void foo()\n{\n    void* ptr = malloc(16);\n    free(ptr);\n}" $)
5322:
5323:
5324:
5325: ;
5326: $if $(@expr1073745767 $!@expr1073745768 $assertEquals $(@expr1073745769 "cppcheck-2.8/test/testunusedvar.cpp" $, 5326 $, "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5327:
5328: $functionVariableUsage_ $(@expr1073745772 "cppcheck-2.8/test/testunusedvar.cpp" $, 5328 $, "void foo()\n{\n    char* ptr = new char[16];\n    delete[] ptr;\n}" $)
5329:
5330:
5331:
5332: ;
5333: $if $(@expr1073745773 $!@expr1073745774 $assertEquals $(@expr1073745775 "cppcheck-2.8/test/testunusedvar.cpp" $, 5333 $, "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5334:
5335:
5336:
5337: $functionVariableUsage_ $(@expr1073745778 "cppcheck-2.8/test/testunusedvar.cpp" $, 5337 $, "void foo()\n{\n    char* ptr = new ( nothrow ) char[16];\n    delete[] ptr;\n}" $)
5338:
5339:
5340:
5341: ;
5342: $if $(@expr1073745779 $!@expr1073745780 $assertEquals $(@expr1073745781 "cppcheck-2.8/test/testunusedvar.cpp" $, 5342 $, "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5343:
5344: $functionVariableUsage_ $(@expr1073745784 "cppcheck-2.8/test/testunusedvar.cpp" $, 5344 $, "void foo()\n{\n    char* ptr = new ( std::nothrow ) char[16];\n    delete[] ptr;\n}" $)
5345:
5346:
5347:
5348: ;
5349: $if $(@expr1073745785 $!@expr1073745786 $assertEquals $(@expr1073745787 "cppcheck-2.8/test/testunusedvar.cpp" $, 5349 $, "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5350:
5351:
5352:
5353: $functionVariableUsage_ $(@expr1073745790 "cppcheck-2.8/test/testunusedvar.cpp" $, 5353 $, "void foo()\n{\n    char* ptr = new char;\n    delete ptr;\n}" $)
5354:
5355:
5356:
5357: ;
5358: $if $(@expr1073745791 $!@expr1073745792 $assertEquals $(@expr1073745793 "cppcheck-2.8/test/testunusedvar.cpp" $, 5358 $, "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5359:
5360: $functionVariableUsage_ $(@expr1073745796 "cppcheck-2.8/test/testunusedvar.cpp" $, 5360 $, "void foo()\n{\n    void* ptr = malloc(16);\n    ptr[0] = 123;\n    free(ptr);\n}" $)
5361:
|
5364:
5365: ;
5366: $if $(@expr1073745797 $!@expr1073745798 $assertEquals $(@expr1073745799 "cppcheck-2.8/test/testunusedvar.cpp" $, 5366 $, "" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5367:
5368: $functionVariableUsage_ $(@expr1073745802 "cppcheck-2.8/test/testunusedvar.cpp" $, 5368 $, "void foo()\n{\n    char* ptr = new char[16];\n    ptr[0] = 123;\n    delete[] ptr;\n}" $)
5369:
|
5372:
5373: ;
5374: $if $(@expr1073745803 $!@expr1073745804 $assertEquals $(@expr1073745805 "cppcheck-2.8/test/testunusedvar.cpp" $, 5374 $, "" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5375:
5376: $functionVariableUsage_ $(@expr1073745808 "cppcheck-2.8/test/testunusedvar.cpp" $, 5376 $, "void foo()\n{\n    Fred* fred = new Fred;\n    std::cout << \"test\" << std::endl;\n    delete fred;\n}" $)
5377:
|
5380:
5381: ;
5382: $if $(@expr1073745809 $!@expr1073745810 $assertEquals $(@expr1073745811 "cppcheck-2.8/test/testunusedvar.cpp" $, 5382 $, "" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5383:
5384: $functionVariableUsage_ $(@expr1073745814 "cppcheck-2.8/test/testunusedvar.cpp" $, 5384 $, "struct Fred { int a; };\nvoid foo()\n{\n    Fred* fred = new Fred;\n    std::cout << \"test\" << std::endl;\n    delete fred;\n}" $)
5385:
|
5389:
5390: ;
5391: $if $(@expr1073745815 $!@expr1073745816 $assertEquals $(@expr1073745817 "cppcheck-2.8/test/testunusedvar.cpp" $, 5391 $, "[test.cpp:4]: (style) Variable 'fred' is allocated memory that is never used.\n" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5392:
5393: $functionVariableUsage_ $(@expr1073745820 "cppcheck-2.8/test/testunusedvar.cpp" $, 5393 $, "struct Fred { int a; Fred() : a(0) {} };\nvoid foo()\n{\n    Fred* fred = new Fred;\n    std::cout << \"test\" << std::endl;\n    delete fred;\n}" $)
5394:
|
5398:
5399: ;
5400: $if $(@expr1073745821 $!@expr1073745822 $assertEquals $(@expr1073745823 "cppcheck-2.8/test/testunusedvar.cpp" $, 5400 $, "[test.cpp:4]: (style) Variable 'fred' is allocated memory that is never used.\n" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5401:
5402: $functionVariableUsage_ $(@expr1073745826 "cppcheck-2.8/test/testunusedvar.cpp" $, 5402 $, "void foo()\n{\n    Fred* fred = malloc(sizeof(Fred));\n    std::cout << \"test\" << std::endl;\n    free(fred);\n}" $)
5403:
|
5406:
5407: ;
5408: $if $(@expr1073745827 $!@expr1073745828 $assertEquals $(@expr1073745829 "cppcheck-2.8/test/testunusedvar.cpp" $, 5408 $, "[test.cpp:3]: (style) Variable 'fred' is allocated memory that is never used.\n" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5409:
5410:
5411: $functionVariableUsage_ $(@expr1073745832 "cppcheck-2.8/test/testunusedvar.cpp" $, 5411 $, "void foo()\n{\n    char* ptr = names[i];\n    delete[] ptr;\n}" $)
5412:
5413:
5414:
5415: ;
5416: $if $(@expr1073745833 $!@expr1073745834 $assertEquals $(@expr1073745835 "cppcheck-2.8/test/testunusedvar.cpp" $, 5416 $, "" $, errout@var100 .@expr3946 str (@expr3947 ) $) $) { $return ; }
5417: }
5418:
5419: void localvardynamic2 ( ) {
5420: $functionVariableUsage_ $(@expr1073745838 "cppcheck-2.8/test/testunusedvar.cpp" $, 5420 $, "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    free(ptr);\n}" $)
5421:
|
5424:
5425: ;
5426: $if $(@expr1073745839 $!@expr1073745840 $assertEquals $(@expr1073745841 "cppcheck-2.8/test/testunusedvar.cpp" $, 5426 $, "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5427:
5428: $functionVariableUsage_ $(@expr1073745844 "cppcheck-2.8/test/testunusedvar.cpp" $, 5428 $, "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    ptr->i = 0;\n    free(ptr);\n}" $)
5429:
|
5433:
5434: ;
5435: $if $(@expr1073745845 $!@expr1073745846 $assertEquals $(@expr1073745847 "cppcheck-2.8/test/testunusedvar.cpp" $, 5435 $, "" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5436:
5437: $functionVariableUsage_ $(@expr1073745850 "cppcheck-2.8/test/testunusedvar.cpp" $, 5437 $, "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    free(ptr);\n}" $)
5438:
|
5441:
5442: ;
5443: $if $(@expr1073745851 $!@expr1073745852 $assertEquals $(@expr1073745853 "cppcheck-2.8/test/testunusedvar.cpp" $, 5443 $, "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5444:
5445: $functionVariableUsage_ $(@expr1073745856 "cppcheck-2.8/test/testunusedvar.cpp" $, 5445 $, "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    ptr->i = 0;\n    free(ptr);\n}" $)
5446:
|
5450:
5451: ;
5452: $if $(@expr1073745857 $!@expr1073745858 $assertEquals $(@expr1073745859 "cppcheck-2.8/test/testunusedvar.cpp" $, 5452 $, "" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5453:
5454: $functionVariableUsage_ $(@expr1073745862 "cppcheck-2.8/test/testunusedvar.cpp" $, 5454 $, "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    delete ptr;\n}" $)
5455:
|
5458:
5459: ;
5460: $if $(@expr1073745863 $!@expr1073745864 $assertEquals $(@expr1073745865 "cppcheck-2.8/test/testunusedvar.cpp" $, 5460 $, "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5461:
5462:
5463:
5464: $functionVariableUsage_ $(@expr1073745868 "cppcheck-2.8/test/testunusedvar.cpp" $, 5464 $, "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new (nothrow ) Fred();\n    delete ptr;\n}" $)
5465:
|
5468:
5469: ;
5470: $if $(@expr1073745869 $!@expr1073745870 $assertEquals $(@expr1073745871 "cppcheck-2.8/test/testunusedvar.cpp" $, 5470 $, "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5471:
5472: $functionVariableUsage_ $(@expr1073745874 "cppcheck-2.8/test/testunusedvar.cpp" $, 5472 $, "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new (std::nothrow) Fred();\n    delete ptr;\n}" $)
5473:
|
5476:
5477: ;
5478: $if $(@expr1073745875 $!@expr1073745876 $assertEquals $(@expr1073745877 "cppcheck-2.8/test/testunusedvar.cpp" $, 5478 $, "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5479:
5480:
5481:
5482: $functionVariableUsage_ $(@expr1073745880 "cppcheck-2.8/test/testunusedvar.cpp" $, 5482 $, "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    ptr->i = 0;\n    delete ptr;\n}" $)
5483:
|
5487:
5488: ;
5489: $if $(@expr1073745881 $!@expr1073745882 $assertEquals $(@expr1073745883 "cppcheck-2.8/test/testunusedvar.cpp" $, 5489 $, "" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5490:
5491: $functionVariableUsage_ $(@expr1073745886 "cppcheck-2.8/test/testunusedvar.cpp" $, 5491 $, "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = new Fred();\n    delete ptr;\n}" $)
5492:
|
5495:
5496: ;
5497: $if $(@expr1073745887 $!@expr1073745888 $assertEquals $(@expr1073745889 "cppcheck-2.8/test/testunusedvar.cpp" $, 5497 $, "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5498:
5499: $functionVariableUsage_ $(@expr1073745892 "cppcheck-2.8/test/testunusedvar.cpp" $, 5499 $, "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = new Fred();\n    ptr->i = 0;\n    free(ptr);\n}" $)
5500:
|
5504:
5505: ;
5506: $if $(@expr1073745893 $!@expr1073745894 $assertEquals $(@expr1073745895 "cppcheck-2.8/test/testunusedvar.cpp" $, 5506 $, "" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5507:
5508: $functionVariableUsage_ $(@expr1073745898 "cppcheck-2.8/test/testunusedvar.cpp" $, 5508 $, "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    free(ptr);\n}" $)
5509:
|
5512:
5513: ;
5514: $if $(@expr1073745899 $!@expr1073745900 $assertEquals $(@expr1073745901 "cppcheck-2.8/test/testunusedvar.cpp" $, 5514 $, "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5515:
5516: $functionVariableUsage_ $(@expr1073745904 "cppcheck-2.8/test/testunusedvar.cpp" $, 5516 $, "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    ptr->i = 0;\n    free(ptr);\n}" $)
5517:
|
5521:
5522: ;
5523: $if $(@expr1073745905 $!@expr1073745906 $assertEquals $(@expr1073745907 "cppcheck-2.8/test/testunusedvar.cpp" $, 5523 $, "" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5524:
5525: $functionVariableUsage_ $(@expr1073745910 "cppcheck-2.8/test/testunusedvar.cpp" $, 5525 $, "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    delete ptr;\n}" $)
5526:
|
5529:
5530: ;
5531: $if $(@expr1073745911 $!@expr1073745912 $assertEquals $(@expr1073745913 "cppcheck-2.8/test/testunusedvar.cpp" $, 5531 $, "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5532:
5533: $functionVariableUsage_ $(@expr1073745916 "cppcheck-2.8/test/testunusedvar.cpp" $, 5533 $, "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    ptr->i = 0;\n    delete ptr;\n}" $)
5534:
|
5538:
5539: ;
5540: $if $(@expr1073745917 $!@expr1073745918 $assertEquals $(@expr1073745919 "cppcheck-2.8/test/testunusedvar.cpp" $, 5540 $, "" $, errout@var100 .@expr4018 str (@expr4019 ) $) $) { $return ; }
5541: }
5542:
5543: void localvardynamic3 ( ) {
5544:
5545: $functionVariableUsage_ $(@expr1073745922 "cppcheck-2.8/test/testunusedvar.cpp" $, 5545 $, "void foo() {\n    int* data = new int[100];\n    int* p = data;\n    for ( int i = 0; i < 10; ++i )\n        p++;\n}" $)
5546:
|
5549:
5550: ;
5551: $todoAssertEquals $(@expr1073745923 "cppcheck-2.8/test/testunusedvar.cpp" $, 5551 $, "[test.cpp:5]: (style) Variable 'p' is modified but its new value is never used.\n" $, "" $, errout@var100 .@expr1073745924 str (@expr1073745925 ) $)
5552:
5553: ;
5554: }
5555:
5556: void localvararray1 ( ) {
5557: $functionVariableUsage_ $(@expr1073745926 "cppcheck-2.8/test/testunusedvar.cpp" $, 5557 $, "void foo() {\n    int p[5];\n    *p = 0;\n}" $)
5558:
5559:
5560: ;
5561: $if $(@expr1073745927 $!@expr1073745928 $assertEquals $(@expr1073745929 "cppcheck-2.8/test/testunusedvar.cpp" $, 5561 $, "" $, errout@var100 .@expr1073745930 str (@expr1073745931 ) $) $) { $return ; }
5562: }
5563:
5564: void localvararray2 ( ) {
5565: $functionVariableUsage_ $(@expr1073745932 "cppcheck-2.8/test/testunusedvar.cpp" $, 5565 $, "int foo() {\n    int p[5][5];\n    p[0][0] = 0;\n    return p[0][0];\n}" $)
5566:
5567:
5568:
5569: ;
5570: $if $(@expr1073745933 $!@expr1073745934 $assertEquals $(@expr1073745935 "cppcheck-2.8/test/testunusedvar.cpp" $, 5570 $, "" $, errout@var100 .@expr1073745936 str (@expr1073745937 ) $) $) { $return ; }
5571: }
5572:
5573: void localvararray3 ( ) {
5574: $functionVariableUsage_ $(@expr1073745938 "cppcheck-2.8/test/testunusedvar.cpp" $, 5574 $, "int foo() {\n    int p[5][5];\n    *((int*)p[0]) = 0;\n    return p[0][0];\n}" $)
5575:
5576:
5577:
5578: ;
5579: $if $(@expr1073745939 $!@expr1073745940 $assertEquals $(@expr1073745941 "cppcheck-2.8/test/testunusedvar.cpp" $, 5579 $, "" $, errout@var100 .@expr1073745942 str (@expr1073745943 ) $) $) { $return ; }
5580: }
5581:
5582: void localvararray4 ( ) {
5583: $functionVariableUsage_ $(@expr1073745944 "cppcheck-2.8/test/testunusedvar.cpp" $, 5583 $, "void foo() {\n    int p[1];\n    int *pp[0];\n    p[0] = 1;\n    *pp[0] = p[0];\n}" $)
5584:
|
5587:
5588: ;
5589: $if $(@expr1073745945 $!@expr1073745946 $assertEquals $(@expr1073745947 "cppcheck-2.8/test/testunusedvar.cpp" $, 5589 $, "" $, errout@var100 .@expr1073745948 str (@expr1073745949 ) $) $) { $return ; }
5590: }
5591:
5592: void localvararray5 ( ) {
5593: $functionVariableUsage_ $(@expr1073745950 "cppcheck-2.8/test/testunusedvar.cpp" $, 5593 $, "int foo() {\n    int p[5][5];\n    dostuff(*p);\n}" $)
5594:
5595:
5596: ;
5597: $if $(@expr1073745951 $!@expr1073745952 $assertEquals $(@expr1073745953 "cppcheck-2.8/test/testunusedvar.cpp" $, 5597 $, "" $, errout@var100 .@expr1073745954 str (@expr1073745955 ) $) $) { $return ; }
5598: }
5599:
5600: void localvarstring1 ( ) {
5601: $functionVariableUsage_ $(@expr1073745956 "cppcheck-2.8/test/testunusedvar.cpp" $, 5601 $, "void foo() {\n    std::string s;\n}" $)
5602:
5603: ;
5604: $if $(@expr1073745957 $!@expr1073745958 $assertEquals $(@expr1073745959 "cppcheck-2.8/test/testunusedvar.cpp" $, 5604 $, "[test.cpp:2]: (style) Unused variable: s\n" $, errout@var100 .@expr4136 str (@expr4137 ) $) $) { $return ; }
5605:
5606: $functionVariableUsage_ $(@expr1073745962 "cppcheck-2.8/test/testunusedvar.cpp" $, 5606 $, "void foo() {\n    std::string s;\n    s = \"foo\";\n}" $)
5607:
5608:
5609: ;
5610: $if $(@expr1073745963 $!@expr1073745964 $assertEquals $(@expr1073745965 "cppcheck-2.8/test/testunusedvar.cpp" $, 5610 $, "[test.cpp:3]: (style) Variable 's' is assigned a value that is never used.\n" $, errout@var100 .@expr4136 str (@expr4137 ) $) $) { $return ; }
5611:
5612: $functionVariableUsage_ $(@expr1073745968 "cppcheck-2.8/test/testunusedvar.cpp" $, 5612 $, "void foo() {\n    std::string s = \"foo\";\n}" $)
5613:
5614: ;
5615: $if $(@expr1073745969 $!@expr1073745970 $assertEquals $(@expr1073745971 "cppcheck-2.8/test/testunusedvar.cpp" $, 5615 $, "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" $, errout@var100 .@expr4136 str (@expr4137 ) $) $) { $return ; }
5616:
5617: $functionVariableUsage_ $(@expr1073745974 "cppcheck-2.8/test/testunusedvar.cpp" $, 5617 $, "void foo() {\n    const std::string s = \"foo\";\n}" $)
5618:
5619: ;
5620: $if $(@expr1073745975 $!@expr1073745976 $assertEquals $(@expr1073745977 "cppcheck-2.8/test/testunusedvar.cpp" $, 5620 $, "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" $, errout@var100 .@expr4136 str (@expr4137 ) $) $) { $return ; }
5621:
5622: $functionVariableUsage_ $(@expr1073745980 "cppcheck-2.8/test/testunusedvar.cpp" $, 5622 $, "std::string foo() {\n    std::string s;\n    return s;\n}" $)
5623:
5624:
5625: ;
5626: $if $(@expr1073745981 $!@expr1073745982 $assertEquals $(@expr1073745983 "cppcheck-2.8/test/testunusedvar.cpp" $, 5626 $, "" $, errout@var100 .@expr4136 str (@expr4137 ) $) $) { $return ; }
5627:
5628: $functionVariableUsage_ $(@expr1073745986 "cppcheck-2.8/test/testunusedvar.cpp" $, 5628 $, "std::string foo() {\n    std::string s = \"foo\";\n    return s;\n}" $)
5629:
5630:
5631: ;
5632: $if $(@expr1073745987 $!@expr1073745988 $assertEquals $(@expr1073745989 "cppcheck-2.8/test/testunusedvar.cpp" $, 5632 $, "" $, errout@var100 .@expr4136 str (@expr4137 ) $) $) { $return ; }
5633:
5634: $functionVariableUsage_ $(@expr1073745992 "cppcheck-2.8/test/testunusedvar.cpp" $, 5634 $, "void f() {\n    std::string s(\"foo\");\n}" $)
5635:
5636: ;
5637: $if $(@expr1073745993 $!@expr1073745994 $assertEquals $(@expr1073745995 "cppcheck-2.8/test/testunusedvar.cpp" $, 5637 $, "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" $, errout@var100 .@expr4136 str (@expr4137 ) $) $) { $return ; }
5638:
5639: $functionVariableUsage_ $(@expr1073745998 "cppcheck-2.8/test/testunusedvar.cpp" $, 5639 $, "void f() {\n    std::string s{ \"foo\" };\n}" $)
5640:
5641: ;
5642: $if $(@expr1073745999 $!@expr1073746000 $assertEquals $(@expr1073746001 "cppcheck-2.8/test/testunusedvar.cpp" $, 5642 $, "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" $, errout@var100 .@expr4136 str (@expr4137 ) $) $) { $return ; }
5643: }
5644:
5645: void localvarstring2 ( ) {
5646: $functionVariableUsage_ $(@expr1073746004 "cppcheck-2.8/test/testunusedvar.cpp" $, 5646 $, "void foo() {\n    std::string s;\n    int i;\n}" $)
5647:
5648:
5649: ;
5650: $if $(@expr1073746005 $!@expr1073746006 $assertEquals $(@expr1073746007 "cppcheck-2.8/test/testunusedvar.cpp" $, 5650 $, "[test.cpp:2]: (style) Unused variable: s\n[test.cpp:3]: (style) Unused variable: i\n" $, errout@var100 .@expr1073746008 str (@expr1073746009 ) $) $) { $return
5651: ; }
5652: }
5653:
5654: void localvarconst1 ( ) {
5655: $functionVariableUsage_ $(@expr1073746010 "cppcheck-2.8/test/testunusedvar.cpp" $, 5655 $, "void foo() {\n    const bool b = true;\n}" $)
5656:
5657: ;
5658: $if $(@expr1073746011 $!@expr1073746012 $assertEquals $(@expr1073746013 "cppcheck-2.8/test/testunusedvar.cpp" $, 5658 $, "[test.cpp:2]: (style) Variable 'b' is assigned a value that is never used.\n" $, errout@var100 .@expr1073746014 str (@expr1073746015 ) $) $) { $return ; }
5659: }
5660:
5661: void localvarconst2 ( ) {
5662: $functionVariableUsage_ $(@expr1073746016 "cppcheck-2.8/test/testunusedvar.cpp" $, 5662 $, "void foo() {\n    const int N = 10;\n    struct X { int x[N]; };\n}" $)
5663:
5664:
5665: ;
5666: $if $(@expr1073746017 $!@expr1073746018 $assertEquals $(@expr1073746019 "cppcheck-2.8/test/testunusedvar.cpp" $, 5666 $, "" $, errout@var100 .@expr1073746020 str (@expr1073746021 ) $) $) { $return ; }
5667: }
5668:
5669: void localvarreturn ( ) {
5670: $functionVariableUsage_ $(@expr1073746022 "cppcheck-2.8/test/testunusedvar.cpp" $, 5670 $, "void foo() {\n    const int MyInt = 1;\n    class bar {\n      public:\n        bool operator()(const int &uIndexA, const int &uIndexB) const {\n            return true;\n        }\n        bar() {}\n    };\n    return MyInt;\n}" $)
5671:
|
5679:
5680: ;
5681: $if $(@expr1073746023 $!@expr1073746024 $assertEquals $(@expr1073746025 "cppcheck-2.8/test/testunusedvar.cpp" $, 5681 $, "" $, errout@var100 .@expr1073746026 str (@expr1073746027 ) $) $) { $return ; }
5682: }
5683:
5684: void localvarmaybeunused ( ) {
5685: $functionVariableUsage_ $(@expr1073746028 "cppcheck-2.8/test/testunusedvar.cpp" $, 5685 $, "int main() {\n    [[maybe_unused]] int x;\n}" $)
5686:
5687: ;
5688: $if $(@expr1073746029 $!@expr1073746030 $assertEquals $(@expr1073746031 "cppcheck-2.8/test/testunusedvar.cpp" $, 5688 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5689:
5690: $functionVariableUsage_ $(@expr1073746034 "cppcheck-2.8/test/testunusedvar.cpp" $, 5690 $, "[[nodiscard]] int getX() { return 4; }\nint main() {\n    [[maybe_unused]] int x = getX();\n}" $)
5691:
5692:
5693: ;
5694: $if $(@expr1073746035 $!@expr1073746036 $assertEquals $(@expr1073746037 "cppcheck-2.8/test/testunusedvar.cpp" $, 5694 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5695:
5696: $functionVariableUsage_ $(@expr1073746040 "cppcheck-2.8/test/testunusedvar.cpp" $, 5696 $, "[[nodiscard]] int getX() { return 4; }\nint main() {\n    [[maybe_unused]] int x = getX();\n    x = getX();\n}" $)
5697:
5698:
5699:
5700: ;
5701: $if $(@expr1073746041 $!@expr1073746042 $assertEquals $(@expr1073746043 "cppcheck-2.8/test/testunusedvar.cpp" $, 5701 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5702:
5703: $functionVariableUsage_ $(@expr1073746046 "cppcheck-2.8/test/testunusedvar.cpp" $, 5703 $, "[[nodiscard]] int getX() { return 4; }\nint main() {\n    [[maybe_unused]] int x = getX();\n    x = getX();\n    std::cout << x;\n}" $)
5704:
|
5707:
5708: ;
5709: $if $(@expr1073746047 $!@expr1073746048 $assertEquals $(@expr1073746049 "cppcheck-2.8/test/testunusedvar.cpp" $, 5709 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5710:
5711: $functionVariableUsage_ $(@expr1073746052 "cppcheck-2.8/test/testunusedvar.cpp" $, 5711 $, "int main() {\n    [[maybe_unused]] const int x = getX();\n}" $)
5712:
5713: ;
5714: $if $(@expr1073746053 $!@expr1073746054 $assertEquals $(@expr1073746055 "cppcheck-2.8/test/testunusedvar.cpp" $, 5714 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5715:
5716: $functionVariableUsage_ $(@expr1073746058 "cppcheck-2.8/test/testunusedvar.cpp" $, 5716 $, "int main() {\n    [[maybe_unused]] const int& x = getX();\n}" $)
5717:
5718: ;
5719: $if $(@expr1073746059 $!@expr1073746060 $assertEquals $(@expr1073746061 "cppcheck-2.8/test/testunusedvar.cpp" $, 5719 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5720:
5721: $functionVariableUsage_ $(@expr1073746064 "cppcheck-2.8/test/testunusedvar.cpp" $, 5721 $, "int main() {\n    [[maybe_unused]] const int* x = getX();\n}" $)
5722:
5723: ;
5724: $if $(@expr1073746065 $!@expr1073746066 $assertEquals $(@expr1073746067 "cppcheck-2.8/test/testunusedvar.cpp" $, 5724 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5725:
5726: $functionVariableUsage_ $(@expr1073746070 "cppcheck-2.8/test/testunusedvar.cpp" $, 5726 $, "int main() {\n    [[maybe_unused]] int& x = getX();\n}" $)
5727:
5728: ;
5729: $if $(@expr1073746071 $!@expr1073746072 $assertEquals $(@expr1073746073 "cppcheck-2.8/test/testunusedvar.cpp" $, 5729 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5730:
5731: $functionVariableUsage_ $(@expr1073746076 "cppcheck-2.8/test/testunusedvar.cpp" $, 5731 $, "int main() {\n    [[maybe_unused]] int* x = getX();\n}" $)
5732:
5733: ;
5734: $if $(@expr1073746077 $!@expr1073746078 $assertEquals $(@expr1073746079 "cppcheck-2.8/test/testunusedvar.cpp" $, 5734 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5735:
5736: $functionVariableUsage_ $(@expr1073746082 "cppcheck-2.8/test/testunusedvar.cpp" $, 5736 $, "int main() {\n    [[maybe_unused]] auto x = getX();\n}" $)
5737:
5738: ;
5739: $if $(@expr1073746083 $!@expr1073746084 $assertEquals $(@expr1073746085 "cppcheck-2.8/test/testunusedvar.cpp" $, 5739 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5740:
5741: $functionVariableUsage_ $(@expr1073746088 "cppcheck-2.8/test/testunusedvar.cpp" $, 5741 $, "int main() {\n    [[maybe_unused]] auto&& x = getX();\n}" $)
5742:
5743: ;
5744: $if $(@expr1073746089 $!@expr1073746090 $assertEquals $(@expr1073746091 "cppcheck-2.8/test/testunusedvar.cpp" $, 5744 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5745:
5746: $functionVariableUsage_ $(@expr1073746094 "cppcheck-2.8/test/testunusedvar.cpp" $, 5746 $, "int main() {\n    [[maybe_unused]] int x[] = getX();\n}" $)
5747:
5748: ;
5749: $if $(@expr1073746095 $!@expr1073746096 $assertEquals $(@expr1073746097 "cppcheck-2.8/test/testunusedvar.cpp" $, 5749 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5750:
5751: $functionVariableUsage_ $(@expr1073746100 "cppcheck-2.8/test/testunusedvar.cpp" $, 5751 $, "int main() {\n    [[maybe_unused]] constexpr volatile static int x = 1;\n}" $)
5752:
5753: ;
5754: $if $(@expr1073746101 $!@expr1073746102 $assertEquals $(@expr1073746103 "cppcheck-2.8/test/testunusedvar.cpp" $, 5754 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5755:
5756: $functionVariableUsage_ $(@expr1073746106 "cppcheck-2.8/test/testunusedvar.cpp" $, 5756 $, "[[maybe_unused]] inline int x = 1;" $) ;
5757: $if $(@expr1073746107 $!@expr1073746108 $assertEquals $(@expr1073746109 "cppcheck-2.8/test/testunusedvar.cpp" $, 5757 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5758:
5759: $functionVariableUsage_ $(@expr1073746112 "cppcheck-2.8/test/testunusedvar.cpp" $, 5759 $, "int main() {\n    [[maybe_unused]] [[anotherattribute]] const int* = 1;\n}" $)
5760:
5761: ;
5762: $if $(@expr1073746113 $!@expr1073746114 $assertEquals $(@expr1073746115 "cppcheck-2.8/test/testunusedvar.cpp" $, 5762 $, "" $, errout@var100 .@expr4208 str (@expr4209 ) $) $) { $return ; }
5763: }
5764:
5765: void localvarthrow ( ) {
5766: $functionVariableUsage_ $(@expr1073746118 "cppcheck-2.8/test/testunusedvar.cpp" $, 5766 $, "void foo() {\n    try {}    catch(Foo& bar) {}\n}" $)
5767:
5768:
5769: ;
5770: $if $(@expr1073746119 $!@expr1073746120 $assertEquals $(@expr1073746121 "cppcheck-2.8/test/testunusedvar.cpp" $, 5770 $, "" $, errout@var100 .@expr1073746122 str (@expr1073746123 ) $) $) { $return ; }
5771: }
5772:
5773: void localVarStd ( ) {
5774:
5775:
5776: $functionVariableUsage_ $(@expr1073746124 "cppcheck-2.8/test/testunusedvar.cpp" $, 5776 $, "void f() {\n    std::string x = foo();\n}" $)
5777:
5778: ;
5779: $if $(@expr1073746125 $!@expr1073746126 $assertEquals $(@expr1073746127 "cppcheck-2.8/test/testunusedvar.cpp" $, 5779 $, "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr4304 str (@expr4305 ) $) $) { $return ; }
5780:
5781: $functionVariableUsage_ $(@expr1073746130 "cppcheck-2.8/test/testunusedvar.cpp" $, 5781 $, "void f() {\n    std::vector<int> x;\n}" $)
5782:
5783: ;
5784: $if $(@expr1073746131 $!@expr1073746132 $assertEquals $(@expr1073746133 "cppcheck-2.8/test/testunusedvar.cpp" $, 5784 $, "[test.cpp:2]: (style) Unused variable: x\n" $, errout@var100 .@expr4304 str (@expr4305 ) $) $) { $return ; }
5785:
5786: $functionVariableUsage_ $(@expr1073746136 "cppcheck-2.8/test/testunusedvar.cpp" $, 5786 $, "void f() {\n    std::vector<int> x(100);\n}" $)
5787:
5788: ;
5789: $if $(@expr1073746137 $!@expr1073746138 $assertEquals $(@expr1073746139 "cppcheck-2.8/test/testunusedvar.cpp" $, 5789 $, "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n" $, errout@var100 .@expr4304 str (@expr4305 ) $) $) { $return ; }
5790:
5791: $functionVariableUsage_ $(@expr1073746142 "cppcheck-2.8/test/testunusedvar.cpp" $, 5791 $, "void f() {\n    std::vector<MyClass> x;\n}" $)
5792:
5793: ;
5794: $if $(@expr1073746143 $!@expr1073746144 $assertEquals $(@expr1073746145 "cppcheck-2.8/test/testunusedvar.cpp" $, 5794 $, "[test.cpp:2]: (style) Unused variable: x\n" $, errout@var100 .@expr4304 str (@expr4305 ) $) $) { $return ; }
5795:
5796: $functionVariableUsage_ $(@expr1073746148 "cppcheck-2.8/test/testunusedvar.cpp" $, 5796 $, "void f() {\n    std::lock_guard<MyClass> lock(mutex_);\n}" $)
5797:
5798: ;
5799: $if $(@expr1073746149 $!@expr1073746150 $assertEquals $(@expr1073746151 "cppcheck-2.8/test/testunusedvar.cpp" $, 5799 $, "" $, errout@var100 .@expr4304 str (@expr4305 ) $) $) { $return ; }
5800:
5801: $functionVariableUsage_ $(@expr1073746154 "cppcheck-2.8/test/testunusedvar.cpp" $, 5801 $, "void f() {\n    pLocker = std::shared_ptr<jfxLocker>(new jfxLocker(m_lock, true));\n}" $)
5802:
5803: ;
5804: $if $(@expr1073746155 $!@expr1073746156 $assertEquals $(@expr1073746157 "cppcheck-2.8/test/testunusedvar.cpp" $, 5804 $, "" $, errout@var100 .@expr4304 str (@expr4305 ) $) $) { $return ; }
5805:
5806: $functionVariableUsage_ $(@expr1073746160 "cppcheck-2.8/test/testunusedvar.cpp" $, 5806 $, "void f() {\n    std::mutex m;\n    std::unique_lock<std::mutex> lock(m);\n}" $)
5807:
5808:
5809: ;
5810: $if $(@expr1073746161 $!@expr1073746162 $assertEquals $(@expr1073746163 "cppcheck-2.8/test/testunusedvar.cpp" $, 5810 $, "" $, errout@var100 .@expr4304 str (@expr4305 ) $) $) { $return ; }
5811:
5812: $functionVariableUsage_ $(@expr1073746166 "cppcheck-2.8/test/testunusedvar.cpp" $, 5812 $, "void f() {\n    const std::pair<std::string, std::string> p(\"a\", \"b\");\n    std::pair<std::string, std::string> q{\"a\", \"b\" };\n    auto r = std::pair<std::string, std::string>(\"a\", \"b\");\n    auto s = std::pair<std::string, std::string>{ \"a\", \"b\" };\n}\n" $)
5813:
|
5816:
5817: ;
5818: $todoAssertEquals $(@expr1073746167 "cppcheck-2.8/test/testunusedvar.cpp" $, 5818 $, "[test.cpp:2]: (style) Variable 'p' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'q' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'r' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n" $, "[test.cpp:2]: (style) Variable 'p' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'q' is assigned a value that is never used.\n" $, errout@var100 .@expr4304 str (@expr4305 ) $)
5819:
|
5823:
5824: ;
5825: }
5826:
5827: void localVarClass ( ) {
5828: $functionVariableUsage_ $(@expr1073746170 "cppcheck-2.8/test/testunusedvar.cpp" $, 5828 $, "void f() {\n    Fred f;\n}" $)
5829:
5830: ;
5831: $if $(@expr1073746171 $!@expr1073746172 $assertEquals $(@expr1073746173 "cppcheck-2.8/test/testunusedvar.cpp" $, 5831 $, "" $, errout@var100 .@expr4350 str (@expr4351 ) $) $) { $return ; }
5832:
5833: $functionVariableUsage_ $(@expr1073746176 "cppcheck-2.8/test/testunusedvar.cpp" $, 5833 $, "class C { int x; };\nvoid f() {\n    C c;\n}" $)
5834:
5835:
5836: ;
5837: $if $(@expr1073746177 $!@expr1073746178 $assertEquals $(@expr1073746179 "cppcheck-2.8/test/testunusedvar.cpp" $, 5837 $, "[test.cpp:3]: (style) Unused variable: c\n" $, errout@var100 .@expr4350 str (@expr4351 ) $) $) { $return ; }
5838:
5839: $functionVariableUsage_ $(@expr1073746182 "cppcheck-2.8/test/testunusedvar.cpp" $, 5839 $, "class ExampleClass\n{\npublic:\n   ExampleClass(int xScale, int yScale, int x, int y)\n      : XScale(xScale)\n      , YScale(yScale)\n      , X(x)\n      , Y(y)\n   {\n   }\n \n   int XScale;\n   int YScale;\n   int X;\n   int Y;\n};\n \nvoid foo()\n{\n   ExampleClass ex(1, 2, 3, 4);\n}" $)
5840:
|
5858:
5859: ;
5860: $if $(@expr1073746183 $!@expr1073746184 $assertEquals $(@expr1073746185 "cppcheck-2.8/test/testunusedvar.cpp" $, 5860 $, "[test.cpp:20]: (style) Variable 'ex' is assigned a value that is never used.\n" $, errout@var100 .@expr4350 str (@expr4351 ) $) $) { $return ; }
5861:
5862: $functionVariableUsage_ $(@expr1073746188 "cppcheck-2.8/test/testunusedvar.cpp" $, 5862 $, "class C { public: C(int); ~C(); };\nvoid f() {\n    C c(12);\n}" $)
5863:
5864:
5865: ;
5866: $if $(@expr1073746189 $!@expr1073746190 $assertEquals $(@expr1073746191 "cppcheck-2.8/test/testunusedvar.cpp" $, 5866 $, "" $, errout@var100 .@expr4350 str (@expr4351 ) $) $) { $return ; }
5867: }
5868:
5869: void localVarSmartPtr ( ) {
5870:
5871: $functionVariableUsage_ $(@expr1073746194 "cppcheck-2.8/test/testunusedvar.cpp" $, 5871 $, "static int s_i = 0;\n\nclass A {\npublic:\n    ~A() {\n        ++s_i;\n    }\n};\n\nstatic void func() {\n    auto a = std::make_shared<A>();\n    auto a2 = std::unique_ptr<A>(new A());\n}\n" $)
5872:
|
5882:
5883: ;
5884: $if $(@expr1073746195 $!@expr1073746196 $assertEquals $(@expr1073746197 "cppcheck-2.8/test/testunusedvar.cpp" $, 5884 $, "" $, errout@var100 .@expr4374 str (@expr4375 ) $) $) { $return ; }
5885:
5886: $functionVariableUsage_ $(@expr1073746200 "cppcheck-2.8/test/testunusedvar.cpp" $, 5886 $, "class A {\npublic:\n    std::string x;\n};\n\nstatic void func() {\n    auto a = std::make_shared<A>();\n    auto a2 = std::unique_ptr<A>(new A());\n}\n" $)
5887:
|
5893:
5894: ;
5895: $if $(@expr1073746201 $!@expr1073746202 $assertEquals $(@expr1073746203 "cppcheck-2.8/test/testunusedvar.cpp" $, 5895 $, "[test.cpp:7]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:8]: (style) Variable 'a2' is assigned a value that is never used.\n" $, errout@var100 .@expr4374 str (@expr4375 ) $) $) { $return
5896: ; }
5897: }
5898:
5899:
5900: void localvarIfNOT ( ) {
5901: $functionVariableUsage_ $(@expr1073746206 "cppcheck-2.8/test/testunusedvar.cpp" $, 5901 $, "void f() {\n    bool x = foo();\n    if (NOT x) { }\n}" $)
5902:
5903:
5904: ;
5905: $if $(@expr1073746207 $!@expr1073746208 $assertEquals $(@expr1073746209 "cppcheck-2.8/test/testunusedvar.cpp" $, 5905 $, "" $, errout@var100 .@expr1073746210 str (@expr1073746211 ) $) $) { $return ; }
5906: }
5907:
5908: void localvarAnd ( ) {
5909: $functionVariableUsage_ $(@expr1073746212 "cppcheck-2.8/test/testunusedvar.cpp" $, 5909 $, "int main() {\n    unsigned flag = 0x1 << i;\n    if (m_errorflags & flag) {\n        return 1;\n    }\n}" $)
5910:
|
5913:
5914: ;
5915: $if $(@expr1073746213 $!@expr1073746214 $assertEquals $(@expr1073746215 "cppcheck-2.8/test/testunusedvar.cpp" $, 5915 $, "" $, errout@var100 .@expr1073746216 str (@expr1073746217 ) $) $) { $return ; }
5916: }
5917:
5918: void localvarSwitch ( ) {
5919: $functionVariableUsage_ $(@expr1073746218 "cppcheck-2.8/test/testunusedvar.cpp" $, 5919 $, "const char *f(int x) {\n    const char a[] = \"abc\";\n    const char def[] = \"def\";\n    const char *ptr;\n    switch(x) {\n        case 1:  ptr=a; break;\n        default: ptr=def; break;\n    }\n    return ptr;\n}" $)
5920:
|
5927:
5928: ;
5929: $if $(@expr1073746219 $!@expr1073746220 $assertEquals $(@expr1073746221 "cppcheck-2.8/test/testunusedvar.cpp" $, 5929 $, "" $, errout@var100 .@expr4398 str (@expr4399 ) $) $) { $return ; }
5930:
5931: $functionVariableUsage_ $(@expr1073746224 "cppcheck-2.8/test/testunusedvar.cpp" $, 5931 $, "void x() {\n    unsigned char* pcOctet = NULL;\n    float fValeur;\n    switch (pnodeCurrent->left.pnode->usLen) {\n    case 4:\n        fValeur = (float)pevalDataLeft->data.fd;\n        pcOctet = (unsigned char*)&fValeur;\n        break;\n    case 8:\n        pcOctet = (unsigned char*)&pevalDataLeft->data.fd;\n        break;\n    }\n    for (iIndice = 1; iIndice <= (pnodeCurrent->usLen / 2); iIndice++) {\n        *pcData = gacHexChar[(*pcOctet >> 4) & 0x0F];\n    }\n}" $)
5932:
|
5945:
5946: ;
5947: $if $(@expr1073746225 $!@expr1073746226 $assertEquals $(@expr1073746227 "cppcheck-2.8/test/testunusedvar.cpp" $, 5947 $, "" $, errout@var100 .@expr4398 str (@expr4399 ) $) $) { $return ; }
5948: }
5949:
5950: void localvarNULL ( ) {
5951: $functionVariableUsage_ $(@expr1073746230 "cppcheck-2.8/test/testunusedvar.cpp" $, 5951 $, "void f() {\n    char *p = malloc(100);\n    foo(p);\n    free(p);\n    p = NULL;\n}" $)
5952:
|
5955:
5956: ;
5957: $if $(@expr1073746231 $!@expr1073746232 $assertEquals $(@expr1073746233 "cppcheck-2.8/test/testunusedvar.cpp" $, 5957 $, "" $, errout@var100 .@expr4410 str (@expr4411 ) $) $) { $return ; }
5958:
5959: $functionVariableUsage_ $(@expr1073746236 "cppcheck-2.8/test/testunusedvar.cpp" $, 5959 $, "void f(Foo *p) {\n    free(p);\n    p = (Foo *)NULL;\n}" $)
5960:
5961:
5962: ;
5963: $if $(@expr1073746237 $!@expr1073746238 $assertEquals $(@expr1073746239 "cppcheck-2.8/test/testunusedvar.cpp" $, 5963 $, "" $, errout@var100 .@expr4410 str (@expr4411 ) $) $) { $return ; }
5964:
5965: $functionVariableUsage_ $(@expr1073746242 "cppcheck-2.8/test/testunusedvar.cpp" $, 5965 $, "void f() {\n    std::string s1{ nullptr };\n    std::string s2{ NULL };\n    std::string s4(nullptr);\n    std::string s5(NULL);\n}\nstruct A { A(void*) {} };\nstatic void g() {\n    A a1{ nullptr };\n    A a2{ NULL };\n    A a4(nullptr);\n    A a5(NULL);\n}\n" $)
5966:
|
5976:
5977: ;
5978: $if $(@expr1073746243 $!@expr1073746244 $assertEquals $(@expr1073746245 "cppcheck-2.8/test/testunusedvar.cpp" $, 5978 $, "[test.cpp:2]: (style) Variable 's1' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 's2' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 's4' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 's5' is assigned a value that is never used.\n[test.cpp:9]: (style) Variable 'a1' is assigned a value that is never used.\n[test.cpp:10]: (style) Variable 'a2' is assigned a value that is never used.\n[test.cpp:11]: (style) Variable 'a4' is assigned a value that is never used.\n[test.cpp:12]: (style) Variable 'a5' is assigned a value that is never used.\n" $, errout@var100 .@expr4410 str (@expr4411 ) $) $) { $return
5979:
|
5985:
5986: ; }
5987: }
5988:
5989: void localvarUnusedGoto ( ) {
5990:
5991: $functionVariableUsage_ $(@expr1073746248 "cppcheck-2.8/test/testunusedvar.cpp" $, 5991 $, "bool f(const int &i) {\n int X = i;\nlabel:\n if ( X == 0 ) {\n    X -= 101;\n    return true;\n }\n if ( X < 1001 )  {\n    X += 1;\n    goto label;\n }\n return false;\n}" $)
5992:
|
6002:
6003: ;
6004: $if $(@expr1073746249 $!@expr1073746250 $assertEquals $(@expr1073746251 "cppcheck-2.8/test/testunusedvar.cpp" $, 6004 $, "[test.cpp:5]: (style) Variable 'X' is assigned a value that is never used.\n" $, errout@var100 .@expr4428 str (@expr4429 ) $) $) { $return ; }
6005:
6006:
6007: $functionVariableUsage_ $(@expr1073746254 "cppcheck-2.8/test/testunusedvar.cpp" $, 6007 $, "int f() {\n int i,j=0;\n start:\n i=j;\n i++;\n j=i;\n if (i<3)\n     goto start;\n return i;\n}" $)
6008:
|
6015:
6016: ;
6017: $if $(@expr1073746255 $!@expr1073746256 $assertEquals $(@expr1073746257 "cppcheck-2.8/test/testunusedvar.cpp" $, 6017 $, "" $, errout@var100 .@expr4428 str (@expr4429 ) $) $) { $return ; }
6018: }
6019:
6020: void localvarLambda ( ) {
6021: $functionVariableUsage_ $(@expr1073746260 "cppcheck-2.8/test/testunusedvar.cpp" $, 6021 $, "int foo() {\n    auto f = []{return 1};\n    return f();\n}" $)
6022:
6023:
6024: ;
6025: $if $(@expr1073746261 $!@expr1073746262 $assertEquals $(@expr1073746263 "cppcheck-2.8/test/testunusedvar.cpp" $, 6025 $, "" $, errout@var100 .@expr4440 str (@expr4441 ) $) $) { $return ; }
6026:
6027: $functionVariableUsage_ $(@expr1073746266 "cppcheck-2.8/test/testunusedvar.cpp" $, 6027 $, "int foo() {\n    auto f = []{return 1};\n    auto g = []{return 1};\n    return f() + g();\n}" $)
6028:
6029:
6030:
6031: ;
6032: $if $(@expr1073746267 $!@expr1073746268 $assertEquals $(@expr1073746269 "cppcheck-2.8/test/testunusedvar.cpp" $, 6032 $, "" $, errout@var100 .@expr4440 str (@expr4441 ) $) $) { $return ; }
6033:
6034: $functionVariableUsage_ $(@expr1073746272 "cppcheck-2.8/test/testunusedvar.cpp" $, 6034 $, "void foo(std::vector<int>& v) {\n    int n = 0;\n    std::generate(v.begin(), v.end(), [&n] {\n        int r = n;\n        n += 2;\n        return r;\n    });\n}" $)
6035:
|
6040:
6041: ;
6042: $if $(@expr1073746273 $!@expr1073746274 $assertEquals $(@expr1073746275 "cppcheck-2.8/test/testunusedvar.cpp" $, 6042 $, "" $, errout@var100 .@expr4440 str (@expr4441 ) $) $) { $return ; }
6043: }
6044:
6045:
6046: void localvarStructuredBinding ( ) {
6047: $functionVariableUsage_ $(@expr1073746278 "cppcheck-2.8/test/testunusedvar.cpp" $, 6047 $, "void f() {\n    std::map<int, double> m;\n    m[2] = 2.0;\n    for (auto& [k, v] : m) {}\n}\n" $)
6048:
6049:
6050:
6051: ;
6052: $if $(@expr1073746279 $!@expr1073746280 $assertEquals $(@expr1073746281 "cppcheck-2.8/test/testunusedvar.cpp" $, 6052 $, "" $, errout@var100 .@expr1073746282 str (@expr1073746283 ) $) $) { $return ; }
6053: }
6054:
6055: void localvarCppInitialization ( ) {
6056: $functionVariableUsage_ $(@expr1073746284 "cppcheck-2.8/test/testunusedvar.cpp" $, 6056 $, "void foo() {\n    int buf[6];\n    Data data(buf);\n}" $)
6057:
6058:
6059: ;
6060: $if $(@expr1073746285 $!@expr1073746286 $assertEquals $(@expr1073746287 "cppcheck-2.8/test/testunusedvar.cpp" $, 6060 $, "[test.cpp:3]: (information) --check-library: Provide <type-checks><unusedvar> configuration for Data\n" $, errout@var100 .@expr1073746288 str (@expr1073746289 ) $) $) { $return ; }
6061: }
6062:
6063: void localvarCpp11Initialization ( ) {
6064:
6065: $functionVariableUsage_ $(@expr1073746290 "cppcheck-2.8/test/testunusedvar.cpp" $, 6065 $, "void foo() {\n    int myNewValue{ 3u };\n    myManager.theDummyTable.addRow(UnsignedIndexValue{ myNewValue }, DummyRowData{ false });\n}" $)
6066:
6067:
6068: ;
6069: $if $(@expr1073746291 $!@expr1073746292 $assertEquals $(@expr1073746293 "cppcheck-2.8/test/testunusedvar.cpp" $, 6069 $, "" $, errout@var100 .@expr1073746294 str (@expr1073746295 ) $) $) { $return ; }
6070: }
6071:
6072: void localvarRangeBasedFor ( ) {
6073:
6074: $functionVariableUsage_ $(@expr1073746296 "cppcheck-2.8/test/testunusedvar.cpp" $, 6074 $, "void reset() {\n    for (auto & e : array)\n        e = 0;\n}" $)
6075:
6076:
6077: ;
6078: $if $(@expr1073746297 $!@expr1073746298 $assertEquals $(@expr1073746299 "cppcheck-2.8/test/testunusedvar.cpp" $, 6078 $, "" $, errout@var100 .@expr1073746300 str (@expr1073746301 ) $) $) { $return ; }
6079: }
6080:
6081: void localvarAssignInWhile ( ) {
6082: $functionVariableUsage_ $(@expr1073746302 "cppcheck-2.8/test/testunusedvar.cpp" $, 6082 $, "void foo() {\n  int a = 0;\n  do {\n    dostuff(a);\n  } while((a + = x) < 30);\n}" $)
6083:
|
6086:
6087: ;
6088: $if $(@expr1073746303 $!@expr1073746304 $assertEquals $(@expr1073746305 "cppcheck-2.8/test/testunusedvar.cpp" $, 6088 $, "" $, errout@var100 .@expr4482 str (@expr4483 ) $) $) { $return ; }
6089:
6090: $functionVariableUsage_ $(@expr1073746308 "cppcheck-2.8/test/testunusedvar.cpp" $, 6090 $, "int foo() {\n    int var = 1;\n    while (var = var >> 1) { }\n}" $)
6091:
6092:
6093: ;
6094: $if $(@expr1073746309 $!@expr1073746310 $assertEquals $(@expr1073746311 "cppcheck-2.8/test/testunusedvar.cpp" $, 6094 $, "" $, errout@var100 .@expr4482 str (@expr4483 ) $) $) { $return ; }
6095: }
6096:
6097: void localvarTemplate ( ) {
6098: $functionVariableUsage_ $(@expr1073746314 "cppcheck-2.8/test/testunusedvar.cpp" $, 6098 $, "template<int A> void f() {}\nvoid foo() {\n  const int x = 0;\n  f<x>();\n}" $)
6099:
6100:
6101:
6102: ;
6103: $if $(@expr1073746315 $!@expr1073746316 $assertEquals $(@expr1073746317 "cppcheck-2.8/test/testunusedvar.cpp" $, 6103 $, "" $, errout@var100 .@expr4494 str (@expr4495 ) $) $) { $return ; }
6104:
6105: $functionVariableUsage_ $(@expr1073746320 "cppcheck-2.8/test/testunusedvar.cpp" $, 6105 $, "void f() {\n  constexpr std::size_t ArraySize(5);\n  std::array<int, ArraySize> X; X.dostuff();\n}" $)
6106:
6107:
6108: ;
6109: $if $(@expr1073746321 $!@expr1073746322 $assertEquals $(@expr1073746323 "cppcheck-2.8/test/testunusedvar.cpp" $, 6109 $, "" $, errout@var100 .@expr4494 str (@expr4495 ) $) $) { $return ; }
6110:
6111: $functionVariableUsage_ $(@expr1073746326 "cppcheck-2.8/test/testunusedvar.cpp" $, 6111 $, "void f() {\n    std::array<int, 1> a;\n}\n" $)
6112:
6113: ;
6114: $if $(@expr1073746327 $!@expr1073746328 $assertEquals $(@expr1073746329 "cppcheck-2.8/test/testunusedvar.cpp" $, 6114 $, "[test.cpp:2]: (style) Unused variable: a\n" $, errout@var100 .@expr4494 str (@expr4495 ) $) $) { $return ; }
6115:
6116: $functionVariableUsage_ $(@expr1073746332 "cppcheck-2.8/test/testunusedvar.cpp" $, 6116 $, "class A {};\n    namespace std {\n    template<>\n    struct hash<A> {};\n}\nchar f() {\n    std::string hash = \"-\";\n    return hash[0];\n}\n" $)
6117:
|
6123:
6124: ;
6125: $if $(@expr1073746333 $!@expr1073746334 $assertEquals $(@expr1073746335 "cppcheck-2.8/test/testunusedvar.cpp" $, 6125 $, "" $, errout@var100 .@expr4494 str (@expr4495 ) $) $) { $return ; }
6126: }
6127:
6128: void localvarFuncPtr ( ) {
6129: $functionVariableUsage_ $(@expr1073746338 "cppcheck-2.8/test/testunusedvar.cpp" $, 6129 $, "int main() {\n    void(*funcPtr)(void)(x);\n}" $)
6130:
6131: ;
6132: $todoAssertEquals $(@expr1073746339 "cppcheck-2.8/test/testunusedvar.cpp" $, 6132 $, "[test.cpp:2]: (style) Variable 'funcPtr' is assigned a value never used.\n" $, "" $, errout@var100 .@expr4516 str (@expr4517 ) $) ;
6133:
6134: $functionVariableUsage_ $(@expr1073746342 "cppcheck-2.8/test/testunusedvar.cpp" $, 6134 $, "int main() {\n    void(*funcPtr)(void);\n}" $)
6135:
6136: ;
6137: $if $(@expr1073746343 $!@expr1073746344 $assertEquals $(@expr1073746345 "cppcheck-2.8/test/testunusedvar.cpp" $, 6137 $, "[test.cpp:2]: (style) Unused variable: funcPtr\n" $, errout@var100 .@expr4516 str (@expr4517 ) $) $) { $return ; }
6138:
6139: $functionVariableUsage_ $(@expr1073746348 "cppcheck-2.8/test/testunusedvar.cpp" $, 6139 $, "int main() {\n    void(*funcPtr)(void)(x);\n    funcPtr();\n}" $)
6140:
6141:
6142: ;
6143: $if $(@expr1073746349 $!@expr1073746350 $assertEquals $(@expr1073746351 "cppcheck-2.8/test/testunusedvar.cpp" $, 6143 $, "" $, errout@var100 .@expr4516 str (@expr4517 ) $) $) { $return ; }
6144:
6145: $functionVariableUsage_ $(@expr1073746354 "cppcheck-2.8/test/testunusedvar.cpp" $, 6145 $, "int main() {\n    void(*funcPtr)(void) = x;\n    funcPtr();\n}" $)
6146:
6147:
6148: ;
6149: $if $(@expr1073746355 $!@expr1073746356 $assertEquals $(@expr1073746357 "cppcheck-2.8/test/testunusedvar.cpp" $, 6149 $, "" $, errout@var100 .@expr4516 str (@expr4517 ) $) $) { $return ; }
6150: }
6151:
6152: void localvarAddr ( ) {
6153: $functionVariableUsage_ $(@expr1073746360 "cppcheck-2.8/test/testunusedvar.cpp" $, 6153 $, "void f() {\n  int x = 0;\n  dostuff(&x);\n  x = 1;\n}" $)
6154:
6155:
6156:
6157: ;
6158: $if $(@expr1073746361 $!@expr1073746362 $assertEquals $(@expr1073746363 "cppcheck-2.8/test/testunusedvar.cpp" $, 6158 $, "" $, errout@var100 .@expr4540 str (@expr4541 ) $) $) { $return ; }
6159:
6160: $functionVariableUsage_ $(@expr1073746366 "cppcheck-2.8/test/testunusedvar.cpp" $, 6160 $, "void f() {\n  int x = 0;\n  dostuff(std::ref(x));\n  x = 1;\n}" $)
6161:
6162:
6163:
6164: ;
6165: $if $(@expr1073746367 $!@expr1073746368 $assertEquals $(@expr1073746369 "cppcheck-2.8/test/testunusedvar.cpp" $, 6165 $, "" $, errout@var100 .@expr4540 str (@expr4541 ) $) $) { $return ; }
6166: }
6167:
6168: void localvarDelete ( ) {
6169: $functionVariableUsage_ $(@expr1073746372 "cppcheck-2.8/test/testunusedvar.cpp" $, 6169 $, "void reassign(char*& data, int size){    char* buf = new char[size];    char* tmp = data;    data = buf;    buf = tmp;    delete [] buf;}" $)
6170:
|
6177:
6178: ;
6179: $if $(@expr1073746373 $!@expr1073746374 $assertEquals $(@expr1073746375 "cppcheck-2.8/test/testunusedvar.cpp" $, 6179 $, "" $, errout@var100 .@expr1073746376 str (@expr1073746377 ) $) $) { $return ; }
6180: }
6181:
6182: void chainedAssignment ( ) {
6183:
6184: $functionVariableUsage_ $(@expr1073746378 "cppcheck-2.8/test/testunusedvar.cpp" $, 6184 $, "void NotUsed(double* pdD, int n) {\n    double sum = 0.0;\n    for (int i = 0; i<n; ++i)\n        pdD[i] = (sum += pdD[i]);\n}" $)
6185:
6186:
6187:
6188: ;
6189: $if $(@expr1073746379 $!@expr1073746380 $assertEquals $(@expr1073746381 "cppcheck-2.8/test/testunusedvar.cpp" $, 6189 $, "" $, errout@var100 .@expr1073746382 str (@expr1073746383 ) $) $) { $return ; }
6190: }
6191:
6192: void crash1 ( ) {
6193: $functionVariableUsage_ $(@expr1073746384 "cppcheck-2.8/test/testunusedvar.cpp" $, 6193 $, "SAL_WNODEPRECATED_DECLARATIONS_PUSH\nvoid convertToTokenArray() {\n}\nSAL_WNODEPRECATED_DECLARATIONS_POP" $)
6194:
6195:
6196: ;
6197: }
6198:
6199: void crash2 ( ) {
6200: $functionVariableUsage_ $(@expr1073746385 "cppcheck-2.8/test/testunusedvar.cpp" $, 6200 $, "template<unsigned dim>\nstruct Y: Y<dim-1> { };\ntemplate<>\nstruct Y<0> {};\nvoid f() {\n    Y y;\n}" $)
6201:
|
6205:
6206: ;
6207: }
6208:
6209: void usingNamespace ( ) {
6210: $functionVariableUsage_ $(@expr1073746386 "cppcheck-2.8/test/testunusedvar.cpp" $, 6210 $, "int foo() {\n   using namespace ::com::sun::star::i18n;\n   bool b = false;\n   int j = 0;\n   for (int i = 0; i < 3; i++) {\n          if (!b) {\n             j = 3;\n             b = true;\n          }\n   }\n   return j;\n}" $)
6211:
|
6220:
6221: ;
6222: $if $(@expr1073746387 $!@expr1073746388 $assertEquals $(@expr1073746389 "cppcheck-2.8/test/testunusedvar.cpp" $, 6222 $, "" $, errout@var100 .@expr1073746390 str (@expr1073746391 ) $) $) { $return ; }
6223: }
6224:
6225: void lambdaFunction ( ) {
6226:
6227: $functionVariableUsage_ $(@expr1073746392 "cppcheck-2.8/test/testunusedvar.cpp" $, 6227 $, "void f() {\n  bool first = true;\n\n  auto do_something = [&first]() {\n    if (first) {\n      first = false;\n    } else {\n      dostuff();\n    }\n  };\n  do_something();\n  do_something();\n}" $)
6228:
|
6238:
6239: ;
6240: $if $(@expr1073746393 $!@expr1073746394 $assertEquals $(@expr1073746395 "cppcheck-2.8/test/testunusedvar.cpp" $, 6240 $, "" $, errout@var100 .@expr4572 str (@expr4573 ) $) $) { $return ; }
6241:
6242:
6243:
6244: $functionVariableUsage_ $(@expr1073746398 "cppcheck-2.8/test/testunusedvar.cpp" $, 6244 $, "void f(std::vector<int> ints) {\n  int x = 0;\n  std::for_each(ints.begin(), ints.end(), [&x](int i){ dostuff(x); x = i; });\n}" $)
6245:
6246:
6247: ;
6248: $if $(@expr1073746399 $!@expr1073746400 $assertEquals $(@expr1073746401 "cppcheck-2.8/test/testunusedvar.cpp" $, 6248 $, "" $, errout@var100 .@expr4572 str (@expr4573 ) $) $) { $return ; }
6249:
6250: $functionVariableUsage_ $(@expr1073746404 "cppcheck-2.8/test/testunusedvar.cpp" $, 6250 $, "void f(std::vector<int> ints) {\n  int x = 0;\n  std::for_each(ints.begin(), ints.end(), [&x](int i){ x += i; });\n}" $)
6251:
6252:
6253: ;
6254: $todoAssertEquals $(@expr1073746405 "cppcheck-2.8/test/testunusedvar.cpp" $, 6254 $, "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n" $, "" $, errout@var100 .@expr4572 str (@expr4573 ) $) ;
6255: }
6256:
6257: void namespaces ( ) {
6258: $functionVariableUsage_ $(@expr1073746408 "cppcheck-2.8/test/testunusedvar.cpp" $, 6258 $, "namespace t { namespace g {\n   typedef std::pair<BoostBox, size_t> value;\n} }\nnamespace t { namespace g {} }\nnamespace t {\n  inline double getTime() const {\n     iterator it=find();\n     double& value=it->second.values[index];\n     if(isnan(value)) {\n       value=get();\n     }\n     return value;\n  }\n}" $)
6259:
|
6270:
6271: ;
6272: $if $(@expr1073746409 $!@expr1073746410 $assertEquals $(@expr1073746411 "cppcheck-2.8/test/testunusedvar.cpp" $, 6272 $, "" $, errout@var100 .@expr1073746412 str (@expr1073746413 ) $) $) { $return ; }
6273: }
6274:
6275: void bracesInitCpp11 ( ) {
6276: $functionVariableUsage_ $(@expr1073746414 "cppcheck-2.8/test/testunusedvar.cpp" $, 6276 $, "int fun() {\n static int fpUnread{0};\n const int var{fpUnread++};\n return var;\n}" $)
6277:
|
6280:
6281: ;
6282: $if $(@expr1073746415 $!@expr1073746416 $assertEquals $(@expr1073746417 "cppcheck-2.8/test/testunusedvar.cpp" $, 6282 $, "" $, errout@var100 .@expr1073746418 str (@expr1073746419 ) $) $) { $return ; }
6283: }
6284:
6285: void argument ( ) {
6286: $functionVariableUsage_ $(@expr1073746420 "cppcheck-2.8/test/testunusedvar.cpp" $, 6286 $, "void fun(Value value) {\n value[10] = 123;\n}" $)
6287:
6288:
6289: ;
6290: $if $(@expr1073746421 $!@expr1073746422 $assertEquals $(@expr1073746423 "cppcheck-2.8/test/testunusedvar.cpp" $, 6290 $, "" $, errout@var100 .@expr4600 str (@expr4601 ) $) $) { $return ; }
6291:
6292: $functionVariableUsage_ $(@expr1073746426 "cppcheck-2.8/test/testunusedvar.cpp" $, 6292 $, "void fun(std::string s) {\n s[10] = 123;\n}" $)
6293:
6294:
6295: ;
6296: $if $(@expr1073746427 $!@expr1073746428 $assertEquals $(@expr1073746429 "cppcheck-2.8/test/testunusedvar.cpp" $, 6296 $, "[test.cpp:2]: (style) Variable 's[10]' is assigned a value that is never used.\n" $, errout@var100 .@expr4600 str (@expr4601 ) $) $) { $return ; }
6297:
6298: $functionVariableUsage_ $(@expr1073746432 "cppcheck-2.8/test/testunusedvar.cpp" $, 6298 $, "void fun(short data[2]) {\n  data[2] = 1;\n}" $)
6299:
6300:
6301:
6302: ;
6303: $if $(@expr1073746433 $!@expr1073746434 $assertEquals $(@expr1073746435 "cppcheck-2.8/test/testunusedvar.cpp" $, 6303 $, "" $, errout@var100 .@expr4600 str (@expr4601 ) $) $) { $return ; }
6304:
6305:
6306: $functionVariableUsage_ $(@expr1073746438 "cppcheck-2.8/test/testunusedvar.cpp" $, 6306 $, "void A::b(Date& result) {  result = 12;\n}" $)
6307:
6308:
6309:
6310: ;
6311: $if $(@expr1073746439 $!@expr1073746440 $assertEquals $(@expr1073746441 "cppcheck-2.8/test/testunusedvar.cpp" $, 6311 $, "" $, errout@var100 .@expr4600 str (@expr4601 ) $) $) { $return ; }
6312:
6313: {
6314:
6315: $functionVariableUsage_ $(@expr1073746444 "cppcheck-2.8/test/testunusedvar.cpp" $, 6315 $, "void fun(Date result) {  result.x = 12;\n}" $)
6316:
6317:
6318:
6319: ;
6320: $if $(@expr1073746445 $!@expr1073746446 $assertEquals $(@expr1073746447 "cppcheck-2.8/test/testunusedvar.cpp" $, 6320 $, "" $, errout@var100 .@expr4600 str (@expr4601 ) $) $) { $return ; }
6321:
6322: $functionVariableUsage_ $(@expr1073746450 "cppcheck-2.8/test/testunusedvar.cpp" $, 6322 $, "void fun(Date result) {  result.x = 12;\n}" , "test.c" $)
6323:
|
6326:
6327: ;
6328: $if $(@expr1073746451 $!@expr1073746452 $assertEquals $(@expr1073746453 "cppcheck-2.8/test/testunusedvar.cpp" $, 6328 $, "[test.c:1]: (style) Variable 'result.x' is assigned a value that is never used.\n" $, errout@var100 .@expr4600 str (@expr4601 ) $) $) { $return ; }
6329:
6330: $functionVariableUsage_ $(@expr1073746456 "cppcheck-2.8/test/testunusedvar.cpp" $, 6330 $, "struct Date { int x; };\nvoid fun(Date result) {  result.x = 12;\n}" $)
6331:
|
6334:
6335: ;
6336: $if $(@expr1073746457 $!@expr1073746458 $assertEquals $(@expr1073746459 "cppcheck-2.8/test/testunusedvar.cpp" $, 6336 $, "[test.cpp:2]: (style) Variable 'result.x' is assigned a value that is never used.\n" $, errout@var100 .@expr4600 str (@expr4601 ) $) $) { $return ; }
6337: }
6338:
6339:
6340: $functionVariableUsage_ $(@expr1073746462 "cppcheck-2.8/test/testunusedvar.cpp" $, 6340 $, "void fun() {  struct FOO foo;\n  foo.x = 123;\n}" $)
6341:
|
6344:
6345: ;
6346: $if $(@expr1073746463 $!@expr1073746464 $assertEquals $(@expr1073746465 "cppcheck-2.8/test/testunusedvar.cpp" $, 6346 $, "[test.cpp:2]: (style) Variable 'foo.x' is assigned a value that is never used.\n" $, errout@var100 .@expr4600 str (@expr4601 ) $) $) { $return ; }
6347: }
6348:
6349: void argumentClass ( ) {
6350: $functionVariableUsage_ $(@expr1073746468 "cppcheck-2.8/test/testunusedvar.cpp" $, 6350 $, "void foo(std::insert_iterator<C> it) {\n  it = 123;\n}" $)
6351:
6352:
6353: ;
6354: $if $(@expr1073746469 $!@expr1073746470 $assertEquals $(@expr1073746471 "cppcheck-2.8/test/testunusedvar.cpp" $, 6354 $, "" $, errout@var100 .@expr1073746472 str (@expr1073746473 ) $) $) { $return ; }
6355: }
6356:
6357: void escapeAlias ( ) {
6358: $functionVariableUsage_ $(@expr1073746474 "cppcheck-2.8/test/testunusedvar.cpp" $, 6358 $, "struct A {\n    std::map<int, int> m;\n    void f(int key, int number) {\n        auto pos = m.find(key);\n        if (pos == m.end())\n            m.insert(std::map<int, int>::value_type(key, number));\n        else\n            (*pos).second = number;\n    }\n};" $)
6359:
|
6367:
6368: ;
6369: $if $(@expr1073746475 $!@expr1073746476 $assertEquals $(@expr1073746477 "cppcheck-2.8/test/testunusedvar.cpp" $, 6369 $, "" $, errout@var100 .@expr1073746478 str (@expr1073746479 ) $) $) { $return ; }
6370: }
6371:
6372: void volatileData ( ) {
6373: $functionVariableUsage_ $(@expr1073746480 "cppcheck-2.8/test/testunusedvar.cpp" $, 6373 $, "struct Data { unsigned int n; };\nint main() {\n  (*(volatile struct Data*)0x4200).n = 1;\n}" $)
6374:
6375:
6376:
6377: ;
6378: $if $(@expr1073746481 $!@expr1073746482 $assertEquals $(@expr1073746483 "cppcheck-2.8/test/testunusedvar.cpp" $, 6378 $, "" $, errout@var100 .@expr1073746484 str (@expr1073746485 ) $) $) { $return ; }
6379: }
6380:
6381: void globalData ( ) {
6382:
6383: $functionVariableUsage_ $(@expr1073746486 "cppcheck-2.8/test/testunusedvar.cpp" $, 6383 $, "void f(void) {\n    ((uint8_t *) (uint16_t)0x1000)[0] = 0x42;\n}" $)
6384:
6385:
6386: ;
6387: $if $(@expr1073746487 $!@expr1073746488 $assertEquals $(@expr1073746489 "cppcheck-2.8/test/testunusedvar.cpp" $, 6387 $, "" $, errout@var100 .@expr1073746490 str (@expr1073746491 ) $) $) { $return ; }
6388: }
6389: } ;
6390:
6391: $namespace ${ TestUnusedVar instance_TestUnusedVar@var126 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@96}
  v {!<=-1,!>=2,0@96}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 32
  "TestUnusedVar" always "TestUnusedVar"
Line 40
  = always 1
  true always 1
Line 41
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 43
  ( always {!<=-1,!>=2}
  "isRecordTypeWithoutSideEffects" always "isRecordTypeWithoutSideEffects"
  false always 0
  false always 0
Line 44
  ( always {!<=-1,!>=2}
  "cleanFunction" always "cleanFunction"
  false always 0
  false always 0
Line 46
  ( always {!<=-1,!>=2}
  "emptyclass" always "emptyclass"
  false always 0
  false always 0
Line 47
  ( always {!<=-1,!>=2}
  "emptystruct" always "emptystruct"
  false always 0
  false always 0
Line 49
  ( always {!<=-1,!>=2}
  "structmember1" always "structmember1"
  false always 0
  false always 0
Line 50
  ( always {!<=-1,!>=2}
  "structmember2" always "structmember2"
  false always 0
  false always 0
Line 51
  ( always {!<=-1,!>=2}
  "structmember3" always "structmember3"
  false always 0
  false always 0
Line 52
  ( always {!<=-1,!>=2}
  "structmember4" always "structmember4"
  false always 0
  false always 0
Line 53
  ( always {!<=-1,!>=2}
  "structmember5" always "structmember5"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "structmember6" always "structmember6"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "structmember7" always "structmember7"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "structmember8" always "structmember8"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "structmember9" always "structmember9"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "structmember_extern" always "structmember_extern"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "structmember10" always "structmember10"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "structmember11" always "structmember11"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "structmember12" always "structmember12"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "structmember13" always "structmember13"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "structmember14" always "structmember14"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "structmember15" always "structmember15"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "structmember_sizeof" always "structmember_sizeof"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "structmember16" always "structmember16"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "structmember17" always "structmember17"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "structmember18" always "structmember18"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "structmember19" always "structmember19"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "structmember20" always "structmember20"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "localvar1" always "localvar1"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "localvar2" always "localvar2"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "localvar3" always "localvar3"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "localvar4" always "localvar4"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "localvar5" always "localvar5"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "localvar6" always "localvar6"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "localvar8" always "localvar8"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "localvar9" always "localvar9"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "localvar10" always "localvar10"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "localvar11" always "localvar11"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "localvar12" always "localvar12"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "localvar13" always "localvar13"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "localvar14" always "localvar14"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "localvar15" always "localvar15"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "localvar16" always "localvar16"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "localvar17" always "localvar17"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "localvar18" always "localvar18"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "localvar19" always "localvar19"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "localvar20" always "localvar20"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "localvar21" always "localvar21"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "localvar22" always "localvar22"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "localvar23" always "localvar23"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "localvar24" always "localvar24"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "localvar25" always "localvar25"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "localvar26" always "localvar26"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "localvar27" always "localvar27"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "localvar28" always "localvar28"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "localvar29" always "localvar29"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "localvar30" always "localvar30"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "localvar31" always "localvar31"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "localvar32" always "localvar32"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "localvar33" always "localvar33"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "localvar34" always "localvar34"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "localvar35" always "localvar35"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "localvar36" always "localvar36"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "localvar37" always "localvar37"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "localvar38" always "localvar38"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "localvar39" always "localvar39"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "localvar40" always "localvar40"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "localvar41" always "localvar41"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "localvar42" always "localvar42"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "localvar43" always "localvar43"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "localvar44" always "localvar44"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "localvar45" always "localvar45"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "localvar46" always "localvar46"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "localvar47" always "localvar47"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "localvar48" always "localvar48"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "localvar49" always "localvar49"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "localvar50" always "localvar50"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "localvar51" always "localvar51"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "localvar52" always "localvar52"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "localvar53" always "localvar53"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "localvar54" always "localvar54"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "localvar55" always "localvar55"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "localvar56" always "localvar56"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "localvar57" always "localvar57"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "localvar58" always "localvar58"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "localvar59" always "localvar59"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "localvar60" always "localvar60"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "localvar61" always "localvar61"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "localvar62" always "localvar62"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "localvar63" always "localvar63"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "localvarloops" always "localvarloops"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "localvaralias1" always "localvaralias1"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "localvaralias2" always "localvaralias2"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "localvaralias3" always "localvaralias3"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "localvaralias4" always "localvaralias4"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "localvaralias5" always "localvaralias5"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "localvaralias6" always "localvaralias6"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "localvaralias7" always "localvaralias7"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "localvaralias8" always "localvaralias8"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "localvaralias9" always "localvaralias9"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "localvaralias10" always "localvaralias10"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "localvaralias11" always "localvaralias11"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "localvaralias12" always "localvaralias12"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "localvaralias13" always "localvaralias13"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "localvaralias14" always "localvaralias14"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "localvaralias15" always "localvaralias15"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "localvaralias16" always "localvaralias16"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "localvaralias17" always "localvaralias17"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "localvaralias18" always "localvaralias18"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "localvaralias19" always "localvaralias19"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "localvarasm" always "localvarasm"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "localvarstatic" always "localvarstatic"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "localvarextern" always "localvarextern"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "localvardynamic1" always "localvardynamic1"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "localvardynamic2" always "localvardynamic2"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "localvardynamic3" always "localvardynamic3"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "localvararray1" always "localvararray1"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "localvararray2" always "localvararray2"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "localvararray3" always "localvararray3"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "localvararray4" always "localvararray4"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "localvararray5" always "localvararray5"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "localvarstring1" always "localvarstring1"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "localvarstring2" always "localvarstring2"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "localvarconst1" always "localvarconst1"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "localvarconst2" always "localvarconst2"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "localvarreturn" always "localvarreturn"
  false always 0
  false always 0
Line 170
  ( always {!<=-1,!>=2}
  "localvarmaybeunused" always "localvarmaybeunused"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "localvarthrow" always "localvarthrow"
  false always 0
  false always 0
Line 174
  ( always {!<=-1,!>=2}
  "localVarStd" always "localVarStd"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "localVarClass" always "localVarClass"
  false always 0
  false always 0
Line 176
  ( always {!<=-1,!>=2}
  "localVarSmartPtr" always "localVarSmartPtr"
  false always 0
  false always 0
Line 179
  ( always {!<=-1,!>=2}
  "localvarStruct1" always "localvarStruct1"
  false always 0
  false always 0
Line 180
  ( always {!<=-1,!>=2}
  "localvarStruct2" always "localvarStruct2"
  false always 0
  false always 0
Line 181
  ( always {!<=-1,!>=2}
  "localvarStruct3" always "localvarStruct3"
  false always 0
  false always 0
Line 182
  ( always {!<=-1,!>=2}
  "localvarStruct5" always "localvarStruct5"
  false always 0
  false always 0
Line 183
  ( always {!<=-1,!>=2}
  "localvarStruct6" always "localvarStruct6"
  false always 0
  false always 0
Line 184
  ( always {!<=-1,!>=2}
  "localvarStruct7" always "localvarStruct7"
  false always 0
  false always 0
Line 185
  ( always {!<=-1,!>=2}
  "localvarStruct8" always "localvarStruct8"
  false always 0
  false always 0
Line 186
  ( always {!<=-1,!>=2}
  "localvarStruct9" always "localvarStruct9"
  false always 0
  false always 0
Line 187
  ( always {!<=-1,!>=2}
  "localvarStruct10" always "localvarStruct10"
  false always 0
  false always 0
Line 188
  ( always {!<=-1,!>=2}
  "localvarStruct11" always "localvarStruct11"
  false always 0
  false always 0
Line 189
  ( always {!<=-1,!>=2}
  "localvarStruct12" always "localvarStruct12"
  false always 0
  false always 0
Line 190
  ( always {!<=-1,!>=2}
  "localvarStruct13" always "localvarStruct13"
  false always 0
  false always 0
Line 191
  ( always {!<=-1,!>=2}
  "localvarStructArray" always "localvarStructArray"
  false always 0
  false always 0
Line 192
  ( always {!<=-1,!>=2}
  "localvarUnion1" always "localvarUnion1"
  false always 0
  false always 0
Line 194
  ( always {!<=-1,!>=2}
  "localvarOp" always "localvarOp"
  false always 0
  false always 0
Line 195
  ( always {!<=-1,!>=2}
  "localvarInvert" always "localvarInvert"
  false always 0
  false always 0
Line 196
  ( always {!<=-1,!>=2}
  "localvarIf" always "localvarIf"
  false always 0
  false always 0
Line 197
  ( always {!<=-1,!>=2}
  "localvarIfElse" always "localvarIfElse"
  false always 0
  false always 0
Line 198
  ( always {!<=-1,!>=2}
  "localvarDeclaredInIf" always "localvarDeclaredInIf"
  false always 0
  false always 0
Line 199
  ( always {!<=-1,!>=2}
  "localvarOpAssign" always "localvarOpAssign"
  false always 0
  false always 0
Line 200
  ( always {!<=-1,!>=2}
  "localvarFor" always "localvarFor"
  false always 0
  false always 0
Line 201
  ( always {!<=-1,!>=2}
  "localvarForEach" always "localvarForEach"
  false always 0
  false always 0
Line 202
  ( always {!<=-1,!>=2}
  "localvarShift1" always "localvarShift1"
  false always 0
  false always 0
Line 203
  ( always {!<=-1,!>=2}
  "localvarShift3" always "localvarShift3"
  false always 0
  false always 0
Line 204
  ( always {!<=-1,!>=2}
  "localvarCast" always "localvarCast"
  false always 0
  false always 0
Line 205
  ( always {!<=-1,!>=2}
  "localvarClass" always "localvarClass"
  false always 0
  false always 0
Line 206
  ( always {!<=-1,!>=2}
  "localvarUnused" always "localvarUnused"
  false always 0
  false always 0
Line 207
  ( always {!<=-1,!>=2}
  "localvarFunction" always "localvarFunction"
  false always 0
  false always 0
Line 208
  ( always {!<=-1,!>=2}
  "localvarIfNOT" always "localvarIfNOT"
  false always 0
  false always 0
Line 209
  ( always {!<=-1,!>=2}
  "localvarAnd" always "localvarAnd"
  false always 0
  false always 0
Line 210
  ( always {!<=-1,!>=2}
  "localvarSwitch" always "localvarSwitch"
  false always 0
  false always 0
Line 211
  ( always {!<=-1,!>=2}
  "localvarNULL" always "localvarNULL"
  false always 0
  false always 0
Line 212
  ( always {!<=-1,!>=2}
  "localvarUnusedGoto" always "localvarUnusedGoto"
  false always 0
  false always 0
Line 213
  ( always {!<=-1,!>=2}
  "localvarRangeBasedFor" always "localvarRangeBasedFor"
  false always 0
  false always 0
Line 214
  ( always {!<=-1,!>=2}
  "localvarAssignInWhile" always "localvarAssignInWhile"
  false always 0
  false always 0
Line 215
  ( always {!<=-1,!>=2}
  "localvarTemplate" always "localvarTemplate"
  false always 0
  false always 0
Line 216
  ( always {!<=-1,!>=2}
  "localvarFuncPtr" always "localvarFuncPtr"
  false always 0
  false always 0
Line 217
  ( always {!<=-1,!>=2}
  "localvarAddr" always "localvarAddr"
  false always 0
  false always 0
Line 218
  ( always {!<=-1,!>=2}
  "localvarDelete" always "localvarDelete"
  false always 0
  false always 0
Line 219
  ( always {!<=-1,!>=2}
  "localvarLambda" always "localvarLambda"
  false always 0
  false always 0
Line 220
  ( always {!<=-1,!>=2}
  "localvarStructuredBinding" always "localvarStructuredBinding"
  false always 0
  false always 0
Line 222
  ( always {!<=-1,!>=2}
  "localvarCppInitialization" always "localvarCppInitialization"
  false always 0
  false always 0
Line 223
  ( always {!<=-1,!>=2}
  "localvarCpp11Initialization" always "localvarCpp11Initialization"
  false always 0
  false always 0
Line 225
  ( always {!<=-1,!>=2}
  "chainedAssignment" always "chainedAssignment"
  false always 0
  false always 0
Line 227
  ( always {!<=-1,!>=2}
  "crash1" always "crash1"
  false always 0
  false always 0
Line 228
  ( always {!<=-1,!>=2}
  "crash2" always "crash2"
  false always 0
  false always 0
Line 229
  ( always {!<=-1,!>=2}
  "usingNamespace" always "usingNamespace"
  false always 0
  false always 0
Line 231
  ( always {!<=-1,!>=2}
  "lambdaFunction" always "lambdaFunction"
  false always 0
  false always 0
Line 232
  ( always {!<=-1,!>=2}
  "namespaces" always "namespaces"
  false always 0
  false always 0
Line 233
  ( always {!<=-1,!>=2}
  "bracesInitCpp11" always "bracesInitCpp11"
  false always 0
  false always 0
Line 235
  ( always {!<=-1,!>=2}
  "argument" always "argument"
  false always 0
  false always 0
Line 236
  ( always {!<=-1,!>=2}
  "argumentClass" always "argumentClass"
  false always 0
  false always 0
Line 237
  ( always {!<=-1,!>=2}
  "escapeAlias" always "escapeAlias"
  false always 0
  false always 0
Line 238
  ( always {!<=-1,!>=2}
  "volatileData" always "volatileData"
  false always 0
  false always 0
Line 239
  ( always {!<=-1,!>=2}
  "globalData" always "globalData"
  false always 0
  false always 0
Line 244
  , always 0
  = always 0
  nullptr always 0
Line 246
  "" always ""
Line 248
  nullptr always 0
Line 249
  directives possible lifetime[Address]=(directives)@9
Line 250
  directives {!0,lifetime[Address]=(directives)@9}
Line 253
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 254
  & {lifetime[Address]=(preprocessor),!0}
Line 255
  code inconclusive {"void f() {\n    {\n    }\n    {\n        struct S { int a; };\n        S s{};\n        {\n            if (s.a) {}\n        }\n    }\n}\n"@240,"class C {};\nstruct S {\n    char* p;\n    std::string str;\n    C c;\n};\nvoid f(S* s) {}\n"@241,"class C {};\nstruct S {\n    char* p;\n    std::string str;\n    C c;\n};\nvoid f(S& s) {}\n"@242,"struct S {\n    struct T {\n        int i;\n    } t[2];\n};\nS s[1];\nint f() {\n    return s[0].t[1].i;\n}\n"@243,"struct S { int a; };\nstruct T { S s; };\nint f(const T** tp) {\n    return tp[0]->s.a;\n}\n"@244,"struct S { int a; };\nint f(const S* sp) {\n    return (*sp).a; \n}\n"@245,"struct S { int a; };\nint f(const S** spp) {\n    return spp[0]->a;\n}\n"@246,"struct S { int a; };\nint f(const S** spp) {\n    return spp[0][0].a;\n}\n"@247,"struct S { int a; };\nint f(const S* sp) {\n    return sp[0].a;\n}\n"@248,"struct S { int a; };\nint f(const S* sp) {\n    return sp->a;\n}\n"@249}
Line 256
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testunusedvar.cpp"@240,"cppcheck-2.8/test/testunusedvar.cpp"@241,"cppcheck-2.8/test/testunusedvar.cpp"@242,"cppcheck-2.8/test/testunusedvar.cpp"@243,"cppcheck-2.8/test/testunusedvar.cpp"@244,"cppcheck-2.8/test/testunusedvar.cpp"@245,"cppcheck-2.8/test/testunusedvar.cpp"@246,"cppcheck-2.8/test/testunusedvar.cpp"@247,"cppcheck-2.8/test/testunusedvar.cpp"@248,"cppcheck-2.8/test/testunusedvar.cpp"@249}
  line inconclusive {1749@240,1635@241,1647@242,1659@243,1670@244,1677@245,1683@246,1689@247,1695@248,1701@249}
  "test.cpp" always "test.cpp"
Line 259
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 264
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  264 always 264
  "class A {};\nvoid f() {\n   A a;\n}" always "class A {};\nvoid f() {\n   A a;\n}"
Line 269
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  269 always 269
  "[test.cpp:3]: (style) Unused variable: a\n" always "[test.cpp:3]: (style) Unused variable: a\n"
Line 271
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  271 always 271
  "class A {};\nclass B {\npublic:\n   A a;\n};\nvoid f() {\n   B b;\n}" always "class A {};\nclass B {\npublic:\n   A a;\n};\nvoid f() {\n   B b;\n}"
Line 280
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  280 always 280
  "[test.cpp:7]: (style) Unused variable: b\n" always "[test.cpp:7]: (style) Unused variable: b\n"
Line 282
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  282 always 282
  "class C {\npublic:\n   C() = default;\n};\nvoid f() {\n   C c;\n}" always "class C {\npublic:\n   C() = default;\n};\nvoid f() {\n   C c;\n}"
Line 290
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  290 always 290
  "[test.cpp:6]: (style) Unused variable: c\n" always "[test.cpp:6]: (style) Unused variable: c\n"
Line 292
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  292 always 292
  "class D {\npublic:\n   D() {}\n};\nvoid f() {\n   D d;\n}" always "class D {\npublic:\n   D() {}\n};\nvoid f() {\n   D d;\n}"
Line 300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  300 always 300
  "[test.cpp:6]: (style) Unused variable: d\n" always "[test.cpp:6]: (style) Unused variable: d\n"
Line 302
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  302 always 302
  "class E {\npublic:\n   uint32_t u{1};\n};\nvoid f() {\n   E e;\n}" always "class E {\npublic:\n   uint32_t u{1};\n};\nvoid f() {\n   E e;\n}"
Line 310
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  310 always 310
  "[test.cpp:6]: (style) Unused variable: e\n" always "[test.cpp:6]: (style) Unused variable: e\n"
Line 312
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  312 always 312
  "class F {\npublic:\n   F() : x(0) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "class F {\npublic:\n   F() : x(0) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 321
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  321 always 321
  "[test.cpp:7]: (style) Unused variable: f\n" always "[test.cpp:7]: (style) Unused variable: f\n"
Line 323
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  323 always 323
  "class F {\npublic:\n   F() : x{0} {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "class F {\npublic:\n   F() : x{0} {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  332 always 332
  "[test.cpp:7]: (style) Unused variable: f\n" always "[test.cpp:7]: (style) Unused variable: f\n"
Line 334
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  334 always 334
  "int y = 0;\nclass F {\npublic:\n   F() : x(y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "int y = 0;\nclass F {\npublic:\n   F() : x(y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  344 always 344
  "[test.cpp:8]: (style) Unused variable: f\n" always "[test.cpp:8]: (style) Unused variable: f\n"
Line 346
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  346 always 346
  "int y = 0;class F {\npublic:\n   F() : x(++y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "int y = 0;class F {\npublic:\n   F() : x(++y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  356 always 356
  "[test.cpp:7]: (style) Unused variable: f\n" always "[test.cpp:7]: (style) Unused variable: f\n"
Line 358
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  358 always 358
  "int y = 0;class F {\npublic:\n   F() : x(--y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "int y = 0;class F {\npublic:\n   F() : x(--y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 368
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  368 always 368
  "[test.cpp:7]: (style) Unused variable: f\n" always "[test.cpp:7]: (style) Unused variable: f\n"
Line 370
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  370 always 370
  "int y = 0;class F {\npublic:\n   F() : x(y+=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "int y = 0;class F {\npublic:\n   F() : x(y+=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 380
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  380 always 380
  "[test.cpp:7]: (style) Unused variable: f\n" always "[test.cpp:7]: (style) Unused variable: f\n"
Line 382
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  382 always 382
  "int y = 0;class F {\npublic:\n   F() : x(y-=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "int y = 0;class F {\npublic:\n   F() : x(y-=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 392
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  392 always 392
  "[test.cpp:7]: (style) Unused variable: f\n" always "[test.cpp:7]: (style) Unused variable: f\n"
Line 395
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  395 always 395
  "class F {\npublic:\n   F() {\n       int i = 0;\n       (void) i;   }\n};\nvoid f() {\n   F f;\n}" always "class F {\npublic:\n   F() {\n       int i = 0;\n       (void) i;   }\n};\nvoid f() {\n   F f;\n}"
Line 406
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  406 always 406
  "error" always "error"
  "" always ""
Line 409
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  409 always 409
  "class F {\npublic:\n   F() {\n       int i = 0;\n       (void) i;   }\n};\nclass G {\npublic:\n   F f;\n};\nvoid f() {\n   G g;\n}" always "class F {\npublic:\n   F() {\n       int i = 0;\n       (void) i;   }\n};\nclass G {\npublic:\n   F f;\n};\nvoid f() {\n   G g;\n}"
Line 424
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  424 always 424
  "" always ""
Line 427
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  427 always 427
  "class F {\npublic:\n   F() {\n       int i = 0;\n       (void) i;   }\n};\nclass G {\npublic:\n   G() : f(F()) {}\n   F f;};\nvoid f() {\n   G g;\n}" always "class F {\npublic:\n   F() {\n       int i = 0;\n       (void) i;   }\n};\nclass G {\npublic:\n   G() : f(F()) {}\n   F f;};\nvoid f() {\n   G g;\n}"
Line 443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  443 always 443
  "" always ""
Line 446
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  446 always 446
  "class H {\npublic:\n   unknown_type u{1};\n};\nvoid f() {\n   H h;\n}" always "class H {\npublic:\n   unknown_type u{1};\n};\nvoid f() {\n   H h;\n}"
Line 454
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  454 always 454
  "" always ""
Line 457
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  457 always 457
  "class H {\npublic:\n   H() : x{0}, u(1) {}\n   int x;   unknown_type u;\n};\nvoid f() {\n   H h;\n}" always "class H {\npublic:\n   H() : x{0}, u(1) {}\n   int x;   unknown_type u;\n};\nvoid f() {\n   H h;\n}"
Line 467
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  467 always 467
  "" always ""
Line 470
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  470 always 470
  "unknown_type y = 0;\nclass F {\npublic:\n   F() : x(y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "unknown_type y = 0;\nclass F {\npublic:\n   F() : x(y) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 480
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  480 always 480
  "" always ""
Line 482
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  482 always 482
  "int sideEffectFunc();\nclass F {\npublic:\n   F() : x(sideEffectFunc()) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "int sideEffectFunc();\nclass F {\npublic:\n   F() : x(sideEffectFunc()) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 492
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  492 always 492
  "" always ""
Line 494
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  494 always 494
  "class F {\npublic:\n   F() : x(++unknownValue) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "class F {\npublic:\n   F() : x(++unknownValue) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  503 always 503
  "" always ""
Line 505
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  505 always 505
  "class F {\npublic:\n   F() : x(--unknownValue) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "class F {\npublic:\n   F() : x(--unknownValue) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  514 always 514
  "" always ""
Line 516
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  516 always 516
  "class F {\npublic:\n   F() : x(unknownValue+=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "class F {\npublic:\n   F() : x(unknownValue+=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 525
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  525 always 525
  "" always ""
Line 527
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  527 always 527
  "class F {\npublic:\n   F() : x(unknownValue-=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "class F {\npublic:\n   F() : x(unknownValue-=1) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  536 always 536
  "" always ""
Line 541
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  541 always 541
  "class F {\npublic:\n   F() : x(func()) {}\n   int x;\n};\nvoid f() {\n   F f;\n}" always "class F {\npublic:\n   F() : x(func()) {}\n   int x;\n};\nvoid f() {\n   F f;\n}"
Line 550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  550 always 550
  "" always ""
Line 553
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  553 always 553
  "int func();\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func();\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  563 always 563
  "" always ""
Line 566
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  566 always 566
  "int func() { return 1; }\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func() { return 1; }\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 576
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  576 always 576
  "[test.cpp:8]: (style) Unused variable: c\n" always "[test.cpp:8]: (style) Unused variable: c\n"
Line 579
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  579 always 579
  "int func() {\n   int x = 1;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func() {\n   int x = 1;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 592
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  592 always 592
  "[test.cpp:11]: (style) Unused variable: c\n" always "[test.cpp:11]: (style) Unused variable: c\n"
Line 595
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  595 always 595
  "int func() {\n   unknown_type x = 1;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func() {\n   unknown_type x = 1;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 608
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  608 always 608
  "" always ""
Line 611
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  611 always 611
  "int func() {\n   return unknown_var;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func() {\n   return unknown_var;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 623
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  623 always 623
  "" always ""
Line 626
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  626 always 626
  "int x = 1;\nint func() {\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x = 1;\nint func() {\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 639
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  639 always 639
  "[test.cpp:11]: (style) Unused variable: c\n" always "[test.cpp:11]: (style) Unused variable: c\n"
Line 642
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  642 always 642
  "int x = 1;\nint func() {\n   return x++;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x = 1;\nint func() {\n   return x++;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 655
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  655 always 655
  "" always ""
Line 658
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  658 always 658
  "int x = 1;\nint func() {\n   x++;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x = 1;\nint func() {\n   x++;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 672
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  672 always 672
  "" always ""
Line 674
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  674 always 674
  "int x = 1;\nint func() {\n   --x;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x = 1;\nint func() {\n   --x;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 688
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  688 always 688
  "" always ""
Line 690
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  690 always 690
  "int x = 1;\nint func() {\n   x += 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x = 1;\nint func() {\n   x += 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 704
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  704 always 704
  "" always ""
Line 706
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  706 always 706
  "int x = 1;\nint func() {\n   x = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x = 1;\nint func() {\n   x = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 720
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  720 always 720
  "" always ""
Line 723
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  723 always 723
  "int global = 1;\nint func() {\n   int x = global + 1;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int global = 1;\nint func() {\n   int x = global + 1;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 737
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  737 always 737
  "[test.cpp:12]: (style) Unused variable: c\n" always "[test.cpp:12]: (style) Unused variable: c\n"
Line 740
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  740 always 740
  "int x[] = {0, 1, 3};\nint func() {\n   x[0] = 4;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x[] = {0, 1, 3};\nint func() {\n   x[0] = 4;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  754 always 754
  "" always ""
Line 756
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  756 always 756
  "int x[] = {0, 1, 3};\nint func() {\n   *x = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x[] = {0, 1, 3};\nint func() {\n   *x = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 770
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  770 always 770
  "" always ""
Line 772
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  772 always 772
  "int x[] = {0, 1, 3};\nint func() {\n   *(x) = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x[] = {0, 1, 3};\nint func() {\n   *(x) = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  786 always 786
  "" always ""
Line 789
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  789 always 789
  "int x[] = {0, 1, 3};\nint func() {\n   *(x + 1) = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x[] = {0, 1, 3};\nint func() {\n   *(x + 1) = 2;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 803
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  803 always 803
  "" always ""
Line 805
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  805 always 805
  "int x[][] = {{0, 1}, {2, 3}};\nint func() {\n   *((x + 1) + 1) = 4;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x[][] = {{0, 1}, {2, 3}};\nint func() {\n   *((x + 1) + 1) = 4;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 819
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  819 always 819
  "" always ""
Line 821
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  821 always 821
  "int x[] = {0, 1, 3};\nint func() {\n   int local = *(x + 1);\n   (void) local;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x[] = {0, 1, 3};\nint func() {\n   int local = *(x + 1);\n   (void) local;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 836
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  836 always 836
  "[test.cpp:13]: (style) Unused variable: c\n" always "[test.cpp:13]: (style) Unused variable: c\n"
Line 838
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  838 always 838
  "int x[] = {0, 1, 3};\nint func() {\n   int* local = x + 2;\n   (void) local;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x[] = {0, 1, 3};\nint func() {\n   int* local = x + 2;\n   (void) local;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 853
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  853 always 853
  "[test.cpp:13]: (style) Unused variable: c\n" always "[test.cpp:13]: (style) Unused variable: c\n"
Line 855
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  855 always 855
  "int x[] = {0, 1, 3};\nint func() {\n   int* local = x + 2;\n   return *local;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x[] = {0, 1, 3};\nint func() {\n   int* local = x + 2;\n   return *local;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  869 always 869
  "" always ""
Line 871
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  871 always 871
  "int x[] = {0, 1, 3};\nint func() {\n   return *(x + 1);\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int x[] = {0, 1, 3};\nint func() {\n   return *(x + 1);\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  884 always 884
  "" always ""
Line 887
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  887 always 887
  "int func() {\n   int x = 1;\n   x = 2;\n   x++;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func() {\n   int x = 1;\n   x = 2;\n   x++;\n   return x;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 902
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  902 always 902
  "[test.cpp:13]: (style) Unused variable: c\n" always "[test.cpp:13]: (style) Unused variable: c\n"
Line 905
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  905 always 905
  "class A {};\nA func() {\n   A a;\n   return a;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   A x;\n};\nvoid f() {\n   C c;\n}" always "class A {};\nA func() {\n   A a;\n   return a;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   A x;\n};\nvoid f() {\n   C c;\n}"
Line 919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  919 always 919
  "[test.cpp:12]: (style) Unused variable: c\n" always "[test.cpp:12]: (style) Unused variable: c\n"
Line 922
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  922 always 922
  "class A {\npublic:\n   unknown_type u{1};\n};\nint func() {\n   A a;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "class A {\npublic:\n   unknown_type u{1};\n};\nint func() {\n   A a;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 939
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  939 always 939
  "" always ""
Line 942
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  942 always 942
  "int func() {\n   unknown_type a;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func() {\n   unknown_type a;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 955
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  955 always 955
  "" always ""
Line 958
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  958 always 958
  "int another_func() { return 1;}\nint func() {\n   another_func();\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int another_func() { return 1;}\nint func() {\n   another_func();\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  972 always 972
  "[test.cpp:12]: (style) Unused variable: c\n" always "[test.cpp:12]: (style) Unused variable: c\n"
Line 975
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  975 always 975
  "int global = 1;int another_func() {\n   global++;\n   return global;}\nint func() {\n   another_func();\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int global = 1;int another_func() {\n   global++;\n   return global;}\nint func() {\n   another_func();\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  992 always 992
  "" always ""
Line 995
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  995 always 995
  "int func() {\n   unknown_func();\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func() {\n   unknown_func();\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1008 always 1008
  "" always ""
Line 1011
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1011 always 1011
  "int func(int i) {\n   if (i != 2) {\n       func(i++);\n       return 2;\n   }\n   return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func(int i) {\n   if (i != 2) {\n       func(i++);\n       return 2;\n   }\n   return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1027
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1027 always 1027
  "[test.cpp:14]: (style) Unused variable: c\n" always "[test.cpp:14]: (style) Unused variable: c\n"
Line 1030
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1030 always 1030
  "void another_func() {\n   func(0);\n}\nint func(int i) {\n   if (i != 2) {\n       another_func();\n       return 2;\n   }\n   return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "void another_func() {\n   func(0);\n}\nint func(int i) {\n   if (i != 2) {\n       another_func();\n       return 2;\n   }\n   return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1049
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1049 always 1049
  "[test.cpp:17]: (style) Unused variable: c\n" always "[test.cpp:17]: (style) Unused variable: c\n"
Line 1052
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1052 always 1052
  "int global = 1;\nint func(int i) {\n   if (i != 2) {\n       global++;\n       func(i++);\n       return 2;\n   }\n   return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int global = 1;\nint func(int i) {\n   if (i != 2) {\n       global++;\n       func(i++);\n       return 2;\n   }\n   return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1070
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1070 always 1070
  "" always ""
Line 1073
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1073 always 1073
  "int func(int i) {\n   if (i == 0) { return 0;}\n   else { return unknownSideEffectFunction(); }\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func(int i) {\n   if (i == 0) { return 0;}\n   else { return unknownSideEffectFunction(); }\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1086 always 1086
  "" always ""
Line 1089
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1089 always 1089
  "int func(int i) {\n   if (i == 0) { return 0;}\n   else { return i; }\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func(int i) {\n   if (i == 0) { return 0;}\n   else { return i; }\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1102 always 1102
  "[test.cpp:11]: (style) Unused variable: c\n" always "[test.cpp:11]: (style) Unused variable: c\n"
Line 1105
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1105 always 1105
  "int func(int i) {\n   if (i == 0) { return unknownSideEffectFunction();}\n   else { return unknown_var; }\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func(int i) {\n   if (i == 0) { return unknownSideEffectFunction();}\n   else { return unknown_var; }\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1118
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1118 always 1118
  "" always ""
Line 1121
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1121 always 1121
  "int func(int i) {\n    return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int func(int i) {\n    return i;\n}\nclass C {\npublic:\n   C() : x(func(0)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1133 always 1133
  "[test.cpp:10]: (style) Unused variable: c\n" always "[test.cpp:10]: (style) Unused variable: c\n"
Line 1136
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1136 always 1136
  "char buf[10];\nint func(char* p) {\n   *p = 0;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func(buf)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "char buf[10];\nint func(char* p) {\n   *p = 0;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func(buf)) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1150
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1150 always 1150
  "" always ""
Line 1153
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1153 always 1153
  "int global = 1;\nint func() {\n   int* p = &global;\n   *p = 0;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int global = 1;\nint func() {\n   int* p = &global;\n   *p = 0;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1168
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1168 always 1168
  "" always ""
Line 1171
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1171 always 1171
  "int global = 1;\nint func() {\n   int* p = &global;\n   (void) p;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "int global = 1;\nint func() {\n   int* p = &global;\n   (void) p;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1186
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1186 always 1186
  "[test.cpp:13]: (style) Unused variable: c\n" always "[test.cpp:13]: (style) Unused variable: c\n"
Line 1189
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1189 always 1189
  "struct S { int x; } s;\nint func() {\n   s.x = 1;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "struct S { int x; } s;\nint func() {\n   s.x = 1;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1203
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1203 always 1203
  "" always ""
Line 1206
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1206 always 1206
  "struct S { int x; } s;\nint func() {\n   int y = s.x + 1;\n   return y;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "struct S { int x; } s;\nint func() {\n   int y = s.x + 1;\n   return y;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1220
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1220 always 1220
  "[test.cpp:12]: (style) Unused variable: c\n" always "[test.cpp:12]: (style) Unused variable: c\n"
Line 1223
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1223 always 1223
  "struct S { int x; };\nstruct S* s = new(struct S);\nint func() {\n   s->x = 1;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "struct S { int x; };\nstruct S* s = new(struct S);\nint func() {\n   s->x = 1;\n   return 1;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1238
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1238 always 1238
  "" always ""
Line 1241
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1241 always 1241
  "struct S { int x; };\nstruct S* s = new(struct S);\nint func() {\n   int y = s->x + 1;\n   return y;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}" always "struct S { int x; };\nstruct S* s = new(struct S);\nint func() {\n   int y = s->x + 1;\n   return y;\n}\nclass C {\npublic:\n   C() : x(func()) {}\n   int x;\n};\nvoid f() {\n   C c;\n}"
Line 1256
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1256 always 1256
  "[test.cpp:13]: (style) Unused variable: c\n" always "[test.cpp:13]: (style) Unused variable: c\n"
Line 1261
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1261 always 1261
  "class Carla {\n};\nclass Fred : Carla {\n};\nvoid foo() {\n    Fred fred;\n    throw fred;\n}" always "class Carla {\n};\nclass Fred : Carla {\n};\nvoid foo() {\n    Fred fred;\n    throw fred;\n}"
Line 1269
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1269 always 1269
  "" always ""
Line 1274
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1274 always 1274
  "struct Fred {\n};\nvoid foo() {\n    Fred fred;\n    throw fred;\n}" always "struct Fred {\n};\nvoid foo() {\n    Fred fred;\n    throw fred;\n}"
Line 1280
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1280 always 1280
  "" always ""
Line 1284
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1284 always 1284
  "struct abc\n{\n    int a;\n    int b;\n    int c;\n};" always "struct abc\n{\n    int a;\n    int b;\n    int c;\n};"
Line 1290
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1290 always 1290
  "[test.cpp:3]: (style) struct member 'abc::a' is never used.\n[test.cpp:4]: (style) struct member 'abc::b' is never used.\n[test.cpp:5]: (style) struct member 'abc::c' is never used.\n" always "[test.cpp:3]: (style) struct member 'abc::a' is never used.\n[test.cpp:4]: (style) struct member 'abc::b' is never used.\n[test.cpp:5]: (style) struct member 'abc::c' is never used.\n"
Line 1294
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1294 always 1294
  "union abc\n{\n    int a;\n    int b;\n    int c;\n};" always "union abc\n{\n    int a;\n    int b;\n    int c;\n};"
Line 1300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1300 always 1300
  "[test.cpp:3]: (style) union member 'abc::a' is never used.\n[test.cpp:4]: (style) union member 'abc::b' is never used.\n[test.cpp:5]: (style) union member 'abc::c' is never used.\n" always "[test.cpp:3]: (style) union member 'abc::a' is never used.\n[test.cpp:4]: (style) union member 'abc::b' is never used.\n[test.cpp:5]: (style) union member 'abc::c' is never used.\n"
Line 1306
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1306 always 1306
  "struct ABC\n{\n    int a;\n    int b;\n    int c;\n};\n\nvoid foo()\n{\n    struct ABC abc;\n    int a = abc.a;\n    int b = abc.b;\n    int c = abc.c;\n}" always "struct ABC\n{\n    int a;\n    int b;\n    int c;\n};\n\nvoid foo()\n{\n    struct ABC abc;\n    int a = abc.a;\n    int b = abc.b;\n    int c = abc.c;\n}"
Line 1320
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1320 always 1320
  "" always ""
Line 1324
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1324 always 1324
  "struct ABC\n{\n    int a;\n    int b;\n    int c;\n};\n\nstatic struct ABC abc[] = { {1, 2, 3} };\n\nvoid foo()\n{\n    int a = abc[0].a;\n    int b = abc[0].b;\n    int c = abc[0].c;\n}" always "struct ABC\n{\n    int a;\n    int b;\n    int c;\n};\n\nstatic struct ABC abc[] = { {1, 2, 3} };\n\nvoid foo()\n{\n    int a = abc[0].a;\n    int b = abc[0].b;\n    int c = abc[0].c;\n}"
Line 1339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1339 always 1339
  "" always ""
Line 1343
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1343 always 1343
  "struct ABC\n{\n    const int a;\n};\n\nvoid foo()\n{\n    ABC abc;\n    if (abc.a == 2);\n}" always "struct ABC\n{\n    const int a;\n};\n\nvoid foo()\n{\n    ABC abc;\n    if (abc.a == 2);\n}"
Line 1353
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1353 always 1353
  "" always ""
Line 1357
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1357 always 1357
  "struct AB\n{\n    int a;\n    int b;\n    void reset()\n    {\n        a = 1;\n        b = 2;\n    }\n};\n\nvoid foo()\n{\n    struct AB ab;\n    ab.reset();\n}" always "struct AB\n{\n    int a;\n    int b;\n    void reset()\n    {\n        a = 1;\n        b = 2;\n    }\n};\n\nvoid foo()\n{\n    struct AB ab;\n    ab.reset();\n}"
Line 1373
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1373 always 1373
  "" always ""
Line 1377
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1377 always 1377
  "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(char *buf)\n{\n    struct AB *ab = (struct AB *)&buf[10];\n}" always "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(char *buf)\n{\n    struct AB *ab = (struct AB *)&buf[10];\n}"
Line 1387
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1387 always 1387
  "" always ""
Line 1389
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1389 always 1389
  "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(char *buf)\n{\n    struct AB *ab = (AB *)&buf[10];\n}" always "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(char *buf)\n{\n    struct AB *ab = (AB *)&buf[10];\n}"
Line 1399
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1399 always 1399
  "" always ""
Line 1403
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1403 always 1403
  "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(struct AB *ab)\n{\n    ab->a = 0;\n}" always "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(struct AB *ab)\n{\n    ab->a = 0;\n}"
Line 1413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1413 always 1413
  "[test.cpp:4]: (style) struct member 'AB::b' is never used.\n" always "[test.cpp:4]: (style) struct member 'AB::b' is never used.\n"
Line 1415
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1415 always 1415
  "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(struct AB _shuge *ab)\n{\n    ab->a = 0;\n}" always "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(struct AB _shuge *ab)\n{\n    ab->a = 0;\n}"
Line 1425
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1425 always 1425
  "[test.cpp:4]: (style) struct member 'AB::b' is never used.\n" always "[test.cpp:4]: (style) struct member 'AB::b' is never used.\n"
Line 1429
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1429 always 1429
  "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(char *ab)\n{\n    ((AB *)ab)->b = 0;\n}" always "struct AB\n{\n    int a;\n    int b;\n};\n\nvoid foo(char *ab)\n{\n    ((AB *)ab)->b = 0;\n}"
Line 1439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1439 always 1439
  "" always ""
Line 1443
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1443 always 1443
  "struct base {\n    int a;\n};\n\nstruct derived : public base {}" always "struct base {\n    int a;\n};\n\nstruct derived : public base {}"
Line 1449
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1449 always 1449
  "" always ""
Line 1454
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1454 always 1454
  "struct abc {\n    Fred fred;\n};" always "struct abc {\n    Fred fred;\n};"
Line 1457
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1457 always 1457
  "" always ""
Line 1461
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1461 always 1461
  "struct abc { int x; };\nstruct abc s = {0};\nvoid f() { do_something(&s); }" always "struct abc { int x; };\nstruct abc s = {0};\nvoid f() { do_something(&s); }"
Line 1464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1464 always 1464
  "" always ""
Line 1466
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1466 always 1466
  "struct abc { int x; };\nstruct abc s = {0};\nvoid f() { }" always "struct abc { int x; };\nstruct abc s = {0};\nvoid f() { }"
Line 1469
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1469 always 1469
  "abc::x is not used" always "abc::x is not used"
  "" always ""
Line 1473
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1473 always 1473
  "#include <stdio.h>\nstruct\n{\n    union\n    {\n        struct\n        {\n            int a;\n        } struct1;\n    };\n} var = {0};\nint main(int argc, char *argv[])\n{\n    printf(\"var.struct1.a = %d\", var.struct1.a);\n    return 1;\n}" always "#include <stdio.h>\nstruct\n{\n    union\n    {\n        struct\n        {\n            int a;\n        } struct1;\n    };\n} var = {0};\nint main(int argc, char *argv[])\n{\n    printf(\"var.struct1.a = %d\", var.struct1.a);\n    return 1;\n}"
Line 1489
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1489 always 1489
  "" always ""
Line 1493
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1493 always 1493
  "struct S {\n  int x;\n} __attribute__((packed));" always "struct S {\n  int x;\n} __attribute__((packed));"
Line 1496
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1496 always 1496
  "" always ""
Line 1500
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1500 always 1500
  "struct bstr { char *bstart; size_t len; };\nstruct bstr bstr0(void) {\n  return (struct bstr){\"hello\",6};\n}" always "struct bstr { char *bstart; size_t len; };\nstruct bstr bstr0(void) {\n  return (struct bstr){\"hello\",6};\n}"
Line 1504
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1504 always 1504
  "" always ""
Line 1509
  directives always size=0
  "test.cpp" always "test.cpp"
  1 always 1
  "#pragma pack(1)" always "#pragma pack(1)"
Line 1510
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1510 always 1510
  "\nstruct Foo { int x; int y; };" always "\nstruct Foo { int x; int y; };"
  & {lifetime[Address]=(directives),!0}
  directives always !size=0
Line 1511
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1511 always 1511
  "" always ""
Line 1516
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1516 always 1516
  "extern struct AB\n{\n    int a;\n    int b;\n} ab;\n\nvoid foo()\n{\n    ab.b = 0;\n}" always "extern struct AB\n{\n    int a;\n    int b;\n} ab;\n\nvoid foo()\n{\n    ab.b = 0;\n}"
Line 1526
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1526 always 1526
  "" always ""
Line 1529
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1529 always 1529
  "struct AB\n{\n    int a;\n    int b;\n} ab;\n\nvoid foo()\n{\n    ab.b = 0;\n}" always "struct AB\n{\n    int a;\n    int b;\n} ab;\n\nvoid foo()\n{\n    ab.b = 0;\n}"
Line 1539
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1539 always 1539
  "" always ""
Line 1542
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1542 always 1542
  "static struct AB\n{\n    int a;\n    int b;\n} ab;\n\nvoid foo()\n{\n    ab.b = 0;\n}" always "static struct AB\n{\n    int a;\n    int b;\n} ab;\n\nvoid foo()\n{\n    ab.b = 0;\n}"
Line 1552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1552 always 1552
  "[test.cpp:3]: (style) struct member 'AB::a' is never used.\n" always "[test.cpp:3]: (style) struct member 'AB::a' is never used.\n"
Line 1554
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1554 always 1554
  "struct A\n{\n    static const int a = 0;\n};\n\nint foo()\n{\n    return A::a;\n}" always "struct A\n{\n    static const int a = 0;\n};\n\nint foo()\n{\n    return A::a;\n}"
Line 1563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1563 always 1563
  "" always ""
Line 1567
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1567 always 1567
  "struct Header {\n  uint8_t message_type;\n}\n\ninput.skip(sizeof(Header));" always "struct Header {\n  uint8_t message_type;\n}\n\ninput.skip(sizeof(Header));"
Line 1572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1572 always 1572
  "" always ""
Line 1574
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1574 always 1574
  "struct Header {\n  uint8_t message_type;\n}\n\ninput.skip(sizeof(struct Header));" always "struct Header {\n  uint8_t message_type;\n}\n\ninput.skip(sizeof(struct Header));"
Line 1579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1579 always 1579
  "" always ""
Line 1583
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1583 always 1583
  "struct S {\n  static const int N = 128;\n  char E[N];\n};\n" always "struct S {\n  static const int N = 128;\n  char E[N];\n};\n"
Line 1587
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1587 always 1587
  "[test.cpp:3]: (style) struct member 'S::E' is never used.\n" always "[test.cpp:3]: (style) struct member 'S::E' is never used.\n"
Line 1591
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1591 always 1591
  "struct tagT { int i; };\nvoid f() {\n    struct tagT t{};\n    t.i = 0;\n    g(t);\n};\n" always "struct tagT { int i; };\nvoid f() {\n    struct tagT t{};\n    t.i = 0;\n    g(t);\n};\n"
Line 1597
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1597 always 1597
  "" always ""
Line 1599
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1599 always 1599
  "typedef struct tagT { int i; } typeT;\nvoid f() {\n    struct typeT t{};\n    t.i = 0;\n    g(t);\n};\n" always "typedef struct tagT { int i; } typeT;\nvoid f() {\n    struct typeT t{};\n    t.i = 0;\n    g(t);\n};\n"
Line 1605
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1605 always 1605
  "" always ""
Line 1607
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1607 always 1607
  "struct T { int i; };\nvoid f() {\n    struct T t{};\n    t.i = 0;\n    g(t);\n};\n" always "struct T { int i; };\nvoid f() {\n    struct T t{};\n    t.i = 0;\n    g(t);\n};\n"
Line 1613
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1613 always 1613
  "" always ""
  "[test.cpp:1]: (style) struct member 'T::i' is never used.\n" always "[test.cpp:1]: (style) struct member 'T::i' is never used.\n"
Line 1617
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1617 always 1617
  "struct S { uint8_t padding[500]; };\nstatic S s = { 0 };\nuint8_t f() {\n    uint8_t* p = (uint8_t*)&s;\n    return p[10];\n};\n" always "struct S { uint8_t padding[500]; };\nstatic S s = { 0 };\nuint8_t f() {\n    uint8_t* p = (uint8_t*)&s;\n    return p[10];\n};\n"
Line 1623
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1623 always 1623
  "" always ""
Line 1625
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1625 always 1625
  "struct S { uint8_t padding[500]; };\nuint8_t f(const S& s) {\n    std::cout << &s;\n    auto p = reinterpret_cast<const uint8_t*>(&s);\n    return p[10];\n};\n" always "struct S { uint8_t padding[500]; };\nuint8_t f(const S& s) {\n    std::cout << &s;\n    auto p = reinterpret_cast<const uint8_t*>(&s);\n    return p[10];\n};\n"
Line 1631
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1631 always 1631
  "" always ""
Line 1635
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1635 always 1635
  "class C {};\nstruct S {\n    char* p;\n    std::string str;\n    C c;\n};\nvoid f(S* s) {}\n" always "class C {};\nstruct S {\n    char* p;\n    std::string str;\n    C c;\n};\nvoid f(S* s) {}\n"
Line 1642
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1642 always 1642
  "[test.cpp:3]: (style) struct member 'S::p' is never used.\n[test.cpp:4]: (style) struct member 'S::str' is never used.\n[test.cpp:5]: (style) struct member 'S::c' is never used.\n" always "[test.cpp:3]: (style) struct member 'S::p' is never used.\n[test.cpp:4]: (style) struct member 'S::str' is never used.\n[test.cpp:5]: (style) struct member 'S::c' is never used.\n"
Line 1647
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1647 always 1647
  "class C {};\nstruct S {\n    char* p;\n    std::string str;\n    C c;\n};\nvoid f(S& s) {}\n" always "class C {};\nstruct S {\n    char* p;\n    std::string str;\n    C c;\n};\nvoid f(S& s) {}\n"
Line 1654
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1654 always 1654
  "[test.cpp:3]: (style) struct member 'S::p' is never used.\n[test.cpp:4]: (style) struct member 'S::str' is never used.\n[test.cpp:5]: (style) struct member 'S::c' is never used.\n" always "[test.cpp:3]: (style) struct member 'S::p' is never used.\n[test.cpp:4]: (style) struct member 'S::str' is never used.\n[test.cpp:5]: (style) struct member 'S::c' is never used.\n"
Line 1659
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1659 always 1659
  "struct S {\n    struct T {\n        int i;\n    } t[2];\n};\nS s[1];\nint f() {\n    return s[0].t[1].i;\n}\n" always "struct S {\n    struct T {\n        int i;\n    } t[2];\n};\nS s[1];\nint f() {\n    return s[0].t[1].i;\n}\n"
Line 1668
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1668 always 1668
  "" always ""
Line 1670
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1670 always 1670
  "struct S { int a; };\nstruct T { S s; };\nint f(const T** tp) {\n    return tp[0]->s.a;\n}\n" always "struct S { int a; };\nstruct T { S s; };\nint f(const T** tp) {\n    return tp[0]->s.a;\n}\n"
Line 1675
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1675 always 1675
  "" always ""
Line 1677
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1677 always 1677
  "struct S { int a; };\nint f(const S* sp) {\n    return (*sp).a; \n}\n" always "struct S { int a; };\nint f(const S* sp) {\n    return (*sp).a; \n}\n"
Line 1681
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1681 always 1681
  "" always ""
Line 1683
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1683 always 1683
  "struct S { int a; };\nint f(const S** spp) {\n    return spp[0]->a;\n}\n" always "struct S { int a; };\nint f(const S** spp) {\n    return spp[0]->a;\n}\n"
Line 1687
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1687 always 1687
  "" always ""
Line 1689
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1689 always 1689
  "struct S { int a; };\nint f(const S** spp) {\n    return spp[0][0].a;\n}\n" always "struct S { int a; };\nint f(const S** spp) {\n    return spp[0][0].a;\n}\n"
Line 1693
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1693 always 1693
  "" always ""
Line 1695
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1695 always 1695
  "struct S { int a; };\nint f(const S* sp) {\n    return sp[0].a;\n}\n" always "struct S { int a; };\nint f(const S* sp) {\n    return sp[0].a;\n}\n"
Line 1699
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1699 always 1699
  "" always ""
Line 1701
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1701 always 1701
  "struct S { int a; };\nint f(const S* sp) {\n    return sp->a;\n}\n" always "struct S { int a; };\nint f(const S* sp) {\n    return sp->a;\n}\n"
Line 1705
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1705 always 1705
  "" always ""
Line 1707
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1707 always 1707
  "typedef struct { int i; } A;\ntypedef struct { std::vector<A> v; } B;\nconst A& f(const std::vector<const B*>& b, int idx) {\n    const A& a = b[0]->v[idx];\n    return a;\n}\n" always "typedef struct { int i; } A;\ntypedef struct { std::vector<A> v; } B;\nconst A& f(const std::vector<const B*>& b, int idx) {\n    const A& a = b[0]->v[idx];\n    return a;\n}\n"
Line 1713
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1713 always 1713
  "[test.cpp:1]: (style) struct member 'A::i' is never used.\n" always "[test.cpp:1]: (style) struct member 'A::i' is never used.\n"
Line 1717
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1717 always 1717
  "struct A {\n    struct B {\n        int x;\n    } b;\n} a;\nvoid f() {\n    struct B* pb = &a.b;\n    pb->x = 1;\n}\n" always "struct A {\n    struct B {\n        int x;\n    } b;\n} a;\nvoid f() {\n    struct B* pb = &a.b;\n    pb->x = 1;\n}\n"
Line 1726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1726 always 1726
  "" always ""
Line 1728
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1728 always 1728
  "union U {\n    struct A {\n        struct B {\n            int x;\n        } b;\n    } a;\n    struct C {\n        short s[2];\n    } c;\n} u;\nvoid f() {\n    struct B* pb = &u.a.b;\n    pb->x = 1;\n    struct C* pc = &u.c;\n    pc->s[0] = 1;\n}\n" always "union U {\n    struct A {\n        struct B {\n            int x;\n        } b;\n    } a;\n    struct C {\n        short s[2];\n    } c;\n} u;\nvoid f() {\n    struct B* pb = &u.a.b;\n    pb->x = 1;\n    struct C* pc = &u.c;\n    pc->s[0] = 1;\n}\n"
Line 1744
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1744 always 1744
  "" always ""
Line 1749
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1749 always 1749
  "void f() {\n    {\n    }\n    {\n        struct S { int a; };\n        S s{};\n        {\n            if (s.a) {}\n        }\n    }\n}\n" always "void f() {\n    {\n    }\n    {\n        struct S { int a; };\n        S s{};\n        {\n            if (s.a) {}\n        }\n    }\n}\n"
Line 1760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1760 always 1760
  "" always ""
Line 1763
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 1765
  "" always ""
Line 1768
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 1769
  code possible {"void f(void) {\n    ((uint8_t *) (uint16_t)0x1000)[0] = 0x42;\n}"@1,"struct Data { unsigned int n; };\nint main() {\n  (*(volatile struct Data*)0x4200).n = 1;\n}"@2,"struct A {\n    std::map<int, int> m;\n    void f(int key, int number) {\n        auto pos = m.find(key);\n        if (pos == m.end())\n            m.insert(std::map<int, int>::value_type(key, number));\n        else\n            (*pos).second = number;\n    }\n};"@3,"void foo(std::insert_iterator<C> it) {\n  it = 123;\n}"@4,"void fun(Value value) {\n value[10] = 123;\n}"@5,"void fun(std::string s) {\n s[10] = 123;\n}"@6,"void fun(short data[2]) {\n  data[2] = 1;\n}"@7,"void A::b(Date& result) {  result = 12;\n}"@8,"void fun(Date result) {  result.x = 12;\n}"@9,"void fun(Date result) {  result.x = 12;\n}"@10}
Line 1770
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testunusedvar.cpp"@1,"cppcheck-2.8/test/testunusedvar.cpp"@2,"cppcheck-2.8/test/testunusedvar.cpp"@3,"cppcheck-2.8/test/testunusedvar.cpp"@4,"cppcheck-2.8/test/testunusedvar.cpp"@5,"cppcheck-2.8/test/testunusedvar.cpp"@6,"cppcheck-2.8/test/testunusedvar.cpp"@7,"cppcheck-2.8/test/testunusedvar.cpp"@8,"cppcheck-2.8/test/testunusedvar.cpp"@9,"cppcheck-2.8/test/testunusedvar.cpp"@10}
  line inconclusive {6383@1,6373@2,6358@3,6350@4,6286@5,6292@6,6298@7,6306@8,6315@9,6322@10}
  filename inconclusive {"test.c"@10,"test.c"@178,"test.c"@196,"test.c"@208,"test.c"@210,"test.c"@101,"test.c"@177,"test.c"@204}
Line 1773
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 1779
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1779 always 1779
  "void foo()\n{\n    int i = 0;\n}" always "void foo()\n{\n    int i = 0;\n}"
Line 1783
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1783 always 1783
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1785
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1785 always 1785
  "void foo()\n{\n    int i(0);\n}" always "void foo()\n{\n    int i(0);\n}"
Line 1789
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1789 always 1789
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1794
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1794 always 1794
  "void foo()\n{\n    int i(a);\n}" always "void foo()\n{\n    int i(a);\n}"
Line 1798
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1798 always 1798
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1800
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1800 always 1800
  "void foo()\n{\n    int j = 0;\n    int i(j);\n}" always "void foo()\n{\n    int j = 0;\n    int i(j);\n}"
Line 1805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1805 always 1805
  "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1807
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1807 always 1807
  "void foo()\n{\n    int j = 0;\n    int & i = j;\n    x(j);\n}" always "void foo()\n{\n    int j = 0;\n    int & i = j;\n    x(j);\n}"
Line 1813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1813 always 1813
  "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1815
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1815 always 1815
  "void foo()\n{\n    int j = 0;\n    const int & i = j;\n    x(j);\n}" always "void foo()\n{\n    int j = 0;\n    const int & i = j;\n    x(j);\n}"
Line 1821
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1821 always 1821
  "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1823
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1823 always 1823
  "void foo()\n{\n    int j = 0;\n    int & i(j);\n    x(j);\n}" always "void foo()\n{\n    int j = 0;\n    int & i(j);\n    x(j);\n}"
Line 1829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1829 always 1829
  "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1831
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1831 always 1831
  "void foo()\n{\n    int j = 0;\n    const int & i(j);\n    x(j);\n}" always "void foo()\n{\n    int j = 0;\n    const int & i(j);\n    x(j);\n}"
Line 1837
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1837 always 1837
  "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1839
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1839 always 1839
  "void foo()\n{\n    int * j = Data;\n    int * i(j);\n}" always "void foo()\n{\n    int * j = Data;\n    int * i(j);\n}"
Line 1844
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1844 always 1844
  "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1846
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1846 always 1846
  "void foo()\n{\n    int * j = Data;\n    const int * i(j);\n}" always "void foo()\n{\n    int * j = Data;\n    const int * i(j);\n}"
Line 1851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1851 always 1851
  "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1853
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1853 always 1853
  "void foo()\n{\n    bool i = false;\n}" always "void foo()\n{\n    bool i = false;\n}"
Line 1857
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1857 always 1857
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1859
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1859 always 1859
  "void foo()\n{\n    bool i = true;\n}" always "void foo()\n{\n    bool i = true;\n}"
Line 1863
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1863 always 1863
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1865
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1865 always 1865
  "void foo()\n{\n    char *i;\n    i = fgets();\n}" always "void foo()\n{\n    char *i;\n    i = fgets();\n}"
Line 1870
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1870 always 1870
  "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1873
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1873 always 1873
  "undefined foo()\n{\n    undefined i = 0;\n}" always "undefined foo()\n{\n    undefined i = 0;\n}"
Line 1879
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1879 always 1879
  "undefined foo()\n{\n    undefined i = 0;\n}\n" always "undefined foo()\n{\n    undefined i = 0;\n}\n"
  "test.c" always "test.c"
Line 1884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1884 always 1884
  "[test.c:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.c:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1886
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1886 always 1886
  "void foo()\n{\n    int i = undefined;\n}" always "void foo()\n{\n    int i = undefined;\n}"
Line 1890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1890 always 1890
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1892
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1892 always 1892
  "void foo()\n{\n    int * i = Data;\n}" always "void foo()\n{\n    int * i = Data;\n}"
Line 1896
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1896 always 1896
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1898
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1898 always 1898
  "void foo()\n{\n    void * i = Data;\n}" always "void foo()\n{\n    void * i = Data;\n}"
Line 1902
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1902 always 1902
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1904
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1904 always 1904
  "void foo()\n{\n    const void * i = Data;\n}" always "void foo()\n{\n    const void * i = Data;\n}"
Line 1908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1908 always 1908
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1910
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1910 always 1910
  "void foo()\n{\n    struct S * i = DATA;\n}" always "void foo()\n{\n    struct S * i = DATA;\n}"
Line 1914
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1914 always 1914
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1916
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1916 always 1916
  "void foo()\n{\n    const struct S * i = DATA;\n}" always "void foo()\n{\n    const struct S * i = DATA;\n}"
Line 1920
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1920 always 1920
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1922
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1922 always 1922
  "void foo()\n{\n    struct S & i = j;\n}" always "void foo()\n{\n    struct S & i = j;\n}"
Line 1926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1926 always 1926
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1928
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1928 always 1928
  "void foo()\n{\n    const struct S & i = j;\n}" always "void foo()\n{\n    const struct S & i = j;\n}"
Line 1932
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1932 always 1932
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1934
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1934 always 1934
  "void foo()\n{\n    undefined * i = X;\n}" always "void foo()\n{\n    undefined * i = X;\n}"
Line 1938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1938 always 1938
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1940
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1940 always 1940
  "void foo()\n{\n    int i = 0;\n    int j = i;\n}" always "void foo()\n{\n    int i = 0;\n    int j = i;\n}"
Line 1945
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1945 always 1945
  "[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\n"
Line 1947
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1947 always 1947
  "void foo()\n{\n    int i[10] = { 0 };\n}" always "void foo()\n{\n    int i[10] = { 0 };\n}"
Line 1951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1951 always 1951
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1953
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1953 always 1953
  "void foo(int n)\n{\n    int i[n] = { 0 };\n}" always "void foo(int n)\n{\n    int i[n] = { 0 };\n}"
Line 1957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1957 always 1957
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1959
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1959 always 1959
  "void foo()\n{\n    char i[10] = \"123456789\";\n}" always "void foo()\n{\n    char i[10] = \"123456789\";\n}"
Line 1963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1963 always 1963
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1965
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1965 always 1965
  "void foo()\n{\n    char *i = \"123456789\";\n}" always "void foo()\n{\n    char *i = \"123456789\";\n}"
Line 1969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1969 always 1969
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1971
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1971 always 1971
  "void foo()\n{\n    int i = 0;\n}" always "void foo()\n{\n    int i = 0;\n}"
Line 1975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1975 always 1975
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 1977
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1977 always 1977
  "void foo()\n{\n    int i = 0,code=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n    }\n}" always "void foo()\n{\n    int i = 0,code=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n    }\n}"
Line 1985
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1985 always 1985
  "" always ""
Line 1987
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1987 always 1987
  "void foo()\n{\n    int i = 0,code=10,d=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        d = code;\n    }\n}" always "void foo()\n{\n    int i = 0,code=10,d=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        d = code;\n    }\n}"
Line 1996
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  1996 always 1996
  "[test.cpp:3]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\n"
Line 2000
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2000 always 2000
  "void foo()\n{\n    int i = 0,code=10,d=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        g(d);\n        d = code;\n    }\n}" always "void foo()\n{\n    int i = 0,code=10,d=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        g(d);\n        d = code;\n    }\n}"
Line 2010
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2010 always 2010
  "" always ""
Line 2012
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2012 always 2012
  "void foo()\n{\n    int i = 0,code=10,d=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        if (i == 3) {\n            return d;\n        }\n        d = code;\n    }\n}" always "void foo()\n{\n    int i = 0,code=10,d=10;\n    for(i = 0; i < 10; i++) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        if (i == 3) {\n            return d;\n        }\n        d = code;\n    }\n}"
Line 2024
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2024 always 2024
  "" always ""
Line 2026
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2026 always 2026
  "void foo()\n{\n    int i = 0,a=10,b=20;\n    for(i = 0; i < 10; i++) {\n        std::cout<<a<<std::endl;\n        int tmp=a;\n        a=b;\n        b=tmp;\n    }\n}" always "void foo()\n{\n    int i = 0,a=10,b=20;\n    for(i = 0; i < 10; i++) {\n        std::cout<<a<<std::endl;\n        int tmp=a;\n        a=b;\n        b=tmp;\n    }\n}"
Line 2036
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2036 always 2036
  "" always ""
Line 2038
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2038 always 2038
  "void foo()\n{\n    int code=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n    }\n}" always "void foo()\n{\n    int code=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n    }\n}"
Line 2046
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2046 always 2046
  "" always ""
Line 2048
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2048 always 2048
  "void foo()\n{\n    int code=10,d=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        d += code;\n    }\n}" always "void foo()\n{\n    int code=10,d=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        d += code;\n    }\n}"
Line 2057
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2057 always 2057
  "[test.cpp:3]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\n"
Line 2060
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2060 always 2060
  "void foo()\n{\n    int code=10,d=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        g(d);\n        d += code;\n    }\n}" always "void foo()\n{\n    int code=10,d=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        g(d);\n        d += code;\n    }\n}"
Line 2070
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2070 always 2070
  "" always ""
Line 2072
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2072 always 2072
  "void foo()\n{\n    int code=10,d=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        if (i == 3) {\n            return d;\n        }\n        d += code;\n    }\n}" always "void foo()\n{\n    int code=10,d=10;\n    while(code < 20) {\n        std::cout<<code<<std::endl;\n        code += 2;\n        if (i == 3) {\n            return d;\n        }\n        d += code;\n    }\n}"
Line 2084
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2084 always 2084
  "" always ""
Line 2086
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2086 always 2086
  "void foo()\n{\n    int a=10,b=20;\n    while(a != 30) {\n        std::cout<<a<<std::endl;\n        int tmp=a;\n        a=b;\n        b=tmp;\n    }\n}" always "void foo()\n{\n    int a=10,b=20;\n    while(a != 30) {\n        std::cout<<a<<std::endl;\n        int tmp=a;\n        a=b;\n        b=tmp;\n    }\n}"
Line 2096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2096 always 2096
  "" always ""
Line 2098
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2098 always 2098
  "void foo()\n{\n    int code=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n    } while(code < 20);\n}" always "void foo()\n{\n    int code=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n    } while(code < 20);\n}"
Line 2106
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2106 always 2106
  "" always ""
Line 2108
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2108 always 2108
  "void foo()\n{\n    int code=10,d=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n        d += code;\n    } while(code < 20);\n}" always "void foo()\n{\n    int code=10,d=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n        d += code;\n    } while(code < 20);\n}"
Line 2117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2117 always 2117
  "[test.cpp:3]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'd' is assigned a value that is never used.\n"
Line 2120
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2120 always 2120
  "void foo()\n{\n    int code=10,d=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n        g(d);\n        d += code;\n    } while(code < 20);\n}" always "void foo()\n{\n    int code=10,d=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n        g(d);\n        d += code;\n    } while(code < 20);\n}"
Line 2130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2130 always 2130
  "" always ""
Line 2132
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2132 always 2132
  "void foo()\n{\n    int code=10,d=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n        if (i == 3) {\n            return d;\n        }\n        d += code;\n    } while(code < 20);\n}" always "void foo()\n{\n    int code=10,d=10;\n    do {\n        std::cout<<code<<std::endl;\n        code += 2;\n        if (i == 3) {\n            return d;\n        }\n        d += code;\n    } while(code < 20);\n}"
Line 2144
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2144 always 2144
  "" always ""
Line 2146
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2146 always 2146
  "void foo()\n{\n    int a=10,b=20;\n    do {\n        std::cout<<a<<std::endl;\n        int tmp=a;\n        a=b;\n        b=tmp;\n    } while( a!=30 );\n}" always "void foo()\n{\n    int a=10,b=20;\n    do {\n        std::cout<<a<<std::endl;\n        int tmp=a;\n        a=b;\n        b=tmp;\n    } while( a!=30 );\n}"
Line 2156
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2156 always 2156
  "" always ""
Line 2158
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2158 always 2158
  "void foo()\n{\n    int code=10;\n    for(int i=0; i < 10; i++) {\n        if(true) {\n            std::cout<<code<<std::endl;\n            code += 2;\n        }\n    }\n}" always "void foo()\n{\n    int code=10;\n    for(int i=0; i < 10; i++) {\n        if(true) {\n            std::cout<<code<<std::endl;\n            code += 2;\n        }\n    }\n}"
Line 2168
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2168 always 2168
  "" always ""
Line 2170
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2170 always 2170
  "void foo()\n{\n    int code=10;\n    for(int i=0; i < 10; i++) {\n        if(true) {\n            std::cout<<code<<std::endl;\n        }\n        code += 2;\n    }\n}" always "void foo()\n{\n    int code=10;\n    for(int i=0; i < 10; i++) {\n        if(true) {\n            std::cout<<code<<std::endl;\n        }\n        code += 2;\n    }\n}"
Line 2180
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2180 always 2180
  "" always ""
Line 2182
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2182 always 2182
  "void foo()\n{\n    int code=10;\n    while(code < 20) {\n        if(true) {\n            std::cout<<code<<std::endl;\n            code += 2;\n        }\n    }\n}" always "void foo()\n{\n    int code=10;\n    while(code < 20) {\n        if(true) {\n            std::cout<<code<<std::endl;\n            code += 2;\n        }\n    }\n}"
Line 2192
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2192 always 2192
  "" always ""
Line 2194
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2194 always 2194
  "void foo()\n{\n    int code=10;\n    do {\n        if(true) {\n            std::cout<<code<<std::endl;\n            code += 2;\n        }\n    } while(code < 20);\n}" always "void foo()\n{\n    int code=10;\n    do {\n        if(true) {\n            std::cout<<code<<std::endl;\n            code += 2;\n        }\n    } while(code < 20);\n}"
Line 2204
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2204 always 2204
  "" always ""
Line 2206
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2206 always 2206
  "void foo(int j = 0) {\n    int i = 0;\n}" always "void foo(int j = 0) {\n    int i = 0;\n}"
Line 2209
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2209 always 2209
  "[test.cpp:2]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 2216
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2216 always 2216
  "int foo()\n{\n    int i;\n    return i;\n}" always "int foo()\n{\n    int i;\n    return i;\n}"
Line 2221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2221 always 2221
  "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" always "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n"
Line 2223
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2223 always 2223
  "bool foo()\n{\n    bool i;\n    return i;\n}" always "bool foo()\n{\n    bool i;\n    return i;\n}"
Line 2228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2228 always 2228
  "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" always "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n"
Line 2231
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2231 always 2231
  "undefined foo()\n{\n    undefined i;\n    return i;\n}" always "undefined foo()\n{\n    undefined i;\n    return i;\n}"
Line 2236
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2236 always 2236
  "" always ""
Line 2238
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2238 always 2238
  "undefined foo()\n{\n    undefined i;\n    return i;\n}\n" always "undefined foo()\n{\n    undefined i;\n    return i;\n}\n"
  "test.c" always "test.c"
Line 2244
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2244 always 2244
  "[test.c:3]: (style) Variable 'i' is not assigned a value.\n" always "[test.c:3]: (style) Variable 'i' is not assigned a value.\n"
Line 2246
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2246 always 2246
  "undefined *foo()\n{\n    undefined * i;\n    return i;\n}" always "undefined *foo()\n{\n    undefined * i;\n    return i;\n}"
Line 2251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2251 always 2251
  "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" always "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n"
Line 2253
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2253 always 2253
  "int *foo()\n{\n    int * i;\n    return i;\n}" always "int *foo()\n{\n    int * i;\n    return i;\n}"
Line 2258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2258 always 2258
  "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" always "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n"
Line 2260
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2260 always 2260
  "const int *foo()\n{\n    const int * i;\n    return i;\n}" always "const int *foo()\n{\n    const int * i;\n    return i;\n}"
Line 2265
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2265 always 2265
  "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" always "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n"
Line 2267
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2267 always 2267
  "struct S *foo()\n{\n    struct S * i;\n    return i;\n}" always "struct S *foo()\n{\n    struct S * i;\n    return i;\n}"
Line 2272
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2272 always 2272
  "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" always "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n"
Line 2274
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2274 always 2274
  "const struct S *foo()\n{\n    const struct S * i;\n    return i;\n}" always "const struct S *foo()\n{\n    const struct S * i;\n    return i;\n}"
Line 2279
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2279 always 2279
  "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n" always "[test.cpp:3]: (style) Variable 'i' is not assigned a value.\n"
Line 2282
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2282 always 2282
  "void foo()\n{\n    int a[10];\n    f(a[0]);\n}" always "void foo()\n{\n    int a[10];\n    f(a[0]);\n}"
Line 2287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2287 always 2287
  "" always ""
Line 2290
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2290 always 2290
  "void foo()\n{\n    int a[10];\n    f(a[0], 0);\n}" always "void foo()\n{\n    int a[10];\n    f(a[0], 0);\n}"
Line 2295
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2295 always 2295
  "" always ""
Line 2298
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2298 always 2298
  "void foo()\n{\n    int a[10];\n    f(0, a[0]);\n}" always "void foo()\n{\n    int a[10];\n    f(0, a[0]);\n}"
Line 2303
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2303 always 2303
  "" always ""
Line 2306
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2306 always 2306
  "void foo()\n{\n    int a[10];\n    f(0, a[0], 0);\n}" always "void foo()\n{\n    int a[10];\n    f(0, a[0], 0);\n}"
Line 2311
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2311 always 2311
  "" always ""
Line 2314
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2314 always 2314
  "void f(const int & i) { }\nvoid foo()\n{\n    int a[10];\n    f(a[0]);\n}" always "void f(const int & i) { }\nvoid foo()\n{\n    int a[10];\n    f(a[0]);\n}"
Line 2320
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2320 always 2320
  "[test.cpp:4]: (style) Variable 'a' is not assigned a value.\n" always "[test.cpp:4]: (style) Variable 'a' is not assigned a value.\n"
  "" always ""
Line 2324
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2324 always 2324
  "void f(int & i) { }\nvoid foo()\n{\n    int a[10];\n    f(a[0]);\n}" always "void f(int & i) { }\nvoid foo()\n{\n    int a[10];\n    f(a[0]);\n}"
Line 2330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2330 always 2330
  "" always ""
Line 2332
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2332 always 2332
  "void f(int * i);\nvoid foo()\n{\n    int a[10];\n    f(a+1);\n}" always "void f(int * i);\nvoid foo()\n{\n    int a[10];\n    f(a+1);\n}"
Line 2338
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2338 always 2338
  "" always ""
Line 2343
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2343 always 2343
  "void foo(int abc)\n{\n    int i;\n    if ( abc )\n        ;\n    else i = 0;\n}" always "void foo(int abc)\n{\n    int i;\n    if ( abc )\n        ;\n    else i = 0;\n}"
Line 2350
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2350 always 2350
  "[test.cpp:6]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:6]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 2354
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2354 always 2354
  "void foo()\n{\n    int i = 0;\n    f(i);\n}" always "void foo()\n{\n    int i = 0;\n    f(i);\n}"
Line 2359
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2359 always 2359
  "" always ""
Line 2361
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2361 always 2361
  "void foo()\n{\n    int i = 0;\n    f(&i);\n}" always "void foo()\n{\n    int i = 0;\n    f(&i);\n}"
Line 2366
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2366 always 2366
  "" always ""
Line 2370
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2370 always 2370
  "void foo()\n{\n    int a = 0;\n    b = (char)a;\n}" always "void foo()\n{\n    int a = 0;\n    b = (char)a;\n}"
Line 2375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2375 always 2375
  "" always ""
Line 2379
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2379 always 2379
  "void foo() {\n    int b[10];\n    for (int i=0;i<10;++i)\n        b[i] = 0;\n}" always "void foo() {\n    int b[10];\n    for (int i=0;i<10;++i)\n        b[i] = 0;\n}"
Line 2384
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2384 always 2384
  "[test.cpp:4]: (style) Variable 'b[i]' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'b[i]' is assigned a value that is never used.\n"
Line 2386
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2386 always 2386
  "void foo() {\n    int a = 0;\n    int b[10];\n    for (int i=0;i<10;++i)\n        b[i] = ++a;\n}" always "void foo() {\n    int a = 0;\n    int b[10];\n    for (int i=0;i<10;++i)\n        b[i] = ++a;\n}"
Line 2392
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2392 always 2392
  "[test.cpp:5]: (style) Variable 'b[i]' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'b[i]' is assigned a value that is never used.\n"
Line 2394
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2394 always 2394
  "void foo() {\n    int b[10];\n    for (int i=0;i<10;++i)\n        *(b+i) = 0;\n}" always "void foo() {\n    int b[10];\n    for (int i=0;i<10;++i)\n        *(b+i) = 0;\n}"
Line 2399
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2399 always 2399
  "[test.cpp:4]: (style) Variable '*(b+i)' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable '*(b+i)' is assigned a value that is never used.\n"
  "" always ""
Line 2403
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2403 always 2403
  "void foo()\n{\n    int i;\n}" always "void foo()\n{\n    int i;\n}"
Line 2407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2407 always 2407
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
Line 2409
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2409 always 2409
  "void foo()\n{\n    int i[2];\n}" always "void foo()\n{\n    int i[2];\n}"
Line 2413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2413 always 2413
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
Line 2415
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2415 always 2415
  "void foo()\n{\n    void * i;\n}" always "void foo()\n{\n    void * i;\n}"
Line 2419
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2419 always 2419
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
Line 2421
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2421 always 2421
  "void foo()\n{\n    const void * i;\n}" always "void foo()\n{\n    const void * i;\n}"
Line 2425
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2425 always 2425
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
Line 2429
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2429 always 2429
  "void foo()\n{\n    A * i;\n}" always "void foo()\n{\n    A * i;\n}"
Line 2433
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2433 always 2433
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
Line 2435
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2435 always 2435
  "void foo()\n{\n    struct A * i;\n}" always "void foo()\n{\n    struct A * i;\n}"
Line 2439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2439 always 2439
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
Line 2441
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2441 always 2441
  "void foo()\n{\n    const struct A * i;\n}" always "void foo()\n{\n    const struct A * i;\n}"
Line 2445
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2445 always 2445
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
Line 2447
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2447 always 2447
  "void foo()\n{\n    int * i[2];\n}" always "void foo()\n{\n    int * i[2];\n}"
Line 2451
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2451 always 2451
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
  "" always ""
Line 2453
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2453 always 2453
  "void foo()\n{\n    const int * i[2];\n}" always "void foo()\n{\n    const int * i[2];\n}"
Line 2457
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2457 always 2457
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
  "" always ""
Line 2459
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2459 always 2459
  "void foo()\n{\n    void * i[2];\n}" always "void foo()\n{\n    void * i[2];\n}"
Line 2463
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2463 always 2463
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
  "" always ""
Line 2465
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2465 always 2465
  "void foo()\n{\n    const void * i[2];\n}" always "void foo()\n{\n    const void * i[2];\n}"
Line 2469
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2469 always 2469
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
  "" always ""
Line 2471
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2471 always 2471
  "void foo()\n{\n    struct A * i[2];\n}" always "void foo()\n{\n    struct A * i[2];\n}"
Line 2475
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2475 always 2475
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
  "" always ""
Line 2477
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2477 always 2477
  "void foo()\n{\n    const struct A * i[2];\n}" always "void foo()\n{\n    const struct A * i[2];\n}"
Line 2481
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2481 always 2481
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
  "" always ""
Line 2483
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2483 always 2483
  "void foo(int n)\n{\n    int i[n];\n}" always "void foo(int n)\n{\n    int i[n];\n}"
Line 2487
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2487 always 2487
  "[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n"
Line 2489
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2489 always 2489
  "void foo()\n{\n    int i = 0;\n    int &j = i;\n}" always "void foo()\n{\n    int i = 0;\n    int &j = i;\n}"
Line 2494
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2494 always 2494
  "[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 2498
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2498 always 2498
  "void foo()\n{\n    int i;\n    int &j = i;\n}" always "void foo()\n{\n    int i;\n    int &j = i;\n}"
Line 2503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2503 always 2503
  "[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:4]: (style) Variable 'j' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: i\n"
Line 2506
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2506 always 2506
  "void foo()\n{\n    int i;\n    int &j = i;\n    j = 0;\n}" always "void foo()\n{\n    int i;\n    int &j = i;\n    j = 0;\n}"
Line 2512
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2512 always 2512
  "[test.cpp:5]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'i' is assigned a value that is never used.\n"
  "" always ""
Line 2516
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2516 always 2516
  "double foo()\n{\n    double i = 0.0;\n    const double j = i;\n    return j;\n}" always "double foo()\n{\n    double i = 0.0;\n    const double j = i;\n    return j;\n}"
Line 2522
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2522 always 2522
  "" always ""
Line 2524
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2524 always 2524
  "void foo()\n{\n    A * i;\n    i->f();\n}" always "void foo()\n{\n    A * i;\n    i->f();\n}"
Line 2529
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2529 always 2529
  "" always ""
Line 2531
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2531 always 2531
  "void foo()\n{\n    char * i;\n    if (i);\n}" always "void foo()\n{\n    char * i;\n    if (i);\n}"
Line 2536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2536 always 2536
  "" always ""
Line 2538
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2538 always 2538
  "void foo()\n{\n    char * i = 0;\n    if (i);\n}" always "void foo()\n{\n    char * i = 0;\n    if (i);\n}"
Line 2543
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2543 always 2543
  "" always ""
Line 2545
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2545 always 2545
  "void foo()\n{\n    char * i = new char[10];\n    if (i);\n}" always "void foo()\n{\n    char * i = new char[10];\n    if (i);\n}"
Line 2550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2550 always 2550
  "" always ""
Line 2552
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2552 always 2552
  "void foo()\n{\n    char *i;\n    f(i);\n}" always "void foo()\n{\n    char *i;\n    f(i);\n}"
Line 2558
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2558 always 2558
  "int a;\nvoid foo()\n{\n    return &a;\n}" always "int a;\nvoid foo()\n{\n    return &a;\n}"
Line 2563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2563 always 2563
  "" always ""
Line 2565
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2565 always 2565
  "int a[10];\nvoid foo()\n{\n    int *p = a;\n    for (int i = 0; i < 10; i++)\n        p[i] = 0;\n}" always "int a[10];\nvoid foo()\n{\n    int *p = a;\n    for (int i = 0; i < 10; i++)\n        p[i] = 0;\n}"
Line 2572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2572 always 2572
  "" always ""
Line 2574
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2574 always 2574
  "int a[10];\nvoid foo()\n{\n    int *p = &a[0];\n    for (int i = 0; i < 10; i++)\n        p[i] = 0;\n}" always "int a[10];\nvoid foo()\n{\n    int *p = &a[0];\n    for (int i = 0; i < 10; i++)\n        p[i] = 0;\n}"
Line 2581
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2581 always 2581
  "" always ""
Line 2583
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2583 always 2583
  "void foo()\n{\n    int a[10];\n    int x;\n    a[0] = 0;\n    x = a[0];\n}" always "void foo()\n{\n    int a[10];\n    int x;\n    a[0] = 0;\n    x = a[0];\n}"
Line 2590
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2590 always 2590
  "[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 2593
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2593 always 2593
  "void foo()\n{\n    int a, b, c;\n    a = b = c = f();\n}" always "void foo()\n{\n    int a, b, c;\n    a = b = c = f();\n}"
Line 2598
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2598 always 2598
  "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\n"
Line 2603
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2603 always 2603
  "int * foo()\n{\n    return &undefined[0];\n}" always "int * foo()\n{\n    return &undefined[0];\n}"
Line 2607
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2607 always 2607
  "" always ""
Line 2612
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2612 always 2612
  "void foo()\n{\n    int a[10];\n    for (int i = 0; i < 10; )\n        a[i++] = 0;\n}" always "void foo()\n{\n    int a[10];\n    for (int i = 0; i < 10; )\n        a[i++] = 0;\n}"
Line 2618
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2618 always 2618
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 2624
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2624 always 2624
  "void foo(int x)\n{\n    int i;\n    if (x) {\n        int i;\n    } else {\n        int i;\n    }\n}" always "void foo(int x)\n{\n    int i;\n    if (x) {\n        int i;\n    } else {\n        int i;\n    }\n}"
Line 2633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2633 always 2633
  "[test.cpp:3]: (style) Unused variable: i\n[test.cpp:5]: (style) Unused variable: i\n[test.cpp:7]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n[test.cpp:5]: (style) Unused variable: i\n[test.cpp:7]: (style) Unused variable: i\n"
Line 2637
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2637 always 2637
  "void foo(int x)\n{\n    int i;\n    if (x)\n        int i;\n    else\n        int i;\n}" always "void foo(int x)\n{\n    int i;\n    if (x)\n        int i;\n    else\n        int i;\n}"
Line 2645
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2645 always 2645
  "[test.cpp:3]: (style) Unused variable: i\n[test.cpp:5]: (style) Unused variable: i\n[test.cpp:7]: (style) Unused variable: i\n" always "[test.cpp:3]: (style) Unused variable: i\n[test.cpp:5]: (style) Unused variable: i\n[test.cpp:7]: (style) Unused variable: i\n"
Line 2649
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2649 always 2649
  "void foo(int x)\n{\n    int i;\n    if (x) {\n        int i;\n    } else {\n        int i = 0;\n    }\n}" always "void foo(int x)\n{\n    int i;\n    if (x) {\n        int i;\n    } else {\n        int i = 0;\n    }\n}"
Line 2658
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2658 always 2658
  "[test.cpp:7]: (style) Variable 'i' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: i\n[test.cpp:5]: (style) Unused variable: i\n" always "[test.cpp:7]: (style) Variable 'i' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: i\n[test.cpp:5]: (style) Unused variable: i\n"
Line 2662
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2662 always 2662
  "void foo(int x)\n{\n    int i;\n    if (x) {\n        int i;\n    } else {\n        int i;\n    }\n    i = 1;\n}" always "void foo(int x)\n{\n    int i;\n    if (x) {\n        int i;\n    } else {\n        int i;\n    }\n    i = 1;\n}"
Line 2672
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2672 always 2672
  "[test.cpp:9]: (style) Variable 'i' is assigned a value that is never used.\n[test.cpp:5]: (style) Unused variable: i\n[test.cpp:7]: (style) Unused variable: i\n" always "[test.cpp:9]: (style) Variable 'i' is assigned a value that is never used.\n[test.cpp:5]: (style) Unused variable: i\n[test.cpp:7]: (style) Unused variable: i\n"
Line 2678
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2678 always 2678
  "void foo(int x)\n{\n    int a = 0;\n    if (x == 1)\n    {\n        a = 123;\n        return;\n    }\n    x = a;\n}" always "void foo(int x)\n{\n    int a = 0;\n    if (x == 1)\n    {\n        a = 123;\n        return;\n    }\n    x = a;\n}"
Line 2688
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2688 always 2688
  "[test.cpp:6]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:9]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:6]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:9]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 2693
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2693 always 2693
  "void foo(int x)\n{\n    int a = 0;\n    if (x == 1)\n        a = 123;\n    else if (x == 2)\n        a = 456;\n    else\n        return;\n    x = a;\n}" always "void foo(int x)\n{\n    int a = 0;\n    if (x == 1)\n        a = 123;\n    else if (x == 2)\n        a = 456;\n    else\n        return;\n    x = a;\n}"
Line 2704
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2704 always 2704
  "[test.cpp:10]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:10]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 2709
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2709 always 2709
  "void foo()\n{\n    int a, b, c, d, e, f;\n    a = b = c = d = e = f = 15;\n}" always "void foo()\n{\n    int a, b, c, d, e, f;\n    a = b = c = d = e = f = 15;\n}"
Line 2714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2714 always 2714
  "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'e' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'f' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'd' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'e' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'f' is assigned a value that is never used.\n"
Line 2723
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2723 always 2723
  "void foo()\n{\n    int a, b, c = 0;\n    a = b = c;\n\n}" always "void foo()\n{\n    int a, b, c = 0;\n    a = b = c;\n\n}"
Line 2730
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2730 always 2730
  "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'c' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'c' is assigned a value that is never used.\n"
  "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n"
Line 2742
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2742 always 2742
  "void foo( OBJECT *obj )\n{\n    int x;\n    x = obj->ySize / 8;\n}" always "void foo( OBJECT *obj )\n{\n    int x;\n    x = obj->ySize / 8;\n}"
Line 2747
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2747 always 2747
  "[test.cpp:4]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 2752
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2752 always 2752
  "void foo()\n{\n    int a[10];\n}" always "void foo()\n{\n    int a[10];\n}"
Line 2756
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2756 always 2756
  "[test.cpp:3]: (style) Unused variable: a\n" always "[test.cpp:3]: (style) Unused variable: a\n"
Line 2760
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2760 always 2760
  "int foo()\n{\n    int a = 5;\n    int b[a];\n    b[0] = 0;\n    return b[0];\n}" always "int foo()\n{\n    int a = 5;\n    int b[a];\n    b[0] = 0;\n    return b[0];\n}"
Line 2767
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2767 always 2767
  "" always ""
Line 2769
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2769 always 2769
  "int foo()\n{\n    int a = 5;\n    int * b[a];\n    b[0] = &c;\n    return *b[0];\n}" always "int foo()\n{\n    int a = 5;\n    int * b[a];\n    b[0] = &c;\n    return *b[0];\n}"
Line 2776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2776 always 2776
  "" always ""
Line 2778
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2778 always 2778
  "int * foo()\n{\n    int a = 5;\n    const int * b[a];\n    b[0] = &c;\n    return b[0];\n}" always "int * foo()\n{\n    int a = 5;\n    const int * b[a];\n    b[0] = &c;\n    return b[0];\n}"
Line 2785
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2785 always 2785
  "" always ""
Line 2787
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2787 always 2787
  "struct B * foo()\n{\n    int a = 5;\n    struct B * b[a];\n    b[0] = &c;\n    return b[0];\n}" always "struct B * foo()\n{\n    int a = 5;\n    struct B * b[a];\n    b[0] = &c;\n    return b[0];\n}"
Line 2794
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2794 always 2794
  "" always ""
Line 2796
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2796 always 2796
  "const struct B * foo()\n{\n    int a = 5;\n    const struct B * b[a];\n    b[0] = &c;\n    return b[0];\n}" always "const struct B * foo()\n{\n    int a = 5;\n    const struct B * b[a];\n    b[0] = &c;\n    return b[0];\n}"
Line 2803
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2803 always 2803
  "" always ""
Line 2807
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2807 always 2807
  "void foo()\n{\n    char buf[5];\n    char *ptr = buf;\n    *(ptr++) = 0;\n}" always "void foo()\n{\n    char buf[5];\n    char *ptr = buf;\n    *(ptr++) = 0;\n}"
Line 2813
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2813 always 2813
  "[test.cpp:5]: (style) Variable 'buf' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'buf' is assigned a value that is never used.\n"
  "" always ""
Line 2816
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2816 always 2816
  "void foo() {\n    char buf[5];\n    char *data[2];\n    data[0] = buf;\n    do_something(data);\n}" always "void foo() {\n    char buf[5];\n    char *data[2];\n    data[0] = buf;\n    do_something(data);\n}"
Line 2822
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2822 always 2822
  "" always ""
Line 2824
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2824 always 2824
  "void foo() {\n    char buf1[5];\n    char buf2[5];\n    char *data[2];\n    data[0] = buf1;\n    data[1] = buf2;\n    do_something(data);\n}" always "void foo() {\n    char buf1[5];\n    char buf2[5];\n    char *data[2];\n    data[0] = buf1;\n    data[1] = buf2;\n    do_something(data);\n}"
Line 2832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2832 always 2832
  "" always ""
Line 2838
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2838 always 2838
  "void foo()\n{\n    struct DATA *data = DATA;\n    char *k = data->req;\n    char *ptr;\n    char *line_start;\n    ptr = data->buffer;\n    line_start = ptr;\n    data->info = k;\n    line_start = ptr;\n}" always "void foo()\n{\n    struct DATA *data = DATA;\n    char *k = data->req;\n    char *ptr;\n    char *line_start;\n    ptr = data->buffer;\n    line_start = ptr;\n    data->info = k;\n    line_start = ptr;\n}"
Line 2849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2849 always 2849
  "[test.cpp:10]: (style) Variable 'line_start' is assigned a value that is never used.\n" always "[test.cpp:10]: (style) Variable 'line_start' is assigned a value that is never used.\n"
Line 2854
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2854 always 2854
  "A::A(int iValue) {\n    UserDefinedException* pe = new UserDefinedException();\n    throw pe;\n}" always "A::A(int iValue) {\n    UserDefinedException* pe = new UserDefinedException();\n    throw pe;\n}"
Line 2858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2858 always 2858
  "" always ""
Line 2862
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2862 always 2862
  "void foo() {\n    int a[10];\n    int c;\n    c = *(a);\n}" always "void foo() {\n    int a[10];\n    int c;\n    c = *(a);\n}"
Line 2867
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2867 always 2867
  "[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\n[test.cpp:2]: (style) Variable 'a' is not assigned a value.\n" always "[test.cpp:4]: (style) Variable 'c' is assigned a value that is never used.\n[test.cpp:2]: (style) Variable 'a' is not assigned a value.\n"
Line 2872
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2872 always 2872
  "void foo()\n{\n    char c1 = 'c';\n    char c2[] = { c1 };\n    a(c2);\n}" always "void foo()\n{\n    char c1 = 'c';\n    char c2[] = { c1 };\n    a(c2);\n}"
Line 2878
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2878 always 2878
  "" always ""
Line 2882
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2882 always 2882
  "void foo()\n{\n    char buffer[1024];\n    bar((void *)buffer);\n}" always "void foo()\n{\n    char buffer[1024];\n    bar((void *)buffer);\n}"
Line 2887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2887 always 2887
  "" always ""
Line 2891
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2891 always 2891
  "int foo(int u, int v)\n{\n    int h, i;\n    h = 0 ? u : v;\n    i = 1 ? u : v;\n    return h + i;\n}" always "int foo(int u, int v)\n{\n    int h, i;\n    h = 0 ? u : v;\n    i = 1 ? u : v;\n    return h + i;\n}"
Line 2898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2898 always 2898
  "" always ""
Line 2902
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2902 always 2902
  "int foo(int c)\n{\n    int a;\n    int b[10];\n    a = b[c] = 0;\n    return a;\n}" always "int foo(int c)\n{\n    int a;\n    int b[10];\n    a = b[c] = 0;\n    return a;\n}"
Line 2909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2909 always 2909
  "[test.cpp:5]: (style) Variable 'b[c]' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'b[c]' is assigned a value that is never used.\n"
Line 2913
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2913 always 2913
  "class MyException\n{\n    virtual void raise() const\n    {\n        throw *this;\n    }\n}" always "class MyException\n{\n    virtual void raise() const\n    {\n        throw *this;\n    }\n}"
Line 2920
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2920 always 2920
  "" always ""
Line 2924
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2924 always 2924
  "int main() {\n    int ppos = 1;\n    int pneg = 0;\n    const char*edge = ppos? \" +\" : pneg ? \" -\" : \"\";\n    printf(\"This should be a '+' -> %s\\n\", edge);\n    return 0;\n}" always "int main() {\n    int ppos = 1;\n    int pneg = 0;\n    const char*edge = ppos? \" +\" : pneg ? \" -\" : \"\";\n    printf(\"This should be a '+' -> %s\\n\", edge);\n    return 0;\n}"
Line 2931
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2931 always 2931
  "" always ""
Line 2935
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2935 always 2935
  "int main() {\n    const Fred &fred = getfred();\n    int *p = fred.x();\n    *p = 0;}" always "int main() {\n    const Fred &fred = getfred();\n    int *p = fred.x();\n    *p = 0;}"
Line 2940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2940 always 2940
  "" always ""
Line 2944
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2944 always 2944
  "void f(struct s *ptr) {\n    int param = 1;\n    ptr->param = param++;\n}" always "void f(struct s *ptr) {\n    int param = 1;\n    ptr->param = param++;\n}"
Line 2948
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2948 always 2948
  "[test.cpp:3]: (style) Variable 'param' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'param' is assigned a value that is never used.\n"
Line 2952
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2952 always 2952
  "void f(char* buffer, int value) {\n    char* pos = buffer;\n    int size = value;\n    *(int*)pos = size;\n}" always "void f(char* buffer, int value) {\n    char* pos = buffer;\n    int size = value;\n    *(int*)pos = size;\n}"
Line 2957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2957 always 2957
  "" always ""
Line 2961
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2961 always 2961
  "void f() {\n    float s_ranges[] = { 0, 256 };\n    float* ranges[] = { s_ranges };\n    cout << ranges[0][0];\n}" always "void f() {\n    float s_ranges[] = { 0, 256 };\n    float* ranges[] = { s_ranges };\n    cout << ranges[0][0];\n}"
Line 2966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2966 always 2966
  "" always ""
Line 2970
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2970 always 2970
  "void f() {\n    Engine *engine = e;\n    x->engine = engine->clone();\n}" always "void f() {\n    Engine *engine = e;\n    x->engine = engine->clone();\n}"
Line 2974
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2974 always 2974
  "" always ""
Line 2978
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2978 always 2978
  "void f() {\n    int x = 0;\n    a.x = x - b;\n}" always "void f() {\n    int x = 0;\n    a.x = x - b;\n}"
Line 2982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2982 always 2982
  "" always ""
Line 2987
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2987 always 2987
  "void f() {\n    int x;\n    fstream &f = getfile();\n    f >> x;\n}" always "void f() {\n    int x;\n    fstream &f = getfile();\n    f >> x;\n}"
Line 2992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2992 always 2992
  "" always ""
Line 2995
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2995 always 2995
  "void f(int x) {\n    C c;\n    if (c >>= x) {}\n}" always "void f(int x) {\n    C c;\n    if (c >>= x) {}\n}"
Line 2999
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  2999 always 2999
  "[test.cpp:3]: (information) --check-library: Provide <type-checks><unusedvar> configuration for C\n" always "[test.cpp:3]: (information) --check-library: Provide <type-checks><unusedvar> configuration for C\n"
Line 3001
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3001 always 3001
  "void f(int x) {\n    C c;\n    if (c >>= x) {}\n}" always "void f(int x) {\n    C c;\n    if (c >>= x) {}\n}"
  "test.c" always "test.c"
Line 3005
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3005 always 3005
  "[test.c:3]: (style) Variable 'c' is assigned a value that is never used.\n" always "[test.c:3]: (style) Variable 'c' is assigned a value that is never used.\n"
Line 3007
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3007 always 3007
  "void f() {\n    int x, y;\n    std::cin >> x >> y;\n}" always "void f() {\n    int x, y;\n    std::cin >> x >> y;\n}"
Line 3011
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3011 always 3011
  "" always ""
Line 3014
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3014 always 3014
  "void f(C c) {\n  int x;\n  c & x;\n}" always "void f(C c) {\n  int x;\n  c & x;\n}"
Line 3018
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3018 always 3018
  "" always ""
Line 3022
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3022 always 3022
  "void f() {\n    Abc* abc = getabc();\n    while (0 != (abc = abc->next())) {\n        ++nOldNum;\n    }\n}" always "void f() {\n    Abc* abc = getabc();\n    while (0 != (abc = abc->next())) {\n        ++nOldNum;\n    }\n}"
Line 3028
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3028 always 3028
  "" always ""
Line 3032
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3032 always 3032
  "void f() {\n    int i = 0;\n    if (false) {\n    } else {\n        j -= i;\n    }\n}" always "void f() {\n    int i = 0;\n    if (false) {\n    } else {\n        j -= i;\n    }\n}"
Line 3039
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3039 always 3039
  "" always ""
Line 3043
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3043 always 3043
  "void f() {\n    int a, b;\n    x(1,a,b);\n}" always "void f() {\n    int a, b;\n    x(1,a,b);\n}"
Line 3047
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3047 always 3047
  "" always ""
Line 3051
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3051 always 3051
  "int f() {\n    int a, b;\n    a = 2 * (b = 3);\n    return a + b;\n}" always "int f() {\n    int a, b;\n    a = 2 * (b = 3);\n    return a + b;\n}"
Line 3056
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3056 always 3056
  "" always ""
Line 3058
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3058 always 3058
  "int f() {\n    int a,b;\n    x(a, b=2);\n}" always "int f() {\n    int a,b;\n    x(a, b=2);\n}"
Line 3062
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3062 always 3062
  "" always ""
Line 3064
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3064 always 3064
  "int foo() {\n    int a = 0;\n    bar(a=a+2);\n}" always "int foo() {\n    int a = 0;\n    bar(a=a+2);\n}"
Line 3068
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3068 always 3068
  "" always ""
Line 3070
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3070 always 3070
  "int foo() {\n    int a = 0;\n    bar(a=2);\n}" always "int foo() {\n    int a = 0;\n    bar(a=2);\n}"
Line 3074
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3074 always 3074
  "error" always "error"
  "" always ""
Line 3076
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3076 always 3076
  "void bar(int);\nint foo() {\n    int a = 0;\n    bar(a=a+2);\n}" always "void bar(int);\nint foo() {\n    int a = 0;\n    bar(a=a+2);\n}"
Line 3081
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3081 always 3081
  "error" always "error"
  "" always ""
Line 3085
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3085 always 3085
  "void f() {\n    int a = 2;\n    ints.at(a) = 0;\n}" always "void f() {\n    int a = 2;\n    ints.at(a) = 0;\n}"
Line 3089
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3089 always 3089
  "" always ""
Line 3093
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3093 always 3093
  "std::string f() {\n    const char code[] = \"foo\";\n    const std::string s1(sizeof_(code));\n    const std::string s2 = sizeof_(code);\n    return(s1+s2);\n}" always "std::string f() {\n    const char code[] = \"foo\";\n    const std::string s1(sizeof_(code));\n    const std::string s2 = sizeof_(code);\n    return(s1+s2);\n}"
Line 3099
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3099 always 3099
  "" always ""
Line 3103
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3103 always 3103
  "void f() {\n    int a = 1;\n    foo(x*a);\n}" always "void f() {\n    int a = 1;\n    foo(x*a);\n}"
Line 3107
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3107 always 3107
  "" always ""
Line 3111
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3111 always 3111
  "int f() {\n    int a = 1;\n    return x & a;\n}" always "int f() {\n    int a = 1;\n    return x & a;\n}"
Line 3115
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3115 always 3115
  "" always ""
Line 3120
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3120 always 3120
  "int f() {\n    int x = 1;\n    int y = FOO::VALUE * x;\n    return y;\n}" always "int f() {\n    int x = 1;\n    int y = FOO::VALUE * x;\n    return y;\n}"
Line 3125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3125 always 3125
  "" always ""
Line 3129
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3129 always 3129
  "float g_float = 1;\nextern void SomeTestFunc(float);\nvoid MyFuncError()\n{\n    const float floatA = 2.2f;\n    const float floatTot = g_float * floatA;\n    SomeTestFunc(floatTot);\n}" always "float g_float = 1;\nextern void SomeTestFunc(float);\nvoid MyFuncError()\n{\n    const float floatA = 2.2f;\n    const float floatTot = g_float * floatA;\n    SomeTestFunc(floatTot);\n}"
Line 3137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3137 always 3137
  "" always ""
Line 3139
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3139 always 3139
  "float g_float = 1;\nextern void SomeTestFunc(float);\nvoid MyFuncNoError()\n{\n    const float floatB = 2.2f;\n    const float floatTot = floatB * g_float;\n    SomeTestFunc(floatTot);\n}" always "float g_float = 1;\nextern void SomeTestFunc(float);\nvoid MyFuncNoError()\n{\n    const float floatB = 2.2f;\n    const float floatTot = floatB * g_float;\n    SomeTestFunc(floatTot);\n}"
Line 3147
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3147 always 3147
  "" always ""
Line 3149
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3149 always 3149
  "float g_float = 1;\nextern void SomeTestFunc(float);\nvoid MyFuncNoError2()\n{\n    const float floatC = 2.2f;\n    float floatTot = g_float * floatC;\n    SomeTestFunc(floatTot);\n}" always "float g_float = 1;\nextern void SomeTestFunc(float);\nvoid MyFuncNoError2()\n{\n    const float floatC = 2.2f;\n    float floatTot = g_float * floatC;\n    SomeTestFunc(floatTot);\n}"
Line 3157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3157 always 3157
  "" always ""
Line 3161
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3161 always 3161
  "void bar()\n{\n    int * piArray = NULL;\n    unsigned int uiArrayLength = 2048;\n    unsigned int uiIndex;\n\n    try\n    {\n        piArray = new int[uiArrayLength];\n    }\n    catch (...)\n    {\n        SOME_MACRO\n        delete [] piArray;\n        return;\n    }\n    for (uiIndex = 0; uiIndex < uiArrayLength; uiIndex++)\n    {\n        piArray[uiIndex] = -1234;\n    }\n    delete [] piArray;\n}" always "void bar()\n{\n    int * piArray = NULL;\n    unsigned int uiArrayLength = 2048;\n    unsigned int uiIndex;\n\n    try\n    {\n        piArray = new int[uiArrayLength];\n    }\n    catch (...)\n    {\n        SOME_MACRO\n        delete [] piArray;\n        return;\n    }\n    for (uiIndex = 0; uiIndex < uiArrayLength; uiIndex++)\n    {\n        piArray[uiIndex] = -1234;\n    }\n    delete [] piArray;\n}"
Line 3183
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3183 always 3183
  "" always ""
Line 3187
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3187 always 3187
  "void func() {\n    int *sp_mem[2] = { global1, global2 };\n    sp_mem[0][3] = 123;\n}" always "void func() {\n    int *sp_mem[2] = { global1, global2 };\n    sp_mem[0][3] = 123;\n}"
Line 3191
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3191 always 3191
  "" always ""
Line 3195
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3195 always 3195
  "int func() {\n    int a = 123;\n    int b = (short)-a;;\n    return b;\n}" always "int func() {\n    int a = 123;\n    int b = (short)-a;;\n    return b;\n}"
Line 3200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3200 always 3200
  "" always ""
Line 3204
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3204 always 3204
  "int func() {\n    int i = 0;\n    int j{i};\n    return j;\n}" always "int func() {\n    int i = 0;\n    int j{i};\n    return j;\n}"
Line 3209
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3209 always 3209
  "" always ""
Line 3211
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3211 always 3211
  "void f(bool b, bool c, double& r) {\n    double d{};\n    if (b) {\n      d = g();\n      r += d;\n    }\n    if (c) {\n      d = h();\n      r += d;\n    }\n}\n" always "void f(bool b, bool c, double& r) {\n    double d{};\n    if (b) {\n      d = g();\n      r += d;\n    }\n    if (c) {\n      d = h();\n      r += d;\n    }\n}\n"
Line 3222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3222 always 3222
  "" always ""
Line 3224
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3224 always 3224
  "int func() {\n    std::mutex m;\n    std::unique_lock<std::mutex> l{ m };\n    return 0;\n}" always "int func() {\n    std::mutex m;\n    std::unique_lock<std::mutex> l{ m };\n    return 0;\n}"
Line 3229
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3229 always 3229
  "" always ""
Line 3231
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3231 always 3231
  "int func() {\n    std::shared_lock<std::shared_timed_mutex> lock( m );\n}" always "int func() {\n    std::shared_lock<std::shared_timed_mutex> lock( m );\n}"
Line 3234
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3234 always 3234
  "" always ""
Line 3236
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3236 always 3236
  "void f() {\n    std::shared_lock lock = GetLock();\n}" always "void f() {\n    std::shared_lock lock = GetLock();\n}"
Line 3239
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3239 always 3239
  "" always ""
Line 3241
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3241 always 3241
  "void f() {\n    auto&& g = std::lock_guard<std::mutex> { mutex };\n}\n" always "void f() {\n    auto&& g = std::lock_guard<std::mutex> { mutex };\n}\n"
Line 3244
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3244 always 3244
  "" always ""
  "[test.cpp:2]: (style) Variable 'g' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'g' is assigned a value that is never used.\n"
Line 3246
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3246 always 3246
  "void f() {\n    auto a = RAII();\n    auto b { RAII() };\n}\n" always "void f() {\n    auto a = RAII();\n    auto b { RAII() };\n}\n"
Line 3250
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3250 always 3250
  "" always ""
Line 3255
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3255 always 3255
  "void f() {\n    int (SfxUndoManager::*retrieveCount)(bool) const\n        = (flag) ? &SfxUndoManager::foo : &SfxUndoManager::bar;\n}" always "void f() {\n    int (SfxUndoManager::*retrieveCount)(bool) const\n        = (flag) ? &SfxUndoManager::foo : &SfxUndoManager::bar;\n}"
Line 3259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3259 always 3259
  "[test.cpp:3]: (style) Variable 'retrieveCount' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'retrieveCount' is assigned a value that is never used.\n"
Line 3264
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3264 always 3264
  "void foo() {\n  long (*pKoeff)[256] = new long[9][256];\n}" always "void foo() {\n  long (*pKoeff)[256] = new long[9][256];\n}"
Line 3267
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3267 always 3267
  "" always ""
Line 3271
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3271 always 3271
  "class A {\n    public:\n        typedef enum { ID1,ID2,ID3 } Id_t;\n        typedef struct {Id_t id; std::string a; } x_t;\n        std::vector<x_t> m_vec;\n        std::vector<x_t> Get(void);\n        void DoSomething();\n};\nstd::vector<A::x_t> A::Get(void) {\n    return m_vec;\n}\nconst std::string Bar() {\n    return \"x\";\n}\nvoid A::DoSomething(void) {\n    const std::string x = Bar();\n}" always "class A {\n    public:\n        typedef enum { ID1,ID2,ID3 } Id_t;\n        typedef struct {Id_t id; std::string a; } x_t;\n        std::vector<x_t> m_vec;\n        std::vector<x_t> Get(void);\n        void DoSomething();\n};\nstd::vector<A::x_t> A::Get(void) {\n    return m_vec;\n}\nconst std::string Bar() {\n    return \"x\";\n}\nvoid A::DoSomething(void) {\n    const std::string x = Bar();\n}"
Line 3288
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3288 always 3288
  "[test.cpp:16]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:16]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 3293
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3293 always 3293
  "void foo() {\n  char buf1[10];\n  dostuff(cond?buf1:buf2);\n}" always "void foo() {\n  char buf1[10];\n  dostuff(cond?buf1:buf2);\n}"
Line 3297
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3297 always 3297
  "" always ""
Line 3299
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3299 always 3299
  "void foo() {\n  char buf1[10];\n  dostuff(cond?buf2:buf1);\n}" always "void foo() {\n  char buf1[10];\n  dostuff(cond?buf2:buf1);\n}"
Line 3303
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3303 always 3303
  "" always ""
Line 3306
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3306 always 3306
  "void foo(int c) {\n  char buf1[10], buf2[10];\n  char *p = c ? buf1 : buf2;\n  dostuff(p);\n}" always "void foo(int c) {\n  char buf1[10], buf2[10];\n  char *p = c ? buf1 : buf2;\n  dostuff(p);\n}"
Line 3311
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3311 always 3311
  "" always ""
Line 3316
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3316 always 3316
  "void foo(const Token *var) {\n  const Token *tok = nameToken();\n  tok = tok->next();\n}" always "void foo(const Token *var) {\n  const Token *tok = nameToken();\n  tok = tok->next();\n}"
Line 3320
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3320 always 3320
  "[test.cpp:3]: (style) Variable 'tok' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'tok' is assigned a value that is never used.\n"
Line 3322
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3322 always 3322
  "void foo() {\n  int x = 4;\n  x = 15 + x;\n}" always "void foo() {\n  int x = 4;\n  x = 15 + x;\n}"
Line 3326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3326 always 3326
  "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 3330
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3330 always 3330
  "void foo() {\n  std::vector<int> data;\n  data[2] = 32;\n  return data;\n}" always "void foo() {\n  std::vector<int> data;\n  data[2] = 32;\n  return data;\n}"
Line 3335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3335 always 3335
  "" always ""
Line 3339
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3339 always 3339
  "void foo(int a, int loop) {\n  bool x = false;\n  while (loop) {\n    if (a) {\n      x = true;\n      continue;\n    }\n  }\n}" always "void foo(int a, int loop) {\n  bool x = false;\n  while (loop) {\n    if (a) {\n      x = true;\n      continue;\n    }\n  }\n}"
Line 3348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3348 always 3348
  "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 3350
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3350 always 3350
  "void foo(int a, int loop) {\n  bool x = false;\n  while (loop) {\n    if (a) {\n      x = true;\n      continue;\n    }\n  }\n  return x;\n}" always "void foo(int a, int loop) {\n  bool x = false;\n  while (loop) {\n    if (a) {\n      x = true;\n      continue;\n    }\n  }\n  return x;\n}"
Line 3360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3360 always 3360
  "" always ""
Line 3364
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3364 always 3364
  "Padding fun() {\n  Distance d = DISTANCE;\n  return (Padding){ d, d, d, d };\n}" always "Padding fun() {\n  Distance d = DISTANCE;\n  return (Padding){ d, d, d, d };\n}"
Line 3368
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3368 always 3368
  "" always ""
Line 3372
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3372 always 3372
  "void f(int mode) {\n    int x = 0;\n\n    for (int i = 0; i < 10; i++) {\n        if (mode == 0x04)\n            x = 0;\n        if (mode == 0x0f) {\n            x = address;\n            data[x] = 0;\n        }\n    }\n}" always "void f(int mode) {\n    int x = 0;\n\n    for (int i = 0; i < 10; i++) {\n        if (mode == 0x04)\n            x = 0;\n        if (mode == 0x0f) {\n            x = address;\n            data[x] = 0;\n        }\n    }\n}"
Line 3384
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3384 always 3384
  "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 3390
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3390 always 3390
  "void f()\n{\n    int x = 31;\n    mask[x] |= 123;\n}" always "void f()\n{\n    int x = 31;\n    mask[x] |= 123;\n}"
Line 3395
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3395 always 3395
  "" always ""
Line 3399
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3399 always 3399
  "void f()\n{\n    int x = 0;\n    x++;\n}" always "void f()\n{\n    int x = 0;\n    x++;\n}"
Line 3404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3404 always 3404
  "[test.cpp:4]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 3408
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3408 always 3408
  "void f() {\n    int x = 0;\n    if (--x > 0) {}\n}" always "void f() {\n    int x = 0;\n    if (--x > 0) {}\n}"
Line 3412
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3412 always 3412
  "" always ""
Line 3414
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3414 always 3414
  "void f() {\n    int x = 0;\n    if (x-- > 0) {}\n}" always "void f() {\n    int x = 0;\n    if (x-- > 0) {}\n}"
Line 3418
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3418 always 3418
  "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 3422
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3422 always 3422
  "Response foo() {\n    const std::vector<char> cmanifest = z;\n    return {.a = cmanifest, .b =0};\n}" always "Response foo() {\n    const std::vector<char> cmanifest = z;\n    return {.a = cmanifest, .b =0};\n}"
Line 3426
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3426 always 3426
  "" always ""
Line 3430
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3430 always 3430
  "void Scale(double scale) {\n    for (int i = 0; i < m_points.size(); ++i) {\n        auto& p = m_points[i];\n        p += scale;\n    }\n}" always "void Scale(double scale) {\n    for (int i = 0; i < m_points.size(); ++i) {\n        auto& p = m_points[i];\n        p += scale;\n    }\n}"
Line 3436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3436 always 3436
  "" always ""
Line 3440
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3440 always 3440
  "void g(int& i);\nvoid f() {\n    int var = 0;\n    g(var);\n    var = 2;\n}\n" always "void g(int& i);\nvoid f() {\n    int var = 0;\n    g(var);\n    var = 2;\n}\n"
Line 3446
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3446 always 3446
  "[test.cpp:5]: (style) Variable 'var' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'var' is assigned a value that is never used.\n"
Line 3450
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3450 always 3450
  "void f() {\n    S* s = nullptr;\n}\n" always "void f() {\n    S* s = nullptr;\n}\n"
Line 3453
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3453 always 3453
  "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n"
Line 3455
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3455 always 3455
  "void f() {\n    S* s{};\n}\n" always "void f() {\n    S* s{};\n}\n"
Line 3458
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3458 always 3458
  "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n"
  "" always ""
Line 3460
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3460 always 3460
  "int f() {\n    int i = 0, j = 1;\n    return i;\n}\n" always "int f() {\n    int i = 0, j = 1;\n    return i;\n}\n"
Line 3464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3464 always 3464
  "[test.cpp:2]: (style) Variable 'j' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'j' is assigned a value that is never used.\n"
Line 3466
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3466 always 3466
  "int f() {\n    int i = 0, j = 1;\n    return j;\n}\n" always "int f() {\n    int i = 0, j = 1;\n    return j;\n}\n"
Line 3470
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3470 always 3470
  "[test.cpp:2]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'i' is assigned a value that is never used.\n"
Line 3472
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3472 always 3472
  "void f() {\n    int i = 1; while (i) { i = g(); }\n}\n" always "void f() {\n    int i = 1; while (i) { i = g(); }\n}\n"
Line 3475
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3475 always 3475
  "" always ""
Line 3479
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3479 always 3479
  "void f(void) {\n  int x=3;\n  goto y;\n  y:return;\n}" always "void f(void) {\n  int x=3;\n  goto y;\n  y:return;\n}"
Line 3484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3484 always 3484
  "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 3489
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3489 always 3489
  "void fun(int c) {\n  int x;\n  while (c) { x=10; }\n}" always "void fun(int c) {\n  int x;\n  while (c) { x=10; }\n}"
Line 3493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3493 always 3493
  "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 3495
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3495 always 3495
  "void dostuff(int x);\nvoid fun(int y, int c) {\n  int x = 1;\n  while (c) {\n    dostuff(x);\n    if (y) { x=10; break; }\n  }\n}" always "void dostuff(int x);\nvoid fun(int y, int c) {\n  int x = 1;\n  while (c) {\n    dostuff(x);\n    if (y) { x=10; break; }\n  }\n}"
Line 3503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3503 always 3503
  "[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 3505
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3505 always 3505
  "void dostuff(int &x);\nvoid fun() {\n  int x = 1;\n  while (c) {\n    dostuff(x);\n    if (y) { x=10; break; }\n  }\n}" always "void dostuff(int &x);\nvoid fun() {\n  int x = 1;\n  while (c) {\n    dostuff(x);\n    if (y) { x=10; break; }\n  }\n}"
Line 3513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3513 always 3513
  "[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:6]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 3515
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3515 always 3515
  "void fun() {\n  int x = 0;\n  while (c) {\n    dostuff(x);\n    x = 10;\n  }\n}" always "void fun() {\n  int x = 0;\n  while (c) {\n    dostuff(x);\n    x = 10;\n  }\n}"
Line 3522
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3522 always 3522
  "" always ""
Line 3524
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3524 always 3524
  "void fun() {\n  int x = 0;\n  while (x < 10) { x = x + 1; }\n}" always "void fun() {\n  int x = 0;\n  while (x < 10) { x = x + 1; }\n}"
Line 3528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3528 always 3528
  "" always ""
Line 3530
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3530 always 3530
  "void fun()\n{\n    int   status = 0;\n    for (ind = 0; ((ind < nrArgs) && (status < 10)); ind++)\n        status = x;\n}" always "void fun()\n{\n    int   status = 0;\n    for (ind = 0; ((ind < nrArgs) && (status < 10)); ind++)\n        status = x;\n}"
Line 3536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3536 always 3536
  "" always ""
Line 3538
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3538 always 3538
  "void f()\n{\n    int sum = 0U;\n    for (i = 0U; i < 2U; i++)\n        sum += 123;\n}" always "void f()\n{\n    int sum = 0U;\n    for (i = 0U; i < 2U; i++)\n        sum += 123;\n}"
Line 3544
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3544 always 3544
  "[test.cpp:3]: (style) Variable 'sum' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 'sum' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'sum' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 'sum' is assigned a value that is never used.\n"
Line 3547
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3547 always 3547
  "void f(int c) {\n    int b = 0;\n    while (g()) {\n        int a = c;\n        b = a;\n        if (a == 4)\n            a = 5;\n    }\n    h(b);\n}\n" always "void f(int c) {\n    int b = 0;\n    while (g()) {\n        int a = c;\n        b = a;\n        if (a == 4)\n            a = 5;\n    }\n    h(b);\n}\n"
Line 3557
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3557 always 3557
  "[test.cpp:7]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:7]: (style) Variable 'a' is assigned a value that is never used.\n"
Line 3559
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3559 always 3559
  "void f(const std::vector<int>& v) {\n    while (g()) {\n        const std::vector<int>& v2 = h();\n        if (std::vector<int>{ 1, 2, 3 }.size() > v2.size()) {}\n    }\n}\n" always "void f(const std::vector<int>& v) {\n    while (g()) {\n        const std::vector<int>& v2 = h();\n        if (std::vector<int>{ 1, 2, 3 }.size() > v2.size()) {}\n    }\n}\n"
Line 3565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3565 always 3565
  "" always ""
Line 3567
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3567 always 3567
  "void f(const std::vector<int>& v) {\n    while (g()) {\n        const std::vector<int>& v2 = h();\n        if (std::vector<int>({ 1, 2, 3 }).size() > v2.size()) {}\n    }\n}\n" always "void f(const std::vector<int>& v) {\n    while (g()) {\n        const std::vector<int>& v2 = h();\n        if (std::vector<int>({ 1, 2, 3 }).size() > v2.size()) {}\n    }\n}\n"
Line 3573
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3573 always 3573
  "" always ""
Line 3575
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3575 always 3575
  "void f(const std::string &c) {\n    std::string s = str();\n    if (s[0] == '>')\n        s[0] = '<';\n    if (s == c) {}\n}\n" always "void f(const std::string &c) {\n    std::string s = str();\n    if (s[0] == '>')\n        s[0] = '<';\n    if (s == c) {}\n}\n"
Line 3581
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3581 always 3581
  "" always ""
Line 3583
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3583 always 3583
  "void f(bool b) {\n    std::map<std::string, std::vector<std::string>> m;\n    if (b) {\n        const std::string n = g();\n        std::vector<std::string> c = h();\n        m[n] = c;\n    }\n    j(m);\n}\n" always "void f(bool b) {\n    std::map<std::string, std::vector<std::string>> m;\n    if (b) {\n        const std::string n = g();\n        std::vector<std::string> c = h();\n        m[n] = c;\n    }\n    j(m);\n}\n"
Line 3592
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3592 always 3592
  "" always ""
Line 3594
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3594 always 3594
  "struct S { int i; };\nS f(S s, bool b) {\n    if (b)\n        s.i = 1;\n    return s;\n}\n" always "struct S { int i; };\nS f(S s, bool b) {\n    if (b)\n        s.i = 1;\n    return s;\n}\n"
Line 3600
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3600 always 3600
  "" always ""
Line 3604
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3604 always 3604
  "void foo()\n{\n    int a;\n    int *b = &a;\n}" always "void foo()\n{\n    int a;\n    int *b = &a;\n}"
Line 3609
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3609 always 3609
  "[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: a\n" always "[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: a\n"
Line 3612
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3612 always 3612
  "void foo()\n{\n    int a[10];\n    int *b = a;\n}" always "void foo()\n{\n    int a[10];\n    int *b = a;\n}"
Line 3617
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3617 always 3617
  "[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: a\n" always "[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: a\n"
Line 3620
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3620 always 3620
  "void foo()\n{\n    int a;\n    int *b = &a;\n    *b = 0;\n}" always "void foo()\n{\n    int a;\n    int *b = &a;\n    *b = 0;\n}"
Line 3626
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3626 always 3626
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3630
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3630 always 3630
  "void foo()\n{\n    int a;\n    char *b = (char *)&a;\n    *b = 0;\n}" always "void foo()\n{\n    int a;\n    char *b = (char *)&a;\n    *b = 0;\n}"
Line 3636
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3636 always 3636
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3640
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3640 always 3640
  "void foo()\n{\n    int a;\n    char *b = (char *)(&a);\n    *b = 0;\n}" always "void foo()\n{\n    int a;\n    char *b = (char *)(&a);\n    *b = 0;\n}"
Line 3646
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3646 always 3646
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3650
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3650 always 3650
  "void foo()\n{\n    int a;\n    const char *b = (const char *)&a;\n    *b = 0;\n}" always "void foo()\n{\n    int a;\n    const char *b = (const char *)&a;\n    *b = 0;\n}"
Line 3656
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3656 always 3656
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3660
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3660 always 3660
  "void foo()\n{\n    int a;\n    const char *b = (const char *)(&a);\n    *b = 0;\n}" always "void foo()\n{\n    int a;\n    const char *b = (const char *)(&a);\n    *b = 0;\n}"
Line 3666
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3666 always 3666
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3670
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3670 always 3670
  "void foo()\n{\n    int a;\n    char *b = static_cast<char *>(&a);\n    *b = 0;\n}" always "void foo()\n{\n    int a;\n    char *b = static_cast<char *>(&a);\n    *b = 0;\n}"
Line 3676
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3676 always 3676
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3680
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3680 always 3680
  "void foo()\n{\n    int a;\n    const char *b = static_cast<const char *>(&a);\n    *b = 0;\n}" always "void foo()\n{\n    int a;\n    const char *b = static_cast<const char *>(&a);\n    *b = 0;\n}"
Line 3686
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3686 always 3686
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3691
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3691 always 3691
  "int a;\nvoid foo()\n{\n    int *b = &a;\n}" always "int a;\nvoid foo()\n{\n    int *b = &a;\n}"
Line 3696
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3696 always 3696
  "[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'b' is assigned a value that is never used.\n"
Line 3699
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3699 always 3699
  "void foo(int a)\n{\n    int *b = &a;\n}" always "void foo(int a)\n{\n    int *b = &a;\n}"
Line 3703
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3703 always 3703
  "[test.cpp:3]: (style) Variable 'b' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'b' is assigned a value that is never used.\n"
Line 3706
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3706 always 3706
  "class A\n{\n    int a;\n    void foo()\n    {\n        int *b = &a;\n    }\n};" always "class A\n{\n    int a;\n    void foo()\n    {\n        int *b = &a;\n    }\n};"
Line 3714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3714 always 3714
  "[test.cpp:6]: (style) Variable 'b' is assigned a value that is never used.\n" always "[test.cpp:6]: (style) Variable 'b' is assigned a value that is never used.\n"
Line 3716
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3716 always 3716
  "int a;\nvoid foo()\n{\n    int *b = &a;\n    *b = 0;\n}" always "int a;\nvoid foo()\n{\n    int *b = &a;\n    *b = 0;\n}"
Line 3722
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3722 always 3722
  "" always ""
Line 3724
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3724 always 3724
  "void foo(int a)\n{\n    int *b = &a;\n    *b = 0;\n}" always "void foo(int a)\n{\n    int *b = &a;\n    *b = 0;\n}"
Line 3729
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3729 always 3729
  "" always ""
Line 3731
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3731 always 3731
  "class A\n{\n    int a;\n    void foo()\n    {\n        int *b = &a;\n        *b = 0;\n    }\n}" always "class A\n{\n    int a;\n    void foo()\n    {\n        int *b = &a;\n        *b = 0;\n    }\n}"
Line 3740
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3740 always 3740
  "" always ""
Line 3742
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3742 always 3742
  "void foo()\n{\n    int a[10];\n    int *b = a;\n    *b = 0;\n}" always "void foo()\n{\n    int a[10];\n    int *b = a;\n    *b = 0;\n}"
Line 3748
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3748 always 3748
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3752
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3752 always 3752
  "void foo()\n{\n    int a[10];\n    char *b = (char *)a;\n    *b = 0;\n}" always "void foo()\n{\n    int a[10];\n    char *b = (char *)a;\n    *b = 0;\n}"
Line 3758
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3758 always 3758
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3762
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3762 always 3762
  "void foo()\n{\n    int a[10];\n    char *b = (char *)(a);\n    *b = 0;\n}" always "void foo()\n{\n    int a[10];\n    char *b = (char *)(a);\n    *b = 0;\n}"
Line 3768
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3768 always 3768
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3772
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3772 always 3772
  "void foo()\n{\n    int a[10];\n    const char *b = (const char *)a;\n    *b = 0;\n}" always "void foo()\n{\n    int a[10];\n    const char *b = (const char *)a;\n    *b = 0;\n}"
Line 3778
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3778 always 3778
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3782
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3782 always 3782
  "void foo()\n{\n    int a[10];\n    const char *b = (const char *)(a);\n    *b = 0;\n}" always "void foo()\n{\n    int a[10];\n    const char *b = (const char *)(a);\n    *b = 0;\n}"
Line 3788
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3788 always 3788
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3792
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3792 always 3792
  "void foo()\n{\n    int a[10];\n    char *b = static_cast<char *>(a);\n    *b = 0;\n}" always "void foo()\n{\n    int a[10];\n    char *b = static_cast<char *>(a);\n    *b = 0;\n}"
Line 3798
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3798 always 3798
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3802
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3802 always 3802
  "void foo()\n{\n    int a[10];\n    const char *b = static_cast<const char *>(a);\n    *b = 0;\n}" always "void foo()\n{\n    int a[10];\n    const char *b = static_cast<const char *>(a);\n    *b = 0;\n}"
Line 3808
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3808 always 3808
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3812
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3812 always 3812
  "int a[10];\nvoid foo()\n{\n    int *b = a;\n    *b = 0;\n}" always "int a[10];\nvoid foo()\n{\n    int *b = a;\n    *b = 0;\n}"
Line 3818
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3818 always 3818
  "" always ""
Line 3820
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3820 always 3820
  "int a[10];\nvoid foo()\n{\n    int *b = a;\n    int *c = b;\n    *c = 0;\n}" always "int a[10];\nvoid foo()\n{\n    int *b = a;\n    int *c = b;\n    *c = 0;\n}"
Line 3827
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3827 always 3827
  "" always ""
Line 3829
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3829 always 3829
  "void foo()\n{\n    int *b = a;\n    int *c = b;\n    *c = 0;\n}" always "void foo()\n{\n    int *b = a;\n    int *c = b;\n    *c = 0;\n}"
Line 3835
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3835 always 3835
  "" always ""
Line 3837
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3837 always 3837
  "void foo()\n{\n    int *b = a;\n    int *c = b;\n    *c = b[0];\n}" always "void foo()\n{\n    int *b = a;\n    int *c = b;\n    *c = b[0];\n}"
Line 3843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3843 always 3843
  "" always ""
Line 3846
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3846 always 3846
  "void foo()\n{\n    int *b = a;\n    int c = b[0];\n    x(c);\n}" always "void foo()\n{\n    int *b = a;\n    int c = b[0];\n    x(c);\n}"
Line 3852
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3852 always 3852
  "" always ""
Line 3854
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3854 always 3854
  "void foo()\n{\n    int *b = a;\n    int c = b[0];\n    x(c);\n}" always "void foo()\n{\n    int *b = a;\n    int c = b[0];\n    x(c);\n}"
Line 3860
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3860 always 3860
  "" always ""
Line 3862
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3862 always 3862
  "int a[10];\nvoid foo()\n{\n    int *b = &a[0];\n    a[0] = b[0];\n}" always "int a[10];\nvoid foo()\n{\n    int *b = &a[0];\n    a[0] = b[0];\n}"
Line 3868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3868 always 3868
  "" always ""
Line 3870
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3870 always 3870
  "void foo()\n{\n    int *b = &a[0];\n    a[0] = b[0];\n}" always "void foo()\n{\n    int *b = &a[0];\n    a[0] = b[0];\n}"
Line 3875
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3875 always 3875
  "" always ""
Line 3877
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3877 always 3877
  "void foo()\n{\n    int *b = a;\n    a[0] = b[0];\n}" always "void foo()\n{\n    int *b = a;\n    a[0] = b[0];\n}"
Line 3882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3882 always 3882
  "" always ""
Line 3884
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3884 always 3884
  "void foo(int a[10])\n{\n    int *b = a;\n    *b = 0;\n}" always "void foo(int a[10])\n{\n    int *b = a;\n    *b = 0;\n}"
Line 3889
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3889 always 3889
  "" always ""
Line 3891
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3891 always 3891
  "class A\n{\n    int a[10];\n    void foo()\n    {\n        int *b = a;\n        *b = 0;\n    }\n}" always "class A\n{\n    int a[10];\n    void foo()\n    {\n        int *b = a;\n        *b = 0;\n    }\n}"
Line 3900
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3900 always 3900
  "" always ""
Line 3902
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3902 always 3902
  "void foo()\n{\n    int a[10];\n    int *b = a;\n    int *c = b;\n    *c = 0;\n}" always "void foo()\n{\n    int a[10];\n    int *b = a;\n    int *c = b;\n    *c = 0;\n}"
Line 3909
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3909 always 3909
  "[test.cpp:6]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:6]: (style) Variable 'a' is assigned a value that is never used.\n"
  "" always ""
Line 3913
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3913 always 3913
  "void foo()\n{\n    int a[10];\n    int b[10];\n    int *c = a;\n    int *d = b;\n    *d = 0;\n}" always "void foo()\n{\n    int a[10];\n    int b[10];\n    int *c = a;\n    int *d = b;\n    *d = 0;\n}"
Line 3921
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3921 always 3921
  "[test.cpp:5]: (style) Variable 'c' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: a\n" always "[test.cpp:5]: (style) Variable 'c' is assigned a value that is never used.\n[test.cpp:3]: (style) Unused variable: a\n"
Line 3925
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3925 always 3925
  "void foo()\n{\n    int a[10];\n    int b[10];\n    int *c = a;\n    c = b;\n    *c = 0;\n}" always "void foo()\n{\n    int a[10];\n    int b[10];\n    int *c = a;\n    c = b;\n    *c = 0;\n}"
Line 3933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3933 always 3933
  "[test.cpp:3]: (style) Unused variable: a\n" always "[test.cpp:3]: (style) Unused variable: a\n"
Line 3937
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3937 always 3937
  "void foo()\n{\n    int a[10];\n    int b[10];\n    int *c = a;\n    c = b;\n    *c = 0;\n    c = a;\n    *c = 0;\n}" always "void foo()\n{\n    int a[10];\n    int b[10];\n    int *c = a;\n    c = b;\n    *c = 0;\n    c = a;\n    *c = 0;\n}"
Line 3947
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3947 always 3947
  "[test.cpp:9]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\n" always "[test.cpp:9]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\n"
  "" always ""
Line 3952
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3952 always 3952
  "void foo()\n{\n    int a[10], * b = a + 10;\n    b[-10] = 1;\n}" always "void foo()\n{\n    int a[10], * b = a + 10;\n    b[-10] = 1;\n}"
Line 3957
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3957 always 3957
  "[test.cpp:4]: (style) Variable 'b[-10]' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'b[-10]' is assigned a value that is never used.\n"
  "" always ""
Line 3961
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3961 always 3961
  "void foo()\n{\n    int a[10], * b = a + 10;\n    b[-10] = 0;\n    int * c = b - 10;\n}" always "void foo()\n{\n    int a[10], * b = a + 10;\n    b[-10] = 0;\n    int * c = b - 10;\n}"
Line 3967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3967 always 3967
  "[test.cpp:5]: (style) Variable 'c' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'c' is assigned a value that is never used.\n"
Line 3970
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3970 always 3970
  "void foo()\n{\n    int a[10], * b = a + 10;\n    int * c = b - 10;\n    c[1] = 3;\n}" always "void foo()\n{\n    int a[10], * b = a + 10;\n    int * c = b - 10;\n    c[1] = 3;\n}"
Line 3976
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3976 always 3976
  "[test.cpp:5]: (style) Variable 'c[1]' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'c[1]' is assigned a value that is never used.\n"
  "" always ""
Line 3980
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3980 always 3980
  "void foo()\n{\n    int a[10], * b = a + 10;\n    int * c = b - 10;\n    c[1] = c[0];\n}" always "void foo()\n{\n    int a[10], * b = a + 10;\n    int * c = b - 10;\n    c[1] = c[0];\n}"
Line 3986
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3986 always 3986
  "[test.cpp:5]: (style) Variable 'c[1]' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'c[1]' is assigned a value that is never used.\n"
  "" always ""
Line 3990
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3990 always 3990
  "void foo() {\n    int a[2], *b[2];\n    a[0] = 123;\n    b[0] = &a[0];\n    int *d = b[0];\n    return *d;\n}" always "void foo() {\n    int a[2], *b[2];\n    a[0] = 123;\n    b[0] = &a[0];\n    int *d = b[0];\n    return *d;\n}"
Line 3997
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3997 always 3997
  "" always ""
Line 3999
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  3999 always 3999
  "void foo() {\n    entry a[2], *b[2];\n    a[0].value = 123;\n    b[0] = &a[0];\n    int d = b[0].value;\n    return d;\n}" always "void foo() {\n    entry a[2], *b[2];\n    a[0].value = 123;\n    b[0] = &a[0];\n    int d = b[0].value;\n    return d;\n}"
Line 4006
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4006 always 4006
  "" always ""
Line 4008
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4008 always 4008
  "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    struct S * s = (struct S *)a;\n    s->c[0] = 0;\n}" always "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    struct S * s = (struct S *)a;\n    s->c[0] = 0;\n}"
Line 4015
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4015 always 4015
  "" always ""
Line 4017
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4017 always 4017
  "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    struct S * s = (struct S *)a;\n}" always "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    struct S * s = (struct S *)a;\n}"
Line 4023
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4023 always 4023
  "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n" always "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n"
Line 4026
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4026 always 4026
  "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    const struct S * s = (const struct S *)a;\n}" always "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    const struct S * s = (const struct S *)a;\n}"
Line 4032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4032 always 4032
  "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n" always "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n"
Line 4035
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4035 always 4035
  "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    struct S * s = static_cast<struct S *>(a);\n}" always "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    struct S * s = static_cast<struct S *>(a);\n}"
Line 4041
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4041 always 4041
  "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n" always "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n"
Line 4044
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4044 always 4044
  "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    const struct S * s = static_cast<const struct S *>(a);\n}" always "struct S { char c[100]; };\nvoid foo()\n{\n    char a[100];\n    const struct S * s = static_cast<const struct S *>(a);\n}"
Line 4050
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4050 always 4050
  "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n" always "[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n[test.cpp:4]: (style) Unused variable: a\n"
Line 4053
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4053 always 4053
  "int a[10];\nvoid foo()\n{\n    int b[10];\n    int c[10];\n    int *d;\n    d = b;\n    d = a;\n    d = c;\n    *d = 0;\n}" always "int a[10];\nvoid foo()\n{\n    int b[10];\n    int c[10];\n    int *d;\n    d = b;\n    d = a;\n    d = c;\n    *d = 0;\n}"
Line 4064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4064 always 4064
  "[test.cpp:4]: (style) Unused variable: b\n" always "[test.cpp:4]: (style) Unused variable: b\n"
Line 4067
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4067 always 4067
  "int a[10];\nvoid foo()\n{\n    int b[10];\n    int c[10];\n    int *d;\n    d = b; *d = 0;\n    d = a; *d = 0;\n    d = c; *d = 0;\n}" always "int a[10];\nvoid foo()\n{\n    int b[10];\n    int c[10];\n    int *d;\n    d = b; *d = 0;\n    d = a; *d = 0;\n    d = c; *d = 0;\n}"
Line 4077
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4077 always 4077
  "[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:9]: (style) Variable 'c' is assigned a value that is never used.\n" always "[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\n[test.cpp:9]: (style) Variable 'c' is assigned a value that is never used.\n"
  "" always ""
Line 4084
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4084 always 4084
  "void foo()\n{\n    int * a;\n    x(a);\n}" always "void foo()\n{\n    int * a;\n    x(a);\n}"
Line 4089
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4089 always 4089
  "" always ""
Line 4093
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4093 always 4093
  "void foo()\n{\n    BROWSEINFO    info;\n    char          szDisplayName[MAX_PATH];\n    info.pszDisplayName = szDisplayName;\n    SHBrowseForFolder(&info);\n}" always "void foo()\n{\n    BROWSEINFO    info;\n    char          szDisplayName[MAX_PATH];\n    info.pszDisplayName = szDisplayName;\n    SHBrowseForFolder(&info);\n}"
Line 4100
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4100 always 4100
  "" always ""
Line 4104
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4104 always 4104
  "struct AB { int a; int b; } ab;\nvoid foo()\n{\n    int * a = &ab.a;\n}" always "struct AB { int a; int b; } ab;\nvoid foo()\n{\n    int * a = &ab.a;\n}"
Line 4109
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4109 always 4109
  "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'a' is assigned a value that is never used.\n"
Line 4111
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4111 always 4111
  "struct AB { int a; int b; } ab;\nvoid foo()\n{\n    int * a = &ab.a;\n    *a = 0;\n}" always "struct AB { int a; int b; } ab;\nvoid foo()\n{\n    int * a = &ab.a;\n    *a = 0;\n}"
Line 4117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4117 always 4117
  "" always ""
Line 4119
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4119 always 4119
  "struct AB { int a; int b; };\nvoid foo()\n{\n    struct AB ab;\n    int * a = &ab.a;\n}" always "struct AB { int a; int b; };\nvoid foo()\n{\n    struct AB ab;\n    int * a = &ab.a;\n}"
Line 4125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4125 always 4125
  "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'ab' is not assigned a value.\n" always "[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'ab' is not assigned a value.\n"
Line 4128
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4128 always 4128
  "struct AB { int a; int b; };\nvoid foo()\n{\n    struct AB ab;\n    int * a = &ab.a;\n    *a = 0;\n}" always "struct AB { int a; int b; };\nvoid foo()\n{\n    struct AB ab;\n    int * a = &ab.a;\n    *a = 0;\n}"
Line 4135
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4135 always 4135
  "" always ""
Line 4139
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4139 always 4139
  "char foo()\n{\n    char buf[8];\n    char *p = &buf[0];\n    *p++ = 0;\n    return buf[0];\n}" always "char foo()\n{\n    char buf[8];\n    char *p = &buf[0];\n    *p++ = 0;\n    return buf[0];\n}"
Line 4146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4146 always 4146
  "" always ""
Line 4148
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4148 always 4148
  "char foo()\n{\n    char buf[8];\n    char *p = &buf[1];\n    *p-- = 0;\n    return buf[0];\n}" always "char foo()\n{\n    char buf[8];\n    char *p = &buf[1];\n    *p-- = 0;\n    return buf[0];\n}"
Line 4155
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4155 always 4155
  "" always ""
Line 4157
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4157 always 4157
  "char foo()\n{\n    char buf[8];\n    char *p = &buf[0];\n    *++p = 0;\n    return buf[0];\n}" always "char foo()\n{\n    char buf[8];\n    char *p = &buf[0];\n    *++p = 0;\n    return buf[0];\n}"
Line 4164
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4164 always 4164
  "" always ""
Line 4166
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4166 always 4166
  "char foo()\n{\n    char buf[8];\n    char *p = &buf[1];\n    *--p = 0;\n    return buf[0];\n}" always "char foo()\n{\n    char buf[8];\n    char *p = &buf[1];\n    *--p = 0;\n    return buf[0];\n}"
Line 4173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4173 always 4173
  "" always ""
Line 4178
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4178 always 4178
  "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    } else {\n        srcdata = vdata;\n    }\n    b(srcdata);\n}" always "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    } else {\n        srcdata = vdata;\n    }\n    b(srcdata);\n}"
Line 4190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4190 always 4190
  "" always ""
Line 4192
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4192 always 4192
  "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n        srcdata = vdata;\n    }\n    b(srcdata);\n}" always "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n        srcdata = vdata;\n    }\n    b(srcdata);\n}"
Line 4203
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4203 always 4203
  "[test.cpp:6]: (style) Variable 'buf' is assigned a value that is never used.\n" always "[test.cpp:6]: (style) Variable 'buf' is assigned a value that is never used.\n"
  "" always ""
Line 4207
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4207 always 4207
  "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}" always "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}"
Line 4218
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4218 always 4218
  "[test.cpp:6]: (style) Variable 'buf' is assigned a value that is never used.\n" always "[test.cpp:6]: (style) Variable 'buf' is assigned a value that is never used.\n"
  "" always ""
Line 4222
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4222 always 4222
  "void foo(char *vdata)\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}" always "void foo(char *vdata)\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}"
Line 4232
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4232 always 4232
  "[test.cpp:3]: (style) Unused variable: buf\n" always "[test.cpp:3]: (style) Unused variable: buf\n"
Line 4234
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4234 always 4234
  "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        srcdata = vdata;\n    }\n    srcdata = buf;\n    b(srcdata);\n}" always "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    if (a()) {\n        srcdata = vdata;\n    }\n    srcdata = buf;\n    b(srcdata);\n}"
Line 4244
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4244 always 4244
  "" always ""
Line 4246
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4246 always 4246
  "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    } else {\n        srcdata = vdata;\n    }\n    b(srcdata);\n}" always "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    } else {\n        srcdata = vdata;\n    }\n    b(srcdata);\n}"
Line 4259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4259 always 4259
  "" always ""
Line 4261
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4261 always 4261
  "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n        srcdata = vdata;\n    }\n    b(srcdata);\n}" always "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n        srcdata = vdata;\n    }\n    b(srcdata);\n}"
Line 4273
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4273 always 4273
  "[test.cpp:7]: (style) Variable 'buf' is assigned a value that is never used.\n" always "[test.cpp:7]: (style) Variable 'buf' is assigned a value that is never used.\n"
  "" always ""
Line 4277
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4277 always 4277
  "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}" always "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        buf[0] = 1;\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}"
Line 4289
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4289 always 4289
  "[test.cpp:7]: (style) Variable 'buf' is assigned a value that is never used.\n" always "[test.cpp:7]: (style) Variable 'buf' is assigned a value that is never used.\n"
  "" always ""
Line 4293
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4293 always 4293
  "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}" always "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        srcdata = buf;\n    }\n    srcdata = vdata;\n    b(srcdata);\n}"
Line 4304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4304 always 4304
  "[test.cpp:3]: (style) Unused variable: buf\n" always "[test.cpp:3]: (style) Unused variable: buf\n"
Line 4306
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4306 always 4306
  "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        srcdata = vdata;\n    }\n    srcdata = buf;\n    b(srcdata);\n}" always "void foo()\n{\n    char buf[8];\n    char *srcdata;\n    char vdata[8];\n    if (a()) {\n        srcdata = vdata;\n    }\n    srcdata = buf;\n    b(srcdata);\n}"
Line 4317
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4317 always 4317
  "[test.cpp:5]: (style) Unused variable: vdata\n" always "[test.cpp:5]: (style) Unused variable: vdata\n"
Line 4321
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4321 always 4321
  "void foo()\n{\n    char *c[10];\n    char **cp;\n    cp = c;\n    *cp = 0;\n}" always "void foo()\n{\n    char *c[10];\n    char **cp;\n    cp = c;\n    *cp = 0;\n}"
Line 4328
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4328 always 4328
  "" always ""
Line 4332
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4332 always 4332
  "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    else\n        pb = b4;\n    b(pb);\n}" always "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    else\n        pb = b4;\n    b(pb);\n}"
Line 4349
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4349 always 4349
  "" always ""
Line 4351
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4351 always 4351
  "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    else {\n        pb = b1;\n        pb = b4;\n    }\n    b(pb);\n}" always "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    else {\n        pb = b1;\n        pb = b4;\n    }\n    b(pb);\n}"
Line 4370
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4370 always 4370
  "" always ""
Line 4372
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4372 always 4372
  "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    else {\n        pb = b1;\n        pb = b2;\n        pb = b3;\n        pb = b4;\n    }\n    b(pb);\n}" always "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    else {\n        pb = b1;\n        pb = b2;\n        pb = b3;\n        pb = b4;\n    }\n    b(pb);\n}"
Line 4393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4393 always 4393
  "" always ""
Line 4396
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4396 always 4396
  "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    pb = b4;\n    b(pb);\n}" always "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else if (a == 2)\n        pb = b2;\n    else if (a == 3)\n        pb = b3;\n    pb = b4;\n    b(pb);\n}"
Line 4412
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4412 always 4412
  "[test.cpp:3]: (style) Unused variable: b1\n[test.cpp:4]: (style) Unused variable: b2\n[test.cpp:5]: (style) Unused variable: b3\n" always "[test.cpp:3]: (style) Unused variable: b1\n[test.cpp:4]: (style) Unused variable: b2\n[test.cpp:5]: (style) Unused variable: b3\n"
Line 4416
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4416 always 4416
  "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n            else\n                pb = b4;\n        }\n    }\n    b(pb);\n}" always "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n            else\n                pb = b4;\n        }\n    }\n    b(pb);\n}"
Line 4437
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4437 always 4437
  "" always ""
Line 4439
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4439 always 4439
  "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n            else {\n                pb = b1;\n                pb = b4;\n            }\n        }\n    }\n    b(pb);\n}" always "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n            else {\n                pb = b1;\n                pb = b4;\n            }\n        }\n    }\n    b(pb);\n}"
Line 4462
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4462 always 4462
  "" always ""
Line 4464
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4464 always 4464
  "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n            else {\n                pb = b1;\n                pb = b2;\n                pb = b3;\n                pb = b4;\n            }\n        }\n    }\n    b(pb);\n}" always "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n            else {\n                pb = b1;\n                pb = b2;\n                pb = b3;\n                pb = b4;\n            }\n        }\n    }\n    b(pb);\n}"
Line 4489
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4489 always 4489
  "" always ""
Line 4491
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4491 always 4491
  "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n        }\n    }\n    pb = b4;\n    b(pb);\n}" always "void foo()\n{\n    char b1[8];\n    char b2[8];\n    char b3[8];\n    char b4[8];\n    char *pb;\n    if (a == 1)\n        pb = b1;\n    else {\n        if (a == 2)\n            pb = b2;\n        else {\n            if (a == 3)\n                pb = b3;\n        }\n    }\n    pb = b4;\n    b(pb);\n}"
Line 4511
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4511 always 4511
  "[test.cpp:3]: (style) Unused variable: b1\n[test.cpp:4]: (style) Unused variable: b2\n[test.cpp:5]: (style) Unused variable: b3\n" always "[test.cpp:3]: (style) Unused variable: b1\n[test.cpp:4]: (style) Unused variable: b2\n[test.cpp:5]: (style) Unused variable: b3\n"
Line 4517
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4517 always 4517
  "void foo()\n{\n    Foo foo;\n    Foo &ref = foo;\n    ref[0] = 123;\n}" always "void foo()\n{\n    Foo foo;\n    Foo &ref = foo;\n    ref[0] = 123;\n}"
Line 4523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4523 always 4523
  "" always ""
Line 4525
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4525 always 4525
  "void foo()\n{\n    Foo foo;\n    Foo &ref = foo;\n    ref[0] = 123;\n}" always "void foo()\n{\n    Foo foo;\n    Foo &ref = foo;\n    ref[0] = 123;\n}"
  "test.c" always "test.c"
Line 4532
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4532 always 4532
  "[test.c:5]: (style) Variable 'foo' is assigned a value that is never used.\n" always "[test.c:5]: (style) Variable 'foo' is assigned a value that is never used.\n"
  "" always ""
Line 4538
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4538 always 4538
  "void foo(Foo &foo)\n{\n    Foo &ref = foo;\n    int *x = &ref.x();\n    *x = 0;\n}" always "void foo(Foo &foo)\n{\n    Foo &ref = foo;\n    int *x = &ref.x();\n    *x = 0;\n}"
Line 4544
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4544 always 4544
  "" always ""
Line 4546
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4546 always 4546
  "void foo(Foo &foo)\n{\n    Foo &ref = foo;\n    int *x = &ref.x;\n    *x = 0;\n}" always "void foo(Foo &foo)\n{\n    Foo &ref = foo;\n    int *x = &ref.x;\n    *x = 0;\n}"
  "test.c" always "test.c"
Line 4553
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4553 always 4553
  "" always ""
Line 4557
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4557 always 4557
  "void f(Foo &foo) {\n    std::set<int>::iterator x = foo.dostuff();\n    *(x) = 0;\n}" always "void f(Foo &foo) {\n    std::set<int>::iterator x = foo.dostuff();\n    *(x) = 0;\n}"
Line 4561
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4561 always 4561
  "" always ""
Line 4565
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4565 always 4565
  "void f(void) {\n    int a[4];\n    int *b = (int*)((int*)a+1);\n    x(b);\n}" always "void f(void) {\n    int a[4];\n    int *b = (int*)((int*)a+1);\n    x(b);\n}"
Line 4570
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4570 always 4570
  "" always ""
Line 4572
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4572 always 4572
  "int f(void) {\n    int x=1,y;\n    y = (x * a) / 100;\n    return y;\n}" always "int f(void) {\n    int x=1,y;\n    y = (x * a) / 100;\n    return y;\n}"
Line 4577
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4577 always 4577
  "" always ""
Line 4581
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4581 always 4581
  "void f(char *p) {\n    char a[4];\n    p = a;\n    strcpy(p, \"x\");\n}" always "void f(char *p) {\n    char a[4];\n    p = a;\n    strcpy(p, \"x\");\n}"
Line 4586
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4586 always 4586
  "" always ""
Line 4588
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4588 always 4588
  "void f(char *p) {\n    char a[4];\n    p = a;\n    strcpy(p, \"x\");\n}" always "void f(char *p) {\n    char a[4];\n    p = a;\n    strcpy(p, \"x\");\n}"
Line 4593
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4593 always 4593
  "a is assigned value that is never used" always "a is assigned value that is never used"
  "" always ""
Line 4597
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4597 always 4597
  "char * dostuff(char *p);\nvoid f() {\n    char a[4], *p=a;\n    p = dostuff(p);\n}" always "char * dostuff(char *p);\nvoid f() {\n    char a[4], *p=a;\n    p = dostuff(p);\n}"
Line 4602
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4602 always 4602
  "[test.cpp:4]: (style) Variable 'p' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'p' is assigned a value that is never used.\n"
Line 4604
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4604 always 4604
  "char * dostuff(char *&p);\nvoid f() {\n    char a[4], *p=a;\n    p = dostuff(p);\n}" always "char * dostuff(char *&p);\nvoid f() {\n    char a[4], *p=a;\n    p = dostuff(p);\n}"
Line 4609
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4609 always 4609
  "" always ""
Line 4611
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4611 always 4611
  "void f() {\n    char a[4], *p=a;\n    p = dostuff(p);\n}" always "void f() {\n    char a[4], *p=a;\n    p = dostuff(p);\n}"
Line 4615
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4615 always 4615
  "" always ""
Line 4619
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4619 always 4619
  "void f() {\n  int x=3;\n  int *p = &x;\n  int *p2[1] = {p};\n  dostuff(p2);\n}" always "void f() {\n  int x=3;\n  int *p = &x;\n  int *p2[1] = {p};\n  dostuff(p2);\n}"
Line 4625
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4625 always 4625
  "" always ""
Line 4629
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4629 always 4629
  "void f() {\n  auto x = dostuff();\n  p = x;\n  x->data[0] = 9;\n}" always "void f() {\n  auto x = dostuff();\n  p = x;\n  x->data[0] = 9;\n}"
Line 4634
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4634 always 4634
  "" always ""
Line 4638
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4638 always 4638
  "void f() {\n  int x;\n  unknown_type p = &x;\n  *p = 9;\n}" always "void f() {\n  int x;\n  unknown_type p = &x;\n  *p = 9;\n}"
  "test.c" always "test.c"
Line 4643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4643 always 4643
  "" always ""
Line 4647
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4647 always 4647
  "void add( std::vector< std::pair< int, double > >& v)\n{\n    std::vector< std::pair< int, double > >::iterator it;\n    for ( it = v.begin(); it != v.end(); ++it )\n    {\n        if ( x )\n        {\n            ( *it ).second = 0;\n            break;\n        }\n    }\n}" always "void add( std::vector< std::pair< int, double > >& v)\n{\n    std::vector< std::pair< int, double > >::iterator it;\n    for ( it = v.begin(); it != v.end(); ++it )\n    {\n        if ( x )\n        {\n            ( *it ).second = 0;\n            break;\n        }\n    }\n}"
Line 4659
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4659 always 4659
  "" always ""
Line 4663
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4663 always 4663
  "void f() {\n    bool b0{}, b1{};\n    struct {\n        bool* pb;\n        int val;\n    } Map[] = { {&b0, 0}, {&b1, 1} };\n    b0 = true;\n    for (auto & m : Map)\n        if (m.pb && *m.pb)\n            m.val = 1;\n}\n" always "void f() {\n    bool b0{}, b1{};\n    struct {\n        bool* pb;\n        int val;\n    } Map[] = { {&b0, 0}, {&b1, 1} };\n    b0 = true;\n    for (auto & m : Map)\n        if (m.pb && *m.pb)\n            m.val = 1;\n}\n"
Line 4674
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4674 always 4674
  "" always ""
Line 4679
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4679 always 4679
  "void foo(int &b)\n{\n    int a;\n    asm();\n    b = a;\n}" always "void foo(int &b)\n{\n    int a;\n    asm();\n    b = a;\n}"
Line 4685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4685 always 4685
  "" always ""
Line 4689
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4689 always 4689
  "void foo()\n{\n    static const struct{ int x, y, w, h; } bounds = {1,2,3,4};\n    return bounds.x + bounds.y + bounds.w + bounds.h;\n}" always "void foo()\n{\n    static const struct{ int x, y, w, h; } bounds = {1,2,3,4};\n    return bounds.x + bounds.y + bounds.w + bounds.h;\n}"
Line 4694
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4694 always 4694
  "" always ""
Line 4698
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4698 always 4698
  "void foo()\n{\n    struct ABC { int a, b, c; };\n    struct ABC abc = { 1, 2, 3 };\n}" always "void foo()\n{\n    struct ABC { int a, b, c; };\n    struct ABC abc = { 1, 2, 3 };\n}"
Line 4703
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4703 always 4703
  "[test.cpp:4]: (style) Variable 'abc' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'abc' is assigned a value that is never used.\n"
Line 4707
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4707 always 4707
  "void foo()\n{\n    int a = 10;\n    union { struct { unsigned char x; }; unsigned char z; };\n    do {\n        func();\n    } while(a--);\n}" always "void foo()\n{\n    int a = 10;\n    union { struct { unsigned char x; }; unsigned char z; };\n    do {\n        func();\n    } while(a--);\n}"
Line 4715
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4715 always 4715
  "[test.cpp:4]: (style) Unused variable: x\n[test.cpp:4]: (style) Unused variable: z\n" always "[test.cpp:4]: (style) Unused variable: x\n[test.cpp:4]: (style) Unused variable: z\n"
  "" always ""
Line 4721
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4721 always 4721
  "int foo() {\n    A a;\n    return a.i;\n}" always "int foo() {\n    A a;\n    return a.i;\n}"
Line 4725
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4725 always 4725
  "" always ""
Line 4727
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4727 always 4727
  "int foo() {\n    A a;\n    return 0;\n}" always "int foo() {\n    A a;\n    return 0;\n}"
Line 4731
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4731 always 4731
  "" always ""
Line 4733
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4733 always 4733
  "int foo() {\n    A a;\n    return 0;\n}\n" always "int foo() {\n    A a;\n    return 0;\n}\n"
  "test.c" always "test.c"
Line 4738
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4738 always 4738
  "[test.c:2]: (style) Unused variable: a\n" always "[test.c:2]: (style) Unused variable: a\n"
Line 4741
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4741 always 4741
  "struct A { int i; };\nint foo() {\n    A a;\n    return a.i;\n}" always "struct A { int i; };\nint foo() {\n    A a;\n    return a.i;\n}"
Line 4746
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4746 always 4746
  "" always ""
Line 4748
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4748 always 4748
  "struct A { int i; };\nint foo() {\n    A a;\n    a.i = 0;\n    return 0;\n}" always "struct A { int i; };\nint foo() {\n    A a;\n    a.i = 0;\n    return 0;\n}"
Line 4754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4754 always 4754
  "[test.cpp:4]: (style) Variable 'a.i' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'a.i' is assigned a value that is never used.\n"
Line 4756
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4756 always 4756
  "struct A { int i; };\nint foo() {\n    A a = { 0 };\n    return 0;\n}" always "struct A { int i; };\nint foo() {\n    A a = { 0 };\n    return 0;\n}"
Line 4761
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4761 always 4761
  "[test.cpp:3]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'a' is assigned a value that is never used.\n"
Line 4764
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4764 always 4764
  "class A { int i; };\nint foo() {\n    A a = { 0 };\n    return 0;\n}" always "class A { int i; };\nint foo() {\n    A a = { 0 };\n    return 0;\n}"
Line 4769
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4769 always 4769
  "[test.cpp:3]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'a' is assigned a value that is never used.\n"
Line 4772
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4772 always 4772
  "class A { int i; public: A(); { } };\nint foo() {\n    A a;\n    return 0;\n}" always "class A { int i; public: A(); { } };\nint foo() {\n    A a;\n    return 0;\n}"
Line 4777
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4777 always 4777
  "" always ""
Line 4779
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4779 always 4779
  "struct A { int i; };\nint foo() {\n    A a;\n    return 0;\n}" always "struct A { int i; };\nint foo() {\n    A a;\n    return 0;\n}"
Line 4784
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4784 always 4784
  "[test.cpp:3]: (style) Unused variable: a\n" always "[test.cpp:3]: (style) Unused variable: a\n"
Line 4786
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4786 always 4786
  "class A { int i; };\nint foo() {\n    A a;\n    return 0;\n}" always "class A { int i; };\nint foo() {\n    A a;\n    return 0;\n}"
Line 4791
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4791 always 4791
  "[test.cpp:3]: (style) Unused variable: a\n" always "[test.cpp:3]: (style) Unused variable: a\n"
Line 4793
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4793 always 4793
  "class A { int i; public: A(); { } };\nint foo() {\n    A a;\n    return 0;\n}" always "class A { int i; public: A(); { } };\nint foo() {\n    A a;\n    return 0;\n}"
Line 4798
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4798 always 4798
  "" always ""
Line 4800
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4800 always 4800
  "class A { unknown i; };\nint foo() {\n    A a;\n    return 0;\n}" always "class A { unknown i; };\nint foo() {\n    A a;\n    return 0;\n}"
Line 4805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4805 always 4805
  "" always ""
Line 4807
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4807 always 4807
  "class A : public Fred { int i; };\nint foo() {\n    A a;\n    return 0;\n}" always "class A : public Fred { int i; };\nint foo() {\n    A a;\n    return 0;\n}"
Line 4812
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4812 always 4812
  "" always ""
Line 4814
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4814 always 4814
  "class Fred {char c;};\nclass A : public Fred { int i; };\nint foo() {\n    A a;\n    return 0;\n}" always "class Fred {char c;};\nclass A : public Fred { int i; };\nint foo() {\n    A a;\n    return 0;\n}"
Line 4820
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4820 always 4820
  "[test.cpp:4]: (style) Unused variable: a\n" always "[test.cpp:4]: (style) Unused variable: a\n"
Line 4824
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4824 always 4824
  "class Type { };\nclass A {\npublic:\n    Type & get() { return t; }\nprivate:\n    Type t;\n};" always "class Type { };\nclass A {\npublic:\n    Type & get() { return t; }\nprivate:\n    Type t;\n};"
Line 4831
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4831 always 4831
  "" always ""
Line 4835
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4835 always 4835
  "struct IMAPARG {\n  void *text;\n};\n\nvoid fun() {\n  IMAPARG *args, aatt;\n  args = &aatt;\n  aatt.text = tmp;\n  dostuff(args);\n}" always "struct IMAPARG {\n  void *text;\n};\n\nvoid fun() {\n  IMAPARG *args, aatt;\n  args = &aatt;\n  aatt.text = tmp;\n  dostuff(args);\n}"
Line 4845
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4845 always 4845
  "" always ""
Line 4848
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4848 always 4848
  "struct ARG {\n  int a;\n  int b;\n};\n\nvoid fun() {\n  ARG aatt;\n  int *p = &aatt.b;\n  aatt.a = 123;\n  dostuff(p);\n}" always "struct ARG {\n  int a;\n  int b;\n};\n\nvoid fun() {\n  ARG aatt;\n  int *p = &aatt.b;\n  aatt.a = 123;\n  dostuff(p);\n}"
Line 4859
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4859 always 4859
  "[test.cpp:9]: (style) Variable 'aatt.a' is assigned a value that is never used.\n" always "[test.cpp:9]: (style) Variable 'aatt.a' is assigned a value that is never used.\n"
Line 4861
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4861 always 4861
  "struct AB {\n  int a;\n  int b;\n};\n\nvoid fun() {\n  AB ab;\n  int &a = ab.a;\n  ab.a = 123;\n  dostuff(a);\n}" always "struct AB {\n  int a;\n  int b;\n};\n\nvoid fun() {\n  AB ab;\n  int &a = ab.a;\n  ab.a = 123;\n  dostuff(a);\n}"
Line 4872
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4872 always 4872
  "" always ""
Line 4876
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4876 always 4876
  "struct s {\n     union {\n         struct {\n             int fld1 : 16;\n             int fld2 : 16;\n         };\n         int raw;\n     };\n};\n\nvoid foo() {\n      struct s test;\n      test.raw = 0x100;\n      dostuff(test.fld1, test.fld2);\n}" always "struct s {\n     union {\n         struct {\n             int fld1 : 16;\n             int fld2 : 16;\n         };\n         int raw;\n     };\n};\n\nvoid foo() {\n      struct s test;\n      test.raw = 0x100;\n      dostuff(test.fld1, test.fld2);\n}"
Line 4891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4891 always 4891
  "" always ""
Line 4895
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4895 always 4895
  "struct XY { int x; int y; };\n\nvoid foo() {\n      struct XY xy(get());\n      return xy.x + xy.y;\n}" always "struct XY { int x; int y; };\n\nvoid foo() {\n      struct XY xy(get());\n      return xy.x + xy.y;\n}"
Line 4901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4901 always 4901
  "" always ""
Line 4905
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4905 always 4905
  "struct S { int x; };\n\nvoid foo(const struct S s2) {\n    struct S s;\n    s.x = 3;\n    memcpy (&s, &s2, sizeof (S));\n}" always "struct S { int x; };\n\nvoid foo(const struct S s2) {\n    struct S s;\n    s.x = 3;\n    memcpy (&s, &s2, sizeof (S));\n}"
Line 4912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4912 always 4912
  "[test.cpp:5]: (style) Variable 's.x' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 's.x' is assigned a value that is never used.\n"
Line 4916
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4916 always 4916
  "struct Point { int x; int y; };\nPoint scale(Point *p);\n\nint foo() {\n    Point p;\n    p.x = 42;\n    return scale(&p).y;\n}" always "struct Point { int x; int y; };\nPoint scale(Point *p);\n\nint foo() {\n    Point p;\n    p.x = 42;\n    return scale(&p).y;\n}"
Line 4924
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4924 always 4924
  "" always ""
Line 4928
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4928 always 4928
  "struct S { bool& Ref(); };\n\nvoid Set() {\n    S s;\n    s.Ref() = true;\n}" always "struct S { bool& Ref(); };\n\nvoid Set() {\n    S s;\n    s.Ref() = true;\n}"
Line 4934
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4934 always 4934
  "" always ""
Line 4938
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4938 always 4938
  "int f() {\n    std::vector<std::string> Mode;\n    Info Block = {\n        {\n            { &Mode  },\n            { &Level }\n        }\n    };\n    Mode.resize(N);\n    for (int i = 0; i < N; ++i)\n        Mode[i] = \"abc\";\n    return Save(&Block);\n}\n" always "int f() {\n    std::vector<std::string> Mode;\n    Info Block = {\n        {\n            { &Mode  },\n            { &Level }\n        }\n    };\n    Mode.resize(N);\n    for (int i = 0; i < N; ++i)\n        Mode[i] = \"abc\";\n    return Save(&Block);\n}\n"
Line 4951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4951 always 4951
  "" always ""
Line 4958
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4958 always 4958
  "void f() {\n    struct X x[10];\n    x[0].a = 5;\n}" always "void f() {\n    struct X x[10];\n    x[0].a = 5;\n}"
Line 4962
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4962 always 4962
  "[test.cpp:3]: (style) Variable 'x[0].a' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'x[0].a' is assigned a value that is never used.\n"
Line 4967
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4967 always 4967
  "static short read(FILE *fp) {\n    typedef union { short s; unsigned char c[2]; } u;\n    u x;\n    x.c[0] = fgetuc(fp);\n    x.c[1] = fgetuc(fp);\n    return x.s;\n}" always "static short read(FILE *fp) {\n    typedef union { short s; unsigned char c[2]; } u;\n    u x;\n    x.c[0] = fgetuc(fp);\n    x.c[1] = fgetuc(fp);\n    return x.s;\n}"
Line 4974
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4974 always 4974
  "" always ""
Line 4978
  9 always 9
  = always "+-*/%&|^"
  "+-*/%&|^" always "+-*/%&|^"
Line 4979
  = {"+-*/%&|^",lifetime[Object]=(op)}
  op {"+-*/%&|^",lifetime[Object]=(op)}
  p possible {lifetime[Object]=(op),"+-*/%&|^"}
Line 4980
  "int main()\n{\n    int tmp = 10;\n    return 123 " always "int main()\n{\n    int tmp = 10;\n    return 123 "
Line 4983
  1 always 1
  p possible lifetime[Object]=(op)
  " tmp;\n}" always " tmp;\n}"
Line 4985
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4985 always 4985
  ( {lifetime[Object]=(code),!0}
Line 4986
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4986 always 4986
  "" always ""
Line 4991
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4991 always 4991
  "int main()\n{\n    int tmp = 10;\n    return ~tmp;\n}" always "int main()\n{\n    int tmp = 10;\n    return ~tmp;\n}"
Line 4996
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  4996 always 4996
  "" always ""
Line 5000
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5000 always 5000
  "int main()\n{\n    int tmp = 10;\n    if ( tmp )\n        return 1;\n    return 0;\n}" always "int main()\n{\n    int tmp = 10;\n    if ( tmp )\n        return 1;\n    return 0;\n}"
Line 5007
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5007 always 5007
  "" always ""
Line 5011
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5011 always 5011
  "int foo()\n{\n    int tmp1 = 1;\n    int tmp2 = 2;\n    int tmp3 = 3;\n    return tmp1 ? tmp2 : tmp3;\n}" always "int foo()\n{\n    int tmp1 = 1;\n    int tmp2 = 2;\n    int tmp3 = 3;\n    return tmp1 ? tmp2 : tmp3;\n}"
Line 5018
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5018 always 5018
  "" always ""
Line 5022
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5022 always 5022
  "int foo(int x)\n{\n    if (int y = x % 2)\n        return 2;\n    else\n        return 1;\n}" always "int foo(int x)\n{\n    if (int y = x % 2)\n        return 2;\n    else\n        return 1;\n}"
Line 5029
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5029 always 5029
  "[test.cpp:3]: (style) Variable 'y' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'y' is assigned a value that is never used.\n"
Line 5031
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5031 always 5031
  "int foo(int x)\n{\n    if (int y = x % 2)\n        return y;\n    else\n        return 1;\n}" always "int foo(int x)\n{\n    if (int y = x % 2)\n        return y;\n    else\n        return 1;\n}"
Line 5038
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5038 always 5038
  "" always ""
Line 5040
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5040 always 5040
  "int foo(int x)\n{\n    if (int y = x % 2)\n        return 2;\n    else\n        return y;\n}" always "int foo(int x)\n{\n    if (int y = x % 2)\n        return 2;\n    else\n        return y;\n}"
Line 5047
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5047 always 5047
  "" always ""
Line 5051
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5051 always 5051
  "void foo()\n{\n    int a = 1;\n    int b = 2;\n    a |= b;\n}" always "void foo()\n{\n    int a = 1;\n    int b = 2;\n    a |= b;\n}"
Line 5057
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5057 always 5057
  "[test.cpp:3]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 'a' is assigned a value that is never used.\n"
Line 5060
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5060 always 5060
  "void foo() {\n    int a = 1;\n    (b).x += a;\n}" always "void foo() {\n    int a = 1;\n    (b).x += a;\n}"
Line 5064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5064 always 5064
  "" always ""
Line 5066
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5066 always 5066
  "void foo() {\n    int a=1, b[10];\n    b[0] = x;\n    a += b[0];\n    return a;\n}" always "void foo() {\n    int a=1, b[10];\n    b[0] = x;\n    a += b[0];\n    return a;\n}"
Line 5072
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5072 always 5072
  "" always ""
Line 5074
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5074 always 5074
  "void f(int *start, int *stop) {\n  int length = *start - *stop;\n  if (length < 10000)\n    length = 10000;\n  *stop -= length;\n}" always "void f(int *start, int *stop) {\n  int length = *start - *stop;\n  if (length < 10000)\n    length = 10000;\n  *stop -= length;\n}"
Line 5080
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5080 always 5080
  "" always ""
Line 5082
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5082 always 5082
  "void f(int a) {\n  int x = 3;\n  a &= ~x;\n  return a;\n}" always "void f(int a) {\n  int x = 3;\n  a &= ~x;\n  return a;\n}"
Line 5087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5087 always 5087
  "" always ""
Line 5090
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5090 always 5090
  "void f() {\n  Fred fred;\n  int *a; a = b;\n  fred += a;\n}" always "void f() {\n  Fred fred;\n  int *a; a = b;\n  fred += a;\n}"
Line 5095
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5095 always 5095
  "[test.cpp:4]: (information) --check-library: Provide <type-checks><unusedvar> configuration for Fred\n" always "[test.cpp:4]: (information) --check-library: Provide <type-checks><unusedvar> configuration for Fred\n"
Line 5098
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5098 always 5098
  "void f(std::pair<int,int> x) {\n  std::pair<int,int> fred;\n  fred = x;\n}" always "void f(std::pair<int,int> x) {\n  std::pair<int,int> fred;\n  fred = x;\n}"
Line 5102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5102 always 5102
  "[test.cpp:3]: (style) Variable 'fred' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'fred' is assigned a value that is never used.\n"
Line 5106
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5106 always 5106
  "void foo()\n{\n    int a = 1;\n    for (;a;);\n}" always "void foo()\n{\n    int a = 1;\n    for (;a;);\n}"
Line 5111
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5111 always 5111
  "" always ""
Line 5113
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5113 always 5113
  "void foo() {\n    for (int i = 0; (pci = cdi_list_get(pciDevices, i)); i++)\n    {}\n}" always "void foo() {\n    for (int i = 0; (pci = cdi_list_get(pciDevices, i)); i++)\n    {}\n}"
Line 5117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5117 always 5117
  "" always ""
Line 5121
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5121 always 5121
  "void foo() {\n    int i = -1;\n    int a[] = {1,2,3};\n    FOREACH_X (int x, a) {\n        if (i==x) return x;\n        i = x;\n    }\n}" always "void foo() {\n    int i = -1;\n    int a[] = {1,2,3};\n    FOREACH_X (int x, a) {\n        if (i==x) return x;\n        i = x;\n    }\n}"
Line 5129
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5129 always 5129
  "" always ""
Line 5132
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5132 always 5132
  "void f() {\n  std::map<int,int> ints;\n  ints[0]= 1;\n  for each(std::pair<int,int> i in ints) { x += i.first; }\n}" always "void f() {\n  std::map<int,int> ints;\n  ints[0]= 1;\n  for each(std::pair<int,int> i in ints) { x += i.first; }\n}"
Line 5137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5137 always 5137
  "" always ""
Line 5141
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5141 always 5141
  "int foo()\n{\n    int var = 1;\n    return 1 >> var;\n}" always "int foo()\n{\n    int var = 1;\n    return 1 >> var;\n}"
Line 5146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5146 always 5146
  "" always ""
Line 5150
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5150 always 5150
  "int foo()\n{\n    QList<int *> ints;\n    ints << 1;\n}" always "int foo()\n{\n    QList<int *> ints;\n    ints << 1;\n}"
Line 5155
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5155 always 5155
  "" always ""
Line 5157
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5157 always 5157
  "int foo() {\n    int x;\n    x << 1;\n    return x;\n}" always "int foo() {\n    int x;\n    x << 1;\n    return x;\n}"
Line 5162
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5162 always 5162
  "" always ""
Line 5166
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5166 always 5166
  "int foo()\n{\n    int a = 1;\n    int b = static_cast<int>(a);\n    return b;\n}" always "int foo()\n{\n    int a = 1;\n    int b = static_cast<int>(a);\n    return b;\n}"
Line 5172
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5172 always 5172
  "" always ""
Line 5176
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5176 always 5176
  "int foo()\n{\n    class B : public A {\n        int a;\n        int f() { return a; }\n    } b;\n}" always "int foo()\n{\n    class B : public A {\n        int a;\n        int f() { return a; }\n    } b;\n}"
Line 5183
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5183 always 5183
  "" always ""
Line 5187
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5187 always 5187
  "int foo()\n{\n    bool test __attribute__((unused));\n}" always "int foo()\n{\n    bool test __attribute__((unused));\n}"
Line 5191
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5191 always 5191
  "" always ""
Line 5193
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5193 always 5193
  "int foo()\n{\n    bool test __attribute__((unused)) = true;\n}" always "int foo()\n{\n    bool test __attribute__((unused)) = true;\n}"
Line 5197
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5197 always 5197
  "" always ""
Line 5199
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5199 always 5199
  "int foo()\n{\n    bool __attribute__((unused)) test;\n}" always "int foo()\n{\n    bool __attribute__((unused)) test;\n}"
Line 5203
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5203 always 5203
  "" always ""
Line 5205
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5205 always 5205
  "int foo()\n{\n    bool __attribute__((unused)) test = true;\n}" always "int foo()\n{\n    bool __attribute__((unused)) test = true;\n}"
Line 5209
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5209 always 5209
  "" always ""
Line 5211
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5211 always 5211
  "int foo()\n{\n    bool test __attribute__((used));\n}" always "int foo()\n{\n    bool test __attribute__((used));\n}"
Line 5215
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5215 always 5215
  "" always ""
Line 5217
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5217 always 5217
  "int foo()\n{\n    bool __attribute__((used)) test;\n}" always "int foo()\n{\n    bool __attribute__((used)) test;\n}"
Line 5221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5221 always 5221
  "" always ""
Line 5225
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5225 always 5225
  "void check_dlsym(void*& h)\n{\n  typedef void (*function_type) (void);\n  function_type fn;\n  fn = reinterpret_cast<function_type>(dlsym(h, \"try_allocation\"));\n  fn();\n}" always "void check_dlsym(void*& h)\n{\n  typedef void (*function_type) (void);\n  function_type fn;\n  fn = reinterpret_cast<function_type>(dlsym(h, \"try_allocation\"));\n  fn();\n}"
Line 5232
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5232 always 5232
  "" always ""
Line 5236
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5236 always 5236
  "void foo()\n{\n    static int i;\n    static const int ci;\n    static std::string s;\n    static const std::string cs;\n}" always "void foo()\n{\n    static int i;\n    static const int ci;\n    static std::string s;\n    static const std::string cs;\n}"
Line 5243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5243 always 5243
  "[test.cpp:3]: (style) Unused variable: i\n[test.cpp:4]: (style) Unused variable: ci\n[test.cpp:5]: (style) Unused variable: s\n[test.cpp:6]: (style) Unused variable: cs\n" always "[test.cpp:3]: (style) Unused variable: i\n[test.cpp:4]: (style) Unused variable: ci\n[test.cpp:5]: (style) Unused variable: s\n[test.cpp:6]: (style) Unused variable: cs\n"
Line 5249
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5249 always 5249
  "void foo()\n{\n    static int i = 0;\n}" always "void foo()\n{\n    static int i = 0;\n}"
Line 5253
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5253 always 5253
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
  "" always ""
Line 5257
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5257 always 5257
  "void foo()\n{\n    static int i(0);\n}" always "void foo()\n{\n    static int i(0);\n}"
Line 5261
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5261 always 5261
  "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'i' is assigned a value that is never used.\n"
  "" always ""
Line 5265
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5265 always 5265
  "void foo()\n{\n    static int j = 0;\n    static int i(j);\n}" always "void foo()\n{\n    static int j = 0;\n    static int i(j);\n}"
Line 5270
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5270 always 5270
  "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n" always "[test.cpp:4]: (style) Variable 'i' is assigned a value that is never used.\n"
  "" always ""
Line 5274
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5274 always 5274
  "int * foo(int x)\n{\n    static int a[] = { 3, 4, 5, 6 };\n    static int b[] = { 4, 5, 6, 7 };\n    static int c[] = { 5, 6, 7, 8 };\n    b[1] = 1;\n    return x ? a : c;\n}" always "int * foo(int x)\n{\n    static int a[] = { 3, 4, 5, 6 };\n    static int b[] = { 4, 5, 6, 7 };\n    static int c[] = { 5, 6, 7, 8 };\n    b[1] = 1;\n    return x ? a : c;\n}"
Line 5282
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5282 always 5282
  "[test.cpp:6]: (style) Variable 'b' is assigned a value that is never used.\n" always "[test.cpp:6]: (style) Variable 'b' is assigned a value that is never used.\n"
  "" always ""
Line 5286
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5286 always 5286
  "void foo()\n{\n    static int i = 0;\n    if(i < foo())\n        i += 5;\n}" always "void foo()\n{\n    static int i = 0;\n    if(i < foo())\n        i += 5;\n}"
Line 5292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5292 always 5292
  "" always ""
Line 5294
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5294 always 5294
  "void foo() {\n    static int x = 0;\n    print(x);\n    if(x > 5)\n        x = 0;\n    else\n        x++;\n}" always "void foo() {\n    static int x = 0;\n    print(x);\n    if(x > 5)\n        x = 0;\n    else\n        x++;\n}"
Line 5302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5302 always 5302
  "" always ""
Line 5304
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5304 always 5304
  "void foo(int value) {\n    static int array[16] = {0};\n    if(array[value]) {}\n    array[value] = 1;\n}" always "void foo(int value) {\n    static int array[16] = {0};\n    if(array[value]) {}\n    array[value] = 1;\n}"
Line 5309
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5309 always 5309
  "" always ""
Line 5313
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5313 always 5313
  "void foo() {\n    extern int i;\n    i = 0;\n}" always "void foo() {\n    extern int i;\n    i = 0;\n}"
Line 5317
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5317 always 5317
  "" always ""
Line 5321
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5321 always 5321
  "void foo()\n{\n    void* ptr = malloc(16);\n    free(ptr);\n}" always "void foo()\n{\n    void* ptr = malloc(16);\n    free(ptr);\n}"
Line 5326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5326 always 5326
  "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5328
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5328 always 5328
  "void foo()\n{\n    char* ptr = new char[16];\n    delete[] ptr;\n}" always "void foo()\n{\n    char* ptr = new char[16];\n    delete[] ptr;\n}"
Line 5333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5333 always 5333
  "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5337
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5337 always 5337
  "void foo()\n{\n    char* ptr = new ( nothrow ) char[16];\n    delete[] ptr;\n}" always "void foo()\n{\n    char* ptr = new ( nothrow ) char[16];\n    delete[] ptr;\n}"
Line 5342
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5342 always 5342
  "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5344
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5344 always 5344
  "void foo()\n{\n    char* ptr = new ( std::nothrow ) char[16];\n    delete[] ptr;\n}" always "void foo()\n{\n    char* ptr = new ( std::nothrow ) char[16];\n    delete[] ptr;\n}"
Line 5349
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5349 always 5349
  "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5353
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5353 always 5353
  "void foo()\n{\n    char* ptr = new char;\n    delete ptr;\n}" always "void foo()\n{\n    char* ptr = new char;\n    delete ptr;\n}"
Line 5358
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5358 always 5358
  "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:3]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5360
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5360 always 5360
  "void foo()\n{\n    void* ptr = malloc(16);\n    ptr[0] = 123;\n    free(ptr);\n}" always "void foo()\n{\n    void* ptr = malloc(16);\n    ptr[0] = 123;\n    free(ptr);\n}"
Line 5366
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5366 always 5366
  "" always ""
Line 5368
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5368 always 5368
  "void foo()\n{\n    char* ptr = new char[16];\n    ptr[0] = 123;\n    delete[] ptr;\n}" always "void foo()\n{\n    char* ptr = new char[16];\n    ptr[0] = 123;\n    delete[] ptr;\n}"
Line 5374
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5374 always 5374
  "" always ""
Line 5376
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5376 always 5376
  "void foo()\n{\n    Fred* fred = new Fred;\n    std::cout << \"test\" << std::endl;\n    delete fred;\n}" always "void foo()\n{\n    Fred* fred = new Fred;\n    std::cout << \"test\" << std::endl;\n    delete fred;\n}"
Line 5382
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5382 always 5382
  "" always ""
Line 5384
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5384 always 5384
  "struct Fred { int a; };\nvoid foo()\n{\n    Fred* fred = new Fred;\n    std::cout << \"test\" << std::endl;\n    delete fred;\n}" always "struct Fred { int a; };\nvoid foo()\n{\n    Fred* fred = new Fred;\n    std::cout << \"test\" << std::endl;\n    delete fred;\n}"
Line 5391
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5391 always 5391
  "[test.cpp:4]: (style) Variable 'fred' is allocated memory that is never used.\n" always "[test.cpp:4]: (style) Variable 'fred' is allocated memory that is never used.\n"
Line 5393
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5393 always 5393
  "struct Fred { int a; Fred() : a(0) {} };\nvoid foo()\n{\n    Fred* fred = new Fred;\n    std::cout << \"test\" << std::endl;\n    delete fred;\n}" always "struct Fred { int a; Fred() : a(0) {} };\nvoid foo()\n{\n    Fred* fred = new Fred;\n    std::cout << \"test\" << std::endl;\n    delete fred;\n}"
Line 5400
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5400 always 5400
  "[test.cpp:4]: (style) Variable 'fred' is allocated memory that is never used.\n" always "[test.cpp:4]: (style) Variable 'fred' is allocated memory that is never used.\n"
Line 5402
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5402 always 5402
  "void foo()\n{\n    Fred* fred = malloc(sizeof(Fred));\n    std::cout << \"test\" << std::endl;\n    free(fred);\n}" always "void foo()\n{\n    Fred* fred = malloc(sizeof(Fred));\n    std::cout << \"test\" << std::endl;\n    free(fred);\n}"
Line 5408
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5408 always 5408
  "[test.cpp:3]: (style) Variable 'fred' is allocated memory that is never used.\n" always "[test.cpp:3]: (style) Variable 'fred' is allocated memory that is never used.\n"
Line 5411
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5411 always 5411
  "void foo()\n{\n    char* ptr = names[i];\n    delete[] ptr;\n}" always "void foo()\n{\n    char* ptr = names[i];\n    delete[] ptr;\n}"
Line 5416
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5416 always 5416
  "" always ""
Line 5420
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5420 always 5420
  "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    free(ptr);\n}" always "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    free(ptr);\n}"
Line 5426
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5426 always 5426
  "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5428
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5428 always 5428
  "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    ptr->i = 0;\n    free(ptr);\n}" always "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    ptr->i = 0;\n    free(ptr);\n}"
Line 5435
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5435 always 5435
  "" always ""
Line 5437
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5437 always 5437
  "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    free(ptr);\n}" always "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    free(ptr);\n}"
Line 5443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5443 always 5443
  "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5445
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5445 always 5445
  "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    ptr->i = 0;\n    free(ptr);\n}" always "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    ptr->i = 0;\n    free(ptr);\n}"
Line 5452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5452 always 5452
  "" always ""
Line 5454
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5454 always 5454
  "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    delete ptr;\n}" always "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    delete ptr;\n}"
Line 5460
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5460 always 5460
  "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5464
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5464 always 5464
  "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new (nothrow ) Fred();\n    delete ptr;\n}" always "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new (nothrow ) Fred();\n    delete ptr;\n}"
Line 5470
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5470 always 5470
  "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5472
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5472 always 5472
  "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new (std::nothrow) Fred();\n    delete ptr;\n}" always "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new (std::nothrow) Fred();\n    delete ptr;\n}"
Line 5478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5478 always 5478
  "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5482
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5482 always 5482
  "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    ptr->i = 0;\n    delete ptr;\n}" always "struct Fred { int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    ptr->i = 0;\n    delete ptr;\n}"
Line 5489
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5489 always 5489
  "" always ""
Line 5491
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5491 always 5491
  "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = new Fred();\n    delete ptr;\n}" always "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = new Fred();\n    delete ptr;\n}"
Line 5497
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5497 always 5497
  "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5499
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5499 always 5499
  "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = new Fred();\n    ptr->i = 0;\n    free(ptr);\n}" always "struct Fred { int i; };\nvoid foo()\n{\n    struct Fred* ptr = new Fred();\n    ptr->i = 0;\n    free(ptr);\n}"
Line 5506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5506 always 5506
  "" always ""
Line 5508
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5508 always 5508
  "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    free(ptr);\n}" always "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    free(ptr);\n}"
Line 5514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5514 always 5514
  "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5516
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5516 always 5516
  "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    ptr->i = 0;\n    free(ptr);\n}" always "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = (Fred*)malloc(sizeof(Fred));\n    ptr->i = 0;\n    free(ptr);\n}"
Line 5523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5523 always 5523
  "" always ""
Line 5525
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5525 always 5525
  "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    delete ptr;\n}" always "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    delete ptr;\n}"
Line 5531
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5531 always 5531
  "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n" always "[test.cpp:4]: (style) Variable 'ptr' is allocated memory that is never used.\n"
Line 5533
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5533 always 5533
  "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    ptr->i = 0;\n    delete ptr;\n}" always "class Fred { public: int i; };\nvoid foo()\n{\n    Fred* ptr = new Fred();\n    ptr->i = 0;\n    delete ptr;\n}"
Line 5540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5540 always 5540
  "" always ""
Line 5545
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5545 always 5545
  "void foo() {\n    int* data = new int[100];\n    int* p = data;\n    for ( int i = 0; i < 10; ++i )\n        p++;\n}" always "void foo() {\n    int* data = new int[100];\n    int* p = data;\n    for ( int i = 0; i < 10; ++i )\n        p++;\n}"
Line 5551
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5551 always 5551
  "[test.cpp:5]: (style) Variable 'p' is modified but its new value is never used.\n" always "[test.cpp:5]: (style) Variable 'p' is modified but its new value is never used.\n"
  "" always ""
Line 5557
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5557 always 5557
  "void foo() {\n    int p[5];\n    *p = 0;\n}" always "void foo() {\n    int p[5];\n    *p = 0;\n}"
Line 5561
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5561 always 5561
  "" always ""
Line 5565
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5565 always 5565
  "int foo() {\n    int p[5][5];\n    p[0][0] = 0;\n    return p[0][0];\n}" always "int foo() {\n    int p[5][5];\n    p[0][0] = 0;\n    return p[0][0];\n}"
Line 5570
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5570 always 5570
  "" always ""
Line 5574
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5574 always 5574
  "int foo() {\n    int p[5][5];\n    *((int*)p[0]) = 0;\n    return p[0][0];\n}" always "int foo() {\n    int p[5][5];\n    *((int*)p[0]) = 0;\n    return p[0][0];\n}"
Line 5579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5579 always 5579
  "" always ""
Line 5583
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5583 always 5583
  "void foo() {\n    int p[1];\n    int *pp[0];\n    p[0] = 1;\n    *pp[0] = p[0];\n}" always "void foo() {\n    int p[1];\n    int *pp[0];\n    p[0] = 1;\n    *pp[0] = p[0];\n}"
Line 5589
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5589 always 5589
  "" always ""
Line 5593
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5593 always 5593
  "int foo() {\n    int p[5][5];\n    dostuff(*p);\n}" always "int foo() {\n    int p[5][5];\n    dostuff(*p);\n}"
Line 5597
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5597 always 5597
  "" always ""
Line 5601
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5601 always 5601
  "void foo() {\n    std::string s;\n}" always "void foo() {\n    std::string s;\n}"
Line 5604
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5604 always 5604
  "[test.cpp:2]: (style) Unused variable: s\n" always "[test.cpp:2]: (style) Unused variable: s\n"
Line 5606
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5606 always 5606
  "void foo() {\n    std::string s;\n    s = \"foo\";\n}" always "void foo() {\n    std::string s;\n    s = \"foo\";\n}"
Line 5610
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5610 always 5610
  "[test.cpp:3]: (style) Variable 's' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 's' is assigned a value that is never used.\n"
Line 5612
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5612 always 5612
  "void foo() {\n    std::string s = \"foo\";\n}" always "void foo() {\n    std::string s = \"foo\";\n}"
Line 5615
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5615 always 5615
  "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n"
Line 5617
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5617 always 5617
  "void foo() {\n    const std::string s = \"foo\";\n}" always "void foo() {\n    const std::string s = \"foo\";\n}"
Line 5620
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5620 always 5620
  "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n"
Line 5622
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5622 always 5622
  "std::string foo() {\n    std::string s;\n    return s;\n}" always "std::string foo() {\n    std::string s;\n    return s;\n}"
Line 5626
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5626 always 5626
  "" always ""
Line 5628
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5628 always 5628
  "std::string foo() {\n    std::string s = \"foo\";\n    return s;\n}" always "std::string foo() {\n    std::string s = \"foo\";\n    return s;\n}"
Line 5632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5632 always 5632
  "" always ""
Line 5634
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5634 always 5634
  "void f() {\n    std::string s(\"foo\");\n}" always "void f() {\n    std::string s(\"foo\");\n}"
Line 5637
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5637 always 5637
  "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n"
Line 5639
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5639 always 5639
  "void f() {\n    std::string s{ \"foo\" };\n}" always "void f() {\n    std::string s{ \"foo\" };\n}"
Line 5642
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5642 always 5642
  "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 's' is assigned a value that is never used.\n"
Line 5646
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5646 always 5646
  "void foo() {\n    std::string s;\n    int i;\n}" always "void foo() {\n    std::string s;\n    int i;\n}"
Line 5650
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5650 always 5650
  "[test.cpp:2]: (style) Unused variable: s\n[test.cpp:3]: (style) Unused variable: i\n" always "[test.cpp:2]: (style) Unused variable: s\n[test.cpp:3]: (style) Unused variable: i\n"
Line 5655
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5655 always 5655
  "void foo() {\n    const bool b = true;\n}" always "void foo() {\n    const bool b = true;\n}"
Line 5658
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5658 always 5658
  "[test.cpp:2]: (style) Variable 'b' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'b' is assigned a value that is never used.\n"
Line 5662
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5662 always 5662
  "void foo() {\n    const int N = 10;\n    struct X { int x[N]; };\n}" always "void foo() {\n    const int N = 10;\n    struct X { int x[N]; };\n}"
Line 5666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5666 always 5666
  "" always ""
Line 5670
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5670 always 5670
  "void foo() {\n    const int MyInt = 1;\n    class bar {\n      public:\n        bool operator()(const int &uIndexA, const int &uIndexB) const {\n            return true;\n        }\n        bar() {}\n    };\n    return MyInt;\n}" always "void foo() {\n    const int MyInt = 1;\n    class bar {\n      public:\n        bool operator()(const int &uIndexA, const int &uIndexB) const {\n            return true;\n        }\n        bar() {}\n    };\n    return MyInt;\n}"
Line 5681
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5681 always 5681
  "" always ""
Line 5685
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5685 always 5685
  "int main() {\n    [[maybe_unused]] int x;\n}" always "int main() {\n    [[maybe_unused]] int x;\n}"
Line 5688
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5688 always 5688
  "" always ""
Line 5690
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5690 always 5690
  "[[nodiscard]] int getX() { return 4; }\nint main() {\n    [[maybe_unused]] int x = getX();\n}" always "[[nodiscard]] int getX() { return 4; }\nint main() {\n    [[maybe_unused]] int x = getX();\n}"
Line 5694
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5694 always 5694
  "" always ""
Line 5696
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5696 always 5696
  "[[nodiscard]] int getX() { return 4; }\nint main() {\n    [[maybe_unused]] int x = getX();\n    x = getX();\n}" always "[[nodiscard]] int getX() { return 4; }\nint main() {\n    [[maybe_unused]] int x = getX();\n    x = getX();\n}"
Line 5701
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5701 always 5701
  "" always ""
Line 5703
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5703 always 5703
  "[[nodiscard]] int getX() { return 4; }\nint main() {\n    [[maybe_unused]] int x = getX();\n    x = getX();\n    std::cout << x;\n}" always "[[nodiscard]] int getX() { return 4; }\nint main() {\n    [[maybe_unused]] int x = getX();\n    x = getX();\n    std::cout << x;\n}"
Line 5709
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5709 always 5709
  "" always ""
Line 5711
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5711 always 5711
  "int main() {\n    [[maybe_unused]] const int x = getX();\n}" always "int main() {\n    [[maybe_unused]] const int x = getX();\n}"
Line 5714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5714 always 5714
  "" always ""
Line 5716
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5716 always 5716
  "int main() {\n    [[maybe_unused]] const int& x = getX();\n}" always "int main() {\n    [[maybe_unused]] const int& x = getX();\n}"
Line 5719
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5719 always 5719
  "" always ""
Line 5721
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5721 always 5721
  "int main() {\n    [[maybe_unused]] const int* x = getX();\n}" always "int main() {\n    [[maybe_unused]] const int* x = getX();\n}"
Line 5724
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5724 always 5724
  "" always ""
Line 5726
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5726 always 5726
  "int main() {\n    [[maybe_unused]] int& x = getX();\n}" always "int main() {\n    [[maybe_unused]] int& x = getX();\n}"
Line 5729
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5729 always 5729
  "" always ""
Line 5731
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5731 always 5731
  "int main() {\n    [[maybe_unused]] int* x = getX();\n}" always "int main() {\n    [[maybe_unused]] int* x = getX();\n}"
Line 5734
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5734 always 5734
  "" always ""
Line 5736
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5736 always 5736
  "int main() {\n    [[maybe_unused]] auto x = getX();\n}" always "int main() {\n    [[maybe_unused]] auto x = getX();\n}"
Line 5739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5739 always 5739
  "" always ""
Line 5741
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5741 always 5741
  "int main() {\n    [[maybe_unused]] auto&& x = getX();\n}" always "int main() {\n    [[maybe_unused]] auto&& x = getX();\n}"
Line 5744
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5744 always 5744
  "" always ""
Line 5746
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5746 always 5746
  "int main() {\n    [[maybe_unused]] int x[] = getX();\n}" always "int main() {\n    [[maybe_unused]] int x[] = getX();\n}"
Line 5749
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5749 always 5749
  "" always ""
Line 5751
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5751 always 5751
  "int main() {\n    [[maybe_unused]] constexpr volatile static int x = 1;\n}" always "int main() {\n    [[maybe_unused]] constexpr volatile static int x = 1;\n}"
Line 5754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5754 always 5754
  "" always ""
Line 5756
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5756 always 5756
  "[[maybe_unused]] inline int x = 1;" always "[[maybe_unused]] inline int x = 1;"
Line 5757
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5757 always 5757
  "" always ""
Line 5759
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5759 always 5759
  "int main() {\n    [[maybe_unused]] [[anotherattribute]] const int* = 1;\n}" always "int main() {\n    [[maybe_unused]] [[anotherattribute]] const int* = 1;\n}"
Line 5762
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5762 always 5762
  "" always ""
Line 5766
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5766 always 5766
  "void foo() {\n    try {}    catch(Foo& bar) {}\n}" always "void foo() {\n    try {}    catch(Foo& bar) {}\n}"
Line 5770
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5770 always 5770
  "" always ""
Line 5776
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5776 always 5776
  "void f() {\n    std::string x = foo();\n}" always "void f() {\n    std::string x = foo();\n}"
Line 5779
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5779 always 5779
  "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 5781
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5781 always 5781
  "void f() {\n    std::vector<int> x;\n}" always "void f() {\n    std::vector<int> x;\n}"
Line 5784
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5784 always 5784
  "[test.cpp:2]: (style) Unused variable: x\n" always "[test.cpp:2]: (style) Unused variable: x\n"
Line 5786
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5786 always 5786
  "void f() {\n    std::vector<int> x(100);\n}" always "void f() {\n    std::vector<int> x(100);\n}"
Line 5789
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5789 always 5789
  "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'x' is assigned a value that is never used.\n"
Line 5791
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5791 always 5791
  "void f() {\n    std::vector<MyClass> x;\n}" always "void f() {\n    std::vector<MyClass> x;\n}"
Line 5794
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5794 always 5794
  "[test.cpp:2]: (style) Unused variable: x\n" always "[test.cpp:2]: (style) Unused variable: x\n"
Line 5796
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5796 always 5796
  "void f() {\n    std::lock_guard<MyClass> lock(mutex_);\n}" always "void f() {\n    std::lock_guard<MyClass> lock(mutex_);\n}"
Line 5799
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5799 always 5799
  "" always ""
Line 5801
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5801 always 5801
  "void f() {\n    pLocker = std::shared_ptr<jfxLocker>(new jfxLocker(m_lock, true));\n}" always "void f() {\n    pLocker = std::shared_ptr<jfxLocker>(new jfxLocker(m_lock, true));\n}"
Line 5804
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5804 always 5804
  "" always ""
Line 5806
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5806 always 5806
  "void f() {\n    std::mutex m;\n    std::unique_lock<std::mutex> lock(m);\n}" always "void f() {\n    std::mutex m;\n    std::unique_lock<std::mutex> lock(m);\n}"
Line 5810
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5810 always 5810
  "" always ""
Line 5812
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5812 always 5812
  "void f() {\n    const std::pair<std::string, std::string> p(\"a\", \"b\");\n    std::pair<std::string, std::string> q{\"a\", \"b\" };\n    auto r = std::pair<std::string, std::string>(\"a\", \"b\");\n    auto s = std::pair<std::string, std::string>{ \"a\", \"b\" };\n}\n" always "void f() {\n    const std::pair<std::string, std::string> p(\"a\", \"b\");\n    std::pair<std::string, std::string> q{\"a\", \"b\" };\n    auto r = std::pair<std::string, std::string>(\"a\", \"b\");\n    auto s = std::pair<std::string, std::string>{ \"a\", \"b\" };\n}\n"
Line 5818
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5818 always 5818
  "[test.cpp:2]: (style) Variable 'p' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'q' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'r' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'p' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'q' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 'r' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 's' is assigned a value that is never used.\n"
  "[test.cpp:2]: (style) Variable 'p' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'q' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'p' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 'q' is assigned a value that is never used.\n"
Line 5828
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5828 always 5828
  "void f() {\n    Fred f;\n}" always "void f() {\n    Fred f;\n}"
Line 5831
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5831 always 5831
  "" always ""
Line 5833
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5833 always 5833
  "class C { int x; };\nvoid f() {\n    C c;\n}" always "class C { int x; };\nvoid f() {\n    C c;\n}"
Line 5837
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5837 always 5837
  "[test.cpp:3]: (style) Unused variable: c\n" always "[test.cpp:3]: (style) Unused variable: c\n"
Line 5839
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5839 always 5839
  "class ExampleClass\n{\npublic:\n   ExampleClass(int xScale, int yScale, int x, int y)\n      : XScale(xScale)\n      , YScale(yScale)\n      , X(x)\n      , Y(y)\n   {\n   }\n \n   int XScale;\n   int YScale;\n   int X;\n   int Y;\n};\n \nvoid foo()\n{\n   ExampleClass ex(1, 2, 3, 4);\n}" always "class ExampleClass\n{\npublic:\n   ExampleClass(int xScale, int yScale, int x, int y)\n      : XScale(xScale)\n      , YScale(yScale)\n      , X(x)\n      , Y(y)\n   {\n   }\n \n   int XScale;\n   int YScale;\n   int X;\n   int Y;\n};\n \nvoid foo()\n{\n   ExampleClass ex(1, 2, 3, 4);\n}"
Line 5860
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5860 always 5860
  "[test.cpp:20]: (style) Variable 'ex' is assigned a value that is never used.\n" always "[test.cpp:20]: (style) Variable 'ex' is assigned a value that is never used.\n"
Line 5862
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5862 always 5862
  "class C { public: C(int); ~C(); };\nvoid f() {\n    C c(12);\n}" always "class C { public: C(int); ~C(); };\nvoid f() {\n    C c(12);\n}"
Line 5866
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5866 always 5866
  "" always ""
Line 5871
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5871 always 5871
  "static int s_i = 0;\n\nclass A {\npublic:\n    ~A() {\n        ++s_i;\n    }\n};\n\nstatic void func() {\n    auto a = std::make_shared<A>();\n    auto a2 = std::unique_ptr<A>(new A());\n}\n" always "static int s_i = 0;\n\nclass A {\npublic:\n    ~A() {\n        ++s_i;\n    }\n};\n\nstatic void func() {\n    auto a = std::make_shared<A>();\n    auto a2 = std::unique_ptr<A>(new A());\n}\n"
Line 5884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5884 always 5884
  "" always ""
Line 5886
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5886 always 5886
  "class A {\npublic:\n    std::string x;\n};\n\nstatic void func() {\n    auto a = std::make_shared<A>();\n    auto a2 = std::unique_ptr<A>(new A());\n}\n" always "class A {\npublic:\n    std::string x;\n};\n\nstatic void func() {\n    auto a = std::make_shared<A>();\n    auto a2 = std::unique_ptr<A>(new A());\n}\n"
Line 5895
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5895 always 5895
  "[test.cpp:7]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:8]: (style) Variable 'a2' is assigned a value that is never used.\n" always "[test.cpp:7]: (style) Variable 'a' is assigned a value that is never used.\n[test.cpp:8]: (style) Variable 'a2' is assigned a value that is never used.\n"
Line 5901
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5901 always 5901
  "void f() {\n    bool x = foo();\n    if (NOT x) { }\n}" always "void f() {\n    bool x = foo();\n    if (NOT x) { }\n}"
Line 5905
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5905 always 5905
  "" always ""
Line 5909
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5909 always 5909
  "int main() {\n    unsigned flag = 0x1 << i;\n    if (m_errorflags & flag) {\n        return 1;\n    }\n}" always "int main() {\n    unsigned flag = 0x1 << i;\n    if (m_errorflags & flag) {\n        return 1;\n    }\n}"
Line 5915
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5915 always 5915
  "" always ""
Line 5919
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5919 always 5919
  "const char *f(int x) {\n    const char a[] = \"abc\";\n    const char def[] = \"def\";\n    const char *ptr;\n    switch(x) {\n        case 1:  ptr=a; break;\n        default: ptr=def; break;\n    }\n    return ptr;\n}" always "const char *f(int x) {\n    const char a[] = \"abc\";\n    const char def[] = \"def\";\n    const char *ptr;\n    switch(x) {\n        case 1:  ptr=a; break;\n        default: ptr=def; break;\n    }\n    return ptr;\n}"
Line 5929
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5929 always 5929
  "" always ""
Line 5931
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5931 always 5931
  "void x() {\n    unsigned char* pcOctet = NULL;\n    float fValeur;\n    switch (pnodeCurrent->left.pnode->usLen) {\n    case 4:\n        fValeur = (float)pevalDataLeft->data.fd;\n        pcOctet = (unsigned char*)&fValeur;\n        break;\n    case 8:\n        pcOctet = (unsigned char*)&pevalDataLeft->data.fd;\n        break;\n    }\n    for (iIndice = 1; iIndice <= (pnodeCurrent->usLen / 2); iIndice++) {\n        *pcData = gacHexChar[(*pcOctet >> 4) & 0x0F];\n    }\n}" always "void x() {\n    unsigned char* pcOctet = NULL;\n    float fValeur;\n    switch (pnodeCurrent->left.pnode->usLen) {\n    case 4:\n        fValeur = (float)pevalDataLeft->data.fd;\n        pcOctet = (unsigned char*)&fValeur;\n        break;\n    case 8:\n        pcOctet = (unsigned char*)&pevalDataLeft->data.fd;\n        break;\n    }\n    for (iIndice = 1; iIndice <= (pnodeCurrent->usLen / 2); iIndice++) {\n        *pcData = gacHexChar[(*pcOctet >> 4) & 0x0F];\n    }\n}"
Line 5947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5947 always 5947
  "" always ""
Line 5951
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5951 always 5951
  "void f() {\n    char *p = malloc(100);\n    foo(p);\n    free(p);\n    p = NULL;\n}" always "void f() {\n    char *p = malloc(100);\n    foo(p);\n    free(p);\n    p = NULL;\n}"
Line 5957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5957 always 5957
  "" always ""
Line 5959
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5959 always 5959
  "void f(Foo *p) {\n    free(p);\n    p = (Foo *)NULL;\n}" always "void f(Foo *p) {\n    free(p);\n    p = (Foo *)NULL;\n}"
Line 5963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5963 always 5963
  "" always ""
Line 5965
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5965 always 5965
  "void f() {\n    std::string s1{ nullptr };\n    std::string s2{ NULL };\n    std::string s4(nullptr);\n    std::string s5(NULL);\n}\nstruct A { A(void*) {} };\nstatic void g() {\n    A a1{ nullptr };\n    A a2{ NULL };\n    A a4(nullptr);\n    A a5(NULL);\n}\n" always "void f() {\n    std::string s1{ nullptr };\n    std::string s2{ NULL };\n    std::string s4(nullptr);\n    std::string s5(NULL);\n}\nstruct A { A(void*) {} };\nstatic void g() {\n    A a1{ nullptr };\n    A a2{ NULL };\n    A a4(nullptr);\n    A a5(NULL);\n}\n"
Line 5978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5978 always 5978
  "[test.cpp:2]: (style) Variable 's1' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 's2' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 's4' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 's5' is assigned a value that is never used.\n[test.cpp:9]: (style) Variable 'a1' is assigned a value that is never used.\n[test.cpp:10]: (style) Variable 'a2' is assigned a value that is never used.\n[test.cpp:11]: (style) Variable 'a4' is assigned a value that is never used.\n[test.cpp:12]: (style) Variable 'a5' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 's1' is assigned a value that is never used.\n[test.cpp:3]: (style) Variable 's2' is assigned a value that is never used.\n[test.cpp:4]: (style) Variable 's4' is assigned a value that is never used.\n[test.cpp:5]: (style) Variable 's5' is assigned a value that is never used.\n[test.cpp:9]: (style) Variable 'a1' is assigned a value that is never used.\n[test.cpp:10]: (style) Variable 'a2' is assigned a value that is never used.\n[test.cpp:11]: (style) Variable 'a4' is assigned a value that is never used.\n[test.cpp:12]: (style) Variable 'a5' is assigned a value that is never used.\n"
Line 5991
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  5991 always 5991
  "bool f(const int &i) {\n int X = i;\nlabel:\n if ( X == 0 ) {\n    X -= 101;\n    return true;\n }\n if ( X < 1001 )  {\n    X += 1;\n    goto label;\n }\n return false;\n}" always "bool f(const int &i) {\n int X = i;\nlabel:\n if ( X == 0 ) {\n    X -= 101;\n    return true;\n }\n if ( X < 1001 )  {\n    X += 1;\n    goto label;\n }\n return false;\n}"
Line 6004
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6004 always 6004
  "[test.cpp:5]: (style) Variable 'X' is assigned a value that is never used.\n" always "[test.cpp:5]: (style) Variable 'X' is assigned a value that is never used.\n"
Line 6007
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6007 always 6007
  "int f() {\n int i,j=0;\n start:\n i=j;\n i++;\n j=i;\n if (i<3)\n     goto start;\n return i;\n}" always "int f() {\n int i,j=0;\n start:\n i=j;\n i++;\n j=i;\n if (i<3)\n     goto start;\n return i;\n}"
Line 6017
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6017 always 6017
  "" always ""
Line 6021
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6021 always 6021
  "int foo() {\n    auto f = []{return 1};\n    return f();\n}" always "int foo() {\n    auto f = []{return 1};\n    return f();\n}"
Line 6025
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6025 always 6025
  "" always ""
Line 6027
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6027 always 6027
  "int foo() {\n    auto f = []{return 1};\n    auto g = []{return 1};\n    return f() + g();\n}" always "int foo() {\n    auto f = []{return 1};\n    auto g = []{return 1};\n    return f() + g();\n}"
Line 6032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6032 always 6032
  "" always ""
Line 6034
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6034 always 6034
  "void foo(std::vector<int>& v) {\n    int n = 0;\n    std::generate(v.begin(), v.end(), [&n] {\n        int r = n;\n        n += 2;\n        return r;\n    });\n}" always "void foo(std::vector<int>& v) {\n    int n = 0;\n    std::generate(v.begin(), v.end(), [&n] {\n        int r = n;\n        n += 2;\n        return r;\n    });\n}"
Line 6042
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6042 always 6042
  "" always ""
Line 6047
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6047 always 6047
  "void f() {\n    std::map<int, double> m;\n    m[2] = 2.0;\n    for (auto& [k, v] : m) {}\n}\n" always "void f() {\n    std::map<int, double> m;\n    m[2] = 2.0;\n    for (auto& [k, v] : m) {}\n}\n"
Line 6052
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6052 always 6052
  "" always ""
Line 6056
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6056 always 6056
  "void foo() {\n    int buf[6];\n    Data data(buf);\n}" always "void foo() {\n    int buf[6];\n    Data data(buf);\n}"
Line 6060
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6060 always 6060
  "[test.cpp:3]: (information) --check-library: Provide <type-checks><unusedvar> configuration for Data\n" always "[test.cpp:3]: (information) --check-library: Provide <type-checks><unusedvar> configuration for Data\n"
Line 6065
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6065 always 6065
  "void foo() {\n    int myNewValue{ 3u };\n    myManager.theDummyTable.addRow(UnsignedIndexValue{ myNewValue }, DummyRowData{ false });\n}" always "void foo() {\n    int myNewValue{ 3u };\n    myManager.theDummyTable.addRow(UnsignedIndexValue{ myNewValue }, DummyRowData{ false });\n}"
Line 6069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6069 always 6069
  "" always ""
Line 6074
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6074 always 6074
  "void reset() {\n    for (auto & e : array)\n        e = 0;\n}" always "void reset() {\n    for (auto & e : array)\n        e = 0;\n}"
Line 6078
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6078 always 6078
  "" always ""
Line 6082
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6082 always 6082
  "void foo() {\n  int a = 0;\n  do {\n    dostuff(a);\n  } while((a + = x) < 30);\n}" always "void foo() {\n  int a = 0;\n  do {\n    dostuff(a);\n  } while((a + = x) < 30);\n}"
Line 6088
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6088 always 6088
  "" always ""
Line 6090
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6090 always 6090
  "int foo() {\n    int var = 1;\n    while (var = var >> 1) { }\n}" always "int foo() {\n    int var = 1;\n    while (var = var >> 1) { }\n}"
Line 6094
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6094 always 6094
  "" always ""
Line 6098
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6098 always 6098
  "template<int A> void f() {}\nvoid foo() {\n  const int x = 0;\n  f<x>();\n}" always "template<int A> void f() {}\nvoid foo() {\n  const int x = 0;\n  f<x>();\n}"
Line 6103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6103 always 6103
  "" always ""
Line 6105
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6105 always 6105
  "void f() {\n  constexpr std::size_t ArraySize(5);\n  std::array<int, ArraySize> X; X.dostuff();\n}" always "void f() {\n  constexpr std::size_t ArraySize(5);\n  std::array<int, ArraySize> X; X.dostuff();\n}"
Line 6109
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6109 always 6109
  "" always ""
Line 6111
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6111 always 6111
  "void f() {\n    std::array<int, 1> a;\n}\n" always "void f() {\n    std::array<int, 1> a;\n}\n"
Line 6114
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6114 always 6114
  "[test.cpp:2]: (style) Unused variable: a\n" always "[test.cpp:2]: (style) Unused variable: a\n"
Line 6116
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6116 always 6116
  "class A {};\n    namespace std {\n    template<>\n    struct hash<A> {};\n}\nchar f() {\n    std::string hash = \"-\";\n    return hash[0];\n}\n" always "class A {};\n    namespace std {\n    template<>\n    struct hash<A> {};\n}\nchar f() {\n    std::string hash = \"-\";\n    return hash[0];\n}\n"
Line 6125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6125 always 6125
  "" always ""
Line 6129
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6129 always 6129
  "int main() {\n    void(*funcPtr)(void)(x);\n}" always "int main() {\n    void(*funcPtr)(void)(x);\n}"
Line 6132
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6132 always 6132
  "[test.cpp:2]: (style) Variable 'funcPtr' is assigned a value never used.\n" always "[test.cpp:2]: (style) Variable 'funcPtr' is assigned a value never used.\n"
  "" always ""
Line 6134
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6134 always 6134
  "int main() {\n    void(*funcPtr)(void);\n}" always "int main() {\n    void(*funcPtr)(void);\n}"
Line 6137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6137 always 6137
  "[test.cpp:2]: (style) Unused variable: funcPtr\n" always "[test.cpp:2]: (style) Unused variable: funcPtr\n"
Line 6139
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6139 always 6139
  "int main() {\n    void(*funcPtr)(void)(x);\n    funcPtr();\n}" always "int main() {\n    void(*funcPtr)(void)(x);\n    funcPtr();\n}"
Line 6143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6143 always 6143
  "" always ""
Line 6145
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6145 always 6145
  "int main() {\n    void(*funcPtr)(void) = x;\n    funcPtr();\n}" always "int main() {\n    void(*funcPtr)(void) = x;\n    funcPtr();\n}"
Line 6149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6149 always 6149
  "" always ""
Line 6153
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6153 always 6153
  "void f() {\n  int x = 0;\n  dostuff(&x);\n  x = 1;\n}" always "void f() {\n  int x = 0;\n  dostuff(&x);\n  x = 1;\n}"
Line 6158
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6158 always 6158
  "" always ""
Line 6160
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6160 always 6160
  "void f() {\n  int x = 0;\n  dostuff(std::ref(x));\n  x = 1;\n}" always "void f() {\n  int x = 0;\n  dostuff(std::ref(x));\n  x = 1;\n}"
Line 6165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6165 always 6165
  "" always ""
Line 6169
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6169 always 6169
  "void reassign(char*& data, int size){    char* buf = new char[size];    char* tmp = data;    data = buf;    buf = tmp;    delete [] buf;}" always "void reassign(char*& data, int size){    char* buf = new char[size];    char* tmp = data;    data = buf;    buf = tmp;    delete [] buf;}"
Line 6179
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6179 always 6179
  "" always ""
Line 6184
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6184 always 6184
  "void NotUsed(double* pdD, int n) {\n    double sum = 0.0;\n    for (int i = 0; i<n; ++i)\n        pdD[i] = (sum += pdD[i]);\n}" always "void NotUsed(double* pdD, int n) {\n    double sum = 0.0;\n    for (int i = 0; i<n; ++i)\n        pdD[i] = (sum += pdD[i]);\n}"
Line 6189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6189 always 6189
  "" always ""
Line 6193
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6193 always 6193
  "SAL_WNODEPRECATED_DECLARATIONS_PUSH\nvoid convertToTokenArray() {\n}\nSAL_WNODEPRECATED_DECLARATIONS_POP" always "SAL_WNODEPRECATED_DECLARATIONS_PUSH\nvoid convertToTokenArray() {\n}\nSAL_WNODEPRECATED_DECLARATIONS_POP"
Line 6200
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6200 always 6200
  "template<unsigned dim>\nstruct Y: Y<dim-1> { };\ntemplate<>\nstruct Y<0> {};\nvoid f() {\n    Y y;\n}" always "template<unsigned dim>\nstruct Y: Y<dim-1> { };\ntemplate<>\nstruct Y<0> {};\nvoid f() {\n    Y y;\n}"
Line 6210
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6210 always 6210
  "int foo() {\n   using namespace ::com::sun::star::i18n;\n   bool b = false;\n   int j = 0;\n   for (int i = 0; i < 3; i++) {\n          if (!b) {\n             j = 3;\n             b = true;\n          }\n   }\n   return j;\n}" always "int foo() {\n   using namespace ::com::sun::star::i18n;\n   bool b = false;\n   int j = 0;\n   for (int i = 0; i < 3; i++) {\n          if (!b) {\n             j = 3;\n             b = true;\n          }\n   }\n   return j;\n}"
Line 6222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6222 always 6222
  "" always ""
Line 6227
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6227 always 6227
  "void f() {\n  bool first = true;\n\n  auto do_something = [&first]() {\n    if (first) {\n      first = false;\n    } else {\n      dostuff();\n    }\n  };\n  do_something();\n  do_something();\n}" always "void f() {\n  bool first = true;\n\n  auto do_something = [&first]() {\n    if (first) {\n      first = false;\n    } else {\n      dostuff();\n    }\n  };\n  do_something();\n  do_something();\n}"
Line 6240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6240 always 6240
  "" always ""
Line 6244
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6244 always 6244
  "void f(std::vector<int> ints) {\n  int x = 0;\n  std::for_each(ints.begin(), ints.end(), [&x](int i){ dostuff(x); x = i; });\n}" always "void f(std::vector<int> ints) {\n  int x = 0;\n  std::for_each(ints.begin(), ints.end(), [&x](int i){ dostuff(x); x = i; });\n}"
Line 6248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6248 always 6248
  "" always ""
Line 6250
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6250 always 6250
  "void f(std::vector<int> ints) {\n  int x = 0;\n  std::for_each(ints.begin(), ints.end(), [&x](int i){ x += i; });\n}" always "void f(std::vector<int> ints) {\n  int x = 0;\n  std::for_each(ints.begin(), ints.end(), [&x](int i){ x += i; });\n}"
Line 6254
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6254 always 6254
  "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n" always "[test.cpp:3]: (style) Variable 'x' is assigned a value that is never used.\n"
  "" always ""
Line 6258
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6258 always 6258
  "namespace t { namespace g {\n   typedef std::pair<BoostBox, size_t> value;\n} }\nnamespace t { namespace g {} }\nnamespace t {\n  inline double getTime() const {\n     iterator it=find();\n     double& value=it->second.values[index];\n     if(isnan(value)) {\n       value=get();\n     }\n     return value;\n  }\n}" always "namespace t { namespace g {\n   typedef std::pair<BoostBox, size_t> value;\n} }\nnamespace t { namespace g {} }\nnamespace t {\n  inline double getTime() const {\n     iterator it=find();\n     double& value=it->second.values[index];\n     if(isnan(value)) {\n       value=get();\n     }\n     return value;\n  }\n}"
Line 6272
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6272 always 6272
  "" always ""
Line 6276
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6276 always 6276
  "int fun() {\n static int fpUnread{0};\n const int var{fpUnread++};\n return var;\n}" always "int fun() {\n static int fpUnread{0};\n const int var{fpUnread++};\n return var;\n}"
Line 6282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6282 always 6282
  "" always ""
Line 6286
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6286 always 6286
  "void fun(Value value) {\n value[10] = 123;\n}" always "void fun(Value value) {\n value[10] = 123;\n}"
Line 6290
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6290 always 6290
  "" always ""
Line 6292
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6292 always 6292
  "void fun(std::string s) {\n s[10] = 123;\n}" always "void fun(std::string s) {\n s[10] = 123;\n}"
Line 6296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6296 always 6296
  "[test.cpp:2]: (style) Variable 's[10]' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 's[10]' is assigned a value that is never used.\n"
Line 6298
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6298 always 6298
  "void fun(short data[2]) {\n  data[2] = 1;\n}" always "void fun(short data[2]) {\n  data[2] = 1;\n}"
Line 6303
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6303 always 6303
  "" always ""
Line 6306
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6306 always 6306
  "void A::b(Date& result) {  result = 12;\n}" always "void A::b(Date& result) {  result = 12;\n}"
Line 6311
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6311 always 6311
  "" always ""
Line 6315
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6315 always 6315
  "void fun(Date result) {  result.x = 12;\n}" always "void fun(Date result) {  result.x = 12;\n}"
Line 6320
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6320 always 6320
  "" always ""
Line 6322
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6322 always 6322
  "void fun(Date result) {  result.x = 12;\n}" always "void fun(Date result) {  result.x = 12;\n}"
  "test.c" always "test.c"
Line 6328
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6328 always 6328
  "[test.c:1]: (style) Variable 'result.x' is assigned a value that is never used.\n" always "[test.c:1]: (style) Variable 'result.x' is assigned a value that is never used.\n"
Line 6330
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6330 always 6330
  "struct Date { int x; };\nvoid fun(Date result) {  result.x = 12;\n}" always "struct Date { int x; };\nvoid fun(Date result) {  result.x = 12;\n}"
Line 6336
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6336 always 6336
  "[test.cpp:2]: (style) Variable 'result.x' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'result.x' is assigned a value that is never used.\n"
Line 6340
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6340 always 6340
  "void fun() {  struct FOO foo;\n  foo.x = 123;\n}" always "void fun() {  struct FOO foo;\n  foo.x = 123;\n}"
Line 6346
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6346 always 6346
  "[test.cpp:2]: (style) Variable 'foo.x' is assigned a value that is never used.\n" always "[test.cpp:2]: (style) Variable 'foo.x' is assigned a value that is never used.\n"
Line 6350
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6350 always 6350
  "void foo(std::insert_iterator<C> it) {\n  it = 123;\n}" always "void foo(std::insert_iterator<C> it) {\n  it = 123;\n}"
Line 6354
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6354 always 6354
  "" always ""
Line 6358
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6358 always 6358
  "struct A {\n    std::map<int, int> m;\n    void f(int key, int number) {\n        auto pos = m.find(key);\n        if (pos == m.end())\n            m.insert(std::map<int, int>::value_type(key, number));\n        else\n            (*pos).second = number;\n    }\n};" always "struct A {\n    std::map<int, int> m;\n    void f(int key, int number) {\n        auto pos = m.find(key);\n        if (pos == m.end())\n            m.insert(std::map<int, int>::value_type(key, number));\n        else\n            (*pos).second = number;\n    }\n};"
Line 6369
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6369 always 6369
  "" always ""
Line 6373
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6373 always 6373
  "struct Data { unsigned int n; };\nint main() {\n  (*(volatile struct Data*)0x4200).n = 1;\n}" always "struct Data { unsigned int n; };\nint main() {\n  (*(volatile struct Data*)0x4200).n = 1;\n}"
Line 6378
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6378 always 6378
  "" always ""
Line 6383
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6383 always 6383
  "void f(void) {\n    ((uint8_t *) (uint16_t)0x1000)[0] = 0x42;\n}" always "void f(void) {\n    ((uint8_t *) (uint16_t)0x1000)[0] = 0x42;\n}"
Line 6387
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testunusedvar.cpp" always "cppcheck-2.8/test/testunusedvar.cpp"
  6387 always 6387
  "" always ""
