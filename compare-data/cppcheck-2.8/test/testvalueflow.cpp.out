

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073742266 expected@var22 !=@expr1073742267 actual@var23 ) {
62: std ::@expr1073742268 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073742269 expected@var22 ;
64: std ::@expr1073742270 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742271 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742272 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742273 str (@expr1073742274 ) , actualStr@var26 .@expr1073742275 str (@expr1073742276 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742277 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742278 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742279 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742280 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testvalueflow.cpp

1:
|
44:
45: class TestValueFlow : public TestFixture {
46: public:
47: TestValueFlow ( ) : TestFixture ( "TestValueFlow" ) { }
48:
49: private:
50: Settings settings@var102 ;
51:
52: void run ( ) override {
53:
54: const char cfg@var103 [@expr1073742281 168 ] =@expr1073742282 "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"strcpy\"> <arg nr=\"1\"><not-null/></arg> </function>\n  <function name=\"abort\"> <noreturn>true</noreturn> </function>\n</def>"
55:
56:
57:
58: ;
59: $if $(@expr1073742283 $!@expr1073742284 $assertEquals $(@expr1073742285 "cppcheck-2.8/test/testvalueflow.cpp" $, 59 $, true $, $(@expr1073742286 settings@var102 .@expr463 library@var104 .@expr1073742288 loadxmldata (@expr1073742289 cfg@var103 , sizeof (@expr1073742290 cfg@var103 ) ) $) $) $) { $return ; }
60: $do ${ $if $(@expr1073742291 settings@var102 .@expr463 library@var104 $.@expr1073742293 $load $(@expr1073742294 $exename@var11 $.@expr1073742295 $c_str $(@expr1073742296 $) $, "std.cfg" $) $.@expr1073742297 $errorcode $!=@expr1073742298 $Library $::@expr1073742299 $ErrorCode $::@expr1073742300 $OK $) ${ $complainMissingLib $(@expr1073742301 "std.cfg" $) $; $return $; $} $} $while $(@expr1073742302 $false $) ;
61:
62: $do ${ $if $(@expr1073742303 $prepareTest $(@expr1073742304 "valueFlowNumber" $) $) ${ $setVerbose $(@expr1073742305 $false $) $; valueFlowNumber $(@expr1073742306 $) $; $} $} $while $(@expr1073742307 $false $) ;
63: $do ${ $if $(@expr1073742308 $prepareTest $(@expr1073742309 "valueFlowString" $) $) ${ $setVerbose $(@expr1073742310 $false $) $; valueFlowString $(@expr1073742311 $) $; $} $} $while $(@expr1073742312 $false $) ;
64: $do ${ $if $(@expr1073742313 $prepareTest $(@expr1073742314 "valueFlowPointerAlias" $) $) ${ $setVerbose $(@expr1073742315 $false $) $; valueFlowPointerAlias $(@expr1073742316 $) $; $} $} $while $(@expr1073742317 $false $) ;
65: $do ${ $if $(@expr1073742318 $prepareTest $(@expr1073742319 "valueFlowLifetime" $) $) ${ $setVerbose $(@expr1073742320 $false $) $; valueFlowLifetime $(@expr1073742321 $) $; $} $} $while $(@expr1073742322 $false $) ;
66: $do ${ $if $(@expr1073742323 $prepareTest $(@expr1073742324 "valueFlowArrayElement" $) $) ${ $setVerbose $(@expr1073742325 $false $) $; valueFlowArrayElement $(@expr1073742326 $) $; $} $} $while $(@expr1073742327 $false $) ;
67: $do ${ $if $(@expr1073742328 $prepareTest $(@expr1073742329 "valueFlowMove" $) $) ${ $setVerbose $(@expr1073742330 $false $) $; valueFlowMove $(@expr1073742331 $) $; $} $} $while $(@expr1073742332 $false $) ;
68:
69: $do ${ $if $(@expr1073742333 $prepareTest $(@expr1073742334 "valueFlowBitAnd" $) $) ${ $setVerbose $(@expr1073742335 $false $) $; valueFlowBitAnd $(@expr1073742336 $) $; $} $} $while $(@expr1073742337 $false $) ;
70: $do ${ $if $(@expr1073742338 $prepareTest $(@expr1073742339 "valueFlowRightShift" $) $) ${ $setVerbose $(@expr1073742340 $false $) $; valueFlowRightShift $(@expr1073742341 $) $; $} $} $while $(@expr1073742342 $false $) ;
71:
72: $do ${ $if $(@expr1073742343 $prepareTest $(@expr1073742344 "valueFlowCalculations" $) $) ${ $setVerbose $(@expr1073742345 $false $) $; valueFlowCalculations $(@expr1073742346 $) $; $} $} $while $(@expr1073742347 $false $) ;
73: $do ${ $if $(@expr1073742348 $prepareTest $(@expr1073742349 "valueFlowSizeof" $) $) ${ $setVerbose $(@expr1073742350 $false $) $; valueFlowSizeof $(@expr1073742351 $) $; $} $} $while $(@expr1073742352 $false $) ;
74:
75: $do ${ $if $(@expr1073742353 $prepareTest $(@expr1073742354 "valueFlowErrorPath" $) $) ${ $setVerbose $(@expr1073742355 $false $) $; valueFlowErrorPath $(@expr1073742356 $) $; $} $} $while $(@expr1073742357 $false $) ;
76:
77: $do ${ $if $(@expr1073742358 $prepareTest $(@expr1073742359 "valueFlowBeforeCondition" $) $) ${ $setVerbose $(@expr1073742360 $false $) $; valueFlowBeforeCondition $(@expr1073742361 $) $; $} $} $while $(@expr1073742362 $false $) ;
78: $do ${ $if $(@expr1073742363 $prepareTest $(@expr1073742364 "valueFlowBeforeConditionAndAndOrOrGuard" $) $) ${ $setVerbose $(@expr1073742365 $false $) $; valueFlowBeforeConditionAndAndOrOrGuard $(@expr1073742366 $) $; $} $} $while $(@expr1073742367 $false $) ;
79: $do ${ $if $(@expr1073742368 $prepareTest $(@expr1073742369 "valueFlowBeforeConditionAssignIncDec" $) $) ${ $setVerbose $(@expr1073742370 $false $) $; valueFlowBeforeConditionAssignIncDec $(@expr1073742371 $) $; $} $} $while $(@expr1073742372 $false $) ;
80: $do ${ $if $(@expr1073742373 $prepareTest $(@expr1073742374 "valueFlowBeforeConditionFunctionCall" $) $) ${ $setVerbose $(@expr1073742375 $false $) $; valueFlowBeforeConditionFunctionCall $(@expr1073742376 $) $; $} $} $while $(@expr1073742377 $false $) ;
81: $do ${ $if $(@expr1073742378 $prepareTest $(@expr1073742379 "valueFlowBeforeConditionGlobalVariables" $) $) ${ $setVerbose $(@expr1073742380 $false $) $; valueFlowBeforeConditionGlobalVariables $(@expr1073742381 $) $; $} $} $while $(@expr1073742382 $false $) ;
82: $do ${ $if $(@expr1073742383 $prepareTest $(@expr1073742384 "valueFlowBeforeConditionGoto" $) $) ${ $setVerbose $(@expr1073742385 $false $) $; valueFlowBeforeConditionGoto $(@expr1073742386 $) $; $} $} $while $(@expr1073742387 $false $) ;
83: $do ${ $if $(@expr1073742388 $prepareTest $(@expr1073742389 "valueFlowBeforeConditionIfElse" $) $) ${ $setVerbose $(@expr1073742390 $false $) $; valueFlowBeforeConditionIfElse $(@expr1073742391 $) $; $} $} $while $(@expr1073742392 $false $) ;
84: $do ${ $if $(@expr1073742393 $prepareTest $(@expr1073742394 "valueFlowBeforeConditionLoop" $) $) ${ $setVerbose $(@expr1073742395 $false $) $; valueFlowBeforeConditionLoop $(@expr1073742396 $) $; $} $} $while $(@expr1073742397 $false $) ;
85: $do ${ $if $(@expr1073742398 $prepareTest $(@expr1073742399 "valueFlowBeforeConditionMacro" $) $) ${ $setVerbose $(@expr1073742400 $false $) $; valueFlowBeforeConditionMacro $(@expr1073742401 $) $; $} $} $while $(@expr1073742402 $false $) ;
86: $do ${ $if $(@expr1073742403 $prepareTest $(@expr1073742404 "valueFlowBeforeConditionSizeof" $) $) ${ $setVerbose $(@expr1073742405 $false $) $; valueFlowBeforeConditionSizeof $(@expr1073742406 $) $; $} $} $while $(@expr1073742407 $false $) ;
87: $do ${ $if $(@expr1073742408 $prepareTest $(@expr1073742409 "valueFlowBeforeConditionSwitch" $) $) ${ $setVerbose $(@expr1073742410 $false $) $; valueFlowBeforeConditionSwitch $(@expr1073742411 $) $; $} $} $while $(@expr1073742412 $false $) ;
88: $do ${ $if $(@expr1073742413 $prepareTest $(@expr1073742414 "valueFlowBeforeConditionTernaryOp" $) $) ${ $setVerbose $(@expr1073742415 $false $) $; valueFlowBeforeConditionTernaryOp $(@expr1073742416 $) $; $} $} $while $(@expr1073742417 $false $) ;
89: $do ${ $if $(@expr1073742418 $prepareTest $(@expr1073742419 "valueFlowBeforeConditionForward" $) $) ${ $setVerbose $(@expr1073742420 $false $) $; valueFlowBeforeConditionForward $(@expr1073742421 $) $; $} $} $while $(@expr1073742422 $false $) ;
90: $do ${ $if $(@expr1073742423 $prepareTest $(@expr1073742424 "valueFlowBeforeConditionConstructor" $) $) ${ $setVerbose $(@expr1073742425 $false $) $; valueFlowBeforeConditionConstructor $(@expr1073742426 $) $; $} $} $while $(@expr1073742427 $false $) ;
91:
92: $do ${ $if $(@expr1073742428 $prepareTest $(@expr1073742429 "valueFlowAfterAssign" $) $) ${ $setVerbose $(@expr1073742430 $false $) $; valueFlowAfterAssign $(@expr1073742431 $) $; $} $} $while $(@expr1073742432 $false $) ;
93: $do ${ $if $(@expr1073742433 $prepareTest $(@expr1073742434 "valueFlowAfterSwap" $) $) ${ $setVerbose $(@expr1073742435 $false $) $; valueFlowAfterSwap $(@expr1073742436 $) $; $} $} $while $(@expr1073742437 $false $) ;
94: $do ${ $if $(@expr1073742438 $prepareTest $(@expr1073742439 "valueFlowAfterCondition" $) $) ${ $setVerbose $(@expr1073742440 $false $) $; valueFlowAfterCondition $(@expr1073742441 $) $; $} $} $while $(@expr1073742442 $false $) ;
95: $do ${ $if $(@expr1073742443 $prepareTest $(@expr1073742444 "valueFlowAfterConditionTernary" $) $) ${ $setVerbose $(@expr1073742445 $false $) $; valueFlowAfterConditionTernary $(@expr1073742446 $) $; $} $} $while $(@expr1073742447 $false $) ;
96: $do ${ $if $(@expr1073742448 $prepareTest $(@expr1073742449 "valueFlowAfterConditionExpr" $) $) ${ $setVerbose $(@expr1073742450 $false $) $; valueFlowAfterConditionExpr $(@expr1073742451 $) $; $} $} $while $(@expr1073742452 $false $) ;
97: $do ${ $if $(@expr1073742453 $prepareTest $(@expr1073742454 "valueFlowAfterConditionSeveralNot" $) $) ${ $setVerbose $(@expr1073742455 $false $) $; valueFlowAfterConditionSeveralNot $(@expr1073742456 $) $; $} $} $while $(@expr1073742457 $false $) ;
98: $do ${ $if $(@expr1073742458 $prepareTest $(@expr1073742459 "valueFlowForwardCompoundAssign" $) $) ${ $setVerbose $(@expr1073742460 $false $) $; valueFlowForwardCompoundAssign $(@expr1073742461 $) $; $} $} $while $(@expr1073742462 $false $) ;
99: $do ${ $if $(@expr1073742463 $prepareTest $(@expr1073742464 "valueFlowForwardCorrelatedVariables" $) $) ${ $setVerbose $(@expr1073742465 $false $) $; valueFlowForwardCorrelatedVariables $(@expr1073742466 $) $; $} $} $while $(@expr1073742467 $false $) ;
100: $do ${ $if $(@expr1073742468 $prepareTest $(@expr1073742469 "valueFlowForwardModifiedVariables" $) $) ${ $setVerbose $(@expr1073742470 $false $) $; valueFlowForwardModifiedVariables $(@expr1073742471 $) $; $} $} $while $(@expr1073742472 $false $) ;
101: $do ${ $if $(@expr1073742473 $prepareTest $(@expr1073742474 "valueFlowForwardFunction" $) $) ${ $setVerbose $(@expr1073742475 $false $) $; valueFlowForwardFunction $(@expr1073742476 $) $; $} $} $while $(@expr1073742477 $false $) ;
102: $do ${ $if $(@expr1073742478 $prepareTest $(@expr1073742479 "valueFlowForwardTernary" $) $) ${ $setVerbose $(@expr1073742480 $false $) $; valueFlowForwardTernary $(@expr1073742481 $) $; $} $} $while $(@expr1073742482 $false $) ;
103: $do ${ $if $(@expr1073742483 $prepareTest $(@expr1073742484 "valueFlowForwardLambda" $) $) ${ $setVerbose $(@expr1073742485 $false $) $; valueFlowForwardLambda $(@expr1073742486 $) $; $} $} $while $(@expr1073742487 $false $) ;
104: $do ${ $if $(@expr1073742488 $prepareTest $(@expr1073742489 "valueFlowForwardTryCatch" $) $) ${ $setVerbose $(@expr1073742490 $false $) $; valueFlowForwardTryCatch $(@expr1073742491 $) $; $} $} $while $(@expr1073742492 $false $) ;
105: $do ${ $if $(@expr1073742493 $prepareTest $(@expr1073742494 "valueFlowForwardInconclusiveImpossible" $) $) ${ $setVerbose $(@expr1073742495 $false $) $; valueFlowForwardInconclusiveImpossible $(@expr1073742496 $) $; $} $} $while $(@expr1073742497 $false $) ;
106: $do ${ $if $(@expr1073742498 $prepareTest $(@expr1073742499 "valueFlowForwardConst" $) $) ${ $setVerbose $(@expr1073742500 $false $) $; valueFlowForwardConst $(@expr1073742501 $) $; $} $} $while $(@expr1073742502 $false $) ;
107: $do ${ $if $(@expr1073742503 $prepareTest $(@expr1073742504 "valueFlowForwardAfterCondition" $) $) ${ $setVerbose $(@expr1073742505 $false $) $; valueFlowForwardAfterCondition $(@expr1073742506 $) $; $} $} $while $(@expr1073742507 $false $) ;
108:
109: $do ${ $if $(@expr1073742508 $prepareTest $(@expr1073742509 "valueFlowFwdAnalysis" $) $) ${ $setVerbose $(@expr1073742510 $false $) $; valueFlowFwdAnalysis $(@expr1073742511 $) $; $} $} $while $(@expr1073742512 $false $) ;
110:
111: $do ${ $if $(@expr1073742513 $prepareTest $(@expr1073742514 "valueFlowSwitchVariable" $) $) ${ $setVerbose $(@expr1073742515 $false $) $; valueFlowSwitchVariable $(@expr1073742516 $) $; $} $} $while $(@expr1073742517 $false $) ;
112:
113: $do ${ $if $(@expr1073742518 $prepareTest $(@expr1073742519 "valueFlowForLoop" $) $) ${ $setVerbose $(@expr1073742520 $false $) $; valueFlowForLoop $(@expr1073742521 $) $; $} $} $while $(@expr1073742522 $false $) ;
114: $do ${ $if $(@expr1073742523 $prepareTest $(@expr1073742524 "valueFlowSubFunction" $) $) ${ $setVerbose $(@expr1073742525 $false $) $; valueFlowSubFunction $(@expr1073742526 $) $; $} $} $while $(@expr1073742527 $false $) ;
115: $do ${ $if $(@expr1073742528 $prepareTest $(@expr1073742529 "valueFlowFunctionReturn" $) $) ${ $setVerbose $(@expr1073742530 $false $) $; valueFlowFunctionReturn $(@expr1073742531 $) $; $} $} $while $(@expr1073742532 $false $) ;
116:
117: $do ${ $if $(@expr1073742533 $prepareTest $(@expr1073742534 "valueFlowFunctionDefaultParameter" $) $) ${ $setVerbose $(@expr1073742535 $false $) $; valueFlowFunctionDefaultParameter $(@expr1073742536 $) $; $} $} $while $(@expr1073742537 $false $) ;
118:
119: $do ${ $if $(@expr1073742538 $prepareTest $(@expr1073742539 "knownValue" $) $) ${ $setVerbose $(@expr1073742540 $false $) $; knownValue $(@expr1073742541 $) $; $} $} $while $(@expr1073742542 $false $) ;
120:
121: $do ${ $if $(@expr1073742543 $prepareTest $(@expr1073742544 "valueFlowSizeofForwardDeclaredEnum" $) $) ${ $setVerbose $(@expr1073742545 $false $) $; valueFlowSizeofForwardDeclaredEnum $(@expr1073742546 $) $; $} $} $while $(@expr1073742547 $false $) ;
122:
123: $do ${ $if $(@expr1073742548 $prepareTest $(@expr1073742549 "valueFlowGlobalVar" $) $) ${ $setVerbose $(@expr1073742550 $false $) $; valueFlowGlobalVar $(@expr1073742551 $) $; $} $} $while $(@expr1073742552 $false $) ;
124:
125: $do ${ $if $(@expr1073742553 $prepareTest $(@expr1073742554 "valueFlowGlobalConstVar" $) $) ${ $setVerbose $(@expr1073742555 $false $) $; valueFlowGlobalConstVar $(@expr1073742556 $) $; $} $} $while $(@expr1073742557 $false $) ;
126:
127: $do ${ $if $(@expr1073742558 $prepareTest $(@expr1073742559 "valueFlowGlobalStaticVar" $) $) ${ $setVerbose $(@expr1073742560 $false $) $; valueFlowGlobalStaticVar $(@expr1073742561 $) $; $} $} $while $(@expr1073742562 $false $) ;
128:
129: $do ${ $if $(@expr1073742563 $prepareTest $(@expr1073742564 "valueFlowInlineAssembly" $) $) ${ $setVerbose $(@expr1073742565 $false $) $; valueFlowInlineAssembly $(@expr1073742566 $) $; $} $} $while $(@expr1073742567 $false $) ;
130:
131: $do ${ $if $(@expr1073742568 $prepareTest $(@expr1073742569 "valueFlowSameExpression" $) $) ${ $setVerbose $(@expr1073742570 $false $) $; valueFlowSameExpression $(@expr1073742571 $) $; $} $} $while $(@expr1073742572 $false $) ;
132:
133: $do ${ $if $(@expr1073742573 $prepareTest $(@expr1073742574 "valueFlowUninit" $) $) ${ $setVerbose $(@expr1073742575 $false $) $; valueFlowUninit $(@expr1073742576 $) $; $} $} $while $(@expr1073742577 $false $) ;
134:
135: $do ${ $if $(@expr1073742578 $prepareTest $(@expr1073742579 "valueFlowConditionExpressions" $) $) ${ $setVerbose $(@expr1073742580 $false $) $; valueFlowConditionExpressions $(@expr1073742581 $) $; $} $} $while $(@expr1073742582 $false $) ;
136:
137: $do ${ $if $(@expr1073742583 $prepareTest $(@expr1073742584 "valueFlowContainerSize" $) $) ${ $setVerbose $(@expr1073742585 $false $) $; valueFlowContainerSize $(@expr1073742586 $) $; $} $} $while $(@expr1073742587 $false $) ;
138:
139: $do ${ $if $(@expr1073742588 $prepareTest $(@expr1073742589 "valueFlowDynamicBufferSize" $) $) ${ $setVerbose $(@expr1073742590 $false $) $; valueFlowDynamicBufferSize $(@expr1073742591 $) $; $} $} $while $(@expr1073742592 $false $) ;
140:
141: $do ${ $if $(@expr1073742593 $prepareTest $(@expr1073742594 "valueFlowSafeFunctionParameterValues" $) $) ${ $setVerbose $(@expr1073742595 $false $) $; valueFlowSafeFunctionParameterValues $(@expr1073742596 $) $; $} $} $while $(@expr1073742597 $false $) ;
142: $do ${ $if $(@expr1073742598 $prepareTest $(@expr1073742599 "valueFlowUnknownFunctionReturn" $) $) ${ $setVerbose $(@expr1073742600 $false $) $; valueFlowUnknownFunctionReturn $(@expr1073742601 $) $; $} $} $while $(@expr1073742602 $false $) ;
143:
144: $do ${ $if $(@expr1073742603 $prepareTest $(@expr1073742604 "valueFlowPointerAliasDeref" $) $) ${ $setVerbose $(@expr1073742605 $false $) $; valueFlowPointerAliasDeref $(@expr1073742606 $) $; $} $} $while $(@expr1073742607 $false $) ;
145:
146: $do ${ $if $(@expr1073742608 $prepareTest $(@expr1073742609 "valueFlowCrashIncompleteCode" $) $) ${ $setVerbose $(@expr1073742610 $false $) $; valueFlowCrashIncompleteCode $(@expr1073742611 $) $; $} $} $while $(@expr1073742612 $false $) ;
147:
148: $do ${ $if $(@expr1073742613 $prepareTest $(@expr1073742614 "valueFlowCrash" $) $) ${ $setVerbose $(@expr1073742615 $false $) $; valueFlowCrash $(@expr1073742616 $) $; $} $} $while $(@expr1073742617 $false $) ;
149: $do ${ $if $(@expr1073742618 $prepareTest $(@expr1073742619 "valueFlowHang" $) $) ${ $setVerbose $(@expr1073742620 $false $) $; valueFlowHang $(@expr1073742621 $) $; $} $} $while $(@expr1073742622 $false $) ;
150: $do ${ $if $(@expr1073742623 $prepareTest $(@expr1073742624 "valueFlowCrashConstructorInitialization" $) $) ${ $setVerbose $(@expr1073742625 $false $) $; valueFlowCrashConstructorInitialization $(@expr1073742626 $) $; $} $} $while $(@expr1073742627 $false $) ;
151:
152: $do ${ $if $(@expr1073742628 $prepareTest $(@expr1073742629 "valueFlowUnknownMixedOperators" $) $) ${ $setVerbose $(@expr1073742630 $false $) $; valueFlowUnknownMixedOperators $(@expr1073742631 $) $; $} $} $while $(@expr1073742632 $false $) ;
153: $do ${ $if $(@expr1073742633 $prepareTest $(@expr1073742634 "valueFlowSolveExpr" $) $) ${ $setVerbose $(@expr1073742635 $false $) $; valueFlowSolveExpr $(@expr1073742636 $) $; $} $} $while $(@expr1073742637 $false $) ;
154: $do ${ $if $(@expr1073742638 $prepareTest $(@expr1073742639 "valueFlowIdempotent" $) $) ${ $setVerbose $(@expr1073742640 $false $) $; valueFlowIdempotent $(@expr1073742641 $) $; $} $} $while $(@expr1073742642 $false $) ;
155: $do ${ $if $(@expr1073742643 $prepareTest $(@expr1073742644 "valueFlowUnsigned" $) $) ${ $setVerbose $(@expr1073742645 $false $) $; valueFlowUnsigned $(@expr1073742646 $) $; $} $} $while $(@expr1073742647 $false $) ;
156: $do ${ $if $(@expr1073742648 $prepareTest $(@expr1073742649 "valueFlowMod" $) $) ${ $setVerbose $(@expr1073742650 $false $) $; valueFlowMod $(@expr1073742651 $) $; $} $} $while $(@expr1073742652 $false $) ;
157: $do ${ $if $(@expr1073742653 $prepareTest $(@expr1073742654 "valueFlowNotNull" $) $) ${ $setVerbose $(@expr1073742655 $false $) $; valueFlowNotNull $(@expr1073742656 $) $; $} $} $while $(@expr1073742657 $false $) ;
158: $do ${ $if $(@expr1073742658 $prepareTest $(@expr1073742659 "valueFlowSymbolic" $) $) ${ $setVerbose $(@expr1073742660 $false $) $; valueFlowSymbolic $(@expr1073742661 $) $; $} $} $while $(@expr1073742662 $false $) ;
159: $do ${ $if $(@expr1073742663 $prepareTest $(@expr1073742664 "valueFlowSymbolicIdentity" $) $) ${ $setVerbose $(@expr1073742665 $false $) $; valueFlowSymbolicIdentity $(@expr1073742666 $) $; $} $} $while $(@expr1073742667 $false $) ;
160: $do ${ $if $(@expr1073742668 $prepareTest $(@expr1073742669 "valueFlowSmartPointer" $) $) ${ $setVerbose $(@expr1073742670 $false $) $; valueFlowSmartPointer $(@expr1073742671 $) $; $} $} $while $(@expr1073742672 $false $) ;
161: }
162:
163: static bool isNotTokValue ( const ValueFlow :: Value & val@var105 ) {
164: return !@expr1073742673 val@var105 .@expr1073742674 isTokValue (@expr1073742675 ) ;
165: }
166:
167: static bool isNotLifetimeValue ( const ValueFlow :: Value & val@var106 ) {
168: return !@expr1073742676 val@var106 .@expr1073742677 isLifetimeValue (@expr1073742678 ) ;
169: }
170:
171: static bool isNotUninitValue ( const ValueFlow :: Value & val@var107 ) {
172: return !@expr1073742679 val@var107 .@expr1073742680 isUninitValue (@expr1073742681 ) ;
173: }
174:
175: static bool isNotPossible ( const ValueFlow :: Value & val@var108 ) {
176: return !@expr1073742682 val@var108 .@expr1073742683 isPossible (@expr1073742684 ) ;
177: }
178:
179: static bool isNotKnown ( const ValueFlow :: Value & val@var109 ) {
180: return !@expr1073742685 val@var109 .@expr1073742686 isKnown (@expr1073742687 ) ;
181: }
182:
183: static bool isNotInconclusive ( const ValueFlow :: Value & val@var110 ) {
184: return !@expr1073742688 val@var110 .@expr1073742689 isInconclusive (@expr1073742690 ) ;
185: }
186:
187: static bool isNotImpossible ( const ValueFlow :: Value & val@var111 ) {
188: return !@expr1073742691 val@var111 .@expr1073742692 isImpossible (@expr1073742693 ) ;
189: }
190:
191:
192: bool testValueOfXKnown_ ( const char * file@var112 , int line@var113 , const char code@var114 [ ] , unsigned int linenr@var115 , int value@var116 ) {
193:
194: Tokenizer tokenizer@var117 (@expr1073742694 &@expr1073742695 settings@var102 , this@expr1073742696 ) ;
195: std ::@expr1073742697 istringstream istr@var118 (@expr1073742698 code@var114 ) ;
196: $assert_ $(@expr1073742699 file@var112 $, line@var113 $, $(@expr1073742700 tokenizer@var117 .@expr1073742701 tokenize (@expr1073742702 istr@var118 , "test.cpp" ) $) $) ;
197:
198: for (@expr1073742703 const Token *@expr1073742704 tok@var119 =@expr1073742705 tokenizer@var117 .@expr1073742706 tokens (@expr1073742707 ) ; tok@var119 ; tok@var119 =@expr1073742708 tok@var119 .@expr1073742709 next (@expr1073742710 ) ) {
199: if (@expr1073742711 tok@var119 .@expr1073742712 str (@expr1073742713 ) ==@expr1073742714 "x" &&@expr1073742715 tok@var119 .@expr1073742716 linenr (@expr1073742717 ) ==@expr1073742718 linenr@var115 ) {
200: for (@expr1073742719 const ValueFlow ::@expr1073742720 Value &@expr1073742721 val@var120 :@expr1073742722 tok@var119 .@expr1073742723 values (@expr1073742724 ) ) {
201: if (@expr1073742725 val@var120 .@expr1073742726 isSymbolicValue (@expr1073742727 ) ) {
202: continue ; }
203: if (@expr1073742728 val@var120 .@expr1073742729 isKnown (@expr1073742730 ) &&@expr1073742731 val@var120 .@expr1073742732 intvalue@var121 ==@expr1073742733 value@var116 ) {
204: return true ; }
205: }
206: }
207: }
208:
209: return false ;
210: }
211:
212: bool testValueOfXKnown_ ( const char * file@var122 , int line@var123 , const char code@var124 [ ] , unsigned int linenr@var125 , const std :: string & expr@var126 , int value@var127 ) {
213:
214: Tokenizer tokenizer@var128 (@expr1073742734 &@expr1073742735 settings@var102 , this@expr1073742736 ) ;
215: std ::@expr1073742737 istringstream istr@var129 (@expr1073742738 code@var124 ) ;
216: $assert_ $(@expr1073742739 file@var122 $, line@var123 $, $(@expr1073742740 tokenizer@var128 .@expr1073742741 tokenize (@expr1073742742 istr@var129 , "test.cpp" ) $) $) ;
217:
218: for (@expr1073742743 const Token *@expr1073742744 tok@var130 =@expr1073742745 tokenizer@var128 .@expr1073742746 tokens (@expr1073742747 ) ; tok@var130 ; tok@var130 =@expr1073742748 tok@var130 .@expr1073742749 next (@expr1073742750 ) ) {
219: if (@expr1073742751 tok@var130 .@expr1073742752 str (@expr1073742753 ) ==@expr1073742754 "x" &&@expr1073742755 tok@var130 .@expr1073742756 linenr (@expr1073742757 ) ==@expr1073742758 linenr@var125 ) {
220: for (@expr1073742759 const ValueFlow ::@expr1073742760 Value &@expr1073742761 val@var131 :@expr1073742762 tok@var130 .@expr1073742763 values (@expr1073742764 ) ) {
221: if (@expr1073742765 !@expr1073742766 val@var131 .@expr1073742767 isSymbolicValue (@expr1073742768 ) ) {
222: continue ; }
223: if (@expr1073742769 val@var131 .@expr1073742770 isKnown (@expr1073742771 ) &&@expr1073742772 val@var131 .@expr1073742773 intvalue@var132 ==@expr1073742774 value@var127 &&@expr1073742775 val@var131 .@expr1073742776 tokvalue@var133 .@expr1073742777 expressionString (@expr1073742778 ) ==@expr1073742779 expr@var126 ) {
224: return true ; }
225: }
226: }
227: }
228:
229: return false ;
230: }
231:
232:
233: bool testValueOfXImpossible_ ( const char * file@var134 , int line@var135 , const char code@var136 [ ] , unsigned int linenr@var137 , int value@var138 ) {
234:
235: Tokenizer tokenizer@var139 (@expr1073742780 &@expr1073742781 settings@var102 , this@expr1073742782 ) ;
236: std ::@expr1073742783 istringstream istr@var140 (@expr1073742784 code@var136 ) ;
237: $assert_ $(@expr1073742785 file@var134 $, line@var135 $, $(@expr1073742786 tokenizer@var139 .@expr1073742787 tokenize (@expr1073742788 istr@var140 , "test.cpp" ) $) $) ;
238:
239: for (@expr1073742789 const Token *@expr1073742790 tok@var141 =@expr1073742791 tokenizer@var139 .@expr1073742792 tokens (@expr1073742793 ) ; tok@var141 ; tok@var141 =@expr1073742794 tok@var141 .@expr1073742795 next (@expr1073742796 ) ) {
240: if (@expr1073742797 tok@var141 .@expr1073742798 str (@expr1073742799 ) ==@expr1073742800 "x" &&@expr1073742801 tok@var141 .@expr1073742802 linenr (@expr1073742803 ) ==@expr1073742804 linenr@var137 ) {
241: for (@expr1073742805 const ValueFlow ::@expr1073742806 Value &@expr1073742807 val@var142 :@expr1073742808 tok@var141 .@expr1073742809 values (@expr1073742810 ) ) {
242: if (@expr1073742811 val@var142 .@expr1073742812 isSymbolicValue (@expr1073742813 ) ) {
243: continue ; }
244: if (@expr1073742814 val@var142 .@expr1073742815 isImpossible (@expr1073742816 ) &&@expr1073742817 val@var142 .@expr1073742818 intvalue@var143 ==@expr1073742819 value@var138 ) {
245: return true ; }
246: }
247: }
248: }
249:
250: return false ;
251: }
252:
253: bool testValueOfXImpossible_ ( const char * file@var144 , int line@var145 , const char code@var146 [ ] , unsigned int linenr@var147 , const std :: string & expr@var148 , int value@var149 )
254: {
255:
256: Tokenizer tokenizer@var150 (@expr1073742820 &@expr1073742821 settings@var102 , this@expr1073742822 ) ;
257: std ::@expr1073742823 istringstream istr@var151 (@expr1073742824 code@var146 ) ;
258: $assert_ $(@expr1073742825 file@var144 $, line@var145 $, $(@expr1073742826 tokenizer@var150 .@expr1073742827 tokenize (@expr1073742828 istr@var151 , "test.cpp" ) $) $) ;
259:
260: for (@expr1073742829 const Token *@expr1073742830 tok@var152 =@expr1073742831 tokenizer@var150 .@expr1073742832 tokens (@expr1073742833 ) ; tok@var152 ; tok@var152 =@expr1073742834 tok@var152 .@expr1073742835 next (@expr1073742836 ) ) {
261: if (@expr1073742837 tok@var152 .@expr1073742838 str (@expr1073742839 ) ==@expr1073742840 "x" &&@expr1073742841 tok@var152 .@expr1073742842 linenr (@expr1073742843 ) ==@expr1073742844 linenr@var147 ) {
262: for (@expr1073742845 const ValueFlow ::@expr1073742846 Value &@expr1073742847 val@var153 :@expr1073742848 tok@var152 .@expr1073742849 values (@expr1073742850 ) ) {
263: if (@expr1073742851 !@expr1073742852 val@var153 .@expr1073742853 isSymbolicValue (@expr1073742854 ) ) {
264: continue ; }
265: if (@expr1073742855 val@var153 .@expr1073742856 isImpossible (@expr1073742857 ) &&@expr1073742858 val@var153 .@expr1073742859 intvalue@var154 ==@expr1073742860 value@var149 &&@expr1073742861 val@var153 .@expr1073742862 tokvalue@var155 .@expr1073742863 expressionString (@expr1073742864 ) ==@expr1073742865 expr@var148 ) {
266: return true ; }
267: }
268: }
269: }
270:
271: return false ;
272: }
273:
274:
275: bool testValueOfXInconclusive_ ( const char code@var156 [ ] , unsigned int linenr@var157 , int value@var158 , const char * file@var159 , int line@var160 ) {
276:
277: Tokenizer tokenizer@var161 (@expr1073742866 &@expr1073742867 settings@var102 , this@expr1073742868 ) ;
278: std ::@expr1073742869 istringstream istr@var162 (@expr1073742870 code@var156 ) ;
279: $assert_ $(@expr1073742871 file@var159 $, line@var160 $, $(@expr1073742872 tokenizer@var161 .@expr1073742873 tokenize (@expr1073742874 istr@var162 , "test.cpp" ) $) $) ;
280:
281: for (@expr1073742875 const Token *@expr1073742876 tok@var163 =@expr1073742877 tokenizer@var161 .@expr1073742878 tokens (@expr1073742879 ) ; tok@var163 ; tok@var163 =@expr1073742880 tok@var163 .@expr1073742881 next (@expr1073742882 ) ) {
282: if (@expr1073742883 tok@var163 .@expr1073742884 str (@expr1073742885 ) ==@expr1073742886 "x" &&@expr1073742887 tok@var163 .@expr1073742888 linenr (@expr1073742889 ) ==@expr1073742890 linenr@var157 ) {
283: for (@expr1073742891 const ValueFlow ::@expr1073742892 Value &@expr1073742893 val@var164 :@expr1073742894 tok@var163 .@expr1073742895 values (@expr1073742896 ) ) {
284: if (@expr1073742897 val@var164 .@expr1073742898 isSymbolicValue (@expr1073742899 ) ) {
285: continue ; }
286: if (@expr1073742900 val@var164 .@expr1073742901 isInconclusive (@expr1073742902 ) &&@expr1073742903 val@var164 .@expr1073742904 intvalue@var165 ==@expr1073742905 value@var158 ) {
287: return true ; }
288: }
289: }
290: }
291:
292: return false ;
293: }
294:
295:
296: bool testValueOfX_ ( const char * file@var166 , int line@var167 , const char code@var168 [ ] , unsigned int linenr@var169 , int value@var170 ) {
297:
298: Tokenizer tokenizer@var171 (@expr1073742906 &@expr1073742907 settings@var102 , this@expr1073742908 ) ;
299: std ::@expr1073742909 istringstream istr@var172 (@expr1073742910 code@var168 ) ;
300: $assert_ $(@expr1073742911 file@var166 $, line@var167 $, $(@expr1073742912 tokenizer@var171 .@expr1073742913 tokenize (@expr1073742914 istr@var172 , "test.cpp" ) $) $) ;
301:
302: for (@expr1073742915 const Token *@expr1073742916 tok@var173 =@expr1073742917 tokenizer@var171 .@expr1073742918 tokens (@expr1073742919 ) ; tok@var173 ; tok@var173 =@expr1073742920 tok@var173 .@expr1073742921 next (@expr1073742922 ) ) {
303: if (@expr1073742923 tok@var173 .@expr1073742924 str (@expr1073742925 ) ==@expr1073742926 "x" &&@expr1073742927 tok@var173 .@expr1073742928 linenr (@expr1073742929 ) ==@expr1073742930 linenr@var169 ) {
304: for (@expr1073742931 const ValueFlow ::@expr1073742932 Value &@expr1073742933 v@var174 :@expr1073742934 tok@var173 .@expr1073742935 values (@expr1073742936 ) ) {
305: if (@expr1073742937 v@var174 .@expr1073742938 isIntValue (@expr1073742939 ) &&@expr1073742940 !@expr1073742941 v@var174 .@expr1073742942 isImpossible (@expr1073742943 ) &&@expr1073742944 v@var174 .@expr1073742945 intvalue@var175 ==@expr1073742946 value@var170 ) {
306: return true ; }
307: }
308: }
309: }
310:
311: return false ;
312: }
313:
314: bool testValueOfX_ ( const char * file@var176 , int line@var177 , const char code@var178 [ ] , unsigned int linenr@var179 , const std :: string & expr@var180 , int value@var181 )
315: {
316:
317: Tokenizer tokenizer@var182 (@expr1073742947 &@expr1073742948 settings@var102 , this@expr1073742949 ) ;
318: std ::@expr1073742950 istringstream istr@var183 (@expr1073742951 code@var178 ) ;
319: $assert_ $(@expr1073742952 file@var176 $, line@var177 $, $(@expr1073742953 tokenizer@var182 .@expr1073742954 tokenize (@expr1073742955 istr@var183 , "test.cpp" ) $) $) ;
320:
321: for (@expr1073742956 const Token *@expr1073742957 tok@var184 =@expr1073742958 tokenizer@var182 .@expr1073742959 tokens (@expr1073742960 ) ; tok@var184 ; tok@var184 =@expr1073742961 tok@var184 .@expr1073742962 next (@expr1073742963 ) ) {
322: if (@expr1073742964 tok@var184 .@expr1073742965 str (@expr1073742966 ) ==@expr1073742967 "x" &&@expr1073742968 tok@var184 .@expr1073742969 linenr (@expr1073742970 ) ==@expr1073742971 linenr@var179 ) {
323: for (@expr1073742972 const ValueFlow ::@expr1073742973 Value &@expr1073742974 v@var185 :@expr1073742975 tok@var184 .@expr1073742976 values (@expr1073742977 ) ) {
324: if (@expr1073742978 v@var185 .@expr1073742979 isSymbolicValue (@expr1073742980 ) &&@expr1073742981 !@expr1073742982 v@var185 .@expr1073742983 isImpossible (@expr1073742984 ) &&@expr1073742985 v@var185 .@expr1073742986 intvalue@var186 ==@expr1073742987 value@var181 &&@expr1073742988
325: v@var185 .@expr1073742989 tokvalue@var187 .@expr1073742990 expressionString (@expr1073742991 ) ==@expr1073742992 expr@var180 ) {
326: return true ; }
327: }
328: }
329: }
330:
331: return false ;
332: }
333:
334: bool testValueOfX_ ( const char * file@var188 , int line@var189 , const char code@var190 [ ] , unsigned int linenr@var191 , float value@var192 , float diff@var193 ) {
335:
336: Tokenizer tokenizer@var194 (@expr1073742993 &@expr1073742994 settings@var102 , this@expr1073742995 ) ;
337: std ::@expr1073742996 istringstream istr@var195 (@expr1073742997 code@var190 ) ;
338: $assert_ $(@expr1073742998 file@var188 $, line@var189 $, $(@expr1073742999 tokenizer@var194 .@expr1073743000 tokenize (@expr1073743001 istr@var195 , "test.cpp" ) $) $) ;
339:
340: for (@expr1073743002 const Token *@expr1073743003 tok@var196 =@expr1073743004 tokenizer@var194 .@expr1073743005 tokens (@expr1073743006 ) ; tok@var196 ; tok@var196 =@expr1073743007 tok@var196 .@expr1073743008 next (@expr1073743009 ) ) {
341: if (@expr1073743010 tok@var196 .@expr1073743011 str (@expr1073743012 ) ==@expr1073743013 "x" &&@expr1073743014 tok@var196 .@expr1073743015 linenr (@expr1073743016 ) ==@expr1073743017 linenr@var191 ) {
342: for (@expr1073743018 const ValueFlow ::@expr1073743019 Value &@expr1073743020 v@var197 :@expr1073743021 tok@var196 .@expr1073743022 values (@expr1073743023 ) ) {
343: if (@expr1073743024 v@var197 .@expr1073743025 isFloatValue (@expr1073743026 ) &&@expr1073743027 !@expr1073743028 v@var197 .@expr1073743029 isImpossible (@expr1073743030 ) &&@expr1073743031 v@var197 .@expr1208 floatValue@var198 >=@expr1073743033 value@var192 -@expr1073743034 diff@var193 &&@expr1073743035
344: v@var197 .@expr1208 floatValue@var198 <=@expr1073743037 value@var192 +@expr1073743038 diff@var193 ) {
345: return true ; }
346: }
347: }
348: }
349:
350: return false ;
351: }
352:
353:
354: std :: string getErrorPathForX_ ( const char code@var199 [ ] , unsigned int linenr@var200 , const char * file@var201 , int line@var202 ) {
355:
356: Tokenizer tokenizer@var203 (@expr1073743039 &@expr1073743040 settings@var102 , this@expr1073743041 ) ;
357: std ::@expr1073743042 istringstream istr@var204 (@expr1073743043 code@var199 ) ;
358: $assert_ $(@expr1073743044 file@var201 $, line@var202 $, $(@expr1073743045 tokenizer@var203 .@expr1073743046 tokenize (@expr1073743047 istr@var204 , "test.cpp" ) $) $) ;
359:
360: for (@expr1073743048 const Token *@expr1073743049 tok@var205 =@expr1073743050 tokenizer@var203 .@expr1073743051 tokens (@expr1073743052 ) ; tok@var205 ; tok@var205 =@expr1073743053 tok@var205 .@expr1073743054 next (@expr1073743055 ) ) {
361: if (@expr1073743056 tok@var205 .@expr1073743057 str (@expr1073743058 ) !=@expr1073743059 "x" ||@expr1073743060 tok@var205 .@expr1073743061 linenr (@expr1073743062 ) !=@expr1073743063 linenr@var200 ) {
362: continue ; }
363:
364: std ::@expr1073743064 ostringstream ostr@var206 ;
365: for (@expr1073743065 const ValueFlow ::@expr1242 Value &@expr1243 v@var207 :@expr1073743068 tok@var205 .@expr1073743069 values (@expr1073743070 ) ) {
366: for (@expr1073743071 const ValueFlow ::@expr1242 Value ::@expr1242 ErrorPathItem &@expr1243 ep@var208 :@expr1073743075 v@var207 .@expr1073743076 errorPath@var209 ) {
367: const Token * eptok@var210 ; eptok@var210 =@expr1073743077 ep@var208 .@expr1073743078 first@var211 ;
368: const std ::@expr1242 string &@expr1243 msg@var212 =@expr1073743081 ep@var208 .@expr1073743082 second@var213 ;
369: ostr@var206 <<@expr1073743083 eptok@var210 .@expr1073743084 linenr (@expr1073743085 ) <<@expr1073743086 ',' <<@expr1073743087 msg@var212 <<@expr1073743088 '\n' ;
370: }
371: }
372: return ostr@var206 .@expr1073743089 str (@expr1073743090 ) ;
373: }
374:
375: return "" ;
376: }
377:
378: bool testValueOfX_ ( const char * file@var214 , int line@var215 , const char code@var216 [ ] , unsigned int linenr@var217 , const char value@var218 [ ] , ValueFlow :: Value :: ValueType type@var219 ) {
379:
380: Tokenizer tokenizer@var220 (@expr1073743091 &@expr1073743092 settings@var102 , this@expr1073743093 ) ;
381: std ::@expr1073743094 istringstream istr@var221 (@expr1073743095 code@var216 ) ;
382: $assert_ $(@expr1073743096 file@var214 $, line@var215 $, $(@expr1073743097 tokenizer@var220 .@expr1073743098 tokenize (@expr1073743099 istr@var221 , "test.cpp" ) $) $) ;
383:
384: for (@expr1073743100 const Token *@expr1073743101 tok@var222 =@expr1073743102 tokenizer@var220 .@expr1073743103 tokens (@expr1073743104 ) ; tok@var222 ; tok@var222 =@expr1073743105 tok@var222 .@expr1073743106 next (@expr1073743107 ) ) {
385: if (@expr1073743108 tok@var222 .@expr1073743109 str (@expr1073743110 ) ==@expr1073743111 "x" &&@expr1073743112 tok@var222 .@expr1073743113 linenr (@expr1073743114 ) ==@expr1073743115 linenr@var217 ) {
386: for (@expr1073743116 const ValueFlow ::@expr1073743117 Value &@expr1073743118 v@var223 :@expr1073743119 tok@var222 .@expr1073743120 values (@expr1073743121 ) ) {
387: if (@expr1073743122 v@var223 .@expr1073743123 valueType@var224 ==@expr1073743124 type@var219 &&@expr1073743125 Token ::@expr1073743126 simpleMatch (@expr1073743127 v@var223 .@expr1073743128 tokvalue@var225 , value@var218 , strlen (@expr1073743129 value@var218 ) ) ) {
388: return true ; }
389: }
390: }
391: }
392:
393: return false ;
394: }
395:
396:
397: bool testLifetimeOfX_ ( const char * file@var226 , int line@var227 , const char code@var228 [ ] , unsigned int linenr@var229 , const char value@var230 [ ] , ValueFlow :: Value :: LifetimeScope lifetimeScope@var231 = ValueFlow :: Value :: LifetimeScope :: Local ) {
398:
399: Tokenizer tokenizer@var232 (@expr1073743130 &@expr1073743131 settings@var102 , this@expr1073743132 ) ;
400: std ::@expr1073743133 istringstream istr@var233 (@expr1073743134 code@var228 ) ;
401: $assert_ $(@expr1073743135 file@var226 $, line@var227 $, $(@expr1073743136 tokenizer@var232 .@expr1073743137 tokenize (@expr1073743138 istr@var233 , "test.cpp" ) $) $) ;
402:
403: for (@expr1073743139 const Token *@expr1073743140 tok@var234 =@expr1073743141 tokenizer@var232 .@expr1073743142 tokens (@expr1073743143 ) ; tok@var234 ; tok@var234 =@expr1073743144 tok@var234 .@expr1073743145 next (@expr1073743146 ) ) {
404: if (@expr1073743147 tok@var234 .@expr1073743148 str (@expr1073743149 ) ==@expr1073743150 "x" &&@expr1073743151 tok@var234 .@expr1073743152 linenr (@expr1073743153 ) ==@expr1073743154 linenr@var229 ) {
405: for (@expr1073743155 const ValueFlow ::@expr1073743156 Value &@expr1073743157 v@var235 :@expr1073743158 tok@var234 .@expr1073743159 values (@expr1073743160 ) ) {
406: if (@expr1073743161 v@var235 .@expr1073743162 isLifetimeValue (@expr1073743163 ) &&@expr1073743164 v@var235 .@expr1073743165 lifetimeScope@var236 ==@expr1073743166 lifetimeScope@var231 &&@expr1073743167 Token ::@expr1073743168 simpleMatch (@expr1073743169 v@var235 .@expr1073743170 tokvalue@var237 , value@var230 , strlen (@expr1073743171 value@var230 ) ) ) {
407: return true ; }
408: }
409: }
410: }
411:
412: return false ;
413: }
414:
415: bool testValueOfX_ ( const char * file@var238 , int line@var239 , const char code@var240 [ ] , unsigned int linenr@var241 , int value@var242 , ValueFlow :: Value :: ValueType type@var243 ) {
416:
417: Tokenizer tokenizer@var244 (@expr1073743172 &@expr1073743173 settings@var102 , this@expr1073743174 ) ;
418: std ::@expr1073743175 istringstream istr@var245 (@expr1073743176 code@var240 ) ;
419: $assert_ $(@expr1073743177 file@var238 $, line@var239 $, $(@expr1073743178 tokenizer@var244 .@expr1073743179 tokenize (@expr1073743180 istr@var245 , "test.cpp" ) $) $) ;
420:
421: for (@expr1073743181 const Token *@expr1073743182 tok@var246 =@expr1073743183 tokenizer@var244 .@expr1073743184 tokens (@expr1073743185 ) ; tok@var246 ; tok@var246 =@expr1073743186 tok@var246 .@expr1073743187 next (@expr1073743188 ) ) {
422: if (@expr1073743189 tok@var246 .@expr1073743190 str (@expr1073743191 ) ==@expr1073743192 "x" &&@expr1073743193 tok@var246 .@expr1073743194 linenr (@expr1073743195 ) ==@expr1073743196 linenr@var241 ) {
423: for (@expr1073743197 const ValueFlow ::@expr1073743198 Value &@expr1073743199 v@var247 :@expr1073743200 tok@var246 .@expr1073743201 values (@expr1073743202 ) ) {
424: if (@expr1073743203 v@var247 .@expr1073743204 valueType@var248 ==@expr1073743205 type@var243 &&@expr1073743206 v@var247 .@expr1073743207 intvalue@var249 ==@expr1073743208 value@var242 ) {
425: return true ; }
426: }
427: }
428: }
429:
430: return false ;
431: }
432:
433: bool testValueOfX_ ( const char * file@var250 , int line@var251 , const char code@var252 [ ] , unsigned int linenr@var253 , ValueFlow :: Value :: MoveKind moveKind@var254 ) {
434:
435: Tokenizer tokenizer@var255 (@expr1073743209 &@expr1073743210 settings@var102 , this@expr1073743211 ) ;
436: std ::@expr1073743212 istringstream istr@var256 (@expr1073743213 code@var252 ) ;
437: $assert_ $(@expr1073743214 file@var250 $, line@var251 $, $(@expr1073743215 tokenizer@var255 .@expr1073743216 tokenize (@expr1073743217 istr@var256 , "test.cpp" ) $) $) ;
438:
439: for (@expr1073743218 const Token *@expr1073743219 tok@var257 =@expr1073743220 tokenizer@var255 .@expr1073743221 tokens (@expr1073743222 ) ; tok@var257 ; tok@var257 =@expr1073743223 tok@var257 .@expr1073743224 next (@expr1073743225 ) ) {
440: if (@expr1073743226 tok@var257 .@expr1073743227 str (@expr1073743228 ) ==@expr1073743229 "x" &&@expr1073743230 tok@var257 .@expr1073743231 linenr (@expr1073743232 ) ==@expr1073743233 linenr@var253 ) {
441: for (@expr1073743234 const ValueFlow ::@expr1073743235 Value &@expr1073743236 v@var258 :@expr1073743237 tok@var257 .@expr1073743238 values (@expr1073743239 ) ) {
442: if (@expr1073743240 v@var258 .@expr1073743241 isMovedValue (@expr1073743242 ) &&@expr1073743243 v@var258 .@expr1073743244 moveKind@var259 ==@expr1073743245 moveKind@var254 ) {
443: return true ; }
444: }
445: }
446: }
447:
448: return false ;
449: }
450:
451:
452: bool testConditionalValueOfX_ ( const char code@var260 [ ] , unsigned int linenr@var261 , int value@var262 , const char * file@var263 , int line@var264 ) {
453:
454: Tokenizer tokenizer@var265 (@expr1073743246 &@expr1073743247 settings@var102 , this@expr1073743248 ) ;
455: std ::@expr1073743249 istringstream istr@var266 (@expr1073743250 code@var260 ) ;
456: $assert_ $(@expr1073743251 file@var263 $, line@var264 $, $(@expr1073743252 tokenizer@var265 .@expr1073743253 tokenize (@expr1073743254 istr@var266 , "test.cpp" ) $) $) ;
457:
458: for (@expr1073743255 const Token *@expr1073743256 tok@var267 =@expr1073743257 tokenizer@var265 .@expr1073743258 tokens (@expr1073743259 ) ; tok@var267 ; tok@var267 =@expr1073743260 tok@var267 .@expr1073743261 next (@expr1073743262 ) ) {
459: if (@expr1073743263 tok@var267 .@expr1073743264 str (@expr1073743265 ) ==@expr1073743266 "x" &&@expr1073743267 tok@var267 .@expr1073743268 linenr (@expr1073743269 ) ==@expr1073743270 linenr@var261 ) {
460: for (@expr1073743271 const ValueFlow ::@expr1073743272 Value &@expr1073743273 v@var268 :@expr1073743274 tok@var267 .@expr1073743275 values (@expr1073743276 ) ) {
461: if (@expr1073743277 v@var268 .@expr1073743278 isIntValue (@expr1073743279 ) &&@expr1073743280 v@var268 .@expr1073743281 intvalue@var269 ==@expr1073743282 value@var262 &&@expr1073743283 v@var268 .@expr1073743284 condition@var270 ) {
462: return true ; }
463: }
464: }
465: }
466:
467: return false ;
468: }
469:
470: void bailout ( const char code@var271 [ ] ) {
471: settings@var102 .@expr1461 debugwarnings@var272 =@expr1073743286 true ;
472: errout@var100 .@expr1073743287 str (@expr1073743288 "" ) ;
473:
474: std ::@expr1073743289 vector < std ::@expr1466 string > files@var273 (@expr1073743291 1 , "test.cpp" ) ;
475: std ::@expr1073743292 istringstream istr@var274 (@expr1073743293 code@var271 ) ;
476: const simplecpp ::@expr1073743294 TokenList tokens1@var275 (@expr1073743295 istr@var274 , files@var273 , files@var273 [@expr1073743296 0 ] ) ;
477:
478: simplecpp ::@expr1073743297 TokenList tokens2@var276 (@expr1073743298 files@var273 ) ;
479: std ::@expr1073743299 map < std ::@expr1466 string , simplecpp ::@expr1466 TokenList *@expr1073743302 > filedata@var277 ;
480: simplecpp ::@expr1073743303 preprocess (@expr1073743304 tokens2@var276 , tokens1@var275 , files@var273 , filedata@var277 , simplecpp ::@expr1073743305 DUI (@expr1073743306 ) ) ;
481:
482:
483: Tokenizer tokenizer@var278 (@expr1073743307 &@expr1073743308 settings@var102 , this@expr1073743309 ) ;
484: tokenizer@var278 .@expr1073743310 createTokens (@expr1073743311 std ::@expr1073743312 move (@expr1073743313 tokens2@var276 ) ) ;
485: tokenizer@var278 .@expr1073743314 simplifyTokens1 (@expr1073743315 "" ) ;
486:
487: settings@var102 .@expr1461 debugwarnings@var272 =@expr1073743317 false ;
488: }
489:
490:
491: std :: list < ValueFlow :: Value > tokenValues_ ( const char * file@var279 , int line@var280 , const char code@var281 [ ] , const char tokstr@var282 [ ] , const Settings * s@var283 = nullptr ) {
492: Tokenizer tokenizer@var284 (@expr1073743318 s@var283 ?@expr1073743319 s@var283 :@expr1073743320 &@expr1073743321 settings@var102 , this@expr1073743322 ) ;
493: std ::@expr1073743323 istringstream istr@var285 (@expr1073743324 code@var281 ) ;
494: errout@var100 .@expr1073743325 str (@expr1073743326 "" ) ;
495: $assert_ $(@expr1073743327 file@var279 $, line@var280 $, $(@expr1073743328 tokenizer@var284 .@expr1073743329 tokenize (@expr1073743330 istr@var285 , "test.cpp" ) $) $) ;
496: const Token * tok@var286 ; tok@var286 =@expr1073743331 Token ::@expr1073743332 findmatch (@expr1073743333 tokenizer@var284 .@expr1073743334 tokens (@expr1073743335 ) , tokstr@var282 ) ;
497: return tok@var286 ?@expr1073743336 tok@var286 .@expr1073743337 values (@expr1073743338 ) :@expr1073743339 std ::@expr1073743340 list < ValueFlow ::@expr1073743341 Value > (@expr1073743342 ) ;
498: }
499:
500: std :: list < ValueFlow :: Value > tokenValues_ ( const char * file@var287 , int line@var288 , const char code@var289 [ ] , const char tokstr@var290 [ ] , ValueFlow :: Value :: ValueType vt@var291 , const Settings * s@var292 = nullptr ) {
501: std ::@expr1073743343 list < ValueFlow ::@expr1520 Value > values@var293 ; values@var293 =@expr1073743345 tokenValues_ (@expr1073743346 file@var287 , line@var288 , code@var289 , tokstr@var290 , s@var292 ) ;
502: values@var293 .@expr1073743347 remove_if (@expr1073743348 [@expr1073743349 &@expr1526 ] (@expr1073743351 const ValueFlow ::@expr1520 Value &@expr1526 v@var294 ) {
503: return v@var294 .@expr1073743354 valueType@var295 !=@expr1073743355 vt@var291 ;
504: } ) ;
505: return values@var293 ;
506: }
507:
508:
509: std :: vector < std :: string > lifetimeValues_ ( const char * file@var296 , int line@var297 , const char code@var298 [ ] , const char tokstr@var299 [ ] , const Settings * s@var300 = nullptr ) {
510: std ::@expr1073743356 vector < std ::@expr1533 string > result@var301 ;
511: Tokenizer tokenizer@var302 (@expr1073743358 s@var300 ?@expr1073743359 s@var300 :@expr1073743360 &@expr1073743361 settings@var102 , this@expr1073743362 ) ;
512: std ::@expr1073743363 istringstream istr@var303 (@expr1073743364 code@var298 ) ;
513: errout@var100 .@expr1073743365 str (@expr1073743366 "" ) ;
514: $assert_ $(@expr1073743367 file@var296 $, line@var297 $, $(@expr1073743368 tokenizer@var302 .@expr1073743369 tokenize (@expr1073743370 istr@var303 , "test.cpp" ) $) $) ;
515: const Token * tok@var304 ; tok@var304 =@expr1073743371 Token ::@expr1073743372 findmatch (@expr1073743373 tokenizer@var302 .@expr1073743374 tokens (@expr1073743375 ) , tokstr@var299 ) ;
516: if (@expr1073743376 !@expr1073743377 tok@var304 ) {
517: return result@var301 ; }
518: for (@expr1073743378 const ValueFlow ::@expr1533 Value &@expr1073743380 value@var305 :@expr1073743381 tok@var304 .@expr1073743382 values (@expr1073743383 ) ) {
519: if (@expr1073743384 !@expr1073743385 value@var305 .@expr1073743386 isLifetimeValue (@expr1073743387 ) ) {
520: continue ; }
521: if (@expr1073743388 !@expr1073743389 value@var305 .@expr1566 tokvalue@var306 ) {
522: continue ; }
523: result@var301 .@expr1073743391 push_back (@expr1073743392 value@var305 .@expr1566 tokvalue@var306 .@expr1073743394 expressionString (@expr1073743395 ) ) ;
524: }
525: return result@var301 ;
526: }
527:
528:
529: ValueFlow :: Value valueOfTok_ ( const char code@var307 [ ] , const char tokstr@var308 [ ] , const char * file@var309 , int line@var310 ) {
530: std ::@expr1073743396 list < ValueFlow ::@expr1073743397 Value > values@var311 ; values@var311 =@expr1073743398 removeImpossible (@expr1073743399 tokenValues_ (@expr1073743400 file@var309 , line@var310 , code@var307 , tokstr@var308 ) ) ;
531: return values@var311 .@expr1073743401 size (@expr1073743402 ) ==@expr1073743403 1U &&@expr1073743404 !@expr1073743405 values@var311 .@expr1582 front (@expr1583 ) .@expr1073743408 isTokValue (@expr1073743409 ) ?@expr1073743410 values@var311 .@expr1582 front (@expr1583 ) :@expr1073743413 ValueFlow ::@expr1073743414 Value (@expr1073743415 ) ;
532: }
533:
534: std :: list < ValueFlow :: Value > removeSymbolic ( std :: list < ValueFlow :: Value > values@var312 )
535: {
536: values@var312 .@expr1073743417 remove_if (@expr1073743418 std ::@expr1073743419 mem_fn (@expr1073743420 &@expr1073743421 ValueFlow ::@expr1073743422 Value ::@expr1073743423 isSymbolicValue@expr1073743416 ) ) ;
537: return values@var312 ;
538: }
539:
540: std :: list < ValueFlow :: Value > removeImpossible ( std :: list < ValueFlow :: Value > values@var313 )
541: {
542: values@var313 .@expr1073743425 remove_if (@expr1073743426 std ::@expr1073743427 mem_fn (@expr1073743428 &@expr1073743429 ValueFlow ::@expr1073743430 Value ::@expr1073743431 isImpossible@expr1073743424 ) ) ;
543: return values@var313 ;
544: }
545:
546: void valueFlowNumber ( ) {
547: $if $(@expr1073743445 $!@expr1073743446 $assertEquals $(@expr1073743447 "cppcheck-2.8/test/testvalueflow.cpp" $, 547 $, 123 $, $(@expr1073743448 $valueOfTok_ $(@expr1073743449 "x=123;" $, "123" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 547 $) .@expr1073743450 intvalue@expr1073743432 $) $) $) { $return ; }
548: $assertEqualsDouble $(@expr1073743451 "cppcheck-2.8/test/testvalueflow.cpp" $, 548 $, 192.0 $, $valueOfTok_ $(@expr1073743452 "x=0x0.3p10;" $, "0x0.3p10" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 548 $) .@expr1073743453 floatValue@expr1073743433 $, 1e-5 $) ;
549: $if $(@expr1073743454 $!@expr1073743455 $assert_ $(@expr1073743456 "cppcheck-2.8/test/testvalueflow.cpp" $, 549 $, $(@expr1073743457 std ::@expr1073743458 fabs (@expr1073743459 $valueOfTok_ $(@expr1073743460 "x=0.5;" $, "0.5" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 549 $) .@expr1073743461 floatValue@expr1073743434 -@expr1073743462 0.5f ) <@expr1073743463 0.1f $) $) $) { $return ; }
550: $if $(@expr1073743464 $!@expr1073743465 $assertEquals $(@expr1073743466 "cppcheck-2.8/test/testvalueflow.cpp" $, 550 $, 10 $, $(@expr1073743467 $valueOfTok_ $(@expr1073743468 "enum {A=10,B=15}; x=A+0;" $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 550 $) .@expr1073743469 intvalue@expr1073743435 $) $) $) { $return ; }
551: $if $(@expr1073743470 $!@expr1073743471 $assertEquals $(@expr1073743472 "cppcheck-2.8/test/testvalueflow.cpp" $, 551 $, 0 $, $(@expr1073743473 $valueOfTok_ $(@expr1073743474 "x=false;" $, "false" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 551 $) .@expr1073743475 intvalue@expr1073743436 $) $) $) { $return ; }
552: $if $(@expr1073743476 $!@expr1073743477 $assertEquals $(@expr1073743478 "cppcheck-2.8/test/testvalueflow.cpp" $, 552 $, 1 $, $(@expr1073743479 $valueOfTok_ $(@expr1073743480 "x=true;" $, "true" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 552 $) .@expr1073743481 intvalue@expr1073743437 $) $) $) { $return ; }
553: $if $(@expr1073743482 $!@expr1073743483 $assertEquals $(@expr1073743484 "cppcheck-2.8/test/testvalueflow.cpp" $, 553 $, 0 $, $(@expr1073743485 $valueOfTok_ $(@expr1073743486 "x(NULL);" $, "NULL" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 553 $) .@expr1073743487 intvalue@expr1073743438 $) $) $) { $return ; }
554: $if $(@expr1073743488 $!@expr1073743489 $assertEquals $(@expr1073743490 "cppcheck-2.8/test/testvalueflow.cpp" $, 554 $, (@expr1073743491 int ) (@expr1073743492 'a' ) $, $(@expr1073743493 $valueOfTok_ $(@expr1073743494 "x='a';" $, "'a'" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 554 $) .@expr1073743495 intvalue@expr1073743439 $) $) $) { $return ; }
555: $if $(@expr1073743496 $!@expr1073743497 $assertEquals $(@expr1073743498 "cppcheck-2.8/test/testvalueflow.cpp" $, 555 $, (@expr1073743499 int ) (@expr1073743500 '\n' ) $, $(@expr1073743501 $valueOfTok_ $(@expr1073743502 "x='\\n';" $, "'\\n'" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 555 $) .@expr1073743503 intvalue@expr1073743440 $) $) $) { $return ; }
556: $todoAssertEquals $(@expr1073743504 "cppcheck-2.8/test/testvalueflow.cpp" $, 556 $, 0xFFFFFFFF00000000 $, 0 $, $valueOfTok_ $(@expr1073743505 "x=0xFFFFFFFF00000000;" $, "0xFFFFFFFF00000000" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 556 $) .@expr1073743506 intvalue@expr1073743441 $) ;
557: $assertEqualsDouble $(@expr1073743507 "cppcheck-2.8/test/testvalueflow.cpp" $, 557 $, 16 $, $valueOfTok_ $(@expr1073743508 "x=(double)16;" $, "(" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 557 $) .@expr1073743509 floatValue@expr1073743442 $, 1e-5 $) ;
558: $assertEqualsDouble $(@expr1073743510 "cppcheck-2.8/test/testvalueflow.cpp" $, 558 $, 0.0625 $, $valueOfTok_ $(@expr1073743511 "x=1/(double)16;" $, "/" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 558 $) .@expr1073743512 floatValue@expr1073743443 $, 1e-5 $) ;
559:
560:
561: {
562: const char code@var314 [@expr1073743513 58 ] =@expr1073743514 "namespace N { enum E {e0,e1}; }\nvoid foo() { x = N::e1; }"
563: ;
564: $if $(@expr1073743515 $!@expr1073743516 $assertEquals $(@expr1073743517 "cppcheck-2.8/test/testvalueflow.cpp" $, 564 $, 1 $, $(@expr1073743518 $valueOfTok_ $(@expr1073743519 code@var314 $, "::" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 564 $) .@expr1073743520 intvalue@expr1073743444 $) $) $) { $return ; }
565: }
566: }
567:
568: void valueFlowString ( ) {
569: const char * code@var315 ;
570:
571:
572: code@var315 =@expr1073743522 "const char * f() {\n    static const char *x;\n    if (a) x = \"123\";\n    return x;\n}"
573:
574:
575:
576: ;
577: $if $(@expr1073743523 $!@expr1073743524 $assertEquals $(@expr1073743525 "cppcheck-2.8/test/testvalueflow.cpp" $, 577 $, true $, $testValueOfX_ $(@expr1073743526 "cppcheck-2.8/test/testvalueflow.cpp" $, 577 $, code@var315 , 4 , "\"123\"" , ValueFlow ::@expr1703 Value ::@expr1704 ValueType ::@expr1705 TOK@expr1697 $) $) $) { $return ; }
578:
579:
580: code@var315 =@expr1073743530 "void dostuff(const char *x) {\n  f(x);\n}\n\nvoid test() { dostuff(\"abc\"); }"
581:
582:
583:
584: ;
585: $if $(@expr1073743531 $!@expr1073743532 $assertEquals $(@expr1073743533 "cppcheck-2.8/test/testvalueflow.cpp" $, 585 $, true $, $testValueOfX_ $(@expr1073743534 "cppcheck-2.8/test/testvalueflow.cpp" $, 585 $, code@var315 , 2 , "\"abc\"" , ValueFlow ::@expr1703 Value ::@expr1704 ValueType ::@expr1705 TOK@expr1697 $) $) $) { $return ; }
586: }
587:
588: void valueFlowPointerAlias ( ) {
589: const char * code@var316 ;
590: std ::@expr1073743539 list < ValueFlow ::@expr1073743540 Value > values@var317 ;
591:
592: code@var316 =@expr1073743541 "const char * f() {\n    static const char *x;\n    static char ret[10];\n    if (a) x = &ret[0];\n    return x;\n}"
593:
|
596:
597: ;
598: $if $(@expr1073743542 $!@expr1073743543 $assertEquals $(@expr1073743544 "cppcheck-2.8/test/testvalueflow.cpp" $, 598 $, true $, $testValueOfX_ $(@expr1073743545 "cppcheck-2.8/test/testvalueflow.cpp" $, 598 $, code@var316 , 5 , "& ret [ 0 ]" , ValueFlow ::@expr1722 Value ::@expr1723 ValueType ::@expr1724 TOK@expr1714 $) $) $) { $return ; }
599:
600:
601: code@var316 =@expr1073743549 "void f() {\n  int *x;\n  if (cond) { int i; x = &i; }\n  *x = 0;\n}"
602:
603:
604:
605: ;
606: $if $(@expr1073743550 $!@expr1073743551 $assertEquals $(@expr1073743552 "cppcheck-2.8/test/testvalueflow.cpp" $, 606 $, true $, $testValueOfX_ $(@expr1073743553 "cppcheck-2.8/test/testvalueflow.cpp" $, 606 $, code@var316 , 4 , "& i" , ValueFlow ::@expr1722 Value ::@expr1723 ValueType ::@expr1724 TOK@expr1714 $) $) $) { $return ; }
607:
608: code@var316 =@expr1073743557 "void f() {\n  struct X *x;\n  x = &x[1];\n}"
609:
610:
611: ;
612: values@var317 =@expr1073743558 $tokenValues_ $(@expr1073743559 "cppcheck-2.8/test/testvalueflow.cpp" $, 612 $, code@var316 , "&" $) ;
613: values@var317 .@expr1736 remove_if (@expr1737 &@expr1738 isNotTokValue ) ;
614: $if $(@expr1073743563 $!@expr1073743564 $assertEquals $(@expr1073743565 "cppcheck-2.8/test/testvalueflow.cpp" $, 614 $, true $, values@var317 .@expr1742 empty (@expr1743 ) $) $) { $return ; }
615:
616: values@var317 =@expr1073743568 $tokenValues_ $(@expr1073743569 "cppcheck-2.8/test/testvalueflow.cpp" $, 616 $, code@var316 , "x [" $) ;
617: values@var317 .@expr1736 remove_if (@expr1737 &@expr1738 isNotTokValue ) ;
618: $if $(@expr1073743573 $!@expr1073743574 $assertEquals $(@expr1073743575 "cppcheck-2.8/test/testvalueflow.cpp" $, 618 $, true $, values@var317 .@expr1742 empty (@expr1743 ) $) $) { $return ; }
619: }
620:
621: void valueFlowLifetime ( ) {
622: const char * code@var318 ;
623: std ::@expr1073743578 vector < std ::@expr1073743579 string > lifetimes@var319 ;
624:
625: $do ${ $if $(@expr1073743580 settings@var102 .@expr1073743581 library@var104 $.@expr1073743582 $load $(@expr1073743583 $exename@var11 $.@expr1073743584 $c_str $(@expr1073743585 $) $, "std.cfg" $) $.@expr1073743586 $errorcode $!=@expr1073743587 $Library $::@expr1073743588 $ErrorCode $::@expr1073743589 $OK $) ${ $complainMissingLib $(@expr1073743590 "std.cfg" $) $; $return $; $} $} $while $(@expr1073743591 $false $) ;
626:
627: code@var318 =@expr1073743592 "void f() {\n    int a = 1;\n    auto x = [&]() { return a + 1; };\n    auto b = x;\n}\n"
628:
629:
630:
631: ;
632: $if $(@expr1073743593 $!@expr1073743594 $assertEquals $(@expr1073743595 "cppcheck-2.8/test/testvalueflow.cpp" $, 632 $, true $, $testLifetimeOfX_ $(@expr1073743596 "cppcheck-2.8/test/testvalueflow.cpp" $, 632 $, code@var318 , 4 , "a + 1" $) $) $) { $return ; }
633:
634: code@var318 =@expr1073743597 "void f() {\n    int a = 1;\n    auto x = [=]() { return a + 1; };\n    auto b = x;\n}\n"
635:
636:
637:
638: ;
639: $if $(@expr1073743598 $!@expr1073743599 $assertEquals $(@expr1073743600 "cppcheck-2.8/test/testvalueflow.cpp" $, 639 $, false $, $testLifetimeOfX_ $(@expr1073743601 "cppcheck-2.8/test/testvalueflow.cpp" $, 639 $, code@var318 , 4 , "a ;" $) $) $) { $return ; }
640:
641: code@var318 =@expr1073743602 "void f(int v) {\n    int a = v;\n    int * p = &a;\n    auto x = [=]() { return p + 1; };\n    auto b = x;\n}\n"
642:
|
645:
646: ;
647: $if $(@expr1073743603 $!@expr1073743604 $assertEquals $(@expr1073743605 "cppcheck-2.8/test/testvalueflow.cpp" $, 647 $, true $, $testLifetimeOfX_ $(@expr1073743606 "cppcheck-2.8/test/testvalueflow.cpp" $, 647 $, code@var318 , 5 , "a ;" $) $) $) { $return ; }
648:
649: code@var318 =@expr1073743607 "void f() {\n    std::vector<int> v;\n    auto x = v.begin();\n    auto it = x;\n}\n"
650:
651:
652:
653: ;
654: $if $(@expr1073743608 $!@expr1073743609 $assertEquals $(@expr1073743610 "cppcheck-2.8/test/testvalueflow.cpp" $, 654 $, true $, $testLifetimeOfX_ $(@expr1073743611 "cppcheck-2.8/test/testvalueflow.cpp" $, 654 $, code@var318 , 4 , "v . begin" $) $) $) { $return ; }
655:
656: code@var318 =@expr1073743612 "void f() {\n    std::vector<int> v;\n    auto x = v.begin() + 1;\n    auto it = x;\n}\n"
657:
658:
659:
660: ;
661: $if $(@expr1073743613 $!@expr1073743614 $assertEquals $(@expr1073743615 "cppcheck-2.8/test/testvalueflow.cpp" $, 661 $, true $, $testLifetimeOfX_ $(@expr1073743616 "cppcheck-2.8/test/testvalueflow.cpp" $, 661 $, code@var318 , 4 , "v . begin" $) $) $) { $return ; }
662:
663: code@var318 =@expr1073743617 "int* f() {\n    std::vector<int> v;\n    int * x = v.data();\n    return x;\n}\n"
664:
665:
666:
667: ;
668: $if $(@expr1073743618 $!@expr1073743619 $assertEquals $(@expr1073743620 "cppcheck-2.8/test/testvalueflow.cpp" $, 668 $, true $, $testLifetimeOfX_ $(@expr1073743621 "cppcheck-2.8/test/testvalueflow.cpp" $, 668 $, code@var318 , 4 , "v . data" $) $) $) { $return ; }
669:
670: code@var318 =@expr1073743622 "int* f() {\n    std::vector<int> v;\n    int * x = v.data() + 1;\n    return x;\n}\n"
671:
672:
673:
674: ;
675: $if $(@expr1073743623 $!@expr1073743624 $assertEquals $(@expr1073743625 "cppcheck-2.8/test/testvalueflow.cpp" $, 675 $, true $, $testLifetimeOfX_ $(@expr1073743626 "cppcheck-2.8/test/testvalueflow.cpp" $, 675 $, code@var318 , 4 , "v . data" $) $) $) { $return ; }
676:
677: code@var318 =@expr1073743627 "int f(int* a) {\n    int **p = &a;\n    int * x = *p;\n    return x; \n}\n"
678:
679:
680:
681: ;
682: $if $(@expr1073743628 $!@expr1073743629 $assertEquals $(@expr1073743630 "cppcheck-2.8/test/testvalueflow.cpp" $, 682 $, false $, $testLifetimeOfX_ $(@expr1073743631 "cppcheck-2.8/test/testvalueflow.cpp" $, 682 $, code@var318 , 4 , "a" $) $) $) { $return ; }
683:
684: code@var318 =@expr1073743632 "void f() {\n    int i = 0;\n    void* x = (void*)&i;\n}\n"
685:
686:
687: ;
688: lifetimes@var319 =@expr1073743633 $lifetimeValues_ $(@expr1073743634 "cppcheck-2.8/test/testvalueflow.cpp" $, 688 $, code@var318 , "( void * )" $) ;
689: $if $(@expr1073743635 $!@expr1073743636 $assertEquals $(@expr1073743637 "cppcheck-2.8/test/testvalueflow.cpp" $, 689 $, true $, lifetimes@var319 .@expr1073743638 size (@expr1073743639 ) ==@expr1073743640 1 $) $) { $return ; }
690: $if $(@expr1073743641 $!@expr1073743642 $assertEquals $(@expr1073743643 "cppcheck-2.8/test/testvalueflow.cpp" $, 690 $, true $, lifetimes@var319 .@expr1073743644 front (@expr1073743645 ) ==@expr1073743646 "i" $) $) { $return ; }
691:
692: code@var318 =@expr1073743647 "struct T {\n    static int g() { return 0; }\n};\nT t;\nstruct S { int i; };\nS f() {\n    S s = { decltype(t)::g() };\n    return s;\n};\n"
693:
|
699:
700: ;
701: lifetimes@var319 =@expr1073743648 $lifetimeValues_ $(@expr1073743649 "cppcheck-2.8/test/testvalueflow.cpp" $, 701 $, code@var318 , "=" $) ;
702: $if $(@expr1073743650 $!@expr1073743651 $assertEquals $(@expr1073743652 "cppcheck-2.8/test/testvalueflow.cpp" $, 702 $, true $, lifetimes@var319 .@expr1829 empty (@expr1830 ) $) $) { $return ; }
703:
704: code@var318 =@expr1073743655 "struct T {\n     void f();\n     double d[4][4];\n};\nvoid T::f() {\n    auto g = [this]() -> double(&)[4] {\n        double(&q)[4] = d[0];\n        return q;\n    };\n}\n"
705:
|
712:
713: ;
714: lifetimes@var319 =@expr1073743656 $lifetimeValues_ $(@expr1073743657 "cppcheck-2.8/test/testvalueflow.cpp" $, 714 $, code@var318 , "return" $) ;
715: $if $(@expr1073743658 $!@expr1073743659 $assertEquals $(@expr1073743660 "cppcheck-2.8/test/testvalueflow.cpp" $, 715 $, true $, lifetimes@var319 .@expr1829 empty (@expr1830 ) $) $) { $return ; }
716: }
717:
718: void valueFlowArrayElement ( ) {
719: const char * code@var320 ;
720:
721: code@var320 =@expr1073743666 "void f() {\n    const int x[] = {43,23,12};\n    return x;\n}"
722:
723:
724: ;
725: $if $(@expr1073743667 $!@expr1073743668 $assertEquals $(@expr1073743669 "cppcheck-2.8/test/testvalueflow.cpp" $, 725 $, true $, $testValueOfX_ $(@expr1073743670 "cppcheck-2.8/test/testvalueflow.cpp" $, 725 $, code@var320 , 3U , "{ 43 , 23 , 12 }" , ValueFlow ::@expr1847 Value ::@expr1848 ValueType ::@expr1849 TOK@expr1839 $) $) $) { $return ; }
726:
727: code@var320 =@expr1073743674 "void f() {\n    const char x[] = \"abcd\";\n    return x;\n}"
728:
729:
730: ;
731: $if $(@expr1073743675 $!@expr1073743676 $assertEquals $(@expr1073743677 "cppcheck-2.8/test/testvalueflow.cpp" $, 731 $, true $, $testValueOfX_ $(@expr1073743678 "cppcheck-2.8/test/testvalueflow.cpp" $, 731 $, code@var320 , 3U , "\"abcd\"" , ValueFlow ::@expr1847 Value ::@expr1848 ValueType ::@expr1849 TOK@expr1839 $) $) $) { $return ; }
732:
733: code@var320 =@expr1073743682 "void f() {\n    char x[32] = \"abcd\";\n    return x;\n}"
734:
735:
736: ;
737: $todoAssertEquals $(@expr1073743683 "cppcheck-2.8/test/testvalueflow.cpp" $, 737 $, true $, false $, $testValueOfX_ $(@expr1073743684 "cppcheck-2.8/test/testvalueflow.cpp" $, 737 $, code@var320 , 3U , "\"abcd\"" , ValueFlow ::@expr1847 Value ::@expr1848 ValueType ::@expr1849 TOK@expr1839 $) $) ;
738:
739: code@var320 =@expr1073743688 "void f() {\n  int a[10];\n  int *x = a;\n  *x = 0;\n}"
740:
741:
742:
743: ;
744: $if $(@expr1073743689 $!@expr1073743690 $assertEquals $(@expr1073743691 "cppcheck-2.8/test/testvalueflow.cpp" $, 744 $, true $, $testValueOfX_ $(@expr1073743692 "cppcheck-2.8/test/testvalueflow.cpp" $, 744 $, code@var320 , 4 , "a" , ValueFlow ::@expr1847 Value ::@expr1848 ValueType ::@expr1849 TOK@expr1839 $) $) $) { $return ; }
745:
746: code@var320 =@expr1073743696 "char f() {\n    const char *x = \"abcd\";\n    return x[0];\n}"
747:
748:
749: ;
750: $if $(@expr1073743697 $!@expr1073743698 $assertEquals $(@expr1073743699 "cppcheck-2.8/test/testvalueflow.cpp" $, 750 $, (@expr1073743700 int ) (@expr1073743701 'a' ) $, $(@expr1073743702 $valueOfTok_ $(@expr1073743703 code@var320 $, "[" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 750 $) .@expr1073743704 intvalue@expr1073743664 $) $) $) { $return ; }
751:
752: code@var320 =@expr1073743705 "char f() {\n    const char *x = \"\";\n    return x[0];\n}"
753:
754:
755: ;
756: $if $(@expr1073743706 $!@expr1073743707 $assertEquals $(@expr1073743708 "cppcheck-2.8/test/testvalueflow.cpp" $, 756 $, 0 $, $(@expr1073743709 $valueOfTok_ $(@expr1073743710 code@var320 $, "[" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 756 $) .@expr1073743711 intvalue@expr1073743665 $) $) $) { $return ; }
757: }
758:
759: void valueFlowMove ( ) {
760: const char * code@var321 ;
761:
762: code@var321 =@expr1073743714 "void f() {\n   X x;\n   g(std::move(x));\n   y=x;\n}"
763:
764:
765:
766: ;
767: $if $(@expr1073743715 $!@expr1073743716 $assertEquals $(@expr1073743717 "cppcheck-2.8/test/testvalueflow.cpp" $, 767 $, true $, $testValueOfX_ $(@expr1073743718 "cppcheck-2.8/test/testvalueflow.cpp" $, 767 $, code@var321 , 4U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1897 MovedVariable@expr1888 $) $) $) { $return ; }
768:
769: code@var321 =@expr1073743722 "void f() {\n   X x;\n   g(std::forward<X>(x));\n   y=x;\n}"
770:
771:
772:
773: ;
774: $if $(@expr1073743723 $!@expr1073743724 $assertEquals $(@expr1073743725 "cppcheck-2.8/test/testvalueflow.cpp" $, 774 $, true $, $testValueOfX_ $(@expr1073743726 "cppcheck-2.8/test/testvalueflow.cpp" $, 774 $, code@var321 , 4U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1905 ForwardedVariable@expr1889 $) $) $) { $return ; }
775:
776: code@var321 =@expr1073743730 "void f() {\n   X x;\n   g(std::move(x).getA());\n   y=x;\n}"
777:
778:
779:
780: ;
781: $if $(@expr1073743731 $!@expr1073743732 $assertEquals $(@expr1073743733 "cppcheck-2.8/test/testvalueflow.cpp" $, 781 $, false $, $testValueOfX_ $(@expr1073743734 "cppcheck-2.8/test/testvalueflow.cpp" $, 781 $, code@var321 , 4U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1897 MovedVariable@expr1888 $) $) $) { $return ; }
782:
783: code@var321 =@expr1073743738 "void f() {\n   X x;\n   g(std::forward<X>(x).getA());\n   y=x;\n}"
784:
785:
786:
787: ;
788: $if $(@expr1073743739 $!@expr1073743740 $assertEquals $(@expr1073743741 "cppcheck-2.8/test/testvalueflow.cpp" $, 788 $, false $, $testValueOfX_ $(@expr1073743742 "cppcheck-2.8/test/testvalueflow.cpp" $, 788 $, code@var321 , 4U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1905 ForwardedVariable@expr1889 $) $) $) { $return ; }
789:
790: code@var321 =@expr1073743746 "void f() {\n   X x;\n   g(std::move(x));\n   x.clear();\n   y=x;\n}"
791:
|
794:
795: ;
796: $if $(@expr1073743747 $!@expr1073743748 $assertEquals $(@expr1073743749 "cppcheck-2.8/test/testvalueflow.cpp" $, 796 $, false $, $testValueOfX_ $(@expr1073743750 "cppcheck-2.8/test/testvalueflow.cpp" $, 796 $, code@var321 , 5U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1897 MovedVariable@expr1888 $) $) $) { $return ; }
797:
798: code@var321 =@expr1073743754 "void f() {\n   X x;\n   g(std::move(x));\n   y=x->y;\n   z=x->z;\n}"
799:
|
802:
803: ;
804: $if $(@expr1073743755 $!@expr1073743756 $assertEquals $(@expr1073743757 "cppcheck-2.8/test/testvalueflow.cpp" $, 804 $, true $, $testValueOfX_ $(@expr1073743758 "cppcheck-2.8/test/testvalueflow.cpp" $, 804 $, code@var321 , 5U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1897 MovedVariable@expr1888 $) $) $) { $return ; }
805:
806: code@var321 =@expr1073743762 "void f(int i) {\n    X x;\n    z = g(std::move(x));\n    y = x;\n}"
807:
808:
809:
810: ;
811: $if $(@expr1073743763 $!@expr1073743764 $assertEquals $(@expr1073743765 "cppcheck-2.8/test/testvalueflow.cpp" $, 811 $, true $, $testValueOfX_ $(@expr1073743766 "cppcheck-2.8/test/testvalueflow.cpp" $, 811 $, code@var321 , 4U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1897 MovedVariable@expr1888 $) $) $) { $return ; }
812:
813: code@var321 =@expr1073743770 "void f(int i) {\n    X x;\n    y = g(std::move(x),\n          x.size());\n}"
814:
815:
816:
817: ;
818: $if $(@expr1073743771 $!@expr1073743772 $assertEquals $(@expr1073743773 "cppcheck-2.8/test/testvalueflow.cpp" $, 818 $, false $, $testValueOfX_ $(@expr1073743774 "cppcheck-2.8/test/testvalueflow.cpp" $, 818 $, code@var321 , 4U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1897 MovedVariable@expr1888 $) $) $) { $return ; }
819:
820: code@var321 =@expr1073743778 "void f(int i) {\n    X x;\n    x = g(std::move(x));\n    y = x;\n}"
821:
822:
823:
824: ;
825: $if $(@expr1073743779 $!@expr1073743780 $assertEquals $(@expr1073743781 "cppcheck-2.8/test/testvalueflow.cpp" $, 825 $, false $, $testValueOfX_ $(@expr1073743782 "cppcheck-2.8/test/testvalueflow.cpp" $, 825 $, code@var321 , 4U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1897 MovedVariable@expr1888 $) $) $) { $return ; }
826:
827: code@var321 =@expr1073743786 "A f(int i) {\n    X x;\n    if (i)        return g(std::move(x));\n    return h(std::move(x));\n}"
828:
|
831:
832: ;
833: $if $(@expr1073743787 $!@expr1073743788 $assertEquals $(@expr1073743789 "cppcheck-2.8/test/testvalueflow.cpp" $, 833 $, false $, $testValueOfX_ $(@expr1073743790 "cppcheck-2.8/test/testvalueflow.cpp" $, 833 $, code@var321 , 5U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1897 MovedVariable@expr1888 $) $) $) { $return ; }
834:
835: code@var321 =@expr1073743794 "struct X {\n};\nstruct Data {\n  template<typename Fun>\n  void foo(Fun f) {}\n};\nData g(X value) { return Data(); }\nvoid f() {\n   X x;\n   g(std::move(x)).foo([=](int value) mutable {;});\n   X y=x;\n}"
836:
|
845:
846: ;
847: $if $(@expr1073743795 $!@expr1073743796 $assertEquals $(@expr1073743797 "cppcheck-2.8/test/testvalueflow.cpp" $, 847 $, true $, $testValueOfX_ $(@expr1073743798 "cppcheck-2.8/test/testvalueflow.cpp" $, 847 $, code@var321 , 11U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1897 MovedVariable@expr1888 $) $) $) { $return ; }
848:
849: code@var321 =@expr1073743802 "void f(int x) {\n   g(std::move(x));\n   y=x;\n}"
850:
851:
852: ;
853: $if $(@expr1073743803 $!@expr1073743804 $assertEquals $(@expr1073743805 "cppcheck-2.8/test/testvalueflow.cpp" $, 853 $, false $, $testValueOfX_ $(@expr1073743806 "cppcheck-2.8/test/testvalueflow.cpp" $, 853 $, code@var321 , 3U , ValueFlow ::@expr1895 Value ::@expr1896 MoveKind ::@expr1897 MovedVariable@expr1888 $) $) $) { $return ; }
854: }
855:
856: void valueFlowCalculations ( ) {
857: const char * code@var322 ;
858:
859:
860: $if $(@expr1073743837 $!@expr1073743838 $assertEquals $(@expr1073743839 "cppcheck-2.8/test/testvalueflow.cpp" $, 860 $, 5 $, $(@expr1073743840 $valueOfTok_ $(@expr1073743841 "3 +  (a ? b : 2);" $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 860 $) .@expr1073743842 intvalue@expr1073743810 $) $) $) { $return ; }
861: $if $(@expr1073743843 $!@expr1073743844 $assertEquals $(@expr1073743845 "cppcheck-2.8/test/testvalueflow.cpp" $, 861 $, 1 $, $(@expr1073743846 $valueOfTok_ $(@expr1073743847 "3 -  (a ? b : 2);" $, "-" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 861 $) .@expr1073743848 intvalue@expr1073743811 $) $) $) { $return ; }
862: $if $(@expr1073743849 $!@expr1073743850 $assertEquals $(@expr1073743851 "cppcheck-2.8/test/testvalueflow.cpp" $, 862 $, 6 $, $(@expr1073743852 $valueOfTok_ $(@expr1073743853 "3 *  (a ? b : 2);" $, "*" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 862 $) .@expr1073743854 intvalue@expr1073743812 $) $) $) { $return ; }
863: $if $(@expr1073743855 $!@expr1073743856 $assertEquals $(@expr1073743857 "cppcheck-2.8/test/testvalueflow.cpp" $, 863 $, 6 $, $(@expr1073743858 $valueOfTok_ $(@expr1073743859 "13 / (a ? b : 2);" $, "/" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 863 $) .@expr1073743860 intvalue@expr1073743813 $) $) $) { $return ; }
864: $if $(@expr1073743861 $!@expr1073743862 $assertEquals $(@expr1073743863 "cppcheck-2.8/test/testvalueflow.cpp" $, 864 $, 1 $, $(@expr1073743864 $valueOfTok_ $(@expr1073743865 "13 % (a ? b : 2);" $, "%" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 864 $) .@expr1073743866 intvalue@expr1073743814 $) $) $) { $return ; }
865: $if $(@expr1073743867 $!@expr1073743868 $assertEquals $(@expr1073743869 "cppcheck-2.8/test/testvalueflow.cpp" $, 865 $, 0 $, $(@expr1073743870 $valueOfTok_ $(@expr1073743871 "3 == (a ? b : 2);" $, "==" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 865 $) .@expr1073743872 intvalue@expr1073743815 $) $) $) { $return ; }
866: $if $(@expr1073743873 $!@expr1073743874 $assertEquals $(@expr1073743875 "cppcheck-2.8/test/testvalueflow.cpp" $, 866 $, 1 $, $(@expr1073743876 $valueOfTok_ $(@expr1073743877 "3 != (a ? b : 2);" $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 866 $) .@expr1073743878 intvalue@expr1073743816 $) $) $) { $return ; }
867: $if $(@expr1073743879 $!@expr1073743880 $assertEquals $(@expr1073743881 "cppcheck-2.8/test/testvalueflow.cpp" $, 867 $, 1 $, $(@expr1073743882 $valueOfTok_ $(@expr1073743883 "3 >  (a ? b : 2);" $, ">" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 867 $) .@expr1073743884 intvalue@expr1073743817 $) $) $) { $return ; }
868: $if $(@expr1073743885 $!@expr1073743886 $assertEquals $(@expr1073743887 "cppcheck-2.8/test/testvalueflow.cpp" $, 868 $, 1 $, $(@expr1073743888 $valueOfTok_ $(@expr1073743889 "3 >= (a ? b : 2);" $, ">=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 868 $) .@expr1073743890 intvalue@expr1073743818 $) $) $) { $return ; }
869: $if $(@expr1073743891 $!@expr1073743892 $assertEquals $(@expr1073743893 "cppcheck-2.8/test/testvalueflow.cpp" $, 869 $, 0 $, $(@expr1073743894 $valueOfTok_ $(@expr1073743895 "3 <  (a ? b : 2);" $, "<" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 869 $) .@expr1073743896 intvalue@expr1073743819 $) $) $) { $return ; }
870: $if $(@expr1073743897 $!@expr1073743898 $assertEquals $(@expr1073743899 "cppcheck-2.8/test/testvalueflow.cpp" $, 870 $, 0 $, $(@expr1073743900 $valueOfTok_ $(@expr1073743901 "3 <= (a ? b : 2);" $, "<=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 870 $) .@expr1073743902 intvalue@expr1073743820 $) $) $) { $return ; }
871:
872: $if $(@expr1073743903 $!@expr1073743904 $assertEquals $(@expr1073743905 "cppcheck-2.8/test/testvalueflow.cpp" $, 872 $, 1 $, $(@expr1073743906 $valueOfTok_ $(@expr1073743907 "(UNKNOWN_TYPE)1;" $, "(" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 872 $) .@expr1073743908 intvalue@expr1073743821 $) $) $) { $return ; }
873: $if $(@expr1073743909 $!@expr1073743910 $assert_ $(@expr1073743911 "cppcheck-2.8/test/testvalueflow.cpp" $, 873 $, $(@expr1073743912 $tokenValues_ $(@expr1073743913 "cppcheck-2.8/test/testvalueflow.cpp" $, 873 $, "(UNKNOWN_TYPE)1000;" , "(" $) .@expr1073743914 empty (@expr1073743915 ) $) $) $) { $return ; }
874: $if $(@expr1073743916 $!@expr1073743917 $assertEquals $(@expr1073743918 "cppcheck-2.8/test/testvalueflow.cpp" $, 874 $, 255 $, $(@expr1073743919 $valueOfTok_ $(@expr1073743920 "(unsigned char)~0;" $, "(" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 874 $) .@expr1073743921 intvalue@expr1073743822 $) $) $) { $return ; }
875: $if $(@expr1073743922 $!@expr1073743923 $assertEquals $(@expr1073743924 "cppcheck-2.8/test/testvalueflow.cpp" $, 875 $, 0 $, $(@expr1073743925 $valueOfTok_ $(@expr1073743926 "(int)0;" $, "(" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 875 $) .@expr1073743927 intvalue@expr1073743823 $) $) $) { $return ; }
876: $if $(@expr1073743928 $!@expr1073743929 $assertEquals $(@expr1073743930 "cppcheck-2.8/test/testvalueflow.cpp" $, 876 $, 3 $, $(@expr1073743931 $valueOfTok_ $(@expr1073743932 "(int)(1+2);" $, "(" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 876 $) .@expr1073743933 intvalue@expr1073743824 $) $) $) { $return ; }
877: $if $(@expr1073743934 $!@expr1073743935 $assertEquals $(@expr1073743936 "cppcheck-2.8/test/testvalueflow.cpp" $, 877 $, 0 $, $(@expr1073743937 $valueOfTok_ $(@expr1073743938 "(UNKNOWN_TYPE*)0;" $, "(" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 877 $) .@expr1073743939 intvalue@expr1073743825 $) $) $) { $return ; }
878: $if $(@expr1073743940 $!@expr1073743941 $assertEquals $(@expr1073743942 "cppcheck-2.8/test/testvalueflow.cpp" $, 878 $, 100 $, $(@expr1073743943 $valueOfTok_ $(@expr1073743944 "(int)100.0;" $, "(" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 878 $) .@expr1073743945 intvalue@expr1073743826 $) $) $) { $return ; }
879: $if $(@expr1073743946 $!@expr1073743947 $assertEquals $(@expr1073743948 "cppcheck-2.8/test/testvalueflow.cpp" $, 879 $, 10 $, $(@expr1073743949 $valueOfTok_ $(@expr1073743950 "x = static_cast<int>(10);" $, "( 10 )" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 879 $) .@expr1073743951 intvalue@expr1073743827 $) $) $) { $return ; }
880: $if $(@expr1073743952 $!@expr1073743953 $assertEquals $(@expr1073743954 "cppcheck-2.8/test/testvalueflow.cpp" $, 880 $, 0 $, $(@expr1073743955 $valueOfTok_ $(@expr1073743956 "x = sizeof (struct {int a;}) * 0;" $, "*" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 880 $) .@expr1073743957 intvalue@expr1073743828 $) $) $) { $return ; }
881:
882:
883: $if $(@expr1073743958 $!@expr1073743959 $assert_ $(@expr1073743960 "cppcheck-2.8/test/testvalueflow.cpp" $, 883 $, $(@expr1073743961 $tokenValues_ $(@expr1073743962 "cppcheck-2.8/test/testvalueflow.cpp" $, 883 $, ";-1<<10;" , "<<" $) .@expr1073743963 empty (@expr1073743964 ) $) $) $) { $return ; }
884: $if $(@expr1073743965 $!@expr1073743966 $assert_ $(@expr1073743967 "cppcheck-2.8/test/testvalueflow.cpp" $, 884 $, $(@expr1073743968 $tokenValues_ $(@expr1073743969 "cppcheck-2.8/test/testvalueflow.cpp" $, 884 $, ";10<<-1;" , "<<" $) .@expr1073743970 empty (@expr1073743971 ) $) $) $) { $return ; }
885: $if $(@expr1073743972 $!@expr1073743973 $assert_ $(@expr1073743974 "cppcheck-2.8/test/testvalueflow.cpp" $, 885 $, $(@expr1073743975 $tokenValues_ $(@expr1073743976 "cppcheck-2.8/test/testvalueflow.cpp" $, 885 $, ";10<<64;" , "<<" $) .@expr1073743977 empty (@expr1073743978 ) $) $) $) { $return ; }
886: $if $(@expr1073743979 $!@expr1073743980 $assert_ $(@expr1073743981 "cppcheck-2.8/test/testvalueflow.cpp" $, 886 $, $(@expr1073743982 $tokenValues_ $(@expr1073743983 "cppcheck-2.8/test/testvalueflow.cpp" $, 886 $, ";-1>>10;" , ">>" $) .@expr1073743984 empty (@expr1073743985 ) $) $) $) { $return ; }
887: $if $(@expr1073743986 $!@expr1073743987 $assert_ $(@expr1073743988 "cppcheck-2.8/test/testvalueflow.cpp" $, 887 $, $(@expr1073743989 $tokenValues_ $(@expr1073743990 "cppcheck-2.8/test/testvalueflow.cpp" $, 887 $, ";10>>-1;" , ">>" $) .@expr1073743991 empty (@expr1073743992 ) $) $) $) { $return ; }
888: $if $(@expr1073743993 $!@expr1073743994 $assert_ $(@expr1073743995 "cppcheck-2.8/test/testvalueflow.cpp" $, 888 $, $(@expr1073743996 $tokenValues_ $(@expr1073743997 "cppcheck-2.8/test/testvalueflow.cpp" $, 888 $, ";10>>64;" , ">>" $) .@expr1073743998 empty (@expr1073743999 ) $) $) $) { $return ; }
889:
890: code@var322 =@expr1073744000 "float f(const uint16_t& value) {\n    const uint16_t uVal = value; \n    return static_cast<float>(uVal) / 2;\n}\n"
891:
892:
893: ;
894: $if $(@expr1073744001 $!@expr1073744002 $assertEquals $(@expr1073744003 "cppcheck-2.8/test/testvalueflow.cpp" $, 894 $, true $, $(@expr1073744004 $tokenValues_ $(@expr1073744005 "cppcheck-2.8/test/testvalueflow.cpp" $, 894 $, code@var322 , "/" $) .@expr1073744006 empty (@expr1073744007 ) $) $) $) { $return ; }
895:
896:
897: code@var322 =@expr1073744008 "void f(int x) {\n    a = x+456;\n    if (x==123) {}}"
898:
899:
900: ;
901: $if $(@expr1073744009 $!@expr1073744010 $assertEquals $(@expr1073744011 "cppcheck-2.8/test/testvalueflow.cpp" $, 901 $, 579 $, $(@expr1073744012 $valueOfTok_ $(@expr1073744013 code@var322 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 901 $) .@expr1073744014 intvalue@expr1073743829 $) $) $) { $return ; }
902:
903: code@var322 =@expr1073744015 "void f(int x, int y) {\n    a = x+y;\n    if (x==123 || y==456) {}}"
904:
905:
906: ;
907: $if $(@expr1073744016 $!@expr1073744017 $assertEquals $(@expr1073744018 "cppcheck-2.8/test/testvalueflow.cpp" $, 907 $, 0 $, $(@expr1073744019 $valueOfTok_ $(@expr1073744020 code@var322 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 907 $) .@expr1073744021 intvalue@expr1073743830 $) $) $) { $return ; }
908:
909: code@var322 =@expr1073744022 "void f(int x) {\n    a = x+x;\n    if (x==123) {}}"
910:
911:
912: ;
913: $if $(@expr1073744023 $!@expr1073744024 $assertEquals $(@expr1073744025 "cppcheck-2.8/test/testvalueflow.cpp" $, 913 $, 246 $, $(@expr1073744026 $valueOfTok_ $(@expr1073744027 code@var322 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 913 $) .@expr1073744028 intvalue@expr1073743831 $) $) $) { $return ; }
914:
915: code@var322 =@expr1073744029 "void f(int x, int y) {\n    a = x*x;\n    if (x==2) {}\n    if (x==4) {}\n}"
916:
917:
918:
919: ;
920: std ::@expr1073744030 list < ValueFlow ::@expr1073744031 Value > values@var323 ; values@var323 =@expr1073744032 $tokenValues_ $(@expr1073744033 "cppcheck-2.8/test/testvalueflow.cpp" $, 920 $, code@var322 , "*" $) ;
921: $if $(@expr1073744034 $!@expr1073744035 $assertEquals $(@expr1073744036 "cppcheck-2.8/test/testvalueflow.cpp" $, 921 $, 2U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
922: $if $(@expr1073744039 $!@expr1073744040 $assertEquals $(@expr1073744041 "cppcheck-2.8/test/testvalueflow.cpp" $, 922 $, 4 $, values@var323 .@expr2218 front (@expr2219 ) .@expr2220 intvalue@expr2008 $) $) { $return ; }
923: $if $(@expr1073744045 $!@expr1073744046 $assertEquals $(@expr1073744047 "cppcheck-2.8/test/testvalueflow.cpp" $, 923 $, 16 $, values@var323 .@expr2224 back (@expr2225 ) .@expr2226 intvalue@expr2009 $) $) { $return ; }
924:
925: code@var322 =@expr1073744051 "void f(int x) {\n    if (x == 3) {}\n    a = x * (1 - x - 1);\n}"
926:
927:
928: ;
929: $if $(@expr1073744052 $!@expr1073744053 $assertEquals $(@expr1073744054 "cppcheck-2.8/test/testvalueflow.cpp" $, 929 $, -9 $, $(@expr1073744055 $valueOfTok_ $(@expr1073744056 code@var322 $, "*" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 929 $) .@expr1073744057 intvalue@expr1073743834 $) $) $) { $return ; }
930:
931:
932: code@var322 =@expr1073744058 "int f(int x) {\n  int a = 1;\n  while (x!=3) { x+=a; }\n  return x/a;\n}\n"
933:
934:
935:
936: ;
937: $if $(@expr1073744059 $!@expr1073744060 $assertEquals $(@expr1073744061 "cppcheck-2.8/test/testvalueflow.cpp" $, 937 $, 3 $, $(@expr1073744062 $valueOfTok_ $(@expr1073744063 code@var322 $, "/" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 937 $) .@expr1073744064 intvalue@expr1073743835 $) $) $) { $return ; }
938:
939:
940: code@var322 =@expr1073744065 "x = y ? 2 : 3;\n" ;
941: values@var323 =@expr1073744066 $tokenValues_ $(@expr1073744067 "cppcheck-2.8/test/testvalueflow.cpp" $, 941 $, code@var322 , "?" $) ;
942: $if $(@expr1073744068 $!@expr1073744069 $assertEquals $(@expr1073744070 "cppcheck-2.8/test/testvalueflow.cpp" $, 942 $, 2U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
943: $if $(@expr1073744073 $!@expr1073744074 $assertEquals $(@expr1073744075 "cppcheck-2.8/test/testvalueflow.cpp" $, 943 $, 2 $, values@var323 .@expr2218 front (@expr2219 ) .@expr2220 intvalue@expr2008 $) $) { $return ; }
944: $if $(@expr1073744079 $!@expr1073744080 $assertEquals $(@expr1073744081 "cppcheck-2.8/test/testvalueflow.cpp" $, 944 $, 3 $, values@var323 .@expr2224 back (@expr2225 ) .@expr2226 intvalue@expr2009 $) $) { $return ; }
945:
946: code@var322 =@expr1073744085 "void f(int a) { x = a ? 2 : 3; }\n" ;
947: values@var323 =@expr1073744086 $tokenValues_ $(@expr1073744087 "cppcheck-2.8/test/testvalueflow.cpp" $, 947 $, code@var322 , "?" $) ;
948: $if $(@expr1073744088 $!@expr1073744089 $assertEquals $(@expr1073744090 "cppcheck-2.8/test/testvalueflow.cpp" $, 948 $, 2U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
949: $if $(@expr1073744093 $!@expr1073744094 $assertEquals $(@expr1073744095 "cppcheck-2.8/test/testvalueflow.cpp" $, 949 $, 2 $, values@var323 .@expr2218 front (@expr2219 ) .@expr2220 intvalue@expr2008 $) $) { $return ; }
950: $if $(@expr1073744099 $!@expr1073744100 $assertEquals $(@expr1073744101 "cppcheck-2.8/test/testvalueflow.cpp" $, 950 $, 3 $, values@var323 .@expr2224 back (@expr2225 ) .@expr2226 intvalue@expr2009 $) $) { $return ; }
951:
952: code@var322 =@expr1073744105 "x = (2<5) ? 2 : 3;\n" ;
953: values@var323 =@expr1073744106 $tokenValues_ $(@expr1073744107 "cppcheck-2.8/test/testvalueflow.cpp" $, 953 $, code@var322 , "?" $) ;
954: $if $(@expr1073744108 $!@expr1073744109 $assertEquals $(@expr1073744110 "cppcheck-2.8/test/testvalueflow.cpp" $, 954 $, 1U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
955: $if $(@expr1073744113 $!@expr1073744114 $assertEquals $(@expr1073744115 "cppcheck-2.8/test/testvalueflow.cpp" $, 955 $, 2 $, values@var323 .@expr2218 front (@expr2219 ) .@expr2220 intvalue@expr2008 $) $) { $return ; }
956:
957: code@var322 =@expr1073744119 "x = 123 ? : 456;\n" ;
958: values@var323 =@expr1073744120 $tokenValues_ $(@expr1073744121 "cppcheck-2.8/test/testvalueflow.cpp" $, 958 $, code@var322 , "?" $) ;
959: $if $(@expr1073744122 $!@expr1073744123 $assertEquals $(@expr1073744124 "cppcheck-2.8/test/testvalueflow.cpp" $, 959 $, 1U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
960: $if $(@expr1073744127 $!@expr1073744128 $assertEquals $(@expr1073744129 "cppcheck-2.8/test/testvalueflow.cpp" $, 960 $, 123 $, values@var323 .@expr2306 empty (@expr2307 ) ?@expr1073744132 0 :@expr1073744133 values@var323 .@expr2218 front (@expr2219 ) .@expr2220 intvalue@expr2008 $) $) { $return ; }
961:
962: code@var322 =@expr1073744137 "int f() {\n    const int i = 1;\n    int x = i < 0 ? 0 : 1;\n    return x;\n}"
963:
964:
965:
966: ;
967: $if $(@expr1073744138 $!@expr1073744139 $assertEquals $(@expr1073744140 "cppcheck-2.8/test/testvalueflow.cpp" $, 967 $, true $, $testValueOfX_ $(@expr1073744141 "cppcheck-2.8/test/testvalueflow.cpp" $, 967 $, code@var322 , 4U , 1 $) $) $) { $return ; }
968:
969:
970: code@var322 =@expr1073744142 "x = ~0U;" ;
971: settings@var102 .@expr1073744143 platform (@expr1073744144 cppcheck ::@expr1073744145 Platform ::@expr1073744146 Native@expr1073743836 ) ;
972: values@var323 =@expr1073744147 $tokenValues_ $(@expr1073744148 "cppcheck-2.8/test/testvalueflow.cpp" $, 972 $, code@var322 , "~" $) ;
973: $if $(@expr1073744149 $!@expr1073744150 $assertEquals $(@expr1073744151 "cppcheck-2.8/test/testvalueflow.cpp" $, 973 $, 1U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
974: $if $(@expr1073744154 $!@expr1073744155 $assertEquals $(@expr1073744156 "cppcheck-2.8/test/testvalueflow.cpp" $, 974 $, ~@expr1073744157 0U $, values@var323 .@expr2224 back (@expr2225 ) .@expr2226 intvalue@expr2009 $) $) { $return ; }
975:
976:
977: code@var322 =@expr1073744161 "void f(int x) {\n    a = !x;\n    if (x==0) {}\n}"
978:
979:
980: ;
981: values@var323 =@expr1073744162 removeImpossible (@expr1073744163 $tokenValues_ $(@expr1073744164 "cppcheck-2.8/test/testvalueflow.cpp" $, 981 $, code@var322 , "!" $) ) ;
982: $if $(@expr1073744165 $!@expr1073744166 $assertEquals $(@expr1073744167 "cppcheck-2.8/test/testvalueflow.cpp" $, 982 $, 1U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
983: $if $(@expr1073744170 $!@expr1073744171 $assertEquals $(@expr1073744172 "cppcheck-2.8/test/testvalueflow.cpp" $, 983 $, 1 $, values@var323 .@expr2224 back (@expr2225 ) .@expr2226 intvalue@expr2009 $) $) { $return ; }
984:
985:
986: code@var322 =@expr1073744176 "void f(int x) {\n    a = -x;\n    if (x==10) {}\n}"
987:
988:
989: ;
990: values@var323 =@expr1073744177 $tokenValues_ $(@expr1073744178 "cppcheck-2.8/test/testvalueflow.cpp" $, 990 $, code@var322 , "-" $) ;
991: $if $(@expr1073744179 $!@expr1073744180 $assertEquals $(@expr1073744181 "cppcheck-2.8/test/testvalueflow.cpp" $, 991 $, 1U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
992: $if $(@expr1073744184 $!@expr1073744185 $assertEquals $(@expr1073744186 "cppcheck-2.8/test/testvalueflow.cpp" $, 992 $, -10 $, values@var323 .@expr2224 back (@expr2225 ) .@expr2226 intvalue@expr2009 $) $) { $return ; }
993:
994:
995: code@var322 =@expr1073744190 "void f(bool b) {\n   bool x = false && b;\n   bool a = x;\n}"
996:
997:
998: ;
999: $if $(@expr1073744191 $!@expr1073744192 $assertEquals $(@expr1073744193 "cppcheck-2.8/test/testvalueflow.cpp" $, 999 $, true $, $testValueOfX_ $(@expr1073744194 "cppcheck-2.8/test/testvalueflow.cpp" $, 999 $, code@var322 , 3U , 0 $) $) $) { $return ; }
1000:
1001: code@var322 =@expr1073744195 "void f(bool b) {\n   bool x = b && false;\n   bool a = x;\n}"
1002:
1003:
1004: ;
1005: $if $(@expr1073744196 $!@expr1073744197 $assertEquals $(@expr1073744198 "cppcheck-2.8/test/testvalueflow.cpp" $, 1005 $, true $, $testValueOfX_ $(@expr1073744199 "cppcheck-2.8/test/testvalueflow.cpp" $, 1005 $, code@var322 , 3U , 0 $) $) $) { $return ; }
1006:
1007: code@var322 =@expr1073744200 "void f(bool b) {\n   bool x = true && b;\n   bool a = x;\n}"
1008:
1009:
1010: ;
1011: $if $(@expr1073744201 $!@expr1073744202 $assertEquals $(@expr1073744203 "cppcheck-2.8/test/testvalueflow.cpp" $, 1011 $, false $, $testValueOfX_ $(@expr1073744204 "cppcheck-2.8/test/testvalueflow.cpp" $, 1011 $, code@var322 , 3U , 1 $) $) $) { $return ; }
1012:
1013: code@var322 =@expr1073744205 "void f(bool b) {\n   bool x = b && true;\n   bool a = x;\n}"
1014:
1015:
1016: ;
1017: $if $(@expr1073744206 $!@expr1073744207 $assertEquals $(@expr1073744208 "cppcheck-2.8/test/testvalueflow.cpp" $, 1017 $, false $, $testValueOfX_ $(@expr1073744209 "cppcheck-2.8/test/testvalueflow.cpp" $, 1017 $, code@var322 , 3U , 1 $) $) $) { $return ; }
1018:
1019:
1020: code@var322 =@expr1073744210 "void f(bool b) {\n   bool x = true || b;\n   bool a = x;\n}"
1021:
1022:
1023: ;
1024: $if $(@expr1073744211 $!@expr1073744212 $assertEquals $(@expr1073744213 "cppcheck-2.8/test/testvalueflow.cpp" $, 1024 $, true $, $testValueOfX_ $(@expr1073744214 "cppcheck-2.8/test/testvalueflow.cpp" $, 1024 $, code@var322 , 3U , 1 $) $) $) { $return ; }
1025:
1026: code@var322 =@expr1073744215 "void f(bool b) {\n   bool x = b || true;\n   bool a = x;\n}"
1027:
1028:
1029: ;
1030: $if $(@expr1073744216 $!@expr1073744217 $assertEquals $(@expr1073744218 "cppcheck-2.8/test/testvalueflow.cpp" $, 1030 $, true $, $testValueOfX_ $(@expr1073744219 "cppcheck-2.8/test/testvalueflow.cpp" $, 1030 $, code@var322 , 3U , 1 $) $) $) { $return ; }
1031:
1032: code@var322 =@expr1073744220 "void f(bool b) {\n   bool x = false || b;\n   bool a = x;\n}"
1033:
1034:
1035: ;
1036: $if $(@expr1073744221 $!@expr1073744222 $assertEquals $(@expr1073744223 "cppcheck-2.8/test/testvalueflow.cpp" $, 1036 $, false $, $testValueOfX_ $(@expr1073744224 "cppcheck-2.8/test/testvalueflow.cpp" $, 1036 $, code@var322 , 3U , 0 $) $) $) { $return ; }
1037:
1038: code@var322 =@expr1073744225 "void f(bool b) {\n   bool x = b || false;\n   bool a = x;\n}"
1039:
1040:
1041: ;
1042: $if $(@expr1073744226 $!@expr1073744227 $assertEquals $(@expr1073744228 "cppcheck-2.8/test/testvalueflow.cpp" $, 1042 $, false $, $testValueOfX_ $(@expr1073744229 "cppcheck-2.8/test/testvalueflow.cpp" $, 1042 $, code@var322 , 3U , 0 $) $) $) { $return ; }
1043:
1044: code@var322 =@expr1073744230 "bool f(const uint16_t * const p) {\n    const uint8_t x = (uint8_t)(*p & 0x01E0U) >> 5U;\n    return x != 0;\n}\n"
1045:
1046:
1047: ;
1048: $if $(@expr1073744231 $!@expr1073744232 $assertEquals $(@expr1073744233 "cppcheck-2.8/test/testvalueflow.cpp" $, 1048 $, true $, $testValueOfXImpossible_ $(@expr1073744234 "cppcheck-2.8/test/testvalueflow.cpp" $, 1048 $, code@var322 , 3U , -1 $) $) $) { $return ; }
1049:
1050: code@var322 =@expr1073744235 "bool f() {\n    bool a = (4 == 3);\n    bool b = (3 == 3);\n    return a || b;\n}\n"
1051:
1052:
1053:
1054: ;
1055: values@var323 =@expr1073744236 $tokenValues_ $(@expr1073744237 "cppcheck-2.8/test/testvalueflow.cpp" $, 1055 $, code@var322 , "%oror%" $) ;
1056: $if $(@expr1073744238 $!@expr1073744239 $assertEquals $(@expr1073744240 "cppcheck-2.8/test/testvalueflow.cpp" $, 1056 $, 1 $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
1057: if (@expr2419 !@expr2420 values@var323 .@expr2306 empty (@expr2307 ) ) {
1058: $if $(@expr1073744247 $!@expr1073744248 $assertEquals $(@expr1073744249 "cppcheck-2.8/test/testvalueflow.cpp" $, 1058 $, true $, values@var323 .@expr2218 front (@expr2219 ) .@expr1073744252 isIntValue (@expr1073744253 ) $) $) { $return ; }
1059: $if $(@expr1073744254 $!@expr1073744255 $assertEquals $(@expr1073744256 "cppcheck-2.8/test/testvalueflow.cpp" $, 1059 $, true $, values@var323 .@expr2218 front (@expr2219 ) .@expr1073744259 isKnown (@expr1073744260 ) $) $) { $return ; }
1060: $if $(@expr1073744261 $!@expr1073744262 $assertEquals $(@expr1073744263 "cppcheck-2.8/test/testvalueflow.cpp" $, 1060 $, 1 $, values@var323 .@expr2218 front (@expr2219 ) .@expr2220 intvalue@expr2008 $) $) { $return ; }
1061: }
1062:
1063:
1064: code@var322 =@expr1073744267 "void f(int x, int y) {\n    a = x + y;\n}\nvoid callf() {\n    f(1,1);\n    f(10,10);\n}"
1065:
|
1069:
1070: ;
1071: values@var323 =@expr1073744268 $tokenValues_ $(@expr1073744269 "cppcheck-2.8/test/testvalueflow.cpp" $, 1071 $, code@var322 , "+" $) ;
1072: $if $(@expr1073744270 $!@expr1073744271 $assertEquals $(@expr1073744272 "cppcheck-2.8/test/testvalueflow.cpp" $, 1072 $, true $, values@var323 .@expr2306 empty (@expr2307 ) $) $) { $return ; }
1073: if (@expr2419 !@expr2420 values@var323 .@expr2306 empty (@expr2307 ) ) {
1074:
1075: $if $(@expr1073744279 $!@expr1073744280 $assertEquals $(@expr1073744281 "cppcheck-2.8/test/testvalueflow.cpp" $, 1075 $, 2U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
1076: $if $(@expr1073744284 $!@expr1073744285 $assertEquals $(@expr1073744286 "cppcheck-2.8/test/testvalueflow.cpp" $, 1076 $, 2 $, values@var323 .@expr2218 front (@expr2219 ) .@expr2220 intvalue@expr2008 $) $) { $return ; }
1077: $if $(@expr1073744290 $!@expr1073744291 $assertEquals $(@expr1073744292 "cppcheck-2.8/test/testvalueflow.cpp" $, 1077 $, 22 $, values@var323 .@expr2224 back (@expr2225 ) .@expr2226 intvalue@expr2009 $) $) { $return ; }
1078: }
1079:
1080:
1081: code@var322 =@expr1073744296 "struct X {};\nauto operator<=>(const X & a, const X & b) -> decltype(1 <=> 2) {\n    return std::strong_ordering::less;\n}\n"
1082:
1083:
1084: ;
1085: $tokenValues_ $(@expr1073744297 "cppcheck-2.8/test/testvalueflow.cpp" $, 1085 $, code@var322 , "<=>" $) ;
1086:
1087:
1088: values@var323 =@expr1073744298 removeImpossible (@expr1073744299 $tokenValues_ $(@expr1073744300 "cppcheck-2.8/test/testvalueflow.cpp" $, 1088 $, "f(\"xyz\" == \"xyz\");" , "==" $) ) ;
1089: $if $(@expr1073744301 $!@expr1073744302 $assertEquals $(@expr1073744303 "cppcheck-2.8/test/testvalueflow.cpp" $, 1089 $, 0U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
1090:
1091: values@var323 =@expr1073744306 removeImpossible (@expr1073744307 $tokenValues_ $(@expr1073744308 "cppcheck-2.8/test/testvalueflow.cpp" $, 1091 $, "f(\"xyz\" == 0);" , "==" $) ) ;
1092: $if $(@expr1073744309 $!@expr1073744310 $assertEquals $(@expr1073744311 "cppcheck-2.8/test/testvalueflow.cpp" $, 1092 $, 1U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
1093: $if $(@expr1073744314 $!@expr1073744315 $assertEquals $(@expr1073744316 "cppcheck-2.8/test/testvalueflow.cpp" $, 1093 $, 0 $, values@var323 .@expr2218 front (@expr2219 ) .@expr2220 intvalue@expr2008 $) $) { $return ; }
1094:
1095: values@var323 =@expr1073744320 removeImpossible (@expr1073744321 $tokenValues_ $(@expr1073744322 "cppcheck-2.8/test/testvalueflow.cpp" $, 1095 $, "f(0 == \"xyz\");" , "==" $) ) ;
1096: $if $(@expr1073744323 $!@expr1073744324 $assertEquals $(@expr1073744325 "cppcheck-2.8/test/testvalueflow.cpp" $, 1096 $, 1U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
1097: $if $(@expr1073744328 $!@expr1073744329 $assertEquals $(@expr1073744330 "cppcheck-2.8/test/testvalueflow.cpp" $, 1097 $, 0 $, values@var323 .@expr2218 front (@expr2219 ) .@expr2220 intvalue@expr2008 $) $) { $return ; }
1098:
1099: values@var323 =@expr1073744334 removeImpossible (@expr1073744335 $tokenValues_ $(@expr1073744336 "cppcheck-2.8/test/testvalueflow.cpp" $, 1099 $, "f(\"xyz\" != 0);" , "!=" $) ) ;
1100: $if $(@expr1073744337 $!@expr1073744338 $assertEquals $(@expr1073744339 "cppcheck-2.8/test/testvalueflow.cpp" $, 1100 $, 1U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
1101: $if $(@expr1073744342 $!@expr1073744343 $assertEquals $(@expr1073744344 "cppcheck-2.8/test/testvalueflow.cpp" $, 1101 $, 1 $, values@var323 .@expr2218 front (@expr2219 ) .@expr2220 intvalue@expr2008 $) $) { $return ; }
1102:
1103: values@var323 =@expr1073744348 removeImpossible (@expr1073744349 $tokenValues_ $(@expr1073744350 "cppcheck-2.8/test/testvalueflow.cpp" $, 1103 $, "f(0 != \"xyz\");" , "!=" $) ) ;
1104: $if $(@expr1073744351 $!@expr1073744352 $assertEquals $(@expr1073744353 "cppcheck-2.8/test/testvalueflow.cpp" $, 1104 $, 1U $, values@var323 .@expr2213 size (@expr2214 ) $) $) { $return ; }
1105: $if $(@expr1073744356 $!@expr1073744357 $assertEquals $(@expr1073744358 "cppcheck-2.8/test/testvalueflow.cpp" $, 1105 $, 1 $, values@var323 .@expr2218 front (@expr2219 ) .@expr2220 intvalue@expr2008 $) $) { $return ; }
1106: }
1107:
1108: void valueFlowSizeof ( ) {
1109: const char * code@var324 ;
1110: std ::@expr1073744364 list < ValueFlow ::@expr1073744365 Value > values@var325 ;
1111:
1112:
1113: code@var324 =@expr1073744366 "void f() {\n    char a[10];    x = sizeof(*a);\n}"
1114:
1115:
1116: ;
1117: values@var325 =@expr1073744367 $tokenValues_ $(@expr1073744368 "cppcheck-2.8/test/testvalueflow.cpp" $, 1117 $, code@var324 , "( *" $) ;
1118: $if $(@expr1073744369 $!@expr1073744370 $assertEquals $(@expr1073744371 "cppcheck-2.8/test/testvalueflow.cpp" $, 1118 $, 1U $, values@var325 .@expr2548 size (@expr2549 ) $) $) { $return ; }
1119: $if $(@expr1073744374 $!@expr1073744375 $assertEquals $(@expr1073744376 "cppcheck-2.8/test/testvalueflow.cpp" $, 1119 $, 1 $, values@var325 .@expr2553 back (@expr2554 ) .@expr2555 intvalue@expr2538 $) $) { $return ; }
1120:
1121: code@var324 =@expr1073744380 "void f() {\n    char a[10];    x = sizeof(a[0]);\n}"
1122:
1123:
1124: ;
1125: values@var325 =@expr1073744381 $tokenValues_ $(@expr1073744382 "cppcheck-2.8/test/testvalueflow.cpp" $, 1125 $, code@var324 , "( a" $) ;
1126: $if $(@expr1073744383 $!@expr1073744384 $assertEquals $(@expr1073744385 "cppcheck-2.8/test/testvalueflow.cpp" $, 1126 $, 1U $, values@var325 .@expr2548 size (@expr2549 ) $) $) { $return ; }
1127: $if $(@expr1073744388 $!@expr1073744389 $assertEquals $(@expr1073744390 "cppcheck-2.8/test/testvalueflow.cpp" $, 1127 $, 1 $, values@var325 .@expr2553 back (@expr2554 ) .@expr2555 intvalue@expr2538 $) $) { $return ; }
1128:
1129: code@var324 =@expr1073744394 "enum testEnum : uint32_t { a };\nsizeof(testEnum);"
1130: ;
1131: values@var325 =@expr1073744395 $tokenValues_ $(@expr1073744396 "cppcheck-2.8/test/testvalueflow.cpp" $, 1131 $, code@var324 , "( testEnum" $) ;
1132: $if $(@expr1073744397 $!@expr1073744398 $assertEquals $(@expr1073744399 "cppcheck-2.8/test/testvalueflow.cpp" $, 1132 $, 1U $, values@var325 .@expr2548 size (@expr2549 ) $) $) { $return ; }
1133: $if $(@expr1073744402 $!@expr1073744403 $assertEquals $(@expr1073744404 "cppcheck-2.8/test/testvalueflow.cpp" $, 1133 $, 4 $, values@var325 .@expr2553 back (@expr2554 ) .@expr2555 intvalue@expr2538 $) $) { $return ; }
1134:
|
1146:
1147: $do ${ $code@var324 $=@expr1073744408 $"void f() {\n    x = sizeof(void *);\n}" $; $values@var325 $=@expr1073744409 $tokenValues_ $(@expr1073744410 "cppcheck-2.8/test/testvalueflow.cpp" $, 1147 $, $code@var324 $, $"( void * )" $) $; $if $(@expr1073744411 $!@expr1073744412 $assertEquals $(@expr1073744413 "cppcheck-2.8/test/testvalueflow.cpp" $, 1147 $, $1U $, $values@var325 $.@expr1073744414 $size $(@expr1073744415 $) $) $) { $return $; } $if $(@expr1073744416 $!@expr1073744417 $assertEquals $(@expr1073744418 "cppcheck-2.8/test/testvalueflow.cpp" $, 1147 $, settings@var102 .@expr1073744419 sizeof_pointer@var326 $, $values@var325 $.@expr1073744420 $back $(@expr1073744421 $) $.@expr1073744422 $intvalue $) $) { $return $; } $} $while $(@expr1073744423 $false $) ;
1148: $do ${ $code@var324 $=@expr1073744424 $"void f() {\n    x = sizeof(char);\n}" $; $values@var325 $=@expr1073744425 $tokenValues_ $(@expr1073744426 "cppcheck-2.8/test/testvalueflow.cpp" $, 1148 $, $code@var324 $, $"( char )" $) $; $if $(@expr1073744427 $!@expr1073744428 $assertEquals $(@expr1073744429 "cppcheck-2.8/test/testvalueflow.cpp" $, 1148 $, $1U $, $values@var325 $.@expr1073744430 $size $(@expr1073744431 $) $) $) { $return $; } $if $(@expr1073744432 $!@expr1073744433 $assertEquals $(@expr1073744434 "cppcheck-2.8/test/testvalueflow.cpp" $, 1148 $, 1U $, $values@var325 $.@expr1073744435 $back $(@expr1073744436 $) $.@expr1073744437 $intvalue $) $) { $return $; } $} $while $(@expr1073744438 $false $) ;
1149: $do ${ $code@var324 $=@expr1073744439 $"void f() {\n    x = sizeof(short);\n}" $; $values@var325 $=@expr1073744440 $tokenValues_ $(@expr1073744441 "cppcheck-2.8/test/testvalueflow.cpp" $, 1149 $, $code@var324 $, $"( short )" $) $; $if $(@expr1073744442 $!@expr1073744443 $assertEquals $(@expr1073744444 "cppcheck-2.8/test/testvalueflow.cpp" $, 1149 $, $1U $, $values@var325 $.@expr1073744445 $size $(@expr1073744446 $) $) $) { $return $; } $if $(@expr1073744447 $!@expr1073744448 $assertEquals $(@expr1073744449 "cppcheck-2.8/test/testvalueflow.cpp" $, 1149 $, settings@var102 .@expr2626 sizeof_short@var327 $, $values@var325 $.@expr1073744451 $back $(@expr1073744452 $) $.@expr1073744453 $intvalue $) $) { $return $; } $} $while $(@expr1073744454 $false $) ;
1150: $do ${ $code@var324 $=@expr1073744455 $"void f() {\n    x = sizeof(int);\n}" $; $values@var325 $=@expr1073744456 $tokenValues_ $(@expr1073744457 "cppcheck-2.8/test/testvalueflow.cpp" $, 1150 $, $code@var324 $, $"( int )" $) $; $if $(@expr1073744458 $!@expr1073744459 $assertEquals $(@expr1073744460 "cppcheck-2.8/test/testvalueflow.cpp" $, 1150 $, $1U $, $values@var325 $.@expr1073744461 $size $(@expr1073744462 $) $) $) { $return $; } $if $(@expr1073744463 $!@expr1073744464 $assertEquals $(@expr1073744465 "cppcheck-2.8/test/testvalueflow.cpp" $, 1150 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073744467 $back $(@expr1073744468 $) $.@expr1073744469 $intvalue $) $) { $return $; } $} $while $(@expr1073744470 $false $) ;
1151: $do ${ $code@var324 $=@expr1073744471 $"void f() {\n    x = sizeof(long);\n}" $; $values@var325 $=@expr1073744472 $tokenValues_ $(@expr1073744473 "cppcheck-2.8/test/testvalueflow.cpp" $, 1151 $, $code@var324 $, $"( long )" $) $; $if $(@expr1073744474 $!@expr1073744475 $assertEquals $(@expr1073744476 "cppcheck-2.8/test/testvalueflow.cpp" $, 1151 $, $1U $, $values@var325 $.@expr1073744477 $size $(@expr1073744478 $) $) $) { $return $; } $if $(@expr1073744479 $!@expr1073744480 $assertEquals $(@expr1073744481 "cppcheck-2.8/test/testvalueflow.cpp" $, 1151 $, settings@var102 .@expr2658 sizeof_long@var329 $, $values@var325 $.@expr1073744483 $back $(@expr1073744484 $) $.@expr1073744485 $intvalue $) $) { $return $; } $} $while $(@expr1073744486 $false $) ;
1152: $do ${ $code@var324 $=@expr1073744487 $"void f() {\n    x = sizeof(long long);\n}" $; $values@var325 $=@expr1073744488 $tokenValues_ $(@expr1073744489 "cppcheck-2.8/test/testvalueflow.cpp" $, 1152 $, $code@var324 $, $"( long )" $) $; $if $(@expr1073744490 $!@expr1073744491 $assertEquals $(@expr1073744492 "cppcheck-2.8/test/testvalueflow.cpp" $, 1152 $, $1U $, $values@var325 $.@expr1073744493 $size $(@expr1073744494 $) $) $) { $return $; } $if $(@expr1073744495 $!@expr1073744496 $assertEquals $(@expr1073744497 "cppcheck-2.8/test/testvalueflow.cpp" $, 1152 $, settings@var102 .@expr2674 sizeof_long_long@var330 $, $values@var325 $.@expr1073744499 $back $(@expr1073744500 $) $.@expr1073744501 $intvalue $) $) { $return $; } $} $while $(@expr1073744502 $false $) ;
1153: $do ${ $code@var324 $=@expr1073744503 $"void f() {\n    x = sizeof(wchar_t);\n}" $; $values@var325 $=@expr1073744504 $tokenValues_ $(@expr1073744505 "cppcheck-2.8/test/testvalueflow.cpp" $, 1153 $, $code@var324 $, $"( wchar_t )" $) $; $if $(@expr1073744506 $!@expr1073744507 $assertEquals $(@expr1073744508 "cppcheck-2.8/test/testvalueflow.cpp" $, 1153 $, $1U $, $values@var325 $.@expr1073744509 $size $(@expr1073744510 $) $) $) { $return $; } $if $(@expr1073744511 $!@expr1073744512 $assertEquals $(@expr1073744513 "cppcheck-2.8/test/testvalueflow.cpp" $, 1153 $, settings@var102 .@expr2690 sizeof_wchar_t@var331 $, $values@var325 $.@expr1073744515 $back $(@expr1073744516 $) $.@expr1073744517 $intvalue $) $) { $return $; } $} $while $(@expr1073744518 $false $) ;
1154: $do ${ $code@var324 $=@expr1073744519 $"void f() {\n    x = sizeof(float);\n}" $; $values@var325 $=@expr1073744520 $tokenValues_ $(@expr1073744521 "cppcheck-2.8/test/testvalueflow.cpp" $, 1154 $, $code@var324 $, $"( float )" $) $; $if $(@expr1073744522 $!@expr1073744523 $assertEquals $(@expr1073744524 "cppcheck-2.8/test/testvalueflow.cpp" $, 1154 $, $1U $, $values@var325 $.@expr1073744525 $size $(@expr1073744526 $) $) $) { $return $; } $if $(@expr1073744527 $!@expr1073744528 $assertEquals $(@expr1073744529 "cppcheck-2.8/test/testvalueflow.cpp" $, 1154 $, settings@var102 .@expr1073744530 sizeof_float@var332 $, $values@var325 $.@expr1073744531 $back $(@expr1073744532 $) $.@expr1073744533 $intvalue $) $) { $return $; } $} $while $(@expr1073744534 $false $) ;
1155: $do ${ $code@var324 $=@expr1073744535 $"void f() {\n    x = sizeof(double);\n}" $; $values@var325 $=@expr1073744536 $tokenValues_ $(@expr1073744537 "cppcheck-2.8/test/testvalueflow.cpp" $, 1155 $, $code@var324 $, $"( double )" $) $; $if $(@expr1073744538 $!@expr1073744539 $assertEquals $(@expr1073744540 "cppcheck-2.8/test/testvalueflow.cpp" $, 1155 $, $1U $, $values@var325 $.@expr1073744541 $size $(@expr1073744542 $) $) $) { $return $; } $if $(@expr1073744543 $!@expr1073744544 $assertEquals $(@expr1073744545 "cppcheck-2.8/test/testvalueflow.cpp" $, 1155 $, settings@var102 .@expr1073744546 sizeof_double@var333 $, $values@var325 $.@expr1073744547 $back $(@expr1073744548 $) $.@expr1073744549 $intvalue $) $) { $return $; } $} $while $(@expr1073744550 $false $) ;
1156: $do ${ $code@var324 $=@expr1073744551 $"void f() {\n    x = sizeof(long double);\n}" $; $values@var325 $=@expr1073744552 $tokenValues_ $(@expr1073744553 "cppcheck-2.8/test/testvalueflow.cpp" $, 1156 $, $code@var324 $, $"( double )" $) $; $if $(@expr1073744554 $!@expr1073744555 $assertEquals $(@expr1073744556 "cppcheck-2.8/test/testvalueflow.cpp" $, 1156 $, $1U $, $values@var325 $.@expr1073744557 $size $(@expr1073744558 $) $) $) { $return $; } $if $(@expr1073744559 $!@expr1073744560 $assertEquals $(@expr1073744561 "cppcheck-2.8/test/testvalueflow.cpp" $, 1156 $, settings@var102 .@expr1073744562 sizeof_long_double@var334 $, $values@var325 $.@expr1073744563 $back $(@expr1073744564 $) $.@expr1073744565 $intvalue $) $) { $return $; } $} $while $(@expr1073744566 $false $) ;
1157:
1158:
1159: $do ${ $code@var324 $=@expr1073744567 $"void f() {\n    x = sizeof(\"asdf\");\n}" $; $values@var325 $=@expr1073744568 $tokenValues_ $(@expr1073744569 "cppcheck-2.8/test/testvalueflow.cpp" $, 1159 $, $code@var324 $, $"( \"asdf\" )" $) $; $if $(@expr1073744570 $!@expr1073744571 $assertEquals $(@expr1073744572 "cppcheck-2.8/test/testvalueflow.cpp" $, 1159 $, $1U $, $values@var325 $.@expr1073744573 $size $(@expr1073744574 $) $) $) { $return $; } $if $(@expr1073744575 $!@expr1073744576 $assertEquals $(@expr1073744577 "cppcheck-2.8/test/testvalueflow.cpp" $, 1159 $, 5 $, $values@var325 $.@expr1073744578 $back $(@expr1073744579 $) $.@expr1073744580 $intvalue $) $) { $return $; } $} $while $(@expr1073744581 $false $) ;
1160: $do ${ $code@var324 $=@expr1073744582 $"void f() {\n    x = sizeof(L\"asdf\");\n}" $; $values@var325 $=@expr1073744583 $tokenValues_ $(@expr1073744584 "cppcheck-2.8/test/testvalueflow.cpp" $, 1160 $, $code@var324 $, $"( L\"asdf\" )" $) $; $if $(@expr1073744585 $!@expr1073744586 $assertEquals $(@expr1073744587 "cppcheck-2.8/test/testvalueflow.cpp" $, 1160 $, $1U $, $values@var325 $.@expr1073744588 $size $(@expr1073744589 $) $) $) { $return $; } $if $(@expr1073744590 $!@expr1073744591 $assertEquals $(@expr1073744592 "cppcheck-2.8/test/testvalueflow.cpp" $, 1160 $, 5 *@expr1073744593 settings@var102 .@expr2690 sizeof_wchar_t@var331 $, $values@var325 $.@expr1073744595 $back $(@expr1073744596 $) $.@expr1073744597 $intvalue $) $) { $return $; } $} $while $(@expr1073744598 $false $) ;
1161: $do ${ $code@var324 $=@expr1073744599 $"void f() {\n    x = sizeof(u8\"asdf\");\n}" $; $values@var325 $=@expr1073744600 $tokenValues_ $(@expr1073744601 "cppcheck-2.8/test/testvalueflow.cpp" $, 1161 $, $code@var324 $, $"( u8\"asdf\" )" $) $; $if $(@expr1073744602 $!@expr1073744603 $assertEquals $(@expr1073744604 "cppcheck-2.8/test/testvalueflow.cpp" $, 1161 $, $1U $, $values@var325 $.@expr1073744605 $size $(@expr1073744606 $) $) $) { $return $; } $if $(@expr1073744607 $!@expr1073744608 $assertEquals $(@expr1073744609 "cppcheck-2.8/test/testvalueflow.cpp" $, 1161 $, 5 $, $values@var325 $.@expr1073744610 $back $(@expr1073744611 $) $.@expr1073744612 $intvalue $) $) { $return $; } $} $while $(@expr1073744613 $false $) ;
1162: $do ${ $code@var324 $=@expr1073744614 $"void f() {\n    x = sizeof(u\"asdf\");\n}" $; $values@var325 $=@expr1073744615 $tokenValues_ $(@expr1073744616 "cppcheck-2.8/test/testvalueflow.cpp" $, 1162 $, $code@var324 $, $"( u\"asdf\" )" $) $; $if $(@expr1073744617 $!@expr1073744618 $assertEquals $(@expr1073744619 "cppcheck-2.8/test/testvalueflow.cpp" $, 1162 $, $1U $, $values@var325 $.@expr1073744620 $size $(@expr1073744621 $) $) $) { $return $; } $if $(@expr1073744622 $!@expr1073744623 $assertEquals $(@expr1073744624 "cppcheck-2.8/test/testvalueflow.cpp" $, 1162 $, 5 *@expr1073744625 2 $, $values@var325 $.@expr1073744626 $back $(@expr1073744627 $) $.@expr1073744628 $intvalue $) $) { $return $; } $} $while $(@expr1073744629 $false $) ;
1163: $do ${ $code@var324 $=@expr1073744630 $"void f() {\n    x = sizeof(U\"asdf\");\n}" $; $values@var325 $=@expr1073744631 $tokenValues_ $(@expr1073744632 "cppcheck-2.8/test/testvalueflow.cpp" $, 1163 $, $code@var324 $, $"( U\"asdf\" )" $) $; $if $(@expr1073744633 $!@expr1073744634 $assertEquals $(@expr1073744635 "cppcheck-2.8/test/testvalueflow.cpp" $, 1163 $, $1U $, $values@var325 $.@expr1073744636 $size $(@expr1073744637 $) $) $) { $return $; } $if $(@expr1073744638 $!@expr1073744639 $assertEquals $(@expr1073744640 "cppcheck-2.8/test/testvalueflow.cpp" $, 1163 $, 5 *@expr1073744641 4 $, $values@var325 $.@expr1073744642 $back $(@expr1073744643 $) $.@expr1073744644 $intvalue $) $) { $return $; } $} $while $(@expr1073744645 $false $) ;
1164: $do ${ $code@var324 $=@expr1073744646 $"void f() {\n    x = sizeof('a');\n}" $; $values@var325 $=@expr1073744647 $tokenValues_ $(@expr1073744648 "cppcheck-2.8/test/testvalueflow.cpp" $, 1164 $, $code@var324 $, $"( 'a' )" $) $; $if $(@expr1073744649 $!@expr1073744650 $assertEquals $(@expr1073744651 "cppcheck-2.8/test/testvalueflow.cpp" $, 1164 $, $1U $, $values@var325 $.@expr1073744652 $size $(@expr1073744653 $) $) $) { $return $; } $if $(@expr1073744654 $!@expr1073744655 $assertEquals $(@expr1073744656 "cppcheck-2.8/test/testvalueflow.cpp" $, 1164 $, 1U $, $values@var325 $.@expr1073744657 $back $(@expr1073744658 $) $.@expr1073744659 $intvalue $) $) { $return $; } $} $while $(@expr1073744660 $false $) ;
1165: $do ${ $code@var324 $=@expr1073744661 $"void f() {\n    x = sizeof('ab');\n}" $; $values@var325 $=@expr1073744662 $tokenValues_ $(@expr1073744663 "cppcheck-2.8/test/testvalueflow.cpp" $, 1165 $, $code@var324 $, $"( 'ab' )" $) $; $if $(@expr1073744664 $!@expr1073744665 $assertEquals $(@expr1073744666 "cppcheck-2.8/test/testvalueflow.cpp" $, 1165 $, $1U $, $values@var325 $.@expr1073744667 $size $(@expr1073744668 $) $) $) { $return $; } $if $(@expr1073744669 $!@expr1073744670 $assertEquals $(@expr1073744671 "cppcheck-2.8/test/testvalueflow.cpp" $, 1165 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073744673 $back $(@expr1073744674 $) $.@expr1073744675 $intvalue $) $) { $return $; } $} $while $(@expr1073744676 $false $) ;
1166: $do ${ $code@var324 $=@expr1073744677 $"void f() {\n    x = sizeof(L'a');\n}" $; $values@var325 $=@expr1073744678 $tokenValues_ $(@expr1073744679 "cppcheck-2.8/test/testvalueflow.cpp" $, 1166 $, $code@var324 $, $"( L'a' )" $) $; $if $(@expr1073744680 $!@expr1073744681 $assertEquals $(@expr1073744682 "cppcheck-2.8/test/testvalueflow.cpp" $, 1166 $, $1U $, $values@var325 $.@expr1073744683 $size $(@expr1073744684 $) $) $) { $return $; } $if $(@expr1073744685 $!@expr1073744686 $assertEquals $(@expr1073744687 "cppcheck-2.8/test/testvalueflow.cpp" $, 1166 $, settings@var102 .@expr2690 sizeof_wchar_t@var331 $, $values@var325 $.@expr1073744689 $back $(@expr1073744690 $) $.@expr1073744691 $intvalue $) $) { $return $; } $} $while $(@expr1073744692 $false $) ;
1167: $do ${ $code@var324 $=@expr1073744693 $"void f() {\n    x = sizeof(u8'a');\n}" $; $values@var325 $=@expr1073744694 $tokenValues_ $(@expr1073744695 "cppcheck-2.8/test/testvalueflow.cpp" $, 1167 $, $code@var324 $, $"( u8'a' )" $) $; $if $(@expr1073744696 $!@expr1073744697 $assertEquals $(@expr1073744698 "cppcheck-2.8/test/testvalueflow.cpp" $, 1167 $, $1U $, $values@var325 $.@expr1073744699 $size $(@expr1073744700 $) $) $) { $return $; } $if $(@expr1073744701 $!@expr1073744702 $assertEquals $(@expr1073744703 "cppcheck-2.8/test/testvalueflow.cpp" $, 1167 $, 1U $, $values@var325 $.@expr1073744704 $back $(@expr1073744705 $) $.@expr1073744706 $intvalue $) $) { $return $; } $} $while $(@expr1073744707 $false $) ;
1168: $do ${ $code@var324 $=@expr1073744708 $"void f() {\n    x = sizeof(u'a');\n}" $; $values@var325 $=@expr1073744709 $tokenValues_ $(@expr1073744710 "cppcheck-2.8/test/testvalueflow.cpp" $, 1168 $, $code@var324 $, $"( u'a' )" $) $; $if $(@expr1073744711 $!@expr1073744712 $assertEquals $(@expr1073744713 "cppcheck-2.8/test/testvalueflow.cpp" $, 1168 $, $1U $, $values@var325 $.@expr1073744714 $size $(@expr1073744715 $) $) $) { $return $; } $if $(@expr1073744716 $!@expr1073744717 $assertEquals $(@expr1073744718 "cppcheck-2.8/test/testvalueflow.cpp" $, 1168 $, 2U $, $values@var325 $.@expr1073744719 $back $(@expr1073744720 $) $.@expr1073744721 $intvalue $) $) { $return $; } $} $while $(@expr1073744722 $false $) ;
1169: $do ${ $code@var324 $=@expr1073744723 $"void f() {\n    x = sizeof(U'a');\n}" $; $values@var325 $=@expr1073744724 $tokenValues_ $(@expr1073744725 "cppcheck-2.8/test/testvalueflow.cpp" $, 1169 $, $code@var324 $, $"( U'a' )" $) $; $if $(@expr1073744726 $!@expr1073744727 $assertEquals $(@expr1073744728 "cppcheck-2.8/test/testvalueflow.cpp" $, 1169 $, $1U $, $values@var325 $.@expr1073744729 $size $(@expr1073744730 $) $) $) { $return $; } $if $(@expr1073744731 $!@expr1073744732 $assertEquals $(@expr1073744733 "cppcheck-2.8/test/testvalueflow.cpp" $, 1169 $, 4U $, $values@var325 $.@expr1073744734 $back $(@expr1073744735 $) $.@expr1073744736 $intvalue $) $) { $return $; } $} $while $(@expr1073744737 $false $) ;
1170:
|
1173:
1174: code@var324 =@expr1073744738 "void f() {\n    struct S *a[10];    x = sizeof(a) / sizeof(a[0]);\n}"
1175:
1176:
1177: ;
1178: values@var325 =@expr1073744739 $tokenValues_ $(@expr1073744740 "cppcheck-2.8/test/testvalueflow.cpp" $, 1178 $, code@var324 , "/" $) ;
1179: $if $(@expr1073744741 $!@expr1073744742 $assertEquals $(@expr1073744743 "cppcheck-2.8/test/testvalueflow.cpp" $, 1179 $, 1U $, values@var325 .@expr2548 size (@expr2549 ) $) $) { $return ; }
1180: $if $(@expr1073744746 $!@expr1073744747 $assertEquals $(@expr1073744748 "cppcheck-2.8/test/testvalueflow.cpp" $, 1180 $, 10 $, values@var325 .@expr2553 back (@expr2554 ) .@expr2555 intvalue@expr2538 $) $) { $return ; }
1181:
|
1193:
1194: $do ${ $code@var324 $=@expr1073744752 $"enum  E  { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744753 $tokenValues_ $(@expr1073744754 "cppcheck-2.8/test/testvalueflow.cpp" $, 1194 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744755 $!@expr1073744756 $assertEquals $(@expr1073744757 "cppcheck-2.8/test/testvalueflow.cpp" $, 1194 $, $1U $, $values@var325 $.@expr1073744758 $size $(@expr1073744759 $) $) $) { $return $; } $if $(@expr1073744760 $!@expr1073744761 $assertEquals $(@expr1073744762 "cppcheck-2.8/test/testvalueflow.cpp" $, 1194 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073744764 $back $(@expr1073744765 $) $.@expr1073744766 $intvalue $) $) { $return $; } $} $while $(@expr1073744767 $false $) ;
1195:
1196:
1197: $do ${ $code@var324 $=@expr1073744768 $"enum  E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744769 $tokenValues_ $(@expr1073744770 "cppcheck-2.8/test/testvalueflow.cpp" $, 1197 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744771 $!@expr1073744772 $assertEquals $(@expr1073744773 "cppcheck-2.8/test/testvalueflow.cpp" $, 1197 $, $1U $, $values@var325 $.@expr1073744774 $size $(@expr1073744775 $) $) $) { $return $; } $if $(@expr1073744776 $!@expr1073744777 $assertEquals $(@expr1073744778 "cppcheck-2.8/test/testvalueflow.cpp" $, 1197 $, 1U $, $values@var325 $.@expr1073744779 $back $(@expr1073744780 $) $.@expr1073744781 $intvalue $) $) { $return $; } $} $while $(@expr1073744782 $false $) ;
1198: $do ${ $code@var324 $=@expr1073744783 $"enum  E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744784 $tokenValues_ $(@expr1073744785 "cppcheck-2.8/test/testvalueflow.cpp" $, 1198 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744786 $!@expr1073744787 $assertEquals $(@expr1073744788 "cppcheck-2.8/test/testvalueflow.cpp" $, 1198 $, $1U $, $values@var325 $.@expr1073744789 $size $(@expr1073744790 $) $) $) { $return $; } $if $(@expr1073744791 $!@expr1073744792 $assertEquals $(@expr1073744793 "cppcheck-2.8/test/testvalueflow.cpp" $, 1198 $, 1U $, $values@var325 $.@expr1073744794 $back $(@expr1073744795 $) $.@expr1073744796 $intvalue $) $) { $return $; } $} $while $(@expr1073744797 $false $) ;
1199: $do ${ $code@var324 $=@expr1073744798 $"enum  E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744799 $tokenValues_ $(@expr1073744800 "cppcheck-2.8/test/testvalueflow.cpp" $, 1199 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744801 $!@expr1073744802 $assertEquals $(@expr1073744803 "cppcheck-2.8/test/testvalueflow.cpp" $, 1199 $, $1U $, $values@var325 $.@expr1073744804 $size $(@expr1073744805 $) $) $) { $return $; } $if $(@expr1073744806 $!@expr1073744807 $assertEquals $(@expr1073744808 "cppcheck-2.8/test/testvalueflow.cpp" $, 1199 $, 1U $, $values@var325 $.@expr1073744809 $back $(@expr1073744810 $) $.@expr1073744811 $intvalue $) $) { $return $; } $} $while $(@expr1073744812 $false $) ;
1200: $do ${ $code@var324 $=@expr1073744813 $"enum  E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744814 $tokenValues_ $(@expr1073744815 "cppcheck-2.8/test/testvalueflow.cpp" $, 1200 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744816 $!@expr1073744817 $assertEquals $(@expr1073744818 "cppcheck-2.8/test/testvalueflow.cpp" $, 1200 $, $1U $, $values@var325 $.@expr1073744819 $size $(@expr1073744820 $) $) $) { $return $; } $if $(@expr1073744821 $!@expr1073744822 $assertEquals $(@expr1073744823 "cppcheck-2.8/test/testvalueflow.cpp" $, 1200 $, settings@var102 .@expr2626 sizeof_short@var327 $, $values@var325 $.@expr1073744825 $back $(@expr1073744826 $) $.@expr1073744827 $intvalue $) $) { $return $; } $} $while $(@expr1073744828 $false $) ;
1201: $do ${ $code@var324 $=@expr1073744829 $"enum  E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744830 $tokenValues_ $(@expr1073744831 "cppcheck-2.8/test/testvalueflow.cpp" $, 1201 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744832 $!@expr1073744833 $assertEquals $(@expr1073744834 "cppcheck-2.8/test/testvalueflow.cpp" $, 1201 $, $1U $, $values@var325 $.@expr1073744835 $size $(@expr1073744836 $) $) $) { $return $; } $if $(@expr1073744837 $!@expr1073744838 $assertEquals $(@expr1073744839 "cppcheck-2.8/test/testvalueflow.cpp" $, 1201 $, settings@var102 .@expr2626 sizeof_short@var327 $, $values@var325 $.@expr1073744841 $back $(@expr1073744842 $) $.@expr1073744843 $intvalue $) $) { $return $; } $} $while $(@expr1073744844 $false $) ;
1202: $do ${ $code@var324 $=@expr1073744845 $"enum  E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744846 $tokenValues_ $(@expr1073744847 "cppcheck-2.8/test/testvalueflow.cpp" $, 1202 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744848 $!@expr1073744849 $assertEquals $(@expr1073744850 "cppcheck-2.8/test/testvalueflow.cpp" $, 1202 $, $1U $, $values@var325 $.@expr1073744851 $size $(@expr1073744852 $) $) $) { $return $; } $if $(@expr1073744853 $!@expr1073744854 $assertEquals $(@expr1073744855 "cppcheck-2.8/test/testvalueflow.cpp" $, 1202 $, settings@var102 .@expr2626 sizeof_short@var327 $, $values@var325 $.@expr1073744857 $back $(@expr1073744858 $) $.@expr1073744859 $intvalue $) $) { $return $; } $} $while $(@expr1073744860 $false $) ;
1203: $do ${ $code@var324 $=@expr1073744861 $"enum  E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744862 $tokenValues_ $(@expr1073744863 "cppcheck-2.8/test/testvalueflow.cpp" $, 1203 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744864 $!@expr1073744865 $assertEquals $(@expr1073744866 "cppcheck-2.8/test/testvalueflow.cpp" $, 1203 $, $1U $, $values@var325 $.@expr1073744867 $size $(@expr1073744868 $) $) $) { $return $; } $if $(@expr1073744869 $!@expr1073744870 $assertEquals $(@expr1073744871 "cppcheck-2.8/test/testvalueflow.cpp" $, 1203 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073744873 $back $(@expr1073744874 $) $.@expr1073744875 $intvalue $) $) { $return $; } $} $while $(@expr1073744876 $false $) ;
1204: $do ${ $code@var324 $=@expr1073744877 $"enum  E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744878 $tokenValues_ $(@expr1073744879 "cppcheck-2.8/test/testvalueflow.cpp" $, 1204 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744880 $!@expr1073744881 $assertEquals $(@expr1073744882 "cppcheck-2.8/test/testvalueflow.cpp" $, 1204 $, $1U $, $values@var325 $.@expr1073744883 $size $(@expr1073744884 $) $) $) { $return $; } $if $(@expr1073744885 $!@expr1073744886 $assertEquals $(@expr1073744887 "cppcheck-2.8/test/testvalueflow.cpp" $, 1204 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073744889 $back $(@expr1073744890 $) $.@expr1073744891 $intvalue $) $) { $return $; } $} $while $(@expr1073744892 $false $) ;
1205: $do ${ $code@var324 $=@expr1073744893 $"enum  E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744894 $tokenValues_ $(@expr1073744895 "cppcheck-2.8/test/testvalueflow.cpp" $, 1205 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744896 $!@expr1073744897 $assertEquals $(@expr1073744898 "cppcheck-2.8/test/testvalueflow.cpp" $, 1205 $, $1U $, $values@var325 $.@expr1073744899 $size $(@expr1073744900 $) $) $) { $return $; } $if $(@expr1073744901 $!@expr1073744902 $assertEquals $(@expr1073744903 "cppcheck-2.8/test/testvalueflow.cpp" $, 1205 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073744905 $back $(@expr1073744906 $) $.@expr1073744907 $intvalue $) $) { $return $; } $} $while $(@expr1073744908 $false $) ;
1206: $do ${ $code@var324 $=@expr1073744909 $"enum  E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744910 $tokenValues_ $(@expr1073744911 "cppcheck-2.8/test/testvalueflow.cpp" $, 1206 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744912 $!@expr1073744913 $assertEquals $(@expr1073744914 "cppcheck-2.8/test/testvalueflow.cpp" $, 1206 $, $1U $, $values@var325 $.@expr1073744915 $size $(@expr1073744916 $) $) $) { $return $; } $if $(@expr1073744917 $!@expr1073744918 $assertEquals $(@expr1073744919 "cppcheck-2.8/test/testvalueflow.cpp" $, 1206 $, settings@var102 .@expr2658 sizeof_long@var329 $, $values@var325 $.@expr1073744921 $back $(@expr1073744922 $) $.@expr1073744923 $intvalue $) $) { $return $; } $} $while $(@expr1073744924 $false $) ;
1207: $do ${ $code@var324 $=@expr1073744925 $"enum  E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744926 $tokenValues_ $(@expr1073744927 "cppcheck-2.8/test/testvalueflow.cpp" $, 1207 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744928 $!@expr1073744929 $assertEquals $(@expr1073744930 "cppcheck-2.8/test/testvalueflow.cpp" $, 1207 $, $1U $, $values@var325 $.@expr1073744931 $size $(@expr1073744932 $) $) $) { $return $; } $if $(@expr1073744933 $!@expr1073744934 $assertEquals $(@expr1073744935 "cppcheck-2.8/test/testvalueflow.cpp" $, 1207 $, settings@var102 .@expr2658 sizeof_long@var329 $, $values@var325 $.@expr1073744937 $back $(@expr1073744938 $) $.@expr1073744939 $intvalue $) $) { $return $; } $} $while $(@expr1073744940 $false $) ;
1208: $do ${ $code@var324 $=@expr1073744941 $"enum  E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744942 $tokenValues_ $(@expr1073744943 "cppcheck-2.8/test/testvalueflow.cpp" $, 1208 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744944 $!@expr1073744945 $assertEquals $(@expr1073744946 "cppcheck-2.8/test/testvalueflow.cpp" $, 1208 $, $1U $, $values@var325 $.@expr1073744947 $size $(@expr1073744948 $) $) $) { $return $; } $if $(@expr1073744949 $!@expr1073744950 $assertEquals $(@expr1073744951 "cppcheck-2.8/test/testvalueflow.cpp" $, 1208 $, settings@var102 .@expr2658 sizeof_long@var329 $, $values@var325 $.@expr1073744953 $back $(@expr1073744954 $) $.@expr1073744955 $intvalue $) $) { $return $; } $} $while $(@expr1073744956 $false $) ;
1209: $do ${ $code@var324 $=@expr1073744957 $"enum  E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744958 $tokenValues_ $(@expr1073744959 "cppcheck-2.8/test/testvalueflow.cpp" $, 1209 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744960 $!@expr1073744961 $assertEquals $(@expr1073744962 "cppcheck-2.8/test/testvalueflow.cpp" $, 1209 $, $1U $, $values@var325 $.@expr1073744963 $size $(@expr1073744964 $) $) $) { $return $; } $if $(@expr1073744965 $!@expr1073744966 $assertEquals $(@expr1073744967 "cppcheck-2.8/test/testvalueflow.cpp" $, 1209 $, settings@var102 .@expr2674 sizeof_long_long@var330 $, $values@var325 $.@expr1073744969 $back $(@expr1073744970 $) $.@expr1073744971 $intvalue $) $) { $return $; } $} $while $(@expr1073744972 $false $) ;
1210: $do ${ $code@var324 $=@expr1073744973 $"enum  E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744974 $tokenValues_ $(@expr1073744975 "cppcheck-2.8/test/testvalueflow.cpp" $, 1210 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744976 $!@expr1073744977 $assertEquals $(@expr1073744978 "cppcheck-2.8/test/testvalueflow.cpp" $, 1210 $, $1U $, $values@var325 $.@expr1073744979 $size $(@expr1073744980 $) $) $) { $return $; } $if $(@expr1073744981 $!@expr1073744982 $assertEquals $(@expr1073744983 "cppcheck-2.8/test/testvalueflow.cpp" $, 1210 $, settings@var102 .@expr2674 sizeof_long_long@var330 $, $values@var325 $.@expr1073744985 $back $(@expr1073744986 $) $.@expr1073744987 $intvalue $) $) { $return $; } $} $while $(@expr1073744988 $false $) ;
1211: $do ${ $code@var324 $=@expr1073744989 $"enum  E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073744990 $tokenValues_ $(@expr1073744991 "cppcheck-2.8/test/testvalueflow.cpp" $, 1211 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073744992 $!@expr1073744993 $assertEquals $(@expr1073744994 "cppcheck-2.8/test/testvalueflow.cpp" $, 1211 $, $1U $, $values@var325 $.@expr1073744995 $size $(@expr1073744996 $) $) $) { $return $; } $if $(@expr1073744997 $!@expr1073744998 $assertEquals $(@expr1073744999 "cppcheck-2.8/test/testvalueflow.cpp" $, 1211 $, settings@var102 .@expr2674 sizeof_long_long@var330 $, $values@var325 $.@expr1073745001 $back $(@expr1073745002 $) $.@expr1073745003 $intvalue $) $) { $return $; } $} $while $(@expr1073745004 $false $) ;
1212: $do ${ $code@var324 $=@expr1073745005 $"enum  E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073745006 $tokenValues_ $(@expr1073745007 "cppcheck-2.8/test/testvalueflow.cpp" $, 1212 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073745008 $!@expr1073745009 $assertEquals $(@expr1073745010 "cppcheck-2.8/test/testvalueflow.cpp" $, 1212 $, $1U $, $values@var325 $.@expr1073745011 $size $(@expr1073745012 $) $) $) { $return $; } $if $(@expr1073745013 $!@expr1073745014 $assertEquals $(@expr1073745015 "cppcheck-2.8/test/testvalueflow.cpp" $, 1212 $, settings@var102 .@expr2690 sizeof_wchar_t@var331 $, $values@var325 $.@expr1073745017 $back $(@expr1073745018 $) $.@expr1073745019 $intvalue $) $) { $return $; } $} $while $(@expr1073745020 $false $) ;
1213: $do ${ $code@var324 $=@expr1073745021 $"enum  E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" $; $values@var325 $=@expr1073745022 $tokenValues_ $(@expr1073745023 "cppcheck-2.8/test/testvalueflow.cpp" $, 1213 $, $code@var324 $, $"( E )" $) $; $if $(@expr1073745024 $!@expr1073745025 $assertEquals $(@expr1073745026 "cppcheck-2.8/test/testvalueflow.cpp" $, 1213 $, $1U $, $values@var325 $.@expr1073745027 $size $(@expr1073745028 $) $) $) { $return $; } $if $(@expr1073745029 $!@expr1073745030 $assertEquals $(@expr1073745031 "cppcheck-2.8/test/testvalueflow.cpp" $, 1213 $, settings@var102 .@expr3208 sizeof_size_t@var335 $, $values@var325 $.@expr1073745033 $back $(@expr1073745034 $) $.@expr1073745035 $intvalue $) $) { $return $; } $} $while $(@expr1073745036 $false $) ;
1214:
1215:
1216: $do ${ $code@var324 $=@expr1073745037 $"enum  E  { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745038 $tokenValues_ $(@expr1073745039 "cppcheck-2.8/test/testvalueflow.cpp" $, 1216 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745040 $!@expr1073745041 $assertEquals $(@expr1073745042 "cppcheck-2.8/test/testvalueflow.cpp" $, 1216 $, $1U $, $values@var325 $.@expr1073745043 $size $(@expr1073745044 $) $) $) { $return $; } $if $(@expr1073745045 $!@expr1073745046 $assertEquals $(@expr1073745047 "cppcheck-2.8/test/testvalueflow.cpp" $, 1216 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073745049 $back $(@expr1073745050 $) $.@expr1073745051 $intvalue $) $) { $return $; } $} $while $(@expr1073745052 $false $) ;
1217:
1218:
1219: $do ${ $code@var324 $=@expr1073745053 $"enum  E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745054 $tokenValues_ $(@expr1073745055 "cppcheck-2.8/test/testvalueflow.cpp" $, 1219 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745056 $!@expr1073745057 $assertEquals $(@expr1073745058 "cppcheck-2.8/test/testvalueflow.cpp" $, 1219 $, $1U $, $values@var325 $.@expr1073745059 $size $(@expr1073745060 $) $) $) { $return $; } $if $(@expr1073745061 $!@expr1073745062 $assertEquals $(@expr1073745063 "cppcheck-2.8/test/testvalueflow.cpp" $, 1219 $, 1U $, $values@var325 $.@expr1073745064 $back $(@expr1073745065 $) $.@expr1073745066 $intvalue $) $) { $return $; } $} $while $(@expr1073745067 $false $) ;
1220: $do ${ $code@var324 $=@expr1073745068 $"enum  E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745069 $tokenValues_ $(@expr1073745070 "cppcheck-2.8/test/testvalueflow.cpp" $, 1220 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745071 $!@expr1073745072 $assertEquals $(@expr1073745073 "cppcheck-2.8/test/testvalueflow.cpp" $, 1220 $, $1U $, $values@var325 $.@expr1073745074 $size $(@expr1073745075 $) $) $) { $return $; } $if $(@expr1073745076 $!@expr1073745077 $assertEquals $(@expr1073745078 "cppcheck-2.8/test/testvalueflow.cpp" $, 1220 $, 1U $, $values@var325 $.@expr1073745079 $back $(@expr1073745080 $) $.@expr1073745081 $intvalue $) $) { $return $; } $} $while $(@expr1073745082 $false $) ;
1221: $do ${ $code@var324 $=@expr1073745083 $"enum  E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745084 $tokenValues_ $(@expr1073745085 "cppcheck-2.8/test/testvalueflow.cpp" $, 1221 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745086 $!@expr1073745087 $assertEquals $(@expr1073745088 "cppcheck-2.8/test/testvalueflow.cpp" $, 1221 $, $1U $, $values@var325 $.@expr1073745089 $size $(@expr1073745090 $) $) $) { $return $; } $if $(@expr1073745091 $!@expr1073745092 $assertEquals $(@expr1073745093 "cppcheck-2.8/test/testvalueflow.cpp" $, 1221 $, 1U $, $values@var325 $.@expr1073745094 $back $(@expr1073745095 $) $.@expr1073745096 $intvalue $) $) { $return $; } $} $while $(@expr1073745097 $false $) ;
1222: $do ${ $code@var324 $=@expr1073745098 $"enum  E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745099 $tokenValues_ $(@expr1073745100 "cppcheck-2.8/test/testvalueflow.cpp" $, 1222 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745101 $!@expr1073745102 $assertEquals $(@expr1073745103 "cppcheck-2.8/test/testvalueflow.cpp" $, 1222 $, $1U $, $values@var325 $.@expr1073745104 $size $(@expr1073745105 $) $) $) { $return $; } $if $(@expr1073745106 $!@expr1073745107 $assertEquals $(@expr1073745108 "cppcheck-2.8/test/testvalueflow.cpp" $, 1222 $, settings@var102 .@expr2626 sizeof_short@var327 $, $values@var325 $.@expr1073745110 $back $(@expr1073745111 $) $.@expr1073745112 $intvalue $) $) { $return $; } $} $while $(@expr1073745113 $false $) ;
1223: $do ${ $code@var324 $=@expr1073745114 $"enum  E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745115 $tokenValues_ $(@expr1073745116 "cppcheck-2.8/test/testvalueflow.cpp" $, 1223 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745117 $!@expr1073745118 $assertEquals $(@expr1073745119 "cppcheck-2.8/test/testvalueflow.cpp" $, 1223 $, $1U $, $values@var325 $.@expr1073745120 $size $(@expr1073745121 $) $) $) { $return $; } $if $(@expr1073745122 $!@expr1073745123 $assertEquals $(@expr1073745124 "cppcheck-2.8/test/testvalueflow.cpp" $, 1223 $, settings@var102 .@expr2626 sizeof_short@var327 $, $values@var325 $.@expr1073745126 $back $(@expr1073745127 $) $.@expr1073745128 $intvalue $) $) { $return $; } $} $while $(@expr1073745129 $false $) ;
1224: $do ${ $code@var324 $=@expr1073745130 $"enum  E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745131 $tokenValues_ $(@expr1073745132 "cppcheck-2.8/test/testvalueflow.cpp" $, 1224 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745133 $!@expr1073745134 $assertEquals $(@expr1073745135 "cppcheck-2.8/test/testvalueflow.cpp" $, 1224 $, $1U $, $values@var325 $.@expr1073745136 $size $(@expr1073745137 $) $) $) { $return $; } $if $(@expr1073745138 $!@expr1073745139 $assertEquals $(@expr1073745140 "cppcheck-2.8/test/testvalueflow.cpp" $, 1224 $, settings@var102 .@expr2626 sizeof_short@var327 $, $values@var325 $.@expr1073745142 $back $(@expr1073745143 $) $.@expr1073745144 $intvalue $) $) { $return $; } $} $while $(@expr1073745145 $false $) ;
1225: $do ${ $code@var324 $=@expr1073745146 $"enum  E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745147 $tokenValues_ $(@expr1073745148 "cppcheck-2.8/test/testvalueflow.cpp" $, 1225 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745149 $!@expr1073745150 $assertEquals $(@expr1073745151 "cppcheck-2.8/test/testvalueflow.cpp" $, 1225 $, $1U $, $values@var325 $.@expr1073745152 $size $(@expr1073745153 $) $) $) { $return $; } $if $(@expr1073745154 $!@expr1073745155 $assertEquals $(@expr1073745156 "cppcheck-2.8/test/testvalueflow.cpp" $, 1225 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073745158 $back $(@expr1073745159 $) $.@expr1073745160 $intvalue $) $) { $return $; } $} $while $(@expr1073745161 $false $) ;
1226: $do ${ $code@var324 $=@expr1073745162 $"enum  E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745163 $tokenValues_ $(@expr1073745164 "cppcheck-2.8/test/testvalueflow.cpp" $, 1226 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745165 $!@expr1073745166 $assertEquals $(@expr1073745167 "cppcheck-2.8/test/testvalueflow.cpp" $, 1226 $, $1U $, $values@var325 $.@expr1073745168 $size $(@expr1073745169 $) $) $) { $return $; } $if $(@expr1073745170 $!@expr1073745171 $assertEquals $(@expr1073745172 "cppcheck-2.8/test/testvalueflow.cpp" $, 1226 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073745174 $back $(@expr1073745175 $) $.@expr1073745176 $intvalue $) $) { $return $; } $} $while $(@expr1073745177 $false $) ;
1227: $do ${ $code@var324 $=@expr1073745178 $"enum  E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745179 $tokenValues_ $(@expr1073745180 "cppcheck-2.8/test/testvalueflow.cpp" $, 1227 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745181 $!@expr1073745182 $assertEquals $(@expr1073745183 "cppcheck-2.8/test/testvalueflow.cpp" $, 1227 $, $1U $, $values@var325 $.@expr1073745184 $size $(@expr1073745185 $) $) $) { $return $; } $if $(@expr1073745186 $!@expr1073745187 $assertEquals $(@expr1073745188 "cppcheck-2.8/test/testvalueflow.cpp" $, 1227 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073745190 $back $(@expr1073745191 $) $.@expr1073745192 $intvalue $) $) { $return $; } $} $while $(@expr1073745193 $false $) ;
1228: $do ${ $code@var324 $=@expr1073745194 $"enum  E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745195 $tokenValues_ $(@expr1073745196 "cppcheck-2.8/test/testvalueflow.cpp" $, 1228 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745197 $!@expr1073745198 $assertEquals $(@expr1073745199 "cppcheck-2.8/test/testvalueflow.cpp" $, 1228 $, $1U $, $values@var325 $.@expr1073745200 $size $(@expr1073745201 $) $) $) { $return $; } $if $(@expr1073745202 $!@expr1073745203 $assertEquals $(@expr1073745204 "cppcheck-2.8/test/testvalueflow.cpp" $, 1228 $, settings@var102 .@expr2658 sizeof_long@var329 $, $values@var325 $.@expr1073745206 $back $(@expr1073745207 $) $.@expr1073745208 $intvalue $) $) { $return $; } $} $while $(@expr1073745209 $false $) ;
1229: $do ${ $code@var324 $=@expr1073745210 $"enum  E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745211 $tokenValues_ $(@expr1073745212 "cppcheck-2.8/test/testvalueflow.cpp" $, 1229 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745213 $!@expr1073745214 $assertEquals $(@expr1073745215 "cppcheck-2.8/test/testvalueflow.cpp" $, 1229 $, $1U $, $values@var325 $.@expr1073745216 $size $(@expr1073745217 $) $) $) { $return $; } $if $(@expr1073745218 $!@expr1073745219 $assertEquals $(@expr1073745220 "cppcheck-2.8/test/testvalueflow.cpp" $, 1229 $, settings@var102 .@expr2658 sizeof_long@var329 $, $values@var325 $.@expr1073745222 $back $(@expr1073745223 $) $.@expr1073745224 $intvalue $) $) { $return $; } $} $while $(@expr1073745225 $false $) ;
1230: $do ${ $code@var324 $=@expr1073745226 $"enum  E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745227 $tokenValues_ $(@expr1073745228 "cppcheck-2.8/test/testvalueflow.cpp" $, 1230 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745229 $!@expr1073745230 $assertEquals $(@expr1073745231 "cppcheck-2.8/test/testvalueflow.cpp" $, 1230 $, $1U $, $values@var325 $.@expr1073745232 $size $(@expr1073745233 $) $) $) { $return $; } $if $(@expr1073745234 $!@expr1073745235 $assertEquals $(@expr1073745236 "cppcheck-2.8/test/testvalueflow.cpp" $, 1230 $, settings@var102 .@expr2658 sizeof_long@var329 $, $values@var325 $.@expr1073745238 $back $(@expr1073745239 $) $.@expr1073745240 $intvalue $) $) { $return $; } $} $while $(@expr1073745241 $false $) ;
1231: $do ${ $code@var324 $=@expr1073745242 $"enum  E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745243 $tokenValues_ $(@expr1073745244 "cppcheck-2.8/test/testvalueflow.cpp" $, 1231 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745245 $!@expr1073745246 $assertEquals $(@expr1073745247 "cppcheck-2.8/test/testvalueflow.cpp" $, 1231 $, $1U $, $values@var325 $.@expr1073745248 $size $(@expr1073745249 $) $) $) { $return $; } $if $(@expr1073745250 $!@expr1073745251 $assertEquals $(@expr1073745252 "cppcheck-2.8/test/testvalueflow.cpp" $, 1231 $, settings@var102 .@expr2674 sizeof_long_long@var330 $, $values@var325 $.@expr1073745254 $back $(@expr1073745255 $) $.@expr1073745256 $intvalue $) $) { $return $; } $} $while $(@expr1073745257 $false $) ;
1232: $do ${ $code@var324 $=@expr1073745258 $"enum  E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745259 $tokenValues_ $(@expr1073745260 "cppcheck-2.8/test/testvalueflow.cpp" $, 1232 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745261 $!@expr1073745262 $assertEquals $(@expr1073745263 "cppcheck-2.8/test/testvalueflow.cpp" $, 1232 $, $1U $, $values@var325 $.@expr1073745264 $size $(@expr1073745265 $) $) $) { $return $; } $if $(@expr1073745266 $!@expr1073745267 $assertEquals $(@expr1073745268 "cppcheck-2.8/test/testvalueflow.cpp" $, 1232 $, settings@var102 .@expr2674 sizeof_long_long@var330 $, $values@var325 $.@expr1073745270 $back $(@expr1073745271 $) $.@expr1073745272 $intvalue $) $) { $return $; } $} $while $(@expr1073745273 $false $) ;
1233: $do ${ $code@var324 $=@expr1073745274 $"enum  E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745275 $tokenValues_ $(@expr1073745276 "cppcheck-2.8/test/testvalueflow.cpp" $, 1233 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745277 $!@expr1073745278 $assertEquals $(@expr1073745279 "cppcheck-2.8/test/testvalueflow.cpp" $, 1233 $, $1U $, $values@var325 $.@expr1073745280 $size $(@expr1073745281 $) $) $) { $return $; } $if $(@expr1073745282 $!@expr1073745283 $assertEquals $(@expr1073745284 "cppcheck-2.8/test/testvalueflow.cpp" $, 1233 $, settings@var102 .@expr2674 sizeof_long_long@var330 $, $values@var325 $.@expr1073745286 $back $(@expr1073745287 $) $.@expr1073745288 $intvalue $) $) { $return $; } $} $while $(@expr1073745289 $false $) ;
1234: $do ${ $code@var324 $=@expr1073745290 $"enum  E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745291 $tokenValues_ $(@expr1073745292 "cppcheck-2.8/test/testvalueflow.cpp" $, 1234 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745293 $!@expr1073745294 $assertEquals $(@expr1073745295 "cppcheck-2.8/test/testvalueflow.cpp" $, 1234 $, $1U $, $values@var325 $.@expr1073745296 $size $(@expr1073745297 $) $) $) { $return $; } $if $(@expr1073745298 $!@expr1073745299 $assertEquals $(@expr1073745300 "cppcheck-2.8/test/testvalueflow.cpp" $, 1234 $, settings@var102 .@expr2690 sizeof_wchar_t@var331 $, $values@var325 $.@expr1073745302 $back $(@expr1073745303 $) $.@expr1073745304 $intvalue $) $) { $return $; } $} $while $(@expr1073745305 $false $) ;
1235: $do ${ $code@var324 $=@expr1073745306 $"enum  E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" $; $values@var325 $=@expr1073745307 $tokenValues_ $(@expr1073745308 "cppcheck-2.8/test/testvalueflow.cpp" $, 1235 $, $code@var324 $, $"( E0 )" $) $; $if $(@expr1073745309 $!@expr1073745310 $assertEquals $(@expr1073745311 "cppcheck-2.8/test/testvalueflow.cpp" $, 1235 $, $1U $, $values@var325 $.@expr1073745312 $size $(@expr1073745313 $) $) $) { $return $; } $if $(@expr1073745314 $!@expr1073745315 $assertEquals $(@expr1073745316 "cppcheck-2.8/test/testvalueflow.cpp" $, 1235 $, settings@var102 .@expr3208 sizeof_size_t@var335 $, $values@var325 $.@expr1073745318 $back $(@expr1073745319 $) $.@expr1073745320 $intvalue $) $) { $return $; } $} $while $(@expr1073745321 $false $) ;
1236:
1237:
1238: $do ${ $code@var324 $=@expr1073745322 $"enum class E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745323 $tokenValues_ $(@expr1073745324 "cppcheck-2.8/test/testvalueflow.cpp" $, 1238 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745325 $!@expr1073745326 $assertEquals $(@expr1073745327 "cppcheck-2.8/test/testvalueflow.cpp" $, 1238 $, $1U $, $values@var325 $.@expr1073745328 $size $(@expr1073745329 $) $) $) { $return $; } $if $(@expr1073745330 $!@expr1073745331 $assertEquals $(@expr1073745332 "cppcheck-2.8/test/testvalueflow.cpp" $, 1238 $, 1U $, $values@var325 $.@expr1073745333 $back $(@expr1073745334 $) $.@expr1073745335 $intvalue $) $) { $return $; } $} $while $(@expr1073745336 $false $) ;
1239: $do ${ $code@var324 $=@expr1073745337 $"enum class E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745338 $tokenValues_ $(@expr1073745339 "cppcheck-2.8/test/testvalueflow.cpp" $, 1239 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745340 $!@expr1073745341 $assertEquals $(@expr1073745342 "cppcheck-2.8/test/testvalueflow.cpp" $, 1239 $, $1U $, $values@var325 $.@expr1073745343 $size $(@expr1073745344 $) $) $) { $return $; } $if $(@expr1073745345 $!@expr1073745346 $assertEquals $(@expr1073745347 "cppcheck-2.8/test/testvalueflow.cpp" $, 1239 $, 1U $, $values@var325 $.@expr1073745348 $back $(@expr1073745349 $) $.@expr1073745350 $intvalue $) $) { $return $; } $} $while $(@expr1073745351 $false $) ;
1240: $do ${ $code@var324 $=@expr1073745352 $"enum class E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745353 $tokenValues_ $(@expr1073745354 "cppcheck-2.8/test/testvalueflow.cpp" $, 1240 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745355 $!@expr1073745356 $assertEquals $(@expr1073745357 "cppcheck-2.8/test/testvalueflow.cpp" $, 1240 $, $1U $, $values@var325 $.@expr1073745358 $size $(@expr1073745359 $) $) $) { $return $; } $if $(@expr1073745360 $!@expr1073745361 $assertEquals $(@expr1073745362 "cppcheck-2.8/test/testvalueflow.cpp" $, 1240 $, 1U $, $values@var325 $.@expr1073745363 $back $(@expr1073745364 $) $.@expr1073745365 $intvalue $) $) { $return $; } $} $while $(@expr1073745366 $false $) ;
1241: $do ${ $code@var324 $=@expr1073745367 $"enum class E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745368 $tokenValues_ $(@expr1073745369 "cppcheck-2.8/test/testvalueflow.cpp" $, 1241 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745370 $!@expr1073745371 $assertEquals $(@expr1073745372 "cppcheck-2.8/test/testvalueflow.cpp" $, 1241 $, $1U $, $values@var325 $.@expr1073745373 $size $(@expr1073745374 $) $) $) { $return $; } $if $(@expr1073745375 $!@expr1073745376 $assertEquals $(@expr1073745377 "cppcheck-2.8/test/testvalueflow.cpp" $, 1241 $, settings@var102 .@expr2626 sizeof_short@var327 $, $values@var325 $.@expr1073745379 $back $(@expr1073745380 $) $.@expr1073745381 $intvalue $) $) { $return $; } $} $while $(@expr1073745382 $false $) ;
1242: $do ${ $code@var324 $=@expr1073745383 $"enum class E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745384 $tokenValues_ $(@expr1073745385 "cppcheck-2.8/test/testvalueflow.cpp" $, 1242 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745386 $!@expr1073745387 $assertEquals $(@expr1073745388 "cppcheck-2.8/test/testvalueflow.cpp" $, 1242 $, $1U $, $values@var325 $.@expr1073745389 $size $(@expr1073745390 $) $) $) { $return $; } $if $(@expr1073745391 $!@expr1073745392 $assertEquals $(@expr1073745393 "cppcheck-2.8/test/testvalueflow.cpp" $, 1242 $, settings@var102 .@expr2626 sizeof_short@var327 $, $values@var325 $.@expr1073745395 $back $(@expr1073745396 $) $.@expr1073745397 $intvalue $) $) { $return $; } $} $while $(@expr1073745398 $false $) ;
1243: $do ${ $code@var324 $=@expr1073745399 $"enum class E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745400 $tokenValues_ $(@expr1073745401 "cppcheck-2.8/test/testvalueflow.cpp" $, 1243 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745402 $!@expr1073745403 $assertEquals $(@expr1073745404 "cppcheck-2.8/test/testvalueflow.cpp" $, 1243 $, $1U $, $values@var325 $.@expr1073745405 $size $(@expr1073745406 $) $) $) { $return $; } $if $(@expr1073745407 $!@expr1073745408 $assertEquals $(@expr1073745409 "cppcheck-2.8/test/testvalueflow.cpp" $, 1243 $, settings@var102 .@expr2626 sizeof_short@var327 $, $values@var325 $.@expr1073745411 $back $(@expr1073745412 $) $.@expr1073745413 $intvalue $) $) { $return $; } $} $while $(@expr1073745414 $false $) ;
1244: $do ${ $code@var324 $=@expr1073745415 $"enum class E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745416 $tokenValues_ $(@expr1073745417 "cppcheck-2.8/test/testvalueflow.cpp" $, 1244 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745418 $!@expr1073745419 $assertEquals $(@expr1073745420 "cppcheck-2.8/test/testvalueflow.cpp" $, 1244 $, $1U $, $values@var325 $.@expr1073745421 $size $(@expr1073745422 $) $) $) { $return $; } $if $(@expr1073745423 $!@expr1073745424 $assertEquals $(@expr1073745425 "cppcheck-2.8/test/testvalueflow.cpp" $, 1244 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073745427 $back $(@expr1073745428 $) $.@expr1073745429 $intvalue $) $) { $return $; } $} $while $(@expr1073745430 $false $) ;
1245: $do ${ $code@var324 $=@expr1073745431 $"enum class E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745432 $tokenValues_ $(@expr1073745433 "cppcheck-2.8/test/testvalueflow.cpp" $, 1245 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745434 $!@expr1073745435 $assertEquals $(@expr1073745436 "cppcheck-2.8/test/testvalueflow.cpp" $, 1245 $, $1U $, $values@var325 $.@expr1073745437 $size $(@expr1073745438 $) $) $) { $return $; } $if $(@expr1073745439 $!@expr1073745440 $assertEquals $(@expr1073745441 "cppcheck-2.8/test/testvalueflow.cpp" $, 1245 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073745443 $back $(@expr1073745444 $) $.@expr1073745445 $intvalue $) $) { $return $; } $} $while $(@expr1073745446 $false $) ;
1246: $do ${ $code@var324 $=@expr1073745447 $"enum class E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745448 $tokenValues_ $(@expr1073745449 "cppcheck-2.8/test/testvalueflow.cpp" $, 1246 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745450 $!@expr1073745451 $assertEquals $(@expr1073745452 "cppcheck-2.8/test/testvalueflow.cpp" $, 1246 $, $1U $, $values@var325 $.@expr1073745453 $size $(@expr1073745454 $) $) $) { $return $; } $if $(@expr1073745455 $!@expr1073745456 $assertEquals $(@expr1073745457 "cppcheck-2.8/test/testvalueflow.cpp" $, 1246 $, settings@var102 .@expr2642 sizeof_int@var328 $, $values@var325 $.@expr1073745459 $back $(@expr1073745460 $) $.@expr1073745461 $intvalue $) $) { $return $; } $} $while $(@expr1073745462 $false $) ;
1247: $do ${ $code@var324 $=@expr1073745463 $"enum class E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745464 $tokenValues_ $(@expr1073745465 "cppcheck-2.8/test/testvalueflow.cpp" $, 1247 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745466 $!@expr1073745467 $assertEquals $(@expr1073745468 "cppcheck-2.8/test/testvalueflow.cpp" $, 1247 $, $1U $, $values@var325 $.@expr1073745469 $size $(@expr1073745470 $) $) $) { $return $; } $if $(@expr1073745471 $!@expr1073745472 $assertEquals $(@expr1073745473 "cppcheck-2.8/test/testvalueflow.cpp" $, 1247 $, settings@var102 .@expr2658 sizeof_long@var329 $, $values@var325 $.@expr1073745475 $back $(@expr1073745476 $) $.@expr1073745477 $intvalue $) $) { $return $; } $} $while $(@expr1073745478 $false $) ;
1248: $do ${ $code@var324 $=@expr1073745479 $"enum class E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745480 $tokenValues_ $(@expr1073745481 "cppcheck-2.8/test/testvalueflow.cpp" $, 1248 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745482 $!@expr1073745483 $assertEquals $(@expr1073745484 "cppcheck-2.8/test/testvalueflow.cpp" $, 1248 $, $1U $, $values@var325 $.@expr1073745485 $size $(@expr1073745486 $) $) $) { $return $; } $if $(@expr1073745487 $!@expr1073745488 $assertEquals $(@expr1073745489 "cppcheck-2.8/test/testvalueflow.cpp" $, 1248 $, settings@var102 .@expr2658 sizeof_long@var329 $, $values@var325 $.@expr1073745491 $back $(@expr1073745492 $) $.@expr1073745493 $intvalue $) $) { $return $; } $} $while $(@expr1073745494 $false $) ;
1249: $do ${ $code@var324 $=@expr1073745495 $"enum class E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745496 $tokenValues_ $(@expr1073745497 "cppcheck-2.8/test/testvalueflow.cpp" $, 1249 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745498 $!@expr1073745499 $assertEquals $(@expr1073745500 "cppcheck-2.8/test/testvalueflow.cpp" $, 1249 $, $1U $, $values@var325 $.@expr1073745501 $size $(@expr1073745502 $) $) $) { $return $; } $if $(@expr1073745503 $!@expr1073745504 $assertEquals $(@expr1073745505 "cppcheck-2.8/test/testvalueflow.cpp" $, 1249 $, settings@var102 .@expr2658 sizeof_long@var329 $, $values@var325 $.@expr1073745507 $back $(@expr1073745508 $) $.@expr1073745509 $intvalue $) $) { $return $; } $} $while $(@expr1073745510 $false $) ;
1250: $do ${ $code@var324 $=@expr1073745511 $"enum class E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745512 $tokenValues_ $(@expr1073745513 "cppcheck-2.8/test/testvalueflow.cpp" $, 1250 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745514 $!@expr1073745515 $assertEquals $(@expr1073745516 "cppcheck-2.8/test/testvalueflow.cpp" $, 1250 $, $1U $, $values@var325 $.@expr1073745517 $size $(@expr1073745518 $) $) $) { $return $; } $if $(@expr1073745519 $!@expr1073745520 $assertEquals $(@expr1073745521 "cppcheck-2.8/test/testvalueflow.cpp" $, 1250 $, settings@var102 .@expr2674 sizeof_long_long@var330 $, $values@var325 $.@expr1073745523 $back $(@expr1073745524 $) $.@expr1073745525 $intvalue $) $) { $return $; } $} $while $(@expr1073745526 $false $) ;
1251: $do ${ $code@var324 $=@expr1073745527 $"enum class E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745528 $tokenValues_ $(@expr1073745529 "cppcheck-2.8/test/testvalueflow.cpp" $, 1251 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745530 $!@expr1073745531 $assertEquals $(@expr1073745532 "cppcheck-2.8/test/testvalueflow.cpp" $, 1251 $, $1U $, $values@var325 $.@expr1073745533 $size $(@expr1073745534 $) $) $) { $return $; } $if $(@expr1073745535 $!@expr1073745536 $assertEquals $(@expr1073745537 "cppcheck-2.8/test/testvalueflow.cpp" $, 1251 $, settings@var102 .@expr2674 sizeof_long_long@var330 $, $values@var325 $.@expr1073745539 $back $(@expr1073745540 $) $.@expr1073745541 $intvalue $) $) { $return $; } $} $while $(@expr1073745542 $false $) ;
1252: $do ${ $code@var324 $=@expr1073745543 $"enum class E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745544 $tokenValues_ $(@expr1073745545 "cppcheck-2.8/test/testvalueflow.cpp" $, 1252 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745546 $!@expr1073745547 $assertEquals $(@expr1073745548 "cppcheck-2.8/test/testvalueflow.cpp" $, 1252 $, $1U $, $values@var325 $.@expr1073745549 $size $(@expr1073745550 $) $) $) { $return $; } $if $(@expr1073745551 $!@expr1073745552 $assertEquals $(@expr1073745553 "cppcheck-2.8/test/testvalueflow.cpp" $, 1252 $, settings@var102 .@expr2674 sizeof_long_long@var330 $, $values@var325 $.@expr1073745555 $back $(@expr1073745556 $) $.@expr1073745557 $intvalue $) $) { $return $; } $} $while $(@expr1073745558 $false $) ;
1253: $do ${ $code@var324 $=@expr1073745559 $"enum class E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745560 $tokenValues_ $(@expr1073745561 "cppcheck-2.8/test/testvalueflow.cpp" $, 1253 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745562 $!@expr1073745563 $assertEquals $(@expr1073745564 "cppcheck-2.8/test/testvalueflow.cpp" $, 1253 $, $1U $, $values@var325 $.@expr1073745565 $size $(@expr1073745566 $) $) $) { $return $; } $if $(@expr1073745567 $!@expr1073745568 $assertEquals $(@expr1073745569 "cppcheck-2.8/test/testvalueflow.cpp" $, 1253 $, settings@var102 .@expr2690 sizeof_wchar_t@var331 $, $values@var325 $.@expr1073745571 $back $(@expr1073745572 $) $.@expr1073745573 $intvalue $) $) { $return $; } $} $while $(@expr1073745574 $false $) ;
1254: $do ${ $code@var324 $=@expr1073745575 $"enum class E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" $; $values@var325 $=@expr1073745576 $tokenValues_ $(@expr1073745577 "cppcheck-2.8/test/testvalueflow.cpp" $, 1254 $, $code@var324 $, $"( E :: E0 )" $) $; $if $(@expr1073745578 $!@expr1073745579 $assertEquals $(@expr1073745580 "cppcheck-2.8/test/testvalueflow.cpp" $, 1254 $, $1U $, $values@var325 $.@expr1073745581 $size $(@expr1073745582 $) $) $) { $return $; } $if $(@expr1073745583 $!@expr1073745584 $assertEquals $(@expr1073745585 "cppcheck-2.8/test/testvalueflow.cpp" $, 1254 $, settings@var102 .@expr3208 sizeof_size_t@var335 $, $values@var325 $.@expr1073745587 $back $(@expr1073745588 $) $.@expr1073745589 $intvalue $) $) { $return $; } $} $while $(@expr1073745590 $false $) ;
1255:
|
1269:
1270: $do ${ $code@var324 $=@expr1073745591 $"enum E  { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745592 $tokenValues_ $(@expr1073745593 "cppcheck-2.8/test/testvalueflow.cpp" $, 1270 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745594 $!@expr1073745595 $assertEquals $(@expr1073745596 "cppcheck-2.8/test/testvalueflow.cpp" $, 1270 $, $1U $, $values@var325 $.@expr1073745597 $size $(@expr1073745598 $) $) $) { $return $; } $if $(@expr1073745599 $!@expr1073745600 $assertEquals $(@expr1073745601 "cppcheck-2.8/test/testvalueflow.cpp" $, 1270 $, settings@var102 .@expr2642 sizeof_int@var328 $*@expr1073745603 $2U $, $values@var325 $.@expr1073745604 $back $(@expr1073745605 $) $.@expr1073745606 $intvalue $) $) { $return $; } $} $while $(@expr1073745607 $false $) ;
1271:
1272:
1273: $do ${ $code@var324 $=@expr1073745608 $"enum E : char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745609 $tokenValues_ $(@expr1073745610 "cppcheck-2.8/test/testvalueflow.cpp" $, 1273 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745611 $!@expr1073745612 $assertEquals $(@expr1073745613 "cppcheck-2.8/test/testvalueflow.cpp" $, 1273 $, $1U $, $values@var325 $.@expr1073745614 $size $(@expr1073745615 $) $) $) { $return $; } $if $(@expr1073745616 $!@expr1073745617 $assertEquals $(@expr1073745618 "cppcheck-2.8/test/testvalueflow.cpp" $, 1273 $, 1U $*@expr1073745619 $2U $, $values@var325 $.@expr1073745620 $back $(@expr1073745621 $) $.@expr1073745622 $intvalue $) $) { $return $; } $} $while $(@expr1073745623 $false $) ;
1274: $do ${ $code@var324 $=@expr1073745624 $"enum E : signed char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745625 $tokenValues_ $(@expr1073745626 "cppcheck-2.8/test/testvalueflow.cpp" $, 1274 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745627 $!@expr1073745628 $assertEquals $(@expr1073745629 "cppcheck-2.8/test/testvalueflow.cpp" $, 1274 $, $1U $, $values@var325 $.@expr1073745630 $size $(@expr1073745631 $) $) $) { $return $; } $if $(@expr1073745632 $!@expr1073745633 $assertEquals $(@expr1073745634 "cppcheck-2.8/test/testvalueflow.cpp" $, 1274 $, 1U $*@expr1073745635 $2U $, $values@var325 $.@expr1073745636 $back $(@expr1073745637 $) $.@expr1073745638 $intvalue $) $) { $return $; } $} $while $(@expr1073745639 $false $) ;
1275: $do ${ $code@var324 $=@expr1073745640 $"enum E : unsigned char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745641 $tokenValues_ $(@expr1073745642 "cppcheck-2.8/test/testvalueflow.cpp" $, 1275 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745643 $!@expr1073745644 $assertEquals $(@expr1073745645 "cppcheck-2.8/test/testvalueflow.cpp" $, 1275 $, $1U $, $values@var325 $.@expr1073745646 $size $(@expr1073745647 $) $) $) { $return $; } $if $(@expr1073745648 $!@expr1073745649 $assertEquals $(@expr1073745650 "cppcheck-2.8/test/testvalueflow.cpp" $, 1275 $, 1U $*@expr1073745651 $2U $, $values@var325 $.@expr1073745652 $back $(@expr1073745653 $) $.@expr1073745654 $intvalue $) $) { $return $; } $} $while $(@expr1073745655 $false $) ;
1276: $do ${ $code@var324 $=@expr1073745656 $"enum E : short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745657 $tokenValues_ $(@expr1073745658 "cppcheck-2.8/test/testvalueflow.cpp" $, 1276 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745659 $!@expr1073745660 $assertEquals $(@expr1073745661 "cppcheck-2.8/test/testvalueflow.cpp" $, 1276 $, $1U $, $values@var325 $.@expr1073745662 $size $(@expr1073745663 $) $) $) { $return $; } $if $(@expr1073745664 $!@expr1073745665 $assertEquals $(@expr1073745666 "cppcheck-2.8/test/testvalueflow.cpp" $, 1276 $, settings@var102 .@expr2626 sizeof_short@var327 $*@expr1073745668 $2U $, $values@var325 $.@expr1073745669 $back $(@expr1073745670 $) $.@expr1073745671 $intvalue $) $) { $return $; } $} $while $(@expr1073745672 $false $) ;
1277: $do ${ $code@var324 $=@expr1073745673 $"enum E : signed short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745674 $tokenValues_ $(@expr1073745675 "cppcheck-2.8/test/testvalueflow.cpp" $, 1277 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745676 $!@expr1073745677 $assertEquals $(@expr1073745678 "cppcheck-2.8/test/testvalueflow.cpp" $, 1277 $, $1U $, $values@var325 $.@expr1073745679 $size $(@expr1073745680 $) $) $) { $return $; } $if $(@expr1073745681 $!@expr1073745682 $assertEquals $(@expr1073745683 "cppcheck-2.8/test/testvalueflow.cpp" $, 1277 $, settings@var102 .@expr2626 sizeof_short@var327 $*@expr1073745685 $2U $, $values@var325 $.@expr1073745686 $back $(@expr1073745687 $) $.@expr1073745688 $intvalue $) $) { $return $; } $} $while $(@expr1073745689 $false $) ;
1278: $do ${ $code@var324 $=@expr1073745690 $"enum E : unsigned short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745691 $tokenValues_ $(@expr1073745692 "cppcheck-2.8/test/testvalueflow.cpp" $, 1278 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745693 $!@expr1073745694 $assertEquals $(@expr1073745695 "cppcheck-2.8/test/testvalueflow.cpp" $, 1278 $, $1U $, $values@var325 $.@expr1073745696 $size $(@expr1073745697 $) $) $) { $return $; } $if $(@expr1073745698 $!@expr1073745699 $assertEquals $(@expr1073745700 "cppcheck-2.8/test/testvalueflow.cpp" $, 1278 $, settings@var102 .@expr2626 sizeof_short@var327 $*@expr1073745702 $2U $, $values@var325 $.@expr1073745703 $back $(@expr1073745704 $) $.@expr1073745705 $intvalue $) $) { $return $; } $} $while $(@expr1073745706 $false $) ;
1279: $do ${ $code@var324 $=@expr1073745707 $"enum E : int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745708 $tokenValues_ $(@expr1073745709 "cppcheck-2.8/test/testvalueflow.cpp" $, 1279 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745710 $!@expr1073745711 $assertEquals $(@expr1073745712 "cppcheck-2.8/test/testvalueflow.cpp" $, 1279 $, $1U $, $values@var325 $.@expr1073745713 $size $(@expr1073745714 $) $) $) { $return $; } $if $(@expr1073745715 $!@expr1073745716 $assertEquals $(@expr1073745717 "cppcheck-2.8/test/testvalueflow.cpp" $, 1279 $, settings@var102 .@expr2642 sizeof_int@var328 $*@expr1073745719 $2U $, $values@var325 $.@expr1073745720 $back $(@expr1073745721 $) $.@expr1073745722 $intvalue $) $) { $return $; } $} $while $(@expr1073745723 $false $) ;
1280: $do ${ $code@var324 $=@expr1073745724 $"enum E : signed int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745725 $tokenValues_ $(@expr1073745726 "cppcheck-2.8/test/testvalueflow.cpp" $, 1280 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745727 $!@expr1073745728 $assertEquals $(@expr1073745729 "cppcheck-2.8/test/testvalueflow.cpp" $, 1280 $, $1U $, $values@var325 $.@expr1073745730 $size $(@expr1073745731 $) $) $) { $return $; } $if $(@expr1073745732 $!@expr1073745733 $assertEquals $(@expr1073745734 "cppcheck-2.8/test/testvalueflow.cpp" $, 1280 $, settings@var102 .@expr2642 sizeof_int@var328 $*@expr1073745736 $2U $, $values@var325 $.@expr1073745737 $back $(@expr1073745738 $) $.@expr1073745739 $intvalue $) $) { $return $; } $} $while $(@expr1073745740 $false $) ;
1281: $do ${ $code@var324 $=@expr1073745741 $"enum E : unsigned int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745742 $tokenValues_ $(@expr1073745743 "cppcheck-2.8/test/testvalueflow.cpp" $, 1281 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745744 $!@expr1073745745 $assertEquals $(@expr1073745746 "cppcheck-2.8/test/testvalueflow.cpp" $, 1281 $, $1U $, $values@var325 $.@expr1073745747 $size $(@expr1073745748 $) $) $) { $return $; } $if $(@expr1073745749 $!@expr1073745750 $assertEquals $(@expr1073745751 "cppcheck-2.8/test/testvalueflow.cpp" $, 1281 $, settings@var102 .@expr2642 sizeof_int@var328 $*@expr1073745753 $2U $, $values@var325 $.@expr1073745754 $back $(@expr1073745755 $) $.@expr1073745756 $intvalue $) $) { $return $; } $} $while $(@expr1073745757 $false $) ;
1282: $do ${ $code@var324 $=@expr1073745758 $"enum E : long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745759 $tokenValues_ $(@expr1073745760 "cppcheck-2.8/test/testvalueflow.cpp" $, 1282 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745761 $!@expr1073745762 $assertEquals $(@expr1073745763 "cppcheck-2.8/test/testvalueflow.cpp" $, 1282 $, $1U $, $values@var325 $.@expr1073745764 $size $(@expr1073745765 $) $) $) { $return $; } $if $(@expr1073745766 $!@expr1073745767 $assertEquals $(@expr1073745768 "cppcheck-2.8/test/testvalueflow.cpp" $, 1282 $, settings@var102 .@expr2658 sizeof_long@var329 $*@expr1073745770 $2U $, $values@var325 $.@expr1073745771 $back $(@expr1073745772 $) $.@expr1073745773 $intvalue $) $) { $return $; } $} $while $(@expr1073745774 $false $) ;
1283: $do ${ $code@var324 $=@expr1073745775 $"enum E : signed long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745776 $tokenValues_ $(@expr1073745777 "cppcheck-2.8/test/testvalueflow.cpp" $, 1283 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745778 $!@expr1073745779 $assertEquals $(@expr1073745780 "cppcheck-2.8/test/testvalueflow.cpp" $, 1283 $, $1U $, $values@var325 $.@expr1073745781 $size $(@expr1073745782 $) $) $) { $return $; } $if $(@expr1073745783 $!@expr1073745784 $assertEquals $(@expr1073745785 "cppcheck-2.8/test/testvalueflow.cpp" $, 1283 $, settings@var102 .@expr2658 sizeof_long@var329 $*@expr1073745787 $2U $, $values@var325 $.@expr1073745788 $back $(@expr1073745789 $) $.@expr1073745790 $intvalue $) $) { $return $; } $} $while $(@expr1073745791 $false $) ;
1284: $do ${ $code@var324 $=@expr1073745792 $"enum E : unsigned long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745793 $tokenValues_ $(@expr1073745794 "cppcheck-2.8/test/testvalueflow.cpp" $, 1284 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745795 $!@expr1073745796 $assertEquals $(@expr1073745797 "cppcheck-2.8/test/testvalueflow.cpp" $, 1284 $, $1U $, $values@var325 $.@expr1073745798 $size $(@expr1073745799 $) $) $) { $return $; } $if $(@expr1073745800 $!@expr1073745801 $assertEquals $(@expr1073745802 "cppcheck-2.8/test/testvalueflow.cpp" $, 1284 $, settings@var102 .@expr2658 sizeof_long@var329 $*@expr1073745804 $2U $, $values@var325 $.@expr1073745805 $back $(@expr1073745806 $) $.@expr1073745807 $intvalue $) $) { $return $; } $} $while $(@expr1073745808 $false $) ;
1285: $do ${ $code@var324 $=@expr1073745809 $"enum E : long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745810 $tokenValues_ $(@expr1073745811 "cppcheck-2.8/test/testvalueflow.cpp" $, 1285 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745812 $!@expr1073745813 $assertEquals $(@expr1073745814 "cppcheck-2.8/test/testvalueflow.cpp" $, 1285 $, $1U $, $values@var325 $.@expr1073745815 $size $(@expr1073745816 $) $) $) { $return $; } $if $(@expr1073745817 $!@expr1073745818 $assertEquals $(@expr1073745819 "cppcheck-2.8/test/testvalueflow.cpp" $, 1285 $, settings@var102 .@expr2674 sizeof_long_long@var330 $*@expr1073745821 $2U $, $values@var325 $.@expr1073745822 $back $(@expr1073745823 $) $.@expr1073745824 $intvalue $) $) { $return $; } $} $while $(@expr1073745825 $false $) ;
1286: $do ${ $code@var324 $=@expr1073745826 $"enum E : signed long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745827 $tokenValues_ $(@expr1073745828 "cppcheck-2.8/test/testvalueflow.cpp" $, 1286 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745829 $!@expr1073745830 $assertEquals $(@expr1073745831 "cppcheck-2.8/test/testvalueflow.cpp" $, 1286 $, $1U $, $values@var325 $.@expr1073745832 $size $(@expr1073745833 $) $) $) { $return $; } $if $(@expr1073745834 $!@expr1073745835 $assertEquals $(@expr1073745836 "cppcheck-2.8/test/testvalueflow.cpp" $, 1286 $, settings@var102 .@expr2674 sizeof_long_long@var330 $*@expr1073745838 $2U $, $values@var325 $.@expr1073745839 $back $(@expr1073745840 $) $.@expr1073745841 $intvalue $) $) { $return $; } $} $while $(@expr1073745842 $false $) ;
1287: $do ${ $code@var324 $=@expr1073745843 $"enum E : unsigned long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745844 $tokenValues_ $(@expr1073745845 "cppcheck-2.8/test/testvalueflow.cpp" $, 1287 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745846 $!@expr1073745847 $assertEquals $(@expr1073745848 "cppcheck-2.8/test/testvalueflow.cpp" $, 1287 $, $1U $, $values@var325 $.@expr1073745849 $size $(@expr1073745850 $) $) $) { $return $; } $if $(@expr1073745851 $!@expr1073745852 $assertEquals $(@expr1073745853 "cppcheck-2.8/test/testvalueflow.cpp" $, 1287 $, settings@var102 .@expr2674 sizeof_long_long@var330 $*@expr1073745855 $2U $, $values@var325 $.@expr1073745856 $back $(@expr1073745857 $) $.@expr1073745858 $intvalue $) $) { $return $; } $} $while $(@expr1073745859 $false $) ;
1288: $do ${ $code@var324 $=@expr1073745860 $"enum E : wchar_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745861 $tokenValues_ $(@expr1073745862 "cppcheck-2.8/test/testvalueflow.cpp" $, 1288 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745863 $!@expr1073745864 $assertEquals $(@expr1073745865 "cppcheck-2.8/test/testvalueflow.cpp" $, 1288 $, $1U $, $values@var325 $.@expr1073745866 $size $(@expr1073745867 $) $) $) { $return $; } $if $(@expr1073745868 $!@expr1073745869 $assertEquals $(@expr1073745870 "cppcheck-2.8/test/testvalueflow.cpp" $, 1288 $, settings@var102 .@expr2690 sizeof_wchar_t@var331 $*@expr1073745872 $2U $, $values@var325 $.@expr1073745873 $back $(@expr1073745874 $) $.@expr1073745875 $intvalue $) $) { $return $; } $} $while $(@expr1073745876 $false $) ;
1289: $do ${ $code@var324 $=@expr1073745877 $"enum E : size_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745878 $tokenValues_ $(@expr1073745879 "cppcheck-2.8/test/testvalueflow.cpp" $, 1289 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745880 $!@expr1073745881 $assertEquals $(@expr1073745882 "cppcheck-2.8/test/testvalueflow.cpp" $, 1289 $, $1U $, $values@var325 $.@expr1073745883 $size $(@expr1073745884 $) $) $) { $return $; } $if $(@expr1073745885 $!@expr1073745886 $assertEquals $(@expr1073745887 "cppcheck-2.8/test/testvalueflow.cpp" $, 1289 $, settings@var102 .@expr3208 sizeof_size_t@var335 $*@expr1073745889 $2U $, $values@var325 $.@expr1073745890 $back $(@expr1073745891 $) $.@expr1073745892 $intvalue $) $) { $return $; } $} $while $(@expr1073745893 $false $) ;
1290:
|
1304:
1305: $do ${ $code@var324 $=@expr1073745894 $"enum class E  { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745895 $tokenValues_ $(@expr1073745896 "cppcheck-2.8/test/testvalueflow.cpp" $, 1305 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745897 $!@expr1073745898 $assertEquals $(@expr1073745899 "cppcheck-2.8/test/testvalueflow.cpp" $, 1305 $, $1U $, $values@var325 $.@expr1073745900 $size $(@expr1073745901 $) $) $) { $return $; } $if $(@expr1073745902 $!@expr1073745903 $assertEquals $(@expr1073745904 "cppcheck-2.8/test/testvalueflow.cpp" $, 1305 $, settings@var102 .@expr2642 sizeof_int@var328 $*@expr1073745906 $2U $, $values@var325 $.@expr1073745907 $back $(@expr1073745908 $) $.@expr1073745909 $intvalue $) $) { $return $; } $} $while $(@expr1073745910 $false $) ;
1306:
1307:
1308: $do ${ $code@var324 $=@expr1073745911 $"enum class E : char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745912 $tokenValues_ $(@expr1073745913 "cppcheck-2.8/test/testvalueflow.cpp" $, 1308 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745914 $!@expr1073745915 $assertEquals $(@expr1073745916 "cppcheck-2.8/test/testvalueflow.cpp" $, 1308 $, $1U $, $values@var325 $.@expr1073745917 $size $(@expr1073745918 $) $) $) { $return $; } $if $(@expr1073745919 $!@expr1073745920 $assertEquals $(@expr1073745921 "cppcheck-2.8/test/testvalueflow.cpp" $, 1308 $, 1U $*@expr1073745922 $2U $, $values@var325 $.@expr1073745923 $back $(@expr1073745924 $) $.@expr1073745925 $intvalue $) $) { $return $; } $} $while $(@expr1073745926 $false $) ;
1309: $do ${ $code@var324 $=@expr1073745927 $"enum class E : signed char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745928 $tokenValues_ $(@expr1073745929 "cppcheck-2.8/test/testvalueflow.cpp" $, 1309 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745930 $!@expr1073745931 $assertEquals $(@expr1073745932 "cppcheck-2.8/test/testvalueflow.cpp" $, 1309 $, $1U $, $values@var325 $.@expr1073745933 $size $(@expr1073745934 $) $) $) { $return $; } $if $(@expr1073745935 $!@expr1073745936 $assertEquals $(@expr1073745937 "cppcheck-2.8/test/testvalueflow.cpp" $, 1309 $, 1U $*@expr1073745938 $2U $, $values@var325 $.@expr1073745939 $back $(@expr1073745940 $) $.@expr1073745941 $intvalue $) $) { $return $; } $} $while $(@expr1073745942 $false $) ;
1310: $do ${ $code@var324 $=@expr1073745943 $"enum class E : unsigned char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745944 $tokenValues_ $(@expr1073745945 "cppcheck-2.8/test/testvalueflow.cpp" $, 1310 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745946 $!@expr1073745947 $assertEquals $(@expr1073745948 "cppcheck-2.8/test/testvalueflow.cpp" $, 1310 $, $1U $, $values@var325 $.@expr1073745949 $size $(@expr1073745950 $) $) $) { $return $; } $if $(@expr1073745951 $!@expr1073745952 $assertEquals $(@expr1073745953 "cppcheck-2.8/test/testvalueflow.cpp" $, 1310 $, 1U $*@expr1073745954 $2U $, $values@var325 $.@expr1073745955 $back $(@expr1073745956 $) $.@expr1073745957 $intvalue $) $) { $return $; } $} $while $(@expr1073745958 $false $) ;
1311: $do ${ $code@var324 $=@expr1073745959 $"enum class E : short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745960 $tokenValues_ $(@expr1073745961 "cppcheck-2.8/test/testvalueflow.cpp" $, 1311 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745962 $!@expr1073745963 $assertEquals $(@expr1073745964 "cppcheck-2.8/test/testvalueflow.cpp" $, 1311 $, $1U $, $values@var325 $.@expr1073745965 $size $(@expr1073745966 $) $) $) { $return $; } $if $(@expr1073745967 $!@expr1073745968 $assertEquals $(@expr1073745969 "cppcheck-2.8/test/testvalueflow.cpp" $, 1311 $, settings@var102 .@expr2626 sizeof_short@var327 $*@expr1073745971 $2U $, $values@var325 $.@expr1073745972 $back $(@expr1073745973 $) $.@expr1073745974 $intvalue $) $) { $return $; } $} $while $(@expr1073745975 $false $) ;
1312: $do ${ $code@var324 $=@expr1073745976 $"enum class E : signed short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745977 $tokenValues_ $(@expr1073745978 "cppcheck-2.8/test/testvalueflow.cpp" $, 1312 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745979 $!@expr1073745980 $assertEquals $(@expr1073745981 "cppcheck-2.8/test/testvalueflow.cpp" $, 1312 $, $1U $, $values@var325 $.@expr1073745982 $size $(@expr1073745983 $) $) $) { $return $; } $if $(@expr1073745984 $!@expr1073745985 $assertEquals $(@expr1073745986 "cppcheck-2.8/test/testvalueflow.cpp" $, 1312 $, settings@var102 .@expr2626 sizeof_short@var327 $*@expr1073745988 $2U $, $values@var325 $.@expr1073745989 $back $(@expr1073745990 $) $.@expr1073745991 $intvalue $) $) { $return $; } $} $while $(@expr1073745992 $false $) ;
1313: $do ${ $code@var324 $=@expr1073745993 $"enum class E : unsigned short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073745994 $tokenValues_ $(@expr1073745995 "cppcheck-2.8/test/testvalueflow.cpp" $, 1313 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073745996 $!@expr1073745997 $assertEquals $(@expr1073745998 "cppcheck-2.8/test/testvalueflow.cpp" $, 1313 $, $1U $, $values@var325 $.@expr1073745999 $size $(@expr1073746000 $) $) $) { $return $; } $if $(@expr1073746001 $!@expr1073746002 $assertEquals $(@expr1073746003 "cppcheck-2.8/test/testvalueflow.cpp" $, 1313 $, settings@var102 .@expr2626 sizeof_short@var327 $*@expr1073746005 $2U $, $values@var325 $.@expr1073746006 $back $(@expr1073746007 $) $.@expr1073746008 $intvalue $) $) { $return $; } $} $while $(@expr1073746009 $false $) ;
1314: $do ${ $code@var324 $=@expr1073746010 $"enum class E : int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073746011 $tokenValues_ $(@expr1073746012 "cppcheck-2.8/test/testvalueflow.cpp" $, 1314 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073746013 $!@expr1073746014 $assertEquals $(@expr1073746015 "cppcheck-2.8/test/testvalueflow.cpp" $, 1314 $, $1U $, $values@var325 $.@expr1073746016 $size $(@expr1073746017 $) $) $) { $return $; } $if $(@expr1073746018 $!@expr1073746019 $assertEquals $(@expr1073746020 "cppcheck-2.8/test/testvalueflow.cpp" $, 1314 $, settings@var102 .@expr2642 sizeof_int@var328 $*@expr1073746022 $2U $, $values@var325 $.@expr1073746023 $back $(@expr1073746024 $) $.@expr1073746025 $intvalue $) $) { $return $; } $} $while $(@expr1073746026 $false $) ;
1315: $do ${ $code@var324 $=@expr1073746027 $"enum class E : signed int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073746028 $tokenValues_ $(@expr1073746029 "cppcheck-2.8/test/testvalueflow.cpp" $, 1315 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073746030 $!@expr1073746031 $assertEquals $(@expr1073746032 "cppcheck-2.8/test/testvalueflow.cpp" $, 1315 $, $1U $, $values@var325 $.@expr1073746033 $size $(@expr1073746034 $) $) $) { $return $; } $if $(@expr1073746035 $!@expr1073746036 $assertEquals $(@expr1073746037 "cppcheck-2.8/test/testvalueflow.cpp" $, 1315 $, settings@var102 .@expr2642 sizeof_int@var328 $*@expr1073746039 $2U $, $values@var325 $.@expr1073746040 $back $(@expr1073746041 $) $.@expr1073746042 $intvalue $) $) { $return $; } $} $while $(@expr1073746043 $false $) ;
1316: $do ${ $code@var324 $=@expr1073746044 $"enum class E : unsigned int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073746045 $tokenValues_ $(@expr1073746046 "cppcheck-2.8/test/testvalueflow.cpp" $, 1316 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073746047 $!@expr1073746048 $assertEquals $(@expr1073746049 "cppcheck-2.8/test/testvalueflow.cpp" $, 1316 $, $1U $, $values@var325 $.@expr1073746050 $size $(@expr1073746051 $) $) $) { $return $; } $if $(@expr1073746052 $!@expr1073746053 $assertEquals $(@expr1073746054 "cppcheck-2.8/test/testvalueflow.cpp" $, 1316 $, settings@var102 .@expr2642 sizeof_int@var328 $*@expr1073746056 $2U $, $values@var325 $.@expr1073746057 $back $(@expr1073746058 $) $.@expr1073746059 $intvalue $) $) { $return $; } $} $while $(@expr1073746060 $false $) ;
1317: $do ${ $code@var324 $=@expr1073746061 $"enum class E : long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073746062 $tokenValues_ $(@expr1073746063 "cppcheck-2.8/test/testvalueflow.cpp" $, 1317 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073746064 $!@expr1073746065 $assertEquals $(@expr1073746066 "cppcheck-2.8/test/testvalueflow.cpp" $, 1317 $, $1U $, $values@var325 $.@expr1073746067 $size $(@expr1073746068 $) $) $) { $return $; } $if $(@expr1073746069 $!@expr1073746070 $assertEquals $(@expr1073746071 "cppcheck-2.8/test/testvalueflow.cpp" $, 1317 $, settings@var102 .@expr2658 sizeof_long@var329 $*@expr1073746073 $2U $, $values@var325 $.@expr1073746074 $back $(@expr1073746075 $) $.@expr1073746076 $intvalue $) $) { $return $; } $} $while $(@expr1073746077 $false $) ;
1318: $do ${ $code@var324 $=@expr1073746078 $"enum class E : signed long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073746079 $tokenValues_ $(@expr1073746080 "cppcheck-2.8/test/testvalueflow.cpp" $, 1318 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073746081 $!@expr1073746082 $assertEquals $(@expr1073746083 "cppcheck-2.8/test/testvalueflow.cpp" $, 1318 $, $1U $, $values@var325 $.@expr1073746084 $size $(@expr1073746085 $) $) $) { $return $; } $if $(@expr1073746086 $!@expr1073746087 $assertEquals $(@expr1073746088 "cppcheck-2.8/test/testvalueflow.cpp" $, 1318 $, settings@var102 .@expr2658 sizeof_long@var329 $*@expr1073746090 $2U $, $values@var325 $.@expr1073746091 $back $(@expr1073746092 $) $.@expr1073746093 $intvalue $) $) { $return $; } $} $while $(@expr1073746094 $false $) ;
1319: $do ${ $code@var324 $=@expr1073746095 $"enum class E : unsigned long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073746096 $tokenValues_ $(@expr1073746097 "cppcheck-2.8/test/testvalueflow.cpp" $, 1319 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073746098 $!@expr1073746099 $assertEquals $(@expr1073746100 "cppcheck-2.8/test/testvalueflow.cpp" $, 1319 $, $1U $, $values@var325 $.@expr1073746101 $size $(@expr1073746102 $) $) $) { $return $; } $if $(@expr1073746103 $!@expr1073746104 $assertEquals $(@expr1073746105 "cppcheck-2.8/test/testvalueflow.cpp" $, 1319 $, settings@var102 .@expr2658 sizeof_long@var329 $*@expr1073746107 $2U $, $values@var325 $.@expr1073746108 $back $(@expr1073746109 $) $.@expr1073746110 $intvalue $) $) { $return $; } $} $while $(@expr1073746111 $false $) ;
1320: $do ${ $code@var324 $=@expr1073746112 $"enum class E : long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073746113 $tokenValues_ $(@expr1073746114 "cppcheck-2.8/test/testvalueflow.cpp" $, 1320 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073746115 $!@expr1073746116 $assertEquals $(@expr1073746117 "cppcheck-2.8/test/testvalueflow.cpp" $, 1320 $, $1U $, $values@var325 $.@expr1073746118 $size $(@expr1073746119 $) $) $) { $return $; } $if $(@expr1073746120 $!@expr1073746121 $assertEquals $(@expr1073746122 "cppcheck-2.8/test/testvalueflow.cpp" $, 1320 $, settings@var102 .@expr2674 sizeof_long_long@var330 $*@expr1073746124 $2U $, $values@var325 $.@expr1073746125 $back $(@expr1073746126 $) $.@expr1073746127 $intvalue $) $) { $return $; } $} $while $(@expr1073746128 $false $) ;
1321: $do ${ $code@var324 $=@expr1073746129 $"enum class E : signed long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073746130 $tokenValues_ $(@expr1073746131 "cppcheck-2.8/test/testvalueflow.cpp" $, 1321 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073746132 $!@expr1073746133 $assertEquals $(@expr1073746134 "cppcheck-2.8/test/testvalueflow.cpp" $, 1321 $, $1U $, $values@var325 $.@expr1073746135 $size $(@expr1073746136 $) $) $) { $return $; } $if $(@expr1073746137 $!@expr1073746138 $assertEquals $(@expr1073746139 "cppcheck-2.8/test/testvalueflow.cpp" $, 1321 $, settings@var102 .@expr2674 sizeof_long_long@var330 $*@expr1073746141 $2U $, $values@var325 $.@expr1073746142 $back $(@expr1073746143 $) $.@expr1073746144 $intvalue $) $) { $return $; } $} $while $(@expr1073746145 $false $) ;
1322: $do ${ $code@var324 $=@expr1073746146 $"enum class E : unsigned long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073746147 $tokenValues_ $(@expr1073746148 "cppcheck-2.8/test/testvalueflow.cpp" $, 1322 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073746149 $!@expr1073746150 $assertEquals $(@expr1073746151 "cppcheck-2.8/test/testvalueflow.cpp" $, 1322 $, $1U $, $values@var325 $.@expr1073746152 $size $(@expr1073746153 $) $) $) { $return $; } $if $(@expr1073746154 $!@expr1073746155 $assertEquals $(@expr1073746156 "cppcheck-2.8/test/testvalueflow.cpp" $, 1322 $, settings@var102 .@expr2674 sizeof_long_long@var330 $*@expr1073746158 $2U $, $values@var325 $.@expr1073746159 $back $(@expr1073746160 $) $.@expr1073746161 $intvalue $) $) { $return $; } $} $while $(@expr1073746162 $false $) ;
1323: $do ${ $code@var324 $=@expr1073746163 $"enum class E : wchar_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073746164 $tokenValues_ $(@expr1073746165 "cppcheck-2.8/test/testvalueflow.cpp" $, 1323 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073746166 $!@expr1073746167 $assertEquals $(@expr1073746168 "cppcheck-2.8/test/testvalueflow.cpp" $, 1323 $, $1U $, $values@var325 $.@expr1073746169 $size $(@expr1073746170 $) $) $) { $return $; } $if $(@expr1073746171 $!@expr1073746172 $assertEquals $(@expr1073746173 "cppcheck-2.8/test/testvalueflow.cpp" $, 1323 $, settings@var102 .@expr2690 sizeof_wchar_t@var331 $*@expr1073746175 $2U $, $values@var325 $.@expr1073746176 $back $(@expr1073746177 $) $.@expr1073746178 $intvalue $) $) { $return $; } $} $while $(@expr1073746179 $false $) ;
1324: $do ${ $code@var324 $=@expr1073746180 $"enum class E : size_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" $; $values@var325 $=@expr1073746181 $tokenValues_ $(@expr1073746182 "cppcheck-2.8/test/testvalueflow.cpp" $, 1324 $, $code@var324 $, $"( arrE )" $) $; $if $(@expr1073746183 $!@expr1073746184 $assertEquals $(@expr1073746185 "cppcheck-2.8/test/testvalueflow.cpp" $, 1324 $, $1U $, $values@var325 $.@expr1073746186 $size $(@expr1073746187 $) $) $) { $return $; } $if $(@expr1073746188 $!@expr1073746189 $assertEquals $(@expr1073746190 "cppcheck-2.8/test/testvalueflow.cpp" $, 1324 $, settings@var102 .@expr3208 sizeof_size_t@var335 $*@expr1073746192 $2U $, $values@var325 $.@expr1073746193 $back $(@expr1073746194 $) $.@expr1073746195 $intvalue $) $) { $return $; } $} $while $(@expr1073746196 $false $) ;
1325:
1326:
1327: code@var324 =@expr1073746197 "uint16_t arr[10];\nx = sizeof(arr);"
1328: ;
1329: values@var325 =@expr1073746198 $tokenValues_ $(@expr1073746199 "cppcheck-2.8/test/testvalueflow.cpp" $, 1329 $, code@var324 , "( arr )" $) ;
1330: $if $(@expr1073746200 $!@expr1073746201 $assertEquals $(@expr1073746202 "cppcheck-2.8/test/testvalueflow.cpp" $, 1330 $, 1U $, values@var325 .@expr2548 size (@expr2549 ) $) $) { $return ; }
1331: $if $(@expr1073746205 $!@expr1073746206 $assertEquals $(@expr1073746207 "cppcheck-2.8/test/testvalueflow.cpp" $, 1331 $, 10 *@expr1073746208 sizeof (@expr1073746209 std ::@expr1073746210 uint16_t@expr1073744363 ) $, values@var325 .@expr2553 back (@expr2554 ) .@expr2555 intvalue@expr2538 $) $) { $return ; }
1332: }
1333:
1334: void valueFlowErrorPath ( ) {
1335: const char * code@var336 ;
1336:
1337: code@var336 =@expr1073746214 "void f() {\n  int x = 53;\n  a = x;\n}\n"
1338:
1339:
1340: ;
1341: $if $(@expr1073746215 $!@expr1073746216 $assertEquals $(@expr1073746217 "cppcheck-2.8/test/testvalueflow.cpp" $, 1341 $, "2,Assignment 'x=53', assigned value is 53\n" $, $getErrorPathForX_ $(@expr1073746218 code@var336 $, 3U $, "cppcheck-2.8/test/testvalueflow.cpp" $, 1341 $) $) $) { $return
1342: ; }
1343:
1344: code@var336 =@expr1073746219 "void f(int y) {\n  int x = y;\n  a = x;\n  y += 12;\n  if (y == 32) {}}\n"
1345:
|
1348:
1349: ;
1350: $if $(@expr1073746220 $!@expr1073746221 $assertEquals $(@expr1073746222 "cppcheck-2.8/test/testvalueflow.cpp" $, 1350 $, "2,x is assigned 'y' here.\n5,Assuming that condition 'y==32' is not redundant\n4,Compound assignment '+=', assigned value is 20\n2,x is assigned 'y' here.\n" $, $getErrorPathForX_ $(@expr1073746223 code@var336 $, 3U $, "cppcheck-2.8/test/testvalueflow.cpp" $, 1350 $) $) $) { $return
1351:
1352:
1353:
1354: ; }
1355:
1356: code@var336 =@expr1073746224 "void f1(int x) {\n  a = x;\n}\nvoid f2() {\n  int x = 3;\n  f1(x+1);\n}\n"
1357:
|
1361:
1362: ;
1363: $if $(@expr1073746225 $!@expr1073746226 $assertEquals $(@expr1073746227 "cppcheck-2.8/test/testvalueflow.cpp" $, 1363 $, "5,Assignment 'x=3', assigned value is 3\n6,Calling function 'f1', 1st argument 'x+1' value is 4\n" $, $getErrorPathForX_ $(@expr1073746228 code@var336 $, 2U $, "cppcheck-2.8/test/testvalueflow.cpp" $, 1363 $) $) $) { $return
1364:
1365: ; }
1366:
1367: code@var336 =@expr1073746229 "void f(int a) {\n  int x;\n  for (x = a; x < 50; x++) {}\n  b = x;\n}\n"
1368:
1369:
1370:
1371: ;
1372: $if $(@expr1073746230 $!@expr1073746231 $assertEquals $(@expr1073746232 "cppcheck-2.8/test/testvalueflow.cpp" $, 1372 $, "3,Assuming that condition 'x<50' is not redundant\n3,Assuming that condition 'x<50' is not redundant\n" $, $getErrorPathForX_ $(@expr1073746233 code@var336 $, 4U $, "cppcheck-2.8/test/testvalueflow.cpp" $, 1372 $) $) $) { $return
1373:
1374: ; }
1375: }
1376:
1377: void valueFlowBeforeCondition ( ) {
1378: const char * code@var337 ;
1379:
1380: code@var337 =@expr1073746234 "void f(int x) {\n    int a = x;\n    if (x == 123) {}\n}"
1381:
1382:
1383: ;
1384: $if $(@expr1073746235 $!@expr1073746236 $assertEquals $(@expr1073746237 "cppcheck-2.8/test/testvalueflow.cpp" $, 1384 $, true $, $testValueOfX_ $(@expr1073746238 "cppcheck-2.8/test/testvalueflow.cpp" $, 1384 $, code@var337 , 2U , 123 $) $) $) { $return ; }
1385:
1386: code@var337 =@expr1073746239 "void f(unsigned int x) {\n    int a = x;\n    if (x >= 1) {}\n}"
1387:
1388:
1389: ;
1390: $if $(@expr1073746240 $!@expr1073746241 $assertEquals $(@expr1073746242 "cppcheck-2.8/test/testvalueflow.cpp" $, 1390 $, true $, $testValueOfX_ $(@expr1073746243 "cppcheck-2.8/test/testvalueflow.cpp" $, 1390 $, code@var337 , 2U , 1 $) $) $) { $return ; }
1391: $if $(@expr1073746244 $!@expr1073746245 $assertEquals $(@expr1073746246 "cppcheck-2.8/test/testvalueflow.cpp" $, 1391 $, true $, $testValueOfX_ $(@expr1073746247 "cppcheck-2.8/test/testvalueflow.cpp" $, 1391 $, code@var337 , 2U , 0 $) $) $) { $return ; }
1392:
1393: code@var337 =@expr1073746248 "void f(unsigned int x) {\n    int a = x;\n    if (x > 0) {}\n}"
1394:
1395:
1396: ;
1397: $if $(@expr1073746249 $!@expr1073746250 $assertEquals $(@expr1073746251 "cppcheck-2.8/test/testvalueflow.cpp" $, 1397 $, true $, $testValueOfX_ $(@expr1073746252 "cppcheck-2.8/test/testvalueflow.cpp" $, 1397 $, code@var337 , 2U , 0 $) $) $) { $return ; }
1398:
1399: code@var337 =@expr1073746253 "void f(unsigned int x) {\n    int a = x;\n    if (x > 1) {}\n}"
1400:
1401:
1402: ;
1403: $if $(@expr1073746254 $!@expr1073746255 $assertEquals $(@expr1073746256 "cppcheck-2.8/test/testvalueflow.cpp" $, 1403 $, false $, $testValueOfX_ $(@expr1073746257 "cppcheck-2.8/test/testvalueflow.cpp" $, 1403 $, code@var337 , 2U , 1 $) $) $) { $return ; }
1404:
1405: code@var337 =@expr1073746258 "void f(int x) {\n    int a = x;\n    if (x > 0) {}\n}"
1406:
1407:
1408: ;
1409: $if $(@expr1073746259 $!@expr1073746260 $assertEquals $(@expr1073746261 "cppcheck-2.8/test/testvalueflow.cpp" $, 1409 $, false $, $testValueOfX_ $(@expr1073746262 "cppcheck-2.8/test/testvalueflow.cpp" $, 1409 $, code@var337 , 2U , 0 $) $) $) { $return ; }
1410:
1411: code@var337 =@expr1073746263 "void f(int *x) {\n    *x = 100;\n    if (x) {}\n}"
1412:
1413:
1414: ;
1415: $if $(@expr1073746264 $!@expr1073746265 $assertEquals $(@expr1073746266 "cppcheck-2.8/test/testvalueflow.cpp" $, 1415 $, true $, $testValueOfX_ $(@expr1073746267 "cppcheck-2.8/test/testvalueflow.cpp" $, 1415 $, code@var337 , 2U , 0 $) $) $) { $return ; }
1416:
1417: code@var337 =@expr1073746268 "extern const int x;\nvoid f() {\n    int a = x;\n    if (x == 123) {}\n}"
1418:
1419:
1420:
1421: ;
1422: $if $(@expr1073746269 $!@expr1073746270 $assertEquals $(@expr1073746271 "cppcheck-2.8/test/testvalueflow.cpp" $, 1422 $, true $, $testValueOfX_ $(@expr1073746272 "cppcheck-2.8/test/testvalueflow.cpp" $, 1422 $, code@var337 , 3U , 123 $) $) $) { $return ; }
1423:
1424:
1425: code@var337 =@expr1073746273 "void f(struct X *x) {\n  do {\n    if (!x)\n      break;\n  } while (x->a);\n  if (x) {}\n}\n"
1426:
|
1430:
1431: ;
1432: $if $(@expr1073746274 $!@expr1073746275 $assertEquals $(@expr1073746276 "cppcheck-2.8/test/testvalueflow.cpp" $, 1432 $, false $, $testValueOfX_ $(@expr1073746277 "cppcheck-2.8/test/testvalueflow.cpp" $, 1432 $, code@var337 , 5U , 0 $) $) $) { $return ; }
1433: }
1434:
1435: void valueFlowBeforeConditionAssignIncDec ( ) {
1436: const char * code@var338 ;
1437:
1438: code@var338 =@expr1073746278 "void f(int x) {\n   x = 2 + x;\n   if (x == 65);\n}"
1439:
1440:
1441: ;
1442: $if $(@expr1073746279 $!@expr1073746280 $assertEquals $(@expr1073746281 "cppcheck-2.8/test/testvalueflow.cpp" $, 1442 $, false $, $testValueOfX_ $(@expr1073746282 "cppcheck-2.8/test/testvalueflow.cpp" $, 1442 $, code@var338 , 2U , 65 $) $) $) { $return ; }
1443:
1444: code@var338 =@expr1073746283 "void f(int x) {\n   x = y = 2 + x;\n   if (x == 65);\n}"
1445:
1446:
1447: ;
1448: $if $(@expr1073746284 $!@expr1073746285 $assertEquals $(@expr1073746286 "cppcheck-2.8/test/testvalueflow.cpp" $, 1448 $, false $, $testValueOfX_ $(@expr1073746287 "cppcheck-2.8/test/testvalueflow.cpp" $, 1448 $, code@var338 , 2U , 65 $) $) $) { $return ; }
1449:
1450: code@var338 =@expr1073746288 "void f(int x) {\n   a[x++] = 0;\n   if (x == 5);\n}"
1451:
1452:
1453: ;
1454: $if $(@expr1073746289 $!@expr1073746290 $assertEquals $(@expr1073746291 "cppcheck-2.8/test/testvalueflow.cpp" $, 1454 $, false $, $testValueOfX_ $(@expr1073746292 "cppcheck-2.8/test/testvalueflow.cpp" $, 1454 $, code@var338 , 2U , 5 $) $) $) { $return ; }
1455:
1456: code@var338 =@expr1073746293 "void f(int x) {\n   a = x;\n   x++;\n   if (x == 4);\n}"
1457:
1458:
1459:
1460: ;
1461: $if $(@expr1073746294 $!@expr1073746295 $assertEquals $(@expr1073746296 "cppcheck-2.8/test/testvalueflow.cpp" $, 1461 $, true $, $testValueOfX_ $(@expr1073746297 "cppcheck-2.8/test/testvalueflow.cpp" $, 1461 $, code@var338 , 2U , 3 $) $) $) { $return ; }
1462:
1463:
1464: code@var338 =@expr1073746298 "void f(int x) {\n   a = x;\n   x += 2;\n   if (x == 4);\n}"
1465:
1466:
1467:
1468: ;
1469: $if $(@expr1073746299 $!@expr1073746300 $assertEquals $(@expr1073746301 "cppcheck-2.8/test/testvalueflow.cpp" $, 1469 $, true $, $testValueOfX_ $(@expr1073746302 "cppcheck-2.8/test/testvalueflow.cpp" $, 1469 $, code@var338 , 2U , 2 $) $) $) { $return ; }
1470:
1471: code@var338 =@expr1073746303 "void f(int x) {\n   a = x;\n   x -= 2;\n   if (x == 4);\n}"
1472:
1473:
1474:
1475: ;
1476: $if $(@expr1073746304 $!@expr1073746305 $assertEquals $(@expr1073746306 "cppcheck-2.8/test/testvalueflow.cpp" $, 1476 $, true $, $testValueOfX_ $(@expr1073746307 "cppcheck-2.8/test/testvalueflow.cpp" $, 1476 $, code@var338 , 2U , 6 $) $) $) { $return ; }
1477:
1478: code@var338 =@expr1073746308 "void f(int x) {\n   a = x;\n   x *= 2;\n   if (x == 42);\n}"
1479:
1480:
1481:
1482: ;
1483: $if $(@expr1073746309 $!@expr1073746310 $assertEquals $(@expr1073746311 "cppcheck-2.8/test/testvalueflow.cpp" $, 1483 $, true $, $testValueOfX_ $(@expr1073746312 "cppcheck-2.8/test/testvalueflow.cpp" $, 1483 $, code@var338 , 2U , 21 $) $) $) { $return ; }
1484:
1485: code@var338 =@expr1073746313 "void f(int x) {\n   a = x;\n   x /= 5;\n   if (x == 42);\n}"
1486:
1487:
1488:
1489: ;
1490: $if $(@expr1073746314 $!@expr1073746315 $assertEquals $(@expr1073746316 "cppcheck-2.8/test/testvalueflow.cpp" $, 1490 $, true $, $testValueOfX_ $(@expr1073746317 "cppcheck-2.8/test/testvalueflow.cpp" $, 1490 $, code@var338 , 2U , 210 $) $) $) { $return ; }
1491:
1492:
1493: bailout (@expr1073746318 "void f(int x) {\n    x = y;\n    if (x == 123) {}\n}"
1494:
1495:
1496: ) ;
1497: $assertEqualsWithoutLineNumbers $(@expr1073746319 "cppcheck-2.8/test/testvalueflow.cpp" $, 1497 $, "[test.cpp:2]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable y\n" $, errout@var100 .@expr1073746320 str (@expr1073746321 ) $)
1498:
1499: ;
1500: }
1501:
1502: void valueFlowBeforeConditionAndAndOrOrGuard ( ) {
1503: const char * code@var339 ;
1504:
1505: code@var339 =@expr1073746322 "void f(int x) {\n    if (!x || \n        a/x) {}\n    if (x==0) {}\n}"
1506:
1507:
1508:
1509: ;
1510: $if $(@expr1073746323 $!@expr1073746324 $assertEquals $(@expr1073746325 "cppcheck-2.8/test/testvalueflow.cpp" $, 1510 $, true $, $testValueOfX_ $(@expr1073746326 "cppcheck-2.8/test/testvalueflow.cpp" $, 1510 $, code@var339 , 2U , 0 $) $) $) { $return ; }
1511: $if $(@expr1073746327 $!@expr1073746328 $assertEquals $(@expr1073746329 "cppcheck-2.8/test/testvalueflow.cpp" $, 1511 $, false $, $testValueOfX_ $(@expr1073746330 "cppcheck-2.8/test/testvalueflow.cpp" $, 1511 $, code@var339 , 3U , 0 $) $) $) { $return ; }
1512:
1513: code@var339 =@expr1073746331 "void f(int *x) {\n  ((x=ret())&&\n   (*x==0));\n  if (x==0) {}\n}"
1514:
1515:
1516:
1517: ;
1518: $if $(@expr1073746332 $!@expr1073746333 $assertEquals $(@expr1073746334 "cppcheck-2.8/test/testvalueflow.cpp" $, 1518 $, false $, $testValueOfX_ $(@expr1073746335 "cppcheck-2.8/test/testvalueflow.cpp" $, 1518 $, code@var339 , 3U , 0 $) $) $) { $return ; }
1519:
1520: code@var339 =@expr1073746336 "void f(int *x) {\n  int a = (x && *x == '1');\n  int b = a ? atoi(x) : 0;\n  if (x==0) {}\n}"
1521:
1522:
1523:
1524: ;
1525: $if $(@expr1073746337 $!@expr1073746338 $assertEquals $(@expr1073746339 "cppcheck-2.8/test/testvalueflow.cpp" $, 1525 $, false $, $testValueOfX_ $(@expr1073746340 "cppcheck-2.8/test/testvalueflow.cpp" $, 1525 $, code@var339 , 3U , 0 $) $) $) { $return ; }
1526: }
1527:
1528: void valueFlowBeforeConditionFunctionCall ( ) {
1529: const char * code@var340 ;
1530:
1531: code@var340 =@expr1073746341 "void f(int x) {\n  a = x;\n  setx(x);\n  if (x == 1) {}\n}"
1532:
1533:
1534:
1535: ;
1536: $if $(@expr1073746342 $!@expr1073746343 $assertEquals $(@expr1073746344 "cppcheck-2.8/test/testvalueflow.cpp" $, 1536 $, true $, $testValueOfX_ $(@expr1073746345 "cppcheck-2.8/test/testvalueflow.cpp" $, 1536 $, (@expr1073746346 std ::@expr4523 string (@expr1073746348 "void setx(int x);" ) +@expr1073746349 code@var340 ) .@expr1073746350 c_str (@expr1073746351 ) , 2U , 1 $) $) $) { $return ; }
1537: $if $(@expr1073746352 $!@expr1073746353 $assertEquals $(@expr1073746354 "cppcheck-2.8/test/testvalueflow.cpp" $, 1537 $, false $, $testValueOfX_ $(@expr1073746355 "cppcheck-2.8/test/testvalueflow.cpp" $, 1537 $, (@expr1073746356 std ::@expr4523 string (@expr1073746358 "void setx(int &x);" ) +@expr1073746359 code@var340 ) .@expr1073746360 c_str (@expr1073746361 ) , 2U , 1 $) $) $) { $return ; }
1538: $if $(@expr1073746362 $!@expr1073746363 $assertEquals $(@expr1073746364 "cppcheck-2.8/test/testvalueflow.cpp" $, 1538 $, true $, $testValueOfX_ $(@expr1073746365 "cppcheck-2.8/test/testvalueflow.cpp" $, 1538 $, code@var340 , 2U , 1 $) $) $) { $return ; }
1539:
1540: code@var340 =@expr1073746366 "void f(char* x) {\n  strcpy(x,\"abc\");\n  if (x) {}\n}"
1541:
1542:
1543: ;
1544: $if $(@expr1073746367 $!@expr1073746368 $assertEquals $(@expr1073746369 "cppcheck-2.8/test/testvalueflow.cpp" $, 1544 $, true $, $testValueOfX_ $(@expr1073746370 "cppcheck-2.8/test/testvalueflow.cpp" $, 1544 $, code@var340 , 2U , 0 $) $) $) { $return ; }
1545:
1546: code@var340 =@expr1073746371 "void addNewFunction(Scope**scope, const Token**tok);\nvoid f(Scope *x) {\n  x->functionList.back();\n  addNewFunction(&x,&tok);\n  if (x) {}\n}"
1547:
|
1550:
1551: ;
1552: $if $(@expr1073746372 $!@expr1073746373 $assertEquals $(@expr1073746374 "cppcheck-2.8/test/testvalueflow.cpp" $, 1552 $, false $, $testValueOfX_ $(@expr1073746375 "cppcheck-2.8/test/testvalueflow.cpp" $, 1552 $, code@var340 , 3U , 0 $) $) $) { $return ; }
1553: }
1554:
1555: void valueFlowBeforeConditionLoop ( ) {
1556: const char * code@var341 ;
1557:
1558: code@var341 =@expr1073746376 "void f(int x) {\n  a = x;\n  while (x == 37) {}\n}"
1559:
1560:
1561: ;
1562: $if $(@expr1073746377 $!@expr1073746378 $assertEquals $(@expr1073746379 "cppcheck-2.8/test/testvalueflow.cpp" $, 1562 $, true $, $testValueOfX_ $(@expr1073746380 "cppcheck-2.8/test/testvalueflow.cpp" $, 1562 $, code@var341 , 2U , 37 $) $) $) { $return ; }
1563:
1564: code@var341 =@expr1073746381 "void f(int x) {\n  a = x;\n  while (x != 37) { x++; }\n}"
1565:
1566:
1567: ;
1568: $if $(@expr1073746382 $!@expr1073746383 $assertEquals $(@expr1073746384 "cppcheck-2.8/test/testvalueflow.cpp" $, 1568 $, false $, $testValueOfX_ $(@expr1073746385 "cppcheck-2.8/test/testvalueflow.cpp" $, 1568 $, code@var341 , 2U , 37 $) $) $) { $return ; }
1569:
1570: code@var341 =@expr1073746386 "void f(int x) {\n  a = x;\n  for (; x!=1; x++) { }\n}"
1571:
1572:
1573: ;
1574: $if $(@expr1073746387 $!@expr1073746388 $assertEquals $(@expr1073746389 "cppcheck-2.8/test/testvalueflow.cpp" $, 1574 $, false $, $testValueOfX_ $(@expr1073746390 "cppcheck-2.8/test/testvalueflow.cpp" $, 1574 $, code@var341 , 2U , 1 $) $) $) { $return ; }
1575:
1576: code@var341 =@expr1073746391 "void f(menu *x) {\n  a = x->parent;\n  for (i=0;(i<10) && (x!=0); i++) { x = x->next; }\n}"
1577:
1578:
1579: ;
1580: $if $(@expr1073746392 $!@expr1073746393 $assertEquals $(@expr1073746394 "cppcheck-2.8/test/testvalueflow.cpp" $, 1580 $, false $, $testValueOfX_ $(@expr1073746395 "cppcheck-2.8/test/testvalueflow.cpp" $, 1580 $, code@var341 , 2U , 0 $) $) $) { $return ; }
1581:
1582: code@var341 =@expr1073746396 "void f(int x) {\n    a = x;\n    do {\n        if (x==76) {}\n    } while (1);\n}"
1583:
|
1586:
1587: ;
1588: $if $(@expr1073746397 $!@expr1073746398 $assertEquals $(@expr1073746399 "cppcheck-2.8/test/testvalueflow.cpp" $, 1588 $, true $, $testValueOfX_ $(@expr1073746400 "cppcheck-2.8/test/testvalueflow.cpp" $, 1588 $, code@var341 , 2U , 76 $) $) $) { $return ; }
1589:
1590: code@var341 =@expr1073746401 "void f(int x) {\n    a = x;\n    do {\n        if (x!=76) { x=do_something(); }\n    } while (1);\n}"
1591:
|
1594:
1595: ;
1596: $if $(@expr1073746402 $!@expr1073746403 $assertEquals $(@expr1073746404 "cppcheck-2.8/test/testvalueflow.cpp" $, 1596 $, false $, $testValueOfX_ $(@expr1073746405 "cppcheck-2.8/test/testvalueflow.cpp" $, 1596 $, code@var341 , 2U , 76 $) $) $) { $return ; }
1597:
1598: code@var341 =@expr1073746406 "void f(X x) {\n    a = x;\n    for (i=1;i<=count;i++) {\n        BUGON(x==0)\n        x = x.next;\n    }\n}"
1599:
|
1603:
1604: ;
1605: $if $(@expr1073746407 $!@expr1073746408 $assertEquals $(@expr1073746409 "cppcheck-2.8/test/testvalueflow.cpp" $, 1605 $, false $, $testValueOfX_ $(@expr1073746410 "cppcheck-2.8/test/testvalueflow.cpp" $, 1605 $, code@var341 , 2U , 0 $) $) $) { $return ; }
1606: }
1607:
1608: void valueFlowBeforeConditionTernaryOp ( ) {
1609: const char * code@var342 ;
1610:
1611: bailout (@expr1073746411 "void f(int x) {\n    y = ((x<0) ? x : ((x==2)?3:4));\n}"
1612:
1613: ) ;
1614: $assertEqualsWithoutLineNumbers $(@expr1073746412 "cppcheck-2.8/test/testvalueflow.cpp" $, 1614 $, "[test.cpp:2]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable y\n" $, errout@var100 .@expr1073746413 str (@expr1073746414 ) $)
1615:
1616: ;
1617:
1618: bailout (@expr1073746415 "int f(int x) {\n  int r = x ? 1 / x : 0;\n  if (x == 0) {}\n}"
1619:
1620:
1621: ) ;
1622:
1623: code@var342 =@expr1073746416 "void f(int x) {\n    int a =v x;\n    a = b ? x/2 : 20/x;\n    if (x == 123) {}\n}"
1624:
1625:
1626:
1627: ;
1628: $if $(@expr1073746417 $!@expr1073746418 $assertEquals $(@expr1073746419 "cppcheck-2.8/test/testvalueflow.cpp" $, 1628 $, true $, $testValueOfX_ $(@expr1073746420 "cppcheck-2.8/test/testvalueflow.cpp" $, 1628 $, code@var342 , 2U , 123 $) $) $) { $return ; }
1629:
1630: code@var342 =@expr1073746421 "void f(const s *x) {\n  x->a = 0;\n  if (x ? x->a : 0) {}\n}"
1631:
1632:
1633: ;
1634: $if $(@expr1073746422 $!@expr1073746423 $assertEquals $(@expr1073746424 "cppcheck-2.8/test/testvalueflow.cpp" $, 1634 $, true $, $testValueOfX_ $(@expr1073746425 "cppcheck-2.8/test/testvalueflow.cpp" $, 1634 $, code@var342 , 2U , 0 $) $) $) { $return ; }
1635:
1636: code@var342 =@expr1073746426 "void f(int x, int y) {\n    a = x;\n    if (y){}\n    if (x==123){}\n}"
1637:
1638:
1639:
1640: ;
1641: $if $(@expr1073746427 $!@expr1073746428 $assertEquals $(@expr1073746429 "cppcheck-2.8/test/testvalueflow.cpp" $, 1641 $, true $, $testValueOfX_ $(@expr1073746430 "cppcheck-2.8/test/testvalueflow.cpp" $, 1641 $, code@var342 , 2U , 123 $) $) $) { $return ; }
1642: }
1643:
1644: void valueFlowBeforeConditionSizeof ( ) {
1645: const char * code@var343 ;
1646:
1647: code@var343 =@expr1073746431 "void f(int *x) {\n    sizeof(x[0]);\n    if (x==63){}\n}"
1648:
1649:
1650: ;
1651: $if $(@expr1073746432 $!@expr1073746433 $assertEquals $(@expr1073746434 "cppcheck-2.8/test/testvalueflow.cpp" $, 1651 $, false $, $testValueOfX_ $(@expr1073746435 "cppcheck-2.8/test/testvalueflow.cpp" $, 1651 $, code@var343 , 2U , 63 $) $) $) { $return ; }
1652:
1653: code@var343 =@expr1073746436 "void f(int *x) {\n    char a[sizeof x.y];\n    if (x==0){}\n}"
1654:
1655:
1656: ;
1657: $if $(@expr1073746437 $!@expr1073746438 $assertEquals $(@expr1073746439 "cppcheck-2.8/test/testvalueflow.cpp" $, 1657 $, false $, $testValueOfX_ $(@expr1073746440 "cppcheck-2.8/test/testvalueflow.cpp" $, 1657 $, code@var343 , 2U , 0 $) $) $) { $return ; }
1658: }
1659:
1660: void valueFlowBeforeConditionIfElse ( ) {
1661: const char * code@var344 ;
1662:
1663: code@var344 =@expr1073746441 "void f(X * x) {\n  a = x;\n  if ((x != NULL) &&\n      (a(x->name, html)) &&\n      (a(x->name, body))) {}\n  if (x != NULL) { }\n}"
1664:
|
1668:
1669: ;
1670: $if $(@expr1073746442 $!@expr1073746443 $assertEquals $(@expr1073746444 "cppcheck-2.8/test/testvalueflow.cpp" $, 1670 $, true $, $testValueOfX_ $(@expr1073746445 "cppcheck-2.8/test/testvalueflow.cpp" $, 1670 $, code@var344 , 2U , 0 $) $) $) { $return ; }
1671: $if $(@expr1073746446 $!@expr1073746447 $assertEquals $(@expr1073746448 "cppcheck-2.8/test/testvalueflow.cpp" $, 1671 $, true $, $testValueOfX_ $(@expr1073746449 "cppcheck-2.8/test/testvalueflow.cpp" $, 1671 $, code@var344 , 3U , 0 $) $) $) { $return ; }
1672: $if $(@expr1073746450 $!@expr1073746451 $assertEquals $(@expr1073746452 "cppcheck-2.8/test/testvalueflow.cpp" $, 1672 $, false $, $testValueOfX_ $(@expr1073746453 "cppcheck-2.8/test/testvalueflow.cpp" $, 1672 $, code@var344 , 4U , 0 $) $) $) { $return ; }
1673: $if $(@expr1073746454 $!@expr1073746455 $assertEquals $(@expr1073746456 "cppcheck-2.8/test/testvalueflow.cpp" $, 1673 $, false $, $testValueOfX_ $(@expr1073746457 "cppcheck-2.8/test/testvalueflow.cpp" $, 1673 $, code@var344 , 5U , 0 $) $) $) { $return ; }
1674:
1675: bailout (@expr1073746458 "void f(int x) {\n    if (x != 123) { b = x; }\n    if (x == 123) {}\n}"
1676:
1677:
1678: ) ;
1679: $assertEqualsWithoutLineNumbers $(@expr1073746459 "cppcheck-2.8/test/testvalueflow.cpp" $, 1679 $, "[test.cpp:2]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable b\n" $, errout@var100 .@expr1073746460 str (@expr1073746461 ) $)
1680:
1681: ;
1682:
1683: code@var344 =@expr1073746462 "void f(int x, bool abc) {\n  a = x;\n  if (abc) { x = 1; }\n  if (x == 7) { }\n}"
1684:
1685:
1686:
1687: ;
1688: $if $(@expr1073746463 $!@expr1073746464 $assertEquals $(@expr1073746465 "cppcheck-2.8/test/testvalueflow.cpp" $, 1688 $, true $, $testValueOfX_ $(@expr1073746466 "cppcheck-2.8/test/testvalueflow.cpp" $, 1688 $, code@var344 , 2U , 7 $) $) $) { $return ; }
1689:
1690: code@var344 =@expr1073746467 "void f(int x, bool abc) {\n  a = x;\n  if (abc) { x = 7; }\n  if (x == 7) { }\n}"
1691:
1692:
1693:
1694: ;
1695: $if $(@expr1073746468 $!@expr1073746469 $assertEquals $(@expr1073746470 "cppcheck-2.8/test/testvalueflow.cpp" $, 1695 $, false $, $testValueOfX_ $(@expr1073746471 "cppcheck-2.8/test/testvalueflow.cpp" $, 1695 $, code@var344 , 2U , 7 $) $) $) { $return ; }
1696: }
1697:
1698: void valueFlowBeforeConditionGlobalVariables ( ) {
1699: const char * code@var345 ;
1700:
1701:
1702: code@var345 =@expr1073746472 "int x;\nvoid f() {\n    int a = x;\n    if (x == 123) {}\n}"
1703:
1704:
1705:
1706: ;
1707: $if $(@expr1073746473 $!@expr1073746474 $assertEquals $(@expr1073746475 "cppcheck-2.8/test/testvalueflow.cpp" $, 1707 $, true $, $testValueOfX_ $(@expr1073746476 "cppcheck-2.8/test/testvalueflow.cpp" $, 1707 $, code@var345 , 3 , 123 $) $) $) { $return ; }
1708:
1709:
1710: code@var345 =@expr1073746477 "class Fred { int x; void clear(); void f(); };\nvoid Fred::f() {\n    int a = x;\n    clear();\n    if (x == 234) {}\n}"
1711:
|
1714:
1715: ;
1716: $if $(@expr1073746478 $!@expr1073746479 $assertEquals $(@expr1073746480 "cppcheck-2.8/test/testvalueflow.cpp" $, 1716 $, false $, $testValueOfX_ $(@expr1073746481 "cppcheck-2.8/test/testvalueflow.cpp" $, 1716 $, code@var345 , 3 , 234 $) $) $) { $return ; }
1717: }
1718:
1719: void valueFlowBeforeConditionSwitch ( ) {
1720:
1721:
1722: bailout (@expr1073746482 "void f(int x, int y) {\n    switch (y) {\n    case 1: a=x; break;\n    case 2: if (x==5) {} break;\n    };\n}"
1723:
|
1726:
1727: ) ;
1728: $assertEqualsWithoutLineNumbers $(@expr1073746483 "cppcheck-2.8/test/testvalueflow.cpp" $, 1728 $, "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n" $, errout@var100 .@expr4660 str (@expr4661 ) $)
1729:
1730: ;
1731:
1732: bailout (@expr1073746486 "void f(int x, int y) {\n    switch (y) {\n    case 1: a=x; return 1;\n    case 2: if (x==5) {} break;\n    };\n}"
1733:
|
1736:
1737: ) ;
1738: $assertEqualsWithoutLineNumbers $(@expr1073746487 "cppcheck-2.8/test/testvalueflow.cpp" $, 1738 $, "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n" $, errout@var100 .@expr4660 str (@expr4661 ) $)
1739:
1740: ;
1741: }
1742:
1743: void valueFlowBeforeConditionMacro ( ) {
1744:
1745: bailout (@expr1073746490 "#define M  if (x==123) {}\nvoid f(int x) {\n    a = x;\n    M;\n}"
1746:
1747:
1748:
1749: ) ;
1750: $assertEqualsWithoutLineNumbers $(@expr1073746491 "cppcheck-2.8/test/testvalueflow.cpp" $, 1750 $, "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n[test.cpp:4]: (debug) valueflow.cpp:1260:(valueFlow) bailout: variable 'x', condition is defined in macro\n" $, errout@var100 .@expr4668 str (@expr4669 ) $)
1751:
1752:
1753: ;
1754:
1755: bailout (@expr1073746494 "#define FREE(obj) ((obj) ? (free((char *) (obj)), (obj) = 0) : 0)\nvoid f(int *x) {\n    a = x;\n    FREE(x);\n}"
1756:
1757:
1758:
1759: ) ;
1760: $assertEqualsWithoutLineNumbers $(@expr1073746495 "cppcheck-2.8/test/testvalueflow.cpp" $, 1760 $, "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n[test.cpp:4]: (debug) valueflow.cpp:1260:(valueFlow) bailout: variable 'x', condition is defined in macro\n" $, errout@var100 .@expr4668 str (@expr4669 ) $)
1761:
1762:
1763: ;
1764: }
1765:
1766: void valueFlowBeforeConditionGoto ( ) {
1767:
1768: bailout (@expr1073746498 "void f(int x) {\n    if (x == 123) { goto out; }\n    a=x;\nout:    if (x==123){}\n}"
1769:
|
1772:
1773: ) ;
1774: $assertEqualsWithoutLineNumbers $(@expr1073746499 "cppcheck-2.8/test/testvalueflow.cpp" $, 1774 $, "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n[test.cpp:2]: (debug) valueflow.cpp::(valueFlow) bailout: valueFlowAfterCondition: bailing in conditional block\n" $, errout@var100 .@expr1073746500 str (@expr1073746501 ) $)
1775:
1776:
1777: ;
1778:
1779:
1780: bailout (@expr1073746502 "static void f(int rc) {\n    ABC* abc = getabc();\n    if (!abc) { goto out };\n\n    abc->majortype = 0;\n    if (FAILED(rc)) {}\n\nout:\n    if (abc) {}\n}"
1781:
|
1788:
1789: ) ;
1790: }
1791:
1792: void valueFlowBeforeConditionForward ( ) {
1793: const char * code@var346 ;
1794:
1795: code@var346 =@expr1073746503 "void f(int a) {\n    int x = a;\n    if (a == 123) {}\n    int b = x;\n}"
1796:
1797:
1798:
1799: ;
1800: $if $(@expr1073746504 $!@expr1073746505 $assertEquals $(@expr1073746506 "cppcheck-2.8/test/testvalueflow.cpp" $, 1800 $, true $, $testValueOfX_ $(@expr1073746507 "cppcheck-2.8/test/testvalueflow.cpp" $, 1800 $, code@var346 , 4U , 123 $) $) $) { $return ; }
1801:
1802: code@var346 =@expr1073746508 "void f(int a) {\n    int x = a;\n    if (a != 123) {}\n    int b = x;\n}"
1803:
1804:
1805:
1806: ;
1807: $if $(@expr1073746509 $!@expr1073746510 $assertEquals $(@expr1073746511 "cppcheck-2.8/test/testvalueflow.cpp" $, 1807 $, true $, $testValueOfX_ $(@expr1073746512 "cppcheck-2.8/test/testvalueflow.cpp" $, 1807 $, code@var346 , 4U , 123 $) $) $) { $return ; }
1808: }
1809:
1810: void valueFlowBeforeConditionConstructor ( )
1811: {
1812: const char * code@var347 ;
1813:
1814: code@var347 =@expr1073746513 "struct Fred {\n    Fred(int *x)\n      : i(*x) {\n        if (!x) {}\n    }\n    int i;\n};\n"
1815:
|
1819:
1820: ;
1821: $if $(@expr1073746514 $!@expr1073746515 $assertEquals $(@expr1073746516 "cppcheck-2.8/test/testvalueflow.cpp" $, 1821 $, true $, $testValueOfX_ $(@expr1073746517 "cppcheck-2.8/test/testvalueflow.cpp" $, 1821 $, code@var347 , 3U , 0 $) $) $) { $return ; }
1822:
1823: code@var347 =@expr1073746518 "struct Fred {\n    Fred(int *x)\n      : i(*x), j(0) {\n        if (!x) {}\n    }\n    int i;\n    int j;\n};\n"
1824:
|
1829:
1830: ;
1831: $if $(@expr1073746519 $!@expr1073746520 $assertEquals $(@expr1073746521 "cppcheck-2.8/test/testvalueflow.cpp" $, 1831 $, true $, $testValueOfX_ $(@expr1073746522 "cppcheck-2.8/test/testvalueflow.cpp" $, 1831 $, code@var347 , 3U , 0 $) $) $) { $return ; }
1832: }
1833:
1834: void valueFlowAfterAssign ( ) {
1835: const char * code@var348 ;
1836:
1837: code@var348 =@expr1073746524 "void f() {\n    int x = 123;\n    a = x;\n}"
1838:
1839:
1840: ;
1841: $if $(@expr1073746525 $!@expr1073746526 $assertEquals $(@expr1073746527 "cppcheck-2.8/test/testvalueflow.cpp" $, 1841 $, true $, $testValueOfX_ $(@expr1073746528 "cppcheck-2.8/test/testvalueflow.cpp" $, 1841 $, code@var348 , 3U , 123 $) $) $) { $return ; }
1842:
1843: code@var348 =@expr1073746529 "void f() {\n    bool x = 32;\n    a = x;\n}"
1844:
1845:
1846: ;
1847: $if $(@expr1073746530 $!@expr1073746531 $assertEquals $(@expr1073746532 "cppcheck-2.8/test/testvalueflow.cpp" $, 1847 $, true $, $testValueOfX_ $(@expr1073746533 "cppcheck-2.8/test/testvalueflow.cpp" $, 1847 $, code@var348 , 3U , 1 $) $) $) { $return ; }
1848:
1849: code@var348 =@expr1073746534 "void f() {\n    int x = 123;\n    a = sizeof(x);\n}"
1850:
1851:
1852: ;
1853: $if $(@expr1073746535 $!@expr1073746536 $assertEquals $(@expr1073746537 "cppcheck-2.8/test/testvalueflow.cpp" $, 1853 $, false $, $testValueOfX_ $(@expr1073746538 "cppcheck-2.8/test/testvalueflow.cpp" $, 1853 $, code@var348 , 3U , 123 $) $) $) { $return ; }
1854:
1855: code@var348 =@expr1073746539 "void f() {\n    int x = 123;\n    a = 2 + x;\n}"
1856:
1857:
1858: ;
1859: $if $(@expr1073746540 $!@expr1073746541 $assertEquals $(@expr1073746542 "cppcheck-2.8/test/testvalueflow.cpp" $, 1859 $, true $, $testValueOfX_ $(@expr1073746543 "cppcheck-2.8/test/testvalueflow.cpp" $, 1859 $, code@var348 , 3U , 123 $) $) $) { $return ; }
1860:
1861: code@var348 =@expr1073746544 "void f() {\n    const int x(321);\n    a = x;\n}"
1862:
1863:
1864: ;
1865: $if $(@expr1073746545 $!@expr1073746546 $assertEquals $(@expr1073746547 "cppcheck-2.8/test/testvalueflow.cpp" $, 1865 $, true $, $testValueOfX_ $(@expr1073746548 "cppcheck-2.8/test/testvalueflow.cpp" $, 1865 $, code@var348 , 3U , 321 $) $) $) { $return ; }
1866:
1867: code@var348 =@expr1073746549 "void f() {\n    int x = 9;\n    --x;\n    return x;\n}"
1868:
1869:
1870:
1871: ;
1872: $if $(@expr1073746550 $!@expr1073746551 $assertEquals $(@expr1073746552 "cppcheck-2.8/test/testvalueflow.cpp" $, 1872 $, false $, $testValueOfX_ $(@expr1073746553 "cppcheck-2.8/test/testvalueflow.cpp" $, 1872 $, code@var348 , 4U , 9 $) $) $) { $return ; }
1873: $if $(@expr1073746554 $!@expr1073746555 $assertEquals $(@expr1073746556 "cppcheck-2.8/test/testvalueflow.cpp" $, 1873 $, true $, $testValueOfX_ $(@expr1073746557 "cppcheck-2.8/test/testvalueflow.cpp" $, 1873 $, code@var348 , 4U , 8 $) $) $) { $return ; }
1874: $if $(@expr1073746558 $!@expr1073746559 $assertEquals $(@expr1073746560 "cppcheck-2.8/test/testvalueflow.cpp" $, 1874 $, "2,Assignment 'x=9', assigned value is 9\n3,x is decremented', new value is 8\n" $, $getErrorPathForX_ $(@expr1073746561 code@var348 $, 4U $, "cppcheck-2.8/test/testvalueflow.cpp" $, 1874 $) $) $) { $return
1875:
1876: ; }
1877:
1878: code@var348 =@expr1073746562 "void x() {\n    int x = value ? 6 : 0;\n    x =\n        1 + x;\n}"
1879:
1880:
1881:
1882: ;
1883: $if $(@expr1073746563 $!@expr1073746564 $assertEquals $(@expr1073746565 "cppcheck-2.8/test/testvalueflow.cpp" $, 1883 $, false $, $testValueOfX_ $(@expr1073746566 "cppcheck-2.8/test/testvalueflow.cpp" $, 1883 $, code@var348 , 4U , 7 $) $) $) { $return ; }
1884:
1885: code@var348 =@expr1073746567 "void f() {\n    int x = 0;\n    y = x += z;\n    return x;\n}"
1886:
1887:
1888:
1889: ;
1890: $if $(@expr1073746568 $!@expr1073746569 $assertEquals $(@expr1073746570 "cppcheck-2.8/test/testvalueflow.cpp" $, 1890 $, false $, $testValueOfX_ $(@expr1073746571 "cppcheck-2.8/test/testvalueflow.cpp" $, 1890 $, code@var348 , 4U , 0 $) $) $) { $return ; }
1891:
1892: code@var348 =@expr1073746572 "void f() {\n    static int x = 2;\n    x++;\n    return x;\n}"
1893:
1894:
1895:
1896: ;
1897: $if $(@expr1073746573 $!@expr1073746574 $assertEquals $(@expr1073746575 "cppcheck-2.8/test/testvalueflow.cpp" $, 1897 $, false $, $testValueOfX_ $(@expr1073746576 "cppcheck-2.8/test/testvalueflow.cpp" $, 1897 $, code@var348 , 4U , 2 $) $) $) { $return ; }
1898:
1899: code@var348 =@expr1073746577 "void f() {\n    static int x = 2;\n    a >> x;\n    return x;\n}"
1900:
1901:
1902:
1903: ;
1904: $if $(@expr1073746578 $!@expr1073746579 $assertEquals $(@expr1073746580 "cppcheck-2.8/test/testvalueflow.cpp" $, 1904 $, false $, $testValueOfX_ $(@expr1073746581 "cppcheck-2.8/test/testvalueflow.cpp" $, 1904 $, code@var348 , 4U , 2 $) $) $) { $return ; }
1905:
1906: code@var348 =@expr1073746582 "void f() {\n    static int x = 0;\n    if (x==0) x = getX();\n    return x;\n}"
1907:
1908:
1909:
1910: ;
1911: $if $(@expr1073746583 $!@expr1073746584 $assertEquals $(@expr1073746585 "cppcheck-2.8/test/testvalueflow.cpp" $, 1911 $, false $, $testValueOfX_ $(@expr1073746586 "cppcheck-2.8/test/testvalueflow.cpp" $, 1911 $, code@var348 , 4U , 0 $) $) $) { $return ; }
1912:
1913:
1914: code@var348 =@expr1073746587 "int f() {\n  int x = 1.5;\n  return x;\n}"
1915:
1916:
1917: ;
1918: $if $(@expr1073746588 $!@expr1073746589 $assertEquals $(@expr1073746590 "cppcheck-2.8/test/testvalueflow.cpp" $, 1918 $, true $, $testValueOfX_ $(@expr1073746591 "cppcheck-2.8/test/testvalueflow.cpp" $, 1918 $, code@var348 , 3U , 1 $) $) $) { $return ; }
1919:
1920: code@var348 =@expr1073746592 "int f() {\n  unsigned char x = 0x123;\n  return x;\n}"
1921:
1922:
1923: ;
1924: $if $(@expr1073746593 $!@expr1073746594 $assertEquals $(@expr1073746595 "cppcheck-2.8/test/testvalueflow.cpp" $, 1924 $, true $, $testValueOfX_ $(@expr1073746596 "cppcheck-2.8/test/testvalueflow.cpp" $, 1924 $, code@var348 , 3U , 0x23 $) $) $) { $return ; }
1925:
1926: code@var348 =@expr1073746597 "int f() {\n  signed char x = 0xfe;\n  return x;\n}"
1927:
1928:
1929: ;
1930: $if $(@expr1073746598 $!@expr1073746599 $assertEquals $(@expr1073746600 "cppcheck-2.8/test/testvalueflow.cpp" $, 1930 $, true $, $testValueOfX_ $(@expr1073746601 "cppcheck-2.8/test/testvalueflow.cpp" $, 1930 $, code@var348 , 3U , -2 $) $) $) { $return ; }
1931:
1932:
1933: code@var348 =@expr1073746602 "void f() {\n    char *x = 0;\n    int success = getx((char**)&x);\n    if (success) x[0] = 0;\n}"
1934:
1935:
1936:
1937: ;
1938: $if $(@expr1073746603 $!@expr1073746604 $assertEquals $(@expr1073746605 "cppcheck-2.8/test/testvalueflow.cpp" $, 1938 $, false $, $testValueOfX_ $(@expr1073746606 "cppcheck-2.8/test/testvalueflow.cpp" $, 1938 $, code@var348 , 4U , 0 $) $) $) { $return ; }
1939:
1940: code@var348 =@expr1073746607 "void f() {\n    char *x = 0;\n    getx(reinterpret_cast<void **>(&x));\n    *x = 0;\n}"
1941:
1942:
1943:
1944: ;
1945: $if $(@expr1073746608 $!@expr1073746609 $assertEquals $(@expr1073746610 "cppcheck-2.8/test/testvalueflow.cpp" $, 1945 $, false $, $testValueOfX_ $(@expr1073746611 "cppcheck-2.8/test/testvalueflow.cpp" $, 1945 $, code@var348 , 4U , 0 $) $) $) { $return ; }
1946:
1947:
1948: code@var348 =@expr1073746612 "void f() {\n    int x = 0;\n    Q q = [&]() {\n        if (x > 0) {}\n        x++;\n    };\n    dosomething(q);\n}\n"
1949:
|
1954:
1955: ;
1956: $if $(@expr1073746613 $!@expr1073746614 $assertEquals $(@expr1073746615 "cppcheck-2.8/test/testvalueflow.cpp" $, 1956 $, false $, $testValueOfX_ $(@expr1073746616 "cppcheck-2.8/test/testvalueflow.cpp" $, 1956 $, code@var348 , 4U , 0 $) $) $) { $return ; }
1957:
1958: code@var348 =@expr1073746617 "void f() {\n    int x = 0;\n    dostuff([&]() {\n        if (x > 0) {}\n        x++;\n    });\n    dosomething(q);\n}\n"
1959:
|
1964:
1965: ;
1966: $if $(@expr1073746618 $!@expr1073746619 $assertEquals $(@expr1073746620 "cppcheck-2.8/test/testvalueflow.cpp" $, 1966 $, false $, $testValueOfX_ $(@expr1073746621 "cppcheck-2.8/test/testvalueflow.cpp" $, 1966 $, code@var348 , 4U , 0 $) $) $) { $return ; }
1967:
1968: code@var348 =@expr1073746622 "int f() {\n    int x = 1;\n    dostuff([&]() {\n        x = y;\n    });\n    return x;\n}\n"
1969:
|
1973:
1974: ;
1975: $if $(@expr1073746623 $!@expr1073746624 $assertEquals $(@expr1073746625 "cppcheck-2.8/test/testvalueflow.cpp" $, 1975 $, false $, $testValueOfX_ $(@expr1073746626 "cppcheck-2.8/test/testvalueflow.cpp" $, 1975 $, code@var348 , 6U , 1 $) $) $) { $return ; }
1976:
1977:
1978: code@var348 =@expr1073746627 "void f() {\n    int x = 8;\n    a = ((x > 10) ?\n        x : 0);\n}"
1979:
1980:
1981:
1982: ;
1983: $if $(@expr1073746628 $!@expr1073746629 $assertEquals $(@expr1073746630 "cppcheck-2.8/test/testvalueflow.cpp" $, 1983 $, false $, $testValueOfX_ $(@expr1073746631 "cppcheck-2.8/test/testvalueflow.cpp" $, 1983 $, code@var348 , 4U , 8 $) $) $) { $return ; }
1984:
1985: code@var348 =@expr1073746632 "void f() {\n    char *x = \"\";\n    a = ((x[0] == 'U') ?\n        x[1] : 0);\n}"
1986:
1987:
1988:
1989: ;
1990: $if $(@expr1073746633 $!@expr1073746634 $assertEquals $(@expr1073746635 "cppcheck-2.8/test/testvalueflow.cpp" $, 1990 $, false $, $testValueOfX_ $(@expr1073746636 "cppcheck-2.8/test/testvalueflow.cpp" $, 1990 $, code@var348 , 4U , "\"\"" , ValueFlow ::@expr4813 Value ::@expr4814 ValueType ::@expr4815 TOK@expr4699 $) $) $) { $return ; }
1991:
1992: code@var348 =@expr1073746640 "void f() {\n    char *x = getenv (\"LC_ALL\");\n    if (x == NULL)\n        x = \"\";\n\n    if ( (x[0] == 'U') &&\n         (x[1] ?\n          x[3] :\n          x[2] ))\n    {}\n}\n"
1993:
|
2001:
2002: ;
2003: $if $(@expr1073746641 $!@expr1073746642 $assertEquals $(@expr1073746643 "cppcheck-2.8/test/testvalueflow.cpp" $, 2003 $, true $, $testValueOfX_ $(@expr1073746644 "cppcheck-2.8/test/testvalueflow.cpp" $, 2003 $, code@var348 , 6U , "\"\"" , ValueFlow ::@expr4813 Value ::@expr4814 ValueType ::@expr4815 TOK@expr4699 $) $) $) { $return ; }
2004: $if $(@expr1073746648 $!@expr1073746649 $assertEquals $(@expr1073746650 "cppcheck-2.8/test/testvalueflow.cpp" $, 2004 $, false $, $testValueOfX_ $(@expr1073746651 "cppcheck-2.8/test/testvalueflow.cpp" $, 2004 $, code@var348 , 7U , "\"\"" , ValueFlow ::@expr4813 Value ::@expr4814 ValueType ::@expr4815 TOK@expr4699 $) $) $) { $return ; }
2005: $if $(@expr1073746655 $!@expr1073746656 $assertEquals $(@expr1073746657 "cppcheck-2.8/test/testvalueflow.cpp" $, 2005 $, false $, $testValueOfX_ $(@expr1073746658 "cppcheck-2.8/test/testvalueflow.cpp" $, 2005 $, code@var348 , 8U , "\"\"" , ValueFlow ::@expr4813 Value ::@expr4814 ValueType ::@expr4815 TOK@expr4699 $) $) $) { $return ; }
2006: $if $(@expr1073746662 $!@expr1073746663 $assertEquals $(@expr1073746664 "cppcheck-2.8/test/testvalueflow.cpp" $, 2006 $, false $, $testValueOfX_ $(@expr1073746665 "cppcheck-2.8/test/testvalueflow.cpp" $, 2006 $, code@var348 , 9U , "\"\"" , ValueFlow ::@expr4813 Value ::@expr4814 ValueType ::@expr4815 TOK@expr4699 $) $) $) { $return ; }
2007:
2008: code@var348 =@expr1073746669 "void f() {\n  t *x = 0;\n  y = (a ? 1 : x\n       && x->y ? 1 : 2);}"
2009:
2010:
2011:
2012: ;
2013: $if $(@expr1073746670 $!@expr1073746671 $assertEquals $(@expr1073746672 "cppcheck-2.8/test/testvalueflow.cpp" $, 2013 $, true $, $testValueOfX_ $(@expr1073746673 "cppcheck-2.8/test/testvalueflow.cpp" $, 2013 $, code@var348 , 3U , 0 $) $) $) { $return ; }
2014: $if $(@expr1073746674 $!@expr1073746675 $assertEquals $(@expr1073746676 "cppcheck-2.8/test/testvalueflow.cpp" $, 2014 $, false $, $testValueOfX_ $(@expr1073746677 "cppcheck-2.8/test/testvalueflow.cpp" $, 2014 $, code@var348 , 4U , 0 $) $) $) { $return ; }
2015:
2016: code@var348 =@expr1073746678 "void f() {\n  t *x = 0;\n  y = (a ? 1 : !x\n       || x->y ? 1 : 2);}"
2017:
2018:
2019:
2020: ;
2021: $if $(@expr1073746679 $!@expr1073746680 $assertEquals $(@expr1073746681 "cppcheck-2.8/test/testvalueflow.cpp" $, 2021 $, true $, $testValueOfX_ $(@expr1073746682 "cppcheck-2.8/test/testvalueflow.cpp" $, 2021 $, code@var348 , 3U , 0 $) $) $) { $return ; }
2022: $if $(@expr1073746683 $!@expr1073746684 $assertEquals $(@expr1073746685 "cppcheck-2.8/test/testvalueflow.cpp" $, 2022 $, false $, $testValueOfX_ $(@expr1073746686 "cppcheck-2.8/test/testvalueflow.cpp" $, 2022 $, code@var348 , 4U , 0 $) $) $) { $return ; }
2023:
2024:
2025: code@var348 =@expr1073746687 "void f() {\n    int x = 123;\n    if (condition) return;\n    a = 2 + x;\n}"
2026:
2027:
2028:
2029: ;
2030: $if $(@expr1073746688 $!@expr1073746689 $assertEquals $(@expr1073746690 "cppcheck-2.8/test/testvalueflow.cpp" $, 2030 $, true $, $testValueOfX_ $(@expr1073746691 "cppcheck-2.8/test/testvalueflow.cpp" $, 2030 $, code@var348 , 4U , 123 $) $) $) { $return ; }
2031:
2032: code@var348 =@expr1073746692 "void f() {\n    int x = 1;\n    if (condition) x = 2;\n    a = 2 + x;\n}"
2033:
2034:
2035:
2036: ;
2037: $if $(@expr1073746693 $!@expr1073746694 $assertEquals $(@expr1073746695 "cppcheck-2.8/test/testvalueflow.cpp" $, 2037 $, true $, $testValueOfX_ $(@expr1073746696 "cppcheck-2.8/test/testvalueflow.cpp" $, 2037 $, code@var348 , 4U , 1 $) $) $) { $return ; }
2038: $if $(@expr1073746697 $!@expr1073746698 $assertEquals $(@expr1073746699 "cppcheck-2.8/test/testvalueflow.cpp" $, 2038 $, true $, $testValueOfX_ $(@expr1073746700 "cppcheck-2.8/test/testvalueflow.cpp" $, 2038 $, code@var348 , 4U , 2 $) $) $) { $return ; }
2039:
2040: code@var348 =@expr1073746701 "void f() {\n    int x = 123;\n    if (condition1) x = 456;\n    if (condition2) x = 789;\n    a = 2 + x;\n}"
2041:
|
2044:
2045: ;
2046: $todoAssertEquals $(@expr1073746702 "cppcheck-2.8/test/testvalueflow.cpp" $, 2046 $, true $, false $, $testValueOfX_ $(@expr1073746703 "cppcheck-2.8/test/testvalueflow.cpp" $, 2046 $, code@var348 , 5U , 123 $) $) ;
2047:
2048: code@var348 =@expr1073746704 "void f(int a) {\n    int x = 123;\n    if (a > 1)\n        ++x;\n    else\n        ++x;\n    return 2 + x;\n}"
2049:
|
2054:
2055: ;
2056: $if $(@expr1073746705 $!@expr1073746706 $assertEquals $(@expr1073746707 "cppcheck-2.8/test/testvalueflow.cpp" $, 2056 $, true $, $testValueOfX_ $(@expr1073746708 "cppcheck-2.8/test/testvalueflow.cpp" $, 2056 $, code@var348 , 4U , 123 $) $) $) { $return ; }
2057:
2058: code@var348 =@expr1073746709 "void f() {\n    int x = 1;\n    if (condition1) x = 2;\n    else return;\n    a = 2 + x;\n}"
2059:
|
2062:
2063: ;
2064: $if $(@expr1073746710 $!@expr1073746711 $assertEquals $(@expr1073746712 "cppcheck-2.8/test/testvalueflow.cpp" $, 2064 $, false $, $testValueOfX_ $(@expr1073746713 "cppcheck-2.8/test/testvalueflow.cpp" $, 2064 $, code@var348 , 5U , 1 $) $) $) { $return ; }
2065:
2066: code@var348 =@expr1073746714 "void f(){\n    int x = 0;\n    if (a>=0) { x = getx(); }\n    if (x==0) { return; }\n    return 123 / x;\n}\n"
2067:
|
2070:
2071: ;
2072: $if $(@expr1073746715 $!@expr1073746716 $assertEquals $(@expr1073746717 "cppcheck-2.8/test/testvalueflow.cpp" $, 2072 $, false $, $testValueOfX_ $(@expr1073746718 "cppcheck-2.8/test/testvalueflow.cpp" $, 2072 $, code@var348 , 5U , 0 $) $) $) { $return ; }
2073:
2074: code@var348 =@expr1073746719 "void f() {\n  X *x = getx();\n  if(0) { x = 0; }\n  else { x->y = 1; }\n}"
2075:
2076:
2077:
2078: ;
2079: $if $(@expr1073746720 $!@expr1073746721 $assertEquals $(@expr1073746722 "cppcheck-2.8/test/testvalueflow.cpp" $, 2079 $, false $, $testValueOfX_ $(@expr1073746723 "cppcheck-2.8/test/testvalueflow.cpp" $, 2079 $, code@var348 , 4U , 0 $) $) $) { $return ; }
2080:
2081: code@var348 =@expr1073746724 "void f() {\n  int x = 4;\n  if(1) { x = 0; }\n  a = x;\n}"
2082:
2083:
2084:
2085: ;
2086: $if $(@expr1073746725 $!@expr1073746726 $assertEquals $(@expr1073746727 "cppcheck-2.8/test/testvalueflow.cpp" $, 2086 $, false $, $testValueOfX_ $(@expr1073746728 "cppcheck-2.8/test/testvalueflow.cpp" $, 2086 $, code@var348 , 4U , 4 $) $) $) { $return ; }
2087:
2088: code@var348 =@expr1073746729 "void f() {\n    int x = 32;\n    if (x>=32) return;\n    a[x]=0;\n}"
2089:
2090:
2091:
2092: ;
2093: $if $(@expr1073746730 $!@expr1073746731 $assertEquals $(@expr1073746732 "cppcheck-2.8/test/testvalueflow.cpp" $, 2093 $, false $, $testValueOfX_ $(@expr1073746733 "cppcheck-2.8/test/testvalueflow.cpp" $, 2093 $, code@var348 , 4U , 32 $) $) $) { $return ; }
2094:
2095: code@var348 =@expr1073746734 "void f() {\n    int x = 32;\n    if (x>=32) {\n        a[x] = 0;\n        return;\n    }\n}"
2096:
|
2100:
2101: ;
2102: $if $(@expr1073746735 $!@expr1073746736 $assertEquals $(@expr1073746737 "cppcheck-2.8/test/testvalueflow.cpp" $, 2102 $, true $, $testValueOfX_ $(@expr1073746738 "cppcheck-2.8/test/testvalueflow.cpp" $, 2102 $, code@var348 , 4U , 32 $) $) $) { $return ; }
2103:
2104: code@var348 =@expr1073746739 "void f() {\n    int x = 33;\n    if (x==33) goto fail;\n    a[x]=0;\nfail:\n}"
2105:
|
2108:
2109: ;
2110: $if $(@expr1073746740 $!@expr1073746741 $assertEquals $(@expr1073746742 "cppcheck-2.8/test/testvalueflow.cpp" $, 2110 $, false $, $testValueOfX_ $(@expr1073746743 "cppcheck-2.8/test/testvalueflow.cpp" $, 2110 $, code@var348 , 4U , 33 $) $) $) { $return ; }
2111:
2112: code@var348 =@expr1073746744 "void f() {\n    int x = 32;\n    if (a==1) { z=x+12; }\n    if (a==2) { z=x+32; }\n    z = x;\n}"
2113:
|
2116:
2117: ;
2118: $if $(@expr1073746745 $!@expr1073746746 $assertEquals $(@expr1073746747 "cppcheck-2.8/test/testvalueflow.cpp" $, 2118 $, true $, $testValueOfX_ $(@expr1073746748 "cppcheck-2.8/test/testvalueflow.cpp" $, 2118 $, code@var348 , 3U , 32 $) $) $) { $return ; }
2119: $if $(@expr1073746749 $!@expr1073746750 $assertEquals $(@expr1073746751 "cppcheck-2.8/test/testvalueflow.cpp" $, 2119 $, true $, $testValueOfX_ $(@expr1073746752 "cppcheck-2.8/test/testvalueflow.cpp" $, 2119 $, code@var348 , 4U , 32 $) $) $) { $return ; }
2120: $if $(@expr1073746753 $!@expr1073746754 $assertEquals $(@expr1073746755 "cppcheck-2.8/test/testvalueflow.cpp" $, 2120 $, true $, $testValueOfX_ $(@expr1073746756 "cppcheck-2.8/test/testvalueflow.cpp" $, 2120 $, code@var348 , 5U , 32 $) $) $) { $return ; }
2121:
2122: code@var348 =@expr1073746757 "void f() {\n    int x = 0;\n    if (!x) {\n        x = getx();\n    }\n    y = x;\n}"
2123:
|
2127:
2128: ;
2129: $if $(@expr1073746758 $!@expr1073746759 $assertEquals $(@expr1073746760 "cppcheck-2.8/test/testvalueflow.cpp" $, 2129 $, false $, $testValueOfX_ $(@expr1073746761 "cppcheck-2.8/test/testvalueflow.cpp" $, 2129 $, code@var348 , 6U , 0 $) $) $) { $return ; }
2130:
2131: code@var348 =@expr1073746762 "void f(int y) {\n  int x = y;\n  if (y == 54) {}\n  else { a = x; }\n}"
2132:
2133:
2134:
2135: ;
2136: $if $(@expr1073746763 $!@expr1073746764 $assertEquals $(@expr1073746765 "cppcheck-2.8/test/testvalueflow.cpp" $, 2136 $, false $, $testValueOfX_ $(@expr1073746766 "cppcheck-2.8/test/testvalueflow.cpp" $, 2136 $, code@var348 , 4U , 54 $) $) $) { $return ; }
2137:
2138: code@var348 =@expr1073746767 "void f () {\n    ST * x =  g_pST;\n    if (x->y == 0) {\n        x = NULL;\n        return 1;\n    }\n    a = x->y;\n}"
2139:
|
2144:
2145: ;
2146: $if $(@expr1073746768 $!@expr1073746769 $assertEquals $(@expr1073746770 "cppcheck-2.8/test/testvalueflow.cpp" $, 2146 $, false $, $testValueOfX_ $(@expr1073746771 "cppcheck-2.8/test/testvalueflow.cpp" $, 2146 $, code@var348 , 7U , 0 $) $) $) { $return ; }
2147:
2148: code@var348 =@expr1073746772 "void f () {\n    ST * x =  g_pST;\n    if (x->y == 0) {\n        x = NULL;\n        goto label;\n    }\n    a = x->y;\nlabel:\n}"
2149:
|
2155:
2156: ;
2157: $if $(@expr1073746773 $!@expr1073746774 $assertEquals $(@expr1073746775 "cppcheck-2.8/test/testvalueflow.cpp" $, 2157 $, false $, $testValueOfX_ $(@expr1073746776 "cppcheck-2.8/test/testvalueflow.cpp" $, 2157 $, code@var348 , 7U , 0 $) $) $) { $return ; }
2158:
2159: code@var348 =@expr1073746777 "void f() {\n    int *x = 0;\n    if (x && *x == 123) {\n        getx(*x);\n    }\n}"
2160:
|
2163:
2164: ;
2165: $if $(@expr1073746778 $!@expr1073746779 $assertEquals $(@expr1073746780 "cppcheck-2.8/test/testvalueflow.cpp" $, 2165 $, false $, $testValueOfX_ $(@expr1073746781 "cppcheck-2.8/test/testvalueflow.cpp" $, 2165 $, code@var348 , 4U , 0 $) $) $) { $return ; }
2166:
2167: code@var348 =@expr1073746782 "void f() {\n    int x = 0;\n    if (!x) {}\n    else { y = x; }\n}"
2168:
2169:
2170:
2171: ;
2172: $if $(@expr1073746783 $!@expr1073746784 $assertEquals $(@expr1073746785 "cppcheck-2.8/test/testvalueflow.cpp" $, 2172 $, false $, $testValueOfX_ $(@expr1073746786 "cppcheck-2.8/test/testvalueflow.cpp" $, 2172 $, code@var348 , 4U , 0 $) $) $) { $return ; }
2173:
2174: code@var348 =@expr1073746787 "void f() {\n    int x = 0;\n    x = x & 0x1;\n    if (x == 0) { x = 2; }\n    y = 42 / x;\n}"
2175:
|
2178:
2179: ;
2180: $if $(@expr1073746788 $!@expr1073746789 $assertEquals $(@expr1073746790 "cppcheck-2.8/test/testvalueflow.cpp" $, 2180 $, false $, $testValueOfX_ $(@expr1073746791 "cppcheck-2.8/test/testvalueflow.cpp" $, 2180 $, code@var348 , 5U , 0 $) $) $) { $return ; }
2181: $if $(@expr1073746792 $!@expr1073746793 $assertEquals $(@expr1073746794 "cppcheck-2.8/test/testvalueflow.cpp" $, 2181 $, true $, $testValueOfX_ $(@expr1073746795 "cppcheck-2.8/test/testvalueflow.cpp" $, 2181 $, code@var348 , 5U , 2 $) $) $) { $return ; }
2182:
2183: code@var348 =@expr1073746796 "void f() {\n    int x = 0;\n    x = x & 0x1;\n    if (x == 0) { x += 2; }\n    y = 42 / x;\n}"
2184:
|
2187:
2188: ;
2189: $if $(@expr1073746797 $!@expr1073746798 $assertEquals $(@expr1073746799 "cppcheck-2.8/test/testvalueflow.cpp" $, 2189 $, false $, $testValueOfX_ $(@expr1073746800 "cppcheck-2.8/test/testvalueflow.cpp" $, 2189 $, code@var348 , 5U , 0 $) $) $) { $return ; }
2190: $if $(@expr1073746801 $!@expr1073746802 $assertEquals $(@expr1073746803 "cppcheck-2.8/test/testvalueflow.cpp" $, 2190 $, true $, $testValueOfX_ $(@expr1073746804 "cppcheck-2.8/test/testvalueflow.cpp" $, 2190 $, code@var348 , 5U , 2 $) $) $) { $return ; }
2191:
2192: code@var348 =@expr1073746805 "void f(int mode) {\n    struct ABC *x;\n\n    if (mode) { x = &y; }\n    else { x = NULL; }\n\n    if (!x) exit(1);\n\n    a = x->a;\n}"
2193:
|
2200:
2201: ;
2202: $if $(@expr1073746806 $!@expr1073746807 $assertEquals $(@expr1073746808 "cppcheck-2.8/test/testvalueflow.cpp" $, 2202 $, false $, $testValueOfX_ $(@expr1073746809 "cppcheck-2.8/test/testvalueflow.cpp" $, 2202 $, code@var348 , 9U , 0 $) $) $) { $return ; }
2203:
2204: code@var348 =@expr1073746810 "void f(int i) {\n    bool x = false;\n    if (i == 0) { x = true; }\n    else if (x && i == 1) {}\n}\n"
2205:
2206:
2207:
2208: ;
2209: $if $(@expr1073746811 $!@expr1073746812 $assertEquals $(@expr1073746813 "cppcheck-2.8/test/testvalueflow.cpp" $, 2209 $, true $, $testValueOfX_ $(@expr1073746814 "cppcheck-2.8/test/testvalueflow.cpp" $, 2209 $, code@var348 , 4U , 0 $) $) $) { $return ; }
2210:
2211: code@var348 =@expr1073746815 "void f(int i) {\n    bool x = false;\n    while(i > 0) {\n        i++;\n        if (i == 0) { x = true; }\n        else if (x && i == 1) {}\n    }\n}\n"
2212:
|
2217:
2218: ;
2219: $if $(@expr1073746816 $!@expr1073746817 $assertEquals $(@expr1073746818 "cppcheck-2.8/test/testvalueflow.cpp" $, 2219 $, true $, $testValueOfX_ $(@expr1073746819 "cppcheck-2.8/test/testvalueflow.cpp" $, 2219 $, code@var348 , 6U , 0 $) $) $) { $return ; }
2220:
2221:
2222: code@var348 =@expr1073746820 "void f(int a) {\n    int x = a;\n    if (a!=132) { b = x; }\n}"
2223:
2224:
2225: ;
2226: $if $(@expr1073746821 $!@expr1073746822 $assertEquals $(@expr1073746823 "cppcheck-2.8/test/testvalueflow.cpp" $, 2226 $, false $, $testValueOfX_ $(@expr1073746824 "cppcheck-2.8/test/testvalueflow.cpp" $, 2226 $, code@var348 , 3U , 132 $) $) $) { $return ; }
2227:
2228: code@var348 =@expr1073746825 "void f(int a) {\n    int x = a;\n    b = x;\n    if (a!=132) {}\n}"
2229:
2230:
2231:
2232: ;
2233: $if $(@expr1073746826 $!@expr1073746827 $assertEquals $(@expr1073746828 "cppcheck-2.8/test/testvalueflow.cpp" $, 2233 $, true $, $testValueOfX_ $(@expr1073746829 "cppcheck-2.8/test/testvalueflow.cpp" $, 2233 $, code@var348 , 3U , 132 $) $) $) { $return ; }
2234:
2235: code@var348 =@expr1073746830 "void f() {\n    int a;\n    if (n) { a = n; }\n    else { a = 0; }\n    int x = a;\n    if (a > 0) { a = b / x; }\n}"
2236:
|
2240:
2241: ;
2242: $if $(@expr1073746831 $!@expr1073746832 $assertEquals $(@expr1073746833 "cppcheck-2.8/test/testvalueflow.cpp" $, 2242 $, false $, $testValueOfX_ $(@expr1073746834 "cppcheck-2.8/test/testvalueflow.cpp" $, 2242 $, code@var348 , 6U , 0 $) $) $) { $return ; }
2243:
2244: code@var348 =@expr1073746835 "void f(int x1) {\n  int x = x1;\n  if (x1 >= 3) {\n    return;\n  }\n  a = x;\n}"
2245:
|
2249:
2250: ;
2251: $if $(@expr1073746836 $!@expr1073746837 $assertEquals $(@expr1073746838 "cppcheck-2.8/test/testvalueflow.cpp" $, 2251 $, false $, $testValueOfX_ $(@expr1073746839 "cppcheck-2.8/test/testvalueflow.cpp" $, 2251 $, code@var348 , 6U , 3 $) $) $) { $return ; }
2252:
2253: code@var348 =@expr1073746840 "int f(int *x) {\n  if (!x) {\n    switch (i) {\n      default:\n        throw std::runtime_error(msg);\n    };\n  }\n  return *x;\n}"
2254:
|
2260:
2261: ;
2262: $if $(@expr1073746841 $!@expr1073746842 $assertEquals $(@expr1073746843 "cppcheck-2.8/test/testvalueflow.cpp" $, 2262 $, false $, $testValueOfX_ $(@expr1073746844 "cppcheck-2.8/test/testvalueflow.cpp" $, 2262 $, code@var348 , 8U , 0 $) $) $) { $return ; }
2263:
2264: code@var348 =@expr1073746845 "void f(int a) {\n    int x = a ? a : 87;\n    if (a && x) {}\n}"
2265:
2266:
2267: ;
2268: $if $(@expr1073746846 $!@expr1073746847 $assertEquals $(@expr1073746848 "cppcheck-2.8/test/testvalueflow.cpp" $, 2268 $, false $, $testValueOfX_ $(@expr1073746849 "cppcheck-2.8/test/testvalueflow.cpp" $, 2268 $, code@var348 , 3U , 87 $) $) $) { $return ; }
2269:
2270: code@var348 =@expr1073746850 "void f() {\n  int first=-1, x=0;\n  do {\n    if (first >= 0) { a = x; }\n    first++; x=3;\n  } while (1);\n}"
2271:
|
2275:
2276: ;
2277: $if $(@expr1073746851 $!@expr1073746852 $assertEquals $(@expr1073746853 "cppcheck-2.8/test/testvalueflow.cpp" $, 2277 $, false $, $testValueOfX_ $(@expr1073746854 "cppcheck-2.8/test/testvalueflow.cpp" $, 2277 $, code@var348 , 4U , 0 $) $) $) { $return ; }
2278: $if $(@expr1073746855 $!@expr1073746856 $assertEquals $(@expr1073746857 "cppcheck-2.8/test/testvalueflow.cpp" $, 2278 $, true $, $testValueOfX_ $(@expr1073746858 "cppcheck-2.8/test/testvalueflow.cpp" $, 2278 $, code@var348 , 4U , 3 $) $) $) { $return ; }
2279:
2280:
2281: code@var348 =@expr1073746859 "int f(void) {\n  int x = 2;\n  int *px = &x;\n  for (int i = 0; i < 1; i++) {\n    *px = 1;\n  }\n  return x;\n}"
2282:
|
2287:
2288: ;
2289: $if $(@expr1073746860 $!@expr1073746861 $assertEquals $(@expr1073746862 "cppcheck-2.8/test/testvalueflow.cpp" $, 2289 $, false $, $testValueOfX_ $(@expr1073746863 "cppcheck-2.8/test/testvalueflow.cpp" $, 2289 $, code@var348 , 7U , 2 $) $) $) { $return ; }
2290:
2291: code@var348 =@expr1073746864 "int f(void) {\n  int x = 5;\n  int &rx = x;\n  for (int i = 0; i < 1; i++) {\n    rx = 1;\n  }\n  return x;\n}"
2292:
|
2297:
2298: ;
2299: $if $(@expr1073746865 $!@expr1073746866 $assertEquals $(@expr1073746867 "cppcheck-2.8/test/testvalueflow.cpp" $, 2299 $, false $, $testValueOfX_ $(@expr1073746868 "cppcheck-2.8/test/testvalueflow.cpp" $, 2299 $, code@var348 , 7U , 5 $) $) $) { $return ; }
2300:
2301:
2302: code@var348 =@expr1073746869 "void f() {\n  for (;;) {\n    int x = 1;\n    if (!abc()) {\n      x = 2;\n      break;\n    }\n    a = x;\n  }\n}\n"
2303:
|
2310:
2311: ;
2312: $if $(@expr1073746870 $!@expr1073746871 $assertEquals $(@expr1073746872 "cppcheck-2.8/test/testvalueflow.cpp" $, 2312 $, false $, $testValueOfX_ $(@expr1073746873 "cppcheck-2.8/test/testvalueflow.cpp" $, 2312 $, code@var348 , 8U , 2 $) $) $) { $return ; }
2313:
2314: code@var348 =@expr1073746874 "void f() {\n  int x;\n  switch (ab) {\n    case A: x = 12; break;\n    case B: x = 34; break;\n  }\n  v = x;\n}"
2315:
|
2320:
2321: ;
2322: $if $(@expr1073746875 $!@expr1073746876 $assertEquals $(@expr1073746877 "cppcheck-2.8/test/testvalueflow.cpp" $, 2322 $, true $, $testValueOfX_ $(@expr1073746878 "cppcheck-2.8/test/testvalueflow.cpp" $, 2322 $, code@var348 , 7U , 12 $) $) $) { $return ; }
2323: $if $(@expr1073746879 $!@expr1073746880 $assertEquals $(@expr1073746881 "cppcheck-2.8/test/testvalueflow.cpp" $, 2323 $, true $, $testValueOfX_ $(@expr1073746882 "cppcheck-2.8/test/testvalueflow.cpp" $, 2323 $, code@var348 , 7U , 34 $) $) $) { $return ; }
2324:
2325: code@var348 =@expr1073746883 "void f() {\n  int x;\n  switch (ab) {\n    case A: x = 12; break;\n    case B: x = 34; break;\n  }\n  switch (ab) {\n    case A: v = x; break;\n  }\n}"
2326:
|
2333:
2334: ;
2335: $if $(@expr1073746884 $!@expr1073746885 $assertEquals $(@expr1073746886 "cppcheck-2.8/test/testvalueflow.cpp" $, 2335 $, false $, $testValueOfX_ $(@expr1073746887 "cppcheck-2.8/test/testvalueflow.cpp" $, 2335 $, code@var348 , 8U , 34 $) $) $) { $return ; }
2336:
2337:
2338: code@var348 =@expr1073746888 "void f() {\n  ENTRY *x = 0;\n  while (x = get()) {\n    set(x->value);\n  }\n}\n"
2339:
|
2342:
2343: ;
2344: $if $(@expr1073746889 $!@expr1073746890 $assertEquals $(@expr1073746891 "cppcheck-2.8/test/testvalueflow.cpp" $, 2344 $, false $, $testValueOfX_ $(@expr1073746892 "cppcheck-2.8/test/testvalueflow.cpp" $, 2344 $, code@var348 , 4U , 0 $) $) $) { $return ; }
2345:
2346: code@var348 =@expr1073746893 "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n"
2347:
|
2354:
2355: ;
2356: $if $(@expr1073746894 $!@expr1073746895 $assertEquals $(@expr1073746896 "cppcheck-2.8/test/testvalueflow.cpp" $, 2356 $, true $, $testValueOfX_ $(@expr1073746897 "cppcheck-2.8/test/testvalueflow.cpp" $, 2356 $, code@var348 , 9U , 0 $) $) $) { $return ; }
2357:
2358: code@var348 =@expr1073746898 "void f(const int *buf) {\n  int x = 111;\n  bool found = false;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  if (found)\n    a = x;\n}\n"
2359:
|
2369:
2370: ;
2371: $if $(@expr1073746899 $!@expr1073746900 $assertEquals $(@expr1073746901 "cppcheck-2.8/test/testvalueflow.cpp" $, 2371 $, false $, $testValueOfX_ $(@expr1073746902 "cppcheck-2.8/test/testvalueflow.cpp" $, 2371 $, code@var348 , 12U , 111 $) $) $) { $return ; }
2372:
2373: code@var348 =@expr1073746903 "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      ;\n    }\n  }\n  a = x;\n}\n"
2374:
|
2381:
2382: ;
2383: $if $(@expr1073746904 $!@expr1073746905 $assertEquals $(@expr1073746906 "cppcheck-2.8/test/testvalueflow.cpp" $, 2383 $, true $, $testValueOfX_ $(@expr1073746907 "cppcheck-2.8/test/testvalueflow.cpp" $, 2383 $, code@var348 , 9U , 0 $) $) $) { $return ; }
2384: $if $(@expr1073746908 $!@expr1073746909 $assertEquals $(@expr1073746910 "cppcheck-2.8/test/testvalueflow.cpp" $, 2384 $, false $, $testValueOfXKnown_ $(@expr1073746911 "cppcheck-2.8/test/testvalueflow.cpp" $, 2384 $, code@var348 , 9U , 0 $) $) $) { $return ; }
2385:
2386: code@var348 =@expr1073746912 "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      ;\n    } else {\n      x = 1;\n    }\n  }\n  a = x;\n}\n"
2387:
|
2396:
2397: ;
2398: $if $(@expr1073746913 $!@expr1073746914 $assertEquals $(@expr1073746915 "cppcheck-2.8/test/testvalueflow.cpp" $, 2398 $, false $, $testValueOfX_ $(@expr1073746916 "cppcheck-2.8/test/testvalueflow.cpp" $, 2398 $, code@var348 , 11U , 0 $) $) $) { $return ; }
2399:
2400: code@var348 =@expr1073746917 "void f(const int *buf) {\n  int i = 0;\n  int x = 0;\n  while (++i < 10) {\n    if (buf[i] == 123) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n"
2401:
|
2409:
2410: ;
2411: $if $(@expr1073746918 $!@expr1073746919 $assertEquals $(@expr1073746920 "cppcheck-2.8/test/testvalueflow.cpp" $, 2411 $, true $, $testValueOfX_ $(@expr1073746921 "cppcheck-2.8/test/testvalueflow.cpp" $, 2411 $, code@var348 , 10U , 0 $) $) $) { $return ; }
2412:
2413: code@var348 =@expr1073746922 "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n    }\n  }\n  a = x;\n}\n"
2414:
|
2423:
2424: ;
2425: $if $(@expr1073746923 $!@expr1073746924 $assertEquals $(@expr1073746925 "cppcheck-2.8/test/testvalueflow.cpp" $, 2425 $, false $, $testValueOfX_ $(@expr1073746926 "cppcheck-2.8/test/testvalueflow.cpp" $, 2425 $, code@var348 , 11U , 0 $) $) $) { $return ; }
2426:
2427: code@var348 =@expr1073746927 "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n    } else {\n      found = false;\n    }\n  }\n  a = x;\n}\n"
2428:
|
2439:
2440: ;
2441: $if $(@expr1073746928 $!@expr1073746929 $assertEquals $(@expr1073746930 "cppcheck-2.8/test/testvalueflow.cpp" $, 2441 $, false $, $testValueOfX_ $(@expr1073746931 "cppcheck-2.8/test/testvalueflow.cpp" $, 2441 $, code@var348 , 13U , 0 $) $) $) { $return ; }
2442:
2443: code@var348 =@expr1073746932 "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n"
2444:
|
2453:
2454: ;
2455: $if $(@expr1073746933 $!@expr1073746934 $assertEquals $(@expr1073746935 "cppcheck-2.8/test/testvalueflow.cpp" $, 2455 $, false $, $testValueOfX_ $(@expr1073746936 "cppcheck-2.8/test/testvalueflow.cpp" $, 2455 $, code@var348 , 11U , 0 $) $) $) { $return ; }
2456:
2457: code@var348 =@expr1073746937 "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  a = x;\n}\n"
2458:
|
2468:
2469: ;
2470: $if $(@expr1073746938 $!@expr1073746939 $assertEquals $(@expr1073746940 "cppcheck-2.8/test/testvalueflow.cpp" $, 2470 $, false $, $testValueOfX_ $(@expr1073746941 "cppcheck-2.8/test/testvalueflow.cpp" $, 2470 $, code@var348 , 12U , 0 $) $) $) { $return ; }
2471:
2472: code@var348 =@expr1073746942 "void f(const int a[]) {\n  const int *x = 0;\n  for (int i = 0; i < 10; i = *x) {\n    x = a[i];\n  }\n}\n"
2473:
|
2476:
2477: ;
2478: $if $(@expr1073746943 $!@expr1073746944 $assertEquals $(@expr1073746945 "cppcheck-2.8/test/testvalueflow.cpp" $, 2478 $, false $, $testValueOfX_ $(@expr1073746946 "cppcheck-2.8/test/testvalueflow.cpp" $, 2478 $, code@var348 , 3U , 0 $) $) $) { $return ; }
2479:
2480:
2481: code@var348 =@expr1073746947 "void f() {\n  int x = 0;\n  int *p = &x;\n  x = 3;\n  *p = 2;\n  a = x;\n}\n"
2482:
|
2486:
2487: ;
2488: $if $(@expr1073746948 $!@expr1073746949 $assertEquals $(@expr1073746950 "cppcheck-2.8/test/testvalueflow.cpp" $, 2488 $, false $, $testValueOfX_ $(@expr1073746951 "cppcheck-2.8/test/testvalueflow.cpp" $, 2488 $, code@var348 , 6U , 3 $) $) $) { $return ; }
2489: $todoAssertEquals $(@expr1073746952 "cppcheck-2.8/test/testvalueflow.cpp" $, 2489 $, true $, false $, $testValueOfX_ $(@expr1073746953 "cppcheck-2.8/test/testvalueflow.cpp" $, 2489 $, code@var348 , 6U , 2 $) $) ;
2490:
2491: code@var348 =@expr1073746954 "struct Fred {\n    static void Create(std::unique_ptr<Wilma> wilma);\n    Fred(std::unique_ptr<Wilma> wilma);\n    std::unique_ptr<Wilma> mWilma;\n};\nvoid Fred::Create(std::unique_ptr<Wilma> wilma) {\n    auto fred = std::make_shared<Fred>(std::move(wilma));\n    fred->mWilma.reset();\n}\nFred::Fred(std::unique_ptr<Wilma> wilma)\n    : mWilma(std::move(wilma)) {}\n"
2492:
|
2500:
2501: ;
2502: $if $(@expr1073746955 $!@expr1073746956 $assertEquals $(@expr1073746957 "cppcheck-2.8/test/testvalueflow.cpp" $, 2502 $, 0 $, $(@expr1073746958 $tokenValues_ $(@expr1073746959 "cppcheck-2.8/test/testvalueflow.cpp" $, 2502 $, code@var348 , "mWilma (" $) .@expr1073746960 size (@expr1073746961 ) $) $) $) { $return ; }
2503:
2504: code@var348 =@expr1073746962 "void g(unknown*);\nint f() {\n    int a = 1;\n    unknown c[] = {{&a}};\n    g(c);\n    int x = a;\n    return x;\n}\n"
2505:
|
2510:
2511: ;
2512: $if $(@expr1073746963 $!@expr1073746964 $assertEquals $(@expr1073746965 "cppcheck-2.8/test/testvalueflow.cpp" $, 2512 $, false $, $testValueOfXKnown_ $(@expr1073746966 "cppcheck-2.8/test/testvalueflow.cpp" $, 2512 $, code@var348 , 7U , 1 $) $) $) { $return ; }
2513: $if $(@expr1073746967 $!@expr1073746968 $assertEquals $(@expr1073746969 "cppcheck-2.8/test/testvalueflow.cpp" $, 2513 $, true $, $testValueOfXInconclusive_ $(@expr1073746970 code@var348 $, 7U $, 1 $, "cppcheck-2.8/test/testvalueflow.cpp" $, 2513 $) $) $) { $return ; }
2514:
2515: code@var348 =@expr1073746971 "void g(unknown&);\nint f() {\n    int a = 1;\n    unknown c{&a};\n    g(c);\n    int x = a;\n    return x;\n}\n"
2516:
|
2521:
2522: ;
2523: $if $(@expr1073746972 $!@expr1073746973 $assertEquals $(@expr1073746974 "cppcheck-2.8/test/testvalueflow.cpp" $, 2523 $, false $, $testValueOfXKnown_ $(@expr1073746975 "cppcheck-2.8/test/testvalueflow.cpp" $, 2523 $, code@var348 , 7U , 1 $) $) $) { $return ; }
2524: $if $(@expr1073746976 $!@expr1073746977 $assertEquals $(@expr1073746978 "cppcheck-2.8/test/testvalueflow.cpp" $, 2524 $, true $, $testValueOfXInconclusive_ $(@expr1073746979 code@var348 $, 7U $, 1 $, "cppcheck-2.8/test/testvalueflow.cpp" $, 2524 $) $) $) { $return ; }
2525:
2526: code@var348 =@expr1073746980 "long foo();\nlong bar();\nint test() {\n  bool b = true;\n  long a = foo();\n  if (a != 0)\n    return 1;\n  a = bar();\n  if (a != 0)\n    b = false;\n  int x = b;\n  return x;\n}\n"
2527:
|
2537:
2538: ;
2539: $if $(@expr1073746981 $!@expr1073746982 $assertEquals $(@expr1073746983 "cppcheck-2.8/test/testvalueflow.cpp" $, 2539 $, true $, $testValueOfX_ $(@expr1073746984 "cppcheck-2.8/test/testvalueflow.cpp" $, 2539 $, code@var348 , 12U , 0 $) $) $) { $return ; }
2540: $if $(@expr1073746985 $!@expr1073746986 $assertEquals $(@expr1073746987 "cppcheck-2.8/test/testvalueflow.cpp" $, 2540 $, false $, $testValueOfXKnown_ $(@expr1073746988 "cppcheck-2.8/test/testvalueflow.cpp" $, 2540 $, code@var348 , 12U , 0 $) $) $) { $return ; }
2541:
2542: code@var348 =@expr1073746989 "bool f(unsigned char uc) {\n  const bool x = uc;\n  return x;\n}\n"
2543:
2544:
2545: ;
2546: $if $(@expr1073746990 $!@expr1073746991 $assertEquals $(@expr1073746992 "cppcheck-2.8/test/testvalueflow.cpp" $, 2546 $, true $, $testValueOfXImpossible_ $(@expr1073746993 "cppcheck-2.8/test/testvalueflow.cpp" $, 2546 $, code@var348 , 3U , -1 $) $) $) { $return ; }
2547: $if $(@expr1073746994 $!@expr1073746995 $assertEquals $(@expr1073746996 "cppcheck-2.8/test/testvalueflow.cpp" $, 2547 $, false $, $testValueOfXKnown_ $(@expr1073746997 "cppcheck-2.8/test/testvalueflow.cpp" $, 2547 $, code@var348 , 3U , 1 $) $) $) { $return ; }
2548: $if $(@expr1073746998 $!@expr1073746999 $assertEquals $(@expr1073747000 "cppcheck-2.8/test/testvalueflow.cpp" $, 2548 $, false $, $testValueOfXKnown_ $(@expr1073747001 "cppcheck-2.8/test/testvalueflow.cpp" $, 2548 $, code@var348 , 3U , 0 $) $) $) { $return ; }
2549: $if $(@expr1073747002 $!@expr1073747003 $assertEquals $(@expr1073747004 "cppcheck-2.8/test/testvalueflow.cpp" $, 2549 $, false $, $testValueOfXImpossible_ $(@expr1073747005 "cppcheck-2.8/test/testvalueflow.cpp" $, 2549 $, code@var348 , 3U , 0 $) $) $) { $return ; }
2550: $if $(@expr1073747006 $!@expr1073747007 $assertEquals $(@expr1073747008 "cppcheck-2.8/test/testvalueflow.cpp" $, 2550 $, false $, $testValueOfXImpossible_ $(@expr1073747009 "cppcheck-2.8/test/testvalueflow.cpp" $, 2550 $, code@var348 , 3U , 1 $) $) $) { $return ; }
2551:
2552: code@var348 =@expr1073747010 "struct A {\n    int i, j;\n    int foo() {\n        i = 1;\n        j = 2;\n        int x = i;\n        return x;\n    }\n};\n"
2553:
|
2559:
2560: ;
2561: $if $(@expr1073747011 $!@expr1073747012 $assertEquals $(@expr1073747013 "cppcheck-2.8/test/testvalueflow.cpp" $, 2561 $, true $, $testValueOfXKnown_ $(@expr1073747014 "cppcheck-2.8/test/testvalueflow.cpp" $, 2561 $, code@var348 , 7U , 1 $) $) $) { $return ; }
2562:
2563:
2564: code@var348 =@expr1073747015 "int x;\nint foo(int y) {\n  if (y)\n    x = 10;\n  return x;\n}"
2565:
|
2568:
2569: ;
2570: $if $(@expr1073747016 $!@expr1073747017 $assertEquals $(@expr1073747018 "cppcheck-2.8/test/testvalueflow.cpp" $, 2570 $, true $, $testValueOfX_ $(@expr1073747019 "cppcheck-2.8/test/testvalueflow.cpp" $, 2570 $, code@var348 , 5U , 10 $) $) $) { $return ; }
2571:
2572: code@var348 =@expr1073747020 "namespace A { int x; }\nint foo(int y) {\n  if (y)\n    A::x = 10;\n  return A::x;\n}"
2573:
|
2576:
2577: ;
2578: $if $(@expr1073747021 $!@expr1073747022 $assertEquals $(@expr1073747023 "cppcheck-2.8/test/testvalueflow.cpp" $, 2578 $, true $, $testValueOfX_ $(@expr1073747024 "cppcheck-2.8/test/testvalueflow.cpp" $, 2578 $, code@var348 , 5U , 10 $) $) $) { $return ; }
2579:
2580:
2581: code@var348 =@expr1073747025 "struct Fred {\n  int x;\n  int foo(int y) {\n    if (y)\n      x = 10;\n    return x;\n  }\n};"
2582:
|
2587:
2588: ;
2589: $if $(@expr1073747026 $!@expr1073747027 $assertEquals $(@expr1073747028 "cppcheck-2.8/test/testvalueflow.cpp" $, 2589 $, true $, $testValueOfX_ $(@expr1073747029 "cppcheck-2.8/test/testvalueflow.cpp" $, 2589 $, code@var348 , 6U , 10 $) $) $) { $return ; }
2590: }
2591:
2592: void valueFlowAfterSwap ( )
2593: {
2594: const char * code@var349 ;
2595:
2596: code@var349 =@expr1073747030 "int f() {\n    int a = 1;\n    int b = 2;\n    std::swap(a, b);\n    int x = a;\n    return x;\n}"
2597:
|
2601:
2602: ;
2603: $if $(@expr1073747031 $!@expr1073747032 $assertEquals $(@expr1073747033 "cppcheck-2.8/test/testvalueflow.cpp" $, 2603 $, true $, $testValueOfXKnown_ $(@expr1073747034 "cppcheck-2.8/test/testvalueflow.cpp" $, 2603 $, code@var349 , 6U , 2 $) $) $) { $return ; }
2604: $if $(@expr1073747035 $!@expr1073747036 $assertEquals $(@expr1073747037 "cppcheck-2.8/test/testvalueflow.cpp" $, 2604 $, false $, $testValueOfXKnown_ $(@expr1073747038 "cppcheck-2.8/test/testvalueflow.cpp" $, 2604 $, code@var349 , 6U , 1 $) $) $) { $return ; }
2605:
2606: code@var349 =@expr1073747039 "int f() {\n    int a = 1;\n    int b = 2;\n    std::swap(a, b);\n    int x = b;\n    return x;\n}"
2607:
|
2611:
2612: ;
2613: $if $(@expr1073747040 $!@expr1073747041 $assertEquals $(@expr1073747042 "cppcheck-2.8/test/testvalueflow.cpp" $, 2613 $, true $, $testValueOfXKnown_ $(@expr1073747043 "cppcheck-2.8/test/testvalueflow.cpp" $, 2613 $, code@var349 , 6U , 1 $) $) $) { $return ; }
2614: $if $(@expr1073747044 $!@expr1073747045 $assertEquals $(@expr1073747046 "cppcheck-2.8/test/testvalueflow.cpp" $, 2614 $, false $, $testValueOfXKnown_ $(@expr1073747047 "cppcheck-2.8/test/testvalueflow.cpp" $, 2614 $, code@var349 , 6U , 2 $) $) $) { $return ; }
2615: }
2616:
2617: void valueFlowAfterCondition ( ) {
2618: const char * code@var350 ;
2619:
2620: code@var350 =@expr1073747048 "void f(int x) {\n    if (x == 123) {\n        a = x;\n    }\n}"
2621:
2622:
2623:
2624: ;
2625: $if $(@expr1073747049 $!@expr1073747050 $assertEquals $(@expr1073747051 "cppcheck-2.8/test/testvalueflow.cpp" $, 2625 $, true $, $testValueOfX_ $(@expr1073747052 "cppcheck-2.8/test/testvalueflow.cpp" $, 2625 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2626:
2627: code@var350 =@expr1073747053 "void f(int x) {\n    if (x != 123) {\n        a = x;\n    }\n}"
2628:
2629:
2630:
2631: ;
2632: $if $(@expr1073747054 $!@expr1073747055 $assertEquals $(@expr1073747056 "cppcheck-2.8/test/testvalueflow.cpp" $, 2632 $, false $, $testValueOfX_ $(@expr1073747057 "cppcheck-2.8/test/testvalueflow.cpp" $, 2632 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2633:
2634: code@var350 =@expr1073747058 "void f(int x) {\n    if (x > 123) {\n        a = x;\n    }\n}"
2635:
2636:
2637:
2638: ;
2639: $if $(@expr1073747059 $!@expr1073747060 $assertEquals $(@expr1073747061 "cppcheck-2.8/test/testvalueflow.cpp" $, 2639 $, true $, $testValueOfX_ $(@expr1073747062 "cppcheck-2.8/test/testvalueflow.cpp" $, 2639 $, code@var350 , 3U , 124 $) $) $) { $return ; }
2640: $if $(@expr1073747063 $!@expr1073747064 $assertEquals $(@expr1073747065 "cppcheck-2.8/test/testvalueflow.cpp" $, 2640 $, false $, $testValueOfX_ $(@expr1073747066 "cppcheck-2.8/test/testvalueflow.cpp" $, 2640 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2641:
2642: code@var350 =@expr1073747067 "void f(int x) {\n    if (x < 123) {\n        a = x;\n    }\n}"
2643:
2644:
2645:
2646: ;
2647: $if $(@expr1073747068 $!@expr1073747069 $assertEquals $(@expr1073747070 "cppcheck-2.8/test/testvalueflow.cpp" $, 2647 $, true $, $testValueOfX_ $(@expr1073747071 "cppcheck-2.8/test/testvalueflow.cpp" $, 2647 $, code@var350 , 3U , 122 $) $) $) { $return ; }
2648: $if $(@expr1073747072 $!@expr1073747073 $assertEquals $(@expr1073747074 "cppcheck-2.8/test/testvalueflow.cpp" $, 2648 $, false $, $testValueOfX_ $(@expr1073747075 "cppcheck-2.8/test/testvalueflow.cpp" $, 2648 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2649:
2650:
2651:
2652: code@var350 =@expr1073747076 "void f(int x) {\n    if (123 < x) {\n        a = x;\n    }\n}"
2653:
2654:
2655:
2656: ;
2657: $if $(@expr1073747077 $!@expr1073747078 $assertEquals $(@expr1073747079 "cppcheck-2.8/test/testvalueflow.cpp" $, 2657 $, true $, $testValueOfX_ $(@expr1073747080 "cppcheck-2.8/test/testvalueflow.cpp" $, 2657 $, code@var350 , 3U , 124 $) $) $) { $return ; }
2658: $if $(@expr1073747081 $!@expr1073747082 $assertEquals $(@expr1073747083 "cppcheck-2.8/test/testvalueflow.cpp" $, 2658 $, false $, $testValueOfX_ $(@expr1073747084 "cppcheck-2.8/test/testvalueflow.cpp" $, 2658 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2659:
2660: code@var350 =@expr1073747085 "void f(int x) {\n    if (123 > x) {\n        a = x;\n    }\n}"
2661:
2662:
2663:
2664: ;
2665: $if $(@expr1073747086 $!@expr1073747087 $assertEquals $(@expr1073747088 "cppcheck-2.8/test/testvalueflow.cpp" $, 2665 $, true $, $testValueOfX_ $(@expr1073747089 "cppcheck-2.8/test/testvalueflow.cpp" $, 2665 $, code@var350 , 3U , 122 $) $) $) { $return ; }
2666: $if $(@expr1073747090 $!@expr1073747091 $assertEquals $(@expr1073747092 "cppcheck-2.8/test/testvalueflow.cpp" $, 2666 $, false $, $testValueOfX_ $(@expr1073747093 "cppcheck-2.8/test/testvalueflow.cpp" $, 2666 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2667:
2668:
2669: code@var350 =@expr1073747094 "void f(int x) {\n    if (x == 123) {}\n    else a = x;\n}"
2670:
2671:
2672: ;
2673: $if $(@expr1073747095 $!@expr1073747096 $assertEquals $(@expr1073747097 "cppcheck-2.8/test/testvalueflow.cpp" $, 2673 $, false $, $testValueOfX_ $(@expr1073747098 "cppcheck-2.8/test/testvalueflow.cpp" $, 2673 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2674:
2675: code@var350 =@expr1073747099 "void f(int x) {\n    if (x != 123) {}\n    else a = x;\n}"
2676:
2677:
2678: ;
2679: $if $(@expr1073747100 $!@expr1073747101 $assertEquals $(@expr1073747102 "cppcheck-2.8/test/testvalueflow.cpp" $, 2679 $, true $, $testValueOfX_ $(@expr1073747103 "cppcheck-2.8/test/testvalueflow.cpp" $, 2679 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2680:
2681:
2682: code@var350 =@expr1073747104 "void f(int x) {\n    if (x == 10) {\n        x++;\n    }\n    a = x;\n}"
2683:
|
2686:
2687: ;
2688: $if $(@expr1073747105 $!@expr1073747106 $assertEquals $(@expr1073747107 "cppcheck-2.8/test/testvalueflow.cpp" $, 2688 $, false $, $testValueOfX_ $(@expr1073747108 "cppcheck-2.8/test/testvalueflow.cpp" $, 2688 $, code@var350 , 5U , 10 $) $) $) { $return ; }
2689: $todoAssertEquals $(@expr1073747109 "cppcheck-2.8/test/testvalueflow.cpp" $, 2689 $, true $, false $, $testValueOfX_ $(@expr1073747110 "cppcheck-2.8/test/testvalueflow.cpp" $, 2689 $, code@var350 , 5U , 11 $) $) ;
2690:
2691:
2692: code@var350 =@expr1073747111 "void f(int x) {\n    if (!x) { a = x; }\n    else a = x;\n}"
2693:
2694:
2695: ;
2696: $if $(@expr1073747112 $!@expr1073747113 $assertEquals $(@expr1073747114 "cppcheck-2.8/test/testvalueflow.cpp" $, 2696 $, true $, $testValueOfX_ $(@expr1073747115 "cppcheck-2.8/test/testvalueflow.cpp" $, 2696 $, code@var350 , 2U , 0 $) $) $) { $return ; }
2697:
2698: code@var350 =@expr1073747116 "void f(int x, int y) {\n    if (!(x&&y)) { return; }\n    a = x;\n}"
2699:
2700:
2701: ;
2702: $if $(@expr1073747117 $!@expr1073747118 $assertEquals $(@expr1073747119 "cppcheck-2.8/test/testvalueflow.cpp" $, 2702 $, false $, $testValueOfX_ $(@expr1073747120 "cppcheck-2.8/test/testvalueflow.cpp" $, 2702 $, code@var350 , 3U , 0 $) $) $) { $return ; }
2703:
2704: code@var350 =@expr1073747121 "void f(int x) {\n    if (!x) { { throw new string(); }; }\n    a = x;\n}"
2705:
2706:
2707: ;
2708: $if $(@expr1073747122 $!@expr1073747123 $assertEquals $(@expr1073747124 "cppcheck-2.8/test/testvalueflow.cpp" $, 2708 $, false $, $testValueOfX_ $(@expr1073747125 "cppcheck-2.8/test/testvalueflow.cpp" $, 2708 $, code@var350 , 3U , 0 $) $) $) { $return ; }
2709:
2710: code@var350 =@expr1073747126 "void f(int x) {\n    if (x != 123) { throw ; }\n    a = x;\n}"
2711:
2712:
2713: ;
2714: $if $(@expr1073747127 $!@expr1073747128 $assertEquals $(@expr1073747129 "cppcheck-2.8/test/testvalueflow.cpp" $, 2714 $, true $, $testValueOfX_ $(@expr1073747130 "cppcheck-2.8/test/testvalueflow.cpp" $, 2714 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2715:
2716: code@var350 =@expr1073747131 "void f(int x) {\n    if (x != 123) { }\n    else { throw ; }\n    a = x;\n}"
2717:
2718:
2719:
2720: ;
2721: $if $(@expr1073747132 $!@expr1073747133 $assertEquals $(@expr1073747134 "cppcheck-2.8/test/testvalueflow.cpp" $, 2721 $, false $, $testValueOfX_ $(@expr1073747135 "cppcheck-2.8/test/testvalueflow.cpp" $, 2721 $, code@var350 , 4U , 123 $) $) $) { $return ; }
2722: code@var350 =@expr1073747136 "void f(int x) {\n    if (x == 123) { }\n    else { throw ; }\n    a = x;\n}"
2723:
2724:
2725:
2726: ;
2727: $if $(@expr1073747137 $!@expr1073747138 $assertEquals $(@expr1073747139 "cppcheck-2.8/test/testvalueflow.cpp" $, 2727 $, true $, $testValueOfX_ $(@expr1073747140 "cppcheck-2.8/test/testvalueflow.cpp" $, 2727 $, code@var350 , 4U , 123 $) $) $) { $return ; }
2728:
2729:
2730: code@var350 =@expr1073747141 "void f(int x) {\n    if (x < 123) { }\n    else { a = x; }\n}"
2731:
2732:
2733: ;
2734: $if $(@expr1073747142 $!@expr1073747143 $assertEquals $(@expr1073747144 "cppcheck-2.8/test/testvalueflow.cpp" $, 2734 $, true $, $testValueOfX_ $(@expr1073747145 "cppcheck-2.8/test/testvalueflow.cpp" $, 2734 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2735:
2736: code@var350 =@expr1073747146 "void f(int x) {\n    if (x < 123) { throw \"\"; }\n    a = x;\n}"
2737:
2738:
2739: ;
2740: $if $(@expr1073747147 $!@expr1073747148 $assertEquals $(@expr1073747149 "cppcheck-2.8/test/testvalueflow.cpp" $, 2740 $, true $, $testValueOfX_ $(@expr1073747150 "cppcheck-2.8/test/testvalueflow.cpp" $, 2740 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2741:
2742: code@var350 =@expr1073747151 "void f(int x) {\n    if (x < 123) { }\n    else { throw \"\"; }\n    a = x;\n}"
2743:
2744:
2745:
2746: ;
2747: $if $(@expr1073747152 $!@expr1073747153 $assertEquals $(@expr1073747154 "cppcheck-2.8/test/testvalueflow.cpp" $, 2747 $, true $, $testValueOfX_ $(@expr1073747155 "cppcheck-2.8/test/testvalueflow.cpp" $, 2747 $, code@var350 , 4U , 122 $) $) $) { $return ; }
2748: $if $(@expr1073747156 $!@expr1073747157 $assertEquals $(@expr1073747158 "cppcheck-2.8/test/testvalueflow.cpp" $, 2748 $, false $, $testValueOfX_ $(@expr1073747159 "cppcheck-2.8/test/testvalueflow.cpp" $, 2748 $, code@var350 , 4U , 123 $) $) $) { $return ; }
2749:
2750: code@var350 =@expr1073747160 "void f(int x) {\n    if (x > 123) { }\n    else { a = x; }\n}"
2751:
2752:
2753: ;
2754: $if $(@expr1073747161 $!@expr1073747162 $assertEquals $(@expr1073747163 "cppcheck-2.8/test/testvalueflow.cpp" $, 2754 $, true $, $testValueOfX_ $(@expr1073747164 "cppcheck-2.8/test/testvalueflow.cpp" $, 2754 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2755:
2756: code@var350 =@expr1073747165 "void f(int x) {\n    if (x > 123) { throw \"\"; }\n    a = x;\n}"
2757:
2758:
2759: ;
2760: $if $(@expr1073747166 $!@expr1073747167 $assertEquals $(@expr1073747168 "cppcheck-2.8/test/testvalueflow.cpp" $, 2760 $, true $, $testValueOfX_ $(@expr1073747169 "cppcheck-2.8/test/testvalueflow.cpp" $, 2760 $, code@var350 , 3U , 123 $) $) $) { $return ; }
2761:
2762: code@var350 =@expr1073747170 "void f(int x) {\n    if (x > 123) { }\n    else { throw \"\"; }\n    a = x;\n}"
2763:
2764:
2765:
2766: ;
2767: $if $(@expr1073747171 $!@expr1073747172 $assertEquals $(@expr1073747173 "cppcheck-2.8/test/testvalueflow.cpp" $, 2767 $, true $, $testValueOfX_ $(@expr1073747174 "cppcheck-2.8/test/testvalueflow.cpp" $, 2767 $, code@var350 , 4U , 124 $) $) $) { $return ; }
2768: $if $(@expr1073747175 $!@expr1073747176 $assertEquals $(@expr1073747177 "cppcheck-2.8/test/testvalueflow.cpp" $, 2768 $, false $, $testValueOfX_ $(@expr1073747178 "cppcheck-2.8/test/testvalueflow.cpp" $, 2768 $, code@var350 , 4U , 123 $) $) $) { $return ; }
2769:
2770: code@var350 =@expr1073747179 "void f(int x) {\n    if (x < 123) { return; }\n    else { return; }\n    a = x;\n}"
2771:
2772:
2773:
2774: ;
2775: $if $(@expr1073747180 $!@expr1073747181 $assertEquals $(@expr1073747182 "cppcheck-2.8/test/testvalueflow.cpp" $, 2775 $, false $, $testValueOfX_ $(@expr1073747183 "cppcheck-2.8/test/testvalueflow.cpp" $, 2775 $, code@var350 , 4U , 124 $) $) $) { $return ; }
2776: $if $(@expr1073747184 $!@expr1073747185 $assertEquals $(@expr1073747186 "cppcheck-2.8/test/testvalueflow.cpp" $, 2776 $, false $, $testValueOfX_ $(@expr1073747187 "cppcheck-2.8/test/testvalueflow.cpp" $, 2776 $, code@var350 , 4U , 123 $) $) $) { $return ; }
2777:
2778:
2779: code@var350 =@expr1073747188 "void f(int x) {\n    if (x) { a = x; }\n    else { b = x; }\n    c = x;\n}"
2780:
2781:
2782:
2783: ;
2784: $if $(@expr1073747189 $!@expr1073747190 $assertEquals $(@expr1073747191 "cppcheck-2.8/test/testvalueflow.cpp" $, 2784 $, false $, $testValueOfX_ $(@expr1073747192 "cppcheck-2.8/test/testvalueflow.cpp" $, 2784 $, code@var350 , 2U , 0 $) $) $) { $return ; }
2785: $if $(@expr1073747193 $!@expr1073747194 $assertEquals $(@expr1073747195 "cppcheck-2.8/test/testvalueflow.cpp" $, 2785 $, true $, $testValueOfX_ $(@expr1073747196 "cppcheck-2.8/test/testvalueflow.cpp" $, 2785 $, code@var350 , 3U , 0 $) $) $) { $return ; }
2786: $if $(@expr1073747197 $!@expr1073747198 $assertEquals $(@expr1073747199 "cppcheck-2.8/test/testvalueflow.cpp" $, 2786 $, true $, $testValueOfX_ $(@expr1073747200 "cppcheck-2.8/test/testvalueflow.cpp" $, 2786 $, code@var350 , 4U , 0 $) $) $) { $return ; }
2787:
2788:
2789: code@var350 =@expr1073747201 "void f(int x) {\n    while (x != 3) {}\n    a = x;\n}"
2790:
2791:
2792: ;
2793: $if $(@expr1073747202 $!@expr1073747203 $assertEquals $(@expr1073747204 "cppcheck-2.8/test/testvalueflow.cpp" $, 2793 $, true $, $testValueOfX_ $(@expr1073747205 "cppcheck-2.8/test/testvalueflow.cpp" $, 2793 $, code@var350 , 3U , 3 $) $) $) { $return ; }
2794:
2795: code@var350 =@expr1073747206 "void f(int x) {\n    while (11 != (x = dostuff())) {}\n    a = x;\n}"
2796:
2797:
2798: ;
2799: $if $(@expr1073747207 $!@expr1073747208 $assertEquals $(@expr1073747209 "cppcheck-2.8/test/testvalueflow.cpp" $, 2799 $, true $, $testValueOfX_ $(@expr1073747210 "cppcheck-2.8/test/testvalueflow.cpp" $, 2799 $, code@var350 , 3U , 11 $) $) $) { $return ; }
2800:
2801: code@var350 =@expr1073747211 "void f(int x) {\n    while (11 != (x = dostuff()) && y) {}\n    a = x;\n}"
2802:
2803:
2804: ;
2805: $if $(@expr1073747212 $!@expr1073747213 $assertEquals $(@expr1073747214 "cppcheck-2.8/test/testvalueflow.cpp" $, 2805 $, true $, $testValueOfX_ $(@expr1073747215 "cppcheck-2.8/test/testvalueflow.cpp" $, 2805 $, code@var350 , 3U , 11 $) $) $) { $return ; }
2806:
2807: code@var350 =@expr1073747216 "void f(int x) {\n    while (x = dostuff()) {}\n    a = x;\n}"
2808:
2809:
2810: ;
2811: $if $(@expr1073747217 $!@expr1073747218 $assertEquals $(@expr1073747219 "cppcheck-2.8/test/testvalueflow.cpp" $, 2811 $, true $, $testValueOfX_ $(@expr1073747220 "cppcheck-2.8/test/testvalueflow.cpp" $, 2811 $, code@var350 , 3U , 0 $) $) $) { $return ; }
2812:
2813: code@var350 =@expr1073747221 "void f(const Token *x) {\n    x = x->next();\n    while (x) { x = x->next(); }\n    if (x->str()) {}\n}"
2814:
2815:
2816:
2817: ;
2818: $if $(@expr1073747222 $!@expr1073747223 $assertEquals $(@expr1073747224 "cppcheck-2.8/test/testvalueflow.cpp" $, 2818 $, true $, $testValueOfX_ $(@expr1073747225 "cppcheck-2.8/test/testvalueflow.cpp" $, 2818 $, code@var350 , 4U , 0 $) $) $) { $return ; }
2819:
2820: code@var350 =@expr1073747226 "void f(const Token *x) {\n  while (0 != (x = x->next)) {}\n  x->ab = 0;\n}\n"
2821:
2822:
2823: ;
2824: $if $(@expr1073747227 $!@expr1073747228 $assertEquals $(@expr1073747229 "cppcheck-2.8/test/testvalueflow.cpp" $, 2824 $, true $, $testValueOfX_ $(@expr1073747230 "cppcheck-2.8/test/testvalueflow.cpp" $, 2824 $, code@var350 , 3U , 0 $) $) $) { $return ; }
2825:
2826: code@var350 =@expr1073747231 "void f(const Token* x) {\n  while (0 != (x = x->next)) {}\n  if (x->str) {\n    x = y;\n  }\n}\n"
2827:
|
2830:
2831: ;
2832: $if $(@expr1073747232 $!@expr1073747233 $assertEquals $(@expr1073747234 "cppcheck-2.8/test/testvalueflow.cpp" $, 2832 $, true $, $testValueOfX_ $(@expr1073747235 "cppcheck-2.8/test/testvalueflow.cpp" $, 2832 $, code@var350 , 3U , 0 $) $) $) { $return ; }
2833:
2834:
2835: code@var350 =@expr1073747236 "void f(int x) {\n  if (x == 2) {}\n  if (x > 0)\n    a = x;\n  else\n    b = x;\n}"
2836:
|
2840:
2841: ;
2842: $if $(@expr1073747237 $!@expr1073747238 $assertEquals $(@expr1073747239 "cppcheck-2.8/test/testvalueflow.cpp" $, 2842 $, true $, $testValueOfX_ $(@expr1073747240 "cppcheck-2.8/test/testvalueflow.cpp" $, 2842 $, code@var350 , 4U , 2 $) $) $) { $return ; }
2843: $if $(@expr1073747241 $!@expr1073747242 $assertEquals $(@expr1073747243 "cppcheck-2.8/test/testvalueflow.cpp" $, 2843 $, false $, $testValueOfX_ $(@expr1073747244 "cppcheck-2.8/test/testvalueflow.cpp" $, 2843 $, code@var350 , 6U , 2 $) $) $) { $return ; }
2844:
2845:
2846: code@var350 =@expr1073747245 "void f(int x) {\n  int y = 0;\n  if (x == 7) { y = 1; }\n  if (!y)\n    a = x;\n}"
2847:
|
2850:
2851: ;
2852: $if $(@expr1073747246 $!@expr1073747247 $assertEquals $(@expr1073747248 "cppcheck-2.8/test/testvalueflow.cpp" $, 2852 $, false $, $testValueOfX_ $(@expr1073747249 "cppcheck-2.8/test/testvalueflow.cpp" $, 2852 $, code@var350 , 5U , 7 $) $) $) { $return ; }
2853:
2854: code@var350 =@expr1073747250 "void f(struct X *x) {\n  bool b = TRUE;\n  if(x) { }\n  else\n    b = FALSE;\n  if (b)\n    abc(x->value);\n}\n"
2855:
|
2860:
2861: ;
2862: $if $(@expr1073747251 $!@expr1073747252 $assertEquals $(@expr1073747253 "cppcheck-2.8/test/testvalueflow.cpp" $, 2862 $, false $, $testValueOfX_ $(@expr1073747254 "cppcheck-2.8/test/testvalueflow.cpp" $, 2862 $, code@var350 , 7U , 0 $) $) $) { $return ; }
2863:
2864:
2865: code@var350 =@expr1073747255 "void f(int x) {\n  a = (x != 3 ||\n       x);\n}"
2866:
2867:
2868: ;
2869: $if $(@expr1073747256 $!@expr1073747257 $assertEquals $(@expr1073747258 "cppcheck-2.8/test/testvalueflow.cpp" $, 2869 $, true $, $testValueOfX_ $(@expr1073747259 "cppcheck-2.8/test/testvalueflow.cpp" $, 2869 $, code@var350 , 3U , 3 $) $) $) { $return ; }
2870:
2871: code@var350 =@expr1073747260 "void f(int x) {\n  a = (x == 4 &&\n       x);\n}"
2872:
2873:
2874: ;
2875: $if $(@expr1073747261 $!@expr1073747262 $assertEquals $(@expr1073747263 "cppcheck-2.8/test/testvalueflow.cpp" $, 2875 $, true $, $testValueOfX_ $(@expr1073747264 "cppcheck-2.8/test/testvalueflow.cpp" $, 2875 $, code@var350 , 3U , 4 $) $) $) { $return ; }
2876:
2877:
2878: code@var350 =@expr1073747265 "void f(const Token* x) {\n    if (x) {}\n    for (; x &&\n         x->str() != y; x = x->next()) {}\n}"
2879:
2880:
2881:
2882: ;
2883: $if $(@expr1073747266 $!@expr1073747267 $assertEquals $(@expr1073747268 "cppcheck-2.8/test/testvalueflow.cpp" $, 2883 $, true $, $testValueOfX_ $(@expr1073747269 "cppcheck-2.8/test/testvalueflow.cpp" $, 2883 $, code@var350 , 3U , 0 $) $) $) { $return ; }
2884: $if $(@expr1073747270 $!@expr1073747271 $assertEquals $(@expr1073747272 "cppcheck-2.8/test/testvalueflow.cpp" $, 2884 $, false $, $testValueOfX_ $(@expr1073747273 "cppcheck-2.8/test/testvalueflow.cpp" $, 2884 $, code@var350 , 4U , 0 $) $) $) { $return ; }
2885:
2886: code@var350 =@expr1073747274 "void f(const Token* x) {\n    if (x) {}\n    if (x &&\n        x->str() != y) {}\n}"
2887:
2888:
2889:
2890: ;
2891: $if $(@expr1073747275 $!@expr1073747276 $assertEquals $(@expr1073747277 "cppcheck-2.8/test/testvalueflow.cpp" $, 2891 $, true $, $testValueOfX_ $(@expr1073747278 "cppcheck-2.8/test/testvalueflow.cpp" $, 2891 $, code@var350 , 3U , 0 $) $) $) { $return ; }
2892: $if $(@expr1073747279 $!@expr1073747280 $assertEquals $(@expr1073747281 "cppcheck-2.8/test/testvalueflow.cpp" $, 2892 $, false $, $testValueOfX_ $(@expr1073747282 "cppcheck-2.8/test/testvalueflow.cpp" $, 2892 $, code@var350 , 4U , 0 $) $) $) { $return ; }
2893:
2894:
2895: code@var350 =@expr1073747283 "void f(int x) {\n  if (x == 5) {\n    if (z) return; else return;\n  }\n  a = x;\n}"
2896:
|
2899:
2900: ;
2901: $if $(@expr1073747284 $!@expr1073747285 $assertEquals $(@expr1073747286 "cppcheck-2.8/test/testvalueflow.cpp" $, 2901 $, false $, $testValueOfX_ $(@expr1073747287 "cppcheck-2.8/test/testvalueflow.cpp" $, 2901 $, code@var350 , 5U , 5 $) $) $) { $return ; }
2902:
2903: code@var350 =@expr1073747288 "void f(int x) {\n  if (x == 5) {\n    if (z) continue; else throw e;\n  }\n  a = x;\n}"
2904:
|
2907:
2908: ;
2909: $if $(@expr1073747289 $!@expr1073747290 $assertEquals $(@expr1073747291 "cppcheck-2.8/test/testvalueflow.cpp" $, 2909 $, false $, $testValueOfX_ $(@expr1073747292 "cppcheck-2.8/test/testvalueflow.cpp" $, 2909 $, code@var350 , 5U , 5 $) $) $) { $return ; }
2910:
2911:
2912: code@var350 =@expr1073747293 "void f(float x) {\n  if (x == 0.5) {}\n  a = x;\n}"
2913:
2914:
2915: ;
2916: $if $(@expr1073747294 $!@expr1073747295 $assertEquals $(@expr1073747296 "cppcheck-2.8/test/testvalueflow.cpp" $, 2916 $, false $, $testValueOfX_ $(@expr1073747297 "cppcheck-2.8/test/testvalueflow.cpp" $, 2916 $, code@var350 , 3U , 0 $) $) $) { $return ; }
2917:
2918:
2919: code@var350 =@expr1073747298 "void f() {\n  int x = 1;\n  int *data = &x;\n  if (!x) {\n    calc(data);\n    a = x;\n  }\n}"
2920:
|
2925:
2926: ;
2927: $if $(@expr1073747299 $!@expr1073747300 $assertEquals $(@expr1073747301 "cppcheck-2.8/test/testvalueflow.cpp" $, 2927 $, false $, $testValueOfX_ $(@expr1073747302 "cppcheck-2.8/test/testvalueflow.cpp" $, 2927 $, code@var350 , 6U , 0 $) $) $) { $return ; }
2928:
2929: code@var350 =@expr1073747303 "int* g();\nint f() {\n    int * x;\n    x = g();\n    if (x) { printf(\"\"); }\n    return *x;\n}\n"
2930:
|
2934:
2935: ;
2936: $if $(@expr1073747304 $!@expr1073747305 $assertEquals $(@expr1073747306 "cppcheck-2.8/test/testvalueflow.cpp" $, 2936 $, false $, $testValueOfXKnown_ $(@expr1073747307 "cppcheck-2.8/test/testvalueflow.cpp" $, 2936 $, code@var350 , 6U , 0 $) $) $) { $return ; }
2937: $if $(@expr1073747308 $!@expr1073747309 $assertEquals $(@expr1073747310 "cppcheck-2.8/test/testvalueflow.cpp" $, 2937 $, true $, $testValueOfX_ $(@expr1073747311 "cppcheck-2.8/test/testvalueflow.cpp" $, 2937 $, code@var350 , 6U , 0 $) $) $) { $return ; }
2938:
2939:
2940: code@var350 =@expr1073747312 "void foo(const volatile int &x) {\n    if (x==1) {\n        return x;\n    }}"
2941:
2942:
2943:
2944: ;
2945: $if $(@expr1073747313 $!@expr1073747314 $assertEquals $(@expr1073747315 "cppcheck-2.8/test/testvalueflow.cpp" $, 2945 $, false $, $testValueOfXKnown_ $(@expr1073747316 "cppcheck-2.8/test/testvalueflow.cpp" $, 2945 $, code@var350 , 3U , 1 $) $) $) { $return ; }
2946:
2947: code@var350 =@expr1073747317 "void foo(const std::atomic<int> &x) {\n    if (x==2) {\n        return x;\n    }}"
2948:
2949:
2950:
2951: ;
2952: $if $(@expr1073747318 $!@expr1073747319 $assertEquals $(@expr1073747320 "cppcheck-2.8/test/testvalueflow.cpp" $, 2952 $, false $, $testValueOfXKnown_ $(@expr1073747321 "cppcheck-2.8/test/testvalueflow.cpp" $, 2952 $, code@var350 , 3U , 2 $) $) $) { $return ; }
2953:
2954: code@var350 =@expr1073747322 "int f(int i, int j) {\n    if (i == 0) {\n        if (j < 0)\n            return 0;\n        i = j+1;\n    }\n    int x = i;\n    return x;\n}\n"
2955:
|
2961:
2962: ;
2963: $if $(@expr1073747323 $!@expr1073747324 $assertEquals $(@expr1073747325 "cppcheck-2.8/test/testvalueflow.cpp" $, 2963 $, false $, $testValueOfX_ $(@expr1073747326 "cppcheck-2.8/test/testvalueflow.cpp" $, 2963 $, code@var350 , 8U , 0 $) $) $) { $return ; }
2964:
2965: code@var350 =@expr1073747327 "int f(int i, int j) {\n    if (i == 0) {\n        if (j < 0)\n            return 0;\n        if (j < 0)\n            i = j+1;\n    }\n    int x = i;\n    return x;\n}\n"
2966:
|
2973:
2974: ;
2975: $if $(@expr1073747328 $!@expr1073747329 $assertEquals $(@expr1073747330 "cppcheck-2.8/test/testvalueflow.cpp" $, 2975 $, true $, $testValueOfX_ $(@expr1073747331 "cppcheck-2.8/test/testvalueflow.cpp" $, 2975 $, code@var350 , 9U , 0 $) $) $) { $return ; }
2976:
2977: code@var350 =@expr1073747332 "void g(long& a);\nvoid f(long a) {\n    if (a == 0)\n        return;\n    if (a > 1)\n         g(a);\n    int x = a;\n    return x;\n}\n"
2978:
|
2984:
2985: ;
2986: $if $(@expr1073747333 $!@expr1073747334 $assertEquals $(@expr1073747335 "cppcheck-2.8/test/testvalueflow.cpp" $, 2986 $, false $, $testValueOfXImpossible_ $(@expr1073747336 "cppcheck-2.8/test/testvalueflow.cpp" $, 2986 $, code@var350 , 8U , 0 $) $) $) { $return ; }
2987:
2988: code@var350 =@expr1073747337 "int foo(int n) {\n    if( n>= 8 ) {\n        while(true) {\n            n -= 8;\n            if( n < 8 )\n                break;\n        }\n        int x = n == 0;\n        return x;\n    }\n}\n"
2989:
|
2997:
2998: ;
2999: $if $(@expr1073747338 $!@expr1073747339 $assertEquals $(@expr1073747340 "cppcheck-2.8/test/testvalueflow.cpp" $, 2999 $, false $, $testValueOfXKnown_ $(@expr1073747341 "cppcheck-2.8/test/testvalueflow.cpp" $, 2999 $, code@var350 , 9U , 0 $) $) $) { $return ; }
3000:
3001: code@var350 =@expr1073747342 "bool c();\nlong f() {\n    bool stop = false;\n    while (!stop) {\n        if (c())\n            stop = true;\n        break;\n    }\n    int x = !stop;\n    return x;\n}\n"
3002:
|
3010:
3011: ;
3012: $if $(@expr1073747343 $!@expr1073747344 $assertEquals $(@expr1073747345 "cppcheck-2.8/test/testvalueflow.cpp" $, 3012 $, false $, $testValueOfXImpossible_ $(@expr1073747346 "cppcheck-2.8/test/testvalueflow.cpp" $, 3012 $, code@var350 , 10U , 1 $) $) $) { $return ; }
3013: $if $(@expr1073747347 $!@expr1073747348 $assertEquals $(@expr1073747349 "cppcheck-2.8/test/testvalueflow.cpp" $, 3013 $, false $, $testValueOfXKnown_ $(@expr1073747350 "cppcheck-2.8/test/testvalueflow.cpp" $, 3013 $, code@var350 , 10U , 0 $) $) $) { $return ; }
3014:
3015: code@var350 =@expr1073747351 "int f(int a, int b) {\n  if (!a && !b)\n    return;\n  if ((!a && b) || (a && !b))\n    return;\n  int x = a;\n  return x;\n}\n"
3016:
|
3021:
3022: ;
3023: $if $(@expr1073747352 $!@expr1073747353 $assertEquals $(@expr1073747354 "cppcheck-2.8/test/testvalueflow.cpp" $, 3023 $, false $, $testValueOfX_ $(@expr1073747355 "cppcheck-2.8/test/testvalueflow.cpp" $, 3023 $, code@var350 , 7U , 0 $) $) $) { $return ; }
3024:
3025: code@var350 =@expr1073747356 "void f(int x, int y) {\n    if (x && y)\n        return;\n    int a = x;\n}\n"
3026:
3027:
3028:
3029: ;
3030: $if $(@expr1073747357 $!@expr1073747358 $assertEquals $(@expr1073747359 "cppcheck-2.8/test/testvalueflow.cpp" $, 3030 $, true $, $testValueOfX_ $(@expr1073747360 "cppcheck-2.8/test/testvalueflow.cpp" $, 3030 $, code@var350 , 4U , 0 $) $) $) { $return ; }
3031: $if $(@expr1073747361 $!@expr1073747362 $assertEquals $(@expr1073747363 "cppcheck-2.8/test/testvalueflow.cpp" $, 3031 $, false $, $testValueOfXKnown_ $(@expr1073747364 "cppcheck-2.8/test/testvalueflow.cpp" $, 3031 $, code@var350 , 4U , 0 $) $) $) { $return ; }
3032: $if $(@expr1073747365 $!@expr1073747366 $assertEquals $(@expr1073747367 "cppcheck-2.8/test/testvalueflow.cpp" $, 3032 $, false $, $testValueOfXImpossible_ $(@expr1073747368 "cppcheck-2.8/test/testvalueflow.cpp" $, 3032 $, code@var350 , 4U , 1 $) $) $) { $return ; }
3033:
3034: code@var350 =@expr1073747369 "int f(std::vector<int> a, std::vector<int> b) {\n    if (a.empty() && b.empty())\n        return 0;\n    bool x = a.empty() && !b.empty();\n    return x;\n}\n"
3035:
|
3038:
3039: ;
3040: $if $(@expr1073747370 $!@expr1073747371 $assertEquals $(@expr1073747372 "cppcheck-2.8/test/testvalueflow.cpp" $, 3040 $, false $, $testValueOfXKnown_ $(@expr1073747373 "cppcheck-2.8/test/testvalueflow.cpp" $, 3040 $, code@var350 , 5U , 0 $) $) $) { $return ; }
3041: $if $(@expr1073747374 $!@expr1073747375 $assertEquals $(@expr1073747376 "cppcheck-2.8/test/testvalueflow.cpp" $, 3041 $, false $, $testValueOfXKnown_ $(@expr1073747377 "cppcheck-2.8/test/testvalueflow.cpp" $, 3041 $, code@var350 , 5U , 1 $) $) $) { $return ; }
3042: $if $(@expr1073747378 $!@expr1073747379 $assertEquals $(@expr1073747380 "cppcheck-2.8/test/testvalueflow.cpp" $, 3042 $, false $, $testValueOfXImpossible_ $(@expr1073747381 "cppcheck-2.8/test/testvalueflow.cpp" $, 3042 $, code@var350 , 5U , 0 $) $) $) { $return ; }
3043: $if $(@expr1073747382 $!@expr1073747383 $assertEquals $(@expr1073747384 "cppcheck-2.8/test/testvalueflow.cpp" $, 3043 $, false $, $testValueOfXImpossible_ $(@expr1073747385 "cppcheck-2.8/test/testvalueflow.cpp" $, 3043 $, code@var350 , 5U , 1 $) $) $) { $return ; }
3044:
3045: code@var350 =@expr1073747386 "auto f(int i) {\n    if (i == 0) return;\n    auto x = !i;\n    return x;\n}\n"
3046:
3047:
3048:
3049: ;
3050: $if $(@expr1073747387 $!@expr1073747388 $assertEquals $(@expr1073747389 "cppcheck-2.8/test/testvalueflow.cpp" $, 3050 $, true $, $testValueOfXKnown_ $(@expr1073747390 "cppcheck-2.8/test/testvalueflow.cpp" $, 3050 $, code@var350 , 4U , 0 $) $) $) { $return ; }
3051:
3052: code@var350 =@expr1073747391 "auto f(int i) {\n    if (i == 1) return;\n    auto x = !i;\n    return x;\n}\n"
3053:
3054:
3055:
3056: ;
3057: $if $(@expr1073747392 $!@expr1073747393 $assertEquals $(@expr1073747394 "cppcheck-2.8/test/testvalueflow.cpp" $, 3057 $, false $, $testValueOfXImpossible_ $(@expr1073747395 "cppcheck-2.8/test/testvalueflow.cpp" $, 3057 $, code@var350 , 4U , 0 $) $) $) { $return ; }
3058:
3059: code@var350 =@expr1073747396 "int g(int x) {\n    switch (x) {\n    case 1:\n        return 1;\n    default:\n        return 2;\n    }\n}\nvoid f(int x) {\n    if (x == 3)\n        x = g(0);\n    int a = x;\n}\n"
3060:
|
3070:
3071: ;
3072: $if $(@expr1073747397 $!@expr1073747398 $assertEquals $(@expr1073747399 "cppcheck-2.8/test/testvalueflow.cpp" $, 3072 $, false $, $testValueOfX_ $(@expr1073747400 "cppcheck-2.8/test/testvalueflow.cpp" $, 3072 $, code@var350 , 12U , 3 $) $) $) { $return ; }
3073:
3074: code@var350 =@expr1073747401 "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return (long long)y << (long long)x;\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
3075:
|
3084:
3085: ;
3086: $if $(@expr1073747402 $!@expr1073747403 $assertEquals $(@expr1073747404 "cppcheck-2.8/test/testvalueflow.cpp" $, 3086 $, true $, $testValueOfX_ $(@expr1073747405 "cppcheck-2.8/test/testvalueflow.cpp" $, 3086 $, code@var350 , 6U , 63 $) $) $) { $return ; }
3087: $if $(@expr1073747406 $!@expr1073747407 $assertEquals $(@expr1073747408 "cppcheck-2.8/test/testvalueflow.cpp" $, 3087 $, true $, $testValueOfXImpossible_ $(@expr1073747409 "cppcheck-2.8/test/testvalueflow.cpp" $, 3087 $, code@var350 , 6U , 64 $) $) $) { $return ; }
3088:
3089: code@var350 =@expr1073747410 "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return long long(y) << long long(x);\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
3090:
|
3099:
3100: ;
3101: $if $(@expr1073747411 $!@expr1073747412 $assertEquals $(@expr1073747413 "cppcheck-2.8/test/testvalueflow.cpp" $, 3101 $, true $, $testValueOfX_ $(@expr1073747414 "cppcheck-2.8/test/testvalueflow.cpp" $, 3101 $, code@var350 , 6U , 63 $) $) $) { $return ; }
3102: $if $(@expr1073747415 $!@expr1073747416 $assertEquals $(@expr1073747417 "cppcheck-2.8/test/testvalueflow.cpp" $, 3102 $, true $, $testValueOfXImpossible_ $(@expr1073747418 "cppcheck-2.8/test/testvalueflow.cpp" $, 3102 $, code@var350 , 6U , 64 $) $) $) { $return ; }
3103:
3104: code@var350 =@expr1073747419 "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return long long{y} << long long{x};\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
3105:
|
3114:
3115: ;
3116: $if $(@expr1073747420 $!@expr1073747421 $assertEquals $(@expr1073747422 "cppcheck-2.8/test/testvalueflow.cpp" $, 3116 $, true $, $testValueOfX_ $(@expr1073747423 "cppcheck-2.8/test/testvalueflow.cpp" $, 3116 $, code@var350 , 6U , 63 $) $) $) { $return ; }
3117: $if $(@expr1073747424 $!@expr1073747425 $assertEquals $(@expr1073747426 "cppcheck-2.8/test/testvalueflow.cpp" $, 3117 $, true $, $testValueOfXImpossible_ $(@expr1073747427 "cppcheck-2.8/test/testvalueflow.cpp" $, 3117 $, code@var350 , 6U , 64 $) $) $) { $return ; }
3118:
3119: code@var350 =@expr1073747428 "int g(int x) { throw 0; }\nvoid f(int x) {\n    if (x == 3)\n        x = g(0);\n    int a = x;\n}\n"
3120:
|
3123:
3124: ;
3125: $if $(@expr1073747429 $!@expr1073747430 $assertEquals $(@expr1073747431 "cppcheck-2.8/test/testvalueflow.cpp" $, 3125 $, true $, $testValueOfXImpossible_ $(@expr1073747432 "cppcheck-2.8/test/testvalueflow.cpp" $, 3125 $, code@var350 , 5U , 3 $) $) $) { $return ; }
3126:
3127: code@var350 =@expr1073747433 "struct a {\n  a *b() const;\n  void c();\n};\nvoid e(a *x) {\n  while (x && x->b())\n    x = x->b();\n  x->c();\n}\n"
3128:
|
3134:
3135: ;
3136: $if $(@expr1073747434 $!@expr1073747435 $assertEquals $(@expr1073747436 "cppcheck-2.8/test/testvalueflow.cpp" $, 3136 $, true $, $testValueOfX_ $(@expr1073747437 "cppcheck-2.8/test/testvalueflow.cpp" $, 3136 $, code@var350 , 8U , 0 $) $) $) { $return ; }
3137:
3138: code@var350 =@expr1073747438 "struct a {\n  a *b();\n  void c();\n};\nvoid e(a *x) {\n  while (x && x->b())\n    x = x->b();\n  x->c();\n}\n"
3139:
|
3145:
3146: ;
3147: $if $(@expr1073747439 $!@expr1073747440 $assertEquals $(@expr1073747441 "cppcheck-2.8/test/testvalueflow.cpp" $, 3147 $, true $, $testValueOfX_ $(@expr1073747442 "cppcheck-2.8/test/testvalueflow.cpp" $, 3147 $, code@var350 , 8U , 0 $) $) $) { $return ; }
3148:
3149: code@var350 =@expr1073747443 "constexpr int f();\nint g() {\n    if (f() == 1) {\n        int x = f();\n        return x;\n    }\n    return 0;\n}\n"
3150:
|
3155:
3156: ;
3157: $if $(@expr1073747444 $!@expr1073747445 $assertEquals $(@expr1073747446 "cppcheck-2.8/test/testvalueflow.cpp" $, 3157 $, true $, $testValueOfXKnown_ $(@expr1073747447 "cppcheck-2.8/test/testvalueflow.cpp" $, 3157 $, code@var350 , 5U , 1 $) $) $) { $return ; }
3158:
3159: code@var350 =@expr1073747448 "int f(int x) {\n    if (x == 1) {\n        for(int i=0;i<1;i++) {\n            if (x == 1)\n                continue;\n        }\n    }\n    return x;\n}\n"
3160:
|
3166:
3167: ;
3168: $if $(@expr1073747449 $!@expr1073747450 $assertEquals $(@expr1073747451 "cppcheck-2.8/test/testvalueflow.cpp" $, 3168 $, true $, $testValueOfX_ $(@expr1073747452 "cppcheck-2.8/test/testvalueflow.cpp" $, 3168 $, code@var350 , 8U , 1 $) $) $) { $return ; }
3169: $if $(@expr1073747453 $!@expr1073747454 $assertEquals $(@expr1073747455 "cppcheck-2.8/test/testvalueflow.cpp" $, 3169 $, false $, $testValueOfXImpossible_ $(@expr1073747456 "cppcheck-2.8/test/testvalueflow.cpp" $, 3169 $, code@var350 , 8U , 1 $) $) $) { $return ; }
3170:
3171: code@var350 =@expr1073747457 "void g(int i) {\n    if (i == 1)\n        return;\n    abort();\n}\nint f(int x) {\n    if (x != 0)\n        g(x);\n    return x;\n}\n"
3172:
|
3179:
3180: ;
3181: $if $(@expr1073747458 $!@expr1073747459 $assertEquals $(@expr1073747460 "cppcheck-2.8/test/testvalueflow.cpp" $, 3181 $, false $, $testValueOfXKnown_ $(@expr1073747461 "cppcheck-2.8/test/testvalueflow.cpp" $, 3181 $, code@var350 , 9U , 0 $) $) $) { $return ; }
3182: $if $(@expr1073747462 $!@expr1073747463 $assertEquals $(@expr1073747464 "cppcheck-2.8/test/testvalueflow.cpp" $, 3182 $, true $, $testValueOfX_ $(@expr1073747465 "cppcheck-2.8/test/testvalueflow.cpp" $, 3182 $, code@var350 , 9U , 0 $) $) $) { $return ; }
3183: }
3184:
3185: void valueFlowAfterConditionTernary ( )
3186: {
3187: const char * code@var351 ;
3188:
3189: code@var351 =@expr1073747466 "auto f(int x) {\n    return x == 3 ?\n        x :\n        0;\n}\n"
3190:
3191:
3192:
3193: ;
3194: $if $(@expr1073747467 $!@expr1073747468 $assertEquals $(@expr1073747469 "cppcheck-2.8/test/testvalueflow.cpp" $, 3194 $, true $, $testValueOfX_ $(@expr1073747470 "cppcheck-2.8/test/testvalueflow.cpp" $, 3194 $, code@var351 , 3U , 3 $) $) $) { $return ; }
3195:
3196: code@var351 =@expr1073747471 "auto f(int x) {\n    return x != 3 ?\n        0 :\n        x;\n}\n"
3197:
3198:
3199:
3200: ;
3201: $if $(@expr1073747472 $!@expr1073747473 $assertEquals $(@expr1073747474 "cppcheck-2.8/test/testvalueflow.cpp" $, 3201 $, true $, $testValueOfX_ $(@expr1073747475 "cppcheck-2.8/test/testvalueflow.cpp" $, 3201 $, code@var351 , 4U , 3 $) $) $) { $return ; }
3202:
3203: code@var351 =@expr1073747476 "auto f(int x) {\n    return !(x == 3) ?\n        0 :\n        x;\n}\n"
3204:
3205:
3206:
3207: ;
3208: $if $(@expr1073747477 $!@expr1073747478 $assertEquals $(@expr1073747479 "cppcheck-2.8/test/testvalueflow.cpp" $, 3208 $, true $, $testValueOfX_ $(@expr1073747480 "cppcheck-2.8/test/testvalueflow.cpp" $, 3208 $, code@var351 , 4U , 3 $) $) $) { $return ; }
3209:
3210: code@var351 =@expr1073747481 "auto f(int* x) {\n    return x ?\n        x :\n        0;\n}\n"
3211:
3212:
3213:
3214: ;
3215: $if $(@expr1073747482 $!@expr1073747483 $assertEquals $(@expr1073747484 "cppcheck-2.8/test/testvalueflow.cpp" $, 3215 $, false $, $testValueOfX_ $(@expr1073747485 "cppcheck-2.8/test/testvalueflow.cpp" $, 3215 $, code@var351 , 3U , 0 $) $) $) { $return ; }
3216:
3217: code@var351 =@expr1073747486 "auto f(int* x) {\n    return x ?\n        0 :\n        x;\n}\n"
3218:
3219:
3220:
3221: ;
3222: $if $(@expr1073747487 $!@expr1073747488 $assertEquals $(@expr1073747489 "cppcheck-2.8/test/testvalueflow.cpp" $, 3222 $, true $, $testValueOfX_ $(@expr1073747490 "cppcheck-2.8/test/testvalueflow.cpp" $, 3222 $, code@var351 , 4U , 0 $) $) $) { $return ; }
3223:
3224: code@var351 =@expr1073747491 "bool g(int);\nauto f(int* x) {\n    if (!g(x ?\n        *x :\n        0)) {}\n}\n"
3225:
|
3228:
3229: ;
3230: $if $(@expr1073747492 $!@expr1073747493 $assertEquals $(@expr1073747494 "cppcheck-2.8/test/testvalueflow.cpp" $, 3230 $, false $, $testValueOfX_ $(@expr1073747495 "cppcheck-2.8/test/testvalueflow.cpp" $, 3230 $, code@var351 , 4U , 0 $) $) $) { $return ; }
3231: }
3232:
3233: void valueFlowAfterConditionExpr ( ) {
3234: const char * code@var352 ;
3235:
3236: code@var352 =@expr1073747496 "void f(int* p) {\n    if (p[0] == 123) {\n        int x = p[0];\n        int a = x;\n    }\n}"
3237:
|
3240:
3241: ;
3242: $if $(@expr1073747497 $!@expr1073747498 $assertEquals $(@expr1073747499 "cppcheck-2.8/test/testvalueflow.cpp" $, 3242 $, true $, $testValueOfX_ $(@expr1073747500 "cppcheck-2.8/test/testvalueflow.cpp" $, 3242 $, code@var352 , 4U , 123 $) $) $) { $return ; }
3243:
3244: code@var352 =@expr1073747501 "void f(int y) {\n    if (y+1 == 123) {\n        int x = y+1;\n        int a = x;\n    }\n}"
3245:
|
3248:
3249: ;
3250: $if $(@expr1073747502 $!@expr1073747503 $assertEquals $(@expr1073747504 "cppcheck-2.8/test/testvalueflow.cpp" $, 3250 $, true $, $testValueOfX_ $(@expr1073747505 "cppcheck-2.8/test/testvalueflow.cpp" $, 3250 $, code@var352 , 4U , 123 $) $) $) { $return ; }
3251:
3252: code@var352 =@expr1073747506 "void f(int y) {\n    if (y+1 == 123) {\n        int x = y+2;\n        int a = x;\n    }\n}"
3253:
|
3256:
3257: ;
3258: $if $(@expr1073747507 $!@expr1073747508 $assertEquals $(@expr1073747509 "cppcheck-2.8/test/testvalueflow.cpp" $, 3258 $, true $, $testValueOfX_ $(@expr1073747510 "cppcheck-2.8/test/testvalueflow.cpp" $, 3258 $, code@var352 , 4U , 124 $) $) $) { $return ; }
3259:
3260: code@var352 =@expr1073747511 "void f(int y, int z) {\n    if (y+z == 123) {\n        int x = y+z;\n        int a = x;\n    }\n}"
3261:
|
3264:
3265: ;
3266: $if $(@expr1073747512 $!@expr1073747513 $assertEquals $(@expr1073747514 "cppcheck-2.8/test/testvalueflow.cpp" $, 3266 $, true $, $testValueOfX_ $(@expr1073747515 "cppcheck-2.8/test/testvalueflow.cpp" $, 3266 $, code@var352 , 4U , 123 $) $) $) { $return ; }
3267:
3268: code@var352 =@expr1073747516 "void f(int y, int z) {\n    if (y+z == 123) {\n        y++;\n        int x = y+z;\n        int a = x;\n    }\n}"
3269:
|
3273:
3274: ;
3275: $if $(@expr1073747517 $!@expr1073747518 $assertEquals $(@expr1073747519 "cppcheck-2.8/test/testvalueflow.cpp" $, 3275 $, false $, $testValueOfX_ $(@expr1073747520 "cppcheck-2.8/test/testvalueflow.cpp" $, 3275 $, code@var352 , 5U , 123 $) $) $) { $return ; }
3276:
3277: code@var352 =@expr1073747521 "void f(int y) {\n    if (y++ == 123) {\n        int x = y++;\n        int a = x;\n    }\n}"
3278:
|
3281:
3282: ;
3283: $if $(@expr1073747522 $!@expr1073747523 $assertEquals $(@expr1073747524 "cppcheck-2.8/test/testvalueflow.cpp" $, 3283 $, false $, $testValueOfX_ $(@expr1073747525 "cppcheck-2.8/test/testvalueflow.cpp" $, 3283 $, code@var352 , 4U , 123 $) $) $) { $return ; }
3284: $if $(@expr1073747526 $!@expr1073747527 $assertEquals $(@expr1073747528 "cppcheck-2.8/test/testvalueflow.cpp" $, 3284 $, false $, $testValueOfX_ $(@expr1073747529 "cppcheck-2.8/test/testvalueflow.cpp" $, 3284 $, code@var352 , 4U , 124 $) $) $) { $return ; }
3285: $if $(@expr1073747530 $!@expr1073747531 $assertEquals $(@expr1073747532 "cppcheck-2.8/test/testvalueflow.cpp" $, 3285 $, false $, $testValueOfX_ $(@expr1073747533 "cppcheck-2.8/test/testvalueflow.cpp" $, 3285 $, code@var352 , 4U , 125 $) $) $) { $return ; }
3286:
3287: code@var352 =@expr1073747534 "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (a.g()) {\n        bool x = a.g();\n        bool a = x;\n    }\n}\n"
3288:
|
3294:
3295: ;
3296: $if $(@expr1073747535 $!@expr1073747536 $assertEquals $(@expr1073747537 "cppcheck-2.8/test/testvalueflow.cpp" $, 3296 $, false $, $testValueOfXKnown_ $(@expr1073747538 "cppcheck-2.8/test/testvalueflow.cpp" $, 3296 $, code@var352 , 7U , 0 $) $) $) { $return ; }
3297:
3298: code@var352 =@expr1073747539 "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (a.g()) {\n        bool x = !a.g();\n        bool a = x;\n    }\n}\n"
3299:
|
3305:
3306: ;
3307: $if $(@expr1073747540 $!@expr1073747541 $assertEquals $(@expr1073747542 "cppcheck-2.8/test/testvalueflow.cpp" $, 3307 $, true $, $testValueOfXKnown_ $(@expr1073747543 "cppcheck-2.8/test/testvalueflow.cpp" $, 3307 $, code@var352 , 7U , 0 $) $) $) { $return ; }
3308:
3309: code@var352 =@expr1073747544 "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (!a.g()) {\n        bool x = a.g();\n        bool a = x;\n    }\n}\n"
3310:
|
3316:
3317: ;
3318: $if $(@expr1073747545 $!@expr1073747546 $assertEquals $(@expr1073747547 "cppcheck-2.8/test/testvalueflow.cpp" $, 3318 $, true $, $testValueOfXKnown_ $(@expr1073747548 "cppcheck-2.8/test/testvalueflow.cpp" $, 3318 $, code@var352 , 7U , 0 $) $) $) { $return ; }
3319:
3320: code@var352 =@expr1073747549 "void f(std::vector<int> v) {\n    if (v.size() == 3) {\n        if (v.size() == 1) {\n            int x = 1;\n            int a = x;\n        }\n    }\n}\n"
3321:
|
3326:
3327: ;
3328: $if $(@expr1073747550 $!@expr1073747551 $assertEquals $(@expr1073747552 "cppcheck-2.8/test/testvalueflow.cpp" $, 3328 $, true $, $testValueOfXKnown_ $(@expr1073747553 "cppcheck-2.8/test/testvalueflow.cpp" $, 3328 $, code@var352 , 5U , 1 $) $) $) { $return ; }
3329: }
3330:
3331: void valueFlowAfterConditionSeveralNot ( ) {
3332: const char * code@var353 ;
3333:
3334: code@var353 =@expr1073747554 "int f(int x, int y) {\n    if (x!=0) {}\n      return y/x;\n}"
3335:
3336:
3337: ;
3338: $if $(@expr1073747555 $!@expr1073747556 $assertEquals $(@expr1073747557 "cppcheck-2.8/test/testvalueflow.cpp" $, 3338 $, true $, $testValueOfX_ $(@expr1073747558 "cppcheck-2.8/test/testvalueflow.cpp" $, 3338 $, code@var353 , 3U , 0 $) $) $) { $return ; }
3339:
3340: code@var353 =@expr1073747559 "int f(int x, int y) {\n    if (!!(x != 0)) {\n      return y/x;\n}\n}"
3341:
3342:
3343:
3344: ;
3345: $if $(@expr1073747560 $!@expr1073747561 $assertEquals $(@expr1073747562 "cppcheck-2.8/test/testvalueflow.cpp" $, 3345 $, false $, $testValueOfX_ $(@expr1073747563 "cppcheck-2.8/test/testvalueflow.cpp" $, 3345 $, code@var353 , 3U , 0 $) $) $) { $return ; }
3346:
3347: code@var353 =@expr1073747564 "int f(int x, int y) {\n    if (!!!(x != 0)) {\n      return y/x;\n}\n}"
3348:
3349:
3350:
3351: ;
3352: $if $(@expr1073747565 $!@expr1073747566 $assertEquals $(@expr1073747567 "cppcheck-2.8/test/testvalueflow.cpp" $, 3352 $, true $, $testValueOfX_ $(@expr1073747568 "cppcheck-2.8/test/testvalueflow.cpp" $, 3352 $, code@var353 , 3U , 0 $) $) $) { $return ; }
3353:
3354: code@var353 =@expr1073747569 "int f(int x, int y) {\n    if (!!!!(x != 0)) {\n      return y/x;\n}\n}"
3355:
3356:
3357:
3358: ;
3359: $if $(@expr1073747570 $!@expr1073747571 $assertEquals $(@expr1073747572 "cppcheck-2.8/test/testvalueflow.cpp" $, 3359 $, false $, $testValueOfX_ $(@expr1073747573 "cppcheck-2.8/test/testvalueflow.cpp" $, 3359 $, code@var353 , 3U , 0 $) $) $) { $return ; }
3360: }
3361:
3362: void valueFlowForwardCompoundAssign ( ) {
3363: const char * code@var354 ;
3364:
3365: code@var354 =@expr1073747574 "void f() {\n    int x = 123;\n    x += 43;\n    return x;\n}"
3366:
3367:
3368:
3369: ;
3370: $if $(@expr1073747575 $!@expr1073747576 $assertEquals $(@expr1073747577 "cppcheck-2.8/test/testvalueflow.cpp" $, 3370 $, true $, $testValueOfX_ $(@expr1073747578 "cppcheck-2.8/test/testvalueflow.cpp" $, 3370 $, code@var354 , 4U , 166 $) $) $) { $return ; }
3371: $if $(@expr1073747579 $!@expr1073747580 $assertEquals $(@expr1073747581 "cppcheck-2.8/test/testvalueflow.cpp" $, 3371 $, "2,Assignment 'x=123', assigned value is 123\n3,Compound assignment '+=', assigned value is 166\n" $, $getErrorPathForX_ $(@expr1073747582 code@var354 $, 4U $, "cppcheck-2.8/test/testvalueflow.cpp" $, 3371 $) $) $) { $return
3372:
3373: ; }
3374:
3375: code@var354 =@expr1073747583 "void f() {\n    int x = 123;\n    x /= 0;\n    return x;\n}"
3376:
3377:
3378:
3379: ;
3380: $if $(@expr1073747584 $!@expr1073747585 $assertEquals $(@expr1073747586 "cppcheck-2.8/test/testvalueflow.cpp" $, 3380 $, false $, $testValueOfX_ $(@expr1073747587 "cppcheck-2.8/test/testvalueflow.cpp" $, 3380 $, code@var354 , 4U , 123 $) $) $) { $return ; }
3381:
3382: code@var354 =@expr1073747588 "void f() {\n    float x = 123.45;\n    x += 67;\n    return x;\n}"
3383:
3384:
3385:
3386: ;
3387: $if $(@expr1073747589 $!@expr1073747590 $assertEquals $(@expr1073747591 "cppcheck-2.8/test/testvalueflow.cpp" $, 3387 $, true $, $testValueOfX_ $(@expr1073747592 "cppcheck-2.8/test/testvalueflow.cpp" $, 3387 $, code@var354 , 4U , 123.45F +@expr1073747593 67 , 0.01F $) $) $) { $return ; }
3388:
3389: code@var354 =@expr1073747594 "void f() {\n    int x = 123;\n    x >>= 1;\n    return x;\n}"
3390:
3391:
3392:
3393: ;
3394: $if $(@expr1073747595 $!@expr1073747596 $assertEquals $(@expr1073747597 "cppcheck-2.8/test/testvalueflow.cpp" $, 3394 $, true $, $testValueOfX_ $(@expr1073747598 "cppcheck-2.8/test/testvalueflow.cpp" $, 3394 $, code@var354 , 4U , 61 $) $) $) { $return ; }
3395:
3396: code@var354 =@expr1073747599 "void f() {\n    int x = 123;\n    x <<= 1;\n    return x;\n}"
3397:
3398:
3399:
3400: ;
3401: $if $(@expr1073747600 $!@expr1073747601 $assertEquals $(@expr1073747602 "cppcheck-2.8/test/testvalueflow.cpp" $, 3401 $, true $, $testValueOfX_ $(@expr1073747603 "cppcheck-2.8/test/testvalueflow.cpp" $, 3401 $, code@var354 , 4U , 246 $) $) $) { $return ; }
3402: }
3403:
3404: void valueFlowForwardCorrelatedVariables ( ) {
3405: const char * code@var355 ;
3406:
3407: code@var355 =@expr1073747604 "void f(int x = 0) {\n  bool zero(x==0);\n  if (zero) a = x;\n  else b = x;\n}"
3408:
3409:
3410:
3411: ;
3412: $if $(@expr1073747605 $!@expr1073747606 $assertEquals $(@expr1073747607 "cppcheck-2.8/test/testvalueflow.cpp" $, 3412 $, true $, $testValueOfX_ $(@expr1073747608 "cppcheck-2.8/test/testvalueflow.cpp" $, 3412 $, code@var355 , 3U , 0 $) $) $) { $return ; }
3413: $if $(@expr1073747609 $!@expr1073747610 $assertEquals $(@expr1073747611 "cppcheck-2.8/test/testvalueflow.cpp" $, 3413 $, false $, $testValueOfX_ $(@expr1073747612 "cppcheck-2.8/test/testvalueflow.cpp" $, 3413 $, code@var355 , 4U , 0 $) $) $) { $return ; }
3414:
3415: code@var355 =@expr1073747613 "int g();\nint f(bool i, bool j) {\n    if (i && j) {}\n    else {\n        int x = 0;\n        if (i)\n            x = g();\n        return x;\n    }\n    return 0;\n}\n"
3416:
|
3424:
3425: ;
3426: $if $(@expr1073747614 $!@expr1073747615 $assertEquals $(@expr1073747616 "cppcheck-2.8/test/testvalueflow.cpp" $, 3426 $, false $, $testValueOfXKnown_ $(@expr1073747617 "cppcheck-2.8/test/testvalueflow.cpp" $, 3426 $, code@var355 , 8U , 0 $) $) $) { $return ; }
3427: $if $(@expr1073747618 $!@expr1073747619 $assertEquals $(@expr1073747620 "cppcheck-2.8/test/testvalueflow.cpp" $, 3427 $, true $, $testValueOfX_ $(@expr1073747621 "cppcheck-2.8/test/testvalueflow.cpp" $, 3427 $, code@var355 , 8U , 0 $) $) $) { $return ; }
3428: }
3429:
3430: void valueFlowForwardModifiedVariables ( ) {
3431: const char * code@var356 ;
3432:
3433: code@var356 =@expr1073747622 "void f(bool b) {\n  int x = 0;\n  if (b) x = 1;\n  else b = x;\n}"
3434:
3435:
3436:
3437: ;
3438: $if $(@expr1073747623 $!@expr1073747624 $assertEquals $(@expr1073747625 "cppcheck-2.8/test/testvalueflow.cpp" $, 3438 $, true $, $testValueOfXKnown_ $(@expr1073747626 "cppcheck-2.8/test/testvalueflow.cpp" $, 3438 $, code@var356 , 4U , 0 $) $) $) { $return ; }
3439:
3440: code@var356 =@expr1073747627 "void f(int i) {\n    int x = 0;\n    if (i == 0)\n        x = 1;\n    else if (!x && i == 1)\n        int b = x;\n}\n"
3441:
|
3445:
3446: ;
3447: $if $(@expr1073747628 $!@expr1073747629 $assertEquals $(@expr1073747630 "cppcheck-2.8/test/testvalueflow.cpp" $, 3447 $, true $, $testValueOfXKnown_ $(@expr1073747631 "cppcheck-2.8/test/testvalueflow.cpp" $, 3447 $, code@var356 , 5U , 0 $) $) $) { $return ; }
3448: $if $(@expr1073747632 $!@expr1073747633 $assertEquals $(@expr1073747634 "cppcheck-2.8/test/testvalueflow.cpp" $, 3448 $, true $, $testValueOfXKnown_ $(@expr1073747635 "cppcheck-2.8/test/testvalueflow.cpp" $, 3448 $, code@var356 , 6U , 0 $) $) $) { $return ; }
3449: }
3450:
3451: void valueFlowForwardFunction ( ) {
3452: const char * code@var357 ;
3453:
3454: code@var357 =@expr1073747636 "class C {\npublic:\n  C(int &i);\n};\nint f() {\n  int x=1;\n  C c(x);\n  return x;\n}"
3455:
|
3461:
3462: ;
3463: $if $(@expr1073747637 $!@expr1073747638 $assertEquals $(@expr1073747639 "cppcheck-2.8/test/testvalueflow.cpp" $, 3463 $, false $, $testValueOfX_ $(@expr1073747640 "cppcheck-2.8/test/testvalueflow.cpp" $, 3463 $, code@var357 , 8U , 1 $) $) $) { $return ; }
3464:
3465: code@var357 =@expr1073747641 "class C {\npublic:\n  C(const int &i);\n};\nint f() {\n  int x=1;\n  C c(x);\n  return x;\n}"
3466:
|
3472:
3473: ;
3474: $if $(@expr1073747642 $!@expr1073747643 $assertEquals $(@expr1073747644 "cppcheck-2.8/test/testvalueflow.cpp" $, 3474 $, true $, $testValueOfX_ $(@expr1073747645 "cppcheck-2.8/test/testvalueflow.cpp" $, 3474 $, code@var357 , 8U , 1 $) $) $) { $return ; }
3475:
3476: code@var357 =@expr1073747646 "int f(int *);\nint g() {\n  const int a = 1;\n  int x = 11;\n  c = (a && f(&x));\n  if (x == 42) {}\n}"
3477:
|
3481:
3482: ;
3483: $if $(@expr1073747647 $!@expr1073747648 $assertEquals $(@expr1073747649 "cppcheck-2.8/test/testvalueflow.cpp" $, 3483 $, false $, $testValueOfX_ $(@expr1073747650 "cppcheck-2.8/test/testvalueflow.cpp" $, 3483 $, code@var357 , 6U , 11 $) $) $) { $return ; }
3484:
3485: code@var357 =@expr1073747651 "void f() {\n    int x = 1;\n    exit(x);\n}\n"
3486:
3487:
3488: ;
3489: $if $(@expr1073747652 $!@expr1073747653 $assertEquals $(@expr1073747654 "cppcheck-2.8/test/testvalueflow.cpp" $, 3489 $, true $, $testValueOfXKnown_ $(@expr1073747655 "cppcheck-2.8/test/testvalueflow.cpp" $, 3489 $, code@var357 , 3U , 1 $) $) $) { $return ; }
3490:
3491: code@var357 =@expr1073747656 "void f(jmp_buf env) {\n    int x = 1;\n    longjmp(env, x);\n}\n"
3492:
3493:
3494: ;
3495: $if $(@expr1073747657 $!@expr1073747658 $assertEquals $(@expr1073747659 "cppcheck-2.8/test/testvalueflow.cpp" $, 3495 $, true $, $testValueOfXKnown_ $(@expr1073747660 "cppcheck-2.8/test/testvalueflow.cpp" $, 3495 $, code@var357 , 3U , 1 $) $) $) { $return ; }
3496: }
3497:
3498: void valueFlowForwardTernary ( ) {
3499: const char * code@var358 ;
3500:
3501: code@var358 =@expr1073747661 "int f() {\n  int x=5;\n  a = b ? init1(&x) : init2(&x);\n  return 1 + x;\n}"
3502:
3503:
3504:
3505: ;
3506: $if $(@expr1073747662 $!@expr1073747663 $assertEquals $(@expr1073747664 "cppcheck-2.8/test/testvalueflow.cpp" $, 3506 $, true $, $testValueOfX_ $(@expr1073747665 "cppcheck-2.8/test/testvalueflow.cpp" $, 3506 $, code@var358 , 3U , 5 $) $) $) { $return ; }
3507: $if $(@expr1073747666 $!@expr1073747667 $assertEquals $(@expr1073747668 "cppcheck-2.8/test/testvalueflow.cpp" $, 3507 $, false $, $testValueOfX_ $(@expr1073747669 "cppcheck-2.8/test/testvalueflow.cpp" $, 3507 $, code@var358 , 4U , 5 $) $) $) { $return ; }
3508:
3509: code@var358 =@expr1073747670 "int f(int *p) {\n  if (p) return;\n  x = *p ? : 1;\n}"
3510:
3511:
3512: ;
3513: $testValueOfX_ $(@expr1073747671 "cppcheck-2.8/test/testvalueflow.cpp" $, 3513 $, code@var358 , 1U , 0 $) ;
3514:
3515: code@var358 =@expr1073747672 "void f(int a) {\n    int x = 13;\n    if (a == 1) x = 26;\n    return a == 1 ? x : 0;\n}"
3516:
3517:
3518:
3519: ;
3520: $if $(@expr1073747673 $!@expr1073747674 $assertEquals $(@expr1073747675 "cppcheck-2.8/test/testvalueflow.cpp" $, 3520 $, false $, $testValueOfX_ $(@expr1073747676 "cppcheck-2.8/test/testvalueflow.cpp" $, 3520 $, code@var358 , 4U , 13 $) $) $) { $return ; }
3521: $if $(@expr1073747677 $!@expr1073747678 $assertEquals $(@expr1073747679 "cppcheck-2.8/test/testvalueflow.cpp" $, 3521 $, true $, $testValueOfX_ $(@expr1073747680 "cppcheck-2.8/test/testvalueflow.cpp" $, 3521 $, code@var358 , 4U , 26 $) $) $) { $return ; }
3522:
3523: code@var358 =@expr1073747681 "void f(int* i) {\n    if (!i) return;\n    int * x = *i == 1 ? i : nullptr;\n    int* a = x;\n}\n"
3524:
3525:
3526:
3527: ;
3528: $if $(@expr1073747682 $!@expr1073747683 $assertEquals $(@expr1073747684 "cppcheck-2.8/test/testvalueflow.cpp" $, 3528 $, true $, $testValueOfX_ $(@expr1073747685 "cppcheck-2.8/test/testvalueflow.cpp" $, 3528 $, code@var358 , 4U , 0 $) $) $) { $return ; }
3529: $if $(@expr1073747686 $!@expr1073747687 $assertEquals $(@expr1073747688 "cppcheck-2.8/test/testvalueflow.cpp" $, 3529 $, false $, $testValueOfXImpossible_ $(@expr1073747689 "cppcheck-2.8/test/testvalueflow.cpp" $, 3529 $, code@var358 , 4U , 0 $) $) $) { $return ; }
3530: }
3531:
3532: void valueFlowForwardLambda ( ) {
3533: const char * code@var359 ;
3534:
3535: code@var359 =@expr1073747690 "void f() {\n  int x=1;\n  auto f = [&](){ a=x; }\n  x = 2;\n  f();\n}"
3536:
|
3539:
3540: ;
3541: $if $(@expr1073747691 $!@expr1073747692 $assertEquals $(@expr1073747693 "cppcheck-2.8/test/testvalueflow.cpp" $, 3541 $, false $, $testValueOfX_ $(@expr1073747694 "cppcheck-2.8/test/testvalueflow.cpp" $, 3541 $, code@var359 , 3U , 1 $) $) $) { $return ; }
3542: $todoAssertEquals $(@expr1073747695 "cppcheck-2.8/test/testvalueflow.cpp" $, 3542 $, true $, false $, $testValueOfX_ $(@expr1073747696 "cppcheck-2.8/test/testvalueflow.cpp" $, 3542 $, code@var359 , 3U , 2 $) $) ;
3543:
3544: code@var359 =@expr1073747697 "void f() {\n  int x=3;\n  auto f = [&](){ a=x; }\n  f();\n}"
3545:
3546:
3547:
3548: ;
3549: $todoAssertEquals $(@expr1073747698 "cppcheck-2.8/test/testvalueflow.cpp" $, 3549 $, true $, false $, $testValueOfX_ $(@expr1073747699 "cppcheck-2.8/test/testvalueflow.cpp" $, 3549 $, code@var359 , 3U , 3 $) $) ;
3550:
3551: code@var359 =@expr1073747700 "void f() {\n  int x=3;\n  auto f = [&](){ x++; }\n  x = 1;\n  f();\n  int a = x;\n}"
3552:
|
3556:
3557: ;
3558: $if $(@expr1073747701 $!@expr1073747702 $assertEquals $(@expr1073747703 "cppcheck-2.8/test/testvalueflow.cpp" $, 3558 $, false $, $testValueOfX_ $(@expr1073747704 "cppcheck-2.8/test/testvalueflow.cpp" $, 3558 $, code@var359 , 6U , 1 $) $) $) { $return ; }
3559: $if $(@expr1073747705 $!@expr1073747706 $assertEquals $(@expr1073747707 "cppcheck-2.8/test/testvalueflow.cpp" $, 3559 $, false $, $testValueOfX_ $(@expr1073747708 "cppcheck-2.8/test/testvalueflow.cpp" $, 3559 $, code@var359 , 6U , 3 $) $) $) { $return ; }
3560: }
3561:
3562: void valueFlowForwardTryCatch ( ) {
3563: const char * code@var360 ;
3564:
3565: code@var360 =@expr1073747709 "void g1();\nvoid g2();\nvoid f()\n {    bool x = false;\n    try {\n        g1();\n        x = true;\n        g2();\n    }\n    catch (...) {\n        if (x) {}\n    }\n}\n"
3566:
|
3576:
3577: ;
3578: $if $(@expr1073747710 $!@expr1073747711 $assertEquals $(@expr1073747712 "cppcheck-2.8/test/testvalueflow.cpp" $, 3578 $, true $, $testValueOfX_ $(@expr1073747713 "cppcheck-2.8/test/testvalueflow.cpp" $, 3578 $, code@var360 , 11U , 1 $) $) $) { $return ; }
3579: $if $(@expr1073747714 $!@expr1073747715 $assertEquals $(@expr1073747716 "cppcheck-2.8/test/testvalueflow.cpp" $, 3579 $, false $, $testValueOfXKnown_ $(@expr1073747717 "cppcheck-2.8/test/testvalueflow.cpp" $, 3579 $, code@var360 , 11U , 1 $) $) $) { $return ; }
3580:
3581: code@var360 =@expr1073747718 "void g1();\nvoid g2();\nvoid f()\n {    bool x = true;\n    try {\n        g1();\n        g2();\n    }\n    catch (...) {\n        if (x) {}\n    }\n}\n"
3582:
|
3591:
3592: ;
3593: $if $(@expr1073747719 $!@expr1073747720 $assertEquals $(@expr1073747721 "cppcheck-2.8/test/testvalueflow.cpp" $, 3593 $, true $, $testValueOfXKnown_ $(@expr1073747722 "cppcheck-2.8/test/testvalueflow.cpp" $, 3593 $, code@var360 , 10U , 1 $) $) $) { $return ; }
3594: }
3595:
3596: void valueFlowBitAnd ( ) {
3597: const char * code@var361 ;
3598:
3599: code@var361 =@expr1073747723 "int f(int a) {\n  int x = a & 0x80;\n  return x;\n}"
3600:
3601:
3602: ;
3603: $if $(@expr1073747724 $!@expr1073747725 $assertEquals $(@expr1073747726 "cppcheck-2.8/test/testvalueflow.cpp" $, 3603 $, true $, $testValueOfX_ $(@expr1073747727 "cppcheck-2.8/test/testvalueflow.cpp" $, 3603 $, code@var361 , 3U , 0 $) $) $) { $return ; }
3604: $if $(@expr1073747728 $!@expr1073747729 $assertEquals $(@expr1073747730 "cppcheck-2.8/test/testvalueflow.cpp" $, 3604 $, true $, $testValueOfX_ $(@expr1073747731 "cppcheck-2.8/test/testvalueflow.cpp" $, 3604 $, code@var361 , 3U , 0x80 $) $) $) { $return ; }
3605:
3606: code@var361 =@expr1073747732 "int f(int a) {\n  int x = a & 0x80 ? 1 : 2;\n  return x;\n}"
3607:
3608:
3609: ;
3610: $if $(@expr1073747733 $!@expr1073747734 $assertEquals $(@expr1073747735 "cppcheck-2.8/test/testvalueflow.cpp" $, 3610 $, false $, $testValueOfX_ $(@expr1073747736 "cppcheck-2.8/test/testvalueflow.cpp" $, 3610 $, code@var361 , 3U , 0 $) $) $) { $return ; }
3611: $if $(@expr1073747737 $!@expr1073747738 $assertEquals $(@expr1073747739 "cppcheck-2.8/test/testvalueflow.cpp" $, 3611 $, false $, $testValueOfX_ $(@expr1073747740 "cppcheck-2.8/test/testvalueflow.cpp" $, 3611 $, code@var361 , 3U , 0x80 $) $) $) { $return ; }
3612:
3613: code@var361 =@expr1073747741 "int f() {\n  int x = (19 - 3) & 15;\n  return x;\n}"
3614:
3615:
3616: ;
3617: $if $(@expr1073747742 $!@expr1073747743 $assertEquals $(@expr1073747744 "cppcheck-2.8/test/testvalueflow.cpp" $, 3617 $, true $, $testValueOfX_ $(@expr1073747745 "cppcheck-2.8/test/testvalueflow.cpp" $, 3617 $, code@var361 , 3U , 0 $) $) $) { $return ; }
3618: $if $(@expr1073747746 $!@expr1073747747 $assertEquals $(@expr1073747748 "cppcheck-2.8/test/testvalueflow.cpp" $, 3618 $, false $, $testValueOfX_ $(@expr1073747749 "cppcheck-2.8/test/testvalueflow.cpp" $, 3618 $, code@var361 , 3U , 16 $) $) $) { $return ; }
3619: }
3620:
3621: void valueFlowForwardInconclusiveImpossible ( ) {
3622: const char * code@var362 ;
3623:
3624: code@var362 =@expr1073747750 "void foo() {\n    bool valid = f1();\n    if (!valid) return;\n    std::tie(endVal, valid) = f2();\n    bool x = !valid;    bool b = x;}\n"
3625:
|
3629:
3630: ;
3631: $if $(@expr1073747751 $!@expr1073747752 $assertEquals $(@expr1073747753 "cppcheck-2.8/test/testvalueflow.cpp" $, 3631 $, false $, $testValueOfXKnown_ $(@expr1073747754 "cppcheck-2.8/test/testvalueflow.cpp" $, 3631 $, code@var362 , 6U , 1 $) $) $) { $return ; }
3632: }
3633:
3634: void valueFlowForwardConst ( )
3635: {
3636: const char * code@var363 ;
3637:
3638: code@var363 =@expr1073747755 "int f() {\n    const int i = 2;\n    const int x = i+1;\n    goto end;\nend:\n    return x;\n}\n"
3639:
|
3643:
3644: ;
3645: $if $(@expr1073747756 $!@expr1073747757 $assertEquals $(@expr1073747758 "cppcheck-2.8/test/testvalueflow.cpp" $, 3645 $, true $, $testValueOfXKnown_ $(@expr1073747759 "cppcheck-2.8/test/testvalueflow.cpp" $, 3645 $, code@var363 , 6U , 3 $) $) $) { $return ; }
3646:
3647: code@var363 =@expr1073747760 "int f() {\n    int i = 2;\n    const int& x = i;\n    i++;\n    return x;\n}\n"
3648:
|
3651:
3652: ;
3653: $if $(@expr1073747761 $!@expr1073747762 $assertEquals $(@expr1073747763 "cppcheck-2.8/test/testvalueflow.cpp" $, 3653 $, false $, $testValueOfXKnown_ $(@expr1073747764 "cppcheck-2.8/test/testvalueflow.cpp" $, 3653 $, code@var363 , 6U , 2 $) $) $) { $return ; }
3654:
3655: code@var363 =@expr1073747765 "int f(int a, int b, int c) {\n    const int i = 2;\n    const int x = i+1;\n    if (a == x) { return 0; }\n    if (b == x) { return 0; }\n    if (c == x) { return 0; }\n    return x;\n}\n"
3656:
|
3661:
3662: ;
3663: $if $(@expr1073747766 $!@expr1073747767 $assertEquals $(@expr1073747768 "cppcheck-2.8/test/testvalueflow.cpp" $, 3663 $, true $, $testValueOfXKnown_ $(@expr1073747769 "cppcheck-2.8/test/testvalueflow.cpp" $, 3663 $, code@var363 , 7U , 3 $) $) $) { $return ; }
3664:
3665: code@var363 =@expr1073747770 "int f(int a, int b, int c) {\n    const int i = 2;\n    const int y = i+1;\n    const int& x = y;\n    if (a == x) { return 0; }\n    if (b == x) { return 0; }\n    if (c == x) { return 0; }\n    return x;\n}\n"
3666:
|
3672:
3673: ;
3674: $if $(@expr1073747771 $!@expr1073747772 $assertEquals $(@expr1073747773 "cppcheck-2.8/test/testvalueflow.cpp" $, 3674 $, true $, $testValueOfXKnown_ $(@expr1073747774 "cppcheck-2.8/test/testvalueflow.cpp" $, 3674 $, code@var363 , 8U , 3 $) $) $) { $return ; }
3675:
3676: code@var363 =@expr1073747775 "int f(int a, int b, int c, int x) {\n    const int i = 2;\n    const int y = i+1;\n    if (a == y) { return 0; }\n    if (b == y) { return 0; }\n    if (c == y) { return 0; }\n    if (x == y)\n        return x;\n    return 0;\n}\n"
3677:
|
3684:
3685: ;
3686: $if $(@expr1073747776 $!@expr1073747777 $assertEquals $(@expr1073747778 "cppcheck-2.8/test/testvalueflow.cpp" $, 3686 $, true $, $testValueOfXKnown_ $(@expr1073747779 "cppcheck-2.8/test/testvalueflow.cpp" $, 3686 $, code@var363 , 8U , 3 $) $) $) { $return ; }
3687: }
3688:
3689: void valueFlowForwardAfterCondition ( )
3690: {
3691: const char * code@var364 ;
3692:
3693: code@var364 =@expr1073747780 "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    for (;;) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
3694:
|
3704:
3705: ;
3706: $if $(@expr1073747781 $!@expr1073747782 $assertEquals $(@expr1073747783 "cppcheck-2.8/test/testvalueflow.cpp" $, 3706 $, false $, $testValueOfX_ $(@expr1073747784 "cppcheck-2.8/test/testvalueflow.cpp" $, 3706 $, code@var364 , 11U , 3 $) $) $) { $return ; }
3707:
3708: code@var364 =@expr1073747785 "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    while (true) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
3709:
|
3719:
3720: ;
3721: $if $(@expr1073747786 $!@expr1073747787 $assertEquals $(@expr1073747788 "cppcheck-2.8/test/testvalueflow.cpp" $, 3721 $, false $, $testValueOfX_ $(@expr1073747789 "cppcheck-2.8/test/testvalueflow.cpp" $, 3721 $, code@var364 , 11U , 3 $) $) $) { $return ; }
3722:
3723: code@var364 =@expr1073747790 "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    if (true) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
3724:
|
3734:
3735: ;
3736: $if $(@expr1073747791 $!@expr1073747792 $assertEquals $(@expr1073747793 "cppcheck-2.8/test/testvalueflow.cpp" $, 3736 $, false $, $testValueOfX_ $(@expr1073747794 "cppcheck-2.8/test/testvalueflow.cpp" $, 3736 $, code@var364 , 11U , 3 $) $) $) { $return ; }
3737: }
3738:
3739: void valueFlowRightShift ( ) {
3740: const char * code@var365 ;
3741:
3742: const Settings settingsTmp@var366 =@expr1073747796 settings@var102 ;
3743: settings@var102 .@expr1073747797 int_bit@var367 =@expr1073747798 32 ;
3744: settings@var102 .@expr1073747799 long_bit@var368 =@expr1073747800 64 ;
3745: settings@var102 .@expr1073747801 long_long_bit@var369 =@expr1073747802 MathLib ::@expr1073747803 bigint_bits@expr1073747795 *@expr1073747804 2 ;
3746:
3747: code@var365 =@expr1073747805 "int f(int a) {\n  int x = (a & 0xff) >> 16;\n  return x;\n}"
3748:
3749:
3750: ;
3751: $if $(@expr1073747806 $!@expr1073747807 $assertEquals $(@expr1073747808 "cppcheck-2.8/test/testvalueflow.cpp" $, 3751 $, true $, $testValueOfX_ $(@expr1073747809 "cppcheck-2.8/test/testvalueflow.cpp" $, 3751 $, code@var365 , 3U , 0 $) $) $) { $return ; }
3752:
3753: code@var365 =@expr1073747810 "int f(unsigned int a) {\n  int x = (a % 123) >> 16;\n  return x;\n}"
3754:
3755:
3756: ;
3757: $if $(@expr1073747811 $!@expr1073747812 $assertEquals $(@expr1073747813 "cppcheck-2.8/test/testvalueflow.cpp" $, 3757 $, true $, $testValueOfX_ $(@expr1073747814 "cppcheck-2.8/test/testvalueflow.cpp" $, 3757 $, code@var365 , 3U , 0 $) $) $) { $return ; }
3758:
3759: code@var365 =@expr1073747815 "int f(int y) {\n  int x = (y & 0xFFFFFFF) >> 31;\n  return x;\n}"
3760:
3761:
3762: ;
3763: $if $(@expr1073747816 $!@expr1073747817 $assertEquals $(@expr1073747818 "cppcheck-2.8/test/testvalueflow.cpp" $, 3763 $, true $, $testValueOfX_ $(@expr1073747819 "cppcheck-2.8/test/testvalueflow.cpp" $, 3763 $, code@var365 , 3u , 0 $) $) $) { $return ; }
3764:
3765: code@var365 =@expr1073747820 "int f(int y) {\n  int x = (y & 0xFFFFFFF) >> 32;\n  return x;\n}"
3766:
3767:
3768: ;
3769: $if $(@expr1073747821 $!@expr1073747822 $assertEquals $(@expr1073747823 "cppcheck-2.8/test/testvalueflow.cpp" $, 3769 $, false $, $testValueOfX_ $(@expr1073747824 "cppcheck-2.8/test/testvalueflow.cpp" $, 3769 $, code@var365 , 3u , 0 $) $) $) { $return ; }
3770:
3771: code@var365 =@expr1073747825 "int f(short y) {\n  int x = (y & 0xFFFFFF) >> 31;\n  return x;\n}"
3772:
3773:
3774: ;
3775: $if $(@expr1073747826 $!@expr1073747827 $assertEquals $(@expr1073747828 "cppcheck-2.8/test/testvalueflow.cpp" $, 3775 $, true $, $testValueOfX_ $(@expr1073747829 "cppcheck-2.8/test/testvalueflow.cpp" $, 3775 $, code@var365 , 3u , 0 $) $) $) { $return ; }
3776:
3777: code@var365 =@expr1073747830 "int f(short y) {\n  int x = (y & 0xFFFFFF) >> 32;\n  return x;\n}"
3778:
3779:
3780: ;
3781: $if $(@expr1073747831 $!@expr1073747832 $assertEquals $(@expr1073747833 "cppcheck-2.8/test/testvalueflow.cpp" $, 3781 $, false $, $testValueOfX_ $(@expr1073747834 "cppcheck-2.8/test/testvalueflow.cpp" $, 3781 $, code@var365 , 3u , 0 $) $) $) { $return ; }
3782:
3783: code@var365 =@expr1073747835 "int f(long y) {\n  int x = (y & 0xFFFFFF) >> 63;\n  return x;\n}"
3784:
3785:
3786: ;
3787: $if $(@expr1073747836 $!@expr1073747837 $assertEquals $(@expr1073747838 "cppcheck-2.8/test/testvalueflow.cpp" $, 3787 $, true $, $testValueOfX_ $(@expr1073747839 "cppcheck-2.8/test/testvalueflow.cpp" $, 3787 $, code@var365 , 3u , 0 $) $) $) { $return ; }
3788:
3789: code@var365 =@expr1073747840 "int f(long y) {\n  int x = (y & 0xFFFFFF) >> 64;\n  return x;\n}"
3790:
3791:
3792: ;
3793: $if $(@expr1073747841 $!@expr1073747842 $assertEquals $(@expr1073747843 "cppcheck-2.8/test/testvalueflow.cpp" $, 3793 $, false $, $testValueOfX_ $(@expr1073747844 "cppcheck-2.8/test/testvalueflow.cpp" $, 3793 $, code@var365 , 3u , 0 $) $) $) { $return ; }
3794:
3795: code@var365 =@expr1073747845 "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 63;\n  return x;\n}"
3796:
3797:
3798: ;
3799: $if $(@expr1073747846 $!@expr1073747847 $assertEquals $(@expr1073747848 "cppcheck-2.8/test/testvalueflow.cpp" $, 3799 $, true $, $testValueOfX_ $(@expr1073747849 "cppcheck-2.8/test/testvalueflow.cpp" $, 3799 $, code@var365 , 3u , 0 $) $) $) { $return ; }
3800:
3801: code@var365 =@expr1073747850 "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 64;\n  return x;\n}"
3802:
3803:
3804: ;
3805: $if $(@expr1073747851 $!@expr1073747852 $assertEquals $(@expr1073747853 "cppcheck-2.8/test/testvalueflow.cpp" $, 3805 $, false $, $testValueOfX_ $(@expr1073747854 "cppcheck-2.8/test/testvalueflow.cpp" $, 3805 $, code@var365 , 3u , 0 $) $) $) { $return ; }
3806:
3807: code@var365 =@expr1073747855 "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 121;\n  return x;\n}"
3808:
3809:
3810: ;
3811: $if $(@expr1073747856 $!@expr1073747857 $assertEquals $(@expr1073747858 "cppcheck-2.8/test/testvalueflow.cpp" $, 3811 $, false $, $testValueOfX_ $(@expr1073747859 "cppcheck-2.8/test/testvalueflow.cpp" $, 3811 $, code@var365 , 3u , 0 $) $) $) { $return ; }
3812:
3813: code@var365 =@expr1073747860 "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 128;\n  return x;\n}"
3814:
3815:
3816: ;
3817: $if $(@expr1073747861 $!@expr1073747862 $assertEquals $(@expr1073747863 "cppcheck-2.8/test/testvalueflow.cpp" $, 3817 $, false $, $testValueOfX_ $(@expr1073747864 "cppcheck-2.8/test/testvalueflow.cpp" $, 3817 $, code@var365 , 3u , 0 $) $) $) { $return ; }
3818:
3819: settings@var102 =@expr1073747865 settingsTmp@var366 ;
3820: }
3821:
3822: void valueFlowFwdAnalysis ( ) {
3823: const char * code@var370 ;
3824: std ::@expr1073747867 list < ValueFlow ::@expr1073747868 Value > values@var371 ;
3825:
3826: code@var370 =@expr1073747869 "void f() {\n  struct Foo foo;\n  foo.x = 1;\n  x = 0 + foo.x;\n}"
3827:
3828:
3829:
3830: ;
3831: values@var371 =@expr1073747870 removeSymbolic (@expr1073747871 $tokenValues_ $(@expr1073747872 "cppcheck-2.8/test/testvalueflow.cpp" $, 3831 $, code@var370 , "+" $) ) ;
3832: $if $(@expr1073747873 $!@expr1073747874 $assertEquals $(@expr1073747875 "cppcheck-2.8/test/testvalueflow.cpp" $, 3832 $, 1U $, values@var371 .@expr6052 size (@expr6053 ) $) $) { $return ; }
3833: $if $(@expr1073747878 $!@expr1073747879 $assertEquals $(@expr1073747880 "cppcheck-2.8/test/testvalueflow.cpp" $, 3833 $, true $, values@var371 .@expr6057 front (@expr6058 ) .@expr6059 isKnown (@expr6060 ) $) $) { $return ; }
3834: $if $(@expr1073747885 $!@expr1073747886 $assertEquals $(@expr1073747887 "cppcheck-2.8/test/testvalueflow.cpp" $, 3834 $, true $, values@var371 .@expr6057 front (@expr6058 ) .@expr6066 isIntValue (@expr6067 ) $) $) { $return ; }
3835: $if $(@expr1073747892 $!@expr1073747893 $assertEquals $(@expr1073747894 "cppcheck-2.8/test/testvalueflow.cpp" $, 3835 $, 1 $, values@var371 .@expr6057 front (@expr6058 ) .@expr6073 intvalue@expr6042 $) $) { $return ; }
3836:
3837: code@var370 =@expr1073747898 "void f() {\n  S s;\n  s.x = 1;\n  int y = 10;\n  while (s.x < y)\n    s.x++;\n}"
3838:
|
3842:
3843: ;
3844: values@var371 =@expr1073747899 removeImpossible (@expr1073747900 $tokenValues_ $(@expr1073747901 "cppcheck-2.8/test/testvalueflow.cpp" $, 3844 $, code@var370 , "<" $) ) ;
3845: $if $(@expr1073747902 $!@expr1073747903 $assertEquals $(@expr1073747904 "cppcheck-2.8/test/testvalueflow.cpp" $, 3845 $, 1 $, values@var371 .@expr6052 size (@expr6053 ) $) $) { $return ; }
3846: $if $(@expr1073747907 $!@expr1073747908 $assert_ $(@expr1073747909 "cppcheck-2.8/test/testvalueflow.cpp" $, 3846 $, values@var371 .@expr6057 front (@expr6058 ) .@expr6088 isPossible (@expr6089 ) $) $) { $return ; }
3847: $if $(@expr1073747914 $!@expr1073747915 $assertEquals $(@expr1073747916 "cppcheck-2.8/test/testvalueflow.cpp" $, 3847 $, 1 $, values@var371 .@expr6057 front (@expr6058 ) .@expr6073 intvalue@expr6042 $) $) { $return ; }
3848:
3849: code@var370 =@expr1073747920 "void f() {\n  S s;\n  s.x = 37;\n  int y = 10;\n  while (s.x < y)\n    y--;\n}"
3850:
|
3854:
3855: ;
3856: values@var371 =@expr1073747921 $tokenValues_ $(@expr1073747922 "cppcheck-2.8/test/testvalueflow.cpp" $, 3856 $, code@var370 , ". x <" $) ;
3857: $if $(@expr1073747923 $!@expr1073747924 $assert_ $(@expr1073747925 "cppcheck-2.8/test/testvalueflow.cpp" $, 3857 $, values@var371 .@expr6052 size (@expr6053 ) ==@expr1073747928 1 &&@expr1073747929 values@var371 .@expr6057 front (@expr6058 ) .@expr6059 isKnown (@expr6060 ) &&@expr1073747934 values@var371 .@expr6057 front (@expr6058 ) .@expr6066 isIntValue (@expr6067 ) &&@expr1073747939 values@var371 .@expr6057 front (@expr6058 ) .@expr6073 intvalue@expr6042 ==@expr1073747943 37 $) $) { $return
3858:
3859:
3860: ; }
3861:
3862: code@var370 =@expr1073747944 "void f() {\n  Hints hints;\n  hints.x = 1;\n  if (foo)\n    hints.x = 2;\n  x = 0 + foo.x;\n}"
3863:
|
3867:
3868: ;
3869: values@var371 =@expr1073747945 removeSymbolic (@expr1073747946 $tokenValues_ $(@expr1073747947 "cppcheck-2.8/test/testvalueflow.cpp" $, 3869 $, code@var370 , "+" $) ) ;
3870: $todoAssertEquals $(@expr1073747948 "cppcheck-2.8/test/testvalueflow.cpp" $, 3870 $, 2U $, 0U $, values@var371 .@expr6052 size (@expr6053 ) $) ;
3871:
3872:
3873: code@var370 =@expr1073747951 "bool dostuff(const char *x, const char *y);\nvoid fun(char *s, int *b) {\n  for (int i = 0; i < 42; ++i) {\n    if (dostuff(s, \"1\")) {\n      *b = 1;\n      break;\n    }\n  }\n  if (*b > 0) {\n  }\n}"
3874:
|
3882:
3883: ;
3884: values@var371 =@expr1073747952 removeImpossible (@expr1073747953 $tokenValues_ $(@expr1073747954 "cppcheck-2.8/test/testvalueflow.cpp" $, 3884 $, code@var370 , ">" $) ) ;
3885: $if $(@expr1073747955 $!@expr1073747956 $assertEquals $(@expr1073747957 "cppcheck-2.8/test/testvalueflow.cpp" $, 3885 $, 1 $, values@var371 .@expr6052 size (@expr6053 ) $) $) { $return ; }
3886: $if $(@expr1073747960 $!@expr1073747961 $assert_ $(@expr1073747962 "cppcheck-2.8/test/testvalueflow.cpp" $, 3886 $, values@var371 .@expr6057 front (@expr6058 ) .@expr6088 isPossible (@expr6089 ) $) $) { $return ; }
3887: $if $(@expr1073747967 $!@expr1073747968 $assertEquals $(@expr1073747969 "cppcheck-2.8/test/testvalueflow.cpp" $, 3887 $, 1 $, values@var371 .@expr6057 front (@expr6058 ) .@expr6073 intvalue@expr6042 $) $) { $return ; }
3888:
3889: code@var370 =@expr1073747973 "void foo() {\n    struct ISO_PVD_s pvd;\n    pvd.descr_type = 0xff;\n    do {\n        if (pvd.descr_type == 0xff) {}\n        dostuff(&pvd);\n    } while (condition)\n}"
3890:
|
3895:
3896: ;
3897: values@var371 =@expr1073747974 removeImpossible (@expr1073747975 $tokenValues_ $(@expr1073747976 "cppcheck-2.8/test/testvalueflow.cpp" $, 3897 $, code@var370 , "==" $) ) ;
3898: $if $(@expr1073747977 $!@expr1073747978 $assertEquals $(@expr1073747979 "cppcheck-2.8/test/testvalueflow.cpp" $, 3898 $, 1 $, values@var371 .@expr6052 size (@expr6053 ) $) $) { $return ; }
3899: $if $(@expr1073747982 $!@expr1073747983 $assert_ $(@expr1073747984 "cppcheck-2.8/test/testvalueflow.cpp" $, 3899 $, values@var371 .@expr6057 front (@expr6058 ) .@expr6088 isPossible (@expr6089 ) $) $) { $return ; }
3900: $if $(@expr1073747989 $!@expr1073747990 $assertEquals $(@expr1073747991 "cppcheck-2.8/test/testvalueflow.cpp" $, 3900 $, 1 $, values@var371 .@expr6057 front (@expr6058 ) .@expr6073 intvalue@expr6042 $) $) { $return ; }
3901:
3902:
3903: code@var370 =@expr1073747995 "struct S { int x; };\nvoid foo(struct S s) {\n    for (s.x = 0; s.x < 127; s.x++) {}\n}"
3904:
3905:
3906: ;
3907: values@var371 =@expr1073747996 removeImpossible (@expr1073747997 $tokenValues_ $(@expr1073747998 "cppcheck-2.8/test/testvalueflow.cpp" $, 3907 $, code@var370 , "<" $) ) ;
3908: $if $(@expr1073747999 $!@expr1073748000 $assertEquals $(@expr1073748001 "cppcheck-2.8/test/testvalueflow.cpp" $, 3908 $, true $, values@var371 .@expr1073748002 empty (@expr1073748003 ) $) $) { $return ; }
3909: }
3910:
3911: void valueFlowSwitchVariable ( ) {
3912: const char * code@var372 ;
3913: code@var372 =@expr1073748004 "void f(int x) {\n    a = x - 1;\n    switch (x) {\n    case 14: a=x+2; break;\n    };\n    a = x;\n}"
3914:
|
3918:
3919: ;
3920: $if $(@expr1073748005 $!@expr1073748006 $assertEquals $(@expr1073748007 "cppcheck-2.8/test/testvalueflow.cpp" $, 3920 $, true $, $testConditionalValueOfX_ $(@expr1073748008 code@var372 $, 2U $, 14 $, "cppcheck-2.8/test/testvalueflow.cpp" $, 3920 $) $) $) { $return ; }
3921: $todoAssertEquals $(@expr1073748009 "cppcheck-2.8/test/testvalueflow.cpp" $, 3921 $, true $, false $, $testConditionalValueOfX_ $(@expr1073748010 code@var372 $, 4U $, 14 $, "cppcheck-2.8/test/testvalueflow.cpp" $, 3921 $) $) ;
3922: $todoAssertEquals $(@expr1073748011 "cppcheck-2.8/test/testvalueflow.cpp" $, 3922 $, true $, false $, $testConditionalValueOfX_ $(@expr1073748012 code@var372 $, 6U $, 14 $, "cppcheck-2.8/test/testvalueflow.cpp" $, 3922 $) $) ;
3923:
3924: ValueFlow ::@expr1073748013 Value value1@var373 ; value1@var373 =@expr1073748014 $valueOfTok_ $(@expr1073748015 code@var372 $, "-" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 3924 $) ;
3925: $if $(@expr1073748016 $!@expr1073748017 $assertEquals $(@expr1073748018 "cppcheck-2.8/test/testvalueflow.cpp" $, 3925 $, 13 $, value1@var373 .@expr1073748019 intvalue@var374 $) $) { $return ; }
3926: $if $(@expr1073748020 $!@expr1073748021 $assert_ $(@expr1073748022 "cppcheck-2.8/test/testvalueflow.cpp" $, 3926 $, !@expr1073748023 value1@var373 .@expr1073748024 isKnown (@expr1073748025 ) $) $) { $return ; }
3927:
3928: ValueFlow ::@expr1073748026 Value value2@var375 ; value2@var375 =@expr1073748027 $valueOfTok_ $(@expr1073748028 code@var372 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 3928 $) ;
3929: $todoAssertEquals $(@expr1073748029 "cppcheck-2.8/test/testvalueflow.cpp" $, 3929 $, 16 $, 0 $, value2@var375 .@expr1073748030 intvalue@var376 $) ;
3930: $todoAssertEquals $(@expr1073748031 "cppcheck-2.8/test/testvalueflow.cpp" $, 3930 $, true $, false $, value2@var375 .@expr1073748032 isKnown (@expr1073748033 ) $) ;
3931: }
3932:
3933: void valueFlowForLoop ( ) {
3934: const char * code@var377 ;
3935: ValueFlow ::@expr1073748035 Value value@var378 ;
3936:
3937: code@var377 =@expr1073748036 "void f() {\n    for (int x = 0; x < 10; x++)\n        a[x] = 0;\n}"
3938:
3939:
3940: ;
3941: $if $(@expr1073748037 $!@expr1073748038 $assertEquals $(@expr1073748039 "cppcheck-2.8/test/testvalueflow.cpp" $, 3941 $, true $, $testValueOfX_ $(@expr1073748040 "cppcheck-2.8/test/testvalueflow.cpp" $, 3941 $, code@var377 , 3U , 0 $) $) $) { $return ; }
3942: $if $(@expr1073748041 $!@expr1073748042 $assertEquals $(@expr1073748043 "cppcheck-2.8/test/testvalueflow.cpp" $, 3942 $, true $, $testValueOfX_ $(@expr1073748044 "cppcheck-2.8/test/testvalueflow.cpp" $, 3942 $, code@var377 , 3U , 9 $) $) $) { $return ; }
3943: $if $(@expr1073748045 $!@expr1073748046 $assertEquals $(@expr1073748047 "cppcheck-2.8/test/testvalueflow.cpp" $, 3943 $, false $, $testValueOfX_ $(@expr1073748048 "cppcheck-2.8/test/testvalueflow.cpp" $, 3943 $, code@var377 , 3U , 10 $) $) $) { $return ; }
3944:
3945: code@var377 =@expr1073748049 "void f() {\n    int x;\n    for (x = 2; x < 1; x++)\n        a[x] = 0;\n    b = x;\n}"
3946:
|
3949:
3950: ;
3951: $if $(@expr1073748050 $!@expr1073748051 $assertEquals $(@expr1073748052 "cppcheck-2.8/test/testvalueflow.cpp" $, 3951 $, false $, $testValueOfX_ $(@expr1073748053 "cppcheck-2.8/test/testvalueflow.cpp" $, 3951 $, code@var377 , 4U , 2 $) $) $) { $return ; }
3952: $if $(@expr1073748054 $!@expr1073748055 $assertEquals $(@expr1073748056 "cppcheck-2.8/test/testvalueflow.cpp" $, 3952 $, true $, $testValueOfX_ $(@expr1073748057 "cppcheck-2.8/test/testvalueflow.cpp" $, 3952 $, code@var377 , 5U , 2 $) $) $) { $return ; }
3953:
3954: code@var377 =@expr1073748058 "void f() {\n    int x;\n    for (x = 2; x < 1; ++x)\n        a[x] = 0;\n    b = x;\n}"
3955:
|
3958:
3959: ;
3960: $if $(@expr1073748059 $!@expr1073748060 $assertEquals $(@expr1073748061 "cppcheck-2.8/test/testvalueflow.cpp" $, 3960 $, false $, $testValueOfX_ $(@expr1073748062 "cppcheck-2.8/test/testvalueflow.cpp" $, 3960 $, code@var377 , 4U , 2 $) $) $) { $return ; }
3961: $if $(@expr1073748063 $!@expr1073748064 $assertEquals $(@expr1073748065 "cppcheck-2.8/test/testvalueflow.cpp" $, 3961 $, true $, $testValueOfX_ $(@expr1073748066 "cppcheck-2.8/test/testvalueflow.cpp" $, 3961 $, code@var377 , 5U , 2 $) $) $) { $return ; }
3962:
3963: code@var377 =@expr1073748067 "enum AB {A,B};\nvoid f() {\n    int x;\n    for (x = 1; x < B; ++x)\n        a[x] = 0;\n}"
3964:
|
3967:
3968: ;
3969: $if $(@expr1073748068 $!@expr1073748069 $assertEquals $(@expr1073748070 "cppcheck-2.8/test/testvalueflow.cpp" $, 3969 $, false $, $testValueOfX_ $(@expr1073748071 "cppcheck-2.8/test/testvalueflow.cpp" $, 3969 $, code@var377 , 5U , 1 $) $) $) { $return ; }
3970:
3971: code@var377 =@expr1073748072 "void f(int a) {\n    for (int x = a; x < 10; x++)\n        a[x] = 0;\n}"
3972:
3973:
3974: ;
3975: $if $(@expr1073748073 $!@expr1073748074 $assertEquals $(@expr1073748075 "cppcheck-2.8/test/testvalueflow.cpp" $, 3975 $, true $, $testValueOfX_ $(@expr1073748076 "cppcheck-2.8/test/testvalueflow.cpp" $, 3975 $, code@var377 , 3U , 9 $) $) $) { $return ; }
3976:
3977: code@var377 =@expr1073748077 "void f() {\n    for (int x = 0; x < 5; x += 2)\n        a[x] = 0;\n}"
3978:
3979:
3980: ;
3981: $if $(@expr1073748078 $!@expr1073748079 $assertEquals $(@expr1073748080 "cppcheck-2.8/test/testvalueflow.cpp" $, 3981 $, true $, $testValueOfX_ $(@expr1073748081 "cppcheck-2.8/test/testvalueflow.cpp" $, 3981 $, code@var377 , 3U , 0 $) $) $) { $return ; }
3982: $if $(@expr1073748082 $!@expr1073748083 $assertEquals $(@expr1073748084 "cppcheck-2.8/test/testvalueflow.cpp" $, 3982 $, true $, $testValueOfX_ $(@expr1073748085 "cppcheck-2.8/test/testvalueflow.cpp" $, 3982 $, code@var377 , 3U , 4 $) $) $) { $return ; }
3983:
3984: code@var377 =@expr1073748086 "void f() {\n    for (int x = 0; x < 10; x = x + 2)\n        a[x] = 0;\n}"
3985:
3986:
3987: ;
3988: $if $(@expr1073748087 $!@expr1073748088 $assertEquals $(@expr1073748089 "cppcheck-2.8/test/testvalueflow.cpp" $, 3988 $, true $, $testValueOfX_ $(@expr1073748090 "cppcheck-2.8/test/testvalueflow.cpp" $, 3988 $, code@var377 , 3U , 0 $) $) $) { $return ; }
3989: $if $(@expr1073748091 $!@expr1073748092 $assertEquals $(@expr1073748093 "cppcheck-2.8/test/testvalueflow.cpp" $, 3989 $, true $, $testValueOfX_ $(@expr1073748094 "cppcheck-2.8/test/testvalueflow.cpp" $, 3989 $, code@var377 , 3U , 8 $) $) $) { $return ; }
3990: $if $(@expr1073748095 $!@expr1073748096 $assertEquals $(@expr1073748097 "cppcheck-2.8/test/testvalueflow.cpp" $, 3990 $, false $, $testValueOfX_ $(@expr1073748098 "cppcheck-2.8/test/testvalueflow.cpp" $, 3990 $, code@var377 , 3U , 10 $) $) $) { $return ; }
3991:
3992: code@var377 =@expr1073748099 "void f() {\n    for (int x = 0; x < 10; x = x / 0)\n        a[x] = 0;\n}"
3993:
3994:
3995: ;
3996: $if $(@expr1073748100 $!@expr1073748101 $assertEquals $(@expr1073748102 "cppcheck-2.8/test/testvalueflow.cpp" $, 3996 $, true $, $testValueOfX_ $(@expr1073748103 "cppcheck-2.8/test/testvalueflow.cpp" $, 3996 $, code@var377 , 3U , 0 $) $) $) { $return ; }
3997:
3998: code@var377 =@expr1073748104 "void f() {\n    for (int x = 0; x < 10; x++)\n        x<4 ?\n        a[x] : 0;\n}"
3999:
4000:
4001:
4002: ;
4003: $if $(@expr1073748105 $!@expr1073748106 $assertEquals $(@expr1073748107 "cppcheck-2.8/test/testvalueflow.cpp" $, 4003 $, true $, $testValueOfX_ $(@expr1073748108 "cppcheck-2.8/test/testvalueflow.cpp" $, 4003 $, code@var377 , 3U , 0 $) $) $) { $return ; }
4004: $if $(@expr1073748109 $!@expr1073748110 $assertEquals $(@expr1073748111 "cppcheck-2.8/test/testvalueflow.cpp" $, 4004 $, true $, $testValueOfX_ $(@expr1073748112 "cppcheck-2.8/test/testvalueflow.cpp" $, 4004 $, code@var377 , 3U , 9 $) $) $) { $return ; }
4005: $if $(@expr1073748113 $!@expr1073748114 $assertEquals $(@expr1073748115 "cppcheck-2.8/test/testvalueflow.cpp" $, 4005 $, false $, $testValueOfX_ $(@expr1073748116 "cppcheck-2.8/test/testvalueflow.cpp" $, 4005 $, code@var377 , 4U , 9 $) $) $) { $return ; }
4006:
4007: code@var377 =@expr1073748117 "void f() {\n    for (int x = 0; x < 10; x++)\n        x==0 ?\n        0 : a[x];\n}"
4008:
4009:
4010:
4011: ;
4012: $if $(@expr1073748118 $!@expr1073748119 $assertEquals $(@expr1073748120 "cppcheck-2.8/test/testvalueflow.cpp" $, 4012 $, false $, $testValueOfX_ $(@expr1073748121 "cppcheck-2.8/test/testvalueflow.cpp" $, 4012 $, code@var377 , 4U , 0 $) $) $) { $return ; }
4013:
4014: code@var377 =@expr1073748122 "void f() {\n    for (int x = 0; x < 300 && x < 18; x++)\n        x;\n}"
4015:
4016:
4017: ;
4018: $if $(@expr1073748123 $!@expr1073748124 $assertEquals $(@expr1073748125 "cppcheck-2.8/test/testvalueflow.cpp" $, 4018 $, true $, $testValueOfX_ $(@expr1073748126 "cppcheck-2.8/test/testvalueflow.cpp" $, 4018 $, code@var377 , 3U , 0 $) $) $) { $return ; }
4019: $if $(@expr1073748127 $!@expr1073748128 $assertEquals $(@expr1073748129 "cppcheck-2.8/test/testvalueflow.cpp" $, 4019 $, true $, $testValueOfX_ $(@expr1073748130 "cppcheck-2.8/test/testvalueflow.cpp" $, 4019 $, code@var377 , 3U , 17 $) $) $) { $return ; }
4020: $if $(@expr1073748131 $!@expr1073748132 $assertEquals $(@expr1073748133 "cppcheck-2.8/test/testvalueflow.cpp" $, 4020 $, false $, $testValueOfX_ $(@expr1073748134 "cppcheck-2.8/test/testvalueflow.cpp" $, 4020 $, code@var377 , 3U , 299 $) $) $) { $return ; }
4021:
4022: code@var377 =@expr1073748135 "void f() {\n    int x;\n    for (int i = 0; x = bar[i]; i++)\n        x;\n}"
4023:
4024:
4025:
4026: ;
4027: $if $(@expr1073748136 $!@expr1073748137 $assertEquals $(@expr1073748138 "cppcheck-2.8/test/testvalueflow.cpp" $, 4027 $, false $, $testValueOfX_ $(@expr1073748139 "cppcheck-2.8/test/testvalueflow.cpp" $, 4027 $, code@var377 , 4U , 0 $) $) $) { $return ; }
4028:
4029: code@var377 =@expr1073748140 "void f() {\n    const char abc[] = \"abc\";\n    int x;\n    for (x = 0; abc[x] != '\\0'; x++) {}\n    a[x] = 0;\n}"
4030:
|
4033:
4034: ;
4035: $if $(@expr1073748141 $!@expr1073748142 $assertEquals $(@expr1073748143 "cppcheck-2.8/test/testvalueflow.cpp" $, 4035 $, true $, $testValueOfX_ $(@expr1073748144 "cppcheck-2.8/test/testvalueflow.cpp" $, 4035 $, code@var377 , 5U , 3 $) $) $) { $return ; }
4036:
4037: code@var377 =@expr1073748145 "void f() {\n    int x;\n    for (int x = 0; (x = do_something()) != 0;)\n        x;\n}"
4038:
4039:
4040:
4041: ;
4042: $if $(@expr1073748146 $!@expr1073748147 $assertEquals $(@expr1073748148 "cppcheck-2.8/test/testvalueflow.cpp" $, 4042 $, false $, $testValueOfX_ $(@expr1073748149 "cppcheck-2.8/test/testvalueflow.cpp" $, 4042 $, code@var377 , 4U , 0 $) $) $) { $return ; }
4043:
4044: code@var377 =@expr1073748150 "void f() {\n    int x;\n    for (int x = 0; x < 10 && y = do_something();)\n        x;\n}"
4045:
4046:
4047:
4048: ;
4049: $todoAssertEquals $(@expr1073748151 "cppcheck-2.8/test/testvalueflow.cpp" $, 4049 $, true $, false $, $testValueOfX_ $(@expr1073748152 "cppcheck-2.8/test/testvalueflow.cpp" $, 4049 $, code@var377 , 4U , 0 $) $) ;
4050:
4051: code@var377 =@expr1073748153 "void f() {\n    int x,y;\n    for (x = 0, y = 0; x < 10, y < 10; x++, y++)\n        x;\n}"
4052:
4053:
4054:
4055: ;
4056: $if $(@expr1073748154 $!@expr1073748155 $assertEquals $(@expr1073748156 "cppcheck-2.8/test/testvalueflow.cpp" $, 4056 $, true $, $testValueOfX_ $(@expr1073748157 "cppcheck-2.8/test/testvalueflow.cpp" $, 4056 $, code@var377 , 4U , 0 $) $) $) { $return ; }
4057:
4058: code@var377 =@expr1073748158 "void foo(double recoveredX) {\n  for (double x = 1e-18; x < 1e40; x *= 1.9) {\n    double relativeError = (x - recoveredX) / x;\n  }\n}\n"
4059:
4060:
4061:
4062: ;
4063: $if $(@expr1073748159 $!@expr1073748160 $assertEquals $(@expr1073748161 "cppcheck-2.8/test/testvalueflow.cpp" $, 4063 $, false $, $testValueOfX_ $(@expr1073748162 "cppcheck-2.8/test/testvalueflow.cpp" $, 4063 $, code@var377 , 3U , 0 $) $) $) { $return ; }
4064:
4065:
4066:
4067: code@var377 =@expr1073748163 "void f(void) {\n    int bit, x;\n    for (bit = 1, x = 0; bit < 128; bit = bit << 1, x++) {\n        z = x;\n    }\n}\n"
4068:
|
4071:
4072: ;
4073: $if $(@expr1073748164 $!@expr1073748165 $assertEquals $(@expr1073748166 "cppcheck-2.8/test/testvalueflow.cpp" $, 4073 $, true $, $testValueOfX_ $(@expr1073748167 "cppcheck-2.8/test/testvalueflow.cpp" $, 4073 $, code@var377 , 4U , 0 $) $) $) { $return ; }
4074: $if $(@expr1073748168 $!@expr1073748169 $assertEquals $(@expr1073748170 "cppcheck-2.8/test/testvalueflow.cpp" $, 4074 $, true $, $testValueOfX_ $(@expr1073748171 "cppcheck-2.8/test/testvalueflow.cpp" $, 4074 $, code@var377 , 4U , 6 $) $) $) { $return ; }
4075: $if $(@expr1073748172 $!@expr1073748173 $assertEquals $(@expr1073748174 "cppcheck-2.8/test/testvalueflow.cpp" $, 4075 $, false $, $testValueOfX_ $(@expr1073748175 "cppcheck-2.8/test/testvalueflow.cpp" $, 4075 $, code@var377 , 4U , 7 $) $) $) { $return ; }
4076:
4077:
4078: code@var377 =@expr1073748176 "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x > 1\n        && x) {}  }\n}\n"
4079:
|
4082:
4083: ;
4084: $if $(@expr1073748177 $!@expr1073748178 $assertEquals $(@expr1073748179 "cppcheck-2.8/test/testvalueflow.cpp" $, 4084 $, false $, $testValueOfX_ $(@expr1073748180 "cppcheck-2.8/test/testvalueflow.cpp" $, 4084 $, code@var377 , 4U , 0 $) $) $) { $return ; }
4085:
4086: $if $(@expr1073748181 $!@expr1073748182 $assertEquals $(@expr1073748183 "cppcheck-2.8/test/testvalueflow.cpp" $, 4086 $, true $, $testValueOfXKnown_ $(@expr1073748184 "cppcheck-2.8/test/testvalueflow.cpp" $, 4086 $, code@var377 , 4U , 1 $) $) $) { $return ; }
4087:
4088: code@var377 =@expr1073748185 "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x < value\n        && x) {}  }\n}\n"
4089:
|
4092:
4093: ;
4094: $if $(@expr1073748186 $!@expr1073748187 $assertEquals $(@expr1073748188 "cppcheck-2.8/test/testvalueflow.cpp" $, 4094 $, false $, $testValueOfX_ $(@expr1073748189 "cppcheck-2.8/test/testvalueflow.cpp" $, 4094 $, code@var377 , 4U , 9 $) $) $) { $return ; }
4095:
4096:
4097: code@var377 =@expr1073748190 "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x == 0\n        || x) {}  }\n}\n"
4098:
|
4101:
4102: ;
4103: $if $(@expr1073748191 $!@expr1073748192 $assertEquals $(@expr1073748193 "cppcheck-2.8/test/testvalueflow.cpp" $, 4103 $, false $, $testValueOfX_ $(@expr1073748194 "cppcheck-2.8/test/testvalueflow.cpp" $, 4103 $, code@var377 , 4U , 0 $) $) $) { $return ; }
4104:
4105: $if $(@expr1073748195 $!@expr1073748196 $assertEquals $(@expr1073748197 "cppcheck-2.8/test/testvalueflow.cpp" $, 4105 $, true $, $testValueOfXKnown_ $(@expr1073748198 "cppcheck-2.8/test/testvalueflow.cpp" $, 4105 $, code@var377 , 4U , 1 $) $) $) { $return ; }
4106:
4107:
4108: code@var377 =@expr1073748199 "void foo() {\n  int x;\n  for (x = 0; x < 10; x++) {}\n  a = x;\n}\n"
4109:
4110:
4111:
4112: ;
4113: $if $(@expr1073748200 $!@expr1073748201 $assertEquals $(@expr1073748202 "cppcheck-2.8/test/testvalueflow.cpp" $, 4113 $, true $, $testValueOfX_ $(@expr1073748203 "cppcheck-2.8/test/testvalueflow.cpp" $, 4113 $, code@var377 , 4U , 10 $) $) $) { $return ; }
4114:
4115: code@var377 =@expr1073748204 "void foo() {\n  int x;\n  for (x = 0; 2 * x < 20; x++) {}\n  a = x;\n}\n"
4116:
4117:
4118:
4119: ;
4120: $if $(@expr1073748205 $!@expr1073748206 $assertEquals $(@expr1073748207 "cppcheck-2.8/test/testvalueflow.cpp" $, 4120 $, true $, $testValueOfX_ $(@expr1073748208 "cppcheck-2.8/test/testvalueflow.cpp" $, 4120 $, code@var377 , 4U , 10 $) $) $) { $return ; }
4121:
4122: code@var377 =@expr1073748209 "void foo() {\n  int x;\n  for (x = 0; x < 20; x++) {}\n  a = x++;\n}\n"
4123:
4124:
4125:
4126: ;
4127: $if $(@expr1073748210 $!@expr1073748211 $assertEquals $(@expr1073748212 "cppcheck-2.8/test/testvalueflow.cpp" $, 4127 $, true $, $testValueOfX_ $(@expr1073748213 "cppcheck-2.8/test/testvalueflow.cpp" $, 4127 $, code@var377 , 4U , 20 $) $) $) { $return ; }
4128:
4129: code@var377 =@expr1073748214 "void f() {\n  int x;\n  for (x = 0; x < 5; x++) {}\n  if (x == 5) {\n    abort();\n  }\n  a = x;\n}"
4130:
|
4135:
4136: ;
4137: $if $(@expr1073748215 $!@expr1073748216 $assertEquals $(@expr1073748217 "cppcheck-2.8/test/testvalueflow.cpp" $, 4137 $, false $, $testValueOfX_ $(@expr1073748218 "cppcheck-2.8/test/testvalueflow.cpp" $, 4137 $, code@var377 , 7U , 5 $) $) $) { $return ; }
4138:
4139: code@var377 =@expr1073748219 "void f() {\n  int x;\n  for (x = 0; x < 5; x++) {}\n  if (x < 5) {}\n  else return;\n  a = x;\n}"
4140:
|
4144:
4145: ;
4146: $if $(@expr1073748220 $!@expr1073748221 $assertEquals $(@expr1073748222 "cppcheck-2.8/test/testvalueflow.cpp" $, 4146 $, false $, $testValueOfX_ $(@expr1073748223 "cppcheck-2.8/test/testvalueflow.cpp" $, 4146 $, code@var377 , 6U , 5 $) $) $) { $return ; }
4147:
4148:
4149: code@var377 =@expr1073748224 "static void f() {\n  int x;\n  int ctls[10];\n  for (x = 0; x <= 10; x++) {\n    if (cond)\n      break;\n  }\n  assert(x <= 10);\n  ctls[x] = 123;\n}\n"
4150:
|
4157:
4158: ;
4159: $if $(@expr1073748225 $!@expr1073748226 $assertEquals $(@expr1073748227 "cppcheck-2.8/test/testvalueflow.cpp" $, 4159 $, false $, $testValueOfX_ $(@expr1073748228 "cppcheck-2.8/test/testvalueflow.cpp" $, 4159 $, code@var377 , 9U , 11 $) $) $) { $return ; }
4160:
4161:
4162: code@var377 =@expr1073748229 "void f() {\n  for(int i = 0; i < 20; i++)\n    n = (int)(i < 10 || abs(negWander) < abs(negTravel));\n}"
4163:
4164:
4165: ;
4166: $testValueOfX_ $(@expr1073748230 "cppcheck-2.8/test/testvalueflow.cpp" $, 4166 $, code@var377 , 0 , 0 $) ;
4167:
4168:
4169: code@var377 =@expr1073748231 "void foo(char *z, int n) {\n    int i;\n    if (fPScript) {\n        i = 1;\n    } else if (strncmp(&z[n], \"<!--\", 4) == 0) {\n        for (i = 4;;) {\n            if (z[n] && strncmp(&z[n+i], \"-->\", 3) == 0) ;\n        }\n    }\n}"
4170:
|
4177:
4178: ;
4179: $testValueOfX_ $(@expr1073748232 "cppcheck-2.8/test/testvalueflow.cpp" $, 4179 $, code@var377 , 0 , 0 $) ;
4180:
4181:
4182: code@var377 =@expr1073748233 "void f(int mask) {\n  for (int x = 10; x < 14; x++) {\n    int bit = mask & (1 << i);\n    if (bit) {\n      if (bit == (1 << 10)) {}\n      else { a = x; }\n    }\n  }\n}"
4183:
|
4189:
4190: ;
4191: $if $(@expr1073748234 $!@expr1073748235 $assertEquals $(@expr1073748236 "cppcheck-2.8/test/testvalueflow.cpp" $, 4191 $, false $, $testValueOfX_ $(@expr1073748237 "cppcheck-2.8/test/testvalueflow.cpp" $, 4191 $, code@var377 , 6U , 10 $) $) $) { $return ; }
4192:
4193:
4194: code@var377 =@expr1073748238 "void f() {\n  int sz = 4;\n  int x,y;\n  for(x=0,y=0; x < sz && y < 10; x++)\n    a = x;\n}"
4195:
|
4198:
4199: ;
4200: $if $(@expr1073748239 $!@expr1073748240 $assertEquals $(@expr1073748241 "cppcheck-2.8/test/testvalueflow.cpp" $, 4200 $, true $, $testValueOfX_ $(@expr1073748242 "cppcheck-2.8/test/testvalueflow.cpp" $, 4200 $, code@var377 , 5U , 3 $) $) $) { $return ; }
4201:
4202: code@var377 =@expr1073748243 "void f() {\n    int x;\n    for (x = 0; x < 10; x++)\n        x;\n}"
4203:
4204:
4205:
4206: ;
4207: std ::@expr1073748244 list < ValueFlow ::@expr1073748245 Value > values@var379 ; values@var379 =@expr1073748246 $tokenValues_ $(@expr1073748247 "cppcheck-2.8/test/testvalueflow.cpp" $, 4207 $, code@var377 , "x <" $) ;
4208: $if $(@expr1073748248 $!@expr1073748249 $assert_ $(@expr1073748250 "cppcheck-2.8/test/testvalueflow.cpp" $, 4208 $, $(@expr1073748251 std ::@expr1073748252 none_of (@expr1073748253 values@var379 .@expr1073748254 begin (@expr1073748255 ) , values@var379 .@expr1073748256 end (@expr1073748257 ) , std ::@expr1073748258 mem_fn (@expr1073748259 &@expr1073748260 ValueFlow ::@expr1073748261 Value ::@expr1073748262 isUninitValue@expr1073748034 ) ) $) $) $) { $return ; }
4209:
4210:
4211: code@var377 =@expr1073748263 "void f() {\n    unsigned int x = 0;\n    for (x = 0; x < 2; x++) {}\n}\n"
4212:
4213:
4214: ;
4215: value@var378 =@expr1073748264 $valueOfTok_ $(@expr1073748265 code@var377 $, "x <" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4215 $) ;
4216: $if $(@expr1073748266 $!@expr1073748267 $assert_ $(@expr1073748268 "cppcheck-2.8/test/testvalueflow.cpp" $, 4216 $, value@var378 .@expr6445 isPossible (@expr6446 ) $) $) { $return ; }
4217: $if $(@expr1073748271 $!@expr1073748272 $assertEquals $(@expr1073748273 "cppcheck-2.8/test/testvalueflow.cpp" $, 4217 $, 0 $, value@var378 .@expr6450 intvalue@var380 $) $) { $return ; }
4218:
4219: code@var377 =@expr1073748275 "void f() {\n    unsigned int x = 0;\n    for (;x < 2; x++) {}\n}\n"
4220:
4221:
4222: ;
4223: value@var378 =@expr1073748276 $valueOfTok_ $(@expr1073748277 code@var377 $, "x <" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4223 $) ;
4224: $if $(@expr1073748278 $!@expr1073748279 $assert_ $(@expr1073748280 "cppcheck-2.8/test/testvalueflow.cpp" $, 4224 $, value@var378 .@expr6445 isPossible (@expr6446 ) $) $) { $return ; }
4225: $if $(@expr1073748283 $!@expr1073748284 $assertEquals $(@expr1073748285 "cppcheck-2.8/test/testvalueflow.cpp" $, 4225 $, 0 $, value@var378 .@expr6450 intvalue@var380 $) $) { $return ; }
4226:
4227: code@var377 =@expr1073748287 "void f() {\n    unsigned int x = 1;\n    for (x = 0; x < 2; x++) {}\n}\n"
4228:
4229:
4230: ;
4231: value@var378 =@expr1073748288 $valueOfTok_ $(@expr1073748289 code@var377 $, "x <" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4231 $) ;
4232: $if $(@expr1073748290 $!@expr1073748291 $assert_ $(@expr1073748292 "cppcheck-2.8/test/testvalueflow.cpp" $, 4232 $, !@expr1073748293 value@var378 .@expr1073748294 isKnown (@expr1073748295 ) $) $) { $return ; }
4233:
4234: code@var377 =@expr1073748296 "void b(int* a) {\n    for (*a = 1;;)\n        if (0) {}\n}\nstruct S { int* a; }\nvoid b(S& s) {\n    for (*s.a = 1;;)\n        if (0) {}\n}\nstruct T { S s; };\nvoid b(T& t) {\n    for (*&t.s.a[0] = 1;;)\n        if (0) {}\n}\n"
4235:
|
4246:
4247: ;
4248: $testValueOfX_ $(@expr1073748297 "cppcheck-2.8/test/testvalueflow.cpp" $, 4248 $, code@var377 , 0 , 0 $) ;
4249:
4250: code@var377 =@expr1073748298 "void f() {\n    int p[2];\n    for (p[0] = 0; p[0] <= 2; p[0]++) {\n        for (p[1] = 0; p[1] <= 2 - p[0]; p[1]++) {}\n    }\n}\n"
4251:
|
4254:
4255: ;
4256: $testValueOfX_ $(@expr1073748299 "cppcheck-2.8/test/testvalueflow.cpp" $, 4256 $, code@var377 , 0 , 0 $) ;
4257:
4258: code@var377 =@expr1073748300 "struct C {\n    int& v() { return i; }\n    int& w() { return j; }\n    int i{}, j{};\n};\nvoid f() {\n    C c;\n    for (c.w() = 0; c.w() < 2; c.w()++) {\n        for (c.v() = 0; c.v() < 24; c.v()++) {}\n    }\n}\n"
4259:
|
4267:
4268: ;
4269: $testValueOfX_ $(@expr1073748301 "cppcheck-2.8/test/testvalueflow.cpp" $, 4269 $, code@var377 , 0 , 0 $) ;
4270:
4271:
4272: code@var377 =@expr1073748302 "struct a {\n    long b;\n    long c[6];\n    long d;\n};\nvoid e(long) {\n    a f = {0};\n    for (f.d = 0; 2; f.d++)\n        e(f.c[f.b]);\n}\n"
4273:
|
4280:
4281: ;
4282: values@var379 =@expr1073748303 $tokenValues_ $(@expr1073748304 "cppcheck-2.8/test/testvalueflow.cpp" $, 4282 $, code@var377 , ". c" $) ;
4283: $if $(@expr1073748305 $!@expr1073748306 $assertEquals $(@expr1073748307 "cppcheck-2.8/test/testvalueflow.cpp" $, 4283 $, true $, values@var379 .@expr6484 empty (@expr6485 ) $) $) { $return ; }
4284: values@var379 =@expr1073748310 $tokenValues_ $(@expr1073748311 "cppcheck-2.8/test/testvalueflow.cpp" $, 4284 $, code@var377 , "[ f . b" $) ;
4285: $if $(@expr1073748312 $!@expr1073748313 $assertEquals $(@expr1073748314 "cppcheck-2.8/test/testvalueflow.cpp" $, 4285 $, true $, values@var379 .@expr6484 empty (@expr6485 ) $) $) { $return ; }
4286: }
4287:
4288: void valueFlowSubFunction ( ) {
4289: const char * code@var381 ;
4290:
4291: code@var381 =@expr1073748317 "int f(int size) {\n    int x = 0;\n    if(size>16) {\n        x = size;\n        int a = x;\n    }\n    return x;\n}\nvoid g(){\n    f(42);\n}"
4292:
|
4300:
4301: ;
4302: $if $(@expr1073748318 $!@expr1073748319 $assertEquals $(@expr1073748320 "cppcheck-2.8/test/testvalueflow.cpp" $, 4302 $, true $, $testValueOfX_ $(@expr1073748321 "cppcheck-2.8/test/testvalueflow.cpp" $, 4302 $, code@var381 , 5U , 17 $) $) $) { $return ; }
4303: $if $(@expr1073748322 $!@expr1073748323 $assertEquals $(@expr1073748324 "cppcheck-2.8/test/testvalueflow.cpp" $, 4303 $, true $, $testValueOfX_ $(@expr1073748325 "cppcheck-2.8/test/testvalueflow.cpp" $, 4303 $, code@var381 , 5U , 42 $) $) $) { $return ; }
4304: $if $(@expr1073748326 $!@expr1073748327 $assertEquals $(@expr1073748328 "cppcheck-2.8/test/testvalueflow.cpp" $, 4304 $, true $, $testValueOfX_ $(@expr1073748329 "cppcheck-2.8/test/testvalueflow.cpp" $, 4304 $, code@var381 , 7U , 0 $) $) $) { $return ; }
4305: $if $(@expr1073748330 $!@expr1073748331 $assertEquals $(@expr1073748332 "cppcheck-2.8/test/testvalueflow.cpp" $, 4305 $, true $, $testValueOfX_ $(@expr1073748333 "cppcheck-2.8/test/testvalueflow.cpp" $, 4305 $, code@var381 , 7U , 17 $) $) $) { $return ; }
4306: $if $(@expr1073748334 $!@expr1073748335 $assertEquals $(@expr1073748336 "cppcheck-2.8/test/testvalueflow.cpp" $, 4306 $, true $, $testValueOfX_ $(@expr1073748337 "cppcheck-2.8/test/testvalueflow.cpp" $, 4306 $, code@var381 , 7U , 42 $) $) $) { $return ; }
4307:
4308: code@var381 =@expr1073748338 "void g(int, int) {}\nvoid f(int x, int y) {\n    g(x, y);\n}\nvoid h() {\n    f(0, 0);\n    f(1, 1);\n    f(2, 2);\n    f(3, 3);\n    f(4, 4);\n    f(5, 5);\n    f(6, 6);\n    f(7, 7);\n    f(8, 8);\n    f(9, 9);\n}\n"
4309:
|
4322:
4323: ;
4324: $if $(@expr1073748339 $!@expr1073748340 $assertEquals $(@expr1073748341 "cppcheck-2.8/test/testvalueflow.cpp" $, 4324 $, true $, $testValueOfX_ $(@expr1073748342 "cppcheck-2.8/test/testvalueflow.cpp" $, 4324 $, code@var381 , 3U , 0 $) $) $) { $return ; }
4325: $if $(@expr1073748343 $!@expr1073748344 $assertEquals $(@expr1073748345 "cppcheck-2.8/test/testvalueflow.cpp" $, 4325 $, true $, $testValueOfX_ $(@expr1073748346 "cppcheck-2.8/test/testvalueflow.cpp" $, 4325 $, code@var381 , 3U , 1 $) $) $) { $return ; }
4326: $if $(@expr1073748347 $!@expr1073748348 $assertEquals $(@expr1073748349 "cppcheck-2.8/test/testvalueflow.cpp" $, 4326 $, true $, $testValueOfX_ $(@expr1073748350 "cppcheck-2.8/test/testvalueflow.cpp" $, 4326 $, code@var381 , 3U , 2 $) $) $) { $return ; }
4327: $if $(@expr1073748351 $!@expr1073748352 $assertEquals $(@expr1073748353 "cppcheck-2.8/test/testvalueflow.cpp" $, 4327 $, true $, $testValueOfX_ $(@expr1073748354 "cppcheck-2.8/test/testvalueflow.cpp" $, 4327 $, code@var381 , 3U , 3 $) $) $) { $return ; }
4328: $if $(@expr1073748355 $!@expr1073748356 $assertEquals $(@expr1073748357 "cppcheck-2.8/test/testvalueflow.cpp" $, 4328 $, true $, $testValueOfX_ $(@expr1073748358 "cppcheck-2.8/test/testvalueflow.cpp" $, 4328 $, code@var381 , 3U , 4 $) $) $) { $return ; }
4329: $if $(@expr1073748359 $!@expr1073748360 $assertEquals $(@expr1073748361 "cppcheck-2.8/test/testvalueflow.cpp" $, 4329 $, true $, $testValueOfX_ $(@expr1073748362 "cppcheck-2.8/test/testvalueflow.cpp" $, 4329 $, code@var381 , 3U , 5 $) $) $) { $return ; }
4330: $if $(@expr1073748363 $!@expr1073748364 $assertEquals $(@expr1073748365 "cppcheck-2.8/test/testvalueflow.cpp" $, 4330 $, true $, $testValueOfX_ $(@expr1073748366 "cppcheck-2.8/test/testvalueflow.cpp" $, 4330 $, code@var381 , 3U , 6 $) $) $) { $return ; }
4331: $if $(@expr1073748367 $!@expr1073748368 $assertEquals $(@expr1073748369 "cppcheck-2.8/test/testvalueflow.cpp" $, 4331 $, true $, $testValueOfX_ $(@expr1073748370 "cppcheck-2.8/test/testvalueflow.cpp" $, 4331 $, code@var381 , 3U , 7 $) $) $) { $return ; }
4332: $if $(@expr1073748371 $!@expr1073748372 $assertEquals $(@expr1073748373 "cppcheck-2.8/test/testvalueflow.cpp" $, 4332 $, true $, $testValueOfX_ $(@expr1073748374 "cppcheck-2.8/test/testvalueflow.cpp" $, 4332 $, code@var381 , 3U , 8 $) $) $) { $return ; }
4333: $if $(@expr1073748375 $!@expr1073748376 $assertEquals $(@expr1073748377 "cppcheck-2.8/test/testvalueflow.cpp" $, 4333 $, true $, $testValueOfX_ $(@expr1073748378 "cppcheck-2.8/test/testvalueflow.cpp" $, 4333 $, code@var381 , 3U , 9 $) $) $) { $return ; }
4334:
4335: code@var381 =@expr1073748379 "int f(int i, int j) {\n    if (i == j) {\n        int x = i;\n        return x;\n    }\n    return 0;\n}\nint g(int x) {\n    f(x, -1);\n}\n"
4336:
|
4343:
4344: ;
4345: $if $(@expr1073748380 $!@expr1073748381 $assertEquals $(@expr1073748382 "cppcheck-2.8/test/testvalueflow.cpp" $, 4345 $, true $, $testValueOfX_ $(@expr1073748383 "cppcheck-2.8/test/testvalueflow.cpp" $, 4345 $, code@var381 , 4U , -1 $) $) $) { $return ; }
4346: }
4347: void valueFlowFunctionReturn ( ) {
4348: const char * code@var382 ;
4349:
4350: code@var382 =@expr1073748391 "int f1(int x) {\n  return x+1;\n}\nvoid f2() {\n    x = 10 - f1(2);\n}"
4351:
|
4354:
4355: ;
4356: $if $(@expr1073748392 $!@expr1073748393 $assertEquals $(@expr1073748394 "cppcheck-2.8/test/testvalueflow.cpp" $, 4356 $, 7 $, $(@expr1073748395 $valueOfTok_ $(@expr1073748396 code@var382 $, "-" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4356 $) .@expr1073748397 intvalue@expr1073748384 $) $) $) { $return ; }
4357: $if $(@expr1073748398 $!@expr1073748399 $assertEquals $(@expr1073748400 "cppcheck-2.8/test/testvalueflow.cpp" $, 4357 $, true $, $(@expr1073748401 $valueOfTok_ $(@expr1073748402 code@var382 $, "-" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4357 $) .@expr1073748403 isKnown (@expr1073748404 ) $) $) $) { $return ; }
4358:
4359: code@var382 =@expr1073748405 "int add(int x, int y) {\n  return x+y;\n}\nvoid f2() {\n    x = 2 * add(10+1,4);\n}"
4360:
|
4363:
4364: ;
4365: $if $(@expr1073748406 $!@expr1073748407 $assertEquals $(@expr1073748408 "cppcheck-2.8/test/testvalueflow.cpp" $, 4365 $, 30 $, $(@expr1073748409 $valueOfTok_ $(@expr1073748410 code@var382 $, "*" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4365 $) .@expr1073748411 intvalue@expr1073748385 $) $) $) { $return ; }
4366: $if $(@expr1073748412 $!@expr1073748413 $assertEquals $(@expr1073748414 "cppcheck-2.8/test/testvalueflow.cpp" $, 4366 $, true $, $(@expr1073748415 $valueOfTok_ $(@expr1073748416 code@var382 $, "*" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4366 $) .@expr1073748417 isKnown (@expr1073748418 ) $) $) $) { $return ; }
4367:
4368: code@var382 =@expr1073748419 "int one() { return 1; }\nvoid f() { x = 2 * one(); }"
4369: ;
4370: $if $(@expr1073748420 $!@expr1073748421 $assertEquals $(@expr1073748422 "cppcheck-2.8/test/testvalueflow.cpp" $, 4370 $, 2 $, $(@expr1073748423 $valueOfTok_ $(@expr1073748424 code@var382 $, "*" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4370 $) .@expr1073748425 intvalue@expr1073748386 $) $) $) { $return ; }
4371: $if $(@expr1073748426 $!@expr1073748427 $assertEquals $(@expr1073748428 "cppcheck-2.8/test/testvalueflow.cpp" $, 4371 $, true $, $(@expr1073748429 $valueOfTok_ $(@expr1073748430 code@var382 $, "*" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4371 $) .@expr1073748431 isKnown (@expr1073748432 ) $) $) $) { $return ; }
4372:
4373: code@var382 =@expr1073748433 "int add(int x, int y) {\n  return x+y;\n}\nvoid f2() {\n    x = 2 * add(1,add(2,3));\n}"
4374:
|
4377:
4378: ;
4379: $if $(@expr1073748434 $!@expr1073748435 $assertEquals $(@expr1073748436 "cppcheck-2.8/test/testvalueflow.cpp" $, 4379 $, 12 $, $(@expr1073748437 $valueOfTok_ $(@expr1073748438 code@var382 $, "*" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4379 $) .@expr1073748439 intvalue@expr1073748387 $) $) $) { $return ; }
4380: $if $(@expr1073748440 $!@expr1073748441 $assertEquals $(@expr1073748442 "cppcheck-2.8/test/testvalueflow.cpp" $, 4380 $, true $, $(@expr1073748443 $valueOfTok_ $(@expr1073748444 code@var382 $, "*" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4380 $) .@expr1073748445 isKnown (@expr1073748446 ) $) $) $) { $return ; }
4381:
4382: code@var382 =@expr1073748447 "int f(int i, X x) {\n    if (i)\n        return g(std::move(x));\n    g(x);\n    return 0;\n}"
4383:
|
4386:
4387: ;
4388: $if $(@expr1073748448 $!@expr1073748449 $assertEquals $(@expr1073748450 "cppcheck-2.8/test/testvalueflow.cpp" $, 4388 $, false $, $testValueOfX_ $(@expr1073748451 "cppcheck-2.8/test/testvalueflow.cpp" $, 4388 $, code@var382 , 4U , ValueFlow ::@expr1073748452 Value ::@expr1073748453 MoveKind ::@expr1073748454 MovedVariable@expr1073748388 $) $) $) { $return ; }
4389:
4390: code@var382 =@expr1073748455 "class A\n{\n    int f1(int x) {\n        return x+1;\n    }\n    void f2() {\n        x = 10 - f1(2);\n    }\n};"
4391:
|
4397:
4398: ;
4399: $if $(@expr1073748456 $!@expr1073748457 $assertEquals $(@expr1073748458 "cppcheck-2.8/test/testvalueflow.cpp" $, 4399 $, 7 $, $(@expr1073748459 $valueOfTok_ $(@expr1073748460 code@var382 $, "-" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4399 $) .@expr1073748461 intvalue@expr1073748389 $) $) $) { $return ; }
4400: $if $(@expr1073748462 $!@expr1073748463 $assertEquals $(@expr1073748464 "cppcheck-2.8/test/testvalueflow.cpp" $, 4400 $, true $, $(@expr1073748465 $valueOfTok_ $(@expr1073748466 code@var382 $, "-" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4400 $) .@expr1073748467 isKnown (@expr1073748468 ) $) $) $) { $return ; }
4401:
4402: code@var382 =@expr1073748469 "class A\n{\n    virtual int f1(int x) {\n        return x+1;\n    }\n    void f2() {\n        x = 10 - f1(2);\n    }\n};"
4403:
|
4409:
4410: ;
4411: $todoAssertEquals $(@expr1073748470 "cppcheck-2.8/test/testvalueflow.cpp" $, 4411 $, 7 $, 0 $, $valueOfTok_ $(@expr1073748471 code@var382 $, "-" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4411 $) .@expr1073748472 intvalue@expr1073748390 $) ;
4412: $if $(@expr1073748473 $!@expr1073748474 $assertEquals $(@expr1073748475 "cppcheck-2.8/test/testvalueflow.cpp" $, 4412 $, false $, $(@expr1073748476 $valueOfTok_ $(@expr1073748477 code@var382 $, "-" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4412 $) .@expr1073748478 isKnown (@expr1073748479 ) $) $) $) { $return ; }
4413:
4414: code@var382 =@expr1073748480 "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base* b) {\n    int x = b->f();\n    return x;\n}\n"
4415:
|
4419:
4420: ;
4421: $todoAssertEquals $(@expr1073748481 "cppcheck-2.8/test/testvalueflow.cpp" $, 4421 $, true $, false $, $testValueOfX_ $(@expr1073748482 "cppcheck-2.8/test/testvalueflow.cpp" $, 4421 $, code@var382 , 6U , 0 $) $) ;
4422: $if $(@expr1073748483 $!@expr1073748484 $assertEquals $(@expr1073748485 "cppcheck-2.8/test/testvalueflow.cpp" $, 4422 $, false $, $testValueOfXKnown_ $(@expr1073748486 "cppcheck-2.8/test/testvalueflow.cpp" $, 4422 $, code@var382 , 6U , 0 $) $) $) { $return ; }
4423:
4424: code@var382 =@expr1073748487 "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base& b) {\n    int x = b.f();\n    return x;\n}\n"
4425:
|
4429:
4430: ;
4431: $todoAssertEquals $(@expr1073748488 "cppcheck-2.8/test/testvalueflow.cpp" $, 4431 $, true $, false $, $testValueOfX_ $(@expr1073748489 "cppcheck-2.8/test/testvalueflow.cpp" $, 4431 $, code@var382 , 6U , 0 $) $) ;
4432: $if $(@expr1073748490 $!@expr1073748491 $assertEquals $(@expr1073748492 "cppcheck-2.8/test/testvalueflow.cpp" $, 4432 $, false $, $testValueOfXKnown_ $(@expr1073748493 "cppcheck-2.8/test/testvalueflow.cpp" $, 4432 $, code@var382 , 6U , 0 $) $) $) { $return ; }
4433:
4434: code@var382 =@expr1073748494 "struct base {\n    virtual int f() { return 0; }\n};\nstruct derived {\n    virtual int f() { return 1; }\n};\nvoid g(derived* d) {\n    base* b = d;\n    int x = b->f();\n    return x;\n}\n"
4435:
|
4443:
4444: ;
4445: $if $(@expr1073748495 $!@expr1073748496 $assertEquals $(@expr1073748497 "cppcheck-2.8/test/testvalueflow.cpp" $, 4445 $, false $, $testValueOfX_ $(@expr1073748498 "cppcheck-2.8/test/testvalueflow.cpp" $, 4445 $, code@var382 , 10U , 0 $) $) $) { $return ; }
4446: $todoAssertEquals $(@expr1073748499 "cppcheck-2.8/test/testvalueflow.cpp" $, 4446 $, true $, false $, $testValueOfX_ $(@expr1073748500 "cppcheck-2.8/test/testvalueflow.cpp" $, 4446 $, code@var382 , 10U , 1 $) $) ;
4447:
4448: code@var382 =@expr1073748501 "struct base {\n    virtual int f() final { return 0; }\n};\nvoid g(base* b) {\n    int x = b->f();\n    return x;\n}\n"
4449:
|
4453:
4454: ;
4455: $if $(@expr1073748502 $!@expr1073748503 $assertEquals $(@expr1073748504 "cppcheck-2.8/test/testvalueflow.cpp" $, 4455 $, true $, $testValueOfX_ $(@expr1073748505 "cppcheck-2.8/test/testvalueflow.cpp" $, 4455 $, code@var382 , 6U , 0 $) $) $) { $return ; }
4456: }
4457:
4458: void valueFlowFunctionDefaultParameter ( ) {
4459: const char * code@var383 ;
4460:
4461: code@var383 =@expr1073748506 "class continuous_src_time {\n    continuous_src_time(std::complex<double> f, double st = 0.0, double et = infinity) {}\n};"
4462:
4463: ;
4464: $testValueOfX_ $(@expr1073748507 "cppcheck-2.8/test/testvalueflow.cpp" $, 4464 $, code@var383 , 2U , 2 $) ;
4465: }
4466:
4467: bool isNotKnownValues ( const char code@var384 [ ] , const char str@var385 [ ] ) {
4468: for (@expr1073748508 const ValueFlow ::@expr1073748509 Value &@expr1073748510 v@var386 :@expr1073748511 $tokenValues_ $(@expr1073748512 "cppcheck-2.8/test/testvalueflow.cpp" $, 4468 $, code@var384 , str@var385 $) ) {
4469: if (@expr1073748513 v@var386 .@expr1073748514 isKnown (@expr1073748515 ) ) {
4470: return false ; }
4471: }
4472: return true ;
4473: }
4474:
4475: void knownValue ( ) {
4476: const char * code@var387 ;
4477: ValueFlow ::@expr1073748516 Value value@var388 ;
4478:
4479: $if $(@expr1073748517 $!@expr1073748518 $assert_ $(@expr1073748519 "cppcheck-2.8/test/testvalueflow.cpp" $, 4479 $, $(@expr1073748520 $valueOfTok_ $(@expr1073748521 "x = 1;" $, "1" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4479 $) .@expr1073748522 isKnown (@expr1073748523 ) $) $) $) { $return ; }
4480:
4481:
4482: code@var387 =@expr1073748524 "void f() {\n  int x = 1;\n  return x + 2;\n}"
4483:
4484:
4485: ;
4486: value@var388 =@expr1073748525 $valueOfTok_ $(@expr1073748526 code@var387 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4486 $) ;
4487: $if $(@expr1073748527 $!@expr1073748528 $assertEquals $(@expr1073748529 "cppcheck-2.8/test/testvalueflow.cpp" $, 4487 $, 3 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4488: $if $(@expr1073748531 $!@expr1073748532 $assert_ $(@expr1073748533 "cppcheck-2.8/test/testvalueflow.cpp" $, 4488 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4489:
4490: {
4491: code@var387 =@expr1073748536 "void f() {\n  int x = 15;\n  if (x == 15) { x += 7; }\n}"
4492:
4493:
4494: ;
4495: value@var388 =@expr1073748537 $valueOfTok_ $(@expr1073748538 code@var387 $, "==" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4495 $) ;
4496: $if $(@expr1073748539 $!@expr1073748540 $assertEquals $(@expr1073748541 "cppcheck-2.8/test/testvalueflow.cpp" $, 4496 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4497: $if $(@expr1073748543 $!@expr1073748544 $assert_ $(@expr1073748545 "cppcheck-2.8/test/testvalueflow.cpp" $, 4497 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4498:
4499: code@var387 =@expr1073748548 "int f() {\n    int a = 0, x = 0;\n    a = index();\n    if (a != 0)\n        x = next();\n    return x + 1;\n}\n"
4500:
|
4504:
4505: ;
4506: value@var388 =@expr1073748549 $valueOfTok_ $(@expr1073748550 code@var387 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4506 $) ;
4507: $if $(@expr1073748551 $!@expr1073748552 $assert_ $(@expr1073748553 "cppcheck-2.8/test/testvalueflow.cpp" $, 4507 $, value@var388 .@expr6730 isPossible (@expr6731 ) $) $) { $return ; }
4508: }
4509:
4510: code@var387 =@expr1073748556 "void f() {\n  int x;\n  if (ab) { x = 7; }\n  return x + 2;\n}"
4511:
4512:
4513:
4514: ;
4515: value@var388 =@expr1073748557 $valueOfTok_ $(@expr1073748558 code@var387 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4515 $) ;
4516: $if $(@expr1073748559 $!@expr1073748560 $assertEquals $(@expr1073748561 "cppcheck-2.8/test/testvalueflow.cpp" $, 4516 $, 9 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4517: $if $(@expr1073748563 $!@expr1073748564 $assert_ $(@expr1073748565 "cppcheck-2.8/test/testvalueflow.cpp" $, 4517 $, value@var388 .@expr6730 isPossible (@expr6731 ) $) $) { $return ; }
4518:
4519: code@var387 =@expr1073748568 "void f(int c) {\n  int x = 0;\n  if (c) {} else { x++; }\n  return x + 2;\n}"
4520:
4521:
4522:
4523: ;
4524: $if $(@expr1073748569 $!@expr1073748570 $assert_ $(@expr1073748571 "cppcheck-2.8/test/testvalueflow.cpp" $, 4524 $, isNotKnownValues (@expr6748 code@var387 , "+" ) $) $) { $return ; }
4525:
4526: code@var387 =@expr1073748573 "void f() {\n  int x = 0;\n  dostuff(&x);\n  if (x < 0) {}\n}\n"
4527:
4528:
4529:
4530: ;
4531: $if $(@expr1073748574 $!@expr1073748575 $assert_ $(@expr1073748576 "cppcheck-2.8/test/testvalueflow.cpp" $, 4531 $, isNotKnownValues (@expr6753 code@var387 , "<" ) $) $) { $return ; }
4532:
4533: code@var387 =@expr1073748578 "void f() {\n  int x = 0;\n  dostuff(0 ? ptr : &x);\n  if (x < 0) {}\n}\n"
4534:
4535:
4536:
4537: ;
4538: $if $(@expr1073748579 $!@expr1073748580 $assert_ $(@expr1073748581 "cppcheck-2.8/test/testvalueflow.cpp" $, 4538 $, isNotKnownValues (@expr6753 code@var387 , "<" ) $) $) { $return ; }
4539:
4540: code@var387 =@expr1073748583 "void f() {\n  int x = 0;\n  dostuff(unknown ? ptr : &x);\n  if (x < 0) {}\n}\n"
4541:
4542:
4543:
4544: ;
4545: $if $(@expr1073748584 $!@expr1073748585 $assert_ $(@expr1073748586 "cppcheck-2.8/test/testvalueflow.cpp" $, 4545 $, isNotKnownValues (@expr6753 code@var387 , "<" ) $) $) { $return ; }
4546:
4547: code@var387 =@expr1073748588 "void f() {\n  int x = 0;\n  fred.dostuff(x);\n  if (x < 0) {}\n}\n"
4548:
4549:
4550:
4551: ;
4552: $if $(@expr1073748589 $!@expr1073748590 $assert_ $(@expr1073748591 "cppcheck-2.8/test/testvalueflow.cpp" $, 4552 $, isNotKnownValues (@expr6753 code@var387 , "<" ) $) $) { $return ; }
4553:
4554: code@var387 =@expr1073748593 "void dostuff(int x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
4555:
|
4558:
4559: ;
4560: value@var388 =@expr1073748594 $valueOfTok_ $(@expr1073748595 code@var387 $, "<" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4560 $) ;
4561: $if $(@expr1073748596 $!@expr1073748597 $assertEquals $(@expr1073748598 "cppcheck-2.8/test/testvalueflow.cpp" $, 4561 $, 0 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4562: $if $(@expr1073748600 $!@expr1073748601 $assert_ $(@expr1073748602 "cppcheck-2.8/test/testvalueflow.cpp" $, 4562 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4563:
4564: code@var387 =@expr1073748605 "void dostuff(int & x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
4565:
|
4568:
4569: ;
4570: $if $(@expr1073748606 $!@expr1073748607 $assert_ $(@expr1073748608 "cppcheck-2.8/test/testvalueflow.cpp" $, 4570 $, isNotKnownValues (@expr6753 code@var387 , "<" ) $) $) { $return ; }
4571:
4572: code@var387 =@expr1073748610 "void dostuff(const int & x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
4573:
|
4576:
4577: ;
4578: value@var388 =@expr1073748611 $valueOfTok_ $(@expr1073748612 code@var387 $, "<" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4578 $) ;
4579: $if $(@expr1073748613 $!@expr1073748614 $assertEquals $(@expr1073748615 "cppcheck-2.8/test/testvalueflow.cpp" $, 4579 $, 0 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4580: $if $(@expr1073748617 $!@expr1073748618 $assert_ $(@expr1073748619 "cppcheck-2.8/test/testvalueflow.cpp" $, 4580 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4581:
4582: code@var387 =@expr1073748622 "void f() {\n  int x = 0;\n  do {\n    if (x < 0) {}\n    fred.dostuff(x);\n  } while (abc);\n}\n"
4583:
|
4587:
4588: ;
4589: $if $(@expr1073748623 $!@expr1073748624 $assert_ $(@expr1073748625 "cppcheck-2.8/test/testvalueflow.cpp" $, 4589 $, isNotKnownValues (@expr6753 code@var387 , "<" ) $) $) { $return ; }
4590:
4591: code@var387 =@expr1073748627 "int x;\nvoid f() {\n  x = 4;\n  while (1) {\n    a = x+2;\n    dostuff();\n  }\n}"
4592:
|
4597:
4598: ;
4599: $if $(@expr1073748628 $!@expr1073748629 $assert_ $(@expr1073748630 "cppcheck-2.8/test/testvalueflow.cpp" $, 4599 $, isNotKnownValues (@expr6748 code@var387 , "+" ) $) $) { $return ; }
4600:
4601: code@var387 =@expr1073748632 "void f() {\n  int x = 0;\n  if (y) { dostuff(x); }\n  if (!x) {}\n}\n"
4602:
4603:
4604:
4605: ;
4606: $if $(@expr1073748633 $!@expr1073748634 $assert_ $(@expr1073748635 "cppcheck-2.8/test/testvalueflow.cpp" $, 4606 $, isNotKnownValues (@expr6812 code@var387 , "!" ) $) $) { $return ; }
4607:
4608: code@var387 =@expr1073748637 "void f() {\n  int x = 0;\n  MACRO( v, { if (y) { x++; } } );\n  if (!x) {}\n}\n"
4609:
4610:
4611:
4612: ;
4613: $if $(@expr1073748638 $!@expr1073748639 $assert_ $(@expr1073748640 "cppcheck-2.8/test/testvalueflow.cpp" $, 4613 $, isNotKnownValues (@expr6812 code@var387 , "!" ) $) $) { $return ; }
4614:
4615: code@var387 =@expr1073748642 "void f() {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (cond) {\n      x = 1;\n      break;\n    }\n  }\n  if (!x) {}\n}"
4616:
|
4623:
4624: ;
4625: $if $(@expr1073748643 $!@expr1073748644 $assert_ $(@expr1073748645 "cppcheck-2.8/test/testvalueflow.cpp" $, 4625 $, isNotKnownValues (@expr6812 code@var387 , "!" ) $) $) { $return ; }
4626:
4627: code@var387 =@expr1073748647 "void f() {\n  bool b = false;\n  for(int x = 3; !b && x < 10; x++) {\n    for(int y = 4; !b && y < 20; y++) {}\n  }\n}"
4628:
|
4631:
4632: ;
4633: value@var388 =@expr1073748648 $valueOfTok_ $(@expr1073748649 code@var387 $, "!" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4633 $) ;
4634: $if $(@expr1073748650 $!@expr1073748651 $assertEquals $(@expr1073748652 "cppcheck-2.8/test/testvalueflow.cpp" $, 4634 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4635: $if $(@expr1073748654 $!@expr1073748655 $assert_ $(@expr1073748656 "cppcheck-2.8/test/testvalueflow.cpp" $, 4635 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4636:
4637: code@var387 =@expr1073748659 "void f() {\n  int x = 0;\n  switch (state) {\n  case 1:\n    x = 1;\n    break;\n  }\n  if (!x) {}\n}"
4638:
|
4644:
4645: ;
4646: $if $(@expr1073748660 $!@expr1073748661 $assert_ $(@expr1073748662 "cppcheck-2.8/test/testvalueflow.cpp" $, 4646 $, isNotKnownValues (@expr6812 code@var387 , "!" ) $) $) { $return ; }
4647:
4648: code@var387 =@expr1073748664 "void f() {\n  int x = 0;\n  switch (a) {\n  case 1:\n    x = 1;\n  case 2:\n    if (!x) {}\n  }\n}"
4649:
|
4655:
4656: ;
4657: $if $(@expr1073748665 $!@expr1073748666 $assert_ $(@expr1073748667 "cppcheck-2.8/test/testvalueflow.cpp" $, 4657 $, isNotKnownValues (@expr6812 code@var387 , "!" ) $) $) { $return ; }
4658:
4659: code@var387 =@expr1073748669 "void f() {\n  int x = 0;\n  while (!x) {\n    scanf(\"%d\", &x);\n  }\n}"
4660:
|
4663:
4664: ;
4665: value@var388 =@expr1073748670 $valueOfTok_ $(@expr1073748671 code@var387 $, "!" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4665 $) ;
4666: $if $(@expr1073748672 $!@expr1073748673 $assertEquals $(@expr1073748674 "cppcheck-2.8/test/testvalueflow.cpp" $, 4666 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4667: $if $(@expr1073748676 $!@expr1073748677 $assert_ $(@expr1073748678 "cppcheck-2.8/test/testvalueflow.cpp" $, 4667 $, value@var388 .@expr6730 isPossible (@expr6731 ) $) $) { $return ; }
4668:
4669: code@var387 =@expr1073748681 "void f() {\n  int x = 0;\n  do { } while (++x < 12);\n}"
4670:
4671:
4672: ;
4673: $if $(@expr1073748682 $!@expr1073748683 $assert_ $(@expr1073748684 "cppcheck-2.8/test/testvalueflow.cpp" $, 4673 $, isNotKnownValues (@expr6753 code@var387 , "<" ) $) $) { $return ; }
4674:
4675: code@var387 =@expr1073748686 "void f() {\n  static int x = 0;\n  return x + 1;\n}\n"
4676:
4677:
4678: ;
4679: value@var388 =@expr1073748687 $valueOfTok_ $(@expr1073748688 code@var387 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4679 $) ;
4680: $if $(@expr1073748689 $!@expr1073748690 $assertEquals $(@expr1073748691 "cppcheck-2.8/test/testvalueflow.cpp" $, 4680 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4681: $if $(@expr1073748693 $!@expr1073748694 $assert_ $(@expr1073748695 "cppcheck-2.8/test/testvalueflow.cpp" $, 4681 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4682:
4683: code@var387 =@expr1073748698 "void f() {\n  int x = 0;\na:\n  a = x + 1;\n}"
4684:
4685:
4686:
4687: ;
4688: value@var388 =@expr1073748699 $valueOfTok_ $(@expr1073748700 code@var387 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4688 $) ;
4689: $if $(@expr1073748701 $!@expr1073748702 $assertEquals $(@expr1073748703 "cppcheck-2.8/test/testvalueflow.cpp" $, 4689 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4690: $if $(@expr1073748705 $!@expr1073748706 $assert_ $(@expr1073748707 "cppcheck-2.8/test/testvalueflow.cpp" $, 4690 $, value@var388 .@expr6730 isPossible (@expr6731 ) $) $) { $return ; }
4691:
4692:
4693: code@var387 =@expr1073748710 "void f(int x) {\n  if (!x) {\n    a = x+1;\n  }\n}"
4694:
4695:
4696:
4697: ;
4698: value@var388 =@expr1073748711 $valueOfTok_ $(@expr1073748712 code@var387 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4698 $) ;
4699: $if $(@expr1073748713 $!@expr1073748714 $assertEquals $(@expr1073748715 "cppcheck-2.8/test/testvalueflow.cpp" $, 4699 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4700: $if $(@expr1073748717 $!@expr1073748718 $assert_ $(@expr1073748719 "cppcheck-2.8/test/testvalueflow.cpp" $, 4700 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4701:
4702: code@var387 =@expr1073748722 "void f(int x) {\n  if (a && 4==x && y) {\n    a = x+12;\n  }\n}"
4703:
4704:
4705:
4706: ;
4707: value@var388 =@expr1073748723 $valueOfTok_ $(@expr1073748724 code@var387 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4707 $) ;
4708: $if $(@expr1073748725 $!@expr1073748726 $assertEquals $(@expr1073748727 "cppcheck-2.8/test/testvalueflow.cpp" $, 4708 $, 16 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4709: $if $(@expr1073748729 $!@expr1073748730 $assert_ $(@expr1073748731 "cppcheck-2.8/test/testvalueflow.cpp" $, 4709 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4710:
4711:
4712: code@var387 =@expr1073748734 "int f(int x) {\n  if (x == 4) {}\n  return x + 1;\n}"
4713:
4714:
4715: ;
4716: value@var388 =@expr1073748735 $valueOfTok_ $(@expr1073748736 code@var387 $, "+" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4716 $) ;
4717: $if $(@expr1073748737 $!@expr1073748738 $assertEquals $(@expr1073748739 "cppcheck-2.8/test/testvalueflow.cpp" $, 4717 $, 5 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4718: $if $(@expr1073748741 $!@expr1073748742 $assert_ $(@expr1073748743 "cppcheck-2.8/test/testvalueflow.cpp" $, 4718 $, value@var388 .@expr6730 isPossible (@expr6731 ) $) $) { $return ; }
4719:
4720: code@var387 =@expr1073748746 "int f(int x) {\n  if (x < 2) {}\n  else if (x >= 2) {}\n}"
4721:
4722:
4723: ;
4724: value@var388 =@expr1073748747 $valueOfTok_ $(@expr1073748748 code@var387 $, ">=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4724 $) ;
4725: $if $(@expr1073748749 $!@expr1073748750 $assertEquals $(@expr1073748751 "cppcheck-2.8/test/testvalueflow.cpp" $, 4725 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4726: $if $(@expr1073748753 $!@expr1073748754 $assert_ $(@expr1073748755 "cppcheck-2.8/test/testvalueflow.cpp" $, 4726 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4727:
4728: code@var387 =@expr1073748758 "int f(int x) {\n  if (x < 2) {}\n  else if (x > 2) {}\n}"
4729:
4730:
4731: ;
4732: $if $(@expr1073748759 $!@expr1073748760 $assert_ $(@expr1073748761 "cppcheck-2.8/test/testvalueflow.cpp" $, 4732 $, isNotKnownValues (@expr1073748762 code@var387 , ">" ) $) $) { $return ; }
4733:
4734:
4735: code@var387 =@expr1073748763 "void f() {\n    int x = 1;\n    int y = 2 + x;\n    if (x == 2) {}\n}"
4736:
4737:
4738:
4739: ;
4740: $if $(@expr1073748764 $!@expr1073748765 $assertEquals $(@expr1073748766 "cppcheck-2.8/test/testvalueflow.cpp" $, 4740 $, true $, $testValueOfX_ $(@expr1073748767 "cppcheck-2.8/test/testvalueflow.cpp" $, 4740 $, code@var387 , 3U , 1 $) $) $) { $return ; }
4741: $if $(@expr1073748768 $!@expr1073748769 $assertEquals $(@expr1073748770 "cppcheck-2.8/test/testvalueflow.cpp" $, 4741 $, false $, $testValueOfX_ $(@expr1073748771 "cppcheck-2.8/test/testvalueflow.cpp" $, 4741 $, code@var387 , 3U , 2 $) $) $) { $return ; }
4742:
4743: code@var387 =@expr1073748772 "bool f() {\n  const int s( 4 );  return s == 4;\n}"
4744:
4745:
4746: ;
4747: value@var388 =@expr1073748773 $valueOfTok_ $(@expr1073748774 code@var387 $, "==" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4747 $) ;
4748: $if $(@expr1073748775 $!@expr1073748776 $assert_ $(@expr1073748777 "cppcheck-2.8/test/testvalueflow.cpp" $, 4748 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4749: $if $(@expr1073748780 $!@expr1073748781 $assertEquals $(@expr1073748782 "cppcheck-2.8/test/testvalueflow.cpp" $, 4749 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4750:
4751: code@var387 =@expr1073748784 "bool f() {\n  const int s{ 4 };  return s == 4;\n}"
4752:
4753:
4754: ;
4755: value@var388 =@expr1073748785 $valueOfTok_ $(@expr1073748786 code@var387 $, "==" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4755 $) ;
4756: $if $(@expr1073748787 $!@expr1073748788 $assert_ $(@expr1073748789 "cppcheck-2.8/test/testvalueflow.cpp" $, 4756 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4757: $if $(@expr1073748792 $!@expr1073748793 $assertEquals $(@expr1073748794 "cppcheck-2.8/test/testvalueflow.cpp" $, 4757 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4758:
4759: code@var387 =@expr1073748796 "bool f() {\n  const int s = int( 4 );  return s == 4;\n}"
4760:
4761:
4762: ;
4763: value@var388 =@expr1073748797 $valueOfTok_ $(@expr1073748798 code@var387 $, "==" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4763 $) ;
4764: $if $(@expr1073748799 $!@expr1073748800 $assert_ $(@expr1073748801 "cppcheck-2.8/test/testvalueflow.cpp" $, 4764 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4765: $if $(@expr1073748804 $!@expr1073748805 $assertEquals $(@expr1073748806 "cppcheck-2.8/test/testvalueflow.cpp" $, 4765 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4766:
4767: code@var387 =@expr1073748808 "bool f() {\n  const int s = int{ 4 };  return s == 4;\n}"
4768:
4769:
4770: ;
4771: value@var388 =@expr1073748809 $valueOfTok_ $(@expr1073748810 code@var387 $, "==" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4771 $) ;
4772: $if $(@expr1073748811 $!@expr1073748812 $assert_ $(@expr1073748813 "cppcheck-2.8/test/testvalueflow.cpp" $, 4772 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4773: $if $(@expr1073748816 $!@expr1073748817 $assertEquals $(@expr1073748818 "cppcheck-2.8/test/testvalueflow.cpp" $, 4773 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4774:
4775: code@var387 =@expr1073748820 "bool f() {\n  const int s = int{};  return s == 0;\n}"
4776:
4777:
4778: ;
4779: value@var388 =@expr1073748821 $valueOfTok_ $(@expr1073748822 code@var387 $, "==" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4779 $) ;
4780: $todoAssertEquals $(@expr1073748823 "cppcheck-2.8/test/testvalueflow.cpp" $, 4780 $, true $, false $, value@var388 .@expr6710 isKnown (@expr6711 ) $) ;
4781: $todoAssertEquals $(@expr1073748826 "cppcheck-2.8/test/testvalueflow.cpp" $, 4781 $, 1 $, 0 $, value@var388 .@expr6706 intvalue@var389 $) ;
4782:
4783: code@var387 =@expr1073748828 "bool f() {\n  const int s = int();  return s == 0;\n}"
4784:
4785:
4786: ;
4787: value@var388 =@expr1073748829 $valueOfTok_ $(@expr1073748830 code@var387 $, "==" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4787 $) ;
4788: $todoAssertEquals $(@expr1073748831 "cppcheck-2.8/test/testvalueflow.cpp" $, 4788 $, true $, false $, value@var388 .@expr6710 isKnown (@expr6711 ) $) ;
4789: $todoAssertEquals $(@expr1073748834 "cppcheck-2.8/test/testvalueflow.cpp" $, 4789 $, 1 $, 0 $, value@var388 .@expr6706 intvalue@var389 $) ;
4790:
4791:
4792: code@var387 =@expr1073748836 "int f(int x) { a = x & 0; }" ;
4793: value@var388 =@expr1073748837 $valueOfTok_ $(@expr1073748838 code@var387 $, "&" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4793 $) ;
4794: $if $(@expr1073748839 $!@expr1073748840 $assertEquals $(@expr1073748841 "cppcheck-2.8/test/testvalueflow.cpp" $, 4794 $, 0 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4795: $if $(@expr1073748843 $!@expr1073748844 $assert_ $(@expr1073748845 "cppcheck-2.8/test/testvalueflow.cpp" $, 4795 $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4796:
4797:
4798: code@var387 =@expr1073748848 "template <int X> void f() { a = X; }\nf<1>();"
4799: ;
4800: value@var388 =@expr1073748849 $valueOfTok_ $(@expr1073748850 code@var387 $, "1" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4800 $) ;
4801: $if $(@expr1073748851 $!@expr1073748852 $assertEquals $(@expr1073748853 "cppcheck-2.8/test/testvalueflow.cpp" $, 4801 $, 1 $, value@var388 .@expr6706 intvalue@var389 $) $) { $return ; }
4802: $if $(@expr1073748855 $!@expr1073748856 $assertEquals $(@expr1073748857 "cppcheck-2.8/test/testvalueflow.cpp" $, 4802 $, false $, value@var388 .@expr6710 isKnown (@expr6711 ) $) $) { $return ; }
4803: }
4804:
4805: void valueFlowSizeofForwardDeclaredEnum ( ) {
4806: const char * code@var390 ; code@var390 =@expr1073748860 "enum E; sz=sizeof(E);" ;
4807: $valueOfTok_ $(@expr1073748861 code@var390 $, "=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 4807 $) ;
4808: }
4809:
4810: void valueFlowGlobalVar ( ) {
4811: const char * code@var391 ;
4812:
4813: code@var391 =@expr1073748862 "int x;\nvoid f() {\n    x = 4;\n    a = x;\n}"
4814:
4815:
4816:
4817: ;
4818: $if $(@expr1073748863 $!@expr1073748864 $assertEquals $(@expr1073748865 "cppcheck-2.8/test/testvalueflow.cpp" $, 4818 $, true $, $testValueOfX_ $(@expr1073748866 "cppcheck-2.8/test/testvalueflow.cpp" $, 4818 $, code@var391 , 4U , 4 $) $) $) { $return ; }
4819:
4820: code@var391 =@expr1073748867 "int x;\nvoid f() {\n    if (x == 4) {}\n    a = x;\n}"
4821:
4822:
4823:
4824: ;
4825: $if $(@expr1073748868 $!@expr1073748869 $assertEquals $(@expr1073748870 "cppcheck-2.8/test/testvalueflow.cpp" $, 4825 $, true $, $testValueOfX_ $(@expr1073748871 "cppcheck-2.8/test/testvalueflow.cpp" $, 4825 $, code@var391 , 4U , 4 $) $) $) { $return ; }
4826:
4827: code@var391 =@expr1073748872 "int x;\nvoid f() {\n    x = 42;\n    unknownFunction();\n    a = x;\n}"
4828:
|
4831:
4832: ;
4833: $if $(@expr1073748873 $!@expr1073748874 $assertEquals $(@expr1073748875 "cppcheck-2.8/test/testvalueflow.cpp" $, 4833 $, false $, $testValueOfX_ $(@expr1073748876 "cppcheck-2.8/test/testvalueflow.cpp" $, 4833 $, code@var391 , 5U , 42 $) $) $) { $return ; }
4834: }
4835:
4836: void valueFlowGlobalConstVar ( ) {
4837: const char * code@var392 ;
4838:
4839: code@var392 =@expr1073748877 "const int x = 321;\nvoid f() {\n  a = x;\n}"
4840:
4841:
4842: ;
4843: $if $(@expr1073748878 $!@expr1073748879 $assertEquals $(@expr1073748880 "cppcheck-2.8/test/testvalueflow.cpp" $, 4843 $, true $, $testValueOfX_ $(@expr1073748881 "cppcheck-2.8/test/testvalueflow.cpp" $, 4843 $, code@var392 , 3U , 321 $) $) $) { $return ; }
4844:
4845: code@var392 =@expr1073748882 "void f(const int x = 1) {\n    int a = x;\n}\n"
4846:
4847: ;
4848: $if $(@expr1073748883 $!@expr1073748884 $assertEquals $(@expr1073748885 "cppcheck-2.8/test/testvalueflow.cpp" $, 4848 $, false $, $testValueOfXKnown_ $(@expr1073748886 "cppcheck-2.8/test/testvalueflow.cpp" $, 4848 $, code@var392 , 2U , 1 $) $) $) { $return ; }
4849:
4850: code@var392 =@expr1073748887 "volatile const int x = 42;\nvoid f(){ int a = x; }\n"
4851: ;
4852: $if $(@expr1073748888 $!@expr1073748889 $assertEquals $(@expr1073748890 "cppcheck-2.8/test/testvalueflow.cpp" $, 4852 $, false $, $testValueOfXKnown_ $(@expr1073748891 "cppcheck-2.8/test/testvalueflow.cpp" $, 4852 $, code@var392 , 2U , 42 $) $) $) { $return ; }
4853:
4854: code@var392 =@expr1073748892 "static const int x = 42;\nvoid f(){ int a = x; }\n"
4855: ;
4856: $if $(@expr1073748893 $!@expr1073748894 $assertEquals $(@expr1073748895 "cppcheck-2.8/test/testvalueflow.cpp" $, 4856 $, true $, $testValueOfX_ $(@expr1073748896 "cppcheck-2.8/test/testvalueflow.cpp" $, 4856 $, code@var392 , 2U , 42 $) $) $) { $return ; }
4857: }
4858:
4859: void valueFlowGlobalStaticVar ( ) {
4860: const char * code@var393 ;
4861:
4862: code@var393 =@expr1073748897 "static int x = 321;\nvoid f() {\n  a = x;\n}"
4863:
4864:
4865: ;
4866: $if $(@expr1073748898 $!@expr1073748899 $assertEquals $(@expr1073748900 "cppcheck-2.8/test/testvalueflow.cpp" $, 4866 $, true $, $testValueOfX_ $(@expr1073748901 "cppcheck-2.8/test/testvalueflow.cpp" $, 4866 $, code@var393 , 3U , 321 $) $) $) { $return ; }
4867:
4868: code@var393 =@expr1073748902 "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { x=a; }\n"
4869:
4870:
4871:
4872: ;
4873: $if $(@expr1073748903 $!@expr1073748904 $assertEquals $(@expr1073748905 "cppcheck-2.8/test/testvalueflow.cpp" $, 4873 $, false $, $testValueOfX_ $(@expr1073748906 "cppcheck-2.8/test/testvalueflow.cpp" $, 4873 $, code@var393 , 3U , 321 $) $) $) { $return ; }
4874:
4875: code@var393 =@expr1073748907 "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { p = &x; }\n"
4876:
4877:
4878:
4879: ;
4880: $if $(@expr1073748908 $!@expr1073748909 $assertEquals $(@expr1073748910 "cppcheck-2.8/test/testvalueflow.cpp" $, 4880 $, false $, $testValueOfX_ $(@expr1073748911 "cppcheck-2.8/test/testvalueflow.cpp" $, 4880 $, code@var393 , 3U , 321 $) $) $) { $return ; }
4881:
4882: code@var393 =@expr1073748912 "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { x++; }\n"
4883:
4884:
4885:
4886: ;
4887: $if $(@expr1073748913 $!@expr1073748914 $assertEquals $(@expr1073748915 "cppcheck-2.8/test/testvalueflow.cpp" $, 4887 $, false $, $testValueOfX_ $(@expr1073748916 "cppcheck-2.8/test/testvalueflow.cpp" $, 4887 $, code@var393 , 3U , 321 $) $) $) { $return ; }
4888:
4889: code@var393 =@expr1073748917 "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { foo(x); }\n"
4890:
4891:
4892:
4893: ;
4894: $if $(@expr1073748918 $!@expr1073748919 $assertEquals $(@expr1073748920 "cppcheck-2.8/test/testvalueflow.cpp" $, 4894 $, false $, $testValueOfX_ $(@expr1073748921 "cppcheck-2.8/test/testvalueflow.cpp" $, 4894 $, code@var393 , 3U , 321 $) $) $) { $return ; }
4895:
4896: code@var393 =@expr1073748922 "static int x = 1;\nvoid f() {\n  a = x;\n}void other() { x += b; }\n"
4897:
4898:
4899:
4900: ;
4901: $if $(@expr1073748923 $!@expr1073748924 $assertEquals $(@expr1073748925 "cppcheck-2.8/test/testvalueflow.cpp" $, 4901 $, false $, $testValueOfX_ $(@expr1073748926 "cppcheck-2.8/test/testvalueflow.cpp" $, 4901 $, code@var393 , 3U , 1 $) $) $) { $return ; }
4902: }
4903:
4904: void valueFlowInlineAssembly ( ) {
4905: const char * code@var394 ; code@var394 =@expr1073748927 "void f() {\n    int x = 42;\n    asm(\"\");\n    a = x;\n}"
4906:
4907:
4908:
4909: ;
4910: $if $(@expr1073748928 $!@expr1073748929 $assertEquals $(@expr1073748930 "cppcheck-2.8/test/testvalueflow.cpp" $, 4910 $, false $, $testValueOfX_ $(@expr1073748931 "cppcheck-2.8/test/testvalueflow.cpp" $, 4910 $, code@var394 , 5U , 42 $) $) $) { $return ; }
4911: }
4912:
4913: void valueFlowSameExpression ( ) {
4914: const char * code@var395 ;
4915:
4916: code@var395 =@expr1073748932 "void f(int a) {\n    bool x = a == a;\n    bool b = x;\n}\n"
4917:
4918:
4919: ;
4920: $if $(@expr1073748933 $!@expr1073748934 $assertEquals $(@expr1073748935 "cppcheck-2.8/test/testvalueflow.cpp" $, 4920 $, true $, $testValueOfX_ $(@expr1073748936 "cppcheck-2.8/test/testvalueflow.cpp" $, 4920 $, code@var395 , 3U , 1 $) $) $) { $return ; }
4921:
4922: code@var395 =@expr1073748937 "void f(int a) {\n    bool x = a != a;\n    bool b = x;\n}\n"
4923:
4924:
4925: ;
4926: $if $(@expr1073748938 $!@expr1073748939 $assertEquals $(@expr1073748940 "cppcheck-2.8/test/testvalueflow.cpp" $, 4926 $, true $, $testValueOfX_ $(@expr1073748941 "cppcheck-2.8/test/testvalueflow.cpp" $, 4926 $, code@var395 , 3U , 0 $) $) $) { $return ; }
4927:
4928: code@var395 =@expr1073748942 "void f(int a) {\n    int x = a - a;\n    int b = x;\n}\n"
4929:
4930:
4931: ;
4932: $if $(@expr1073748943 $!@expr1073748944 $assertEquals $(@expr1073748945 "cppcheck-2.8/test/testvalueflow.cpp" $, 4932 $, true $, $testValueOfX_ $(@expr1073748946 "cppcheck-2.8/test/testvalueflow.cpp" $, 4932 $, code@var395 , 3U , 0 $) $) $) { $return ; }
4933:
4934: code@var395 =@expr1073748947 "void f(float a) {\n    bool x = a == a;\n    bool b = x;\n}\n"
4935:
4936:
4937: ;
4938: $if $(@expr1073748948 $!@expr1073748949 $assertEquals $(@expr1073748950 "cppcheck-2.8/test/testvalueflow.cpp" $, 4938 $, false $, $testValueOfX_ $(@expr1073748951 "cppcheck-2.8/test/testvalueflow.cpp" $, 4938 $, code@var395 , 3U , 1 $) $) $) { $return ; }
4939: }
4940:
4941: void valueFlowUninit ( ) {
4942: const char * code@var396 ;
4943: std ::@expr1073748954 list < ValueFlow ::@expr1073748955 Value > values@var397 ;
4944:
4945: code@var396 =@expr1073748956 "void f() {\n    int x;\n    switch (x) {}\n}"
4946:
4947:
4948: ;
4949: values@var397 =@expr1073748957 $tokenValues_ $(@expr1073748958 "cppcheck-2.8/test/testvalueflow.cpp" $, 4949 $, code@var396 , "x )" $) ;
4950: $if $(@expr1073748959 $!@expr1073748960 $assertEquals $(@expr1073748961 "cppcheck-2.8/test/testvalueflow.cpp" $, 4950 $, true $, values@var397 .@expr7138 size (@expr7139 ) ==@expr7140 1U &&@expr7141 values@var397 .@expr7142 front (@expr7143 ) .@expr7144 isUninitValue (@expr7145 ) $) $) { $return ; }
4951:
4952: code@var396 =@expr1073748970 "void f() {\n    const C *c;\n    if (c->x() == 4) {}\n}"
4953:
4954:
4955: ;
4956: values@var397 =@expr1073748971 $tokenValues_ $(@expr1073748972 "cppcheck-2.8/test/testvalueflow.cpp" $, 4956 $, code@var396 , "c ." $) ;
4957: $if $(@expr1073748973 $!@expr1073748974 $assertEquals $(@expr1073748975 "cppcheck-2.8/test/testvalueflow.cpp" $, 4957 $, true $, values@var397 .@expr7138 size (@expr7139 ) ==@expr7140 1U &&@expr7141 values@var397 .@expr7142 front (@expr7143 ) .@expr7144 isUninitValue (@expr7145 ) $) $) { $return ; }
4958:
4959: code@var396 =@expr1073748984 "void f() {\n    C *c;\n    if (c->x() == 4) {}\n}"
4960:
4961:
4962: ;
4963: values@var397 =@expr1073748985 $tokenValues_ $(@expr1073748986 "cppcheck-2.8/test/testvalueflow.cpp" $, 4963 $, code@var396 , "c ." $) ;
4964: $if $(@expr1073748987 $!@expr1073748988 $assertEquals $(@expr1073748989 "cppcheck-2.8/test/testvalueflow.cpp" $, 4964 $, true $, values@var397 .@expr7138 size (@expr7139 ) ==@expr7140 1U &&@expr7141 values@var397 .@expr7142 front (@expr7143 ) .@expr7144 isUninitValue (@expr7145 ) $) $) { $return ; }
4965:
4966: code@var396 =@expr1073748998 "void f() {\n    int **x;\n    y += 10;\n    x = dostuff(sizeof(*x)*y);\n}"
4967:
4968:
4969:
4970: ;
4971: $if $(@expr1073748999 $!@expr1073749000 $assertEquals $(@expr1073749001 "cppcheck-2.8/test/testvalueflow.cpp" $, 4971 $, 0U $, $(@expr1073749002 $tokenValues_ $(@expr1073749003 "cppcheck-2.8/test/testvalueflow.cpp" $, 4971 $, code@var396 , "x )" $) .@expr1073749004 size (@expr1073749005 ) $) $) $) { $return ; }
4972:
4973:
4974: code@var396 =@expr1073749006 "void foo() {\n    int x;\n    f(x=3), return x+3;\n}"
4975:
4976:
4977: ;
4978: values@var397 =@expr1073749007 $tokenValues_ $(@expr1073749008 "cppcheck-2.8/test/testvalueflow.cpp" $, 4978 $, code@var396 , "x +" $) ;
4979: $if $(@expr1073749009 $!@expr1073749010 $assertEquals $(@expr1073749011 "cppcheck-2.8/test/testvalueflow.cpp" $, 4979 $, true $, values@var397 .@expr7188 empty (@expr7189 ) $) $) { $return ; }
4980:
|
4984:
4985: code@var396 =@expr1073749014 "void foo(std::istream &is) {\n  int x;\n  if (is >> x) {\n    a = x;\n  }\n}"
4986:
|
4989:
4990: ;
4991: values@var397 =@expr1073749015 $tokenValues_ $(@expr1073749016 "cppcheck-2.8/test/testvalueflow.cpp" $, 4991 $, code@var396 , "x ; }" $) ;
4992: $if $(@expr1073749017 $!@expr1073749018 $assertEquals $(@expr1073749019 "cppcheck-2.8/test/testvalueflow.cpp" $, 4992 $, true $, values@var397 .@expr7188 empty (@expr7189 ) $) $) { $return ; }
4993:
4994:
4995: code@var396 =@expr1073749022 "int repeat() {\n  const char *n;\n  return((n=42) && *n == 'A');\n}"
4996:
4997:
4998: ;
4999: values@var397 =@expr1073749023 $tokenValues_ $(@expr1073749024 "cppcheck-2.8/test/testvalueflow.cpp" $, 4999 $, code@var396 , "n ==" $) ;
5000: $if $(@expr1073749025 $!@expr1073749026 $assertEquals $(@expr1073749027 "cppcheck-2.8/test/testvalueflow.cpp" $, 5000 $, true $, values@var397 .@expr7188 empty (@expr7189 ) $) $) { $return ; }
5001:
5002:
5003: code@var396 =@expr1073749030 "void foo() {\n  int x;\n  int y = 1;\n  if (y>1)\n    x = 1;\n  else\n    x = 1;\n  if (x>1) {}\n}"
5004:
|
5010:
5011: ;
5012: $if $(@expr1073749031 $!@expr1073749032 $assertEquals $(@expr1073749033 "cppcheck-2.8/test/testvalueflow.cpp" $, 5012 $, true $, $testValueOfXKnown_ $(@expr1073749034 "cppcheck-2.8/test/testvalueflow.cpp" $, 5012 $, code@var396 , 8U , 1 $) $) $) { $return ; }
5013:
5014:
5015: code@var396 =@expr1073749035 "int test_input_int(int a, int b) {\n    int x;\n    if (a == 1)\n        x = b;\n    else\n        abort();\n    a = x + 1;\n}\n"
5016:
|
5021:
5022: ;
5023: values@var397 =@expr1073749036 $tokenValues_ $(@expr1073749037 "cppcheck-2.8/test/testvalueflow.cpp" $, 5023 $, code@var396 , "x +" $) ;
5024: values@var397 .@expr1073749038 remove_if (@expr1073749039 &@expr1073749040 isNotUninitValue ) ;
5025: $if $(@expr1073749041 $!@expr1073749042 $assertEquals $(@expr1073749043 "cppcheck-2.8/test/testvalueflow.cpp" $, 5025 $, true $, values@var397 .@expr7188 empty (@expr7189 ) $) $) { $return ; }
5026:
5027:
5028: code@var396 =@expr1073749046 "void f() {\n    int x;\n    a & x;\n}"
5029:
5030:
5031: ;
5032: values@var397 =@expr1073749047 $tokenValues_ $(@expr1073749048 "cppcheck-2.8/test/testvalueflow.cpp" $, 5032 $, code@var396 , "x ; }" $) ;
5033: $if $(@expr1073749049 $!@expr1073749050 $assertEquals $(@expr1073749051 "cppcheck-2.8/test/testvalueflow.cpp" $, 5033 $, true $, values@var397 .@expr7188 empty (@expr7189 ) $) $) { $return ; }
5034:
5035: code@var396 =@expr1073749054 "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    goto;\n  c++;\n}\n"
5036:
|
5041:
5042: ;
5043: values@var397 =@expr1073749055 $tokenValues_ $(@expr1073749056 "cppcheck-2.8/test/testvalueflow.cpp" $, 5043 $, code@var396 , "c ++ ; }" $) ;
5044: $if $(@expr1073749057 $!@expr1073749058 $assertEquals $(@expr1073749059 "cppcheck-2.8/test/testvalueflow.cpp" $, 5044 $, true $, values@var397 .@expr7188 empty (@expr7189 ) $) $) { $return ; }
5045:
5046: code@var396 =@expr1073749062 "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    return;\n  c++;\n}\n"
5047:
|
5052:
5053: ;
5054: values@var397 =@expr1073749063 $tokenValues_ $(@expr1073749064 "cppcheck-2.8/test/testvalueflow.cpp" $, 5054 $, code@var396 , "c ++ ; }" $) ;
5055: $if $(@expr1073749065 $!@expr1073749066 $assertEquals $(@expr1073749067 "cppcheck-2.8/test/testvalueflow.cpp" $, 5055 $, true $, values@var397 .@expr7188 empty (@expr7189 ) $) $) { $return ; }
5056:
5057: code@var396 =@expr1073749070 "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    exit();\n  c++;\n}\n"
5058:
|
5063:
5064: ;
5065: values@var397 =@expr1073749071 $tokenValues_ $(@expr1073749072 "cppcheck-2.8/test/testvalueflow.cpp" $, 5065 $, code@var396 , "c ++ ; }" $) ;
5066: $if $(@expr1073749073 $!@expr1073749074 $assertEquals $(@expr1073749075 "cppcheck-2.8/test/testvalueflow.cpp" $, 5066 $, true $, values@var397 .@expr7188 empty (@expr7189 ) $) $) { $return ; }
5067:
5068: code@var396 =@expr1073749078 "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n else if (e)\n   c = 0;\n  c++;\n}\n"
5069:
|
5074:
5075: ;
5076: values@var397 =@expr1073749079 $tokenValues_ $(@expr1073749080 "cppcheck-2.8/test/testvalueflow.cpp" $, 5076 $, code@var396 , "c ++ ; }" $) ;
5077: $todoAssertEquals $(@expr1073749081 "cppcheck-2.8/test/testvalueflow.cpp" $, 5077 $, true $, false $, values@var397 .@expr7138 size (@expr7139 ) ==@expr1073749084 2 $) ;
5078:
|
5081:
5082: code@var396 =@expr1073749085 "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n else if (!d)\n   c = 0;\n  c++;\n}\n"
5083:
|
5088:
5089: ;
5090: values@var397 =@expr1073749086 $tokenValues_ $(@expr1073749087 "cppcheck-2.8/test/testvalueflow.cpp" $, 5090 $, code@var396 , "c ++ ; }" $) ;
5091: $if $(@expr1073749088 $!@expr1073749089 $assertEquals $(@expr1073749090 "cppcheck-2.8/test/testvalueflow.cpp" $, 5091 $, true $, values@var397 .@expr7138 size (@expr7139 ) ==@expr7269 1 $) $) { $return ; }
5092:
5093: $if $(@expr1073749094 $!@expr1073749095 $assertEquals $(@expr1073749096 "cppcheck-2.8/test/testvalueflow.cpp" $, 5093 $, true $, values@var397 .@expr7273 back (@expr7274 ) .@expr1073749099 isPossible (@expr1073749100 ) $) $) { $return ; }
5094: $if $(@expr1073749101 $!@expr1073749102 $assertEquals $(@expr1073749103 "cppcheck-2.8/test/testvalueflow.cpp" $, 5094 $, true $, values@var397 .@expr7273 back (@expr7274 ) .@expr1073749106 intvalue@expr1073748952 ==@expr1073749107 0 $) $) { $return ; }
5095:
5096: code@var396 =@expr1073749108 "void f() {\n  int szHdr;\n  idx = (A<0x80) ? (szHdr = 0) : dostuff(A, (int *)&(szHdr));\n  d = szHdr;\n}"
5097:
5098:
5099:
5100: ;
5101: values@var397 =@expr1073749109 $tokenValues_ $(@expr1073749110 "cppcheck-2.8/test/testvalueflow.cpp" $, 5101 $, code@var396 , "szHdr ; }" $) ;
5102: $todoAssertEquals $(@expr1073749111 "cppcheck-2.8/test/testvalueflow.cpp" $, 5102 $, 1 $, 0 $, values@var397 .@expr7138 size (@expr7139 ) $) ;
5103: if (@expr1073749114 values@var397 .@expr7138 size (@expr7139 ) ==@expr7269 1 ) {
5104: $if $(@expr1073749118 $!@expr1073749119 $assertEquals $(@expr1073749120 "cppcheck-2.8/test/testvalueflow.cpp" $, 5104 $, false $, values@var397 .@expr7142 front (@expr7143 ) .@expr7144 isUninitValue (@expr7145 ) $) $) { $return ; }
5105: }
5106:
5107: code@var396 =@expr1073749125 "void f () {\n  int szHdr;\n  idx = ((aKey<0x80) ? ((szHdr)=aKey), 1 : sqlite3GetVarint32(&(szHdr)));\n  d = szHdr;\n}"
5108:
5109:
5110:
5111: ;
5112: values@var397 =@expr1073749126 $tokenValues_ $(@expr1073749127 "cppcheck-2.8/test/testvalueflow.cpp" $, 5112 $, code@var396 , "szHdr ; }" $) ;
5113: $if $(@expr1073749128 $!@expr1073749129 $assertEquals $(@expr1073749130 "cppcheck-2.8/test/testvalueflow.cpp" $, 5113 $, 0 $, values@var397 .@expr7138 size (@expr7139 ) $) $) { $return ; }
5114:
5115:
5116: code@var396 =@expr1073749133 "struct MyStruct { size_t value; }\n\nvoid foo() {\n    MyStruct x;\n    fread(((char *)&x) + 0, sizeof(x), f);\n    if (x.value < 432) {}\n}"
5117:
|
5121:
5122: ;
5123: values@var397 =@expr1073749134 $tokenValues_ $(@expr1073749135 "cppcheck-2.8/test/testvalueflow.cpp" $, 5123 $, code@var396 , "x . value" $) ;
5124: $if $(@expr1073749136 $!@expr1073749137 $assertEquals $(@expr1073749138 "cppcheck-2.8/test/testvalueflow.cpp" $, 5124 $, 0 $, values@var397 .@expr7138 size (@expr7139 ) $) $) { $return ; }
5125:
5126:
5127: code@var396 =@expr1073749141 "int f(bool b) {\n    int x;\n    do {\n      if (b) {\n        x = 0;\n        break;\n      }\n    } while (true);\n    return x;\n}\n"
5128:
|
5135:
5136: ;
5137: values@var397 =@expr1073749142 $tokenValues_ $(@expr1073749143 "cppcheck-2.8/test/testvalueflow.cpp" $, 5137 $, code@var396 , "x ; }" , ValueFlow ::@expr7320 Value ::@expr7321 ValueType ::@expr7322 UNINIT@expr7129 $) ;
5138: $if $(@expr1073749147 $!@expr1073749148 $assertEquals $(@expr1073749149 "cppcheck-2.8/test/testvalueflow.cpp" $, 5138 $, 0 $, values@var397 .@expr7138 size (@expr7139 ) $) $) { $return ; }
5139:
5140: code@var396 =@expr1073749152 "int f(bool b) {\n    int x;\n    while (true) {\n      if (b) {\n        x = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
5141:
|
5148:
5149: ;
5150: values@var397 =@expr1073749153 $tokenValues_ $(@expr1073749154 "cppcheck-2.8/test/testvalueflow.cpp" $, 5150 $, code@var396 , "x ; }" , ValueFlow ::@expr7320 Value ::@expr7321 ValueType ::@expr7322 UNINIT@expr7129 $) ;
5151: $if $(@expr1073749158 $!@expr1073749159 $assertEquals $(@expr1073749160 "cppcheck-2.8/test/testvalueflow.cpp" $, 5151 $, 0 $, values@var397 .@expr7138 size (@expr7139 ) $) $) { $return ; }
5152:
5153: code@var396 =@expr1073749163 "int f(bool b) {\n    int x;\n    for(;;) {\n      if (b) {\n        x = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
5154:
|
5161:
5162: ;
5163: values@var397 =@expr1073749164 $tokenValues_ $(@expr1073749165 "cppcheck-2.8/test/testvalueflow.cpp" $, 5163 $, code@var396 , "x ; }" , ValueFlow ::@expr7320 Value ::@expr7321 ValueType ::@expr7322 UNINIT@expr7129 $) ;
5164: $if $(@expr1073749169 $!@expr1073749170 $assertEquals $(@expr1073749171 "cppcheck-2.8/test/testvalueflow.cpp" $, 5164 $, 0 $, values@var397 .@expr7138 size (@expr7139 ) $) $) { $return ; }
5165:
5166: code@var396 =@expr1073749174 "int f(bool b) {\n    int x;\n    switch (b) {\n      case 1: {\n        ret = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
5167:
|
5174:
5175: ;
5176: values@var397 =@expr1073749175 $tokenValues_ $(@expr1073749176 "cppcheck-2.8/test/testvalueflow.cpp" $, 5176 $, code@var396 , "x ; }" , ValueFlow ::@expr7320 Value ::@expr7321 ValueType ::@expr7322 UNINIT@expr7129 $) ;
5177: $if $(@expr1073749180 $!@expr1073749181 $assertEquals $(@expr1073749182 "cppcheck-2.8/test/testvalueflow.cpp" $, 5177 $, 0 $, values@var397 .@expr7138 size (@expr7139 ) $) $) { $return ; }
5178:
5179: code@var396 =@expr1073749185 "void f() {\n    int i;\n    if (x) {\n        int y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}\n"
5180:
|
5185:
5186: ;
5187: values@var397 =@expr1073749186 $tokenValues_ $(@expr1073749187 "cppcheck-2.8/test/testvalueflow.cpp" $, 5187 $, code@var396 , "i ++" , ValueFlow ::@expr7320 Value ::@expr7321 ValueType ::@expr7322 UNINIT@expr7129 $) ;
5188: $if $(@expr1073749191 $!@expr1073749192 $assertEquals $(@expr1073749193 "cppcheck-2.8/test/testvalueflow.cpp" $, 5188 $, 0 $, values@var397 .@expr7138 size (@expr7139 ) $) $) { $return ; }
5189: }
5190:
5191: void valueFlowConditionExpressions ( ) {
5192: const char * code@var398 ;
5193:
5194:
5195: code@var398 =@expr1073749208 "void f(int i, int j) {\n    if (i == j) return;\n    if(i != j) {}\n}\n"
5196:
5197:
5198: ;
5199: $if $(@expr1073749209 $!@expr1073749210 $assertEquals $(@expr1073749211 "cppcheck-2.8/test/testvalueflow.cpp" $, 5199 $, true $, $(@expr1073749212 $valueOfTok_ $(@expr1073749213 code@var398 $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5199 $) .@expr1073749214 intvalue@expr1073749196 ==@expr1073749215 1 $) $) $) { $return ; }
5200:
5201: code@var398 =@expr1073749216 "void f(int i, int j) {\n    if (i == j) return;\n    i++;\n    if (i != j) {}\n}\n"
5202:
5203:
5204:
5205: ;
5206: $if $(@expr1073749217 $!@expr1073749218 $assertEquals $(@expr1073749219 "cppcheck-2.8/test/testvalueflow.cpp" $, 5206 $, false $, $(@expr1073749220 $valueOfTok_ $(@expr1073749221 code@var398 $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5206 $) .@expr1073749222 intvalue@expr1073749197 ==@expr1073749223 1 $) $) $) { $return ; }
5207:
5208: code@var398 =@expr1073749224 "void f(int i, int j, bool a) {\n    if (a) {\n        if (i == j) return;\n    }\n    if (i != j) {}\n}\n"
5209:
|
5212:
5213: ;
5214: $if $(@expr1073749225 $!@expr1073749226 $assertEquals $(@expr1073749227 "cppcheck-2.8/test/testvalueflow.cpp" $, 5214 $, true $, $(@expr1073749228 $valueOfTok_ $(@expr1073749229 code@var398 $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5214 $) .@expr1073749230 intvalue@expr1073749198 ==@expr1073749231 1 $) $) $) { $return ; }
5215: $if $(@expr1073749232 $!@expr1073749233 $assertEquals $(@expr1073749234 "cppcheck-2.8/test/testvalueflow.cpp" $, 5215 $, false $, $(@expr1073749235 $valueOfTok_ $(@expr1073749236 code@var398 $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5215 $) .@expr1073749237 isKnown (@expr1073749238 ) $) $) $) { $return ; }
5216:
5217: code@var398 =@expr1073749239 "void f(int i, int j, bool a) {\n    if (i != j) {}\n    if (i == j) return;\n}\n"
5218:
5219:
5220: ;
5221: $if $(@expr1073749240 $!@expr1073749241 $assertEquals $(@expr1073749242 "cppcheck-2.8/test/testvalueflow.cpp" $, 5221 $, false $, $(@expr1073749243 $valueOfTok_ $(@expr1073749244 code@var398 $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5221 $) .@expr1073749245 intvalue@expr1073749199 ==@expr1073749246 1 $) $) $) { $return ; }
5222:
5223:
5224: code@var398 =@expr1073749247 "void f(int i, int j) {\n    if (i != j) return;\n    bool x = (i != j);\n    bool b = x;\n}\n"
5225:
5226:
5227:
5228: ;
5229: $if $(@expr1073749248 $!@expr1073749249 $assertEquals $(@expr1073749250 "cppcheck-2.8/test/testvalueflow.cpp" $, 5229 $, true $, $testValueOfXKnown_ $(@expr1073749251 "cppcheck-2.8/test/testvalueflow.cpp" $, 5229 $, code@var398 , 4U , 0 $) $) $) { $return ; }
5230:
5231: code@var398 =@expr1073749252 "void f(int i, int j) {\n    if (i != j) return;\n    i++;\n    bool x = (i != j);\n    bool b = x;\n}\n"
5232:
|
5235:
5236: ;
5237: $if $(@expr1073749253 $!@expr1073749254 $assertEquals $(@expr1073749255 "cppcheck-2.8/test/testvalueflow.cpp" $, 5237 $, false $, $testValueOfXKnown_ $(@expr1073749256 "cppcheck-2.8/test/testvalueflow.cpp" $, 5237 $, code@var398 , 5U , 0 $) $) $) { $return ; }
5238:
5239: code@var398 =@expr1073749257 "void f(int i, int j, bool a) {\n    if (a) {\n        if (i != j) return;\n    }\n    bool x = (i != j);\n    bool b = x;\n}\n"
5240:
|
5244:
5245: ;
5246: $if $(@expr1073749258 $!@expr1073749259 $assertEquals $(@expr1073749260 "cppcheck-2.8/test/testvalueflow.cpp" $, 5246 $, false $, $testValueOfXKnown_ $(@expr1073749261 "cppcheck-2.8/test/testvalueflow.cpp" $, 5246 $, code@var398 , 6U , 0 $) $) $) { $return ; }
5247:
5248: code@var398 =@expr1073749262 "void f(int i, int j, bool a) {\n    bool x = (i != j);\n    bool b = x;\n    if (i != j) return;\n}\n"
5249:
5250:
5251:
5252: ;
5253: $if $(@expr1073749263 $!@expr1073749264 $assertEquals $(@expr1073749265 "cppcheck-2.8/test/testvalueflow.cpp" $, 5253 $, false $, $testValueOfXKnown_ $(@expr1073749266 "cppcheck-2.8/test/testvalueflow.cpp" $, 5253 $, code@var398 , 3U , 0 $) $) $) { $return ; }
5254:
5255: code@var398 =@expr1073749267 "void f(int i, int j, bool b) {\n    if (i == j) { if(b) return; }\n    if(i != j) {}\n}\n"
5256:
5257:
5258: ;
5259: $if $(@expr1073749268 $!@expr1073749269 $assertEquals $(@expr1073749270 "cppcheck-2.8/test/testvalueflow.cpp" $, 5259 $, false $, $(@expr1073749271 $valueOfTok_ $(@expr1073749272 code@var398 $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5259 $) .@expr1073749273 intvalue@expr1073749200 ==@expr1073749274 1 $) $) $) { $return ; }
5260:
5261: code@var398 =@expr1073749275 "void f(bool b, int i, int j) {\n    if (b || i == j) return;\n    if(i != j) {}\n}\n"
5262:
5263:
5264: ;
5265: $if $(@expr1073749276 $!@expr1073749277 $assertEquals $(@expr1073749278 "cppcheck-2.8/test/testvalueflow.cpp" $, 5265 $, true $, $(@expr1073749279 $valueOfTok_ $(@expr1073749280 code@var398 $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5265 $) .@expr1073749281 intvalue@expr1073749201 ==@expr1073749282 1 $) $) $) { $return ; }
5266:
5267: code@var398 =@expr1073749283 "void f(bool b, int i, int j) {\n    if (b && i == j) return;\n    if(i != j) {}\n}\n"
5268:
5269:
5270: ;
5271: $if $(@expr1073749284 $!@expr1073749285 $assertEquals $(@expr1073749286 "cppcheck-2.8/test/testvalueflow.cpp" $, 5271 $, true $, $(@expr1073749287 removeImpossible (@expr1073749288 $tokenValues_ $(@expr1073749289 "cppcheck-2.8/test/testvalueflow.cpp" $, 5271 $, code@var398 , "!=" $) ) .@expr1073749290 empty (@expr1073749291 ) $) $) $) { $return ; }
5272:
5273: code@var398 =@expr1073749292 "void f(int i, int j) {\n    if (i == j) {\n        if (i != j) {}\n    }\n}\n"
5274:
5275:
5276:
5277: ;
5278: $if $(@expr1073749293 $!@expr1073749294 $assertEquals $(@expr1073749295 "cppcheck-2.8/test/testvalueflow.cpp" $, 5278 $, true $, $(@expr1073749296 $valueOfTok_ $(@expr1073749297 code@var398 $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5278 $) .@expr1073749298 intvalue@expr1073749202 ==@expr1073749299 0 $) $) $) { $return ; }
5279:
5280: code@var398 =@expr1073749300 "void f(int i, int j) {\n    if (i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
5281:
5282:
5283:
5284: ;
5285: $if $(@expr1073749301 $!@expr1073749302 $assertEquals $(@expr1073749303 "cppcheck-2.8/test/testvalueflow.cpp" $, 5285 $, true $, $(@expr1073749304 $valueOfTok_ $(@expr1073749305 code@var398 $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5285 $) .@expr1073749306 intvalue@expr1073749203 ==@expr1073749307 1 $) $) $) { $return ; }
5286:
5287: code@var398 =@expr1073749308 "void f(bool b, int i, int j) {\n    if (b && i == j) {\n        if (i != j) {}\n    }\n}\n"
5288:
5289:
5290:
5291: ;
5292: $if $(@expr1073749309 $!@expr1073749310 $assertEquals $(@expr1073749311 "cppcheck-2.8/test/testvalueflow.cpp" $, 5292 $, true $, $(@expr1073749312 $valueOfTok_ $(@expr1073749313 code@var398 $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5292 $) .@expr1073749314 intvalue@expr1073749204 ==@expr1073749315 0 $) $) $) { $return ; }
5293:
5294: code@var398 =@expr1073749316 "void f(bool b, int i, int j) {\n    if (b || i == j) {\n        if (i != j) {}\n    }\n}\n"
5295:
5296:
5297:
5298: ;
5299: $if $(@expr1073749317 $!@expr1073749318 $assertEquals $(@expr1073749319 "cppcheck-2.8/test/testvalueflow.cpp" $, 5299 $, true $, $(@expr1073749320 removeImpossible (@expr1073749321 $tokenValues_ $(@expr1073749322 "cppcheck-2.8/test/testvalueflow.cpp" $, 5299 $, code@var398 , "!=" $) ) .@expr1073749323 empty (@expr1073749324 ) $) $) $) { $return ; }
5300:
5301: code@var398 =@expr1073749325 "void f(bool b, int i, int j) {\n    if (b || i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
5302:
5303:
5304:
5305: ;
5306: $if $(@expr1073749326 $!@expr1073749327 $assertEquals $(@expr1073749328 "cppcheck-2.8/test/testvalueflow.cpp" $, 5306 $, true $, $(@expr1073749329 $valueOfTok_ $(@expr1073749330 code@var398 $, "!=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5306 $) .@expr1073749331 intvalue@expr1073749205 ==@expr1073749332 1 $) $) $) { $return ; }
5307:
5308: code@var398 =@expr1073749333 "void f(bool b, int i, int j) {\n    if (b && i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
5309:
5310:
5311:
5312: ;
5313: $if $(@expr1073749334 $!@expr1073749335 $assertEquals $(@expr1073749336 "cppcheck-2.8/test/testvalueflow.cpp" $, 5313 $, true $, $(@expr1073749337 removeImpossible (@expr1073749338 $tokenValues_ $(@expr1073749339 "cppcheck-2.8/test/testvalueflow.cpp" $, 5313 $, code@var398 , "!=" $) ) .@expr1073749340 empty (@expr1073749341 ) $) $) $) { $return ; }
5314:
5315: code@var398 =@expr1073749342 "void foo()\n{\n    if ( this->FileIndex >= 0 )\n        return;\n\n    this->FileIndex = 1 ;\n    if ( this->FileIndex < 0 ) {}\n}"
5316:
|
5321:
5322: ;
5323: $if $(@expr1073749343 $!@expr1073749344 $assertEquals $(@expr1073749345 "cppcheck-2.8/test/testvalueflow.cpp" $, 5323 $, false $, $(@expr1073749346 $valueOfTok_ $(@expr1073749347 code@var398 $, "<" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5323 $) .@expr1073749348 intvalue@expr1073749206 ==@expr1073749349 1 $) $) $) { $return ; }
5324:
5325: code@var398 =@expr1073749350 "int f(int p) {\n    int v = 0;\n    for (int i = 0; i < 1; ++i) {\n        if (p == 0)\n            v = 1;\n        if (v == 1)\n            break;\n    }\n    int x = v;\n    return x;\n}\n"
5326:
|
5334:
5335: ;
5336: $if $(@expr1073749351 $!@expr1073749352 $assertEquals $(@expr1073749353 "cppcheck-2.8/test/testvalueflow.cpp" $, 5336 $, false $, $testValueOfXKnown_ $(@expr1073749354 "cppcheck-2.8/test/testvalueflow.cpp" $, 5336 $, code@var398 , 10U , 0 $) $) $) { $return ; }
5337: $if $(@expr1073749355 $!@expr1073749356 $assertEquals $(@expr1073749357 "cppcheck-2.8/test/testvalueflow.cpp" $, 5337 $, false $, $testValueOfXKnown_ $(@expr1073749358 "cppcheck-2.8/test/testvalueflow.cpp" $, 5337 $, code@var398 , 10U , 1 $) $) $) { $return ; }
5338:
5339: code@var398 =@expr1073749359 "void f() {\n    const int size = arrayInfo.num(0);\n    if (size <= 0)\n        return;\n    for (;;)\n        if (size > 0) {}\n}\n"
5340:
|
5344:
5345: ;
5346: $if $(@expr1073749360 $!@expr1073749361 $assertEquals $(@expr1073749362 "cppcheck-2.8/test/testvalueflow.cpp" $, 5346 $, true $, $(@expr1073749363 $valueOfTok_ $(@expr1073749364 code@var398 $, "> 0" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5346 $) .@expr1073749365 isKnown (@expr1073749366 ) $) $) $) { $return ; }
5347: $if $(@expr1073749367 $!@expr1073749368 $assertEquals $(@expr1073749369 "cppcheck-2.8/test/testvalueflow.cpp" $, 5347 $, true $, $(@expr1073749370 $valueOfTok_ $(@expr1073749371 code@var398 $, "> 0" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5347 $) .@expr1073749372 intvalue@expr1073749207 ==@expr1073749373 1 $) $) $) { $return ; }
5348:
5349:
5350: code@var398 =@expr1073749374 "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (!x) {\n        return false;\n    }\n\n    if (x & CB) {\n        return true;\n    }\n    return false;\n}\n"
5351:
|
5359:
5360: ;
5361: $if $(@expr1073749375 $!@expr1073749376 $assertEquals $(@expr1073749377 "cppcheck-2.8/test/testvalueflow.cpp" $, 5361 $, false $, $(@expr1073749378 $valueOfTok_ $(@expr1073749379 code@var398 $, "& CB" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5361 $) .@expr1073749380 isKnown (@expr1073749381 ) $) $) $) { $return ; }
5362: $if $(@expr1073749382 $!@expr1073749383 $assertEquals $(@expr1073749384 "cppcheck-2.8/test/testvalueflow.cpp" $, 5362 $, true $, $testValueOfXImpossible_ $(@expr1073749385 "cppcheck-2.8/test/testvalueflow.cpp" $, 5362 $, code@var398 , 7U , 0 $) $) $) { $return ; }
5363:
5364: code@var398 =@expr1073749386 "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (x) {\n        return false;\n    }\n\n    if ((!x) & CB) {\n        return true;\n    }\n    return false;\n}\n"
5365:
|
5373:
5374: ;
5375: $if $(@expr1073749387 $!@expr1073749388 $assertEquals $(@expr1073749389 "cppcheck-2.8/test/testvalueflow.cpp" $, 5375 $, true $, $(@expr1073749390 $valueOfTok_ $(@expr1073749391 code@var398 $, "& CB" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5375 $) .@expr1073749392 isKnown (@expr1073749393 ) $) $) $) { $return ; }
5376: $if $(@expr1073749394 $!@expr1073749395 $assertEquals $(@expr1073749396 "cppcheck-2.8/test/testvalueflow.cpp" $, 5376 $, true $, $testValueOfXKnown_ $(@expr1073749397 "cppcheck-2.8/test/testvalueflow.cpp" $, 5376 $, code@var398 , 7U , 0 $) $) $) { $return ; }
5377:
5378: code@var398 =@expr1073749398 "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (!!x) {\n        return false;\n    }\n\n    if (x & CB) {\n        return true;\n    }\n    return false;\n}\n"
5379:
|
5387:
5388: ;
5389: $if $(@expr1073749399 $!@expr1073749400 $assertEquals $(@expr1073749401 "cppcheck-2.8/test/testvalueflow.cpp" $, 5389 $, true $, $(@expr1073749402 $valueOfTok_ $(@expr1073749403 code@var398 $, "& CB" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 5389 $) .@expr1073749404 isKnown (@expr1073749405 ) $) $) $) { $return ; }
5390: $if $(@expr1073749406 $!@expr1073749407 $assertEquals $(@expr1073749408 "cppcheck-2.8/test/testvalueflow.cpp" $, 5390 $, true $, $testValueOfXKnown_ $(@expr1073749409 "cppcheck-2.8/test/testvalueflow.cpp" $, 5390 $, code@var398 , 7U , 0 $) $) $) { $return ; }
5391:
5392: code@var398 =@expr1073749410 "bool calc(bool x) {\n    if (!x) {\n        return false;\n    }\n\n    if (x) {\n        return true;\n    }\n    return false;\n}\n"
5393:
|
5400:
5401: ;
5402: $if $(@expr1073749411 $!@expr1073749412 $assertEquals $(@expr1073749413 "cppcheck-2.8/test/testvalueflow.cpp" $, 5402 $, true $, $testValueOfXKnown_ $(@expr1073749414 "cppcheck-2.8/test/testvalueflow.cpp" $, 5402 $, code@var398 , 6U , 1 $) $) $) { $return ; }
5403:
5404: code@var398 =@expr1073749415 "bool calc(bool x) {\n    if (x) {\n        return false;\n    }\n\n    if (!x) {\n        return true;\n    }\n    return false;\n}\n"
5405:
|
5412:
5413: ;
5414: $if $(@expr1073749416 $!@expr1073749417 $assertEquals $(@expr1073749418 "cppcheck-2.8/test/testvalueflow.cpp" $, 5414 $, true $, $testValueOfXKnown_ $(@expr1073749419 "cppcheck-2.8/test/testvalueflow.cpp" $, 5414 $, code@var398 , 6U , 0 $) $) $) { $return ; }
5415: }
5416:
5417: static std :: string isPossibleContainerSizeValue ( std :: list < ValueFlow :: Value > values@var399 ,
5418: MathLib :: bigint i@var400 ,
5419: bool unique@var401 = true ) {
5420: values@var399 .@expr7598 remove_if (@expr1073749423 std ::@expr1073749424 mem_fn (@expr1073749425 &@expr1073749426 ValueFlow ::@expr1073749427 Value ::@expr1073749428 isSymbolicValue@expr1073749420 ) ) ;
5421: if (@expr1073749429 !@expr1073749430 unique@var401 ) {
5422: values@var399 .@expr7598 remove_if (@expr1073749432 &@expr1073749433 isNotPossible ) ; }
5423: if (@expr1073749434 values@var399 .@expr7611 size (@expr7612 ) !=@expr1073749437 1 ) {
5424: return "values.size():" +@expr1073749438 std ::@expr7615 to_string (@expr1073749440 values@var399 .@expr7611 size (@expr7612 ) ) ; }
5425: if (@expr1073749443 !@expr1073749444 values@var399 .@expr7621 front (@expr7622 ) .@expr1073749447 isContainerSizeValue (@expr1073749448 ) ) {
5426: return "ContainerSizeValue" ; }
5427: if (@expr1073749449 !@expr1073749450 values@var399 .@expr7621 front (@expr7622 ) .@expr1073749453 isPossible (@expr1073749454 ) ) {
5428: return "Possible" ; }
5429: if (@expr1073749455 values@var399 .@expr7621 front (@expr7622 ) .@expr7634 intvalue@expr7597 !=@expr1073749459 i@var400 ) {
5430: return "intvalue:" +@expr1073749460 std ::@expr7615 to_string (@expr1073749462 values@var399 .@expr7621 front (@expr7622 ) .@expr7634 intvalue@expr7597 ) ; }
5431: return "" ;
5432: }
5433:
5434: static std :: string isImpossibleContainerSizeValue ( std :: list < ValueFlow :: Value > values@var402 ,
5435: MathLib :: bigint i@var403 ,
5436: bool unique@var404 = true ) {
5437: values@var402 .@expr7644 remove_if (@expr1073749469 std ::@expr1073749470 mem_fn (@expr1073749471 &@expr1073749472 ValueFlow ::@expr1073749473 Value ::@expr1073749474 isSymbolicValue@expr1073749466 ) ) ;
5438: if (@expr1073749475 !@expr1073749476 unique@var404 ) {
5439: values@var402 .@expr7644 remove_if (@expr1073749478 &@expr1073749479 isNotImpossible ) ; }
5440: if (@expr1073749480 values@var402 .@expr7657 size (@expr7658 ) !=@expr1073749483 1 ) {
5441: return "values.size():" +@expr1073749484 std ::@expr7661 to_string (@expr1073749486 values@var402 .@expr7657 size (@expr7658 ) ) ; }
5442: if (@expr1073749489 !@expr1073749490 values@var402 .@expr7667 front (@expr7668 ) .@expr1073749493 isContainerSizeValue (@expr1073749494 ) ) {
5443: return "ContainerSizeValue" ; }
5444: if (@expr1073749495 !@expr1073749496 values@var402 .@expr7667 front (@expr7668 ) .@expr1073749499 isImpossible (@expr1073749500 ) ) {
5445: return "Impossible" ; }
5446: if (@expr1073749501 values@var402 .@expr7667 front (@expr7668 ) .@expr7680 intvalue@expr7643 !=@expr1073749505 i@var403 ) {
5447: return "intvalue:" +@expr1073749506 std ::@expr7661 to_string (@expr1073749508 values@var402 .@expr7667 front (@expr7668 ) .@expr7680 intvalue@expr7643 ) ; }
5448: return "" ;
5449: }
5450:
5451: static std :: string isInconclusiveContainerSizeValue ( std :: list < ValueFlow :: Value > values@var405 ,
5452: MathLib :: bigint i@var406 ,
5453: bool unique@var407 = true ) {
5454: values@var405 .@expr7690 remove_if (@expr1073749515 std ::@expr1073749516 mem_fn (@expr1073749517 &@expr1073749518 ValueFlow ::@expr1073749519 Value ::@expr1073749520 isSymbolicValue@expr1073749512 ) ) ;
5455: if (@expr1073749521 !@expr1073749522 unique@var407 ) {
5456: values@var405 .@expr7690 remove_if (@expr1073749524 &@expr1073749525 isNotInconclusive ) ; }
5457: if (@expr1073749526 values@var405 .@expr7703 size (@expr7704 ) !=@expr1073749529 1 ) {
5458: return "values.size():" +@expr1073749530 std ::@expr7707 to_string (@expr1073749532 values@var405 .@expr7703 size (@expr7704 ) ) ; }
5459: if (@expr1073749535 !@expr1073749536 values@var405 .@expr7713 front (@expr7714 ) .@expr1073749539 isContainerSizeValue (@expr1073749540 ) ) {
5460: return "ContainerSizeValue" ; }
5461: if (@expr1073749541 !@expr1073749542 values@var405 .@expr7713 front (@expr7714 ) .@expr1073749545 isInconclusive (@expr1073749546 ) ) {
5462: return "Inconclusive" ; }
5463: if (@expr1073749547 values@var405 .@expr7713 front (@expr7714 ) .@expr7726 intvalue@expr7689 !=@expr1073749551 i@var406 ) {
5464: return "intvalue:" +@expr1073749552 std ::@expr7707 to_string (@expr1073749554 values@var405 .@expr7713 front (@expr7714 ) .@expr7726 intvalue@expr7689 ) ; }
5465: return "" ;
5466: }
5467:
5468: static std :: string isKnownContainerSizeValue ( std :: list < ValueFlow :: Value > values@var408 , MathLib :: bigint i@var409 , bool unique@var410 = true ) {
5469: values@var408 .@expr7736 remove_if (@expr1073749561 std ::@expr1073749562 mem_fn (@expr1073749563 &@expr1073749564 ValueFlow ::@expr1073749565 Value ::@expr1073749566 isSymbolicValue@expr1073749558 ) ) ;
5470: if (@expr1073749567 !@expr1073749568 unique@var410 ) {
5471: values@var408 .@expr7736 remove_if (@expr1073749570 &@expr1073749571 isNotKnown ) ; }
5472: if (@expr1073749572 values@var408 .@expr7749 size (@expr7750 ) !=@expr1073749575 1 ) {
5473: return "values.size():" +@expr1073749576 std ::@expr7753 to_string (@expr1073749578 values@var408 .@expr7749 size (@expr7750 ) ) ; }
5474: if (@expr1073749581 !@expr1073749582 values@var408 .@expr7759 front (@expr7760 ) .@expr1073749585 isContainerSizeValue (@expr1073749586 ) ) {
5475: return "ContainerSizeValue" ; }
5476: if (@expr1073749587 !@expr1073749588 values@var408 .@expr7759 front (@expr7760 ) .@expr1073749591 isKnown (@expr1073749592 ) ) {
5477: return "Known" ; }
5478: if (@expr1073749593 values@var408 .@expr7759 front (@expr7760 ) .@expr7772 intvalue@expr7735 !=@expr1073749597 i@var409 ) {
5479: return "intvalue:" +@expr1073749598 std ::@expr7753 to_string (@expr1073749600 values@var408 .@expr7759 front (@expr7760 ) .@expr7772 intvalue@expr7735 ) ; }
5480: return "" ;
5481: }
5482:
5483: void valueFlowContainerSize ( ) {
5484: const char * code@var411 ;
5485:
5486: $do ${ $if $(@expr1073749607 settings@var102 .@expr1073749608 library@var104 $.@expr1073749609 $load $(@expr1073749610 $exename@var11 $.@expr1073749611 $c_str $(@expr1073749612 $) $, "std.cfg" $) $.@expr1073749613 $errorcode $!=@expr1073749614 $Library $::@expr1073749615 $ErrorCode $::@expr1073749616 $OK $) ${ $complainMissingLib $(@expr1073749617 "std.cfg" $) $; $return $; $} $} $while $(@expr1073749618 $false $) ;
5487:
5488:
5489: code@var411 =@expr1073749619 "void f(const std::list<int> &ints) {\n  if (!static_cast<bool>(ints.empty()))\n    ints.front();\n}"
5490:
5491:
5492: ;
5493: $if $(@expr1073749620 $!@expr1073749621 $assertEquals $(@expr1073749622 "cppcheck-2.8/test/testvalueflow.cpp" $, 5493 $, "" $, isImpossibleContainerSizeValue (@expr1073749623 $tokenValues_ $(@expr1073749624 "cppcheck-2.8/test/testvalueflow.cpp" $, 5493 $, code@var411 , "ints . front" $) , 0 ) $) $) { $return ; }
5494:
5495:
5496: code@var411 =@expr1073749625 "void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.empty()) {}\n}"
5497:
5498:
5499: ;
5500: $if $(@expr1073749626 $!@expr1073749627 $assertEquals $(@expr1073749628 "cppcheck-2.8/test/testvalueflow.cpp" $, 5500 $, "" $, isPossibleContainerSizeValue (@expr1073749629 $tokenValues_ $(@expr1073749630 "cppcheck-2.8/test/testvalueflow.cpp" $, 5500 $, code@var411 , "ints . front" $) , 0 ) $) $) { $return ; }
5501:
5502: code@var411 =@expr1073749631 "void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.size()==0) {}\n}"
5503:
5504:
5505: ;
5506: $if $(@expr1073749632 $!@expr1073749633 $assertEquals $(@expr1073749634 "cppcheck-2.8/test/testvalueflow.cpp" $, 5506 $, "" $, isPossibleContainerSizeValue (@expr1073749635 $tokenValues_ $(@expr1073749636 "cppcheck-2.8/test/testvalueflow.cpp" $, 5506 $, code@var411 , "ints . front" $) , 0 ) $) $) { $return ; }
5507:
5508: code@var411 =@expr1073749637 "void f(std::list<int> ints) {\n  ints.front();\n  ints.pop_back();\n  if (ints.empty()) {}\n}"
5509:
5510:
5511:
5512: ;
5513: $if $(@expr1073749638 $!@expr1073749639 $assert_ $(@expr1073749640 "cppcheck-2.8/test/testvalueflow.cpp" $, 5513 $, $(@expr1073749641 $tokenValues_ $(@expr1073749642 "cppcheck-2.8/test/testvalueflow.cpp" $, 5513 $, code@var411 , "ints . front" $) .@expr1073749643 empty (@expr1073749644 ) $) $) $) { $return ; }
5514:
5515: code@var411 =@expr1073749645 "void f(std::vector<int> v) {\n  v[10] = 0;\n  if (v.size() == 10) {}\n}"
5516:
5517:
5518: ;
5519: $if $(@expr1073749646 $!@expr1073749647 $assertEquals $(@expr1073749648 "cppcheck-2.8/test/testvalueflow.cpp" $, 5519 $, "" $, isPossibleContainerSizeValue (@expr1073749649 $tokenValues_ $(@expr1073749650 "cppcheck-2.8/test/testvalueflow.cpp" $, 5519 $, code@var411 , "v [" $) , 10 ) $) $) { $return ; }
5520:
5521: code@var411 =@expr1073749651 "void f(std::vector<std::string> params) {\n  switch(x) {\n  case CMD_RESPONSE:\n    if(y) { break; }\n    params[2];\n    break;\n  case CMD_DELETE:\n    if (params.size() < 2) { }\n    break;\n  }\n}"
5522:
|
5530:
5531: ;
5532: $if $(@expr1073749652 $!@expr1073749653 $assert_ $(@expr1073749654 "cppcheck-2.8/test/testvalueflow.cpp" $, 5532 $, $(@expr1073749655 $tokenValues_ $(@expr1073749656 "cppcheck-2.8/test/testvalueflow.cpp" $, 5532 $, code@var411 , "params [ 2 ]" $) .@expr1073749657 empty (@expr1073749658 ) $) $) $) { $return ; }
5533:
5534:
5535: code@var411 =@expr1073749659 "void f(const std::vector<std::string>& v) {\n    if(v.empty()) {\n        v.front();\n    }\n}\n"
5536:
5537:
5538:
5539: ;
5540: $if $(@expr1073749660 $!@expr1073749661 $assertEquals $(@expr1073749662 "cppcheck-2.8/test/testvalueflow.cpp" $, 5540 $, "" $, isKnownContainerSizeValue (@expr1073749663 $tokenValues_ $(@expr1073749664 "cppcheck-2.8/test/testvalueflow.cpp" $, 5540 $, code@var411 , "v . front" $) , 0 ) $) $) { $return ; }
5541:
5542: code@var411 =@expr1073749665 "void f(const std::vector<std::string>& v) {\n    if(std::empty(v)) {\n        v.front();\n    }\n}\n"
5543:
5544:
5545:
5546: ;
5547: $if $(@expr1073749666 $!@expr1073749667 $assertEquals $(@expr1073749668 "cppcheck-2.8/test/testvalueflow.cpp" $, 5547 $, "" $, isKnownContainerSizeValue (@expr1073749669 $tokenValues_ $(@expr1073749670 "cppcheck-2.8/test/testvalueflow.cpp" $, 5547 $, code@var411 , "v . front" $) , 0 ) $) $) { $return ; }
5548:
5549: code@var411 =@expr1073749671 "void f(const std::vector<std::string>& v) {\n    if(!v.empty()) {\n        v.front();\n    }\n}\n"
5550:
5551:
5552:
5553: ;
5554: $if $(@expr1073749672 $!@expr1073749673 $assertEquals $(@expr1073749674 "cppcheck-2.8/test/testvalueflow.cpp" $, 5554 $, "" $, isImpossibleContainerSizeValue (@expr1073749675 $tokenValues_ $(@expr1073749676 "cppcheck-2.8/test/testvalueflow.cpp" $, 5554 $, code@var411 , "v . front" $) , 0 ) $) $) { $return ; }
5555:
5556: code@var411 =@expr1073749677 "void f(const std::vector<std::string>& v) {\n    if(!v.empty() && v[0] != \"\") {\n        v.front();\n    }\n}\n"
5557:
5558:
5559:
5560: ;
5561: $if $(@expr1073749678 $!@expr1073749679 $assertEquals $(@expr1073749680 "cppcheck-2.8/test/testvalueflow.cpp" $, 5561 $, "" $, isImpossibleContainerSizeValue (@expr1073749681 $tokenValues_ $(@expr1073749682 "cppcheck-2.8/test/testvalueflow.cpp" $, 5561 $, code@var411 , "v . front" $) , 0 ) $) $) { $return ; }
5562:
5563:
5564: code@var411 =@expr1073749683 "void f(const std::list<int> &ints) {\n  if (ints.empty()) {}\n  ints.front();\n}"
5565:
5566:
5567: ;
5568: $if $(@expr1073749684 $!@expr1073749685 $assertEquals $(@expr1073749686 "cppcheck-2.8/test/testvalueflow.cpp" $, 5568 $, "" $, isPossibleContainerSizeValue (@expr1073749687 $tokenValues_ $(@expr1073749688 "cppcheck-2.8/test/testvalueflow.cpp" $, 5568 $, code@var411 , "ints . front" $) , 0 ) $) $) { $return ; }
5569:
5570: code@var411 =@expr1073749689 "void f(const std::list<int> &ints) {\n  if (ints.empty()) { continue; }\n  ints.front();\n}"
5571:
5572:
5573: ;
5574: $if $(@expr1073749690 $!@expr1073749691 $assertEquals $(@expr1073749692 "cppcheck-2.8/test/testvalueflow.cpp" $, 5574 $, "" $, isImpossibleContainerSizeValue (@expr1073749693 $tokenValues_ $(@expr1073749694 "cppcheck-2.8/test/testvalueflow.cpp" $, 5574 $, code@var411 , "ints . front" $) , 0 ) $) $) { $return ; }
5575:
5576: code@var411 =@expr1073749695 "void f(const std::list<int> &ints) {\n  if (ints.empty()) { ints.push_back(0); }\n  ints.front();\n}"
5577:
5578:
5579: ;
5580: $if $(@expr1073749696 $!@expr1073749697 $assert_ $(@expr1073749698 "cppcheck-2.8/test/testvalueflow.cpp" $, 5580 $, $(@expr1073749699 $tokenValues_ $(@expr1073749700 "cppcheck-2.8/test/testvalueflow.cpp" $, 5580 $, code@var411 , "ints . front" $) .@expr1073749701 empty (@expr1073749702 ) $) $) $) { $return ; }
5581:
5582: code@var411 =@expr1073749703 "void f(const std::list<int> &ints) {\n  if (ints.empty()) {\n    ints.front();\n  }\n}"
5583:
5584:
5585:
5586: ;
5587: $if $(@expr1073749704 $!@expr1073749705 $assertEquals $(@expr1073749706 "cppcheck-2.8/test/testvalueflow.cpp" $, 5587 $, "" $, isKnownContainerSizeValue (@expr1073749707 $tokenValues_ $(@expr1073749708 "cppcheck-2.8/test/testvalueflow.cpp" $, 5587 $, code@var411 , "ints . front" $) , 0 ) $) $) { $return ; }
5588:
5589: code@var411 =@expr1073749709 "void f(const std::list<int> &ints) {\n  if (ints.size() == 3) {\n    ints.front();\n  }\n}"
5590:
5591:
5592:
5593: ;
5594: $if $(@expr1073749710 $!@expr1073749711 $assertEquals $(@expr1073749712 "cppcheck-2.8/test/testvalueflow.cpp" $, 5594 $, "" $, isKnownContainerSizeValue (@expr1073749713 $tokenValues_ $(@expr1073749714 "cppcheck-2.8/test/testvalueflow.cpp" $, 5594 $, code@var411 , "ints . front" $) , 3 ) $) $) { $return ; }
5595:
5596: code@var411 =@expr1073749715 "void f(const std::list<int> &ints) {\n  if (ints.size() <= 3) {\n    ints.front();\n  }\n}"
5597:
5598:
5599:
5600: ;
5601: $if $(@expr1073749716 $!@expr1073749717 $assertEquals $(@expr1073749718 "cppcheck-2.8/test/testvalueflow.cpp" $, 5601 $, "" $, isPossibleContainerSizeValue (@expr1073749719 $tokenValues_ $(@expr1073749720 "cppcheck-2.8/test/testvalueflow.cpp" $, 5601 $, code@var411 , "ints . front" $) , 3 , false ) $) $) { $return ; }
5602: $if $(@expr1073749721 $!@expr1073749722 $assertEquals $(@expr1073749723 "cppcheck-2.8/test/testvalueflow.cpp" $, 5602 $, "" $, isImpossibleContainerSizeValue (@expr1073749724 $tokenValues_ $(@expr1073749725 "cppcheck-2.8/test/testvalueflow.cpp" $, 5602 $, code@var411 , "ints . front" $) , 4 , false ) $) $) { $return ; }
5603:
5604: code@var411 =@expr1073749726 "void f(const std::list<int> &ints) {\n  if (ints.size() >= 3) {\n    ints.front();\n  }\n}"
5605:
5606:
5607:
5608: ;
5609: $if $(@expr1073749727 $!@expr1073749728 $assertEquals $(@expr1073749729 "cppcheck-2.8/test/testvalueflow.cpp" $, 5609 $, "" $, isPossibleContainerSizeValue (@expr1073749730 $tokenValues_ $(@expr1073749731 "cppcheck-2.8/test/testvalueflow.cpp" $, 5609 $, code@var411 , "ints . front" $) , 3 , false ) $) $) { $return ; }
5610: $if $(@expr1073749732 $!@expr1073749733 $assertEquals $(@expr1073749734 "cppcheck-2.8/test/testvalueflow.cpp" $, 5610 $, "" $, isImpossibleContainerSizeValue (@expr1073749735 $tokenValues_ $(@expr1073749736 "cppcheck-2.8/test/testvalueflow.cpp" $, 5610 $, code@var411 , "ints . front" $) , 2 , false ) $) $) { $return ; }
5611:
5612: code@var411 =@expr1073749737 "void f(const std::list<int> &ints) {\n  if (ints.size() < 3) {\n    ints.front();\n  }\n}"
5613:
5614:
5615:
5616: ;
5617: $if $(@expr1073749738 $!@expr1073749739 $assertEquals $(@expr1073749740 "cppcheck-2.8/test/testvalueflow.cpp" $, 5617 $, "" $, isPossibleContainerSizeValue (@expr1073749741 $tokenValues_ $(@expr1073749742 "cppcheck-2.8/test/testvalueflow.cpp" $, 5617 $, code@var411 , "ints . front" $) , 2 , false ) $) $) { $return ; }
5618: $if $(@expr1073749743 $!@expr1073749744 $assertEquals $(@expr1073749745 "cppcheck-2.8/test/testvalueflow.cpp" $, 5618 $, "" $, isImpossibleContainerSizeValue (@expr1073749746 $tokenValues_ $(@expr1073749747 "cppcheck-2.8/test/testvalueflow.cpp" $, 5618 $, code@var411 , "ints . front" $) , 3 , false ) $) $) { $return ; }
5619:
5620: code@var411 =@expr1073749748 "void f(const std::list<int> &ints) {\n  if (ints.size() > 3) {\n    ints.front();\n  }\n}"
5621:
5622:
5623:
5624: ;
5625: $if $(@expr1073749749 $!@expr1073749750 $assertEquals $(@expr1073749751 "cppcheck-2.8/test/testvalueflow.cpp" $, 5625 $, "" $, isPossibleContainerSizeValue (@expr1073749752 $tokenValues_ $(@expr1073749753 "cppcheck-2.8/test/testvalueflow.cpp" $, 5625 $, code@var411 , "ints . front" $) , 4 , false ) $) $) { $return ; }
5626: $if $(@expr1073749754 $!@expr1073749755 $assertEquals $(@expr1073749756 "cppcheck-2.8/test/testvalueflow.cpp" $, 5626 $, "" $, isImpossibleContainerSizeValue (@expr1073749757 $tokenValues_ $(@expr1073749758 "cppcheck-2.8/test/testvalueflow.cpp" $, 5626 $, code@var411 , "ints . front" $) , 3 , false ) $) $) { $return ; }
5627:
5628: code@var411 =@expr1073749759 "void f(const std::list<int> &ints) {\n  if (ints.empty() == false) {\n    ints.front();\n  }\n}"
5629:
5630:
5631:
5632: ;
5633: $if $(@expr1073749760 $!@expr1073749761 $assert_ $(@expr1073749762 "cppcheck-2.8/test/testvalueflow.cpp" $, 5633 $, $(@expr1073749763 $tokenValues_ $(@expr1073749764 "cppcheck-2.8/test/testvalueflow.cpp" $, 5633 $, code@var411 , "ints . front" $) .@expr1073749765 empty (@expr1073749766 ) $) $) $) { $return ; }
5634:
5635: code@var411 =@expr1073749767 "void f(const std::vector<int> &v) {\n  if (v.empty()) {}\n  if (!v.empty() && v[10]==0) {}\n}"
5636:
5637:
5638: ;
5639: $if $(@expr1073749768 $!@expr1073749769 $assert_ $(@expr1073749770 "cppcheck-2.8/test/testvalueflow.cpp" $, 5639 $, $(@expr1073749771 removeImpossible (@expr1073749772 $tokenValues_ $(@expr1073749773 "cppcheck-2.8/test/testvalueflow.cpp" $, 5639 $, code@var411 , "v [" $) ) .@expr1073749774 empty (@expr1073749775 ) $) $) $) { $return ; }
5640:
5641: code@var411 =@expr1073749776 "void f() {\n  std::list<int> ints;\n  ints.front();\n}"
5642:
5643:
5644: ;
5645: $if $(@expr1073749777 $!@expr1073749778 $assertEquals $(@expr1073749779 "cppcheck-2.8/test/testvalueflow.cpp" $, 5645 $, "" $, isKnownContainerSizeValue (@expr1073749780 $tokenValues_ $(@expr1073749781 "cppcheck-2.8/test/testvalueflow.cpp" $, 5645 $, code@var411 , "ints . front" $) , 0 ) $) $) { $return ; }
5646:
5647: code@var411 =@expr1073749782 "void f() {\n  std::array<int,10> ints;\n  ints.front();\n}"
5648:
5649:
5650: ;
5651: $if $(@expr1073749783 $!@expr1073749784 $assertEquals $(@expr1073749785 "cppcheck-2.8/test/testvalueflow.cpp" $, 5651 $, "" $, isKnownContainerSizeValue (@expr1073749786 $tokenValues_ $(@expr1073749787 "cppcheck-2.8/test/testvalueflow.cpp" $, 5651 $, code@var411 , "ints . front" $) , 10 ) $) $) { $return ; }
5652:
5653: code@var411 =@expr1073749788 "void f() {\n  std::string s;\n  cin >> s;\n  s[0];\n}"
5654:
5655:
5656:
5657: ;
5658: $if $(@expr1073749789 $!@expr1073749790 $assert_ $(@expr1073749791 "cppcheck-2.8/test/testvalueflow.cpp" $, 5658 $, $(@expr1073749792 $tokenValues_ $(@expr1073749793 "cppcheck-2.8/test/testvalueflow.cpp" $, 5658 $, code@var411 , "s [" $) .@expr1073749794 empty (@expr1073749795 ) $) $) $) { $return ; }
5659:
5660: code@var411 =@expr1073749796 "void f() {\n  std::string s = \"abc\";\n  s.size();\n}"
5661:
5662:
5663: ;
5664: $if $(@expr1073749797 $!@expr1073749798 $assertEquals $(@expr1073749799 "cppcheck-2.8/test/testvalueflow.cpp" $, 5664 $, "" $, isKnownContainerSizeValue (@expr1073749800 $tokenValues_ $(@expr1073749801 "cppcheck-2.8/test/testvalueflow.cpp" $, 5664 $, code@var411 , "s . size" $) , 3 ) $) $) { $return ; }
5665:
5666: code@var411 =@expr1073749802 "void f(const char* p) {\n  if (p == nullptr) return;\n  std::string s { p };\n  s.front();\n}"
5667:
5668:
5669:
5670: ;
5671: $if $(@expr1073749803 $!@expr1073749804 $assert_ $(@expr1073749805 "cppcheck-2.8/test/testvalueflow.cpp" $, 5671 $, $(@expr1073749806 $tokenValues_ $(@expr1073749807 "cppcheck-2.8/test/testvalueflow.cpp" $, 5671 $, code@var411 , "s . front" $) .@expr1073749808 empty (@expr1073749809 ) $) $) $) { $return ; }
5672:
5673: code@var411 =@expr1073749810 "void f() {\n  std::string s = { 'a', 'b', 'c' };\n  s.size();\n}"
5674:
5675:
5676: ;
5677: $if $(@expr1073749811 $!@expr1073749812 $assertEquals $(@expr1073749813 "cppcheck-2.8/test/testvalueflow.cpp" $, 5677 $, "" $, isKnownContainerSizeValue (@expr1073749814 $tokenValues_ $(@expr1073749815 "cppcheck-2.8/test/testvalueflow.cpp" $, 5677 $, code@var411 , "s . size" $) , 3 ) $) $) { $return ; }
5678:
5679: code@var411 =@expr1073749816 "void f() {\n  std::string s=\"abc\";\n  s += unknown;\n  s.size();\n}"
5680:
5681:
5682:
5683: ;
5684: $if $(@expr1073749817 $!@expr1073749818 $assert_ $(@expr1073749819 "cppcheck-2.8/test/testvalueflow.cpp" $, 5684 $, $(@expr1073749820 $tokenValues_ $(@expr1073749821 "cppcheck-2.8/test/testvalueflow.cpp" $, 5684 $, code@var411 , "s . size" $) .@expr1073749822 empty (@expr1073749823 ) $) $) $) { $return ; }
5685:
5686: code@var411 =@expr1073749824 "void f() {\n  std::string s=\"abc\";\n  s += \"def\";\n  s.size();\n}"
5687:
5688:
5689:
5690: ;
5691: $if $(@expr1073749825 $!@expr1073749826 $assertEquals $(@expr1073749827 "cppcheck-2.8/test/testvalueflow.cpp" $, 5691 $, "" $, isKnownContainerSizeValue (@expr1073749828 $tokenValues_ $(@expr1073749829 "cppcheck-2.8/test/testvalueflow.cpp" $, 5691 $, code@var411 , "s . size" $) , 6 ) $) $) { $return ; }
5692:
5693: code@var411 =@expr1073749830 "void f(std::string s) {\n    if (s == \"hello\")\n        s[40] = c;\n}"
5694:
5695:
5696: ;
5697: $if $(@expr1073749831 $!@expr1073749832 $assertEquals $(@expr1073749833 "cppcheck-2.8/test/testvalueflow.cpp" $, 5697 $, "" $, isKnownContainerSizeValue (@expr1073749834 $tokenValues_ $(@expr1073749835 "cppcheck-2.8/test/testvalueflow.cpp" $, 5697 $, code@var411 , "s [" $) , 5 ) $) $) { $return ; }
5698:
5699: code@var411 =@expr1073749836 "void f(std::string s) {\n    s[40] = c;\n    if (s == \"hello\") {}\n}"
5700:
5701:
5702: ;
5703: $if $(@expr1073749837 $!@expr1073749838 $assertEquals $(@expr1073749839 "cppcheck-2.8/test/testvalueflow.cpp" $, 5703 $, "" $, isPossibleContainerSizeValue (@expr1073749840 $tokenValues_ $(@expr1073749841 "cppcheck-2.8/test/testvalueflow.cpp" $, 5703 $, code@var411 , "s [" $) , 5 ) $) $) { $return ; }
5704:
5705: code@var411 =@expr1073749842 "void f(std::string s) {\n    if (s != \"hello\") {}\n    s[40] = c;\n}"
5706:
5707:
5708: ;
5709: $if $(@expr1073749843 $!@expr1073749844 $assertEquals $(@expr1073749845 "cppcheck-2.8/test/testvalueflow.cpp" $, 5709 $, "" $, isPossibleContainerSizeValue (@expr1073749846 $tokenValues_ $(@expr1073749847 "cppcheck-2.8/test/testvalueflow.cpp" $, 5709 $, code@var411 , "s [" $) , 5 ) $) $) { $return ; }
5710:
5711: code@var411 =@expr1073749848 "void f(std::string s) {\n    if (s != \"hello\")\n        s[40] = c;\n}"
5712:
5713:
5714: ;
5715: $if $(@expr1073749849 $!@expr1073749850 $assert_ $(@expr1073749851 "cppcheck-2.8/test/testvalueflow.cpp" $, 5715 $, $(@expr1073749852 !@expr1073749853 isImpossibleContainerSizeValue (@expr1073749854 $tokenValues_ $(@expr1073749855 "cppcheck-2.8/test/testvalueflow.cpp" $, 5715 $, code@var411 , "s [" $) , 5 ) .@expr1073749856 empty (@expr1073749857 ) $) $) $) { $return ; }
5716:
5717: code@var411 =@expr1073749858 "void f() {\n    static std::string s;\n    if (s.size() == 0)\n        s = x;\n}"
5718:
5719:
5720:
5721: ;
5722: $if $(@expr1073749859 $!@expr1073749860 $assert_ $(@expr1073749861 "cppcheck-2.8/test/testvalueflow.cpp" $, 5722 $, $(@expr1073749862 $tokenValues_ $(@expr1073749863 "cppcheck-2.8/test/testvalueflow.cpp" $, 5722 $, code@var411 , "s . size" $) .@expr1073749864 empty (@expr1073749865 ) $) $) $) { $return ; }
5723:
5724: code@var411 =@expr1073749866 "void f() {\n    const uint8_t data[] = { 1, 2, 3 };\n    std::vector<uint8_t> v{ data, data + sizeof(data) };\n    v.size();\n}"
5725:
5726:
5727:
5728: ;
5729: $if $(@expr1073749867 $!@expr1073749868 $assertEquals $(@expr1073749869 "cppcheck-2.8/test/testvalueflow.cpp" $, 5729 $, "" $, isKnownContainerSizeValue (@expr1073749870 $tokenValues_ $(@expr1073749871 "cppcheck-2.8/test/testvalueflow.cpp" $, 5729 $, code@var411 , "v . size" $) , 3 , false ) $) $) { $return ; }
5730:
5731:
5732: code@var411 =@expr1073749872 "void f() {\n    std::stack<Token *> links;\n    while (!links.empty() || indentlevel)\n        links.push(tok);\n}"
5733:
5734:
5735:
5736: ;
5737: $if $(@expr1073749873 $!@expr1073749874 $assertEquals $(@expr1073749875 "cppcheck-2.8/test/testvalueflow.cpp" $, 5737 $, "" $, isPossibleContainerSizeValue (@expr1073749876 $tokenValues_ $(@expr1073749877 "cppcheck-2.8/test/testvalueflow.cpp" $, 5737 $, code@var411 , "links . empty" $) , 0 ) $) $) { $return ; }
5738:
5739:
5740: code@var411 =@expr1073749878 "void f() {\n  std::list<int> x;\n  f(x);\n  x.front();\n}"
5741:
5742:
5743:
5744: ;
5745: $if $(@expr1073749879 $!@expr1073749880 $assert_ $(@expr1073749881 "cppcheck-2.8/test/testvalueflow.cpp" $, 5745 $, $(@expr1073749882 $tokenValues_ $(@expr1073749883 "cppcheck-2.8/test/testvalueflow.cpp" $, 5745 $, code@var411 , "x . front" $) .@expr1073749884 empty (@expr1073749885 ) $) $) $) { $return ; }
5746:
5747: code@var411 =@expr1073749886 "void f() {\n  std::list<int> x;\n  f<ns::a>(x);\n  x.front();\n}"
5748:
5749:
5750:
5751: ;
5752: $if $(@expr1073749887 $!@expr1073749888 $assert_ $(@expr1073749889 "cppcheck-2.8/test/testvalueflow.cpp" $, 5752 $, $(@expr1073749890 $tokenValues_ $(@expr1073749891 "cppcheck-2.8/test/testvalueflow.cpp" $, 5752 $, code@var411 , "x . front" $) .@expr1073749892 empty (@expr1073749893 ) $) $) $) { $return ; }
5753:
5754: code@var411 =@expr1073749894 "void g(std::list<int>&);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
5755:
|
5758:
5759: ;
5760: $if $(@expr1073749895 $!@expr1073749896 $assert_ $(@expr1073749897 "cppcheck-2.8/test/testvalueflow.cpp" $, 5760 $, $(@expr1073749898 $tokenValues_ $(@expr1073749899 "cppcheck-2.8/test/testvalueflow.cpp" $, 5760 $, code@var411 , "x . front" $) .@expr1073749900 empty (@expr1073749901 ) $) $) $) { $return ; }
5761:
5762: code@var411 =@expr1073749902 "void g(std::list<int>*);\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
5763:
|
5766:
5767: ;
5768: $if $(@expr1073749903 $!@expr1073749904 $assert_ $(@expr1073749905 "cppcheck-2.8/test/testvalueflow.cpp" $, 5768 $, $(@expr1073749906 $tokenValues_ $(@expr1073749907 "cppcheck-2.8/test/testvalueflow.cpp" $, 5768 $, code@var411 , "x . front" $) .@expr1073749908 empty (@expr1073749909 ) $) $) $) { $return ; }
5769:
5770: code@var411 =@expr1073749910 "void g(std::list<int>* const);\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
5771:
|
5774:
5775: ;
5776: $if $(@expr1073749911 $!@expr1073749912 $assert_ $(@expr1073749913 "cppcheck-2.8/test/testvalueflow.cpp" $, 5776 $, $(@expr1073749914 $tokenValues_ $(@expr1073749915 "cppcheck-2.8/test/testvalueflow.cpp" $, 5776 $, code@var411 , "x . front" $) .@expr1073749916 empty (@expr1073749917 ) $) $) $) { $return ; }
5777:
5778: code@var411 =@expr1073749918 "void g(const std::list<int>&);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
5779:
|
5782:
5783: ;
5784: $if $(@expr1073749919 $!@expr1073749920 $assertEquals $(@expr1073749921 "cppcheck-2.8/test/testvalueflow.cpp" $, 5784 $, "" $, isKnownContainerSizeValue (@expr1073749922 $tokenValues_ $(@expr1073749923 "cppcheck-2.8/test/testvalueflow.cpp" $, 5784 $, code@var411 , "x . front" $) , 0 ) $) $) { $return ; }
5785:
5786: code@var411 =@expr1073749924 "void g(std::list<int>);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
5787:
|
5790:
5791: ;
5792: $if $(@expr1073749925 $!@expr1073749926 $assertEquals $(@expr1073749927 "cppcheck-2.8/test/testvalueflow.cpp" $, 5792 $, "" $, isKnownContainerSizeValue (@expr1073749928 $tokenValues_ $(@expr1073749929 "cppcheck-2.8/test/testvalueflow.cpp" $, 5792 $, code@var411 , "x . front" $) , 0 ) $) $) { $return ; }
5793:
5794: code@var411 =@expr1073749930 "void g(int&);\nvoid f() {\n  std::list<int> x;\n  g(x[0]);\n  x.front();\n}"
5795:
|
5798:
5799: ;
5800: $if $(@expr1073749931 $!@expr1073749932 $assertEquals $(@expr1073749933 "cppcheck-2.8/test/testvalueflow.cpp" $, 5800 $, "" $, isKnownContainerSizeValue (@expr1073749934 $tokenValues_ $(@expr1073749935 "cppcheck-2.8/test/testvalueflow.cpp" $, 5800 $, code@var411 , "x . front" $) , 0 ) $) $) { $return ; }
5801:
5802: code@var411 =@expr1073749936 "void g(int&);\nvoid f() {\n  std::list<int> x;\n  g(x.back());\n  x.front();\n}"
5803:
|
5806:
5807: ;
5808: $if $(@expr1073749937 $!@expr1073749938 $assertEquals $(@expr1073749939 "cppcheck-2.8/test/testvalueflow.cpp" $, 5808 $, "" $, isKnownContainerSizeValue (@expr1073749940 $tokenValues_ $(@expr1073749941 "cppcheck-2.8/test/testvalueflow.cpp" $, 5808 $, code@var411 , "x . front" $) , 0 ) $) $) { $return ; }
5809:
5810: code@var411 =@expr1073749942 "void g(std::list<int>&) {}\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
5811:
|
5814:
5815: ;
5816: $if $(@expr1073749943 $!@expr1073749944 $assertEquals $(@expr1073749945 "cppcheck-2.8/test/testvalueflow.cpp" $, 5816 $, "" $, isKnownContainerSizeValue (@expr1073749946 $tokenValues_ $(@expr1073749947 "cppcheck-2.8/test/testvalueflow.cpp" $, 5816 $, code@var411 , "x . front" $) , 0 ) $) $) { $return ; }
5817:
5818: code@var411 =@expr1073749948 "void g(std::list<int>& y) { y.push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
5819:
|
5822:
5823: ;
5824: $if $(@expr1073749949 $!@expr1073749950 $assert_ $(@expr1073749951 "cppcheck-2.8/test/testvalueflow.cpp" $, 5824 $, $(@expr1073749952 $tokenValues_ $(@expr1073749953 "cppcheck-2.8/test/testvalueflow.cpp" $, 5824 $, code@var411 , "x . front" $) .@expr1073749954 empty (@expr1073749955 ) $) $) $) { $return ; }
5825:
5826: code@var411 =@expr1073749956 "void g(std::list<int>*) {}\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
5827:
|
5830:
5831: ;
5832: $if $(@expr1073749957 $!@expr1073749958 $assertEquals $(@expr1073749959 "cppcheck-2.8/test/testvalueflow.cpp" $, 5832 $, "" $, isKnownContainerSizeValue (@expr1073749960 $tokenValues_ $(@expr1073749961 "cppcheck-2.8/test/testvalueflow.cpp" $, 5832 $, code@var411 , "x . front" $) , 0 ) $) $) { $return ; }
5833:
5834: code@var411 =@expr1073749962 "void g(std::list<int>* y) { y->push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
5835:
|
5838:
5839: ;
5840: $if $(@expr1073749963 $!@expr1073749964 $assert_ $(@expr1073749965 "cppcheck-2.8/test/testvalueflow.cpp" $, 5840 $, $(@expr1073749966 $tokenValues_ $(@expr1073749967 "cppcheck-2.8/test/testvalueflow.cpp" $, 5840 $, code@var411 , "x . front" $) .@expr1073749968 empty (@expr1073749969 ) $) $) $) { $return ; }
5841:
5842: code@var411 =@expr1073749970 "void h(std::list<int>&);\nvoid g(std::list<int>& y) { h(y); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
5843:
|
5847:
5848: ;
5849: $if $(@expr1073749971 $!@expr1073749972 $assert_ $(@expr1073749973 "cppcheck-2.8/test/testvalueflow.cpp" $, 5849 $, $(@expr1073749974 $tokenValues_ $(@expr1073749975 "cppcheck-2.8/test/testvalueflow.cpp" $, 5849 $, code@var411 , "x . front" $) .@expr1073749976 empty (@expr1073749977 ) $) $) $) { $return ; }
5850:
5851: code@var411 =@expr1073749978 "void h(const std::list<int>&);\nvoid g(std::list<int>& y) { h(y); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
5852:
|
5856:
5857: ;
5858: $if $(@expr1073749979 $!@expr1073749980 $assertEquals $(@expr1073749981 "cppcheck-2.8/test/testvalueflow.cpp" $, 5858 $, "" $, isKnownContainerSizeValue (@expr1073749982 $tokenValues_ $(@expr1073749983 "cppcheck-2.8/test/testvalueflow.cpp" $, 5858 $, code@var411 , "x . front" $) , 0 ) $) $) { $return ; }
5859:
5860: code@var411 =@expr1073749984 "void h(const std::list<int>&);\nvoid g(std::list<int>& y) { h(y); y.push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
5861:
|
5865:
5866: ;
5867: $if $(@expr1073749985 $!@expr1073749986 $assert_ $(@expr1073749987 "cppcheck-2.8/test/testvalueflow.cpp" $, 5867 $, $(@expr1073749988 $tokenValues_ $(@expr1073749989 "cppcheck-2.8/test/testvalueflow.cpp" $, 5867 $, code@var411 , "x . front" $) .@expr1073749990 empty (@expr1073749991 ) $) $) $) { $return ; }
5868:
5869: code@var411 =@expr1073749992 "void f(std::vector<int> ints) {\n  if (ints.empty())\n    abort() << 123;\n  ints[0] = 0;\n}"
5870:
5871:
5872:
5873: ;
5874: $if $(@expr1073749993 $!@expr1073749994 $assertEquals $(@expr1073749995 "cppcheck-2.8/test/testvalueflow.cpp" $, 5874 $, "" $, isImpossibleContainerSizeValue (@expr1073749996 $tokenValues_ $(@expr1073749997 "cppcheck-2.8/test/testvalueflow.cpp" $, 5874 $, code@var411 , "ints [" $) , 0 ) $) $) { $return ; }
5875:
5876: code@var411 =@expr1073749998 "struct A {\n    double getMessage( std::vector<unsigned char> *message );\n};\n\nstruct B {\n    A *a;\n    double getMessage( std::vector<unsigned char> *message ) { return a->getMessage( message ); }\n};\n\nvoid foo(B *ptr) {\n    std::vector<unsigned char> v;\n    ptr->getMessage (&v);\n    if (v.size () > 0) {}\n}"
5877:
|
5888:
5889: ;
5890: $if $(@expr1073749999 $!@expr1073750000 $assertEquals $(@expr1073750001 "cppcheck-2.8/test/testvalueflow.cpp" $, 5890 $, 0U $, $(@expr1073750002 $tokenValues_ $(@expr1073750003 "cppcheck-2.8/test/testvalueflow.cpp" $, 5890 $, code@var411 , "v . size ( )" $) .@expr1073750004 size (@expr1073750005 ) $) $) $) { $return ; }
5891:
5892:
5893: code@var411 =@expr1073750006 "bool f(std::vector<int>&) {\n  return false;\n}\nint g() {\n    std::vector<int> v;\n    if (f(v) || v.empty())\n        return 0;\n    return v[0];\n}\n"
5894:
|
5900:
5901: ;
5902: $if $(@expr1073750007 $!@expr1073750008 $assertEquals $(@expr1073750009 "cppcheck-2.8/test/testvalueflow.cpp" $, 5902 $, 0U $, $(@expr1073750010 $tokenValues_ $(@expr1073750011 "cppcheck-2.8/test/testvalueflow.cpp" $, 5902 $, code@var411 , "v [ 0 ]" $) .@expr1073750012 size (@expr1073750013 ) $) $) $) { $return ; }
5903:
5904:
5905: code@var411 =@expr1073750014 "void f() {\n  std::string s = \"abcd\";\n  s.size();\n}"
5906:
5907:
5908: ;
5909: $if $(@expr1073750015 $!@expr1073750016 $assertEquals $(@expr1073750017 "cppcheck-2.8/test/testvalueflow.cpp" $, 5909 $, 4 $, $(@expr1073750018 $tokenValues_ $(@expr1073750019 "cppcheck-2.8/test/testvalueflow.cpp" $, 5909 $, code@var411 , "( ) ;" $) .@expr1073750020 front (@expr1073750021 ) .@expr1073750022 intvalue@expr1073749604 $) $) $) { $return ; }
5910:
5911: code@var411 =@expr1073750023 "void f() {\n  std::string s;\n  s.empty();\n}"
5912:
5913:
5914: ;
5915: $if $(@expr1073750024 $!@expr1073750025 $assertEquals $(@expr1073750026 "cppcheck-2.8/test/testvalueflow.cpp" $, 5915 $, 1 $, $(@expr1073750027 $tokenValues_ $(@expr1073750028 "cppcheck-2.8/test/testvalueflow.cpp" $, 5915 $, code@var411 , "( ) ;" $) .@expr1073750029 front (@expr1073750030 ) .@expr1073750031 intvalue@expr1073749605 $) $) $) { $return ; }
5916:
5917:
5918: code@var411 =@expr1073750032 "void f() {\n  std::string s = \"abcd\";\n  x = s + s;\n}"
5919:
5920:
5921: ;
5922: $if $(@expr1073750033 $!@expr1073750034 $assertEquals $(@expr1073750035 "cppcheck-2.8/test/testvalueflow.cpp" $, 5922 $, "" $, isKnownContainerSizeValue (@expr1073750036 $tokenValues_ $(@expr1073750037 "cppcheck-2.8/test/testvalueflow.cpp" $, 5922 $, code@var411 , "+" $) , 8 ) $) $) { $return ; }
5923:
5924: code@var411 =@expr1073750038 "void f(const std::vector<int> &ints) {\n  ints.clear();\n  ints.front();\n}"
5925:
5926:
5927: ;
5928: $if $(@expr1073750039 $!@expr1073750040 $assertEquals $(@expr1073750041 "cppcheck-2.8/test/testvalueflow.cpp" $, 5928 $, "" $, isKnownContainerSizeValue (@expr1073750042 $tokenValues_ $(@expr1073750043 "cppcheck-2.8/test/testvalueflow.cpp" $, 5928 $, code@var411 , "ints . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 0 ) $) $) { $return ; }
5929:
5930: code@var411 =@expr1073750047 "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.front();\n}"
5931:
5932:
5933: ;
5934: $if $(@expr1073750048 $!@expr1073750049 $assertEquals $(@expr1073750050 "cppcheck-2.8/test/testvalueflow.cpp" $, 5934 $, "" $, isKnownContainerSizeValue (@expr1073750051 $tokenValues_ $(@expr1073750052 "cppcheck-2.8/test/testvalueflow.cpp" $, 5934 $, code@var411 , "ints . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 3 ) $) $) { $return ; }
5935:
5936: code@var411 =@expr1073750056 "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.push_back(3);\n  ints.front();\n}"
5937:
5938:
5939:
5940: ;
5941: $if $(@expr1073750057 $!@expr1073750058 $assertEquals $(@expr1073750059 "cppcheck-2.8/test/testvalueflow.cpp" $, 5941 $, "" $, isKnownContainerSizeValue (@expr1073750060 $tokenValues_ $(@expr1073750061 "cppcheck-2.8/test/testvalueflow.cpp" $, 5941 $, code@var411 , "ints . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 4 ) $) $) { $return ; }
5942:
5943: code@var411 =@expr1073750065 "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.pop_back();\n  ints.front();\n}"
5944:
5945:
5946:
5947: ;
5948: $if $(@expr1073750066 $!@expr1073750067 $assertEquals $(@expr1073750068 "cppcheck-2.8/test/testvalueflow.cpp" $, 5948 $, "" $, isKnownContainerSizeValue (@expr1073750069 $tokenValues_ $(@expr1073750070 "cppcheck-2.8/test/testvalueflow.cpp" $, 5948 $, code@var411 , "ints . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 2 ) $) $) { $return ; }
5949:
5950: code@var411 =@expr1073750074 "int f(bool b) {\n    std::map<int, int> m;\n    if (b)\n        m[0] = 1;\n    return m.at(0);\n}\n"
5951:
|
5954:
5955: ;
5956: $if $(@expr1073750075 $!@expr1073750076 $assertEquals $(@expr1073750077 "cppcheck-2.8/test/testvalueflow.cpp" $, 5956 $, "" $, isPossibleContainerSizeValue (@expr1073750078 $tokenValues_ $(@expr1073750079 "cppcheck-2.8/test/testvalueflow.cpp" $, 5956 $, code@var411 , "m . at" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 0 ) $) $) { $return ; }
5957:
5958: code@var411 =@expr1073750083 "struct Base {\n    virtual bool GetString(std::string &) const { return false; }\n};\nint f() {\n    std::string str;\n    Base *b = GetClass();\n    if (!b->GetString(str)) {\n        return -2;\n    }\n    else {\n        return str.front();\n    }\n}\n"
5959:
|
5969:
5970: ;
5971: $if $(@expr1073750084 $!@expr1073750085 $assertEquals $(@expr1073750086 "cppcheck-2.8/test/testvalueflow.cpp" $, 5971 $, 0U $, $(@expr1073750087 $tokenValues_ $(@expr1073750088 "cppcheck-2.8/test/testvalueflow.cpp" $, 5971 $, code@var411 , "str . front" $) .@expr1073750089 size (@expr1073750090 ) $) $) $) { $return ; }
5972:
5973: code@var411 =@expr1073750091 "void f() {\n  std::vector<int> ints{};\n  ints.front();\n}"
5974:
5975:
5976: ;
5977: $if $(@expr1073750092 $!@expr1073750093 $assertEquals $(@expr1073750094 "cppcheck-2.8/test/testvalueflow.cpp" $, 5977 $, "" $, isKnownContainerSizeValue (@expr1073750095 $tokenValues_ $(@expr1073750096 "cppcheck-2.8/test/testvalueflow.cpp" $, 5977 $, code@var411 , "ints . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 0 ) $) $) { $return
5978: ; }
5979:
5980: code@var411 =@expr1073750100 "void f() {\n  std::vector<int> ints{};\n  ints.front();\n}"
5981:
5982:
5983: ;
5984: $if $(@expr1073750101 $!@expr1073750102 $assertEquals $(@expr1073750103 "cppcheck-2.8/test/testvalueflow.cpp" $, 5984 $, "" $, isKnownContainerSizeValue (@expr1073750104 $tokenValues_ $(@expr1073750105 "cppcheck-2.8/test/testvalueflow.cpp" $, 5984 $, code@var411 , "ints . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 0 ) $) $) { $return
5985: ; }
5986:
5987: code@var411 =@expr1073750109 "void f() {\n  std::vector<int> ints{1};\n  ints.front();\n}"
5988:
5989:
5990: ;
5991: $if $(@expr1073750110 $!@expr1073750111 $assertEquals $(@expr1073750112 "cppcheck-2.8/test/testvalueflow.cpp" $, 5991 $, "" $, isKnownContainerSizeValue (@expr1073750113 $tokenValues_ $(@expr1073750114 "cppcheck-2.8/test/testvalueflow.cpp" $, 5991 $, code@var411 , "ints . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 1 ) $) $) { $return
5992: ; }
5993:
5994: code@var411 =@expr1073750118 "void f() {\n  std::vector<int> ints{1};\n  std::vector<int> ints2{ints.begin(), ints.end()};\n  ints2.front();\n}"
5995:
5996:
5997:
5998: ;
5999: $if $(@expr1073750119 $!@expr1073750120 $assertEquals $(@expr1073750121 "cppcheck-2.8/test/testvalueflow.cpp" $, 5999 $, "" $, isKnownContainerSizeValue (@expr1073750122 $tokenValues_ $(@expr1073750123 "cppcheck-2.8/test/testvalueflow.cpp" $, 5999 $, code@var411 , "ints2 . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 1 ) $) $) { $return
6000: ; }
6001:
6002: code@var411 =@expr1073750127 "void f() {\n  std::vector<int> ints = {};\n  ints.front();\n}"
6003:
6004:
6005: ;
6006: $if $(@expr1073750128 $!@expr1073750129 $assertEquals $(@expr1073750130 "cppcheck-2.8/test/testvalueflow.cpp" $, 6006 $, "" $, isKnownContainerSizeValue (@expr1073750131 $tokenValues_ $(@expr1073750132 "cppcheck-2.8/test/testvalueflow.cpp" $, 6006 $, code@var411 , "ints . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 0 ) $) $) { $return
6007: ; }
6008:
6009: code@var411 =@expr1073750136 "void f(std::string str) {\n    if (str == \"123\")\n        bool x = str.empty();\n}\n"
6010:
6011:
6012: ;
6013: $if $(@expr1073750137 $!@expr1073750138 $assertEquals $(@expr1073750139 "cppcheck-2.8/test/testvalueflow.cpp" $, 6013 $, "" $, isKnownContainerSizeValue (@expr1073750140 $tokenValues_ $(@expr1073750141 "cppcheck-2.8/test/testvalueflow.cpp" $, 6013 $, code@var411 , "str . empty" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 3 ) $) $) { $return
6014: ; }
6015:
6016: code@var411 =@expr1073750145 "int f() {\n    std::array<int, 10> a = {};\n    return a.front();\n}\n"
6017:
6018:
6019: ;
6020: $if $(@expr1073750146 $!@expr1073750147 $assertEquals $(@expr1073750148 "cppcheck-2.8/test/testvalueflow.cpp" $, 6020 $, "" $, isKnownContainerSizeValue (@expr1073750149 $tokenValues_ $(@expr1073750150 "cppcheck-2.8/test/testvalueflow.cpp" $, 6020 $, code@var411 , "a . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 10 ) $) $) { $return
6021: ; }
6022:
6023: code@var411 =@expr1073750154 "int f(const std::vector<int>& x) {\n    if (!x.empty() && x[0] == 0)\n        return 2;\n    return x.front();\n}\n"
6024:
6025:
6026:
6027: ;
6028: $if $(@expr1073750155 $!@expr1073750156 $assertEquals $(@expr1073750157 "cppcheck-2.8/test/testvalueflow.cpp" $, 6028 $, "" $, isPossibleContainerSizeValue (@expr1073750158 $tokenValues_ $(@expr1073750159 "cppcheck-2.8/test/testvalueflow.cpp" $, 6028 $, code@var411 , "x . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 0 ) $) $) { $return
6029: ; }
6030:
6031: code@var411 =@expr1073750163 "int f(const std::vector<int>& x) {\n    if (!(x.empty() || x[0] != 0))\n        return 2;\n    return x.front();\n}\n"
6032:
6033:
6034:
6035: ;
6036: $if $(@expr1073750164 $!@expr1073750165 $assertEquals $(@expr1073750166 "cppcheck-2.8/test/testvalueflow.cpp" $, 6036 $, "" $, isPossibleContainerSizeValue (@expr1073750167 $tokenValues_ $(@expr1073750168 "cppcheck-2.8/test/testvalueflow.cpp" $, 6036 $, code@var411 , "x . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 0 ) $) $) { $return
6037: ; }
6038:
6039: code@var411 =@expr1073750172 "int f() {\n    const size_t len = 6;\n    std::vector<char> v;\n    v.resize(1 + len);\n    return v.front();\n}\n"
6040:
|
6043:
6044: ;
6045: $if $(@expr1073750173 $!@expr1073750174 $assertEquals $(@expr1073750175 "cppcheck-2.8/test/testvalueflow.cpp" $, 6045 $, "" $, isKnownContainerSizeValue (@expr1073750176 $tokenValues_ $(@expr1073750177 "cppcheck-2.8/test/testvalueflow.cpp" $, 6045 $, code@var411 , "v . front" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 7 ) $) $) { $return
6046:
6047: ; }
6048:
6049: code@var411 =@expr1073750181 "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str == \"\");\n        bool a = x;\n     }\n}\n"
6050:
|
6053:
6054: ;
6055: $if $(@expr1073750182 $!@expr1073750183 $assertEquals $(@expr1073750184 "cppcheck-2.8/test/testvalueflow.cpp" $, 6055 $, true $, $testValueOfXKnown_ $(@expr1073750185 "cppcheck-2.8/test/testvalueflow.cpp" $, 6055 $, code@var411 , 4U , 0 $) $) $) { $return ; }
6056:
6057: code@var411 =@expr1073750186 "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str != \"\");\n        bool a = x;\n     }\n}\n"
6058:
|
6061:
6062: ;
6063: $if $(@expr1073750187 $!@expr1073750188 $assertEquals $(@expr1073750189 "cppcheck-2.8/test/testvalueflow.cpp" $, 6063 $, true $, $testValueOfXKnown_ $(@expr1073750190 "cppcheck-2.8/test/testvalueflow.cpp" $, 6063 $, code@var411 , 4U , 1 $) $) $) { $return ; }
6064:
6065: code@var411 =@expr1073750191 "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str == \"321\");\n        bool a = x;\n     }\n}\n"
6066:
|
6069:
6070: ;
6071: $if $(@expr1073750192 $!@expr1073750193 $assertEquals $(@expr1073750194 "cppcheck-2.8/test/testvalueflow.cpp" $, 6071 $, false $, $testValueOfXKnown_ $(@expr1073750195 "cppcheck-2.8/test/testvalueflow.cpp" $, 6071 $, code@var411 , 4U , 1 $) $) $) { $return ; }
6072:
6073: code@var411 =@expr1073750196 "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str != \"321\");\n        bool a = x;\n     }\n}\n"
6074:
|
6077:
6078: ;
6079: $if $(@expr1073750197 $!@expr1073750198 $assertEquals $(@expr1073750199 "cppcheck-2.8/test/testvalueflow.cpp" $, 6079 $, false $, $testValueOfXKnown_ $(@expr1073750200 "cppcheck-2.8/test/testvalueflow.cpp" $, 6079 $, code@var411 , 4U , 0 $) $) $) { $return ; }
6080:
6081: code@var411 =@expr1073750201 "void f(std::string str) {\n    if (str.size() == 1) {\n        bool x = (str == \"123\");\n        bool a = x;\n     }\n}\n"
6082:
|
6085:
6086: ;
6087: $if $(@expr1073750202 $!@expr1073750203 $assertEquals $(@expr1073750204 "cppcheck-2.8/test/testvalueflow.cpp" $, 6087 $, true $, $testValueOfXKnown_ $(@expr1073750205 "cppcheck-2.8/test/testvalueflow.cpp" $, 6087 $, code@var411 , 4U , 0 $) $) $) { $return ; }
6088:
6089: code@var411 =@expr1073750206 "bool f(std::string s) {\n    if (!s.empty()) {\n        bool x = s == \"0\";\n        return x;\n    }\n    return false;\n}\n"
6090:
|
6094:
6095: ;
6096: $if $(@expr1073750207 $!@expr1073750208 $assertEquals $(@expr1073750209 "cppcheck-2.8/test/testvalueflow.cpp" $, 6096 $, false $, $testValueOfXKnown_ $(@expr1073750210 "cppcheck-2.8/test/testvalueflow.cpp" $, 6096 $, code@var411 , 4U , 0 $) $) $) { $return ; }
6097: $if $(@expr1073750211 $!@expr1073750212 $assertEquals $(@expr1073750213 "cppcheck-2.8/test/testvalueflow.cpp" $, 6097 $, false $, $testValueOfXKnown_ $(@expr1073750214 "cppcheck-2.8/test/testvalueflow.cpp" $, 6097 $, code@var411 , 4U , 1 $) $) $) { $return ; }
6098: $if $(@expr1073750215 $!@expr1073750216 $assertEquals $(@expr1073750217 "cppcheck-2.8/test/testvalueflow.cpp" $, 6098 $, false $, $testValueOfXImpossible_ $(@expr1073750218 "cppcheck-2.8/test/testvalueflow.cpp" $, 6098 $, code@var411 , 4U , 0 $) $) $) { $return ; }
6099:
6100: code@var411 =@expr1073750219 "void f() {\n    std::vector<int> v;\n    int x = v.size();\n    return x;\n}\n"
6101:
6102:
6103:
6104: ;
6105: $if $(@expr1073750220 $!@expr1073750221 $assertEquals $(@expr1073750222 "cppcheck-2.8/test/testvalueflow.cpp" $, 6105 $, true $, $testValueOfXKnown_ $(@expr1073750223 "cppcheck-2.8/test/testvalueflow.cpp" $, 6105 $, code@var411 , 4U , 0 $) $) $) { $return ; }
6106:
6107: code@var411 =@expr1073750224 "void f() {\n    std::vector<int> v;\n    int x = v.empty();\n    return x;\n}\n"
6108:
6109:
6110:
6111: ;
6112: $if $(@expr1073750225 $!@expr1073750226 $assertEquals $(@expr1073750227 "cppcheck-2.8/test/testvalueflow.cpp" $, 6112 $, true $, $testValueOfXKnown_ $(@expr1073750228 "cppcheck-2.8/test/testvalueflow.cpp" $, 6112 $, code@var411 , 4U , 1 $) $) $) { $return ; }
6113:
6114: code@var411 =@expr1073750229 "void f() {\n    std::vector<int> v;\n    int x = std::size(v);\n    return x;\n}\n"
6115:
6116:
6117:
6118: ;
6119: $if $(@expr1073750230 $!@expr1073750231 $assertEquals $(@expr1073750232 "cppcheck-2.8/test/testvalueflow.cpp" $, 6119 $, true $, $testValueOfXKnown_ $(@expr1073750233 "cppcheck-2.8/test/testvalueflow.cpp" $, 6119 $, code@var411 , 4U , 0 $) $) $) { $return ; }
6120:
6121: code@var411 =@expr1073750234 "void f() {\n    std::vector<int> v;\n    int x = std::empty(v);\n    return x;\n}\n"
6122:
6123:
6124:
6125: ;
6126: $if $(@expr1073750235 $!@expr1073750236 $assertEquals $(@expr1073750237 "cppcheck-2.8/test/testvalueflow.cpp" $, 6126 $, true $, $testValueOfXKnown_ $(@expr1073750238 "cppcheck-2.8/test/testvalueflow.cpp" $, 6126 $, code@var411 , 4U , 1 $) $) $) { $return ; }
6127:
6128: code@var411 =@expr1073750239 "bool f() {\n    std::list<int> x1;\n    std::list<int> x2;\n    for (int i = 0; i < 10; ++i) {\n        std::list<int>& x = (i < 5) ? x1 : x2;\n        x.push_back(i);\n    }\n    return x1.empty() || x2.empty();\n}\n"
6129:
|
6135:
6136: ;
6137: $if $(@expr1073750240 $!@expr1073750241 $assertEquals $(@expr1073750242 "cppcheck-2.8/test/testvalueflow.cpp" $, 6137 $, "" $, isInconclusiveContainerSizeValue (@expr1073750243 $tokenValues_ $(@expr1073750244 "cppcheck-2.8/test/testvalueflow.cpp" $, 6137 $, code@var411 , "x1 . empty" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 0 ) $) $) { $return ; }
6138: $if $(@expr1073750248 $!@expr1073750249 $assertEquals $(@expr1073750250 "cppcheck-2.8/test/testvalueflow.cpp" $, 6138 $, "" $, isInconclusiveContainerSizeValue (@expr1073750251 $tokenValues_ $(@expr1073750252 "cppcheck-2.8/test/testvalueflow.cpp" $, 6138 $, code@var411 , "x2 . empty" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 0 ) $) $) { $return ; }
6139:
6140: code@var411 =@expr1073750256 "std::vector<int> g();\nint f(bool b) {\n    std::set<int> a;\n    std::vector<int> c = g();\n    a.insert(c.begin(), c.end());\n    return a.size();\n}\n"
6141:
|
6145:
6146: ;
6147: $if $(@expr1073750257 $!@expr1073750258 $assertEquals $(@expr1073750259 "cppcheck-2.8/test/testvalueflow.cpp" $, 6147 $, true $, $(@expr1073750260 $tokenValues_ $(@expr1073750261 "cppcheck-2.8/test/testvalueflow.cpp" $, 6147 $, code@var411 , "a . size" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) .@expr1073750265 empty (@expr1073750266 ) $) $) $) { $return ; }
6148:
6149: code@var411 =@expr1073750267 "std::vector<int> g();\nstd::vector<int> f() {\n    std::vector<int> v = g();\n    if (!v.empty()) {\n        if (v[0] != 0)\n            v.clear();\n    }\n    if (!v.empty() && v[0] != 0) {}\n    return v;\n}\n"
6150:
|
6157:
6158: ;
6159: $if $(@expr1073750268 $!@expr1073750269 $assertEquals $(@expr1073750270 "cppcheck-2.8/test/testvalueflow.cpp" $, 6159 $, true $, $(@expr1073750271 removeImpossible (@expr1073750272 $tokenValues_ $(@expr1073750273 "cppcheck-2.8/test/testvalueflow.cpp" $, 6159 $, code@var411 , "v [ 0 ] != 0 ) { }" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) ) .@expr1073750277 empty (@expr1073750278 ) $) $) $) { $return
6160:
6161: ; }
6162:
6163: code@var411 =@expr1073750279 "std::vector<int> f() {\n    std::vector<int> v;\n    v.reserve(1);\n    v[1] = 42;\n    return v;\n}\n"
6164:
|
6167:
6168: ;
6169: $if $(@expr1073750280 $!@expr1073750281 $assertEquals $(@expr1073750282 "cppcheck-2.8/test/testvalueflow.cpp" $, 6169 $, "" $, isKnownContainerSizeValue (@expr1073750283 $tokenValues_ $(@expr1073750284 "cppcheck-2.8/test/testvalueflow.cpp" $, 6169 $, code@var411 , "v [" , ValueFlow ::@expr8220 Value ::@expr8221 ValueType ::@expr8222 CONTAINER_SIZE@expr7782 $) , 0 ) $) $) { $return
6170: ; }
6171:
6172: code@var411 =@expr1073750288 "void f() {\n  std::vector<int> v(3);\n  v.size();\n}"
6173:
6174:
6175: ;
6176: $if $(@expr1073750289 $!@expr1073750290 $assertEquals $(@expr1073750291 "cppcheck-2.8/test/testvalueflow.cpp" $, 6176 $, "" $, isKnownContainerSizeValue (@expr1073750292 $tokenValues_ $(@expr1073750293 "cppcheck-2.8/test/testvalueflow.cpp" $, 6176 $, code@var411 , "v . size" $) , 3 ) $) $) { $return ; }
6177:
6178: code@var411 =@expr1073750294 "void f() {\n  std::vector<int> v({ 1, 2, 3 });\n  v.size();\n}"
6179:
6180:
6181: ;
6182: $if $(@expr1073750295 $!@expr1073750296 $assertEquals $(@expr1073750297 "cppcheck-2.8/test/testvalueflow.cpp" $, 6182 $, "" $, isKnownContainerSizeValue (@expr1073750298 $tokenValues_ $(@expr1073750299 "cppcheck-2.8/test/testvalueflow.cpp" $, 6182 $, code@var411 , "v . size" $) , 3 ) $) $) { $return ; }
6183: }
6184:
6185: void valueFlowDynamicBufferSize ( ) {
6186: const char * code@var412 ;
6187:
6188: $do ${ $if $(@expr1073750301 settings@var102 .@expr8478 library@var104 $.@expr1073750303 $load $(@expr1073750304 $exename@var11 $.@expr1073750305 $c_str $(@expr1073750306 $) $, "std.cfg" $) $.@expr1073750307 $errorcode $!=@expr1073750308 $Library $::@expr1073750309 $ErrorCode $::@expr1073750310 $OK $) ${ $complainMissingLib $(@expr1073750311 "std.cfg" $) $; $return $; $} $} $while $(@expr1073750312 $false $) ;
6189: $do ${ $if $(@expr1073750313 settings@var102 .@expr8478 library@var104 $.@expr1073750315 $load $(@expr1073750316 $exename@var11 $.@expr1073750317 $c_str $(@expr1073750318 $) $, "posix.cfg" $) $.@expr1073750319 $errorcode $!=@expr1073750320 $Library $::@expr1073750321 $ErrorCode $::@expr1073750322 $OK $) ${ $complainMissingLib $(@expr1073750323 "posix.cfg" $) $; $return $; $} $} $while $(@expr1073750324 $false $) ;
6190:
6191: code@var412 =@expr1073750325 "void* f() {\n  void* x = malloc(10);\n  return x;\n}"
6192:
6193:
6194: ;
6195: $if $(@expr1073750326 $!@expr1073750327 $assertEquals $(@expr1073750328 "cppcheck-2.8/test/testvalueflow.cpp" $, 6195 $, true $, $testValueOfX_ $(@expr1073750329 "cppcheck-2.8/test/testvalueflow.cpp" $, 6195 $, code@var412 , 3U , 10 , ValueFlow ::@expr8506 Value ::@expr8507 ValueType ::@expr8508 BUFFER_SIZE@expr8476 $) $) $) { $return ; }
6196:
6197: code@var412 =@expr1073750333 "void* f() {\n  void* x = calloc(4, 5);\n  return x;\n}"
6198:
6199:
6200: ;
6201: $if $(@expr1073750334 $!@expr1073750335 $assertEquals $(@expr1073750336 "cppcheck-2.8/test/testvalueflow.cpp" $, 6201 $, true $, $testValueOfX_ $(@expr1073750337 "cppcheck-2.8/test/testvalueflow.cpp" $, 6201 $, code@var412 , 3U , 20 , ValueFlow ::@expr8506 Value ::@expr8507 ValueType ::@expr8508 BUFFER_SIZE@expr8476 $) $) $) { $return ; }
6202:
6203: code@var412 =@expr1073750341 "void* f() {\n  const char* y = \"abcd\";\n  const char* x = strdup(y);\n  return x;\n}"
6204:
6205:
6206:
6207: ;
6208: $if $(@expr1073750342 $!@expr1073750343 $assertEquals $(@expr1073750344 "cppcheck-2.8/test/testvalueflow.cpp" $, 6208 $, true $, $testValueOfX_ $(@expr1073750345 "cppcheck-2.8/test/testvalueflow.cpp" $, 6208 $, code@var412 , 4U , 5 , ValueFlow ::@expr8506 Value ::@expr8507 ValueType ::@expr8508 BUFFER_SIZE@expr8476 $) $) $) { $return ; }
6209:
6210: code@var412 =@expr1073750349 "void* f() {\n  void* y = malloc(10);\n  void* x = realloc(y, 20);\n  return x;\n}"
6211:
6212:
6213:
6214: ;
6215: $if $(@expr1073750350 $!@expr1073750351 $assertEquals $(@expr1073750352 "cppcheck-2.8/test/testvalueflow.cpp" $, 6215 $, true $, $testValueOfX_ $(@expr1073750353 "cppcheck-2.8/test/testvalueflow.cpp" $, 6215 $, code@var412 , 4U , 20 , ValueFlow ::@expr8506 Value ::@expr8507 ValueType ::@expr8508 BUFFER_SIZE@expr8476 $) $) $) { $return ; }
6216:
6217: code@var412 =@expr1073750357 "void* f() {\n  void* y = calloc(10, 4);\n  void* x = reallocarray(y, 20, 5);\n  return x;\n}"
6218:
6219:
6220:
6221: ;
6222: $if $(@expr1073750358 $!@expr1073750359 $assertEquals $(@expr1073750360 "cppcheck-2.8/test/testvalueflow.cpp" $, 6222 $, true $, $testValueOfX_ $(@expr1073750361 "cppcheck-2.8/test/testvalueflow.cpp" $, 6222 $, code@var412 , 4U , 100 , ValueFlow ::@expr8506 Value ::@expr8507 ValueType ::@expr8508 BUFFER_SIZE@expr8476 $) $) $) { $return ; }
6223: }
6224:
6225: void valueFlowSafeFunctionParameterValues ( ) {
6226: const char * code@var413 ;
6227: std ::@expr1073750369 list < ValueFlow ::@expr8546 Value > values@var414 ;
6228: Settings s@var415 ;
6229: $do ${ $if $(@expr1073750371 s@var415 .@expr1073750372 library@var416 $.@expr1073750373 $load $(@expr1073750374 $exename@var11 $.@expr1073750375 $c_str $(@expr1073750376 $) $, "std.cfg" $) $.@expr1073750377 $errorcode $!=@expr1073750378 $Library $::@expr1073750379 $ErrorCode $::@expr1073750380 $OK $) ${ $complainMissingLib $(@expr1073750381 "std.cfg" $) $; $return $; $} $} $while $(@expr1073750382 $false $) ;
6230: s@var415 .@expr8559 safeChecks@var417 .@expr1073750384 classes@var418 =@expr1073750385 s@var415 .@expr8559 safeChecks@var417 .@expr1073750387 externalFunctions@var419 =@expr1073750388 s@var415 .@expr8559 safeChecks@var417 .@expr1073750390 internalFunctions@var420 =@expr1073750391 true ;
6231:
6232: code@var413 =@expr1073750392 "short f(short x) {\n  return x + 0;\n}"
6233:
6234: ;
6235: values@var414 =@expr1073750393 removeSymbolic (@expr1073750394 $tokenValues_ $(@expr1073750395 "cppcheck-2.8/test/testvalueflow.cpp" $, 6235 $, code@var413 , "+" , &@expr8572 s@var415 $) ) ;
6236: $if $(@expr1073750397 $!@expr1073750398 $assertEquals $(@expr1073750399 "cppcheck-2.8/test/testvalueflow.cpp" $, 6236 $, 2 $, values@var414 .@expr8576 size (@expr8577 ) $) $) { $return ; }
6237: $if $(@expr1073750402 $!@expr1073750403 $assertEquals $(@expr1073750404 "cppcheck-2.8/test/testvalueflow.cpp" $, 6237 $, -0x8000 $, values@var414 .@expr8581 front (@expr8582 ) .@expr8583 intvalue@expr8541 $) $) { $return ; }
6238: $if $(@expr1073750408 $!@expr1073750409 $assertEquals $(@expr1073750410 "cppcheck-2.8/test/testvalueflow.cpp" $, 6238 $, 0x7fff $, values@var414 .@expr8587 back (@expr8588 ) .@expr8589 intvalue@expr8542 $) $) { $return ; }
6239:
6240: code@var413 =@expr1073750414 "short f(std::string x) {\n  return x[10];\n}"
6241:
6242: ;
6243: values@var414 =@expr1073750415 $tokenValues_ $(@expr1073750416 "cppcheck-2.8/test/testvalueflow.cpp" $, 6243 $, code@var413 , "x [" , &@expr8572 s@var415 $) ;
6244: $if $(@expr1073750418 $!@expr1073750419 $assertEquals $(@expr1073750420 "cppcheck-2.8/test/testvalueflow.cpp" $, 6244 $, 2 $, values@var414 .@expr8576 size (@expr8577 ) $) $) { $return ; }
6245: $if $(@expr1073750423 $!@expr1073750424 $assertEquals $(@expr1073750425 "cppcheck-2.8/test/testvalueflow.cpp" $, 6245 $, 0 $, values@var414 .@expr8581 front (@expr8582 ) .@expr8583 intvalue@expr8541 $) $) { $return ; }
6246: $if $(@expr1073750429 $!@expr1073750430 $assertEquals $(@expr1073750431 "cppcheck-2.8/test/testvalueflow.cpp" $, 6246 $, 1000000 $, values@var414 .@expr8587 back (@expr8588 ) .@expr8589 intvalue@expr8542 $) $) { $return ; }
6247:
6248: code@var413 =@expr1073750435 "int f(float x) {\n  return x;\n}"
6249:
6250: ;
6251: values@var414 =@expr1073750436 $tokenValues_ $(@expr1073750437 "cppcheck-2.8/test/testvalueflow.cpp" $, 6251 $, code@var413 , "x ;" , &@expr8572 s@var415 $) ;
6252: $if $(@expr1073750439 $!@expr1073750440 $assertEquals $(@expr1073750441 "cppcheck-2.8/test/testvalueflow.cpp" $, 6252 $, 2 $, values@var414 .@expr8576 size (@expr8577 ) $) $) { $return ; }
6253: $if $(@expr1073750444 $!@expr1073750445 $assert_ $(@expr1073750446 "cppcheck-2.8/test/testvalueflow.cpp" $, 6253 $, values@var414 .@expr8581 front (@expr8582 ) .@expr1073750449 floatValue@expr1073750367 <@expr1073750450 -1E20 $) $) { $return ; }
6254: $if $(@expr1073750451 $!@expr1073750452 $assert_ $(@expr1073750453 "cppcheck-2.8/test/testvalueflow.cpp" $, 6254 $, values@var414 .@expr8587 back (@expr8588 ) .@expr1073750456 floatValue@expr1073750368 >@expr1073750457 1E20 $) $) { $return ; }
6255:
6256: code@var413 =@expr1073750458 "short f(__cppcheck_low__(0) __cppcheck_high__(100) short x) {\n  return x + 0;\n}"
6257:
6258: ;
6259: values@var414 =@expr1073750459 removeSymbolic (@expr1073750460 $tokenValues_ $(@expr1073750461 "cppcheck-2.8/test/testvalueflow.cpp" $, 6259 $, code@var413 , "+" , &@expr8572 s@var415 $) ) ;
6260: $if $(@expr1073750463 $!@expr1073750464 $assertEquals $(@expr1073750465 "cppcheck-2.8/test/testvalueflow.cpp" $, 6260 $, 2 $, values@var414 .@expr8576 size (@expr8577 ) $) $) { $return ; }
6261: $if $(@expr1073750468 $!@expr1073750469 $assertEquals $(@expr1073750470 "cppcheck-2.8/test/testvalueflow.cpp" $, 6261 $, 0 $, values@var414 .@expr8581 front (@expr8582 ) .@expr8583 intvalue@expr8541 $) $) { $return ; }
6262: $if $(@expr1073750474 $!@expr1073750475 $assertEquals $(@expr1073750476 "cppcheck-2.8/test/testvalueflow.cpp" $, 6262 $, 100 $, values@var414 .@expr8587 back (@expr8588 ) .@expr8589 intvalue@expr8542 $) $) { $return ; }
6263:
6264: code@var413 =@expr1073750480 "unsigned short f(unsigned short x) [[expects: x <= 100]] {\n  return x + 0;\n}"
6265:
6266: ;
6267: values@var414 =@expr1073750481 removeSymbolic (@expr1073750482 $tokenValues_ $(@expr1073750483 "cppcheck-2.8/test/testvalueflow.cpp" $, 6267 $, code@var413 , "+" , &@expr8572 s@var415 $) ) ;
6268: values@var414 .@expr1073750485 remove_if (@expr1073750486 [@expr1073750487 ] (@expr1073750488 const ValueFlow ::@expr8546 Value &@expr1073750490 v@var421 ) {
6269: return v@var421 .@expr1073750491 isImpossible (@expr1073750492 ) ;
6270: } ) ;
6271: $if $(@expr1073750493 $!@expr1073750494 $assertEquals $(@expr1073750495 "cppcheck-2.8/test/testvalueflow.cpp" $, 6271 $, 2 $, values@var414 .@expr8576 size (@expr8577 ) $) $) { $return ; }
6272: $if $(@expr1073750498 $!@expr1073750499 $assertEquals $(@expr1073750500 "cppcheck-2.8/test/testvalueflow.cpp" $, 6272 $, 0 $, values@var414 .@expr8581 front (@expr8582 ) .@expr8583 intvalue@expr8541 $) $) { $return ; }
6273: $if $(@expr1073750504 $!@expr1073750505 $assertEquals $(@expr1073750506 "cppcheck-2.8/test/testvalueflow.cpp" $, 6273 $, 100 $, values@var414 .@expr8587 back (@expr8588 ) .@expr8589 intvalue@expr8542 $) $) { $return ; }
6274: }
6275:
6276:
6277: void valueFlowUnknownFunctionReturn ( ) {
6278: const char * code@var422 ;
6279: std ::@expr1073750512 list < ValueFlow ::@expr1073750513 Value > values@var423 ;
6280: Settings s@var424 ;
6281: $do ${ $if $(@expr1073750514 s@var424 .@expr1073750515 library@var425 $.@expr1073750516 $load $(@expr1073750517 $exename@var11 $.@expr1073750518 $c_str $(@expr1073750519 $) $, "std.cfg" $) $.@expr1073750520 $errorcode $!=@expr1073750521 $Library $::@expr1073750522 $ErrorCode $::@expr1073750523 $OK $) ${ $complainMissingLib $(@expr1073750524 "std.cfg" $) $; $return $; $} $} $while $(@expr1073750525 $false $) ;
6282: s@var424 .@expr1073750526 checkUnknownFunctionReturn@var426 .@expr1073750527 insert (@expr1073750528 "rand" ) ;
6283:
6284: code@var422 =@expr1073750529 "x = rand();" ;
6285: values@var423 =@expr1073750530 $tokenValues_ $(@expr1073750531 "cppcheck-2.8/test/testvalueflow.cpp" $, 6285 $, code@var422 , "(" , &@expr1073750532 s@var424 $) ;
6286: $if $(@expr1073750533 $!@expr1073750534 $assertEquals $(@expr1073750535 "cppcheck-2.8/test/testvalueflow.cpp" $, 6286 $, 2 $, values@var423 .@expr1073750536 size (@expr1073750537 ) $) $) { $return ; }
6287: $if $(@expr1073750538 $!@expr1073750539 $assertEquals $(@expr1073750540 "cppcheck-2.8/test/testvalueflow.cpp" $, 6287 $, INT_MIN $, values@var423 .@expr1073750541 front (@expr1073750542 ) .@expr1073750543 intvalue@expr1073750510 $) $) { $return ; }
6288: $if $(@expr1073750544 $!@expr1073750545 $assertEquals $(@expr1073750546 "cppcheck-2.8/test/testvalueflow.cpp" $, 6288 $, INT_MAX $, values@var423 .@expr1073750547 back (@expr1073750548 ) .@expr1073750549 intvalue@expr1073750511 $) $) { $return ; }
6289: }
6290:
6291: void valueFlowPointerAliasDeref ( ) {
6292: const char * code@var427 ;
6293:
6294: code@var427 =@expr1073750550 "int f() {\n  int a = 123;\n  int *p = &a;\n  int x = *p;\n  return x;\n}\n"
6295:
|
6298:
6299: ;
6300: $if $(@expr1073750551 $!@expr1073750552 $assertEquals $(@expr1073750553 "cppcheck-2.8/test/testvalueflow.cpp" $, 6300 $, true $, $testValueOfX_ $(@expr1073750554 "cppcheck-2.8/test/testvalueflow.cpp" $, 6300 $, code@var427 , 5U , 123 $) $) $) { $return ; }
6301: }
6302:
6303: void valueFlowCrashIncompleteCode ( ) {
6304: const char * code@var428 ;
6305:
6306: code@var428 =@expr1073750555 "void SlopeFloor::setAttr(const Value &val) {\n    int x = val;\n    if (x >= -1)\n        state = x;\n}\n"
6307:
6308:
6309:
6310: ;
6311: $valueOfTok_ $(@expr1073750556 code@var428 $, "=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6311 $) ;
6312:
6313: code@var428 =@expr1073750557 "void a() {\n  auto b = [b = 0] {\n    if (b) {\n    }\n  };\n}\n"
6314:
|
6317:
6318: ;
6319: $valueOfTok_ $(@expr1073750558 code@var428 $, "0" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6319 $) ;
6320:
6321: code@var428 =@expr1073750559 "namespace juce {\nPopupMenu::Item& PopupMenu::Item::operator= (Item&&) = default;\nPopupMenu::Options withDeletionCheck (Component& comp) const {\n    Options o (*this);\n    o.componentToWatchForDeletion = &comp;\n    o.isWatchingForDeletion = true;\n    return o;\n}}\n"
6322:
|
6327:
6328: ;
6329: $valueOfTok_ $(@expr1073750560 code@var428 $, "return" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6329 $) ;
6330:
6331: code@var428 =@expr1073750561 "class dummy_resource : public instrument_resource {\npublic:\n    int reads;\n    static std::list<int> log;\n};\nvoid dummy_reader_reset() {\n    dummy_resource::log.clear();\n}\n"
6332:
|
6337:
6338: ;
6339: $valueOfTok_ $(@expr1073750562 code@var428 $, "log" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6339 $) ;
6340: }
6341:
6342: void valueFlowCrash ( ) {
6343: const char * code@var429 ;
6344:
6345: code@var429 =@expr1073750563 "void f(int x) {\n    if (0 * (x > 2)) {}\n}\n"
6346:
6347: ;
6348: $valueOfTok_ $(@expr1073750564 code@var429 $, "x" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6348 $) ;
6349:
6350: code@var429 =@expr1073750565 "struct a {\n  void b();\n};\nvoid d(std::vector<a> c) {\n  a *e;\n  for (auto &child : c)\n    e = &child;\n  (*e).b();\n}\n"
6351:
|
6357:
6358: ;
6359: $valueOfTok_ $(@expr1073750566 code@var429 $, "e" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6359 $) ;
6360:
6361: code@var429 =@expr1073750567 "const int& f(int, const int& y = 0);\nconst int& f(int, const int& y) {\n    return y;\n}\nconst int& g(int x) {\n    const int& r = f(x);\n    return r;\n}\n"
6362:
|
6367:
6368: ;
6369: $valueOfTok_ $(@expr1073750568 code@var429 $, "0" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6369 $) ;
6370:
6371: code@var429 =@expr1073750569 "void fa(int &colors) {\n  for (int i = 0; i != 6; ++i) {}\n}\nvoid fb(not_null<int*> parent, int &&colors2) {\n  dostuff(1);\n}\n"
6372:
|
6375:
6376: ;
6377: $valueOfTok_ $(@expr1073750570 code@var429 $, "x" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6377 $) ;
6378:
6379: code@var429 =@expr1073750571 "void a() {\n  static int x = 0;\n  struct c {\n    c(c &&) { ++x; }\n  };\n}\n"
6380:
|
6383:
6384: ;
6385: $valueOfTok_ $(@expr1073750572 code@var429 $, "x" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6385 $) ;
6386:
6387: code@var429 =@expr1073750573 "void f(){\n      struct dwarf_data **pp;\n      for (pp = (struct dwarf_data **) (void *) &state->fileline_data;\n       *pp != NULL;\n       pp = &(*pp)->next)\n    ;\n}\n"
6388:
|
6392:
6393: ;
6394: $valueOfTok_ $(@expr1073750574 code@var429 $, "x" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6394 $) ;
6395:
6396: code@var429 =@expr1073750575 "void *foo(void *x);\nvoid *foo(void *x)\n{\n    if (!x)\nyes:\n        return &&yes;\n    return x;\n}\n"
6397:
|
6402:
6403: ;
6404: $valueOfTok_ $(@expr1073750576 code@var429 $, "x" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6404 $) ;
6405:
6406: code@var429 =@expr1073750577 "void f() {\n    std::string a = b[c->d()];\n    if(a.empty()) {\n        INFO(std::string{\"a\"} + c->d());\n        INFO(std::string{\"b\"} + a);\n    }\n}\n"
6407:
|
6411:
6412: ;
6413: $valueOfTok_ $(@expr1073750578 code@var429 $, "a" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6413 $) ;
6414:
6415: code@var429 =@expr1073750579 "class A{\n  void f() {\n    std::string c{s()};\n  }\n  std::string s() {\n    return \"\";\n  }\n};\n"
6416:
|
6421:
6422: ;
6423: $valueOfTok_ $(@expr1073750580 code@var429 $, "c" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6423 $) ;
6424:
6425: code@var429 =@expr1073750581 "void f() {\n   char* p = 0;\n   int pi =\n     p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : 0;\n   int *i2 = 0;\n   if (i2) { }\n}\n"
6426:
|
6435:
6436: ;
6437: $valueOfTok_ $(@expr1073750582 code@var429 $, "p" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6437 $) ;
6438:
6439: code@var429 =@expr1073750583 "struct a;\nnamespace e {\nstruct f {\n  struct g {\n    enum {} h;\n    int arg;\n  };\n  std::vector<g> i;\n};\n} // namespace e\nvoid fn1() {\n  std::vector<a *> arguments;\n  e::f b;\n  for (e::f::g c : b.i)\n    if (c.h)\n      a *const d = arguments[c.arg];\n}\n"
6440:
|
6454:
6455: ;
6456: $valueOfTok_ $(@expr1073750584 code@var429 $, "c" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6456 $) ;
6457:
6458: code@var429 =@expr1073750585 "void h(char* p, int s) {\n  char *q = p+s;\n  char buf[100];\n  char *b = buf;\n  ++b;\n  if (p < q && buf < b)\n    diff = (buf-b);\n}\n"
6459:
|
6464:
6465: ;
6466: $valueOfTok_ $(@expr1073750586 code@var429 $, "diff" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6466 $) ;
6467:
6468: code@var429 =@expr1073750587 "void foo() {\n  std::tuple<float, float, float, float> t4(5.2f, 3.1f, 2.4f, 9.1f), t5(4, 6, 9, 27);\n  t4 = t5;\n  ASSERT(!(t4 < t5) && t4 <= t5);\n}"
6469:
6470:
6471:
6472: ;
6473: $valueOfTok_ $(@expr1073750588 code@var429 $, "<=" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6473 $) ;
6474:
6475: code@var429 =@expr1073750589 "void f() {\n    unsigned short Xoff = 10;\n    unsigned short Nx = 0;\n    int last;\n    do {\n        last = readData(0);\n        if (last && (last - Xoff < Nx))\n            Nx = last - Xoff;\n    } while (last > 0);\n}\n"
6476:
|
6483:
6484: ;
6485: $valueOfTok_ $(@expr1073750590 code@var429 $, "last" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6485 $) ;
6486:
6487: code@var429 =@expr1073750591 "struct a {\n  void clear();\n  int b();\n};\nstruct d {\n  void c(int);\n  decltype(auto) f() { c(0 != e.b()); }\n  a e;\n};\nvoid d::c(int) { e.clear(); }\n"
6488:
|
6495:
6496: ;
6497: $valueOfTok_ $(@expr1073750592 code@var429 $, "e" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6497 $) ;
6498:
6499: code@var429 =@expr1073750593 "struct a {\n  int b;\n  int c;\n} f;\nunsigned g;\nstruct {\n  a d;\n} e;\nvoid h() {\n  if (g && f.c)\n    e.d.b = g - f.c;\n}\n"
6500:
|
6509:
6510: ;
6511: $valueOfTok_ $(@expr1073750594 code@var429 $, "e" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6511 $) ;
6512:
6513: code@var429 =@expr1073750595 "struct a {\n  std::vector<a> b;\n  void c(unsigned d) {\n    size_t e = 0;\n    size_t f = 0;\n    for (auto child : b) {\n      f = e;\n      e = d - f;\n    }\n  }\n};\n"
6514:
|
6522:
6523: ;
6524: $valueOfTok_ $(@expr1073750596 code@var429 $, "e" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6524 $) ;
6525:
6526: code@var429 =@expr1073750597 "struct a {\n  struct b {\n    std::unique_ptr<a> c;\n  };\n  void d(int, void *);\n  void e() {\n    d(0, [f = b{}] { return f.c.get(); }());\n  }\n  void g() {\n    if (b *h = 0)\n      h->c.get();\n  }\n};\n"
6527:
|
6537:
6538: ;
6539: $valueOfTok_ $(@expr1073750598 code@var429 $, "f.c" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6539 $) ;
6540:
6541: code@var429 =@expr1073750599 "void d(fmpz_t a, fmpz_t b) {\n  if (fmpz_sgn(0)) {}\n  else if (b) {}\n}\nvoid e(psl2z_t f) {\n  f->b;\n  d(&f->a, c);\n}\n"
6542:
|
6547:
6548: ;
6549: $valueOfTok_ $(@expr1073750600 code@var429 $, "f" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6549 $) ;
6550:
6551: code@var429 =@expr1073750601 "struct bo {\n  int b, c, a, d;\n  char e, g, h, i, aa, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y;\n  long z, ab, ac, ad, f, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar,\n      as;\n  short at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk,\n      bl, bm;\n};\nchar bn;\nvoid bp() {\n  bo s;\n  if (bn)\n    return;\n  s;\n}\n"
6552:
|
6564:
6565: ;
6566: $valueOfTok_ $(@expr1073750602 code@var429 $, "s" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6566 $) ;
6567:
6568: code@var429 =@expr1073750603 "int f(int value) { return 0; }\nstd::shared_ptr<Manager> g() {\n    static const std::shared_ptr<Manager> x{ new M{} };\n    return x;\n}\n"
6569:
6570:
6571:
6572: ;
6573: $valueOfTok_ $(@expr1073750604 code@var429 $, "x" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6573 $) ;
6574:
6575: code@var429 =@expr1073750605 "int* g();\nvoid f() {\n    std::cout << (void*)(std::shared_ptr<int>{ g() }.get());\n}\n"
6576:
6577:
6578: ;
6579: $valueOfTok_ $(@expr1073750606 code@var429 $, "." $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6579 $) ;
6580:
6581: code@var429 =@expr1073750607 "class T;\nstruct S {\n    void f(std::array<T*, 2>& a);\n};\n"
6582:
6583:
6584: ;
6585: $valueOfTok_ $(@expr1073750608 code@var429 $, "a" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6585 $) ;
6586:
6587: code@var429 =@expr1073750609 "void f(const char * const x) { !!system(x); }\n" ;
6588: $valueOfTok_ $(@expr1073750610 code@var429 $, "x" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6588 $) ;
6589:
6590: code@var429 =@expr1073750611 "struct struct1 {\n    int i1;\n    int i2;\n};\nstruct struct2 {\n    char c1;\n    struct1 is1;\n    char c2[4];\n};\nvoid f() {\n    struct2 a = { 1, 2, 3, {4,5,6,7} }; \n}\n"
6591:
|
6600:
6601: ;
6602: $valueOfTok_ $(@expr1073750612 code@var429 $, "a" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6602 $) ;
6603:
6604: code@var429 =@expr1073750613 "void setDeltas(int life, int age, int multiplier) {\n    int dx = 0;\n    int dy = 0;\n    if (age <= 2 || life < 4) {\n        dy = 0;\n        dx = (rand() % 3) - 1;\n    }\n    else if (age < (multiplier * 3)) {\n        if (age % (int) (multiplier * 0.5) == 0) dy = -1;\n        else dy = 0;\n    }\n}\n"
6605:
|
6614:
6615: ;
6616: $valueOfTok_ $(@expr1073750614 code@var429 $, "age" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6616 $) ;
6617:
6618: code@var429 =@expr1073750615 "void a() {\n  struct b {\n    int d;\n  };\n  for (b c : {b{}, {}}) {}\n}\n"
6619:
|
6622:
6623: ;
6624: $valueOfTok_ $(@expr1073750616 code@var429 $, "c" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6624 $) ;
6625: }
6626:
6627: void valueFlowHang ( ) {
6628: const char * code@var430 ;
6629:
6630: code@var430 =@expr1073750617 "float arr1[4][4] = {0.0};\nfloat arr2[4][4] = {0.0};\nvoid f() {\n    if(arr1[0][0] == 0.0 &&\n       arr1[0][1] == 0.0 &&\n       arr1[0][2] == 0.0 &&\n       arr1[0][3] == 0.0 &&\n       arr1[1][0] == 0.0 &&\n       arr1[1][1] == 0.0 &&\n       arr1[1][2] == 0.0 &&\n       arr1[1][3] == 0.0 &&\n       arr1[2][0] == 0.0 &&\n       arr1[2][1] == 0.0 &&\n       arr1[2][2] == 0.0 &&\n       arr1[2][3] == 0.0 &&\n       arr1[3][0] == 0.0 &&\n       arr1[3][1] == 0.0 &&\n       arr1[3][2] == 0.0 &&\n       arr1[3][3] == 0.0 &&\n       arr2[0][0] == 0.0 &&\n       arr2[0][1] == 0.0 &&\n       arr2[0][2] == 0.0 &&\n       arr2[0][3] == 0.0 &&\n       arr2[1][0] == 0.0 &&\n       arr2[1][1] == 0.0 &&\n       arr2[1][2] == 0.0 &&\n       arr2[1][3] == 0.0 &&\n       arr2[2][0] == 0.0 &&\n       arr2[2][1] == 0.0 &&\n       arr2[2][2] == 0.0 &&\n       arr2[2][3] == 0.0 &&\n       arr2[3][0] == 0.0 &&\n       arr2[3][1] == 0.0 &&\n       arr2[3][2] == 0.0 &&\n       arr2[3][3] == 0.0\n       ) {}\n}\n"
6631:
|
6665:
6666: ;
6667: $valueOfTok_ $(@expr1073750618 code@var430 $, "x" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6667 $) ;
6668:
6669: code@var430 =@expr1073750619 "namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b, &b, &b, &b}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {{&b, &b, &b, &b, &b, &b, &b}}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b}}}};\n}\n"
6670:
|
6679:
6680: ;
6681: $valueOfTok_ $(@expr1073750620 code@var430 $, "x" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6681 $) ;
6682:
6683: code@var430 =@expr1073750621 "namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}, {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, {&b}}}},\n    {0,\n     {{&b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b,\n       &b}}}};\n}\n"
6684:
|
6695:
6696: ;
6697: $valueOfTok_ $(@expr1073750622 code@var430 $, "x" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6697 $) ;
6698:
6699: code@var430 =@expr1073750623 "int &a(int &);\nint &b(int &);\nint &c(int &);\nint &d(int &e) {\n  if (!e)\n    return a(e);\n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &a(int &e) { \n  if (!e)\n    return d(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &b(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return c(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\nint &c(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\n"
6700:
|
6736:
6737: ;
6738: $valueOfTok_ $(@expr1073750624 code@var430 $, "x" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6738 $) ;
6739:
6740: code@var430 =@expr1073750625 "void a() {\n  int b = 0;\n  do {\n    for (;;)\n      break;\n  } while (b < 1);\n}\n"
6741:
|
6745:
6746: ;
6747: $valueOfTok_ $(@expr1073750626 code@var430 $, "b" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6747 $) ;
6748:
6749: code@var430 =@expr1073750627 "void ParseEvent(tinyxml2::XMLDocument& doc, std::set<Item*>& retItems) {\n    auto ParseAddItem = [&](Item* item) {\n        return retItems.insert(item).second;\n    };\n    tinyxml2::XMLElement *root = doc.RootElement();\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n}\n"
6750:
|
6768:
6769: ;
6770: $valueOfTok_ $(@expr1073750628 code@var430 $, "root" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6770 $) ;
6771:
6772: code@var430 =@expr1073750629 "bool isCharPotentialOperator(char ch)  {\n    return (ispunct((unsigned char) ch)\n            && ch != '{' && ch != '}'\n            && ch != '(' && ch != ')'\n            && ch != '[' && ch != ']'\n            && ch != ';' && ch != ','\n            && ch != '#' && ch != '\\\\'\n            && ch != '\\\'' && ch != '\\\"');\n}\n"
6773:
|
6779:
6780: ;
6781: $valueOfTok_ $(@expr1073750630 code@var430 $, "return" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6781 $) ;
6782:
6783: code@var430 =@expr1073750631 "void heapSort() {\n    int n = m_size;\n    while (n >= 1) {\n        swap(0, n - 1);\n    }\n}\n"
6784:
|
6787:
6788: ;
6789: $valueOfTok_ $(@expr1073750632 code@var430 $, "swap" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6789 $) ;
6790:
6791: code@var430 =@expr1073750633 "double a;\nint b, c, d, e, f, g;\nvoid h() { double i, j = i = g = f = e = d = c = b = a; }\n"
6792:
6793: ;
6794: $valueOfTok_ $(@expr1073750634 code@var430 $, "a" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6794 $) ;
6795:
6796: code@var430 =@expr1073750635 "double a, c;\ndouble *b;\nvoid d() {\n  double e, f, g, h = g = f = e = c = a;\n  b[8] = a;\n  b[1] = a;\n  a;\n}\n"
6797:
|
6802:
6803: ;
6804: $valueOfTok_ $(@expr1073750636 code@var430 $, "a" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6804 $) ;
6805: }
6806:
6807: void valueFlowCrashConstructorInitialization ( ) {
6808: const char * code@var431 ;
6809: code@var431 =@expr1073750637 "void Error()\n{\n    VfsPath path(\"\");\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}"
6810:
|
6817:
6818: ;
6819: $valueOfTok_ $(@expr1073750638 code@var431 $, "path" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6819 $) ;
6820:
6821: code@var431 =@expr1073750639 "void Error()\n{\n    VfsPath path;\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}"
6822:
|
6829:
6830: ;
6831: $valueOfTok_ $(@expr1073750640 code@var431 $, "path" $, "cppcheck-2.8/test/testvalueflow.cpp" $, 6831 $) ;
6832: }
6833:
6834: void valueFlowUnknownMixedOperators ( ) {
6835: const char * code@var432 ; code@var432 =@expr1073750641 "int f(int a, int b, bool x) {\n  if (a == 1 && (!(b == 2 && x))) {\n  } else {\n    if (x) {\n    }\n  }\n\n  return 0;\n}"
6836:
|
6842:
6843: ;
6844:
6845: $if $(@expr1073750642 $!@expr1073750643 $assertEquals $(@expr1073750644 "cppcheck-2.8/test/testvalueflow.cpp" $, 6845 $, false $, $testValueOfXKnown_ $(@expr1073750645 "cppcheck-2.8/test/testvalueflow.cpp" $, 6845 $, code@var432 , 4U , 1 $) $) $) { $return ; }
6846: }
6847:
6848: void valueFlowSolveExpr ( )
6849: {
6850: const char * code@var433 ;
6851: code@var433 =@expr1073750646 "int f(int x) {\n    if ((64 - x) == 8)\n        return x;\n    return 0;\n}\n"
6852:
6853:
6854:
6855: ;
6856: $if $(@expr1073750647 $!@expr1073750648 $assertEquals $(@expr1073750649 "cppcheck-2.8/test/testvalueflow.cpp" $, 6856 $, true $, $testValueOfXKnown_ $(@expr1073750650 "cppcheck-2.8/test/testvalueflow.cpp" $, 6856 $, code@var433 , 3U , 56 $) $) $) { $return ; }
6857:
6858: code@var433 =@expr1073750651 "int f(int x) {\n    if ((x - 64) == 8)\n        return x;\n    return 0;\n}\n"
6859:
6860:
6861:
6862: ;
6863: $if $(@expr1073750652 $!@expr1073750653 $assertEquals $(@expr1073750654 "cppcheck-2.8/test/testvalueflow.cpp" $, 6863 $, true $, $testValueOfXKnown_ $(@expr1073750655 "cppcheck-2.8/test/testvalueflow.cpp" $, 6863 $, code@var433 , 3U , 72 $) $) $) { $return ; }
6864:
6865: code@var433 =@expr1073750656 "int f(int x) {\n    if ((x - 64) == 8)\n        return x;\n    return 0;\n}\n"
6866:
6867:
6868:
6869: ;
6870: $if $(@expr1073750657 $!@expr1073750658 $assertEquals $(@expr1073750659 "cppcheck-2.8/test/testvalueflow.cpp" $, 6870 $, true $, $testValueOfXKnown_ $(@expr1073750660 "cppcheck-2.8/test/testvalueflow.cpp" $, 6870 $, code@var433 , 3U , 72 $) $) $) { $return ; }
6871:
6872: code@var433 =@expr1073750661 "int f(int x) {\n    if ((x + 64) == 8)\n        return x;\n    return 0;\n}\n"
6873:
6874:
6875:
6876: ;
6877: $if $(@expr1073750662 $!@expr1073750663 $assertEquals $(@expr1073750664 "cppcheck-2.8/test/testvalueflow.cpp" $, 6877 $, true $, $testValueOfXKnown_ $(@expr1073750665 "cppcheck-2.8/test/testvalueflow.cpp" $, 6877 $, code@var433 , 3U , -56 $) $) $) { $return ; }
6878:
6879: code@var433 =@expr1073750666 "int f(int x) {\n    if ((x * 2) == 8)\n        return x;\n    return 0;\n}\n"
6880:
6881:
6882:
6883: ;
6884: $if $(@expr1073750667 $!@expr1073750668 $assertEquals $(@expr1073750669 "cppcheck-2.8/test/testvalueflow.cpp" $, 6884 $, true $, $testValueOfXKnown_ $(@expr1073750670 "cppcheck-2.8/test/testvalueflow.cpp" $, 6884 $, code@var433 , 3U , 4 $) $) $) { $return ; }
6885:
6886: code@var433 =@expr1073750671 "int f(int x) {\n    if ((x ^ 64) == 8)\n        return x;\n    return 0;\n}\n"
6887:
6888:
6889:
6890: ;
6891: $if $(@expr1073750672 $!@expr1073750673 $assertEquals $(@expr1073750674 "cppcheck-2.8/test/testvalueflow.cpp" $, 6891 $, true $, $testValueOfXKnown_ $(@expr1073750675 "cppcheck-2.8/test/testvalueflow.cpp" $, 6891 $, code@var433 , 3U , 72 $) $) $) { $return ; }
6892:
6893: code@var433 =@expr1073750676 "int f(int i) {\n    int j = i + 64;\n    int x = j;\n    return x;\n}\n"
6894:
6895:
6896:
6897: ;
6898: $todoAssertEquals $(@expr1073750677 "cppcheck-2.8/test/testvalueflow.cpp" $, 6898 $, true $, false $, $testValueOfXKnown_ $(@expr1073750678 "cppcheck-2.8/test/testvalueflow.cpp" $, 6898 $, code@var433 , 4U , "i" , 64 $) $) ;
6899: }
6900:
6901: void valueFlowIdempotent ( ) {
6902: const char * code@var434 ;
6903:
6904: code@var434 =@expr1073750679 "void f(bool a, bool b) {\n    bool x = true;\n    if (a)\n        x = x && b;\n    bool result = x;\n}\n"
6905:
|
6908:
6909: ;
6910: $if $(@expr1073750680 $!@expr1073750681 $assertEquals $(@expr1073750682 "cppcheck-2.8/test/testvalueflow.cpp" $, 6910 $, false $, $testValueOfXKnown_ $(@expr1073750683 "cppcheck-2.8/test/testvalueflow.cpp" $, 6910 $, code@var434 , 5U , 1 $) $) $) { $return ; }
6911:
6912: code@var434 =@expr1073750684 "void f(bool a, bool b) {\n    bool x = false;\n    if (a)\n        x = x && b;\n    bool result = x;\n}\n"
6913:
|
6916:
6917: ;
6918: $if $(@expr1073750685 $!@expr1073750686 $assertEquals $(@expr1073750687 "cppcheck-2.8/test/testvalueflow.cpp" $, 6918 $, true $, $testValueOfXKnown_ $(@expr1073750688 "cppcheck-2.8/test/testvalueflow.cpp" $, 6918 $, code@var434 , 5U , 0 $) $) $) { $return ; }
6919:
6920: code@var434 =@expr1073750689 "void f(bool a, bool b) {\n    bool x = true;\n    if (a)\n        x = x || b;\n    bool result = x;\n}\n"
6921:
|
6924:
6925: ;
6926: $if $(@expr1073750690 $!@expr1073750691 $assertEquals $(@expr1073750692 "cppcheck-2.8/test/testvalueflow.cpp" $, 6926 $, true $, $testValueOfXKnown_ $(@expr1073750693 "cppcheck-2.8/test/testvalueflow.cpp" $, 6926 $, code@var434 , 5U , 1 $) $) $) { $return ; }
6927:
6928: code@var434 =@expr1073750694 "void f(bool a, bool b) {\n    bool x = false;\n    if (a)\n        x = x || b;\n    bool result = x;\n}\n"
6929:
|
6932:
6933: ;
6934: $if $(@expr1073750695 $!@expr1073750696 $assertEquals $(@expr1073750697 "cppcheck-2.8/test/testvalueflow.cpp" $, 6934 $, false $, $testValueOfXKnown_ $(@expr1073750698 "cppcheck-2.8/test/testvalueflow.cpp" $, 6934 $, code@var434 , 5U , 0 $) $) $) { $return ; }
6935:
6936: code@var434 =@expr1073750699 "void foo() {\n    int x = 0;\n    for (int i = 0; i < 5; i++) {\n        int y = 0;\n        for (int j = 0; j < 10; j++)\n            y++;\n        if (y >= x)\n            x = y;\n    }\n    return x;\n}\n"
6937:
|
6945:
6946: ;
6947: $if $(@expr1073750700 $!@expr1073750701 $assertEquals $(@expr1073750702 "cppcheck-2.8/test/testvalueflow.cpp" $, 6947 $, false $, $testValueOfXKnown_ $(@expr1073750703 "cppcheck-2.8/test/testvalueflow.cpp" $, 6947 $, code@var434 , 10U , 0 $) $) $) { $return ; }
6948: }
6949:
6950: void valueFlowUnsigned ( ) {
6951: const char * code@var435 ;
6952:
6953: code@var435 =@expr1073750704 "auto f(uint32_t i) {\n    auto x = i;\n    return x;\n}\n"
6954:
6955:
6956: ;
6957: $if $(@expr1073750705 $!@expr1073750706 $assertEquals $(@expr1073750707 "cppcheck-2.8/test/testvalueflow.cpp" $, 6957 $, true $, $testValueOfXImpossible_ $(@expr1073750708 "cppcheck-2.8/test/testvalueflow.cpp" $, 6957 $, code@var435 , 3U , -1 $) $) $) { $return ; }
6958:
6959: code@var435 =@expr1073750709 "auto f(uint32_t i) {\n    auto x = (int32_t)i;\n    return x;\n}\n"
6960:
6961:
6962: ;
6963: $if $(@expr1073750710 $!@expr1073750711 $assertEquals $(@expr1073750712 "cppcheck-2.8/test/testvalueflow.cpp" $, 6963 $, false $, $testValueOfXImpossible_ $(@expr1073750713 "cppcheck-2.8/test/testvalueflow.cpp" $, 6963 $, code@var435 , 3U , -1 $) $) $) { $return ; }
6964:
6965: code@var435 =@expr1073750714 "auto f(uint32_t i) {\n    auto x = (int64_t)i;\n    return x;\n}\n"
6966:
6967:
6968: ;
6969: $if $(@expr1073750715 $!@expr1073750716 $assertEquals $(@expr1073750717 "cppcheck-2.8/test/testvalueflow.cpp" $, 6969 $, true $, $testValueOfXImpossible_ $(@expr1073750718 "cppcheck-2.8/test/testvalueflow.cpp" $, 6969 $, code@var435 , 3U , -1 $) $) $) { $return ; }
6970:
6971: code@var435 =@expr1073750719 "size_t g();\nauto f(uint16_t j) {\n    auto x = g() - j;\n    return x;\n}\n"
6972:
6973:
6974:
6975: ;
6976: $if $(@expr1073750720 $!@expr1073750721 $assertEquals $(@expr1073750722 "cppcheck-2.8/test/testvalueflow.cpp" $, 6976 $, false $, $testValueOfXImpossible_ $(@expr1073750723 "cppcheck-2.8/test/testvalueflow.cpp" $, 6976 $, code@var435 , 4U , 0 $) $) $) { $return ; }
6977: $if $(@expr1073750724 $!@expr1073750725 $assertEquals $(@expr1073750726 "cppcheck-2.8/test/testvalueflow.cpp" $, 6977 $, true $, $testValueOfXImpossible_ $(@expr1073750727 "cppcheck-2.8/test/testvalueflow.cpp" $, 6977 $, code@var435 , 4U , -1 $) $) $) { $return ; }
6978:
6979: code@var435 =@expr1073750728 "auto f(uint32_t i) {\n    auto x = (i + 1) % 16;\n    return x;\n}\n"
6980:
6981:
6982: ;
6983: $if $(@expr1073750729 $!@expr1073750730 $assertEquals $(@expr1073750731 "cppcheck-2.8/test/testvalueflow.cpp" $, 6983 $, false $, $testValueOfXImpossible_ $(@expr1073750732 "cppcheck-2.8/test/testvalueflow.cpp" $, 6983 $, code@var435 , 3U , 0 $) $) $) { $return ; }
6984: $if $(@expr1073750733 $!@expr1073750734 $assertEquals $(@expr1073750735 "cppcheck-2.8/test/testvalueflow.cpp" $, 6984 $, true $, $testValueOfXImpossible_ $(@expr1073750736 "cppcheck-2.8/test/testvalueflow.cpp" $, 6984 $, code@var435 , 3U , -1 $) $) $) { $return ; }
6985:
6986: code@var435 =@expr1073750737 "auto f(uint32_t i) {\n    auto x = i ^ 3;\n    return x;\n}\n"
6987:
6988:
6989: ;
6990: $if $(@expr1073750738 $!@expr1073750739 $assertEquals $(@expr1073750740 "cppcheck-2.8/test/testvalueflow.cpp" $, 6990 $, false $, $testValueOfXImpossible_ $(@expr1073750741 "cppcheck-2.8/test/testvalueflow.cpp" $, 6990 $, code@var435 , 3U , 2 $) $) $) { $return ; }
6991: $if $(@expr1073750742 $!@expr1073750743 $assertEquals $(@expr1073750744 "cppcheck-2.8/test/testvalueflow.cpp" $, 6991 $, true $, $testValueOfXImpossible_ $(@expr1073750745 "cppcheck-2.8/test/testvalueflow.cpp" $, 6991 $, code@var435 , 3U , -1 $) $) $) { $return ; }
6992:
6993: code@var435 =@expr1073750746 "auto f(uint32_t i) {\n    auto x = i & 3;\n    return x;\n}\n"
6994:
6995:
6996: ;
6997: $if $(@expr1073750747 $!@expr1073750748 $assertEquals $(@expr1073750749 "cppcheck-2.8/test/testvalueflow.cpp" $, 6997 $, false $, $testValueOfXImpossible_ $(@expr1073750750 "cppcheck-2.8/test/testvalueflow.cpp" $, 6997 $, code@var435 , 3U , 2 $) $) $) { $return ; }
6998: $if $(@expr1073750751 $!@expr1073750752 $assertEquals $(@expr1073750753 "cppcheck-2.8/test/testvalueflow.cpp" $, 6998 $, true $, $testValueOfXImpossible_ $(@expr1073750754 "cppcheck-2.8/test/testvalueflow.cpp" $, 6998 $, code@var435 , 3U , -1 $) $) $) { $return ; }
6999: }
7000:
7001: void valueFlowMod ( ) {
7002: const char * code@var436 ;
7003:
7004: code@var436 =@expr1073750755 "auto f(int i) {\n    auto x = i % 2;\n    return x;\n}\n"
7005:
7006:
7007: ;
7008: $if $(@expr1073750756 $!@expr1073750757 $assertEquals $(@expr1073750758 "cppcheck-2.8/test/testvalueflow.cpp" $, 7008 $, true $, $testValueOfXImpossible_ $(@expr1073750759 "cppcheck-2.8/test/testvalueflow.cpp" $, 7008 $, code@var436 , 3U , 2 $) $) $) { $return ; }
7009:
7010: code@var436 =@expr1073750760 "auto f(int i) {\n    auto x = !(i % 2);\n    return x;\n}\n"
7011:
7012:
7013: ;
7014: $if $(@expr1073750761 $!@expr1073750762 $assertEquals $(@expr1073750763 "cppcheck-2.8/test/testvalueflow.cpp" $, 7014 $, false $, $testValueOfXImpossible_ $(@expr1073750764 "cppcheck-2.8/test/testvalueflow.cpp" $, 7014 $, code@var436 , 3U , 0 $) $) $) { $return ; }
7015: $if $(@expr1073750765 $!@expr1073750766 $assertEquals $(@expr1073750767 "cppcheck-2.8/test/testvalueflow.cpp" $, 7015 $, false $, $testValueOfXImpossible_ $(@expr1073750768 "cppcheck-2.8/test/testvalueflow.cpp" $, 7015 $, code@var436 , 3U , 1 $) $) $) { $return ; }
7016: }
7017:
7018: void valueFlowNotNull ( )
7019: {
7020: const char * code@var437 ;
7021:
7022: code@var437 =@expr1073750769 "int f(const std::string &str) {\n    int x = str.c_str();\n    return x;\n}\n"
7023:
7024:
7025: ;
7026: $if $(@expr1073750770 $!@expr1073750771 $assertEquals $(@expr1073750772 "cppcheck-2.8/test/testvalueflow.cpp" $, 7026 $, true $, $testValueOfXImpossible_ $(@expr1073750773 "cppcheck-2.8/test/testvalueflow.cpp" $, 7026 $, code@var437 , 3U , 0 $) $) $) { $return ; }
7027:
7028: code@var437 =@expr1073750774 "int f(const std::string_view &str) {\n    int x = str.c_str();\n    return x;\n}\n"
7029:
7030:
7031: ;
7032: $if $(@expr1073750775 $!@expr1073750776 $assertEquals $(@expr1073750777 "cppcheck-2.8/test/testvalueflow.cpp" $, 7032 $, false $, $testValueOfXImpossible_ $(@expr1073750778 "cppcheck-2.8/test/testvalueflow.cpp" $, 7032 $, code@var437 , 3U , 0 $) $) $) { $return ; }
7033:
7034: code@var437 =@expr1073750779 "auto f() {\n    std::shared_ptr<int> x = std::make_shared<int>(1);\n    return x;\n}\n"
7035:
7036:
7037: ;
7038: $if $(@expr1073750780 $!@expr1073750781 $assertEquals $(@expr1073750782 "cppcheck-2.8/test/testvalueflow.cpp" $, 7038 $, true $, $testValueOfXImpossible_ $(@expr1073750783 "cppcheck-2.8/test/testvalueflow.cpp" $, 7038 $, code@var437 , 3U , 0 $) $) $) { $return ; }
7039:
7040: code@var437 =@expr1073750784 "auto f() {\n    std::unique_ptr<int> x = std::make_unique<int>(1);\n    return x;\n}\n"
7041:
7042:
7043: ;
7044: $if $(@expr1073750785 $!@expr1073750786 $assertEquals $(@expr1073750787 "cppcheck-2.8/test/testvalueflow.cpp" $, 7044 $, true $, $testValueOfXImpossible_ $(@expr1073750788 "cppcheck-2.8/test/testvalueflow.cpp" $, 7044 $, code@var437 , 3U , 0 $) $) $) { $return ; }
7045:
7046: code@var437 =@expr1073750789 "struct A {\n    A* f() {\n        A* x = this;\n        return x;\n    }\n};\n"
7047:
|
7050:
7051: ;
7052: $if $(@expr1073750790 $!@expr1073750791 $assertEquals $(@expr1073750792 "cppcheck-2.8/test/testvalueflow.cpp" $, 7052 $, true $, $testValueOfXImpossible_ $(@expr1073750793 "cppcheck-2.8/test/testvalueflow.cpp" $, 7052 $, code@var437 , 4U , 0 $) $) $) { $return ; }
7053: }
7054:
7055: void valueFlowSymbolic ( ) {
7056: const char * code@var438 ;
7057:
7058: code@var438 =@expr1073750794 "int f(int i) {\n    int j = i;\n    int x = i;\n    return x;\n}\n"
7059:
7060:
7061:
7062: ;
7063: $if $(@expr1073750795 $!@expr1073750796 $assertEquals $(@expr1073750797 "cppcheck-2.8/test/testvalueflow.cpp" $, 7063 $, true $, $testValueOfXKnown_ $(@expr1073750798 "cppcheck-2.8/test/testvalueflow.cpp" $, 7063 $, code@var438 , 4U , "j" , 0 $) $) $) { $return ; }
7064: $if $(@expr1073750799 $!@expr1073750800 $assertEquals $(@expr1073750801 "cppcheck-2.8/test/testvalueflow.cpp" $, 7064 $, true $, $testValueOfXKnown_ $(@expr1073750802 "cppcheck-2.8/test/testvalueflow.cpp" $, 7064 $, code@var438 , 4U , "i" , 0 $) $) $) { $return ; }
7065:
7066: code@var438 =@expr1073750803 "int f(int i) {\n    int j = i;\n    int x = j;\n    return x;\n}\n"
7067:
7068:
7069:
7070: ;
7071: $if $(@expr1073750804 $!@expr1073750805 $assertEquals $(@expr1073750806 "cppcheck-2.8/test/testvalueflow.cpp" $, 7071 $, true $, $testValueOfXKnown_ $(@expr1073750807 "cppcheck-2.8/test/testvalueflow.cpp" $, 7071 $, code@var438 , 4U , "i" , 0 $) $) $) { $return ; }
7072: $if $(@expr1073750808 $!@expr1073750809 $assertEquals $(@expr1073750810 "cppcheck-2.8/test/testvalueflow.cpp" $, 7072 $, true $, $testValueOfXKnown_ $(@expr1073750811 "cppcheck-2.8/test/testvalueflow.cpp" $, 7072 $, code@var438 , 4U , "j" , 0 $) $) $) { $return ; }
7073:
7074: code@var438 =@expr1073750812 "void g(int&);\nint f(int i) {\n    int j = i;\n    g(i);\n    int x = i;\n    return x;\n}\n"
7075:
|
7079:
7080: ;
7081: $if $(@expr1073750813 $!@expr1073750814 $assertEquals $(@expr1073750815 "cppcheck-2.8/test/testvalueflow.cpp" $, 7081 $, true $, $testValueOfXKnown_ $(@expr1073750816 "cppcheck-2.8/test/testvalueflow.cpp" $, 7081 $, code@var438 , 6U , "i" , 0 $) $) $) { $return ; }
7082: $if $(@expr1073750817 $!@expr1073750818 $assertEquals $(@expr1073750819 "cppcheck-2.8/test/testvalueflow.cpp" $, 7082 $, false $, $testValueOfXKnown_ $(@expr1073750820 "cppcheck-2.8/test/testvalueflow.cpp" $, 7082 $, code@var438 , 6U , "j" , 0 $) $) $) { $return ; }
7083:
7084: code@var438 =@expr1073750821 "int f(int i) {\n    int j = i;\n    j++;\n    int x = i == j;\n    return x;\n}\n"
7085:
|
7088:
7089: ;
7090: $if $(@expr1073750822 $!@expr1073750823 $assertEquals $(@expr1073750824 "cppcheck-2.8/test/testvalueflow.cpp" $, 7090 $, true $, $testValueOfXKnown_ $(@expr1073750825 "cppcheck-2.8/test/testvalueflow.cpp" $, 7090 $, code@var438 , 5U , 0 $) $) $) { $return ; }
7091:
7092: code@var438 =@expr1073750826 "int f(int i) {\n    int j = i;\n    i++;\n    int x = i - j;\n    return x;\n}\n"
7093:
|
7096:
7097: ;
7098: $if $(@expr1073750827 $!@expr1073750828 $assertEquals $(@expr1073750829 "cppcheck-2.8/test/testvalueflow.cpp" $, 7098 $, true $, $testValueOfXKnown_ $(@expr1073750830 "cppcheck-2.8/test/testvalueflow.cpp" $, 7098 $, code@var438 , 5U , 1 $) $) $) { $return ; }
7099:
7100: code@var438 =@expr1073750831 "int f(int i) {\n    int j = i;\n    i++;\n    int x = i > j;\n    return x;\n}\n"
7101:
|
7104:
7105: ;
7106: $if $(@expr1073750832 $!@expr1073750833 $assertEquals $(@expr1073750834 "cppcheck-2.8/test/testvalueflow.cpp" $, 7106 $, true $, $testValueOfXKnown_ $(@expr1073750835 "cppcheck-2.8/test/testvalueflow.cpp" $, 7106 $, code@var438 , 5U , 1 $) $) $) { $return ; }
7107:
7108: code@var438 =@expr1073750836 "int f(int i) {\n    int j = i;\n    j++;\n    int x = j > i;\n    return x;\n}\n"
7109:
|
7112:
7113: ;
7114: $if $(@expr1073750837 $!@expr1073750838 $assertEquals $(@expr1073750839 "cppcheck-2.8/test/testvalueflow.cpp" $, 7114 $, true $, $testValueOfXKnown_ $(@expr1073750840 "cppcheck-2.8/test/testvalueflow.cpp" $, 7114 $, code@var438 , 5U , 1 $) $) $) { $return ; }
7115:
7116: code@var438 =@expr1073750841 "int f(int i) {\n    int j = i++;\n    int x = i++;\n    return x;\n}\n"
7117:
7118:
7119:
7120: ;
7121: $if $(@expr1073750842 $!@expr1073750843 $assertEquals $(@expr1073750844 "cppcheck-2.8/test/testvalueflow.cpp" $, 7121 $, false $, $testValueOfXKnown_ $(@expr1073750845 "cppcheck-2.8/test/testvalueflow.cpp" $, 7121 $, code@var438 , 4U , "i++" , 0 $) $) $) { $return ; }
7122:
7123: code@var438 =@expr1073750846 "float foo() {\n    float f = 1.0f;\n    float x = f;\n    return x;\n}\n"
7124:
7125:
7126:
7127: ;
7128: $if $(@expr1073750847 $!@expr1073750848 $assertEquals $(@expr1073750849 "cppcheck-2.8/test/testvalueflow.cpp" $, 7128 $, false $, $testValueOfXKnown_ $(@expr1073750850 "cppcheck-2.8/test/testvalueflow.cpp" $, 7128 $, code@var438 , 4U , "1.0f" , 0 $) $) $) { $return ; }
7129:
7130: code@var438 =@expr1073750851 "int foo(float f) {\n    float g = f;\n    int x = f == g;\n    return x;\n}\n"
7131:
7132:
7133:
7134: ;
7135: $if $(@expr1073750852 $!@expr1073750853 $assertEquals $(@expr1073750854 "cppcheck-2.8/test/testvalueflow.cpp" $, 7135 $, false $, $testValueOfXKnown_ $(@expr1073750855 "cppcheck-2.8/test/testvalueflow.cpp" $, 7135 $, code@var438 , 4U , 1 $) $) $) { $return ; }
7136:
7137: code@var438 =@expr1073750856 "int f(int i) {\n  for(int j = i;;j++) {\n    int x = j;\n    return x;\n  }\n  return 0;\n}\n"
7138:
|
7142:
7143: ;
7144: $if $(@expr1073750857 $!@expr1073750858 $assertEquals $(@expr1073750859 "cppcheck-2.8/test/testvalueflow.cpp" $, 7144 $, false $, $testValueOfXKnown_ $(@expr1073750860 "cppcheck-2.8/test/testvalueflow.cpp" $, 7144 $, code@var438 , 4U , "i" , 0 $) $) $) { $return ; }
7145: $if $(@expr1073750861 $!@expr1073750862 $assertEquals $(@expr1073750863 "cppcheck-2.8/test/testvalueflow.cpp" $, 7145 $, false $, $testValueOfXKnown_ $(@expr1073750864 "cppcheck-2.8/test/testvalueflow.cpp" $, 7145 $, code@var438 , 4U , "i" , 1 $) $) $) { $return ; }
7146: $if $(@expr1073750865 $!@expr1073750866 $assertEquals $(@expr1073750867 "cppcheck-2.8/test/testvalueflow.cpp" $, 7146 $, true $, $testValueOfXKnown_ $(@expr1073750868 "cppcheck-2.8/test/testvalueflow.cpp" $, 7146 $, code@var438 , 4U , "j" , 0 $) $) $) { $return ; }
7147:
7148: code@var438 =@expr1073750869 "void f(int x) {\n  int y = x + 1;\n  return x;\n}\n"
7149:
7150:
7151: ;
7152: $if $(@expr1073750870 $!@expr1073750871 $assertEquals $(@expr1073750872 "cppcheck-2.8/test/testvalueflow.cpp" $, 7152 $, false $, $testValueOfXKnown_ $(@expr1073750873 "cppcheck-2.8/test/testvalueflow.cpp" $, 7152 $, code@var438 , 3U , "y" , 0 $) $) $) { $return ; }
7153: $if $(@expr1073750874 $!@expr1073750875 $assertEquals $(@expr1073750876 "cppcheck-2.8/test/testvalueflow.cpp" $, 7153 $, true $, $testValueOfXKnown_ $(@expr1073750877 "cppcheck-2.8/test/testvalueflow.cpp" $, 7153 $, code@var438 , 3U , "y" , -1 $) $) $) { $return ; }
7154:
7155: code@var438 =@expr1073750878 "void f(int x) {\n  int y = x * 2;\n  return x;\n}\n"
7156:
7157:
7158: ;
7159: $if $(@expr1073750879 $!@expr1073750880 $assertEquals $(@expr1073750881 "cppcheck-2.8/test/testvalueflow.cpp" $, 7159 $, false $, $testValueOfXKnown_ $(@expr1073750882 "cppcheck-2.8/test/testvalueflow.cpp" $, 7159 $, code@var438 , 3U , "y" , 0 $) $) $) { $return ; }
7160:
7161: code@var438 =@expr1073750883 "int f(int i, int j) {\n    if (i == j) {\n        int x = i - j;\n        return x;\n    }\n    return 0;\n}\n"
7162:
|
7166:
7167: ;
7168: $if $(@expr1073750884 $!@expr1073750885 $assertEquals $(@expr1073750886 "cppcheck-2.8/test/testvalueflow.cpp" $, 7168 $, true $, $testValueOfXKnown_ $(@expr1073750887 "cppcheck-2.8/test/testvalueflow.cpp" $, 7168 $, code@var438 , 4U , 0 $) $) $) { $return ; }
7169:
7170: code@var438 =@expr1073750888 "void f(int x, int y) {\n    if (x == y) {\n        int a = x;\n    }\n}"
7171:
7172:
7173:
7174: ;
7175: $if $(@expr1073750889 $!@expr1073750890 $assertEquals $(@expr1073750891 "cppcheck-2.8/test/testvalueflow.cpp" $, 7175 $, true $, $testValueOfXKnown_ $(@expr1073750892 "cppcheck-2.8/test/testvalueflow.cpp" $, 7175 $, code@var438 , 3U , "y" , 0 $) $) $) { $return ; }
7176:
7177: code@var438 =@expr1073750893 "void f(int x, int y) {\n    if (x != y) {\n        int a = x;\n    }\n}"
7178:
7179:
7180:
7181: ;
7182: $if $(@expr1073750894 $!@expr1073750895 $assertEquals $(@expr1073750896 "cppcheck-2.8/test/testvalueflow.cpp" $, 7182 $, true $, $testValueOfXImpossible_ $(@expr1073750897 "cppcheck-2.8/test/testvalueflow.cpp" $, 7182 $, code@var438 , 3U , "y" , 0 $) $) $) { $return ; }
7183:
7184: code@var438 =@expr1073750898 "void f(int x, int y) {\n    if (x < y) {\n        int a = x;\n    }\n}"
7185:
7186:
7187:
7188: ;
7189: $if $(@expr1073750899 $!@expr1073750900 $assertEquals $(@expr1073750901 "cppcheck-2.8/test/testvalueflow.cpp" $, 7189 $, true $, $testValueOfX_ $(@expr1073750902 "cppcheck-2.8/test/testvalueflow.cpp" $, 7189 $, code@var438 , 3U , "y" , -1 $) $) $) { $return ; }
7190: $if $(@expr1073750903 $!@expr1073750904 $assertEquals $(@expr1073750905 "cppcheck-2.8/test/testvalueflow.cpp" $, 7190 $, true $, $testValueOfXImpossible_ $(@expr1073750906 "cppcheck-2.8/test/testvalueflow.cpp" $, 7190 $, code@var438 , 3U , "y" , 0 $) $) $) { $return ; }
7191:
7192: code@var438 =@expr1073750907 "void f(int x, int y) {\n    if (x <= y) {\n        int a = x;\n    }\n}"
7193:
7194:
7195:
7196: ;
7197: $if $(@expr1073750908 $!@expr1073750909 $assertEquals $(@expr1073750910 "cppcheck-2.8/test/testvalueflow.cpp" $, 7197 $, true $, $testValueOfX_ $(@expr1073750911 "cppcheck-2.8/test/testvalueflow.cpp" $, 7197 $, code@var438 , 3U , "y" , 0 $) $) $) { $return ; }
7198: $if $(@expr1073750912 $!@expr1073750913 $assertEquals $(@expr1073750914 "cppcheck-2.8/test/testvalueflow.cpp" $, 7198 $, true $, $testValueOfXImpossible_ $(@expr1073750915 "cppcheck-2.8/test/testvalueflow.cpp" $, 7198 $, code@var438 , 3U , "y" , 1 $) $) $) { $return ; }
7199:
7200: code@var438 =@expr1073750916 "void f(int x, int y) {\n    if (x > y) {\n        int a = x;\n    }\n}"
7201:
7202:
7203:
7204: ;
7205: $if $(@expr1073750917 $!@expr1073750918 $assertEquals $(@expr1073750919 "cppcheck-2.8/test/testvalueflow.cpp" $, 7205 $, true $, $testValueOfX_ $(@expr1073750920 "cppcheck-2.8/test/testvalueflow.cpp" $, 7205 $, code@var438 , 3U , "y" , 1 $) $) $) { $return ; }
7206: $if $(@expr1073750921 $!@expr1073750922 $assertEquals $(@expr1073750923 "cppcheck-2.8/test/testvalueflow.cpp" $, 7206 $, true $, $testValueOfXImpossible_ $(@expr1073750924 "cppcheck-2.8/test/testvalueflow.cpp" $, 7206 $, code@var438 , 3U , "y" , 0 $) $) $) { $return ; }
7207:
7208: code@var438 =@expr1073750925 "void f(int x, int y) {\n    if (x >= y) {\n        int a = x;\n    }\n}"
7209:
7210:
7211:
7212: ;
7213: $if $(@expr1073750926 $!@expr1073750927 $assertEquals $(@expr1073750928 "cppcheck-2.8/test/testvalueflow.cpp" $, 7213 $, true $, $testValueOfX_ $(@expr1073750929 "cppcheck-2.8/test/testvalueflow.cpp" $, 7213 $, code@var438 , 3U , "y" , 0 $) $) $) { $return ; }
7214: $if $(@expr1073750930 $!@expr1073750931 $assertEquals $(@expr1073750932 "cppcheck-2.8/test/testvalueflow.cpp" $, 7214 $, true $, $testValueOfXImpossible_ $(@expr1073750933 "cppcheck-2.8/test/testvalueflow.cpp" $, 7214 $, code@var438 , 3U , "y" , -1 $) $) $) { $return ; }
7215:
7216: code@var438 =@expr1073750934 "void f(int y) {\n  int x = y - 1;\n  if (y == 1)\n    int a = x;\n}\n"
7217:
7218:
7219:
7220: ;
7221: $if $(@expr1073750935 $!@expr1073750936 $assertEquals $(@expr1073750937 "cppcheck-2.8/test/testvalueflow.cpp" $, 7221 $, true $, $testValueOfXKnown_ $(@expr1073750938 "cppcheck-2.8/test/testvalueflow.cpp" $, 7221 $, code@var438 , 4U , 0 $) $) $) { $return ; }
7222:
7223: code@var438 =@expr1073750939 "void f(int y) {\n  int x = y * y;\n  if (y == 2)\n    int a = x;\n}\n"
7224:
7225:
7226:
7227: ;
7228: $if $(@expr1073750940 $!@expr1073750941 $assertEquals $(@expr1073750942 "cppcheck-2.8/test/testvalueflow.cpp" $, 7228 $, true $, $testValueOfXKnown_ $(@expr1073750943 "cppcheck-2.8/test/testvalueflow.cpp" $, 7228 $, code@var438 , 4U , 4 $) $) $) { $return ; }
7229:
7230: code@var438 =@expr1073750944 "void f(int x, int y) {\n  if (x == y*y)\n    if (y == 2)\n      int a = x;\n}\n"
7231:
7232:
7233:
7234: ;
7235: $if $(@expr1073750945 $!@expr1073750946 $assertEquals $(@expr1073750947 "cppcheck-2.8/test/testvalueflow.cpp" $, 7235 $, true $, $testValueOfXKnown_ $(@expr1073750948 "cppcheck-2.8/test/testvalueflow.cpp" $, 7235 $, code@var438 , 4U , 4 $) $) $) { $return ; }
7236:
7237: code@var438 =@expr1073750949 "void f(int x, int y) {\n  if (x > y*y)\n    if (y == 2)\n      int a = x;\n}\n"
7238:
7239:
7240:
7241: ;
7242: $if $(@expr1073750950 $!@expr1073750951 $assertEquals $(@expr1073750952 "cppcheck-2.8/test/testvalueflow.cpp" $, 7242 $, true $, $testValueOfXImpossible_ $(@expr1073750953 "cppcheck-2.8/test/testvalueflow.cpp" $, 7242 $, code@var438 , 4U , 4 $) $) $) { $return ; }
7243:
7244: code@var438 =@expr1073750954 "void f(int x, int y) {\n  if (x != y*y)\n    if (y == 2)\n      int a = x;\n}\n"
7245:
7246:
7247:
7248: ;
7249: $if $(@expr1073750955 $!@expr1073750956 $assertEquals $(@expr1073750957 "cppcheck-2.8/test/testvalueflow.cpp" $, 7249 $, true $, $testValueOfXImpossible_ $(@expr1073750958 "cppcheck-2.8/test/testvalueflow.cpp" $, 7249 $, code@var438 , 4U , 4 $) $) $) { $return ; }
7250:
7251: code@var438 =@expr1073750959 "void f(int x, int y) {\n  if (x >= y*y)\n    if (y == 2)\n      int a = x;\n}\n"
7252:
7253:
7254:
7255: ;
7256: $if $(@expr1073750960 $!@expr1073750961 $assertEquals $(@expr1073750962 "cppcheck-2.8/test/testvalueflow.cpp" $, 7256 $, true $, $testValueOfXImpossible_ $(@expr1073750963 "cppcheck-2.8/test/testvalueflow.cpp" $, 7256 $, code@var438 , 4U , 3 $) $) $) { $return ; }
7257:
7258: code@var438 =@expr1073750964 "void f(int x, int y) {\n  if (x == y*y)\n    if (y != 2)\n      int a = x;\n}\n"
7259:
7260:
7261:
7262: ;
7263: $todoAssertEquals $(@expr1073750965 "cppcheck-2.8/test/testvalueflow.cpp" $, 7263 $, true $, false $, $testValueOfXImpossible_ $(@expr1073750966 "cppcheck-2.8/test/testvalueflow.cpp" $, 7263 $, code@var438 , 4U , 4 $) $) ;
7264:
7265: code@var438 =@expr1073750967 "void f(int x, int y) {\n  if (x == y*y)\n    if (y > 2)\n      int a = x;\n}\n"
7266:
7267:
7268:
7269: ;
7270: $if $(@expr1073750968 $!@expr1073750969 $assertEquals $(@expr1073750970 "cppcheck-2.8/test/testvalueflow.cpp" $, 7270 $, true $, $testValueOfX_ $(@expr1073750971 "cppcheck-2.8/test/testvalueflow.cpp" $, 7270 $, code@var438 , 4U , 9 $) $) $) { $return ; }
7271:
7272: code@var438 =@expr1073750972 "struct A {\n    A* b();\n    int c() const;\n};\nvoid f(A *d) {\n    if (!d || d->c() != 1)\n        return;\n    A * y = d;\n    d = d->b();\n    A * x = d;\n    A* z = x;\n}\n"
7273:
|
7282:
7283: ;
7284: $if $(@expr1073750973 $!@expr1073750974 $assertEquals $(@expr1073750975 "cppcheck-2.8/test/testvalueflow.cpp" $, 7284 $, true $, $testValueOfX_ $(@expr1073750976 "cppcheck-2.8/test/testvalueflow.cpp" $, 7284 $, code@var438 , 11U , "d" , 0 $) $) $) { $return ; }
7285: $if $(@expr1073750977 $!@expr1073750978 $assertEquals $(@expr1073750979 "cppcheck-2.8/test/testvalueflow.cpp" $, 7285 $, false $, $testValueOfXImpossible_ $(@expr1073750980 "cppcheck-2.8/test/testvalueflow.cpp" $, 7285 $, code@var438 , 11U , 0 $) $) $) { $return ; }
7286:
7287: code@var438 =@expr1073750981 "void f(int * p, int len) {\n    for(int x = 0; x < len; ++x) {\n        p[x] = 1;\n    }\n}\n"
7288:
7289:
7290:
7291: ;
7292: $if $(@expr1073750982 $!@expr1073750983 $assertEquals $(@expr1073750984 "cppcheck-2.8/test/testvalueflow.cpp" $, 7292 $, true $, $testValueOfX_ $(@expr1073750985 "cppcheck-2.8/test/testvalueflow.cpp" $, 7292 $, code@var438 , 3U , "len" , -1 $) $) $) { $return ; }
7293: $if $(@expr1073750986 $!@expr1073750987 $assertEquals $(@expr1073750988 "cppcheck-2.8/test/testvalueflow.cpp" $, 7293 $, true $, $testValueOfXImpossible_ $(@expr1073750989 "cppcheck-2.8/test/testvalueflow.cpp" $, 7293 $, code@var438 , 3U , "len" , 0 $) $) $) { $return ; }
7294:
7295: code@var438 =@expr1073750990 "int f(int x) {\n    int i = 64 - x;\n    if(i < 8)\n        return x;\n    return 0;\n}\n"
7296:
|
7299:
7300: ;
7301: $if $(@expr1073750991 $!@expr1073750992 $assertEquals $(@expr1073750993 "cppcheck-2.8/test/testvalueflow.cpp" $, 7301 $, false $, $testValueOfX_ $(@expr1073750994 "cppcheck-2.8/test/testvalueflow.cpp" $, 7301 $, code@var438 , 4U , 71 $) $) $) { $return ; }
7302: $todoAssertEquals $(@expr1073750995 "cppcheck-2.8/test/testvalueflow.cpp" $, 7302 $, true $, false $, $testValueOfX_ $(@expr1073750996 "cppcheck-2.8/test/testvalueflow.cpp" $, 7302 $, code@var438 , 4U , 56 $) $) ;
7303:
7304: code@var438 =@expr1073750997 "int b(int a) {\n  unsigned long x = a ? 6 : 4;\n  assert(x < 6 && x > 0);\n  return 1 / x;\n}\n"
7305:
7306:
7307:
7308: ;
7309: $if $(@expr1073750998 $!@expr1073750999 $assertEquals $(@expr1073751000 "cppcheck-2.8/test/testvalueflow.cpp" $, 7309 $, false $, $testValueOfX_ $(@expr1073751001 "cppcheck-2.8/test/testvalueflow.cpp" $, 7309 $, code@var438 , 4U , 0 $) $) $) { $return ; }
7310:
7311: code@var438 =@expr1073751002 "void f(int k) {\n  int x = k;\n  int j = k;\n  x--;\n  if (k != 0) {\n    x;\n  }\n}\n"
7312:
|
7317:
7318: ;
7319: $if $(@expr1073751003 $!@expr1073751004 $assertEquals $(@expr1073751005 "cppcheck-2.8/test/testvalueflow.cpp" $, 7319 $, false $, $testValueOfX_ $(@expr1073751006 "cppcheck-2.8/test/testvalueflow.cpp" $, 7319 $, code@var438 , 6U , -1 $) $) $) { $return ; }
7320: $if $(@expr1073751007 $!@expr1073751008 $assertEquals $(@expr1073751009 "cppcheck-2.8/test/testvalueflow.cpp" $, 7320 $, true $, $testValueOfXImpossible_ $(@expr1073751010 "cppcheck-2.8/test/testvalueflow.cpp" $, 7320 $, code@var438 , 6U , -1 $) $) $) { $return ; }
7321:
7322: code@var438 =@expr1073751011 "char* f() {\n    char *x = malloc(10);\n    return x;\n}\n"
7323:
7324:
7325: ;
7326: $if $(@expr1073751012 $!@expr1073751013 $assertEquals $(@expr1073751014 "cppcheck-2.8/test/testvalueflow.cpp" $, 7326 $, false $, $testValueOfX_ $(@expr1073751015 "cppcheck-2.8/test/testvalueflow.cpp" $, 7326 $, code@var438 , 3U , "malloc(10)" , 0 $) $) $) { $return ; }
7327: }
7328:
7329: void valueFlowSymbolicIdentity ( )
7330: {
7331: const char * code@var439 ;
7332:
7333: code@var439 =@expr1073751016 "void f(int a) {\n    int x = a*1;\n    return x;\n}\n"
7334:
7335:
7336: ;
7337: $if $(@expr1073751017 $!@expr1073751018 $assertEquals $(@expr1073751019 "cppcheck-2.8/test/testvalueflow.cpp" $, 7337 $, true $, $testValueOfXKnown_ $(@expr1073751020 "cppcheck-2.8/test/testvalueflow.cpp" $, 7337 $, code@var439 , 3U , "a" , 0 $) $) $) { $return ; }
7338:
7339: code@var439 =@expr1073751021 "void f(int a) {\n    int x = a/1;\n    return x;\n}\n"
7340:
7341:
7342: ;
7343: $if $(@expr1073751022 $!@expr1073751023 $assertEquals $(@expr1073751024 "cppcheck-2.8/test/testvalueflow.cpp" $, 7343 $, true $, $testValueOfXKnown_ $(@expr1073751025 "cppcheck-2.8/test/testvalueflow.cpp" $, 7343 $, code@var439 , 3U , "a" , 0 $) $) $) { $return ; }
7344:
7345: code@var439 =@expr1073751026 "void f(int a) {\n    int x = a+0;\n    return x;\n}\n"
7346:
7347:
7348: ;
7349: $if $(@expr1073751027 $!@expr1073751028 $assertEquals $(@expr1073751029 "cppcheck-2.8/test/testvalueflow.cpp" $, 7349 $, true $, $testValueOfXKnown_ $(@expr1073751030 "cppcheck-2.8/test/testvalueflow.cpp" $, 7349 $, code@var439 , 3U , "a" , 0 $) $) $) { $return ; }
7350:
7351: code@var439 =@expr1073751031 "void f(int a) {\n    int x = a-0;\n    return x;\n}\n"
7352:
7353:
7354: ;
7355: $if $(@expr1073751032 $!@expr1073751033 $assertEquals $(@expr1073751034 "cppcheck-2.8/test/testvalueflow.cpp" $, 7355 $, true $, $testValueOfXKnown_ $(@expr1073751035 "cppcheck-2.8/test/testvalueflow.cpp" $, 7355 $, code@var439 , 3U , "a" , 0 $) $) $) { $return ; }
7356:
7357: code@var439 =@expr1073751036 "void f(int a) {\n    int x = a^0;\n    return x;\n}\n"
7358:
7359:
7360: ;
7361: $if $(@expr1073751037 $!@expr1073751038 $assertEquals $(@expr1073751039 "cppcheck-2.8/test/testvalueflow.cpp" $, 7361 $, true $, $testValueOfXKnown_ $(@expr1073751040 "cppcheck-2.8/test/testvalueflow.cpp" $, 7361 $, code@var439 , 3U , "a" , 0 $) $) $) { $return ; }
7362:
7363: code@var439 =@expr1073751041 "void f(int a) {\n    int x = a|0;\n    return x;\n}\n"
7364:
7365:
7366: ;
7367: $if $(@expr1073751042 $!@expr1073751043 $assertEquals $(@expr1073751044 "cppcheck-2.8/test/testvalueflow.cpp" $, 7367 $, true $, $testValueOfXKnown_ $(@expr1073751045 "cppcheck-2.8/test/testvalueflow.cpp" $, 7367 $, code@var439 , 3U , "a" , 0 $) $) $) { $return ; }
7368:
7369: code@var439 =@expr1073751046 "void f(int a) {\n    int x = a>>0;\n    return x;\n}\n"
7370:
7371:
7372: ;
7373: $if $(@expr1073751047 $!@expr1073751048 $assertEquals $(@expr1073751049 "cppcheck-2.8/test/testvalueflow.cpp" $, 7373 $, true $, $testValueOfXKnown_ $(@expr1073751050 "cppcheck-2.8/test/testvalueflow.cpp" $, 7373 $, code@var439 , 3U , "a" , 0 $) $) $) { $return ; }
7374:
7375: code@var439 =@expr1073751051 "void f(int a) {\n    int x = a<<0;\n    return x;\n}\n"
7376:
7377:
7378: ;
7379: $if $(@expr1073751052 $!@expr1073751053 $assertEquals $(@expr1073751054 "cppcheck-2.8/test/testvalueflow.cpp" $, 7379 $, true $, $testValueOfXKnown_ $(@expr1073751055 "cppcheck-2.8/test/testvalueflow.cpp" $, 7379 $, code@var439 , 3U , "a" , 0 $) $) $) { $return ; }
7380:
7381: code@var439 =@expr1073751056 "void f(int a) {\n    int x = 0>>a;\n    return x;\n}\n"
7382:
7383:
7384: ;
7385: $if $(@expr1073751057 $!@expr1073751058 $assertEquals $(@expr1073751059 "cppcheck-2.8/test/testvalueflow.cpp" $, 7385 $, false $, $testValueOfXKnown_ $(@expr1073751060 "cppcheck-2.8/test/testvalueflow.cpp" $, 7385 $, code@var439 , 3U , "a" , 0 $) $) $) { $return ; }
7386:
7387: code@var439 =@expr1073751061 "void f(int a) {\n    int x = 0<<a;\n    return x;\n}\n"
7388:
7389:
7390: ;
7391: $if $(@expr1073751062 $!@expr1073751063 $assertEquals $(@expr1073751064 "cppcheck-2.8/test/testvalueflow.cpp" $, 7391 $, false $, $testValueOfXKnown_ $(@expr1073751065 "cppcheck-2.8/test/testvalueflow.cpp" $, 7391 $, code@var439 , 3U , "a" , 0 $) $) $) { $return ; }
7392: }
7393:
7394: void valueFlowSmartPointer ( )
7395: {
7396: const char * code@var440 ;
7397:
7398: code@var440 =@expr1073751066 "int* df(int* expr);\nint * f() {\n    std::unique_ptr<int> x;\n    x.reset(df(x.release()));\n    return x;\n}\n"
7399:
|
7402:
7403: ;
7404: $if $(@expr1073751067 $!@expr1073751068 $assertEquals $(@expr1073751069 "cppcheck-2.8/test/testvalueflow.cpp" $, 7404 $, false $, $testValueOfX_ $(@expr1073751070 "cppcheck-2.8/test/testvalueflow.cpp" $, 7404 $, code@var440 , 5U , 0 $) $) $) { $return ; }
7405: }
7406: } ;
7407:
7408: $namespace ${ TestValueFlow instance_TestValueFlow@var441 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@25}
  v {!<=-1,!>=2,0@25}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 47
  "TestValueFlow" always "TestValueFlow"
Line 54
  168 always 168
  = always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"strcpy\"> <arg nr=\"1\"><not-null/></arg> </function>\n  <function name=\"abort\"> <noreturn>true</noreturn> </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"strcpy\"> <arg nr=\"1\"><not-null/></arg> </function>\n  <function name=\"abort\"> <noreturn>true</noreturn> </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"strcpy\"> <arg nr=\"1\"><not-null/></arg> </function>\n  <function name=\"abort\"> <noreturn>true</noreturn> </function>\n</def>"
Line 59
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  59 always 59
  true always 1
  cfg always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"strcpy\"> <arg nr=\"1\"><not-null/></arg> </function>\n  <function name=\"abort\"> <noreturn>true</noreturn> </function>\n</def>"
  sizeof always 168
  ( always 168
  cfg always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"strcpy\"> <arg nr=\"1\"><not-null/></arg> </function>\n  <function name=\"abort\"> <noreturn>true</noreturn> </function>\n</def>"
Line 60
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "valueFlowNumber" always "valueFlowNumber"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "valueFlowString" always "valueFlowString"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "valueFlowPointerAlias" always "valueFlowPointerAlias"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "valueFlowLifetime" always "valueFlowLifetime"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "valueFlowArrayElement" always "valueFlowArrayElement"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "valueFlowMove" always "valueFlowMove"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "valueFlowBitAnd" always "valueFlowBitAnd"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "valueFlowRightShift" always "valueFlowRightShift"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "valueFlowCalculations" always "valueFlowCalculations"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "valueFlowSizeof" always "valueFlowSizeof"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "valueFlowErrorPath" always "valueFlowErrorPath"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "valueFlowBeforeCondition" always "valueFlowBeforeCondition"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionAndAndOrOrGuard" always "valueFlowBeforeConditionAndAndOrOrGuard"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionAssignIncDec" always "valueFlowBeforeConditionAssignIncDec"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionFunctionCall" always "valueFlowBeforeConditionFunctionCall"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionGlobalVariables" always "valueFlowBeforeConditionGlobalVariables"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionGoto" always "valueFlowBeforeConditionGoto"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionIfElse" always "valueFlowBeforeConditionIfElse"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionLoop" always "valueFlowBeforeConditionLoop"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionMacro" always "valueFlowBeforeConditionMacro"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionSizeof" always "valueFlowBeforeConditionSizeof"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionSwitch" always "valueFlowBeforeConditionSwitch"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionTernaryOp" always "valueFlowBeforeConditionTernaryOp"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionForward" always "valueFlowBeforeConditionForward"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "valueFlowBeforeConditionConstructor" always "valueFlowBeforeConditionConstructor"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "valueFlowAfterAssign" always "valueFlowAfterAssign"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "valueFlowAfterSwap" always "valueFlowAfterSwap"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "valueFlowAfterCondition" always "valueFlowAfterCondition"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "valueFlowAfterConditionTernary" always "valueFlowAfterConditionTernary"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "valueFlowAfterConditionExpr" always "valueFlowAfterConditionExpr"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "valueFlowAfterConditionSeveralNot" always "valueFlowAfterConditionSeveralNot"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "valueFlowForwardCompoundAssign" always "valueFlowForwardCompoundAssign"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "valueFlowForwardCorrelatedVariables" always "valueFlowForwardCorrelatedVariables"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "valueFlowForwardModifiedVariables" always "valueFlowForwardModifiedVariables"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "valueFlowForwardFunction" always "valueFlowForwardFunction"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "valueFlowForwardTernary" always "valueFlowForwardTernary"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "valueFlowForwardLambda" always "valueFlowForwardLambda"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "valueFlowForwardTryCatch" always "valueFlowForwardTryCatch"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "valueFlowForwardInconclusiveImpossible" always "valueFlowForwardInconclusiveImpossible"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "valueFlowForwardConst" always "valueFlowForwardConst"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "valueFlowForwardAfterCondition" always "valueFlowForwardAfterCondition"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "valueFlowFwdAnalysis" always "valueFlowFwdAnalysis"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "valueFlowSwitchVariable" always "valueFlowSwitchVariable"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "valueFlowForLoop" always "valueFlowForLoop"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "valueFlowSubFunction" always "valueFlowSubFunction"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "valueFlowFunctionReturn" always "valueFlowFunctionReturn"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "valueFlowFunctionDefaultParameter" always "valueFlowFunctionDefaultParameter"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "knownValue" always "knownValue"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "valueFlowSizeofForwardDeclaredEnum" always "valueFlowSizeofForwardDeclaredEnum"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "valueFlowGlobalVar" always "valueFlowGlobalVar"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "valueFlowGlobalConstVar" always "valueFlowGlobalConstVar"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "valueFlowGlobalStaticVar" always "valueFlowGlobalStaticVar"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "valueFlowInlineAssembly" always "valueFlowInlineAssembly"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "valueFlowSameExpression" always "valueFlowSameExpression"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "valueFlowUninit" always "valueFlowUninit"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "valueFlowConditionExpressions" always "valueFlowConditionExpressions"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "valueFlowContainerSize" always "valueFlowContainerSize"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "valueFlowDynamicBufferSize" always "valueFlowDynamicBufferSize"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "valueFlowSafeFunctionParameterValues" always "valueFlowSafeFunctionParameterValues"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "valueFlowUnknownFunctionReturn" always "valueFlowUnknownFunctionReturn"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "valueFlowPointerAliasDeref" always "valueFlowPointerAliasDeref"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "valueFlowCrashIncompleteCode" always "valueFlowCrashIncompleteCode"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "valueFlowCrash" always "valueFlowCrash"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "valueFlowHang" always "valueFlowHang"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "valueFlowCrashConstructorInitialization" always "valueFlowCrashConstructorInitialization"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "valueFlowUnknownMixedOperators" always "valueFlowUnknownMixedOperators"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "valueFlowSolveExpr" always "valueFlowSolveExpr"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "valueFlowIdempotent" always "valueFlowIdempotent"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "valueFlowUnsigned" always "valueFlowUnsigned"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "valueFlowMod" always "valueFlowMod"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "valueFlowNotNull" always "valueFlowNotNull"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "valueFlowSymbolic" always "valueFlowSymbolic"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "valueFlowSymbolicIdentity" always "valueFlowSymbolicIdentity"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "valueFlowSmartPointer" always "valueFlowSmartPointer"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 168
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 171
  ( always {!<=-1,!>=2}
Line 172
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 175
  ( always {!<=-1,!>=2}
Line 176
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 179
  ( always {!<=-1,!>=2}
Line 180
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 187
  ( always {!<=-1,!>=2}
Line 188
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 194
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 195
  code possible {"int f(int i) {\n    int j = i;\n    j++;\n    int x = i == j;\n    return x;\n}\n"@18,"int f(int i) {\n    int j = i;\n    i++;\n    int x = i - j;\n    return x;\n}\n"@19,"int f(int i) {\n    int j = i;\n    i++;\n    int x = i > j;\n    return x;\n}\n"@20,"int f(int i) {\n    int j = i;\n    j++;\n    int x = j > i;\n    return x;\n}\n"@21,"int foo(float f) {\n    float g = f;\n    int x = f == g;\n    return x;\n}\n"@24,"int f(int i, int j) {\n    if (i == j) {\n        int x = i - j;\n        return x;\n    }\n    return 0;\n}\n"@31,"void f(int y) {\n  int x = y - 1;\n  if (y == 1)\n    int a = x;\n}\n"@42,"void f(int y) {\n  int x = y * y;\n  if (y == 2)\n    int a = x;\n}\n"@43,"void f(int x, int y) {\n  if (x == y*y)\n    if (y == 2)\n      int a = x;\n}\n"@44,"void f(bool a, bool b) {\n    bool x = true;\n    if (a)\n        x = x && b;\n    bool result = x;\n}\n"@79}
Line 196
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testvalueflow.cpp"@18,"cppcheck-2.8/test/testvalueflow.cpp"@19,"cppcheck-2.8/test/testvalueflow.cpp"@20,"cppcheck-2.8/test/testvalueflow.cpp"@21,"cppcheck-2.8/test/testvalueflow.cpp"@24,"cppcheck-2.8/test/testvalueflow.cpp"@31,"cppcheck-2.8/test/testvalueflow.cpp"@42,"cppcheck-2.8/test/testvalueflow.cpp"@43,"cppcheck-2.8/test/testvalueflow.cpp"@44,"cppcheck-2.8/test/testvalueflow.cpp"@79}
  line inconclusive {7090@18,7098@19,7106@20,7114@21,7135@24,7168@31,7221@42,7228@43,7235@44,6910@79}
  "test.cpp" always "test.cpp"
Line 199
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr {!<=-1,5@18,4@14,10@51,3@84,6@35,7@57,8@69,2@92,11@21}
Line 203
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 204
  return always {!<=-1,!>=2}
  true always 1
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 212
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 214
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 215
  code possible {"void f(int a) {\n    int x = a*1;\n    return x;\n}\n"@2,"void f(int a) {\n    int x = a/1;\n    return x;\n}\n"@3,"void f(int a) {\n    int x = a+0;\n    return x;\n}\n"@4,"void f(int a) {\n    int x = a-0;\n    return x;\n}\n"@5,"void f(int a) {\n    int x = a^0;\n    return x;\n}\n"@6,"void f(int a) {\n    int x = a|0;\n    return x;\n}\n"@7,"void f(int a) {\n    int x = a>>0;\n    return x;\n}\n"@8,"void f(int a) {\n    int x = a<<0;\n    return x;\n}\n"@9,"void f(int a) {\n    int x = 0>>a;\n    return x;\n}\n"@10,"void f(int a) {\n    int x = 0<<a;\n    return x;\n}\n"@11}
Line 216
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testvalueflow.cpp"@2,"cppcheck-2.8/test/testvalueflow.cpp"@3,"cppcheck-2.8/test/testvalueflow.cpp"@4,"cppcheck-2.8/test/testvalueflow.cpp"@5,"cppcheck-2.8/test/testvalueflow.cpp"@6,"cppcheck-2.8/test/testvalueflow.cpp"@7,"cppcheck-2.8/test/testvalueflow.cpp"@8,"cppcheck-2.8/test/testvalueflow.cpp"@9,"cppcheck-2.8/test/testvalueflow.cpp"@10,"cppcheck-2.8/test/testvalueflow.cpp"@11}
  line inconclusive {7337@2,7343@3,7349@4,7355@5,7361@6,7367@7,7373@8,7379@9,7385@10,7391@11}
  "test.cpp" always "test.cpp"
Line 219
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr {!<=-1,3@29,4@13,6@17}
Line 221
  ! always {!<=-1,!>=2}
Line 223
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 224
  return always {!<=-1,!>=2}
  true always 1
Line 229
  return always {!<=-1,!>=2}
  false always 0
Line 233
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 235
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 236
  code possible {"void f(int x, int y) {\n  if (x > y*y)\n    if (y == 2)\n      int a = x;\n}\n"@45,"void f(int x, int y) {\n  if (x != y*y)\n    if (y == 2)\n      int a = x;\n}\n"@46,"void f(int x, int y) {\n  if (x >= y*y)\n    if (y == 2)\n      int a = x;\n}\n"@47,"void f(int x, int y) {\n  if (x == y*y)\n    if (y != 2)\n      int a = x;\n}\n"@48,"int f(const std::string &str) {\n    int x = str.c_str();\n    return x;\n}\n"@60,"int f(const std::string_view &str) {\n    int x = str.c_str();\n    return x;\n}\n"@61,"auto f() {\n    std::shared_ptr<int> x = std::make_shared<int>(1);\n    return x;\n}\n"@62,"auto f() {\n    std::unique_ptr<int> x = std::make_unique<int>(1);\n    return x;\n}\n"@63,"struct A {\n    A* f() {\n        A* x = this;\n        return x;\n    }\n};\n"@64,"auto f(int i) {\n    auto x = i % 2;\n    return x;\n}\n"@65}
Line 237
  ( always {!<=-1,!>=2}
  file {"cppcheck-2.8/test/testvalueflow.cpp"@45,"cppcheck-2.8/test/testvalueflow.cpp"@46,"cppcheck-2.8/test/testvalueflow.cpp"@47,"cppcheck-2.8/test/testvalueflow.cpp"@48,"cppcheck-2.8/test/testvalueflow.cpp"@51,"cppcheck-2.8/test/testvalueflow.cpp"@58,"cppcheck-2.8/test/testvalueflow.cpp"@60,"cppcheck-2.8/test/testvalueflow.cpp"@61,"cppcheck-2.8/test/testvalueflow.cpp"@62,"cppcheck-2.8/test/testvalueflow.cpp"@63}
  line {7242@45,7249@46,7256@47,7263@48,7285@51,7320@58,7026@60,7032@61,7038@62,7044@63}
  "test.cpp" always "test.cpp"
Line 240
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr {!<=-1,4@72,11@51,6@58,3@67,7@55,8@161,10@137,5@145}
Line 244
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  true always 1
Line 250
  return always {!<=-1,!>=2}
  false always 0
Line 253
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 256
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 257
  code possible "void f(int x, int y) {\n    if (x != y) {\n        int a = x;\n    }\n}"@33
Line 258
  ( always {!<=-1,!>=2}
  file {"cppcheck-2.8/test/testvalueflow.cpp"@33,"cppcheck-2.8/test/testvalueflow.cpp"@35,"cppcheck-2.8/test/testvalueflow.cpp"@37,"cppcheck-2.8/test/testvalueflow.cpp"@39,"cppcheck-2.8/test/testvalueflow.cpp"@41,"cppcheck-2.8/test/testvalueflow.cpp"@53}
  line {7182@33,7190@35,7198@37,7206@39,7214@41,7293@53}
  "test.cpp" always "test.cpp"
Line 261
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr {!<=-1,3@35}
Line 263
  ! always {!<=-1,!>=2}
Line 265
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 266
  return always {!<=-1,!>=2}
  true always 1
Line 271
  return always {!<=-1,!>=2}
  false always 0
Line 275
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 277
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 279
  ( always {!<=-1,!>=2}
  file possible {"cppcheck-2.8/test/testvalueflow.cpp"@252,"cppcheck-2.8/test/testvalueflow.cpp"@254}
  line possible {2513@252,2524@254}
  "test.cpp" always "test.cpp"
Line 282
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr {!<=-1,7@252}
Line 286
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 287
  return always {!<=-1,!>=2}
  true always 1
Line 292
  return always {!<=-1,!>=2}
  false always 0
Line 296
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 298
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 299
  code possible {"int* df(int* expr);\nint * f() {\n    std::unique_ptr<int> x;\n    x.reset(df(x.release()));\n    return x;\n}\n"@1,"void f(int x, int y) {\n  if (x == y*y)\n    if (y > 2)\n      int a = x;\n}\n"@49,"int f(int x) {\n    int i = 64 - x;\n    if(i < 8)\n        return x;\n    return 0;\n}\n"@54,"int b(int a) {\n  unsigned long x = a ? 6 : 4;\n  assert(x < 6 && x > 0);\n  return 1 / x;\n}\n"@56,"void f(int k) {\n  int x = k;\n  int j = k;\n  x--;\n  if (k != 0) {\n    x;\n  }\n}\n"@57,"int f() {\n  int a = 123;\n  int *p = &a;\n  int x = *p;\n  return x;\n}\n"@135,"void f(int a) {\n    bool x = a == a;\n    bool b = x;\n}\n"@80,"void f(int a) {\n    bool x = a != a;\n    bool b = x;\n}\n"@81,"void f(int a) {\n    int x = a - a;\n    int b = x;\n}\n"@82,"void f(float a) {\n    bool x = a == a;\n    bool b = x;\n}\n"@83}
Line 300
  ( always {!<=-1,!>=2}
  file {"cppcheck-2.8/test/testvalueflow.cpp"@1,"cppcheck-2.8/test/testvalueflow.cpp"@49,"cppcheck-2.8/test/testvalueflow.cpp"@54,"cppcheck-2.8/test/testvalueflow.cpp"@55,"cppcheck-2.8/test/testvalueflow.cpp"@56,"cppcheck-2.8/test/testvalueflow.cpp"@57,"cppcheck-2.8/test/testvalueflow.cpp"@135,"cppcheck-2.8/test/testvalueflow.cpp"@80,"cppcheck-2.8/test/testvalueflow.cpp"@81,"cppcheck-2.8/test/testvalueflow.cpp"@82}
  line {7404@1,7270@49,7301@54,7302@55,7309@56,7319@57,6300@135,4920@80,4926@81,4932@82}
  "test.cpp" always "test.cpp"
Line 303
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr {!<=-1,5@161,4@55,6@57,3@130,2@94,10@158,7@162,9@217,0@218}
Line 305
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 306
  return always {!<=-1,!>=2}
  true always 1
Line 311
  return always {!<=-1,!>=2}
  false always 0
Line 314
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 317
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 318
  code possible {"void f(int x, int y) {\n    if (x < y) {\n        int a = x;\n    }\n}"@34,"void f(int x, int y) {\n    if (x <= y) {\n        int a = x;\n    }\n}"@36,"void f(int x, int y) {\n    if (x > y) {\n        int a = x;\n    }\n}"@38,"void f(int x, int y) {\n    if (x >= y) {\n        int a = x;\n    }\n}"@40,"struct A {\n    A* b();\n    int c() const;\n};\nvoid f(A *d) {\n    if (!d || d->c() != 1)\n        return;\n    A * y = d;\n    d = d->b();\n    A * x = d;\n    A* z = x;\n}\n"@50,"void f(int * p, int len) {\n    for(int x = 0; x < len; ++x) {\n        p[x] = 1;\n    }\n}\n"@52,"char* f() {\n    char *x = malloc(10);\n    return x;\n}\n"@59}
Line 319
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testvalueflow.cpp"@34,"cppcheck-2.8/test/testvalueflow.cpp"@36,"cppcheck-2.8/test/testvalueflow.cpp"@38,"cppcheck-2.8/test/testvalueflow.cpp"@40,"cppcheck-2.8/test/testvalueflow.cpp"@50,"cppcheck-2.8/test/testvalueflow.cpp"@52,"cppcheck-2.8/test/testvalueflow.cpp"@59}
  line inconclusive {7189@34,7197@36,7205@38,7213@40,7284@50,7292@52,7326@59}
  "test.cpp" always "test.cpp"
Line 322
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr {!<=-1,3@34,11@50}
Line 324
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 325
  == always {!<=-1,!>=2}
Line 326
  return always {!<=-1,!>=2}
  true always 1
Line 331
  return always {!<=-1,!>=2}
  false always 0
Line 334
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 336
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 337
  code possible "void f() {\n    float x = 123.45;\n    x += 67;\n    return x;\n}"@50
Line 338
  ( always {!<=-1,!>=2}
  file inconclusive "cppcheck-2.8/test/testvalueflow.cpp"@50
  line inconclusive 3387@50
  "test.cpp" always "test.cpp"
Line 341
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr {!<=-1,4@50}
Line 343
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 344
  . {>=symbolic=(value-diff),!<=symbolic=(value-diff-1)}
  <= always {!<=-1,!>=2}
Line 345
  return always {!<=-1,!>=2}
  true always 1
Line 350
  return always {!<=-1,!>=2}
  false always 0
Line 354
  , always !<=-1
  linenr always !<=-1
Line 356
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 357
  code possible {"void f() {\n  int x = 53;\n  a = x;\n}\n"@68,"void f(int y) {\n  int x = y;\n  a = x;\n  y += 12;\n  if (y == 32) {}}\n"@69,"void f1(int x) {\n  a = x;\n}\nvoid f2() {\n  int x = 3;\n  f1(x+1);\n}\n"@70,"void f(int a) {\n  int x;\n  for (x = a; x < 50; x++) {}\n  b = x;\n}\n"@71}
Line 358
  ( always {!<=-1,!>=2}
  file {"cppcheck-2.8/test/testvalueflow.cpp"@48,"cppcheck-2.8/test/testvalueflow.cpp"@175,"cppcheck-2.8/test/testvalueflow.cpp"@68,"cppcheck-2.8/test/testvalueflow.cpp"@69,"cppcheck-2.8/test/testvalueflow.cpp"@70,"cppcheck-2.8/test/testvalueflow.cpp"@71}
  line {3371@48,1874@175,1341@68,1350@69,1363@70,1372@71}
  "test.cpp" always "test.cpp"
Line 361
  != always {!<=-1,!>=2}
  "x" always "x"
  || always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  linenr {!<=-1,4@48,3@68,2@70}
Line 369
  eptok always symbolic=(ep.first)
  ',' always 44
  '\n' always 10
Line 375
  "" always ""
Line 378
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 380
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 382
  ( always {!<=-1,!>=2}
  "test.cpp" always "test.cpp"
Line 385
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr always !<=-1
Line 387
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !<=-1
Line 388
  return always {!<=-1,!>=2}
  true always 1
Line 393
  return always {!<=-1,!>=2}
  false always 0
Line 397
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 399
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 400
  code possible {"void f() {\n    int a = 1;\n    auto x = [&]() { return a + 1; };\n    auto b = x;\n}\n"@253,"void f() {\n    int a = 1;\n    auto x = [=]() { return a + 1; };\n    auto b = x;\n}\n"@254,"void f(int v) {\n    int a = v;\n    int * p = &a;\n    auto x = [=]() { return p + 1; };\n    auto b = x;\n}\n"@255,"void f() {\n    std::vector<int> v;\n    auto x = v.begin();\n    auto it = x;\n}\n","void f() {\n    std::vector<int> v;\n    auto x = v.begin() + 1;\n    auto it = x;\n}\n"@1,"int* f() {\n    std::vector<int> v;\n    int * x = v.data();\n    return x;\n}\n"@2,"int* f() {\n    std::vector<int> v;\n    int * x = v.data() + 1;\n    return x;\n}\n"@3,"int f(int* a) {\n    int **p = &a;\n    int * x = *p;\n    return x; \n}\n"@4}
Line 401
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testvalueflow.cpp"@253,"cppcheck-2.8/test/testvalueflow.cpp"@254,"cppcheck-2.8/test/testvalueflow.cpp"@255,"cppcheck-2.8/test/testvalueflow.cpp","cppcheck-2.8/test/testvalueflow.cpp"@1,"cppcheck-2.8/test/testvalueflow.cpp"@2,"cppcheck-2.8/test/testvalueflow.cpp"@3,"cppcheck-2.8/test/testvalueflow.cpp"@4}
  line inconclusive {632@253,639@254,647@255,654,661@1,668@2,675@3,682@4}
  "test.cpp" always "test.cpp"
Line 404
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr {!<=-1,4@253,5@255}
Line 406
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !<=-1
Line 407
  return always {!<=-1,!>=2}
  true always 1
Line 412
  return always {!<=-1,!>=2}
  false always 0
Line 415
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 417
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 419
  ( always {!<=-1,!>=2}
  "test.cpp" always "test.cpp"
Line 422
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr always !<=-1
Line 424
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 425
  return always {!<=-1,!>=2}
  true always 1
Line 430
  return always {!<=-1,!>=2}
  false always 0
Line 433
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 435
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 437
  ( always {!<=-1,!>=2}
  "test.cpp" always "test.cpp"
Line 440
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr always !<=-1
Line 442
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 443
  return always {!<=-1,!>=2}
  true always 1
Line 448
  return always {!<=-1,!>=2}
  false always 0
Line 452
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 454
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 455
  code possible "void f(int x) {\n    a = x - 1;\n    switch (x) {\n    case 14: a=x+2; break;\n    };\n    a = x;\n}"@231
Line 456
  ( always {!<=-1,!>=2}
  file {"cppcheck-2.8/test/testvalueflow.cpp"@231,"cppcheck-2.8/test/testvalueflow.cpp"@232,"cppcheck-2.8/test/testvalueflow.cpp"@233}
  line {3920@231,3921@232,3922@233}
  "test.cpp" always "test.cpp"
Line 459
  == always {!<=-1,!>=2}
  "x" always "x"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  linenr {!<=-1,2@231,4@232,6@233}
Line 461
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 462
  return always {!<=-1,!>=2}
  true always 1
Line 467
  return always {!<=-1,!>=2}
  false always 0
Line 471
  = always 1
  true always 1
Line 472
  "" always ""
Line 474
  1 always 1
  "test.cpp" always "test.cpp"
Line 475
  code possible {"void f(int x) {\n    if (x == 123) { goto out; }\n    a=x;\nout:    if (x==123){}\n}"@14,"static void f(int rc) {\n    ABC* abc = getabc();\n    if (!abc) { goto out };\n\n    abc->majortype = 0;\n    if (FAILED(rc)) {}\n\nout:\n    if (abc) {}\n}"@15,"#define M  if (x==123) {}\nvoid f(int x) {\n    a = x;\n    M;\n}"@16,"#define FREE(obj) ((obj) ? (free((char *) (obj)), (obj) = 0) : 0)\nvoid f(int *x) {\n    a = x;\n    FREE(x);\n}"@17,"void f(int x, int y) {\n    switch (y) {\n    case 1: a=x; break;\n    case 2: if (x==5) {} break;\n    };\n}"@18,"void f(int x, int y) {\n    switch (y) {\n    case 1: a=x; return 1;\n    case 2: if (x==5) {} break;\n    };\n}"@19,"void f(int x) {\n    if (x != 123) { b = x; }\n    if (x == 123) {}\n}"@26,"void f(int x) {\n    y = ((x<0) ? x : ((x==2)?3:4));\n}"@31,"int f(int x) {\n  int r = x ? 1 / x : 0;\n  if (x == 0) {}\n}"@32,"void f(int x) {\n    x = y;\n    if (x == 123) {}\n}"@58}
Line 476
  files always size=1
  0 always 0
Line 480
  filedata always size=0
Line 483
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 485
  "" always ""
Line 487
  = always 0
  false always 0
Line 491
  = always 0
  nullptr always 0
Line 492
  s possible {lifetime[Address]=(s)@136,lifetime[Address]=(s)@138,lifetime[Address]=(s)@139,lifetime[Address]=(s)@140,lifetime[Address]=(s)@142,lifetime[Address]=(s)@144}
  ? possible 1
  s {!0,lifetime[Address]=(s)@136,lifetime[Address]=(s)@138,lifetime[Address]=(s)@139,lifetime[Address]=(s)@140,lifetime[Address]=(s)@142,lifetime[Address]=(s)@144}
  : always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 493
  code {"x = rand();"@136,"short f(short x) {\n  return x + 0;\n}"@138,"short f(std::string x) {\n  return x[10];\n}"@139,"int f(float x) {\n  return x;\n}"@140,"short f(__cppcheck_low__(0) __cppcheck_high__(100) short x) {\n  return x + 0;\n}"@142,"unsigned short f(unsigned short x) [[expects: x <= 100]] {\n  return x + 0;\n}"@144,"void f(const std::list<int> &ints) {\n  if (!static_cast<bool>(ints.empty()))\n    ints.front();\n}"@146,"void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.empty()) {}\n}"@148,"void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.size()==0) {}\n}"@150,"void f(std::list<int> ints) {\n  ints.front();\n  ints.pop_back();\n  if (ints.empty()) {}\n}"@151}
Line 494
  "" always ""
Line 495
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testvalueflow.cpp"@136,"cppcheck-2.8/test/testvalueflow.cpp"@138,"cppcheck-2.8/test/testvalueflow.cpp"@139,"cppcheck-2.8/test/testvalueflow.cpp"@140,"cppcheck-2.8/test/testvalueflow.cpp"@142,"cppcheck-2.8/test/testvalueflow.cpp"@144,"cppcheck-2.8/test/testvalueflow.cpp"@146,"cppcheck-2.8/test/testvalueflow.cpp"@148,"cppcheck-2.8/test/testvalueflow.cpp"@150,"cppcheck-2.8/test/testvalueflow.cpp"@151}
  line inconclusive {6285@136,6235@138,6243@139,6251@140,6259@142,6267@144,5493@146,5500@148,5506@150,5513@151}
  "test.cpp" always "test.cpp"
Line 496
  tokstr inconclusive {"("@136,"+"@138,"x ["@139,"x ;"@140,"+"@142,"+"@144,"ints . front"@146,"ints . front"@148,"ints . front"@150,"ints . front"@151}
Line 497
  tok always !0
  ( always size=0
Line 500
  = always 0
  nullptr always 0
Line 502
  [ possible lifetime[Lambda]=(vt)
Line 503
  != always {!<=-1,!>=2}
Line 509
  = always 0
  nullptr always 0
Line 511
  ? possible 1
  s always !0
  : always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 512
  code possible {"void f() {\n    int i = 0;\n    void* x = (void*)&i;\n}\n"@5,"struct T {\n    static int g() { return 0; }\n};\nT t;\nstruct S { int i; };\nS f() {\n    S s = { decltype(t)::g() };\n    return s;\n};\n"@6,"struct T {\n     void f();\n     double d[4][4];\n};\nvoid T::f() {\n    auto g = [this]() -> double(&)[4] {\n        double(&q)[4] = d[0];\n        return q;\n    };\n}\n"@7}
Line 513
  "" always ""
Line 514
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testvalueflow.cpp"@5,"cppcheck-2.8/test/testvalueflow.cpp"@6,"cppcheck-2.8/test/testvalueflow.cpp"@7}
  line inconclusive {688@5,701@6,714@7}
  "test.cpp" always "test.cpp"
Line 515
  tokstr inconclusive {"( void * )"@5,"="@6,"return"@7}
Line 516
  ! always {!<=-1,!>=2}
Line 518
  tok always !0
Line 519
  ! always {!<=-1,!>=2}
Line 521
  ! always {!<=-1,!>=2}
Line 523
  . always !0
Line 530
  file possible {"cppcheck-2.8/test/testvalueflow.cpp"@92,"cppcheck-2.8/test/testvalueflow.cpp"@93,"cppcheck-2.8/test/testvalueflow.cpp"@94,"cppcheck-2.8/test/testvalueflow.cpp"@95,"cppcheck-2.8/test/testvalueflow.cpp"@96,"cppcheck-2.8/test/testvalueflow.cpp"@97,"cppcheck-2.8/test/testvalueflow.cpp"@98,"cppcheck-2.8/test/testvalueflow.cpp"@99,"cppcheck-2.8/test/testvalueflow.cpp"@100,"cppcheck-2.8/test/testvalueflow.cpp"@101}
  line possible {6819@92,6831@93,6667@94,6681@95,6697@96,6738@97,6747@98,6770@99,6781@100,6789@101}
  code possible {"void Error()\n{\n    VfsPath path(\"\");\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}"@92,"void Error()\n{\n    VfsPath path;\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}"@93,"float arr1[4][4] = {0.0};\nfloat arr2[4][4] = {0.0};\nvoid f() {\n    if(arr1[0][0] == 0.0 &&\n       arr1[0][1] == 0.0 &&\n       arr1[0][2] == 0.0 &&\n       arr1[0][3] == 0.0 &&\n       arr1[1][0] == 0.0 &&\n       arr1[1][1] == 0.0 &&\n       arr1[1][2] == 0.0 &&\n       arr1[1][3] == 0.0 &&\n       arr1[2][0] == 0.0 &&\n       arr1[2][1] == 0.0 &&\n       arr1[2][2] == 0.0 &&\n       arr1[2][3] == 0.0 &&\n       arr1[3][0] == 0.0 &&\n       arr1[3][1] == 0.0 &&\n       arr1[3][2] == 0.0 &&\n       arr1[3][3] == 0.0 &&\n       arr2[0][0] == 0.0 &&\n       arr2[0][1] == 0.0 &&\n       arr2[0][2] == 0.0 &&\n       arr2[0][3] == 0.0 &&\n       arr2[1][0] == 0.0 &&\n       arr2[1][1] == 0.0 &&\n       arr2[1][2] == 0.0 &&\n       arr2[1][3] == 0.0 &&\n       arr2[2][0] == 0.0 &&\n       arr2[2][1] == 0.0 &&\n       arr2[2][2] == 0.0 &&\n       arr2[2][3] == 0.0 &&\n       arr2[3][0] == 0.0 &&\n       arr2[3][1] == 0.0 &&\n       arr2[3][2] == 0.0 &&\n       arr2[3][3] == 0.0\n       ) {}\n}\n"@94,"namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b, &b, &b, &b}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {{&b, &b, &b, &b, &b, &b, &b}}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b}}}};\n}\n"@95,"namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}, {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, {&b}}}},\n    {0,\n     {{&b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b,\n       &b}}}};\n}\n"@96,"int &a(int &);\nint &b(int &);\nint &c(int &);\nint &d(int &e) {\n  if (!e)\n    return a(e);\n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &a(int &e) { \n  if (!e)\n    return d(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &b(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return c(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\nint &c(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\n"@97,"void a() {\n  int b = 0;\n  do {\n    for (;;)\n      break;\n  } while (b < 1);\n}\n"@98,"void ParseEvent(tinyxml2::XMLDocument& doc, std::set<Item*>& retItems) {\n    auto ParseAddItem = [&](Item* item) {\n        return retItems.insert(item).second;\n    };\n    tinyxml2::XMLElement *root = doc.RootElement();\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n}\n"@99,"bool isCharPotentialOperator(char ch)  {\n    return (ispunct((unsigned char) ch)\n            && ch != '{' && ch != '}'\n            && ch != '(' && ch != ')'\n            && ch != '[' && ch != ']'\n            && ch != ';' && ch != ','\n            && ch != '#' && ch != '\\\\'\n            && ch != '\\\'' && ch != '\\\"');\n}\n"@100,"void heapSort() {\n    int n = m_size;\n    while (n >= 1) {\n        swap(0, n - 1);\n    }\n}\n"@101}
  tokstr possible {"path"@92,"path"@93,"x"@94,"x"@95,"x"@96,"x"@97,"b"@98,"root"@99,"return"@100,"swap"@101}
Line 531
  ( always !<=-1
  == always {!<=-1,!>=2}
  1U always 1
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  values always size=1
  values possible size=1
Line 536
  & {lifetime[Address]=(isSymbolicValue),!0}
Line 542
  & {lifetime[Address]=(isImpossible),!0}
Line 547
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  547 always 547
  123 always 123
  "x=123;" always "x=123;"
  "123" always "123"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  547 always 547
Line 548
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  548 always 548
  192.0 always 192
  "x=0x0.3p10;" always "x=0x0.3p10;"
  "0x0.3p10" always "0x0.3p10"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  548 always 548
  1e-5 always 1e-05
Line 549
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  549 always 549
  ( always !<=-1
  "x=0.5;" always "x=0.5;"
  "0.5" always "0.5"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  549 always 549
  0.5f always 0.5
  < always {!<=-1,!>=2}
  0.1f always 0.1
Line 550
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  550 always 550
  10 always 10
  "enum {A=10,B=15}; x=A+0;" always "enum {A=10,B=15}; x=A+0;"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  550 always 550
Line 551
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  551 always 551
  0 always 0
  "x=false;" always "x=false;"
  "false" always "false"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  551 always 551
Line 552
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  552 always 552
  1 always 1
  "x=true;" always "x=true;"
  "true" always "true"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  552 always 552
Line 553
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  553 always 553
  0 always 0
  "x(NULL);" always "x(NULL);"
  "NULL" always "NULL"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  553 always 553
Line 554
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  554 always 554
  ( always 97
  'a' always 97
  "x='a';" always "x='a';"
  "'a'" always "'a'"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  554 always 554
Line 555
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  555 always 555
  ( always 10
  '\n' always 10
  "x='\\n';" always "x='\\n';"
  "'\\n'" always "'\\n'"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  555 always 555
Line 556
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  556 always 556
  0xFFFFFFFF00000000 always !<=-1
  0 always 0
  "x=0xFFFFFFFF00000000;" always "x=0xFFFFFFFF00000000;"
  "0xFFFFFFFF00000000" always "0xFFFFFFFF00000000"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  556 always 556
Line 557
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  557 always 557
  16 always 16
  "x=(double)16;" always "x=(double)16;"
  "(" always "("
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  557 always 557
  1e-5 always 1e-05
Line 558
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  558 always 558
  0.0625 always 0.0625
  "x=1/(double)16;" always "x=1/(double)16;"
  "/" always "/"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  558 always 558
  1e-5 always 1e-05
Line 562
  58 always 58
  = always "namespace N { enum E {e0,e1}; }\nvoid foo() { x = N::e1; }"
  "namespace N { enum E {e0,e1}; }\nvoid foo() { x = N::e1; }" always "namespace N { enum E {e0,e1}; }\nvoid foo() { x = N::e1; }"
Line 564
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  564 always 564
  1 always 1
  code always "namespace N { enum E {e0,e1}; }\nvoid foo() { x = N::e1; }"
  "::" always "::"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  564 always 564
Line 572
  = always "const char * f() {\n    static const char *x;\n    if (a) x = \"123\";\n    return x;\n}"
  "const char * f() {\n    static const char *x;\n    if (a) x = \"123\";\n    return x;\n}" always "const char * f() {\n    static const char *x;\n    if (a) x = \"123\";\n    return x;\n}"
Line 577
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  577 always 577
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  577 always 577
  code always "const char * f() {\n    static const char *x;\n    if (a) x = \"123\";\n    return x;\n}"
  4 always 4
  "\"123\"" always "\"123\""
Line 580
  = always "void dostuff(const char *x) {\n  f(x);\n}\n\nvoid test() { dostuff(\"abc\"); }"
  "void dostuff(const char *x) {\n  f(x);\n}\n\nvoid test() { dostuff(\"abc\"); }" always "void dostuff(const char *x) {\n  f(x);\n}\n\nvoid test() { dostuff(\"abc\"); }"
Line 585
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  585 always 585
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  585 always 585
  code always "void dostuff(const char *x) {\n  f(x);\n}\n\nvoid test() { dostuff(\"abc\"); }"
  2 always 2
  "\"abc\"" always "\"abc\""
Line 592
  = always "const char * f() {\n    static const char *x;\n    static char ret[10];\n    if (a) x = &ret[0];\n    return x;\n}"
  "const char * f() {\n    static const char *x;\n    static char ret[10];\n    if (a) x = &ret[0];\n    return x;\n}" always "const char * f() {\n    static const char *x;\n    static char ret[10];\n    if (a) x = &ret[0];\n    return x;\n}"
Line 598
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  598 always 598
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  598 always 598
  code always "const char * f() {\n    static const char *x;\n    static char ret[10];\n    if (a) x = &ret[0];\n    return x;\n}"
  5 always 5
  "& ret [ 0 ]" always "& ret [ 0 ]"
Line 601
  = always "void f() {\n  int *x;\n  if (cond) { int i; x = &i; }\n  *x = 0;\n}"
  "void f() {\n  int *x;\n  if (cond) { int i; x = &i; }\n  *x = 0;\n}" always "void f() {\n  int *x;\n  if (cond) { int i; x = &i; }\n  *x = 0;\n}"
Line 606
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  606 always 606
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  606 always 606
  code always "void f() {\n  int *x;\n  if (cond) { int i; x = &i; }\n  *x = 0;\n}"
  4 always 4
  "& i" always "& i"
Line 608
  = always "void f() {\n  struct X *x;\n  x = &x[1];\n}"
  "void f() {\n  struct X *x;\n  x = &x[1];\n}" always "void f() {\n  struct X *x;\n  x = &x[1];\n}"
Line 612
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  612 always 612
  code always "void f() {\n  struct X *x;\n  x = &x[1];\n}"
  "&" always "&"
Line 613
  & {lifetime[Address]=(isNotTokValue),!0}
Line 614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  614 always 614
  true always 1
  ( always {!<=-1,!>=2}
Line 616
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  616 always 616
  "x [" always "x ["
Line 617
  & {lifetime[Address]=(isNotTokValue),!0}
Line 618
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  618 always 618
  true always 1
  ( always {!<=-1,!>=2}
Line 625
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 627
  = always "void f() {\n    int a = 1;\n    auto x = [&]() { return a + 1; };\n    auto b = x;\n}\n"
  "void f() {\n    int a = 1;\n    auto x = [&]() { return a + 1; };\n    auto b = x;\n}\n" always "void f() {\n    int a = 1;\n    auto x = [&]() { return a + 1; };\n    auto b = x;\n}\n"
Line 632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  632 always 632
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  632 always 632
  code always "void f() {\n    int a = 1;\n    auto x = [&]() { return a + 1; };\n    auto b = x;\n}\n"
  4 always 4
  "a + 1" always "a + 1"
Line 634
  = always "void f() {\n    int a = 1;\n    auto x = [=]() { return a + 1; };\n    auto b = x;\n}\n"
  "void f() {\n    int a = 1;\n    auto x = [=]() { return a + 1; };\n    auto b = x;\n}\n" always "void f() {\n    int a = 1;\n    auto x = [=]() { return a + 1; };\n    auto b = x;\n}\n"
Line 639
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  639 always 639
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  639 always 639
  code always "void f() {\n    int a = 1;\n    auto x = [=]() { return a + 1; };\n    auto b = x;\n}\n"
  4 always 4
  "a ;" always "a ;"
Line 641
  = always "void f(int v) {\n    int a = v;\n    int * p = &a;\n    auto x = [=]() { return p + 1; };\n    auto b = x;\n}\n"
  "void f(int v) {\n    int a = v;\n    int * p = &a;\n    auto x = [=]() { return p + 1; };\n    auto b = x;\n}\n" always "void f(int v) {\n    int a = v;\n    int * p = &a;\n    auto x = [=]() { return p + 1; };\n    auto b = x;\n}\n"
Line 647
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  647 always 647
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  647 always 647
  code always "void f(int v) {\n    int a = v;\n    int * p = &a;\n    auto x = [=]() { return p + 1; };\n    auto b = x;\n}\n"
  5 always 5
  "a ;" always "a ;"
Line 649
  = always "void f() {\n    std::vector<int> v;\n    auto x = v.begin();\n    auto it = x;\n}\n"
  "void f() {\n    std::vector<int> v;\n    auto x = v.begin();\n    auto it = x;\n}\n" always "void f() {\n    std::vector<int> v;\n    auto x = v.begin();\n    auto it = x;\n}\n"
Line 654
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  654 always 654
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  654 always 654
  code always "void f() {\n    std::vector<int> v;\n    auto x = v.begin();\n    auto it = x;\n}\n"
  4 always 4
  "v . begin" always "v . begin"
Line 656
  = always "void f() {\n    std::vector<int> v;\n    auto x = v.begin() + 1;\n    auto it = x;\n}\n"
  "void f() {\n    std::vector<int> v;\n    auto x = v.begin() + 1;\n    auto it = x;\n}\n" always "void f() {\n    std::vector<int> v;\n    auto x = v.begin() + 1;\n    auto it = x;\n}\n"
Line 661
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  661 always 661
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  661 always 661
  code always "void f() {\n    std::vector<int> v;\n    auto x = v.begin() + 1;\n    auto it = x;\n}\n"
  4 always 4
  "v . begin" always "v . begin"
Line 663
  = always "int* f() {\n    std::vector<int> v;\n    int * x = v.data();\n    return x;\n}\n"
  "int* f() {\n    std::vector<int> v;\n    int * x = v.data();\n    return x;\n}\n" always "int* f() {\n    std::vector<int> v;\n    int * x = v.data();\n    return x;\n}\n"
Line 668
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  668 always 668
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  668 always 668
  code always "int* f() {\n    std::vector<int> v;\n    int * x = v.data();\n    return x;\n}\n"
  4 always 4
  "v . data" always "v . data"
Line 670
  = always "int* f() {\n    std::vector<int> v;\n    int * x = v.data() + 1;\n    return x;\n}\n"
  "int* f() {\n    std::vector<int> v;\n    int * x = v.data() + 1;\n    return x;\n}\n" always "int* f() {\n    std::vector<int> v;\n    int * x = v.data() + 1;\n    return x;\n}\n"
Line 675
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  675 always 675
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  675 always 675
  code always "int* f() {\n    std::vector<int> v;\n    int * x = v.data() + 1;\n    return x;\n}\n"
  4 always 4
  "v . data" always "v . data"
Line 677
  = always "int f(int* a) {\n    int **p = &a;\n    int * x = *p;\n    return x; \n}\n"
  "int f(int* a) {\n    int **p = &a;\n    int * x = *p;\n    return x; \n}\n" always "int f(int* a) {\n    int **p = &a;\n    int * x = *p;\n    return x; \n}\n"
Line 682
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  682 always 682
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  682 always 682
  code always "int f(int* a) {\n    int **p = &a;\n    int * x = *p;\n    return x; \n}\n"
  4 always 4
  "a" always "a"
Line 684
  = always "void f() {\n    int i = 0;\n    void* x = (void*)&i;\n}\n"
  "void f() {\n    int i = 0;\n    void* x = (void*)&i;\n}\n" always "void f() {\n    int i = 0;\n    void* x = (void*)&i;\n}\n"
Line 688
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  688 always 688
  code always "void f() {\n    int i = 0;\n    void* x = (void*)&i;\n}\n"
  "( void * )" always "( void * )"
Line 689
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  689 always 689
  true always 1
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 690
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  690 always 690
  true always 1
  == always {!<=-1,!>=2}
  "i" always "i"
Line 692
  = always "struct T {\n    static int g() { return 0; }\n};\nT t;\nstruct S { int i; };\nS f() {\n    S s = { decltype(t)::g() };\n    return s;\n};\n"
  "struct T {\n    static int g() { return 0; }\n};\nT t;\nstruct S { int i; };\nS f() {\n    S s = { decltype(t)::g() };\n    return s;\n};\n" always "struct T {\n    static int g() { return 0; }\n};\nT t;\nstruct S { int i; };\nS f() {\n    S s = { decltype(t)::g() };\n    return s;\n};\n"
Line 701
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  701 always 701
  code always "struct T {\n    static int g() { return 0; }\n};\nT t;\nstruct S { int i; };\nS f() {\n    S s = { decltype(t)::g() };\n    return s;\n};\n"
  "=" always "="
Line 702
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  702 always 702
  true always 1
  ( always {!<=-1,!>=2}
Line 704
  = always "struct T {\n     void f();\n     double d[4][4];\n};\nvoid T::f() {\n    auto g = [this]() -> double(&)[4] {\n        double(&q)[4] = d[0];\n        return q;\n    };\n}\n"
  "struct T {\n     void f();\n     double d[4][4];\n};\nvoid T::f() {\n    auto g = [this]() -> double(&)[4] {\n        double(&q)[4] = d[0];\n        return q;\n    };\n}\n" always "struct T {\n     void f();\n     double d[4][4];\n};\nvoid T::f() {\n    auto g = [this]() -> double(&)[4] {\n        double(&q)[4] = d[0];\n        return q;\n    };\n}\n"
Line 714
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  714 always 714
  code always "struct T {\n     void f();\n     double d[4][4];\n};\nvoid T::f() {\n    auto g = [this]() -> double(&)[4] {\n        double(&q)[4] = d[0];\n        return q;\n    };\n}\n"
  "return" always "return"
Line 715
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  715 always 715
  true always 1
  ( always {!<=-1,!>=2}
Line 721
  = always "void f() {\n    const int x[] = {43,23,12};\n    return x;\n}"
  "void f() {\n    const int x[] = {43,23,12};\n    return x;\n}" always "void f() {\n    const int x[] = {43,23,12};\n    return x;\n}"
Line 725
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  725 always 725
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  725 always 725
  code always "void f() {\n    const int x[] = {43,23,12};\n    return x;\n}"
  3U always 3
  "{ 43 , 23 , 12 }" always "{ 43 , 23 , 12 }"
Line 727
  = always "void f() {\n    const char x[] = \"abcd\";\n    return x;\n}"
  "void f() {\n    const char x[] = \"abcd\";\n    return x;\n}" always "void f() {\n    const char x[] = \"abcd\";\n    return x;\n}"
Line 731
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  731 always 731
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  731 always 731
  code always "void f() {\n    const char x[] = \"abcd\";\n    return x;\n}"
  3U always 3
  "\"abcd\"" always "\"abcd\""
Line 733
  = always "void f() {\n    char x[32] = \"abcd\";\n    return x;\n}"
  "void f() {\n    char x[32] = \"abcd\";\n    return x;\n}" always "void f() {\n    char x[32] = \"abcd\";\n    return x;\n}"
Line 737
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  737 always 737
  true always 1
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  737 always 737
  code always "void f() {\n    char x[32] = \"abcd\";\n    return x;\n}"
  3U always 3
  "\"abcd\"" always "\"abcd\""
Line 739
  = always "void f() {\n  int a[10];\n  int *x = a;\n  *x = 0;\n}"
  "void f() {\n  int a[10];\n  int *x = a;\n  *x = 0;\n}" always "void f() {\n  int a[10];\n  int *x = a;\n  *x = 0;\n}"
Line 744
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  744 always 744
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  744 always 744
  code always "void f() {\n  int a[10];\n  int *x = a;\n  *x = 0;\n}"
  4 always 4
  "a" always "a"
Line 746
  = always "char f() {\n    const char *x = \"abcd\";\n    return x[0];\n}"
  "char f() {\n    const char *x = \"abcd\";\n    return x[0];\n}" always "char f() {\n    const char *x = \"abcd\";\n    return x[0];\n}"
Line 750
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  750 always 750
  ( always 97
  'a' always 97
  code always "char f() {\n    const char *x = \"abcd\";\n    return x[0];\n}"
  "[" always "["
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  750 always 750
Line 752
  = always "char f() {\n    const char *x = \"\";\n    return x[0];\n}"
  "char f() {\n    const char *x = \"\";\n    return x[0];\n}" always "char f() {\n    const char *x = \"\";\n    return x[0];\n}"
Line 756
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  756 always 756
  0 always 0
  code always "char f() {\n    const char *x = \"\";\n    return x[0];\n}"
  "[" always "["
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  756 always 756
Line 762
  = always "void f() {\n   X x;\n   g(std::move(x));\n   y=x;\n}"
  "void f() {\n   X x;\n   g(std::move(x));\n   y=x;\n}" always "void f() {\n   X x;\n   g(std::move(x));\n   y=x;\n}"
Line 767
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  767 always 767
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  767 always 767
  code always "void f() {\n   X x;\n   g(std::move(x));\n   y=x;\n}"
  4U always 4
Line 769
  = always "void f() {\n   X x;\n   g(std::forward<X>(x));\n   y=x;\n}"
  "void f() {\n   X x;\n   g(std::forward<X>(x));\n   y=x;\n}" always "void f() {\n   X x;\n   g(std::forward<X>(x));\n   y=x;\n}"
Line 774
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  774 always 774
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  774 always 774
  code always "void f() {\n   X x;\n   g(std::forward<X>(x));\n   y=x;\n}"
  4U always 4
Line 776
  = always "void f() {\n   X x;\n   g(std::move(x).getA());\n   y=x;\n}"
  "void f() {\n   X x;\n   g(std::move(x).getA());\n   y=x;\n}" always "void f() {\n   X x;\n   g(std::move(x).getA());\n   y=x;\n}"
Line 781
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  781 always 781
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  781 always 781
  code always "void f() {\n   X x;\n   g(std::move(x).getA());\n   y=x;\n}"
  4U always 4
Line 783
  = always "void f() {\n   X x;\n   g(std::forward<X>(x).getA());\n   y=x;\n}"
  "void f() {\n   X x;\n   g(std::forward<X>(x).getA());\n   y=x;\n}" always "void f() {\n   X x;\n   g(std::forward<X>(x).getA());\n   y=x;\n}"
Line 788
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  788 always 788
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  788 always 788
  code always "void f() {\n   X x;\n   g(std::forward<X>(x).getA());\n   y=x;\n}"
  4U always 4
Line 790
  = always "void f() {\n   X x;\n   g(std::move(x));\n   x.clear();\n   y=x;\n}"
  "void f() {\n   X x;\n   g(std::move(x));\n   x.clear();\n   y=x;\n}" always "void f() {\n   X x;\n   g(std::move(x));\n   x.clear();\n   y=x;\n}"
Line 796
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  796 always 796
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  796 always 796
  code always "void f() {\n   X x;\n   g(std::move(x));\n   x.clear();\n   y=x;\n}"
  5U always 5
Line 798
  = always "void f() {\n   X x;\n   g(std::move(x));\n   y=x->y;\n   z=x->z;\n}"
  "void f() {\n   X x;\n   g(std::move(x));\n   y=x->y;\n   z=x->z;\n}" always "void f() {\n   X x;\n   g(std::move(x));\n   y=x->y;\n   z=x->z;\n}"
Line 804
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  804 always 804
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  804 always 804
  code always "void f() {\n   X x;\n   g(std::move(x));\n   y=x->y;\n   z=x->z;\n}"
  5U always 5
Line 806
  = always "void f(int i) {\n    X x;\n    z = g(std::move(x));\n    y = x;\n}"
  "void f(int i) {\n    X x;\n    z = g(std::move(x));\n    y = x;\n}" always "void f(int i) {\n    X x;\n    z = g(std::move(x));\n    y = x;\n}"
Line 811
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  811 always 811
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  811 always 811
  code always "void f(int i) {\n    X x;\n    z = g(std::move(x));\n    y = x;\n}"
  4U always 4
Line 813
  = always "void f(int i) {\n    X x;\n    y = g(std::move(x),\n          x.size());\n}"
  "void f(int i) {\n    X x;\n    y = g(std::move(x),\n          x.size());\n}" always "void f(int i) {\n    X x;\n    y = g(std::move(x),\n          x.size());\n}"
Line 818
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  818 always 818
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  818 always 818
  code always "void f(int i) {\n    X x;\n    y = g(std::move(x),\n          x.size());\n}"
  4U always 4
Line 820
  = always "void f(int i) {\n    X x;\n    x = g(std::move(x));\n    y = x;\n}"
  "void f(int i) {\n    X x;\n    x = g(std::move(x));\n    y = x;\n}" always "void f(int i) {\n    X x;\n    x = g(std::move(x));\n    y = x;\n}"
Line 825
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  825 always 825
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  825 always 825
  code always "void f(int i) {\n    X x;\n    x = g(std::move(x));\n    y = x;\n}"
  4U always 4
Line 827
  = always "A f(int i) {\n    X x;\n    if (i)        return g(std::move(x));\n    return h(std::move(x));\n}"
  "A f(int i) {\n    X x;\n    if (i)        return g(std::move(x));\n    return h(std::move(x));\n}" always "A f(int i) {\n    X x;\n    if (i)        return g(std::move(x));\n    return h(std::move(x));\n}"
Line 833
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  833 always 833
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  833 always 833
  code always "A f(int i) {\n    X x;\n    if (i)        return g(std::move(x));\n    return h(std::move(x));\n}"
  5U always 5
Line 835
  = always "struct X {\n};\nstruct Data {\n  template<typename Fun>\n  void foo(Fun f) {}\n};\nData g(X value) { return Data(); }\nvoid f() {\n   X x;\n   g(std::move(x)).foo([=](int value) mutable {;});\n   X y=x;\n}"
  "struct X {\n};\nstruct Data {\n  template<typename Fun>\n  void foo(Fun f) {}\n};\nData g(X value) { return Data(); }\nvoid f() {\n   X x;\n   g(std::move(x)).foo([=](int value) mutable {;});\n   X y=x;\n}" always "struct X {\n};\nstruct Data {\n  template<typename Fun>\n  void foo(Fun f) {}\n};\nData g(X value) { return Data(); }\nvoid f() {\n   X x;\n   g(std::move(x)).foo([=](int value) mutable {;});\n   X y=x;\n}"
Line 847
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  847 always 847
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  847 always 847
  code always "struct X {\n};\nstruct Data {\n  template<typename Fun>\n  void foo(Fun f) {}\n};\nData g(X value) { return Data(); }\nvoid f() {\n   X x;\n   g(std::move(x)).foo([=](int value) mutable {;});\n   X y=x;\n}"
  11U always 11
Line 849
  = always "void f(int x) {\n   g(std::move(x));\n   y=x;\n}"
  "void f(int x) {\n   g(std::move(x));\n   y=x;\n}" always "void f(int x) {\n   g(std::move(x));\n   y=x;\n}"
Line 853
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  853 always 853
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  853 always 853
  code always "void f(int x) {\n   g(std::move(x));\n   y=x;\n}"
  3U always 3
Line 860
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  860 always 860
  5 always 5
  "3 +  (a ? b : 2);" always "3 +  (a ? b : 2);"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  860 always 860
Line 861
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  861 always 861
  1 always 1
  "3 -  (a ? b : 2);" always "3 -  (a ? b : 2);"
  "-" always "-"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  861 always 861
Line 862
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  862 always 862
  6 always 6
  "3 *  (a ? b : 2);" always "3 *  (a ? b : 2);"
  "*" always "*"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  862 always 862
Line 863
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  863 always 863
  6 always 6
  "13 / (a ? b : 2);" always "13 / (a ? b : 2);"
  "/" always "/"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  863 always 863
Line 864
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  864 always 864
  1 always 1
  "13 % (a ? b : 2);" always "13 % (a ? b : 2);"
  "%" always "%"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  864 always 864
Line 865
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  865 always 865
  0 always 0
  "3 == (a ? b : 2);" always "3 == (a ? b : 2);"
  "==" always "=="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  865 always 865
Line 866
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  866 always 866
  1 always 1
  "3 != (a ? b : 2);" always "3 != (a ? b : 2);"
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  866 always 866
Line 867
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  867 always 867
  1 always 1
  "3 >  (a ? b : 2);" always "3 >  (a ? b : 2);"
  ">" always ">"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  867 always 867
Line 868
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  868 always 868
  1 always 1
  "3 >= (a ? b : 2);" always "3 >= (a ? b : 2);"
  ">=" always ">="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  868 always 868
Line 869
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  869 always 869
  0 always 0
  "3 <  (a ? b : 2);" always "3 <  (a ? b : 2);"
  "<" always "<"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  869 always 869
Line 870
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  870 always 870
  0 always 0
  "3 <= (a ? b : 2);" always "3 <= (a ? b : 2);"
  "<=" always "<="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  870 always 870
Line 872
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  872 always 872
  1 always 1
  "(UNKNOWN_TYPE)1;" always "(UNKNOWN_TYPE)1;"
  "(" always "("
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  872 always 872
Line 873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  873 always 873
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  873 always 873
  "(UNKNOWN_TYPE)1000;" always "(UNKNOWN_TYPE)1000;"
  "(" always "("
  ( always {!<=-1,!>=2}
Line 874
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  874 always 874
  255 always 255
  "(unsigned char)~0;" always "(unsigned char)~0;"
  "(" always "("
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  874 always 874
Line 875
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  875 always 875
  0 always 0
  "(int)0;" always "(int)0;"
  "(" always "("
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  875 always 875
Line 876
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  876 always 876
  3 always 3
  "(int)(1+2);" always "(int)(1+2);"
  "(" always "("
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  876 always 876
Line 877
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  877 always 877
  0 always 0
  "(UNKNOWN_TYPE*)0;" always "(UNKNOWN_TYPE*)0;"
  "(" always "("
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  877 always 877
Line 878
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  878 always 878
  100 always 100
  "(int)100.0;" always "(int)100.0;"
  "(" always "("
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  878 always 878
Line 879
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  879 always 879
  10 always 10
  "x = static_cast<int>(10);" always "x = static_cast<int>(10);"
  "( 10 )" always "( 10 )"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  879 always 879
Line 880
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  880 always 880
  0 always 0
  "x = sizeof (struct {int a;}) * 0;" always "x = sizeof (struct {int a;}) * 0;"
  "*" always "*"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  880 always 880
Line 883
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  883 always 883
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  883 always 883
  ";-1<<10;" always ";-1<<10;"
  "<<" always "<<"
  ( always {!<=-1,!>=2}
Line 884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  884 always 884
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  884 always 884
  ";10<<-1;" always ";10<<-1;"
  "<<" always "<<"
  ( always {!<=-1,!>=2}
Line 885
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  885 always 885
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  885 always 885
  ";10<<64;" always ";10<<64;"
  "<<" always "<<"
  ( always {!<=-1,!>=2}
Line 886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  886 always 886
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  886 always 886
  ";-1>>10;" always ";-1>>10;"
  ">>" always ">>"
  ( always {!<=-1,!>=2}
Line 887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  887 always 887
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  887 always 887
  ";10>>-1;" always ";10>>-1;"
  ">>" always ">>"
  ( always {!<=-1,!>=2}
Line 888
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  888 always 888
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  888 always 888
  ";10>>64;" always ";10>>64;"
  ">>" always ">>"
  ( always {!<=-1,!>=2}
Line 890
  = always "float f(const uint16_t& value) {\n    const uint16_t uVal = value; \n    return static_cast<float>(uVal) / 2;\n}\n"
  "float f(const uint16_t& value) {\n    const uint16_t uVal = value; \n    return static_cast<float>(uVal) / 2;\n}\n" always "float f(const uint16_t& value) {\n    const uint16_t uVal = value; \n    return static_cast<float>(uVal) / 2;\n}\n"
Line 894
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  894 always 894
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  894 always 894
  code always "float f(const uint16_t& value) {\n    const uint16_t uVal = value; \n    return static_cast<float>(uVal) / 2;\n}\n"
  "/" always "/"
  ( always {!<=-1,!>=2}
Line 897
  = always "void f(int x) {\n    a = x+456;\n    if (x==123) {}}"
  "void f(int x) {\n    a = x+456;\n    if (x==123) {}}" always "void f(int x) {\n    a = x+456;\n    if (x==123) {}}"
Line 901
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  901 always 901
  579 always 579
  code always "void f(int x) {\n    a = x+456;\n    if (x==123) {}}"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  901 always 901
Line 903
  = always "void f(int x, int y) {\n    a = x+y;\n    if (x==123 || y==456) {}}"
  "void f(int x, int y) {\n    a = x+y;\n    if (x==123 || y==456) {}}" always "void f(int x, int y) {\n    a = x+y;\n    if (x==123 || y==456) {}}"
Line 907
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  907 always 907
  0 always 0
  code always "void f(int x, int y) {\n    a = x+y;\n    if (x==123 || y==456) {}}"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  907 always 907
Line 909
  = always "void f(int x) {\n    a = x+x;\n    if (x==123) {}}"
  "void f(int x) {\n    a = x+x;\n    if (x==123) {}}" always "void f(int x) {\n    a = x+x;\n    if (x==123) {}}"
Line 913
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  913 always 913
  246 always 246
  code always "void f(int x) {\n    a = x+x;\n    if (x==123) {}}"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  913 always 913
Line 915
  = always "void f(int x, int y) {\n    a = x*x;\n    if (x==2) {}\n    if (x==4) {}\n}"
  "void f(int x, int y) {\n    a = x*x;\n    if (x==2) {}\n    if (x==4) {}\n}" always "void f(int x, int y) {\n    a = x*x;\n    if (x==2) {}\n    if (x==4) {}\n}"
Line 920
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  920 always 920
  code always "void f(int x, int y) {\n    a = x*x;\n    if (x==2) {}\n    if (x==4) {}\n}"
  "*" always "*"
Line 921
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  921 always 921
  2U always 2
  ( always !<=-1
Line 922
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  922 always 922
  4 always 4
Line 923
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  923 always 923
  16 always 16
Line 925
  = always "void f(int x) {\n    if (x == 3) {}\n    a = x * (1 - x - 1);\n}"
  "void f(int x) {\n    if (x == 3) {}\n    a = x * (1 - x - 1);\n}" always "void f(int x) {\n    if (x == 3) {}\n    a = x * (1 - x - 1);\n}"
Line 929
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  929 always 929
  -9 always -9
  code always "void f(int x) {\n    if (x == 3) {}\n    a = x * (1 - x - 1);\n}"
  "*" always "*"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  929 always 929
Line 932
  = always "int f(int x) {\n  int a = 1;\n  while (x!=3) { x+=a; }\n  return x/a;\n}\n"
  "int f(int x) {\n  int a = 1;\n  while (x!=3) { x+=a; }\n  return x/a;\n}\n" always "int f(int x) {\n  int a = 1;\n  while (x!=3) { x+=a; }\n  return x/a;\n}\n"
Line 937
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  937 always 937
  3 always 3
  code always "int f(int x) {\n  int a = 1;\n  while (x!=3) { x+=a; }\n  return x/a;\n}\n"
  "/" always "/"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  937 always 937
Line 940
  = always "x = y ? 2 : 3;\n"
  "x = y ? 2 : 3;\n" always "x = y ? 2 : 3;\n"
Line 941
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  941 always 941
  code always "x = y ? 2 : 3;\n"
  "?" always "?"
Line 942
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  942 always 942
  2U always 2
  ( always !<=-1
Line 943
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  943 always 943
  2 always 2
Line 944
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  944 always 944
  3 always 3
Line 946
  = always "void f(int a) { x = a ? 2 : 3; }\n"
  "void f(int a) { x = a ? 2 : 3; }\n" always "void f(int a) { x = a ? 2 : 3; }\n"
Line 947
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  947 always 947
  code always "void f(int a) { x = a ? 2 : 3; }\n"
  "?" always "?"
Line 948
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  948 always 948
  2U always 2
  ( always !<=-1
Line 949
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  949 always 949
  2 always 2
Line 950
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  950 always 950
  3 always 3
Line 952
  = always "x = (2<5) ? 2 : 3;\n"
  "x = (2<5) ? 2 : 3;\n" always "x = (2<5) ? 2 : 3;\n"
Line 953
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  953 always 953
  code always "x = (2<5) ? 2 : 3;\n"
  "?" always "?"
Line 954
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  954 always 954
  1U always 1
  ( always !<=-1
Line 955
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  955 always 955
  2 always 2
Line 957
  = always "x = 123 ? : 456;\n"
  "x = 123 ? : 456;\n" always "x = 123 ? : 456;\n"
Line 958
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  958 always 958
  code always "x = 123 ? : 456;\n"
  "?" always "?"
Line 959
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  959 always 959
  1U always 1
  ( always !<=-1
Line 960
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  960 always 960
  123 always 123
  ( always {!<=-1,!>=2}
  0 always 0
  : always 0
Line 962
  = always "int f() {\n    const int i = 1;\n    int x = i < 0 ? 0 : 1;\n    return x;\n}"
  "int f() {\n    const int i = 1;\n    int x = i < 0 ? 0 : 1;\n    return x;\n}" always "int f() {\n    const int i = 1;\n    int x = i < 0 ? 0 : 1;\n    return x;\n}"
Line 967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  967 always 967
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  967 always 967
  code always "int f() {\n    const int i = 1;\n    int x = i < 0 ? 0 : 1;\n    return x;\n}"
  4U always 4
  1 always 1
Line 970
  = always "x = ~0U;"
  "x = ~0U;" always "x = ~0U;"
Line 972
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  972 always 972
  code always "x = ~0U;"
  "~" always "~"
Line 973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  973 always 973
  1U always 1
  ( always !<=-1
Line 974
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  974 always 974
  ~ always 4294967295
  0U always 0
Line 977
  = always "void f(int x) {\n    a = !x;\n    if (x==0) {}\n}"
  "void f(int x) {\n    a = !x;\n    if (x==0) {}\n}" always "void f(int x) {\n    a = !x;\n    if (x==0) {}\n}"
Line 981
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  981 always 981
  code always "void f(int x) {\n    a = !x;\n    if (x==0) {}\n}"
  "!" always "!"
Line 982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  982 always 982
  1U always 1
  ( always !<=-1
Line 983
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  983 always 983
  1 always 1
Line 986
  = always "void f(int x) {\n    a = -x;\n    if (x==10) {}\n}"
  "void f(int x) {\n    a = -x;\n    if (x==10) {}\n}" always "void f(int x) {\n    a = -x;\n    if (x==10) {}\n}"
Line 990
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  990 always 990
  code always "void f(int x) {\n    a = -x;\n    if (x==10) {}\n}"
  "-" always "-"
Line 991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  991 always 991
  1U always 1
  ( always !<=-1
Line 992
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  992 always 992
  -10 always -10
Line 995
  = always "void f(bool b) {\n   bool x = false && b;\n   bool a = x;\n}"
  "void f(bool b) {\n   bool x = false && b;\n   bool a = x;\n}" always "void f(bool b) {\n   bool x = false && b;\n   bool a = x;\n}"
Line 999
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  999 always 999
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  999 always 999
  code always "void f(bool b) {\n   bool x = false && b;\n   bool a = x;\n}"
  3U always 3
  0 always 0
Line 1001
  = always "void f(bool b) {\n   bool x = b && false;\n   bool a = x;\n}"
  "void f(bool b) {\n   bool x = b && false;\n   bool a = x;\n}" always "void f(bool b) {\n   bool x = b && false;\n   bool a = x;\n}"
Line 1005
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1005 always 1005
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1005 always 1005
  code always "void f(bool b) {\n   bool x = b && false;\n   bool a = x;\n}"
  3U always 3
  0 always 0
Line 1007
  = always "void f(bool b) {\n   bool x = true && b;\n   bool a = x;\n}"
  "void f(bool b) {\n   bool x = true && b;\n   bool a = x;\n}" always "void f(bool b) {\n   bool x = true && b;\n   bool a = x;\n}"
Line 1011
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1011 always 1011
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1011 always 1011
  code always "void f(bool b) {\n   bool x = true && b;\n   bool a = x;\n}"
  3U always 3
  1 always 1
Line 1013
  = always "void f(bool b) {\n   bool x = b && true;\n   bool a = x;\n}"
  "void f(bool b) {\n   bool x = b && true;\n   bool a = x;\n}" always "void f(bool b) {\n   bool x = b && true;\n   bool a = x;\n}"
Line 1017
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1017 always 1017
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1017 always 1017
  code always "void f(bool b) {\n   bool x = b && true;\n   bool a = x;\n}"
  3U always 3
  1 always 1
Line 1020
  = always "void f(bool b) {\n   bool x = true || b;\n   bool a = x;\n}"
  "void f(bool b) {\n   bool x = true || b;\n   bool a = x;\n}" always "void f(bool b) {\n   bool x = true || b;\n   bool a = x;\n}"
Line 1024
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1024 always 1024
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1024 always 1024
  code always "void f(bool b) {\n   bool x = true || b;\n   bool a = x;\n}"
  3U always 3
  1 always 1
Line 1026
  = always "void f(bool b) {\n   bool x = b || true;\n   bool a = x;\n}"
  "void f(bool b) {\n   bool x = b || true;\n   bool a = x;\n}" always "void f(bool b) {\n   bool x = b || true;\n   bool a = x;\n}"
Line 1030
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1030 always 1030
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1030 always 1030
  code always "void f(bool b) {\n   bool x = b || true;\n   bool a = x;\n}"
  3U always 3
  1 always 1
Line 1032
  = always "void f(bool b) {\n   bool x = false || b;\n   bool a = x;\n}"
  "void f(bool b) {\n   bool x = false || b;\n   bool a = x;\n}" always "void f(bool b) {\n   bool x = false || b;\n   bool a = x;\n}"
Line 1036
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1036 always 1036
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1036 always 1036
  code always "void f(bool b) {\n   bool x = false || b;\n   bool a = x;\n}"
  3U always 3
  0 always 0
Line 1038
  = always "void f(bool b) {\n   bool x = b || false;\n   bool a = x;\n}"
  "void f(bool b) {\n   bool x = b || false;\n   bool a = x;\n}" always "void f(bool b) {\n   bool x = b || false;\n   bool a = x;\n}"
Line 1042
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1042 always 1042
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1042 always 1042
  code always "void f(bool b) {\n   bool x = b || false;\n   bool a = x;\n}"
  3U always 3
  0 always 0
Line 1044
  = always "bool f(const uint16_t * const p) {\n    const uint8_t x = (uint8_t)(*p & 0x01E0U) >> 5U;\n    return x != 0;\n}\n"
  "bool f(const uint16_t * const p) {\n    const uint8_t x = (uint8_t)(*p & 0x01E0U) >> 5U;\n    return x != 0;\n}\n" always "bool f(const uint16_t * const p) {\n    const uint8_t x = (uint8_t)(*p & 0x01E0U) >> 5U;\n    return x != 0;\n}\n"
Line 1048
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1048 always 1048
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1048 always 1048
  code always "bool f(const uint16_t * const p) {\n    const uint8_t x = (uint8_t)(*p & 0x01E0U) >> 5U;\n    return x != 0;\n}\n"
  3U always 3
  -1 always -1
Line 1050
  = always "bool f() {\n    bool a = (4 == 3);\n    bool b = (3 == 3);\n    return a || b;\n}\n"
  "bool f() {\n    bool a = (4 == 3);\n    bool b = (3 == 3);\n    return a || b;\n}\n" always "bool f() {\n    bool a = (4 == 3);\n    bool b = (3 == 3);\n    return a || b;\n}\n"
Line 1055
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1055 always 1055
  code always "bool f() {\n    bool a = (4 == 3);\n    bool b = (3 == 3);\n    return a || b;\n}\n"
  "%oror%" always "%oror%"
Line 1056
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1056 always 1056
  1 always 1
  values possible size=0
  ( {!<=-1,0}
Line 1057
  ! {!<=-1,!>=2,0}
  values possible size=0
  ( {!<=-1,!>=2,1}
Line 1058
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1058 always 1058
  true always 1
  values always !size=0
Line 1059
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1059 always 1059
  true always 1
  values always !size=0
Line 1060
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1060 always 1060
  1 always 1
Line 1064
  = always "void f(int x, int y) {\n    a = x + y;\n}\nvoid callf() {\n    f(1,1);\n    f(10,10);\n}"
  "void f(int x, int y) {\n    a = x + y;\n}\nvoid callf() {\n    f(1,1);\n    f(10,10);\n}" always "void f(int x, int y) {\n    a = x + y;\n}\nvoid callf() {\n    f(1,1);\n    f(10,10);\n}"
Line 1071
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1071 always 1071
  code always "void f(int x, int y) {\n    a = x + y;\n}\nvoid callf() {\n    f(1,1);\n    f(10,10);\n}"
  "+" always "+"
Line 1072
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1072 always 1072
  true always 1
  values possible size=0
  ( {!<=-1,!>=2,0,1}
Line 1073
  ! {!<=-1,!>=2,0}
  values possible size=0
  ( {!<=-1,!>=2,1}
Line 1075
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1075 always 1075
  2U always 2
  values always !size=0
  ( always !<=0
Line 1076
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1076 always 1076
  2 always 2
  values always !size=0
Line 1077
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1077 always 1077
  22 always 22
Line 1081
  = always "struct X {};\nauto operator<=>(const X & a, const X & b) -> decltype(1 <=> 2) {\n    return std::strong_ordering::less;\n}\n"
  "struct X {};\nauto operator<=>(const X & a, const X & b) -> decltype(1 <=> 2) {\n    return std::strong_ordering::less;\n}\n" always "struct X {};\nauto operator<=>(const X & a, const X & b) -> decltype(1 <=> 2) {\n    return std::strong_ordering::less;\n}\n"
Line 1085
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1085 always 1085
  code always "struct X {};\nauto operator<=>(const X & a, const X & b) -> decltype(1 <=> 2) {\n    return std::strong_ordering::less;\n}\n"
  "<=>" always "<=>"
Line 1088
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1088 always 1088
  "f(\"xyz\" == \"xyz\");" always "f(\"xyz\" == \"xyz\");"
  "==" always "=="
Line 1089
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1089 always 1089
  0U always 0
  ( always !<=-1
Line 1091
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1091 always 1091
  "f(\"xyz\" == 0);" always "f(\"xyz\" == 0);"
  "==" always "=="
Line 1092
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1092 always 1092
  1U always 1
  ( always !<=-1
Line 1093
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1093 always 1093
  0 always 0
Line 1095
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1095 always 1095
  "f(0 == \"xyz\");" always "f(0 == \"xyz\");"
  "==" always "=="
Line 1096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1096 always 1096
  1U always 1
  ( always !<=-1
Line 1097
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1097 always 1097
  0 always 0
Line 1099
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1099 always 1099
  "f(\"xyz\" != 0);" always "f(\"xyz\" != 0);"
  "!=" always "!="
Line 1100
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1100 always 1100
  1U always 1
  ( always !<=-1
Line 1101
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1101 always 1101
  1 always 1
Line 1103
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1103 always 1103
  "f(0 != \"xyz\");" always "f(0 != \"xyz\");"
  "!=" always "!="
Line 1104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1104 always 1104
  1U always 1
  ( always !<=-1
Line 1105
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1105 always 1105
  1 always 1
Line 1113
  = always "void f() {\n    char a[10];    x = sizeof(*a);\n}"
  "void f() {\n    char a[10];    x = sizeof(*a);\n}" always "void f() {\n    char a[10];    x = sizeof(*a);\n}"
Line 1117
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1117 always 1117
  "( *" always "( *"
Line 1118
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1118 always 1118
  1U always 1
  ( always !<=-1
Line 1119
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1119 always 1119
  1 always 1
Line 1121
  = always "void f() {\n    char a[10];    x = sizeof(a[0]);\n}"
  "void f() {\n    char a[10];    x = sizeof(a[0]);\n}" always "void f() {\n    char a[10];    x = sizeof(a[0]);\n}"
Line 1125
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1125 always 1125
  "( a" always "( a"
Line 1126
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1126 always 1126
  1U always 1
  ( always !<=-1
Line 1127
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1127 always 1127
  1 always 1
Line 1129
  = always "enum testEnum : uint32_t { a };\nsizeof(testEnum);"
  "enum testEnum : uint32_t { a };\nsizeof(testEnum);" always "enum testEnum : uint32_t { a };\nsizeof(testEnum);"
Line 1131
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1131 always 1131
  "( testEnum" always "( testEnum"
Line 1132
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1132 always 1132
  1U always 1
  ( always !<=-1
Line 1133
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1133 always 1133
  4 always 4
Line 1147
  = always "void f() {\n    x = sizeof(void *);\n}"
  "void f() {\n    x = sizeof(void *);\n}" always "void f() {\n    x = sizeof(void *);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1147 always 1147
  "( void * )" always "( void * )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1147 always 1147
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1147 always 1147
  false always 0
Line 1148
  = always "void f() {\n    x = sizeof(char);\n}"
  "void f() {\n    x = sizeof(char);\n}" always "void f() {\n    x = sizeof(char);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1148 always 1148
  "( char )" always "( char )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1148 always 1148
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1148 always 1148
  1U always 1
  false always 0
Line 1149
  = always "void f() {\n    x = sizeof(short);\n}"
  "void f() {\n    x = sizeof(short);\n}" always "void f() {\n    x = sizeof(short);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1149 always 1149
  "( short )" always "( short )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1149 always 1149
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1149 always 1149
  false always 0
Line 1150
  = always "void f() {\n    x = sizeof(int);\n}"
  "void f() {\n    x = sizeof(int);\n}" always "void f() {\n    x = sizeof(int);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1150 always 1150
  "( int )" always "( int )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1150 always 1150
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1150 always 1150
  false always 0
Line 1151
  = always "void f() {\n    x = sizeof(long);\n}"
  "void f() {\n    x = sizeof(long);\n}" always "void f() {\n    x = sizeof(long);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1151 always 1151
  "( long )" always "( long )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1151 always 1151
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1151 always 1151
  false always 0
Line 1152
  = always "void f() {\n    x = sizeof(long long);\n}"
  "void f() {\n    x = sizeof(long long);\n}" always "void f() {\n    x = sizeof(long long);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1152 always 1152
  "( long )" always "( long )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1152 always 1152
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1152 always 1152
  false always 0
Line 1153
  = always "void f() {\n    x = sizeof(wchar_t);\n}"
  "void f() {\n    x = sizeof(wchar_t);\n}" always "void f() {\n    x = sizeof(wchar_t);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1153 always 1153
  "( wchar_t )" always "( wchar_t )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1153 always 1153
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1153 always 1153
  false always 0
Line 1154
  = always "void f() {\n    x = sizeof(float);\n}"
  "void f() {\n    x = sizeof(float);\n}" always "void f() {\n    x = sizeof(float);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1154 always 1154
  "( float )" always "( float )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1154 always 1154
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1154 always 1154
  false always 0
Line 1155
  = always "void f() {\n    x = sizeof(double);\n}"
  "void f() {\n    x = sizeof(double);\n}" always "void f() {\n    x = sizeof(double);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1155 always 1155
  "( double )" always "( double )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1155 always 1155
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1155 always 1155
  false always 0
Line 1156
  = always "void f() {\n    x = sizeof(long double);\n}"
  "void f() {\n    x = sizeof(long double);\n}" always "void f() {\n    x = sizeof(long double);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1156 always 1156
  "( double )" always "( double )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1156 always 1156
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1156 always 1156
  false always 0
Line 1159
  = always "void f() {\n    x = sizeof(\"asdf\");\n}"
  "void f() {\n    x = sizeof(\"asdf\");\n}" always "void f() {\n    x = sizeof(\"asdf\");\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1159 always 1159
  "( \"asdf\" )" always "( \"asdf\" )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1159 always 1159
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1159 always 1159
  5 always 5
  false always 0
Line 1160
  = always "void f() {\n    x = sizeof(L\"asdf\");\n}"
  "void f() {\n    x = sizeof(L\"asdf\");\n}" always "void f() {\n    x = sizeof(L\"asdf\");\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1160 always 1160
  "( L\"asdf\" )" always "( L\"asdf\" )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1160 always 1160
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1160 always 1160
  5 always 5
  false always 0
Line 1161
  = always "void f() {\n    x = sizeof(u8\"asdf\");\n}"
  "void f() {\n    x = sizeof(u8\"asdf\");\n}" always "void f() {\n    x = sizeof(u8\"asdf\");\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1161 always 1161
  "( u8\"asdf\" )" always "( u8\"asdf\" )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1161 always 1161
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1161 always 1161
  5 always 5
  false always 0
Line 1162
  = always "void f() {\n    x = sizeof(u\"asdf\");\n}"
  "void f() {\n    x = sizeof(u\"asdf\");\n}" always "void f() {\n    x = sizeof(u\"asdf\");\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1162 always 1162
  "( u\"asdf\" )" always "( u\"asdf\" )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1162 always 1162
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1162 always 1162
  5 always 5
  * always 10
  2 always 2
  false always 0
Line 1163
  = always "void f() {\n    x = sizeof(U\"asdf\");\n}"
  "void f() {\n    x = sizeof(U\"asdf\");\n}" always "void f() {\n    x = sizeof(U\"asdf\");\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1163 always 1163
  "( U\"asdf\" )" always "( U\"asdf\" )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1163 always 1163
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1163 always 1163
  5 always 5
  * always 20
  4 always 4
  false always 0
Line 1164
  = always "void f() {\n    x = sizeof('a');\n}"
  "void f() {\n    x = sizeof('a');\n}" always "void f() {\n    x = sizeof('a');\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1164 always 1164
  "( 'a' )" always "( 'a' )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1164 always 1164
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1164 always 1164
  1U always 1
  false always 0
Line 1165
  = always "void f() {\n    x = sizeof('ab');\n}"
  "void f() {\n    x = sizeof('ab');\n}" always "void f() {\n    x = sizeof('ab');\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1165 always 1165
  "( 'ab' )" always "( 'ab' )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1165 always 1165
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1165 always 1165
  false always 0
Line 1166
  = always "void f() {\n    x = sizeof(L'a');\n}"
  "void f() {\n    x = sizeof(L'a');\n}" always "void f() {\n    x = sizeof(L'a');\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1166 always 1166
  "( L'a' )" always "( L'a' )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1166 always 1166
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1166 always 1166
  false always 0
Line 1167
  = always "void f() {\n    x = sizeof(u8'a');\n}"
  "void f() {\n    x = sizeof(u8'a');\n}" always "void f() {\n    x = sizeof(u8'a');\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1167 always 1167
  "( u8'a' )" always "( u8'a' )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1167 always 1167
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1167 always 1167
  1U always 1
  false always 0
Line 1168
  = always "void f() {\n    x = sizeof(u'a');\n}"
  "void f() {\n    x = sizeof(u'a');\n}" always "void f() {\n    x = sizeof(u'a');\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1168 always 1168
  "( u'a' )" always "( u'a' )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1168 always 1168
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1168 always 1168
  2U always 2
  false always 0
Line 1169
  = always "void f() {\n    x = sizeof(U'a');\n}"
  "void f() {\n    x = sizeof(U'a');\n}" always "void f() {\n    x = sizeof(U'a');\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1169 always 1169
  "( U'a' )" always "( U'a' )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1169 always 1169
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1169 always 1169
  4U always 4
  false always 0
Line 1174
  = always "void f() {\n    struct S *a[10];    x = sizeof(a) / sizeof(a[0]);\n}"
  "void f() {\n    struct S *a[10];    x = sizeof(a) / sizeof(a[0]);\n}" always "void f() {\n    struct S *a[10];    x = sizeof(a) / sizeof(a[0]);\n}"
Line 1178
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1178 always 1178
  "/" always "/"
Line 1179
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1179 always 1179
  1U always 1
  ( always !<=-1
Line 1180
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1180 always 1180
  10 always 10
Line 1194
  = always "enum  E  { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E  { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E  { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1194 always 1194
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1194 always 1194
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1194 always 1194
  false always 0
Line 1197
  = always "enum  E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1197 always 1197
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1197 always 1197
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1197 always 1197
  1U always 1
  false always 0
Line 1198
  = always "enum  E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1198 always 1198
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1198 always 1198
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1198 always 1198
  1U always 1
  false always 0
Line 1199
  = always "enum  E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1199 always 1199
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1199 always 1199
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1199 always 1199
  1U always 1
  false always 0
Line 1200
  = always "enum  E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1200 always 1200
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1200 always 1200
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1200 always 1200
  false always 0
Line 1201
  = always "enum  E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1201 always 1201
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1201 always 1201
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1201 always 1201
  false always 0
Line 1202
  = always "enum  E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1202 always 1202
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1202 always 1202
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1202 always 1202
  false always 0
Line 1203
  = always "enum  E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1203 always 1203
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1203 always 1203
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1203 always 1203
  false always 0
Line 1204
  = always "enum  E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1204 always 1204
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1204 always 1204
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1204 always 1204
  false always 0
Line 1205
  = always "enum  E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1205 always 1205
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1205 always 1205
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1205 always 1205
  false always 0
Line 1206
  = always "enum  E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1206 always 1206
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1206 always 1206
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1206 always 1206
  false always 0
Line 1207
  = always "enum  E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1207 always 1207
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1207 always 1207
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1207 always 1207
  false always 0
Line 1208
  = always "enum  E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1208 always 1208
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1208 always 1208
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1208 always 1208
  false always 0
Line 1209
  = always "enum  E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1209 always 1209
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1209 always 1209
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1209 always 1209
  false always 0
Line 1210
  = always "enum  E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1210 always 1210
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1210 always 1210
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1210 always 1210
  false always 0
Line 1211
  = always "enum  E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1211 always 1211
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1211 always 1211
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1211 always 1211
  false always 0
Line 1212
  = always "enum  E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1212 always 1212
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1212 always 1212
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1212 always 1212
  false always 0
Line 1213
  = always "enum  E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "enum  E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}" always "enum  E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1213 always 1213
  "( E )" always "( E )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1213 always 1213
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1213 always 1213
  false always 0
Line 1216
  = always "enum  E  { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E  { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E  { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1216 always 1216
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1216 always 1216
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1216 always 1216
  false always 0
Line 1219
  = always "enum  E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1219 always 1219
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1219 always 1219
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1219 always 1219
  1U always 1
  false always 0
Line 1220
  = always "enum  E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1220 always 1220
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1220 always 1220
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1220 always 1220
  1U always 1
  false always 0
Line 1221
  = always "enum  E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1221 always 1221
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1221 always 1221
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1221 always 1221
  1U always 1
  false always 0
Line 1222
  = always "enum  E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1222 always 1222
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1222 always 1222
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1222 always 1222
  false always 0
Line 1223
  = always "enum  E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1223 always 1223
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1223 always 1223
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1223 always 1223
  false always 0
Line 1224
  = always "enum  E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1224 always 1224
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1224 always 1224
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1224 always 1224
  false always 0
Line 1225
  = always "enum  E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1225 always 1225
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1225 always 1225
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1225 always 1225
  false always 0
Line 1226
  = always "enum  E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1226 always 1226
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1226 always 1226
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1226 always 1226
  false always 0
Line 1227
  = always "enum  E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1227 always 1227
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1227 always 1227
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1227 always 1227
  false always 0
Line 1228
  = always "enum  E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1228 always 1228
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1228 always 1228
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1228 always 1228
  false always 0
Line 1229
  = always "enum  E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1229 always 1229
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1229 always 1229
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1229 always 1229
  false always 0
Line 1230
  = always "enum  E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1230 always 1230
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1230 always 1230
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1230 always 1230
  false always 0
Line 1231
  = always "enum  E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1231 always 1231
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1231 always 1231
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1231 always 1231
  false always 0
Line 1232
  = always "enum  E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1232 always 1232
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1232 always 1232
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1232 always 1232
  false always 0
Line 1233
  = always "enum  E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1233 always 1233
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1233 always 1233
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1233 always 1233
  false always 0
Line 1234
  = always "enum  E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1234 always 1234
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1234 always 1234
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1234 always 1234
  false always 0
Line 1235
  = always "enum  E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "enum  E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}" always "enum  E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1235 always 1235
  "( E0 )" always "( E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1235 always 1235
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1235 always 1235
  false always 0
Line 1238
  = always "enum class E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1238 always 1238
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1238 always 1238
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1238 always 1238
  1U always 1
  false always 0
Line 1239
  = always "enum class E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : signed char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1239 always 1239
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1239 always 1239
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1239 always 1239
  1U always 1
  false always 0
Line 1240
  = always "enum class E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : unsigned char { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1240 always 1240
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1240 always 1240
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1240 always 1240
  1U always 1
  false always 0
Line 1241
  = always "enum class E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1241 always 1241
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1241 always 1241
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1241 always 1241
  false always 0
Line 1242
  = always "enum class E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : signed short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1242 always 1242
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1242 always 1242
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1242 always 1242
  false always 0
Line 1243
  = always "enum class E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : unsigned short { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1243 always 1243
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1243 always 1243
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1243 always 1243
  false always 0
Line 1244
  = always "enum class E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1244 always 1244
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1244 always 1244
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1244 always 1244
  false always 0
Line 1245
  = always "enum class E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : signed int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1245 always 1245
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1245 always 1245
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1245 always 1245
  false always 0
Line 1246
  = always "enum class E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : unsigned int { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1246 always 1246
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1246 always 1246
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1246 always 1246
  false always 0
Line 1247
  = always "enum class E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1247 always 1247
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1247 always 1247
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1247 always 1247
  false always 0
Line 1248
  = always "enum class E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : signed long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1248 always 1248
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1248 always 1248
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1248 always 1248
  false always 0
Line 1249
  = always "enum class E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : unsigned long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1249 always 1249
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1249 always 1249
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1249 always 1249
  false always 0
Line 1250
  = always "enum class E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1250 always 1250
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1250 always 1250
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1250 always 1250
  false always 0
Line 1251
  = always "enum class E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : signed long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1251 always 1251
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1251 always 1251
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1251 always 1251
  false always 0
Line 1252
  = always "enum class E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : unsigned long long { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1252 always 1252
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1252 always 1252
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1252 always 1252
  false always 0
Line 1253
  = always "enum class E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : wchar_t { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1253 always 1253
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1253 always 1253
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1253 always 1253
  false always 0
Line 1254
  = always "enum class E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "enum class E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}" always "enum class E : size_t { E0, E1 };\nvoid f() {\n    x = sizeof(E :: E0);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1254 always 1254
  "( E :: E0 )" always "( E :: E0 )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1254 always 1254
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1254 always 1254
  false always 0
Line 1270
  = always "enum E  { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E  { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E  { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1270 always 1270
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1270 always 1270
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1270 always 1270
  2U always 2
  false always 0
Line 1273
  = always "enum E : char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1273 always 1273
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1273 always 1273
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1273 always 1273
  1U always 1
  * always 2
  2U always 2
  false always 0
Line 1274
  = always "enum E : signed char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : signed char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : signed char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1274 always 1274
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1274 always 1274
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1274 always 1274
  1U always 1
  * always 2
  2U always 2
  false always 0
Line 1275
  = always "enum E : unsigned char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : unsigned char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : unsigned char { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1275 always 1275
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1275 always 1275
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1275 always 1275
  1U always 1
  * always 2
  2U always 2
  false always 0
Line 1276
  = always "enum E : short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1276 always 1276
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1276 always 1276
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1276 always 1276
  2U always 2
  false always 0
Line 1277
  = always "enum E : signed short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : signed short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : signed short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1277 always 1277
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1277 always 1277
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1277 always 1277
  2U always 2
  false always 0
Line 1278
  = always "enum E : unsigned short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : unsigned short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : unsigned short { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1278 always 1278
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1278 always 1278
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1278 always 1278
  2U always 2
  false always 0
Line 1279
  = always "enum E : int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1279 always 1279
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1279 always 1279
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1279 always 1279
  2U always 2
  false always 0
Line 1280
  = always "enum E : signed int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : signed int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : signed int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1280 always 1280
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1280 always 1280
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1280 always 1280
  2U always 2
  false always 0
Line 1281
  = always "enum E : unsigned int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : unsigned int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : unsigned int { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1281 always 1281
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1281 always 1281
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1281 always 1281
  2U always 2
  false always 0
Line 1282
  = always "enum E : long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1282 always 1282
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1282 always 1282
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1282 always 1282
  2U always 2
  false always 0
Line 1283
  = always "enum E : signed long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : signed long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : signed long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1283 always 1283
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1283 always 1283
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1283 always 1283
  2U always 2
  false always 0
Line 1284
  = always "enum E : unsigned long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : unsigned long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : unsigned long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1284 always 1284
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1284 always 1284
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1284 always 1284
  2U always 2
  false always 0
Line 1285
  = always "enum E : long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1285 always 1285
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1285 always 1285
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1285 always 1285
  2U always 2
  false always 0
Line 1286
  = always "enum E : signed long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : signed long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : signed long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1286 always 1286
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1286 always 1286
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1286 always 1286
  2U always 2
  false always 0
Line 1287
  = always "enum E : unsigned long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : unsigned long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : unsigned long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1287 always 1287
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1287 always 1287
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1287 always 1287
  2U always 2
  false always 0
Line 1288
  = always "enum E : wchar_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : wchar_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : wchar_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1288 always 1288
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1288 always 1288
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1288 always 1288
  2U always 2
  false always 0
Line 1289
  = always "enum E : size_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "enum E : size_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}" always "enum E : size_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E0, E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1289 always 1289
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1289 always 1289
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1289 always 1289
  2U always 2
  false always 0
Line 1305
  = always "enum class E  { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E  { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E  { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1305 always 1305
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1305 always 1305
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1305 always 1305
  2U always 2
  false always 0
Line 1308
  = always "enum class E : char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1308 always 1308
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1308 always 1308
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1308 always 1308
  1U always 1
  * always 2
  2U always 2
  false always 0
Line 1309
  = always "enum class E : signed char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : signed char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : signed char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1309 always 1309
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1309 always 1309
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1309 always 1309
  1U always 1
  * always 2
  2U always 2
  false always 0
Line 1310
  = always "enum class E : unsigned char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : unsigned char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : unsigned char { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1310 always 1310
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1310 always 1310
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1310 always 1310
  1U always 1
  * always 2
  2U always 2
  false always 0
Line 1311
  = always "enum class E : short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1311 always 1311
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1311 always 1311
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1311 always 1311
  2U always 2
  false always 0
Line 1312
  = always "enum class E : signed short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : signed short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : signed short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1312 always 1312
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1312 always 1312
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1312 always 1312
  2U always 2
  false always 0
Line 1313
  = always "enum class E : unsigned short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : unsigned short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : unsigned short { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1313 always 1313
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1313 always 1313
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1313 always 1313
  2U always 2
  false always 0
Line 1314
  = always "enum class E : int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1314 always 1314
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1314 always 1314
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1314 always 1314
  2U always 2
  false always 0
Line 1315
  = always "enum class E : signed int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : signed int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : signed int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1315 always 1315
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1315 always 1315
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1315 always 1315
  2U always 2
  false always 0
Line 1316
  = always "enum class E : unsigned int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : unsigned int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : unsigned int { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1316 always 1316
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1316 always 1316
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1316 always 1316
  2U always 2
  false always 0
Line 1317
  = always "enum class E : long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1317 always 1317
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1317 always 1317
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1317 always 1317
  2U always 2
  false always 0
Line 1318
  = always "enum class E : signed long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : signed long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : signed long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1318 always 1318
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1318 always 1318
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1318 always 1318
  2U always 2
  false always 0
Line 1319
  = always "enum class E : unsigned long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : unsigned long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : unsigned long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1319 always 1319
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1319 always 1319
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1319 always 1319
  2U always 2
  false always 0
Line 1320
  = always "enum class E : long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1320 always 1320
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1320 always 1320
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1320 always 1320
  2U always 2
  false always 0
Line 1321
  = always "enum class E : signed long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : signed long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : signed long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1321 always 1321
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1321 always 1321
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1321 always 1321
  2U always 2
  false always 0
Line 1322
  = always "enum class E : unsigned long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : unsigned long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : unsigned long long { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1322 always 1322
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1322 always 1322
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1322 always 1322
  2U always 2
  false always 0
Line 1323
  = always "enum class E : wchar_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : wchar_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : wchar_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1323 always 1323
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1323 always 1323
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1323 always 1323
  2U always 2
  false always 0
Line 1324
  = always "enum class E : size_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "enum class E : size_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}" always "enum class E : size_t { E0, E1 };\nvoid f() {\n    E arrE[] = { E::E0, E::E1 };\n    x = sizeof(arrE);\n}"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1324 always 1324
  "( arrE )" always "( arrE )"
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1324 always 1324
  1U always 1
  ( always !<=-1
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1324 always 1324
  2U always 2
  false always 0
Line 1327
  = always "uint16_t arr[10];\nx = sizeof(arr);"
  "uint16_t arr[10];\nx = sizeof(arr);" always "uint16_t arr[10];\nx = sizeof(arr);"
Line 1329
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1329 always 1329
  "( arr )" always "( arr )"
Line 1330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1330 always 1330
  1U always 1
  ( always !<=-1
Line 1331
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1331 always 1331
  10 always 10
  * always !<=-1
  ( always !<=-1
Line 1337
  = always "void f() {\n  int x = 53;\n  a = x;\n}\n"
  "void f() {\n  int x = 53;\n  a = x;\n}\n" always "void f() {\n  int x = 53;\n  a = x;\n}\n"
Line 1341
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1341 always 1341
  "2,Assignment 'x=53', assigned value is 53\n" always "2,Assignment 'x=53', assigned value is 53\n"
  code always "void f() {\n  int x = 53;\n  a = x;\n}\n"
  3U always 3
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1341 always 1341
Line 1344
  = always "void f(int y) {\n  int x = y;\n  a = x;\n  y += 12;\n  if (y == 32) {}}\n"
  "void f(int y) {\n  int x = y;\n  a = x;\n  y += 12;\n  if (y == 32) {}}\n" always "void f(int y) {\n  int x = y;\n  a = x;\n  y += 12;\n  if (y == 32) {}}\n"
Line 1350
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1350 always 1350
  "2,x is assigned 'y' here.\n5,Assuming that condition 'y==32' is not redundant\n4,Compound assignment '+=', assigned value is 20\n2,x is assigned 'y' here.\n" always "2,x is assigned 'y' here.\n5,Assuming that condition 'y==32' is not redundant\n4,Compound assignment '+=', assigned value is 20\n2,x is assigned 'y' here.\n"
  code always "void f(int y) {\n  int x = y;\n  a = x;\n  y += 12;\n  if (y == 32) {}}\n"
  3U always 3
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1350 always 1350
Line 1356
  = always "void f1(int x) {\n  a = x;\n}\nvoid f2() {\n  int x = 3;\n  f1(x+1);\n}\n"
  "void f1(int x) {\n  a = x;\n}\nvoid f2() {\n  int x = 3;\n  f1(x+1);\n}\n" always "void f1(int x) {\n  a = x;\n}\nvoid f2() {\n  int x = 3;\n  f1(x+1);\n}\n"
Line 1363
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1363 always 1363
  "5,Assignment 'x=3', assigned value is 3\n6,Calling function 'f1', 1st argument 'x+1' value is 4\n" always "5,Assignment 'x=3', assigned value is 3\n6,Calling function 'f1', 1st argument 'x+1' value is 4\n"
  code always "void f1(int x) {\n  a = x;\n}\nvoid f2() {\n  int x = 3;\n  f1(x+1);\n}\n"
  2U always 2
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1363 always 1363
Line 1367
  = always "void f(int a) {\n  int x;\n  for (x = a; x < 50; x++) {}\n  b = x;\n}\n"
  "void f(int a) {\n  int x;\n  for (x = a; x < 50; x++) {}\n  b = x;\n}\n" always "void f(int a) {\n  int x;\n  for (x = a; x < 50; x++) {}\n  b = x;\n}\n"
Line 1372
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1372 always 1372
  "3,Assuming that condition 'x<50' is not redundant\n3,Assuming that condition 'x<50' is not redundant\n" always "3,Assuming that condition 'x<50' is not redundant\n3,Assuming that condition 'x<50' is not redundant\n"
  code always "void f(int a) {\n  int x;\n  for (x = a; x < 50; x++) {}\n  b = x;\n}\n"
  4U always 4
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1372 always 1372
Line 1380
  = always "void f(int x) {\n    int a = x;\n    if (x == 123) {}\n}"
  "void f(int x) {\n    int a = x;\n    if (x == 123) {}\n}" always "void f(int x) {\n    int a = x;\n    if (x == 123) {}\n}"
Line 1384
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1384 always 1384
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1384 always 1384
  code always "void f(int x) {\n    int a = x;\n    if (x == 123) {}\n}"
  2U always 2
  123 always 123
Line 1386
  = always "void f(unsigned int x) {\n    int a = x;\n    if (x >= 1) {}\n}"
  "void f(unsigned int x) {\n    int a = x;\n    if (x >= 1) {}\n}" always "void f(unsigned int x) {\n    int a = x;\n    if (x >= 1) {}\n}"
Line 1390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1390 always 1390
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1390 always 1390
  code always "void f(unsigned int x) {\n    int a = x;\n    if (x >= 1) {}\n}"
  2U always 2
  1 always 1
Line 1391
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1391 always 1391
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1391 always 1391
  2U always 2
  0 always 0
Line 1393
  = always "void f(unsigned int x) {\n    int a = x;\n    if (x > 0) {}\n}"
  "void f(unsigned int x) {\n    int a = x;\n    if (x > 0) {}\n}" always "void f(unsigned int x) {\n    int a = x;\n    if (x > 0) {}\n}"
Line 1397
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1397 always 1397
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1397 always 1397
  code always "void f(unsigned int x) {\n    int a = x;\n    if (x > 0) {}\n}"
  2U always 2
  0 always 0
Line 1399
  = always "void f(unsigned int x) {\n    int a = x;\n    if (x > 1) {}\n}"
  "void f(unsigned int x) {\n    int a = x;\n    if (x > 1) {}\n}" always "void f(unsigned int x) {\n    int a = x;\n    if (x > 1) {}\n}"
Line 1403
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1403 always 1403
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1403 always 1403
  code always "void f(unsigned int x) {\n    int a = x;\n    if (x > 1) {}\n}"
  2U always 2
  1 always 1
Line 1405
  = always "void f(int x) {\n    int a = x;\n    if (x > 0) {}\n}"
  "void f(int x) {\n    int a = x;\n    if (x > 0) {}\n}" always "void f(int x) {\n    int a = x;\n    if (x > 0) {}\n}"
Line 1409
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1409 always 1409
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1409 always 1409
  code always "void f(int x) {\n    int a = x;\n    if (x > 0) {}\n}"
  2U always 2
  0 always 0
Line 1411
  = always "void f(int *x) {\n    *x = 100;\n    if (x) {}\n}"
  "void f(int *x) {\n    *x = 100;\n    if (x) {}\n}" always "void f(int *x) {\n    *x = 100;\n    if (x) {}\n}"
Line 1415
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1415 always 1415
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1415 always 1415
  code always "void f(int *x) {\n    *x = 100;\n    if (x) {}\n}"
  2U always 2
  0 always 0
Line 1417
  = always "extern const int x;\nvoid f() {\n    int a = x;\n    if (x == 123) {}\n}"
  "extern const int x;\nvoid f() {\n    int a = x;\n    if (x == 123) {}\n}" always "extern const int x;\nvoid f() {\n    int a = x;\n    if (x == 123) {}\n}"
Line 1422
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1422 always 1422
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1422 always 1422
  code always "extern const int x;\nvoid f() {\n    int a = x;\n    if (x == 123) {}\n}"
  3U always 3
  123 always 123
Line 1425
  = always "void f(struct X *x) {\n  do {\n    if (!x)\n      break;\n  } while (x->a);\n  if (x) {}\n}\n"
  "void f(struct X *x) {\n  do {\n    if (!x)\n      break;\n  } while (x->a);\n  if (x) {}\n}\n" always "void f(struct X *x) {\n  do {\n    if (!x)\n      break;\n  } while (x->a);\n  if (x) {}\n}\n"
Line 1432
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1432 always 1432
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1432 always 1432
  code always "void f(struct X *x) {\n  do {\n    if (!x)\n      break;\n  } while (x->a);\n  if (x) {}\n}\n"
  5U always 5
  0 always 0
Line 1438
  = always "void f(int x) {\n   x = 2 + x;\n   if (x == 65);\n}"
  "void f(int x) {\n   x = 2 + x;\n   if (x == 65);\n}" always "void f(int x) {\n   x = 2 + x;\n   if (x == 65);\n}"
Line 1442
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1442 always 1442
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1442 always 1442
  code always "void f(int x) {\n   x = 2 + x;\n   if (x == 65);\n}"
  2U always 2
  65 always 65
Line 1444
  = always "void f(int x) {\n   x = y = 2 + x;\n   if (x == 65);\n}"
  "void f(int x) {\n   x = y = 2 + x;\n   if (x == 65);\n}" always "void f(int x) {\n   x = y = 2 + x;\n   if (x == 65);\n}"
Line 1448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1448 always 1448
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1448 always 1448
  code always "void f(int x) {\n   x = y = 2 + x;\n   if (x == 65);\n}"
  2U always 2
  65 always 65
Line 1450
  = always "void f(int x) {\n   a[x++] = 0;\n   if (x == 5);\n}"
  "void f(int x) {\n   a[x++] = 0;\n   if (x == 5);\n}" always "void f(int x) {\n   a[x++] = 0;\n   if (x == 5);\n}"
Line 1454
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1454 always 1454
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1454 always 1454
  code always "void f(int x) {\n   a[x++] = 0;\n   if (x == 5);\n}"
  2U always 2
  5 always 5
Line 1456
  = always "void f(int x) {\n   a = x;\n   x++;\n   if (x == 4);\n}"
  "void f(int x) {\n   a = x;\n   x++;\n   if (x == 4);\n}" always "void f(int x) {\n   a = x;\n   x++;\n   if (x == 4);\n}"
Line 1461
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1461 always 1461
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1461 always 1461
  code always "void f(int x) {\n   a = x;\n   x++;\n   if (x == 4);\n}"
  2U always 2
  3 always 3
Line 1464
  = always "void f(int x) {\n   a = x;\n   x += 2;\n   if (x == 4);\n}"
  "void f(int x) {\n   a = x;\n   x += 2;\n   if (x == 4);\n}" always "void f(int x) {\n   a = x;\n   x += 2;\n   if (x == 4);\n}"
Line 1469
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1469 always 1469
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1469 always 1469
  code always "void f(int x) {\n   a = x;\n   x += 2;\n   if (x == 4);\n}"
  2U always 2
  2 always 2
Line 1471
  = always "void f(int x) {\n   a = x;\n   x -= 2;\n   if (x == 4);\n}"
  "void f(int x) {\n   a = x;\n   x -= 2;\n   if (x == 4);\n}" always "void f(int x) {\n   a = x;\n   x -= 2;\n   if (x == 4);\n}"
Line 1476
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1476 always 1476
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1476 always 1476
  code always "void f(int x) {\n   a = x;\n   x -= 2;\n   if (x == 4);\n}"
  2U always 2
  6 always 6
Line 1478
  = always "void f(int x) {\n   a = x;\n   x *= 2;\n   if (x == 42);\n}"
  "void f(int x) {\n   a = x;\n   x *= 2;\n   if (x == 42);\n}" always "void f(int x) {\n   a = x;\n   x *= 2;\n   if (x == 42);\n}"
Line 1483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1483 always 1483
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1483 always 1483
  code always "void f(int x) {\n   a = x;\n   x *= 2;\n   if (x == 42);\n}"
  2U always 2
  21 always 21
Line 1485
  = always "void f(int x) {\n   a = x;\n   x /= 5;\n   if (x == 42);\n}"
  "void f(int x) {\n   a = x;\n   x /= 5;\n   if (x == 42);\n}" always "void f(int x) {\n   a = x;\n   x /= 5;\n   if (x == 42);\n}"
Line 1490
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1490 always 1490
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1490 always 1490
  code always "void f(int x) {\n   a = x;\n   x /= 5;\n   if (x == 42);\n}"
  2U always 2
  210 always 210
Line 1493
  "void f(int x) {\n    x = y;\n    if (x == 123) {}\n}" always "void f(int x) {\n    x = y;\n    if (x == 123) {}\n}"
Line 1497
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1497 always 1497
  "[test.cpp:2]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable y\n" always "[test.cpp:2]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable y\n"
Line 1505
  = always "void f(int x) {\n    if (!x || \n        a/x) {}\n    if (x==0) {}\n}"
  "void f(int x) {\n    if (!x || \n        a/x) {}\n    if (x==0) {}\n}" always "void f(int x) {\n    if (!x || \n        a/x) {}\n    if (x==0) {}\n}"
Line 1510
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1510 always 1510
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1510 always 1510
  code always "void f(int x) {\n    if (!x || \n        a/x) {}\n    if (x==0) {}\n}"
  2U always 2
  0 always 0
Line 1511
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1511 always 1511
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1511 always 1511
  3U always 3
  0 always 0
Line 1513
  = always "void f(int *x) {\n  ((x=ret())&&\n   (*x==0));\n  if (x==0) {}\n}"
  "void f(int *x) {\n  ((x=ret())&&\n   (*x==0));\n  if (x==0) {}\n}" always "void f(int *x) {\n  ((x=ret())&&\n   (*x==0));\n  if (x==0) {}\n}"
Line 1518
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1518 always 1518
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1518 always 1518
  code always "void f(int *x) {\n  ((x=ret())&&\n   (*x==0));\n  if (x==0) {}\n}"
  3U always 3
  0 always 0
Line 1520
  = always "void f(int *x) {\n  int a = (x && *x == '1');\n  int b = a ? atoi(x) : 0;\n  if (x==0) {}\n}"
  "void f(int *x) {\n  int a = (x && *x == '1');\n  int b = a ? atoi(x) : 0;\n  if (x==0) {}\n}" always "void f(int *x) {\n  int a = (x && *x == '1');\n  int b = a ? atoi(x) : 0;\n  if (x==0) {}\n}"
Line 1525
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1525 always 1525
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1525 always 1525
  code always "void f(int *x) {\n  int a = (x && *x == '1');\n  int b = a ? atoi(x) : 0;\n  if (x==0) {}\n}"
  3U always 3
  0 always 0
Line 1531
  = always "void f(int x) {\n  a = x;\n  setx(x);\n  if (x == 1) {}\n}"
  "void f(int x) {\n  a = x;\n  setx(x);\n  if (x == 1) {}\n}" always "void f(int x) {\n  a = x;\n  setx(x);\n  if (x == 1) {}\n}"
Line 1536
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1536 always 1536
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1536 always 1536
  "void setx(int x);" always "void setx(int x);"
  code always "void f(int x) {\n  a = x;\n  setx(x);\n  if (x == 1) {}\n}"
  ( {lifetime[Object]=(std::string("void setx(int x);")+code),!0}
  2U always 2
  1 always 1
Line 1537
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1537 always 1537
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1537 always 1537
  "void setx(int &x);" always "void setx(int &x);"
  ( {lifetime[Object]=(std::string("void setx(int &x);")+code),!0}
  2U always 2
  1 always 1
Line 1538
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1538 always 1538
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1538 always 1538
  2U always 2
  1 always 1
Line 1540
  = always "void f(char* x) {\n  strcpy(x,\"abc\");\n  if (x) {}\n}"
  "void f(char* x) {\n  strcpy(x,\"abc\");\n  if (x) {}\n}" always "void f(char* x) {\n  strcpy(x,\"abc\");\n  if (x) {}\n}"
Line 1544
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1544 always 1544
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1544 always 1544
  code always "void f(char* x) {\n  strcpy(x,\"abc\");\n  if (x) {}\n}"
  2U always 2
  0 always 0
Line 1546
  = always "void addNewFunction(Scope**scope, const Token**tok);\nvoid f(Scope *x) {\n  x->functionList.back();\n  addNewFunction(&x,&tok);\n  if (x) {}\n}"
  "void addNewFunction(Scope**scope, const Token**tok);\nvoid f(Scope *x) {\n  x->functionList.back();\n  addNewFunction(&x,&tok);\n  if (x) {}\n}" always "void addNewFunction(Scope**scope, const Token**tok);\nvoid f(Scope *x) {\n  x->functionList.back();\n  addNewFunction(&x,&tok);\n  if (x) {}\n}"
Line 1552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1552 always 1552
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1552 always 1552
  code always "void addNewFunction(Scope**scope, const Token**tok);\nvoid f(Scope *x) {\n  x->functionList.back();\n  addNewFunction(&x,&tok);\n  if (x) {}\n}"
  3U always 3
  0 always 0
Line 1558
  = always "void f(int x) {\n  a = x;\n  while (x == 37) {}\n}"
  "void f(int x) {\n  a = x;\n  while (x == 37) {}\n}" always "void f(int x) {\n  a = x;\n  while (x == 37) {}\n}"
Line 1562
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1562 always 1562
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1562 always 1562
  code always "void f(int x) {\n  a = x;\n  while (x == 37) {}\n}"
  2U always 2
  37 always 37
Line 1564
  = always "void f(int x) {\n  a = x;\n  while (x != 37) { x++; }\n}"
  "void f(int x) {\n  a = x;\n  while (x != 37) { x++; }\n}" always "void f(int x) {\n  a = x;\n  while (x != 37) { x++; }\n}"
Line 1568
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1568 always 1568
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1568 always 1568
  code always "void f(int x) {\n  a = x;\n  while (x != 37) { x++; }\n}"
  2U always 2
  37 always 37
Line 1570
  = always "void f(int x) {\n  a = x;\n  for (; x!=1; x++) { }\n}"
  "void f(int x) {\n  a = x;\n  for (; x!=1; x++) { }\n}" always "void f(int x) {\n  a = x;\n  for (; x!=1; x++) { }\n}"
Line 1574
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1574 always 1574
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1574 always 1574
  code always "void f(int x) {\n  a = x;\n  for (; x!=1; x++) { }\n}"
  2U always 2
  1 always 1
Line 1576
  = always "void f(menu *x) {\n  a = x->parent;\n  for (i=0;(i<10) && (x!=0); i++) { x = x->next; }\n}"
  "void f(menu *x) {\n  a = x->parent;\n  for (i=0;(i<10) && (x!=0); i++) { x = x->next; }\n}" always "void f(menu *x) {\n  a = x->parent;\n  for (i=0;(i<10) && (x!=0); i++) { x = x->next; }\n}"
Line 1580
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1580 always 1580
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1580 always 1580
  code always "void f(menu *x) {\n  a = x->parent;\n  for (i=0;(i<10) && (x!=0); i++) { x = x->next; }\n}"
  2U always 2
  0 always 0
Line 1582
  = always "void f(int x) {\n    a = x;\n    do {\n        if (x==76) {}\n    } while (1);\n}"
  "void f(int x) {\n    a = x;\n    do {\n        if (x==76) {}\n    } while (1);\n}" always "void f(int x) {\n    a = x;\n    do {\n        if (x==76) {}\n    } while (1);\n}"
Line 1588
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1588 always 1588
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1588 always 1588
  code always "void f(int x) {\n    a = x;\n    do {\n        if (x==76) {}\n    } while (1);\n}"
  2U always 2
  76 always 76
Line 1590
  = always "void f(int x) {\n    a = x;\n    do {\n        if (x!=76) { x=do_something(); }\n    } while (1);\n}"
  "void f(int x) {\n    a = x;\n    do {\n        if (x!=76) { x=do_something(); }\n    } while (1);\n}" always "void f(int x) {\n    a = x;\n    do {\n        if (x!=76) { x=do_something(); }\n    } while (1);\n}"
Line 1596
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1596 always 1596
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1596 always 1596
  code always "void f(int x) {\n    a = x;\n    do {\n        if (x!=76) { x=do_something(); }\n    } while (1);\n}"
  2U always 2
  76 always 76
Line 1598
  = always "void f(X x) {\n    a = x;\n    for (i=1;i<=count;i++) {\n        BUGON(x==0)\n        x = x.next;\n    }\n}"
  "void f(X x) {\n    a = x;\n    for (i=1;i<=count;i++) {\n        BUGON(x==0)\n        x = x.next;\n    }\n}" always "void f(X x) {\n    a = x;\n    for (i=1;i<=count;i++) {\n        BUGON(x==0)\n        x = x.next;\n    }\n}"
Line 1605
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1605 always 1605
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1605 always 1605
  code always "void f(X x) {\n    a = x;\n    for (i=1;i<=count;i++) {\n        BUGON(x==0)\n        x = x.next;\n    }\n}"
  2U always 2
  0 always 0
Line 1611
  "void f(int x) {\n    y = ((x<0) ? x : ((x==2)?3:4));\n}" always "void f(int x) {\n    y = ((x<0) ? x : ((x==2)?3:4));\n}"
Line 1614
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1614 always 1614
  "[test.cpp:2]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable y\n" always "[test.cpp:2]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable y\n"
Line 1618
  "int f(int x) {\n  int r = x ? 1 / x : 0;\n  if (x == 0) {}\n}" always "int f(int x) {\n  int r = x ? 1 / x : 0;\n  if (x == 0) {}\n}"
Line 1623
  = always "void f(int x) {\n    int a =v x;\n    a = b ? x/2 : 20/x;\n    if (x == 123) {}\n}"
  "void f(int x) {\n    int a =v x;\n    a = b ? x/2 : 20/x;\n    if (x == 123) {}\n}" always "void f(int x) {\n    int a =v x;\n    a = b ? x/2 : 20/x;\n    if (x == 123) {}\n}"
Line 1628
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1628 always 1628
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1628 always 1628
  code always "void f(int x) {\n    int a =v x;\n    a = b ? x/2 : 20/x;\n    if (x == 123) {}\n}"
  2U always 2
  123 always 123
Line 1630
  = always "void f(const s *x) {\n  x->a = 0;\n  if (x ? x->a : 0) {}\n}"
  "void f(const s *x) {\n  x->a = 0;\n  if (x ? x->a : 0) {}\n}" always "void f(const s *x) {\n  x->a = 0;\n  if (x ? x->a : 0) {}\n}"
Line 1634
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1634 always 1634
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1634 always 1634
  code always "void f(const s *x) {\n  x->a = 0;\n  if (x ? x->a : 0) {}\n}"
  2U always 2
  0 always 0
Line 1636
  = always "void f(int x, int y) {\n    a = x;\n    if (y){}\n    if (x==123){}\n}"
  "void f(int x, int y) {\n    a = x;\n    if (y){}\n    if (x==123){}\n}" always "void f(int x, int y) {\n    a = x;\n    if (y){}\n    if (x==123){}\n}"
Line 1641
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1641 always 1641
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1641 always 1641
  code always "void f(int x, int y) {\n    a = x;\n    if (y){}\n    if (x==123){}\n}"
  2U always 2
  123 always 123
Line 1647
  = always "void f(int *x) {\n    sizeof(x[0]);\n    if (x==63){}\n}"
  "void f(int *x) {\n    sizeof(x[0]);\n    if (x==63){}\n}" always "void f(int *x) {\n    sizeof(x[0]);\n    if (x==63){}\n}"
Line 1651
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1651 always 1651
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1651 always 1651
  code always "void f(int *x) {\n    sizeof(x[0]);\n    if (x==63){}\n}"
  2U always 2
  63 always 63
Line 1653
  = always "void f(int *x) {\n    char a[sizeof x.y];\n    if (x==0){}\n}"
  "void f(int *x) {\n    char a[sizeof x.y];\n    if (x==0){}\n}" always "void f(int *x) {\n    char a[sizeof x.y];\n    if (x==0){}\n}"
Line 1657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1657 always 1657
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1657 always 1657
  code always "void f(int *x) {\n    char a[sizeof x.y];\n    if (x==0){}\n}"
  2U always 2
  0 always 0
Line 1663
  = always "void f(X * x) {\n  a = x;\n  if ((x != NULL) &&\n      (a(x->name, html)) &&\n      (a(x->name, body))) {}\n  if (x != NULL) { }\n}"
  "void f(X * x) {\n  a = x;\n  if ((x != NULL) &&\n      (a(x->name, html)) &&\n      (a(x->name, body))) {}\n  if (x != NULL) { }\n}" always "void f(X * x) {\n  a = x;\n  if ((x != NULL) &&\n      (a(x->name, html)) &&\n      (a(x->name, body))) {}\n  if (x != NULL) { }\n}"
Line 1670
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1670 always 1670
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1670 always 1670
  code always "void f(X * x) {\n  a = x;\n  if ((x != NULL) &&\n      (a(x->name, html)) &&\n      (a(x->name, body))) {}\n  if (x != NULL) { }\n}"
  2U always 2
  0 always 0
Line 1671
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1671 always 1671
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1671 always 1671
  3U always 3
  0 always 0
Line 1672
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1672 always 1672
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1672 always 1672
  4U always 4
  0 always 0
Line 1673
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1673 always 1673
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1673 always 1673
  5U always 5
  0 always 0
Line 1675
  "void f(int x) {\n    if (x != 123) { b = x; }\n    if (x == 123) {}\n}" always "void f(int x) {\n    if (x != 123) { b = x; }\n    if (x == 123) {}\n}"
Line 1679
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1679 always 1679
  "[test.cpp:2]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable b\n" always "[test.cpp:2]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable b\n"
Line 1683
  = always "void f(int x, bool abc) {\n  a = x;\n  if (abc) { x = 1; }\n  if (x == 7) { }\n}"
  "void f(int x, bool abc) {\n  a = x;\n  if (abc) { x = 1; }\n  if (x == 7) { }\n}" always "void f(int x, bool abc) {\n  a = x;\n  if (abc) { x = 1; }\n  if (x == 7) { }\n}"
Line 1688
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1688 always 1688
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1688 always 1688
  code always "void f(int x, bool abc) {\n  a = x;\n  if (abc) { x = 1; }\n  if (x == 7) { }\n}"
  2U always 2
  7 always 7
Line 1690
  = always "void f(int x, bool abc) {\n  a = x;\n  if (abc) { x = 7; }\n  if (x == 7) { }\n}"
  "void f(int x, bool abc) {\n  a = x;\n  if (abc) { x = 7; }\n  if (x == 7) { }\n}" always "void f(int x, bool abc) {\n  a = x;\n  if (abc) { x = 7; }\n  if (x == 7) { }\n}"
Line 1695
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1695 always 1695
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1695 always 1695
  code always "void f(int x, bool abc) {\n  a = x;\n  if (abc) { x = 7; }\n  if (x == 7) { }\n}"
  2U always 2
  7 always 7
Line 1702
  = always "int x;\nvoid f() {\n    int a = x;\n    if (x == 123) {}\n}"
  "int x;\nvoid f() {\n    int a = x;\n    if (x == 123) {}\n}" always "int x;\nvoid f() {\n    int a = x;\n    if (x == 123) {}\n}"
Line 1707
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1707 always 1707
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1707 always 1707
  code always "int x;\nvoid f() {\n    int a = x;\n    if (x == 123) {}\n}"
  3 always 3
  123 always 123
Line 1710
  = always "class Fred { int x; void clear(); void f(); };\nvoid Fred::f() {\n    int a = x;\n    clear();\n    if (x == 234) {}\n}"
  "class Fred { int x; void clear(); void f(); };\nvoid Fred::f() {\n    int a = x;\n    clear();\n    if (x == 234) {}\n}" always "class Fred { int x; void clear(); void f(); };\nvoid Fred::f() {\n    int a = x;\n    clear();\n    if (x == 234) {}\n}"
Line 1716
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1716 always 1716
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1716 always 1716
  code always "class Fred { int x; void clear(); void f(); };\nvoid Fred::f() {\n    int a = x;\n    clear();\n    if (x == 234) {}\n}"
  3 always 3
  234 always 234
Line 1722
  "void f(int x, int y) {\n    switch (y) {\n    case 1: a=x; break;\n    case 2: if (x==5) {} break;\n    };\n}" always "void f(int x, int y) {\n    switch (y) {\n    case 1: a=x; break;\n    case 2: if (x==5) {} break;\n    };\n}"
Line 1728
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1728 always 1728
  "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n" always "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n"
Line 1732
  "void f(int x, int y) {\n    switch (y) {\n    case 1: a=x; return 1;\n    case 2: if (x==5) {} break;\n    };\n}" always "void f(int x, int y) {\n    switch (y) {\n    case 1: a=x; return 1;\n    case 2: if (x==5) {} break;\n    };\n}"
Line 1738
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1738 always 1738
  "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n" always "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n"
Line 1745
  "#define M  if (x==123) {}\nvoid f(int x) {\n    a = x;\n    M;\n}" always "#define M  if (x==123) {}\nvoid f(int x) {\n    a = x;\n    M;\n}"
Line 1750
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1750 always 1750
  "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n[test.cpp:4]: (debug) valueflow.cpp:1260:(valueFlow) bailout: variable 'x', condition is defined in macro\n" always "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n[test.cpp:4]: (debug) valueflow.cpp:1260:(valueFlow) bailout: variable 'x', condition is defined in macro\n"
Line 1755
  "#define FREE(obj) ((obj) ? (free((char *) (obj)), (obj) = 0) : 0)\nvoid f(int *x) {\n    a = x;\n    FREE(x);\n}" always "#define FREE(obj) ((obj) ? (free((char *) (obj)), (obj) = 0) : 0)\nvoid f(int *x) {\n    a = x;\n    FREE(x);\n}"
Line 1760
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1760 always 1760
  "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n[test.cpp:4]: (debug) valueflow.cpp:1260:(valueFlow) bailout: variable 'x', condition is defined in macro\n" always "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n[test.cpp:4]: (debug) valueflow.cpp:1260:(valueFlow) bailout: variable 'x', condition is defined in macro\n"
Line 1768
  "void f(int x) {\n    if (x == 123) { goto out; }\n    a=x;\nout:    if (x==123){}\n}" always "void f(int x) {\n    if (x == 123) { goto out; }\n    a=x;\nout:    if (x==123){}\n}"
Line 1774
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1774 always 1774
  "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n[test.cpp:2]: (debug) valueflow.cpp::(valueFlow) bailout: valueFlowAfterCondition: bailing in conditional block\n" always "[test.cpp:3]: (debug) valueflow.cpp::valueFlowConditionExpressions bailout: Skipping function due to incomplete variable a\n[test.cpp:2]: (debug) valueflow.cpp::(valueFlow) bailout: valueFlowAfterCondition: bailing in conditional block\n"
Line 1780
  "static void f(int rc) {\n    ABC* abc = getabc();\n    if (!abc) { goto out };\n\n    abc->majortype = 0;\n    if (FAILED(rc)) {}\n\nout:\n    if (abc) {}\n}" always "static void f(int rc) {\n    ABC* abc = getabc();\n    if (!abc) { goto out };\n\n    abc->majortype = 0;\n    if (FAILED(rc)) {}\n\nout:\n    if (abc) {}\n}"
Line 1795
  = always "void f(int a) {\n    int x = a;\n    if (a == 123) {}\n    int b = x;\n}"
  "void f(int a) {\n    int x = a;\n    if (a == 123) {}\n    int b = x;\n}" always "void f(int a) {\n    int x = a;\n    if (a == 123) {}\n    int b = x;\n}"
Line 1800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1800 always 1800
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1800 always 1800
  code always "void f(int a) {\n    int x = a;\n    if (a == 123) {}\n    int b = x;\n}"
  4U always 4
  123 always 123
Line 1802
  = always "void f(int a) {\n    int x = a;\n    if (a != 123) {}\n    int b = x;\n}"
  "void f(int a) {\n    int x = a;\n    if (a != 123) {}\n    int b = x;\n}" always "void f(int a) {\n    int x = a;\n    if (a != 123) {}\n    int b = x;\n}"
Line 1807
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1807 always 1807
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1807 always 1807
  code always "void f(int a) {\n    int x = a;\n    if (a != 123) {}\n    int b = x;\n}"
  4U always 4
  123 always 123
Line 1814
  = always "struct Fred {\n    Fred(int *x)\n      : i(*x) {\n        if (!x) {}\n    }\n    int i;\n};\n"
  "struct Fred {\n    Fred(int *x)\n      : i(*x) {\n        if (!x) {}\n    }\n    int i;\n};\n" always "struct Fred {\n    Fred(int *x)\n      : i(*x) {\n        if (!x) {}\n    }\n    int i;\n};\n"
Line 1821
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1821 always 1821
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1821 always 1821
  code always "struct Fred {\n    Fred(int *x)\n      : i(*x) {\n        if (!x) {}\n    }\n    int i;\n};\n"
  3U always 3
  0 always 0
Line 1823
  = always "struct Fred {\n    Fred(int *x)\n      : i(*x), j(0) {\n        if (!x) {}\n    }\n    int i;\n    int j;\n};\n"
  "struct Fred {\n    Fred(int *x)\n      : i(*x), j(0) {\n        if (!x) {}\n    }\n    int i;\n    int j;\n};\n" always "struct Fred {\n    Fred(int *x)\n      : i(*x), j(0) {\n        if (!x) {}\n    }\n    int i;\n    int j;\n};\n"
Line 1831
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1831 always 1831
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1831 always 1831
  code always "struct Fred {\n    Fred(int *x)\n      : i(*x), j(0) {\n        if (!x) {}\n    }\n    int i;\n    int j;\n};\n"
  3U always 3
  0 always 0
Line 1837
  = always "void f() {\n    int x = 123;\n    a = x;\n}"
  "void f() {\n    int x = 123;\n    a = x;\n}" always "void f() {\n    int x = 123;\n    a = x;\n}"
Line 1841
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1841 always 1841
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1841 always 1841
  3U always 3
  123 always 123
Line 1843
  = always "void f() {\n    bool x = 32;\n    a = x;\n}"
  "void f() {\n    bool x = 32;\n    a = x;\n}" always "void f() {\n    bool x = 32;\n    a = x;\n}"
Line 1847
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1847 always 1847
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1847 always 1847
  3U always 3
  1 always 1
Line 1849
  = always "void f() {\n    int x = 123;\n    a = sizeof(x);\n}"
  "void f() {\n    int x = 123;\n    a = sizeof(x);\n}" always "void f() {\n    int x = 123;\n    a = sizeof(x);\n}"
Line 1853
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1853 always 1853
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1853 always 1853
  3U always 3
  123 always 123
Line 1855
  = always "void f() {\n    int x = 123;\n    a = 2 + x;\n}"
  "void f() {\n    int x = 123;\n    a = 2 + x;\n}" always "void f() {\n    int x = 123;\n    a = 2 + x;\n}"
Line 1859
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1859 always 1859
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1859 always 1859
  3U always 3
  123 always 123
Line 1861
  = always "void f() {\n    const int x(321);\n    a = x;\n}"
  "void f() {\n    const int x(321);\n    a = x;\n}" always "void f() {\n    const int x(321);\n    a = x;\n}"
Line 1865
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1865 always 1865
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1865 always 1865
  3U always 3
  321 always 321
Line 1867
  = always "void f() {\n    int x = 9;\n    --x;\n    return x;\n}"
  "void f() {\n    int x = 9;\n    --x;\n    return x;\n}" always "void f() {\n    int x = 9;\n    --x;\n    return x;\n}"
Line 1872
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1872 always 1872
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1872 always 1872
  4U always 4
  9 always 9
Line 1873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1873 always 1873
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1873 always 1873
  4U always 4
  8 always 8
Line 1874
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1874 always 1874
  "2,Assignment 'x=9', assigned value is 9\n3,x is decremented', new value is 8\n" always "2,Assignment 'x=9', assigned value is 9\n3,x is decremented', new value is 8\n"
  4U always 4
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1874 always 1874
Line 1878
  = always "void x() {\n    int x = value ? 6 : 0;\n    x =\n        1 + x;\n}"
  "void x() {\n    int x = value ? 6 : 0;\n    x =\n        1 + x;\n}" always "void x() {\n    int x = value ? 6 : 0;\n    x =\n        1 + x;\n}"
Line 1883
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1883 always 1883
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1883 always 1883
  4U always 4
  7 always 7
Line 1885
  = always "void f() {\n    int x = 0;\n    y = x += z;\n    return x;\n}"
  "void f() {\n    int x = 0;\n    y = x += z;\n    return x;\n}" always "void f() {\n    int x = 0;\n    y = x += z;\n    return x;\n}"
Line 1890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1890 always 1890
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1890 always 1890
  4U always 4
  0 always 0
Line 1892
  = always "void f() {\n    static int x = 2;\n    x++;\n    return x;\n}"
  "void f() {\n    static int x = 2;\n    x++;\n    return x;\n}" always "void f() {\n    static int x = 2;\n    x++;\n    return x;\n}"
Line 1897
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1897 always 1897
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1897 always 1897
  4U always 4
  2 always 2
Line 1899
  = always "void f() {\n    static int x = 2;\n    a >> x;\n    return x;\n}"
  "void f() {\n    static int x = 2;\n    a >> x;\n    return x;\n}" always "void f() {\n    static int x = 2;\n    a >> x;\n    return x;\n}"
Line 1904
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1904 always 1904
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1904 always 1904
  4U always 4
  2 always 2
Line 1906
  = always "void f() {\n    static int x = 0;\n    if (x==0) x = getX();\n    return x;\n}"
  "void f() {\n    static int x = 0;\n    if (x==0) x = getX();\n    return x;\n}" always "void f() {\n    static int x = 0;\n    if (x==0) x = getX();\n    return x;\n}"
Line 1911
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1911 always 1911
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1911 always 1911
  4U always 4
  0 always 0
Line 1914
  = always "int f() {\n  int x = 1.5;\n  return x;\n}"
  "int f() {\n  int x = 1.5;\n  return x;\n}" always "int f() {\n  int x = 1.5;\n  return x;\n}"
Line 1918
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1918 always 1918
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1918 always 1918
  3U always 3
  1 always 1
Line 1920
  = always "int f() {\n  unsigned char x = 0x123;\n  return x;\n}"
  "int f() {\n  unsigned char x = 0x123;\n  return x;\n}" always "int f() {\n  unsigned char x = 0x123;\n  return x;\n}"
Line 1924
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1924 always 1924
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1924 always 1924
  3U always 3
  0x23 always 35
Line 1926
  = always "int f() {\n  signed char x = 0xfe;\n  return x;\n}"
  "int f() {\n  signed char x = 0xfe;\n  return x;\n}" always "int f() {\n  signed char x = 0xfe;\n  return x;\n}"
Line 1930
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1930 always 1930
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1930 always 1930
  3U always 3
  -2 always -2
Line 1933
  = always "void f() {\n    char *x = 0;\n    int success = getx((char**)&x);\n    if (success) x[0] = 0;\n}"
  "void f() {\n    char *x = 0;\n    int success = getx((char**)&x);\n    if (success) x[0] = 0;\n}" always "void f() {\n    char *x = 0;\n    int success = getx((char**)&x);\n    if (success) x[0] = 0;\n}"
Line 1938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1938 always 1938
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1938 always 1938
  4U always 4
  0 always 0
Line 1940
  = always "void f() {\n    char *x = 0;\n    getx(reinterpret_cast<void **>(&x));\n    *x = 0;\n}"
  "void f() {\n    char *x = 0;\n    getx(reinterpret_cast<void **>(&x));\n    *x = 0;\n}" always "void f() {\n    char *x = 0;\n    getx(reinterpret_cast<void **>(&x));\n    *x = 0;\n}"
Line 1945
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1945 always 1945
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1945 always 1945
  4U always 4
  0 always 0
Line 1948
  = always "void f() {\n    int x = 0;\n    Q q = [&]() {\n        if (x > 0) {}\n        x++;\n    };\n    dosomething(q);\n}\n"
  "void f() {\n    int x = 0;\n    Q q = [&]() {\n        if (x > 0) {}\n        x++;\n    };\n    dosomething(q);\n}\n" always "void f() {\n    int x = 0;\n    Q q = [&]() {\n        if (x > 0) {}\n        x++;\n    };\n    dosomething(q);\n}\n"
Line 1956
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1956 always 1956
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1956 always 1956
  4U always 4
  0 always 0
Line 1958
  = always "void f() {\n    int x = 0;\n    dostuff([&]() {\n        if (x > 0) {}\n        x++;\n    });\n    dosomething(q);\n}\n"
  "void f() {\n    int x = 0;\n    dostuff([&]() {\n        if (x > 0) {}\n        x++;\n    });\n    dosomething(q);\n}\n" always "void f() {\n    int x = 0;\n    dostuff([&]() {\n        if (x > 0) {}\n        x++;\n    });\n    dosomething(q);\n}\n"
Line 1966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1966 always 1966
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1966 always 1966
  4U always 4
  0 always 0
Line 1968
  = always "int f() {\n    int x = 1;\n    dostuff([&]() {\n        x = y;\n    });\n    return x;\n}\n"
  "int f() {\n    int x = 1;\n    dostuff([&]() {\n        x = y;\n    });\n    return x;\n}\n" always "int f() {\n    int x = 1;\n    dostuff([&]() {\n        x = y;\n    });\n    return x;\n}\n"
Line 1975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1975 always 1975
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1975 always 1975
  6U always 6
  1 always 1
Line 1978
  = always "void f() {\n    int x = 8;\n    a = ((x > 10) ?\n        x : 0);\n}"
  "void f() {\n    int x = 8;\n    a = ((x > 10) ?\n        x : 0);\n}" always "void f() {\n    int x = 8;\n    a = ((x > 10) ?\n        x : 0);\n}"
Line 1983
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1983 always 1983
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1983 always 1983
  4U always 4
  8 always 8
Line 1985
  = always "void f() {\n    char *x = \"\";\n    a = ((x[0] == 'U') ?\n        x[1] : 0);\n}"
  "void f() {\n    char *x = \"\";\n    a = ((x[0] == 'U') ?\n        x[1] : 0);\n}" always "void f() {\n    char *x = \"\";\n    a = ((x[0] == 'U') ?\n        x[1] : 0);\n}"
Line 1990
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1990 always 1990
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  1990 always 1990
  4U always 4
  "\"\"" always "\"\""
Line 1992
  = always "void f() {\n    char *x = getenv (\"LC_ALL\");\n    if (x == NULL)\n        x = \"\";\n\n    if ( (x[0] == 'U') &&\n         (x[1] ?\n          x[3] :\n          x[2] ))\n    {}\n}\n"
  "void f() {\n    char *x = getenv (\"LC_ALL\");\n    if (x == NULL)\n        x = \"\";\n\n    if ( (x[0] == 'U') &&\n         (x[1] ?\n          x[3] :\n          x[2] ))\n    {}\n}\n" always "void f() {\n    char *x = getenv (\"LC_ALL\");\n    if (x == NULL)\n        x = \"\";\n\n    if ( (x[0] == 'U') &&\n         (x[1] ?\n          x[3] :\n          x[2] ))\n    {}\n}\n"
Line 2003
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2003 always 2003
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2003 always 2003
  6U always 6
  "\"\"" always "\"\""
Line 2004
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2004 always 2004
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2004 always 2004
  7U always 7
  "\"\"" always "\"\""
Line 2005
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2005 always 2005
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2005 always 2005
  8U always 8
  "\"\"" always "\"\""
Line 2006
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2006 always 2006
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2006 always 2006
  9U always 9
  "\"\"" always "\"\""
Line 2008
  = always "void f() {\n  t *x = 0;\n  y = (a ? 1 : x\n       && x->y ? 1 : 2);}"
  "void f() {\n  t *x = 0;\n  y = (a ? 1 : x\n       && x->y ? 1 : 2);}" always "void f() {\n  t *x = 0;\n  y = (a ? 1 : x\n       && x->y ? 1 : 2);}"
Line 2013
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2013 always 2013
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2013 always 2013
  3U always 3
  0 always 0
Line 2014
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2014 always 2014
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2014 always 2014
  4U always 4
  0 always 0
Line 2016
  = always "void f() {\n  t *x = 0;\n  y = (a ? 1 : !x\n       || x->y ? 1 : 2);}"
  "void f() {\n  t *x = 0;\n  y = (a ? 1 : !x\n       || x->y ? 1 : 2);}" always "void f() {\n  t *x = 0;\n  y = (a ? 1 : !x\n       || x->y ? 1 : 2);}"
Line 2021
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2021 always 2021
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2021 always 2021
  3U always 3
  0 always 0
Line 2022
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2022 always 2022
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2022 always 2022
  4U always 4
  0 always 0
Line 2025
  = always "void f() {\n    int x = 123;\n    if (condition) return;\n    a = 2 + x;\n}"
  "void f() {\n    int x = 123;\n    if (condition) return;\n    a = 2 + x;\n}" always "void f() {\n    int x = 123;\n    if (condition) return;\n    a = 2 + x;\n}"
Line 2030
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2030 always 2030
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2030 always 2030
  4U always 4
  123 always 123
Line 2032
  = always "void f() {\n    int x = 1;\n    if (condition) x = 2;\n    a = 2 + x;\n}"
  "void f() {\n    int x = 1;\n    if (condition) x = 2;\n    a = 2 + x;\n}" always "void f() {\n    int x = 1;\n    if (condition) x = 2;\n    a = 2 + x;\n}"
Line 2037
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2037 always 2037
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2037 always 2037
  4U always 4
  1 always 1
Line 2038
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2038 always 2038
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2038 always 2038
  4U always 4
  2 always 2
Line 2040
  = always "void f() {\n    int x = 123;\n    if (condition1) x = 456;\n    if (condition2) x = 789;\n    a = 2 + x;\n}"
  "void f() {\n    int x = 123;\n    if (condition1) x = 456;\n    if (condition2) x = 789;\n    a = 2 + x;\n}" always "void f() {\n    int x = 123;\n    if (condition1) x = 456;\n    if (condition2) x = 789;\n    a = 2 + x;\n}"
Line 2046
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2046 always 2046
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2046 always 2046
  5U always 5
  123 always 123
Line 2048
  = always "void f(int a) {\n    int x = 123;\n    if (a > 1)\n        ++x;\n    else\n        ++x;\n    return 2 + x;\n}"
  "void f(int a) {\n    int x = 123;\n    if (a > 1)\n        ++x;\n    else\n        ++x;\n    return 2 + x;\n}" always "void f(int a) {\n    int x = 123;\n    if (a > 1)\n        ++x;\n    else\n        ++x;\n    return 2 + x;\n}"
Line 2056
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2056 always 2056
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2056 always 2056
  4U always 4
  123 always 123
Line 2058
  = always "void f() {\n    int x = 1;\n    if (condition1) x = 2;\n    else return;\n    a = 2 + x;\n}"
  "void f() {\n    int x = 1;\n    if (condition1) x = 2;\n    else return;\n    a = 2 + x;\n}" always "void f() {\n    int x = 1;\n    if (condition1) x = 2;\n    else return;\n    a = 2 + x;\n}"
Line 2064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2064 always 2064
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2064 always 2064
  5U always 5
  1 always 1
Line 2066
  = always "void f(){\n    int x = 0;\n    if (a>=0) { x = getx(); }\n    if (x==0) { return; }\n    return 123 / x;\n}\n"
  "void f(){\n    int x = 0;\n    if (a>=0) { x = getx(); }\n    if (x==0) { return; }\n    return 123 / x;\n}\n" always "void f(){\n    int x = 0;\n    if (a>=0) { x = getx(); }\n    if (x==0) { return; }\n    return 123 / x;\n}\n"
Line 2072
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2072 always 2072
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2072 always 2072
  5U always 5
  0 always 0
Line 2074
  = always "void f() {\n  X *x = getx();\n  if(0) { x = 0; }\n  else { x->y = 1; }\n}"
  "void f() {\n  X *x = getx();\n  if(0) { x = 0; }\n  else { x->y = 1; }\n}" always "void f() {\n  X *x = getx();\n  if(0) { x = 0; }\n  else { x->y = 1; }\n}"
Line 2079
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2079 always 2079
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2079 always 2079
  4U always 4
  0 always 0
Line 2081
  = always "void f() {\n  int x = 4;\n  if(1) { x = 0; }\n  a = x;\n}"
  "void f() {\n  int x = 4;\n  if(1) { x = 0; }\n  a = x;\n}" always "void f() {\n  int x = 4;\n  if(1) { x = 0; }\n  a = x;\n}"
Line 2086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2086 always 2086
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2086 always 2086
  4U always 4
  4 always 4
Line 2088
  = always "void f() {\n    int x = 32;\n    if (x>=32) return;\n    a[x]=0;\n}"
  "void f() {\n    int x = 32;\n    if (x>=32) return;\n    a[x]=0;\n}" always "void f() {\n    int x = 32;\n    if (x>=32) return;\n    a[x]=0;\n}"
Line 2093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2093 always 2093
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2093 always 2093
  4U always 4
  32 always 32
Line 2095
  = always "void f() {\n    int x = 32;\n    if (x>=32) {\n        a[x] = 0;\n        return;\n    }\n}"
  "void f() {\n    int x = 32;\n    if (x>=32) {\n        a[x] = 0;\n        return;\n    }\n}" always "void f() {\n    int x = 32;\n    if (x>=32) {\n        a[x] = 0;\n        return;\n    }\n}"
Line 2102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2102 always 2102
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2102 always 2102
  4U always 4
  32 always 32
Line 2104
  = always "void f() {\n    int x = 33;\n    if (x==33) goto fail;\n    a[x]=0;\nfail:\n}"
  "void f() {\n    int x = 33;\n    if (x==33) goto fail;\n    a[x]=0;\nfail:\n}" always "void f() {\n    int x = 33;\n    if (x==33) goto fail;\n    a[x]=0;\nfail:\n}"
Line 2110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2110 always 2110
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2110 always 2110
  4U always 4
  33 always 33
Line 2112
  = always "void f() {\n    int x = 32;\n    if (a==1) { z=x+12; }\n    if (a==2) { z=x+32; }\n    z = x;\n}"
  "void f() {\n    int x = 32;\n    if (a==1) { z=x+12; }\n    if (a==2) { z=x+32; }\n    z = x;\n}" always "void f() {\n    int x = 32;\n    if (a==1) { z=x+12; }\n    if (a==2) { z=x+32; }\n    z = x;\n}"
Line 2118
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2118 always 2118
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2118 always 2118
  3U always 3
  32 always 32
Line 2119
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2119 always 2119
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2119 always 2119
  4U always 4
  32 always 32
Line 2120
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2120 always 2120
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2120 always 2120
  5U always 5
  32 always 32
Line 2122
  = always "void f() {\n    int x = 0;\n    if (!x) {\n        x = getx();\n    }\n    y = x;\n}"
  "void f() {\n    int x = 0;\n    if (!x) {\n        x = getx();\n    }\n    y = x;\n}" always "void f() {\n    int x = 0;\n    if (!x) {\n        x = getx();\n    }\n    y = x;\n}"
Line 2129
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2129 always 2129
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2129 always 2129
  6U always 6
  0 always 0
Line 2131
  = always "void f(int y) {\n  int x = y;\n  if (y == 54) {}\n  else { a = x; }\n}"
  "void f(int y) {\n  int x = y;\n  if (y == 54) {}\n  else { a = x; }\n}" always "void f(int y) {\n  int x = y;\n  if (y == 54) {}\n  else { a = x; }\n}"
Line 2136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2136 always 2136
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2136 always 2136
  4U always 4
  54 always 54
Line 2138
  = always "void f () {\n    ST * x =  g_pST;\n    if (x->y == 0) {\n        x = NULL;\n        return 1;\n    }\n    a = x->y;\n}"
  "void f () {\n    ST * x =  g_pST;\n    if (x->y == 0) {\n        x = NULL;\n        return 1;\n    }\n    a = x->y;\n}" always "void f () {\n    ST * x =  g_pST;\n    if (x->y == 0) {\n        x = NULL;\n        return 1;\n    }\n    a = x->y;\n}"
Line 2146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2146 always 2146
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2146 always 2146
  7U always 7
  0 always 0
Line 2148
  = always "void f () {\n    ST * x =  g_pST;\n    if (x->y == 0) {\n        x = NULL;\n        goto label;\n    }\n    a = x->y;\nlabel:\n}"
  "void f () {\n    ST * x =  g_pST;\n    if (x->y == 0) {\n        x = NULL;\n        goto label;\n    }\n    a = x->y;\nlabel:\n}" always "void f () {\n    ST * x =  g_pST;\n    if (x->y == 0) {\n        x = NULL;\n        goto label;\n    }\n    a = x->y;\nlabel:\n}"
Line 2157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2157 always 2157
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2157 always 2157
  7U always 7
  0 always 0
Line 2159
  = always "void f() {\n    int *x = 0;\n    if (x && *x == 123) {\n        getx(*x);\n    }\n}"
  "void f() {\n    int *x = 0;\n    if (x && *x == 123) {\n        getx(*x);\n    }\n}" always "void f() {\n    int *x = 0;\n    if (x && *x == 123) {\n        getx(*x);\n    }\n}"
Line 2165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2165 always 2165
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2165 always 2165
  4U always 4
  0 always 0
Line 2167
  = always "void f() {\n    int x = 0;\n    if (!x) {}\n    else { y = x; }\n}"
  "void f() {\n    int x = 0;\n    if (!x) {}\n    else { y = x; }\n}" always "void f() {\n    int x = 0;\n    if (!x) {}\n    else { y = x; }\n}"
Line 2172
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2172 always 2172
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2172 always 2172
  4U always 4
  0 always 0
Line 2174
  = always "void f() {\n    int x = 0;\n    x = x & 0x1;\n    if (x == 0) { x = 2; }\n    y = 42 / x;\n}"
  "void f() {\n    int x = 0;\n    x = x & 0x1;\n    if (x == 0) { x = 2; }\n    y = 42 / x;\n}" always "void f() {\n    int x = 0;\n    x = x & 0x1;\n    if (x == 0) { x = 2; }\n    y = 42 / x;\n}"
Line 2180
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2180 always 2180
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2180 always 2180
  5U always 5
  0 always 0
Line 2181
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2181 always 2181
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2181 always 2181
  5U always 5
  2 always 2
Line 2183
  = always "void f() {\n    int x = 0;\n    x = x & 0x1;\n    if (x == 0) { x += 2; }\n    y = 42 / x;\n}"
  "void f() {\n    int x = 0;\n    x = x & 0x1;\n    if (x == 0) { x += 2; }\n    y = 42 / x;\n}" always "void f() {\n    int x = 0;\n    x = x & 0x1;\n    if (x == 0) { x += 2; }\n    y = 42 / x;\n}"
Line 2189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2189 always 2189
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2189 always 2189
  5U always 5
  0 always 0
Line 2190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2190 always 2190
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2190 always 2190
  5U always 5
  2 always 2
Line 2192
  = always "void f(int mode) {\n    struct ABC *x;\n\n    if (mode) { x = &y; }\n    else { x = NULL; }\n\n    if (!x) exit(1);\n\n    a = x->a;\n}"
  "void f(int mode) {\n    struct ABC *x;\n\n    if (mode) { x = &y; }\n    else { x = NULL; }\n\n    if (!x) exit(1);\n\n    a = x->a;\n}" always "void f(int mode) {\n    struct ABC *x;\n\n    if (mode) { x = &y; }\n    else { x = NULL; }\n\n    if (!x) exit(1);\n\n    a = x->a;\n}"
Line 2202
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2202 always 2202
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2202 always 2202
  9U always 9
  0 always 0
Line 2204
  = always "void f(int i) {\n    bool x = false;\n    if (i == 0) { x = true; }\n    else if (x && i == 1) {}\n}\n"
  "void f(int i) {\n    bool x = false;\n    if (i == 0) { x = true; }\n    else if (x && i == 1) {}\n}\n" always "void f(int i) {\n    bool x = false;\n    if (i == 0) { x = true; }\n    else if (x && i == 1) {}\n}\n"
Line 2209
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2209 always 2209
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2209 always 2209
  4U always 4
  0 always 0
Line 2211
  = always "void f(int i) {\n    bool x = false;\n    while(i > 0) {\n        i++;\n        if (i == 0) { x = true; }\n        else if (x && i == 1) {}\n    }\n}\n"
  "void f(int i) {\n    bool x = false;\n    while(i > 0) {\n        i++;\n        if (i == 0) { x = true; }\n        else if (x && i == 1) {}\n    }\n}\n" always "void f(int i) {\n    bool x = false;\n    while(i > 0) {\n        i++;\n        if (i == 0) { x = true; }\n        else if (x && i == 1) {}\n    }\n}\n"
Line 2219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2219 always 2219
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2219 always 2219
  6U always 6
  0 always 0
Line 2222
  = always "void f(int a) {\n    int x = a;\n    if (a!=132) { b = x; }\n}"
  "void f(int a) {\n    int x = a;\n    if (a!=132) { b = x; }\n}" always "void f(int a) {\n    int x = a;\n    if (a!=132) { b = x; }\n}"
Line 2226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2226 always 2226
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2226 always 2226
  3U always 3
  132 always 132
Line 2228
  = always "void f(int a) {\n    int x = a;\n    b = x;\n    if (a!=132) {}\n}"
  "void f(int a) {\n    int x = a;\n    b = x;\n    if (a!=132) {}\n}" always "void f(int a) {\n    int x = a;\n    b = x;\n    if (a!=132) {}\n}"
Line 2233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2233 always 2233
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2233 always 2233
  3U always 3
  132 always 132
Line 2235
  = always "void f() {\n    int a;\n    if (n) { a = n; }\n    else { a = 0; }\n    int x = a;\n    if (a > 0) { a = b / x; }\n}"
  "void f() {\n    int a;\n    if (n) { a = n; }\n    else { a = 0; }\n    int x = a;\n    if (a > 0) { a = b / x; }\n}" always "void f() {\n    int a;\n    if (n) { a = n; }\n    else { a = 0; }\n    int x = a;\n    if (a > 0) { a = b / x; }\n}"
Line 2242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2242 always 2242
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2242 always 2242
  6U always 6
  0 always 0
Line 2244
  = always "void f(int x1) {\n  int x = x1;\n  if (x1 >= 3) {\n    return;\n  }\n  a = x;\n}"
  "void f(int x1) {\n  int x = x1;\n  if (x1 >= 3) {\n    return;\n  }\n  a = x;\n}" always "void f(int x1) {\n  int x = x1;\n  if (x1 >= 3) {\n    return;\n  }\n  a = x;\n}"
Line 2251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2251 always 2251
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2251 always 2251
  6U always 6
  3 always 3
Line 2253
  = always "int f(int *x) {\n  if (!x) {\n    switch (i) {\n      default:\n        throw std::runtime_error(msg);\n    };\n  }\n  return *x;\n}"
  "int f(int *x) {\n  if (!x) {\n    switch (i) {\n      default:\n        throw std::runtime_error(msg);\n    };\n  }\n  return *x;\n}" always "int f(int *x) {\n  if (!x) {\n    switch (i) {\n      default:\n        throw std::runtime_error(msg);\n    };\n  }\n  return *x;\n}"
Line 2262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2262 always 2262
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2262 always 2262
  8U always 8
  0 always 0
Line 2264
  = always "void f(int a) {\n    int x = a ? a : 87;\n    if (a && x) {}\n}"
  "void f(int a) {\n    int x = a ? a : 87;\n    if (a && x) {}\n}" always "void f(int a) {\n    int x = a ? a : 87;\n    if (a && x) {}\n}"
Line 2268
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2268 always 2268
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2268 always 2268
  3U always 3
  87 always 87
Line 2270
  = always "void f() {\n  int first=-1, x=0;\n  do {\n    if (first >= 0) { a = x; }\n    first++; x=3;\n  } while (1);\n}"
  "void f() {\n  int first=-1, x=0;\n  do {\n    if (first >= 0) { a = x; }\n    first++; x=3;\n  } while (1);\n}" always "void f() {\n  int first=-1, x=0;\n  do {\n    if (first >= 0) { a = x; }\n    first++; x=3;\n  } while (1);\n}"
Line 2277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2277 always 2277
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2277 always 2277
  4U always 4
  0 always 0
Line 2278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2278 always 2278
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2278 always 2278
  4U always 4
  3 always 3
Line 2281
  = always "int f(void) {\n  int x = 2;\n  int *px = &x;\n  for (int i = 0; i < 1; i++) {\n    *px = 1;\n  }\n  return x;\n}"
  "int f(void) {\n  int x = 2;\n  int *px = &x;\n  for (int i = 0; i < 1; i++) {\n    *px = 1;\n  }\n  return x;\n}" always "int f(void) {\n  int x = 2;\n  int *px = &x;\n  for (int i = 0; i < 1; i++) {\n    *px = 1;\n  }\n  return x;\n}"
Line 2289
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2289 always 2289
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2289 always 2289
  7U always 7
  2 always 2
Line 2291
  = always "int f(void) {\n  int x = 5;\n  int &rx = x;\n  for (int i = 0; i < 1; i++) {\n    rx = 1;\n  }\n  return x;\n}"
  "int f(void) {\n  int x = 5;\n  int &rx = x;\n  for (int i = 0; i < 1; i++) {\n    rx = 1;\n  }\n  return x;\n}" always "int f(void) {\n  int x = 5;\n  int &rx = x;\n  for (int i = 0; i < 1; i++) {\n    rx = 1;\n  }\n  return x;\n}"
Line 2299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2299 always 2299
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2299 always 2299
  7U always 7
  5 always 5
Line 2302
  = always "void f() {\n  for (;;) {\n    int x = 1;\n    if (!abc()) {\n      x = 2;\n      break;\n    }\n    a = x;\n  }\n}\n"
  "void f() {\n  for (;;) {\n    int x = 1;\n    if (!abc()) {\n      x = 2;\n      break;\n    }\n    a = x;\n  }\n}\n" always "void f() {\n  for (;;) {\n    int x = 1;\n    if (!abc()) {\n      x = 2;\n      break;\n    }\n    a = x;\n  }\n}\n"
Line 2312
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2312 always 2312
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2312 always 2312
  8U always 8
  2 always 2
Line 2314
  = always "void f() {\n  int x;\n  switch (ab) {\n    case A: x = 12; break;\n    case B: x = 34; break;\n  }\n  v = x;\n}"
  "void f() {\n  int x;\n  switch (ab) {\n    case A: x = 12; break;\n    case B: x = 34; break;\n  }\n  v = x;\n}" always "void f() {\n  int x;\n  switch (ab) {\n    case A: x = 12; break;\n    case B: x = 34; break;\n  }\n  v = x;\n}"
Line 2322
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2322 always 2322
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2322 always 2322
  7U always 7
  12 always 12
Line 2323
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2323 always 2323
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2323 always 2323
  7U always 7
  34 always 34
Line 2325
  = always "void f() {\n  int x;\n  switch (ab) {\n    case A: x = 12; break;\n    case B: x = 34; break;\n  }\n  switch (ab) {\n    case A: v = x; break;\n  }\n}"
  "void f() {\n  int x;\n  switch (ab) {\n    case A: x = 12; break;\n    case B: x = 34; break;\n  }\n  switch (ab) {\n    case A: v = x; break;\n  }\n}" always "void f() {\n  int x;\n  switch (ab) {\n    case A: x = 12; break;\n    case B: x = 34; break;\n  }\n  switch (ab) {\n    case A: v = x; break;\n  }\n}"
Line 2335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2335 always 2335
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2335 always 2335
  8U always 8
  34 always 34
Line 2338
  = always "void f() {\n  ENTRY *x = 0;\n  while (x = get()) {\n    set(x->value);\n  }\n}\n"
  "void f() {\n  ENTRY *x = 0;\n  while (x = get()) {\n    set(x->value);\n  }\n}\n" always "void f() {\n  ENTRY *x = 0;\n  while (x = get()) {\n    set(x->value);\n  }\n}\n"
Line 2344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2344 always 2344
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2344 always 2344
  4U always 4
  0 always 0
Line 2346
  = always "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n"
  "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n" always "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n"
Line 2356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2356 always 2356
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2356 always 2356
  9U always 9
  0 always 0
Line 2358
  = always "void f(const int *buf) {\n  int x = 111;\n  bool found = false;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  if (found)\n    a = x;\n}\n"
  "void f(const int *buf) {\n  int x = 111;\n  bool found = false;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  if (found)\n    a = x;\n}\n" always "void f(const int *buf) {\n  int x = 111;\n  bool found = false;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  if (found)\n    a = x;\n}\n"
Line 2371
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2371 always 2371
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2371 always 2371
  12U always 12
  111 always 111
Line 2373
  = always "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      ;\n    }\n  }\n  a = x;\n}\n"
  "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      ;\n    }\n  }\n  a = x;\n}\n" always "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      ;\n    }\n  }\n  a = x;\n}\n"
Line 2383
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2383 always 2383
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2383 always 2383
  9U always 9
  0 always 0
Line 2384
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2384 always 2384
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2384 always 2384
  9U always 9
  0 always 0
Line 2386
  = always "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      ;\n    } else {\n      x = 1;\n    }\n  }\n  a = x;\n}\n"
  "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      ;\n    } else {\n      x = 1;\n    }\n  }\n  a = x;\n}\n" always "void f(const int *buf) {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (buf[i] == 123) {\n      x = i;\n      ;\n    } else {\n      x = 1;\n    }\n  }\n  a = x;\n}\n"
Line 2398
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2398 always 2398
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2398 always 2398
  11U always 11
  0 always 0
Line 2400
  = always "void f(const int *buf) {\n  int i = 0;\n  int x = 0;\n  while (++i < 10) {\n    if (buf[i] == 123) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n"
  "void f(const int *buf) {\n  int i = 0;\n  int x = 0;\n  while (++i < 10) {\n    if (buf[i] == 123) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n" always "void f(const int *buf) {\n  int i = 0;\n  int x = 0;\n  while (++i < 10) {\n    if (buf[i] == 123) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n"
Line 2411
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2411 always 2411
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2411 always 2411
  10U always 10
  0 always 0
Line 2413
  = always "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n    }\n  }\n  a = x;\n}\n"
  "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n    }\n  }\n  a = x;\n}\n" always "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n    }\n  }\n  a = x;\n}\n"
Line 2425
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2425 always 2425
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2425 always 2425
  11U always 11
  0 always 0
Line 2427
  = always "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n    } else {\n      found = false;\n    }\n  }\n  a = x;\n}\n"
  "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n    } else {\n      found = false;\n    }\n  }\n  a = x;\n}\n" always "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n    } else {\n      found = false;\n    }\n  }\n  a = x;\n}\n"
Line 2441
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2441 always 2441
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2441 always 2441
  13U always 13
  0 always 0
Line 2443
  = always "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n"
  "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n" always "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      break;\n    }\n  }\n  a = x;\n}\n"
Line 2455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2455 always 2455
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2455 always 2455
  11U always 11
  0 always 0
Line 2457
  = always "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  a = x;\n}\n"
  "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  a = x;\n}\n" always "bool maybe();\nvoid f() {\n  int x = 0;\n  bool found = false;\n  while(!found) {\n    if (maybe()) {\n      x = i;\n      found = true;\n      break;\n    }\n  }\n  a = x;\n}\n"
Line 2470
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2470 always 2470
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2470 always 2470
  12U always 12
  0 always 0
Line 2472
  = always "void f(const int a[]) {\n  const int *x = 0;\n  for (int i = 0; i < 10; i = *x) {\n    x = a[i];\n  }\n}\n"
  "void f(const int a[]) {\n  const int *x = 0;\n  for (int i = 0; i < 10; i = *x) {\n    x = a[i];\n  }\n}\n" always "void f(const int a[]) {\n  const int *x = 0;\n  for (int i = 0; i < 10; i = *x) {\n    x = a[i];\n  }\n}\n"
Line 2478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2478 always 2478
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2478 always 2478
  3U always 3
  0 always 0
Line 2481
  = always "void f() {\n  int x = 0;\n  int *p = &x;\n  x = 3;\n  *p = 2;\n  a = x;\n}\n"
  "void f() {\n  int x = 0;\n  int *p = &x;\n  x = 3;\n  *p = 2;\n  a = x;\n}\n" always "void f() {\n  int x = 0;\n  int *p = &x;\n  x = 3;\n  *p = 2;\n  a = x;\n}\n"
Line 2488
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2488 always 2488
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2488 always 2488
  6U always 6
  3 always 3
Line 2489
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2489 always 2489
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2489 always 2489
  6U always 6
  2 always 2
Line 2491
  = always "struct Fred {\n    static void Create(std::unique_ptr<Wilma> wilma);\n    Fred(std::unique_ptr<Wilma> wilma);\n    std::unique_ptr<Wilma> mWilma;\n};\nvoid Fred::Create(std::unique_ptr<Wilma> wilma) {\n    auto fred = std::make_shared<Fred>(std::move(wilma));\n    fred->mWilma.reset();\n}\nFred::Fred(std::unique_ptr<Wilma> wilma)\n    : mWilma(std::move(wilma)) {}\n"
  "struct Fred {\n    static void Create(std::unique_ptr<Wilma> wilma);\n    Fred(std::unique_ptr<Wilma> wilma);\n    std::unique_ptr<Wilma> mWilma;\n};\nvoid Fred::Create(std::unique_ptr<Wilma> wilma) {\n    auto fred = std::make_shared<Fred>(std::move(wilma));\n    fred->mWilma.reset();\n}\nFred::Fred(std::unique_ptr<Wilma> wilma)\n    : mWilma(std::move(wilma)) {}\n" always "struct Fred {\n    static void Create(std::unique_ptr<Wilma> wilma);\n    Fred(std::unique_ptr<Wilma> wilma);\n    std::unique_ptr<Wilma> mWilma;\n};\nvoid Fred::Create(std::unique_ptr<Wilma> wilma) {\n    auto fred = std::make_shared<Fred>(std::move(wilma));\n    fred->mWilma.reset();\n}\nFred::Fred(std::unique_ptr<Wilma> wilma)\n    : mWilma(std::move(wilma)) {}\n"
Line 2502
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2502 always 2502
  0 always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2502 always 2502
  "mWilma (" always "mWilma ("
  ( always !<=-1
Line 2504
  = always "void g(unknown*);\nint f() {\n    int a = 1;\n    unknown c[] = {{&a}};\n    g(c);\n    int x = a;\n    return x;\n}\n"
  "void g(unknown*);\nint f() {\n    int a = 1;\n    unknown c[] = {{&a}};\n    g(c);\n    int x = a;\n    return x;\n}\n" always "void g(unknown*);\nint f() {\n    int a = 1;\n    unknown c[] = {{&a}};\n    g(c);\n    int x = a;\n    return x;\n}\n"
Line 2512
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2512 always 2512
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2512 always 2512
  7U always 7
  1 always 1
Line 2513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2513 always 2513
  true always 1
  ( always {!<=-1,!>=2}
  7U always 7
  1 always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2513 always 2513
Line 2515
  = always "void g(unknown&);\nint f() {\n    int a = 1;\n    unknown c{&a};\n    g(c);\n    int x = a;\n    return x;\n}\n"
  "void g(unknown&);\nint f() {\n    int a = 1;\n    unknown c{&a};\n    g(c);\n    int x = a;\n    return x;\n}\n" always "void g(unknown&);\nint f() {\n    int a = 1;\n    unknown c{&a};\n    g(c);\n    int x = a;\n    return x;\n}\n"
Line 2523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2523 always 2523
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2523 always 2523
  7U always 7
  1 always 1
Line 2524
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2524 always 2524
  true always 1
  ( always {!<=-1,!>=2}
  7U always 7
  1 always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2524 always 2524
Line 2526
  = always "long foo();\nlong bar();\nint test() {\n  bool b = true;\n  long a = foo();\n  if (a != 0)\n    return 1;\n  a = bar();\n  if (a != 0)\n    b = false;\n  int x = b;\n  return x;\n}\n"
  "long foo();\nlong bar();\nint test() {\n  bool b = true;\n  long a = foo();\n  if (a != 0)\n    return 1;\n  a = bar();\n  if (a != 0)\n    b = false;\n  int x = b;\n  return x;\n}\n" always "long foo();\nlong bar();\nint test() {\n  bool b = true;\n  long a = foo();\n  if (a != 0)\n    return 1;\n  a = bar();\n  if (a != 0)\n    b = false;\n  int x = b;\n  return x;\n}\n"
Line 2539
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2539 always 2539
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2539 always 2539
  12U always 12
  0 always 0
Line 2540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2540 always 2540
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2540 always 2540
  12U always 12
  0 always 0
Line 2542
  = always "bool f(unsigned char uc) {\n  const bool x = uc;\n  return x;\n}\n"
  "bool f(unsigned char uc) {\n  const bool x = uc;\n  return x;\n}\n" always "bool f(unsigned char uc) {\n  const bool x = uc;\n  return x;\n}\n"
Line 2546
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2546 always 2546
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2546 always 2546
  3U always 3
  -1 always -1
Line 2547
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2547 always 2547
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2547 always 2547
  3U always 3
  1 always 1
Line 2548
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2548 always 2548
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2548 always 2548
  3U always 3
  0 always 0
Line 2549
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2549 always 2549
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2549 always 2549
  3U always 3
  0 always 0
Line 2550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2550 always 2550
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2550 always 2550
  3U always 3
  1 always 1
Line 2552
  = always "struct A {\n    int i, j;\n    int foo() {\n        i = 1;\n        j = 2;\n        int x = i;\n        return x;\n    }\n};\n"
  "struct A {\n    int i, j;\n    int foo() {\n        i = 1;\n        j = 2;\n        int x = i;\n        return x;\n    }\n};\n" always "struct A {\n    int i, j;\n    int foo() {\n        i = 1;\n        j = 2;\n        int x = i;\n        return x;\n    }\n};\n"
Line 2561
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2561 always 2561
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2561 always 2561
  7U always 7
  1 always 1
Line 2564
  = always "int x;\nint foo(int y) {\n  if (y)\n    x = 10;\n  return x;\n}"
  "int x;\nint foo(int y) {\n  if (y)\n    x = 10;\n  return x;\n}" always "int x;\nint foo(int y) {\n  if (y)\n    x = 10;\n  return x;\n}"
Line 2570
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2570 always 2570
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2570 always 2570
  5U always 5
  10 always 10
Line 2572
  = always "namespace A { int x; }\nint foo(int y) {\n  if (y)\n    A::x = 10;\n  return A::x;\n}"
  "namespace A { int x; }\nint foo(int y) {\n  if (y)\n    A::x = 10;\n  return A::x;\n}" always "namespace A { int x; }\nint foo(int y) {\n  if (y)\n    A::x = 10;\n  return A::x;\n}"
Line 2578
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2578 always 2578
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2578 always 2578
  5U always 5
  10 always 10
Line 2581
  = always "struct Fred {\n  int x;\n  int foo(int y) {\n    if (y)\n      x = 10;\n    return x;\n  }\n};"
  "struct Fred {\n  int x;\n  int foo(int y) {\n    if (y)\n      x = 10;\n    return x;\n  }\n};" always "struct Fred {\n  int x;\n  int foo(int y) {\n    if (y)\n      x = 10;\n    return x;\n  }\n};"
Line 2589
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2589 always 2589
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2589 always 2589
  6U always 6
  10 always 10
Line 2596
  = always "int f() {\n    int a = 1;\n    int b = 2;\n    std::swap(a, b);\n    int x = a;\n    return x;\n}"
  "int f() {\n    int a = 1;\n    int b = 2;\n    std::swap(a, b);\n    int x = a;\n    return x;\n}" always "int f() {\n    int a = 1;\n    int b = 2;\n    std::swap(a, b);\n    int x = a;\n    return x;\n}"
Line 2603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2603 always 2603
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2603 always 2603
  code always "int f() {\n    int a = 1;\n    int b = 2;\n    std::swap(a, b);\n    int x = a;\n    return x;\n}"
  6U always 6
  2 always 2
Line 2604
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2604 always 2604
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2604 always 2604
  6U always 6
  1 always 1
Line 2606
  = always "int f() {\n    int a = 1;\n    int b = 2;\n    std::swap(a, b);\n    int x = b;\n    return x;\n}"
  "int f() {\n    int a = 1;\n    int b = 2;\n    std::swap(a, b);\n    int x = b;\n    return x;\n}" always "int f() {\n    int a = 1;\n    int b = 2;\n    std::swap(a, b);\n    int x = b;\n    return x;\n}"
Line 2613
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2613 always 2613
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2613 always 2613
  code always "int f() {\n    int a = 1;\n    int b = 2;\n    std::swap(a, b);\n    int x = b;\n    return x;\n}"
  6U always 6
  1 always 1
Line 2614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2614 always 2614
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2614 always 2614
  6U always 6
  2 always 2
Line 2620
  = always "void f(int x) {\n    if (x == 123) {\n        a = x;\n    }\n}"
  "void f(int x) {\n    if (x == 123) {\n        a = x;\n    }\n}" always "void f(int x) {\n    if (x == 123) {\n        a = x;\n    }\n}"
Line 2625
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2625 always 2625
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2625 always 2625
  code always "void f(int x) {\n    if (x == 123) {\n        a = x;\n    }\n}"
  3U always 3
  123 always 123
Line 2627
  = always "void f(int x) {\n    if (x != 123) {\n        a = x;\n    }\n}"
  "void f(int x) {\n    if (x != 123) {\n        a = x;\n    }\n}" always "void f(int x) {\n    if (x != 123) {\n        a = x;\n    }\n}"
Line 2632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2632 always 2632
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2632 always 2632
  code always "void f(int x) {\n    if (x != 123) {\n        a = x;\n    }\n}"
  3U always 3
  123 always 123
Line 2634
  = always "void f(int x) {\n    if (x > 123) {\n        a = x;\n    }\n}"
  "void f(int x) {\n    if (x > 123) {\n        a = x;\n    }\n}" always "void f(int x) {\n    if (x > 123) {\n        a = x;\n    }\n}"
Line 2639
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2639 always 2639
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2639 always 2639
  code always "void f(int x) {\n    if (x > 123) {\n        a = x;\n    }\n}"
  3U always 3
  124 always 124
Line 2640
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2640 always 2640
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2640 always 2640
  3U always 3
  123 always 123
Line 2642
  = always "void f(int x) {\n    if (x < 123) {\n        a = x;\n    }\n}"
  "void f(int x) {\n    if (x < 123) {\n        a = x;\n    }\n}" always "void f(int x) {\n    if (x < 123) {\n        a = x;\n    }\n}"
Line 2647
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2647 always 2647
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2647 always 2647
  code always "void f(int x) {\n    if (x < 123) {\n        a = x;\n    }\n}"
  3U always 3
  122 always 122
Line 2648
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2648 always 2648
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2648 always 2648
  3U always 3
  123 always 123
Line 2652
  = always "void f(int x) {\n    if (123 < x) {\n        a = x;\n    }\n}"
  "void f(int x) {\n    if (123 < x) {\n        a = x;\n    }\n}" always "void f(int x) {\n    if (123 < x) {\n        a = x;\n    }\n}"
Line 2657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2657 always 2657
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2657 always 2657
  code always "void f(int x) {\n    if (123 < x) {\n        a = x;\n    }\n}"
  3U always 3
  124 always 124
Line 2658
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2658 always 2658
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2658 always 2658
  3U always 3
  123 always 123
Line 2660
  = always "void f(int x) {\n    if (123 > x) {\n        a = x;\n    }\n}"
  "void f(int x) {\n    if (123 > x) {\n        a = x;\n    }\n}" always "void f(int x) {\n    if (123 > x) {\n        a = x;\n    }\n}"
Line 2665
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2665 always 2665
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2665 always 2665
  code always "void f(int x) {\n    if (123 > x) {\n        a = x;\n    }\n}"
  3U always 3
  122 always 122
Line 2666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2666 always 2666
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2666 always 2666
  3U always 3
  123 always 123
Line 2669
  = always "void f(int x) {\n    if (x == 123) {}\n    else a = x;\n}"
  "void f(int x) {\n    if (x == 123) {}\n    else a = x;\n}" always "void f(int x) {\n    if (x == 123) {}\n    else a = x;\n}"
Line 2673
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2673 always 2673
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2673 always 2673
  code always "void f(int x) {\n    if (x == 123) {}\n    else a = x;\n}"
  3U always 3
  123 always 123
Line 2675
  = always "void f(int x) {\n    if (x != 123) {}\n    else a = x;\n}"
  "void f(int x) {\n    if (x != 123) {}\n    else a = x;\n}" always "void f(int x) {\n    if (x != 123) {}\n    else a = x;\n}"
Line 2679
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2679 always 2679
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2679 always 2679
  code always "void f(int x) {\n    if (x != 123) {}\n    else a = x;\n}"
  3U always 3
  123 always 123
Line 2682
  = always "void f(int x) {\n    if (x == 10) {\n        x++;\n    }\n    a = x;\n}"
  "void f(int x) {\n    if (x == 10) {\n        x++;\n    }\n    a = x;\n}" always "void f(int x) {\n    if (x == 10) {\n        x++;\n    }\n    a = x;\n}"
Line 2688
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2688 always 2688
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2688 always 2688
  code always "void f(int x) {\n    if (x == 10) {\n        x++;\n    }\n    a = x;\n}"
  5U always 5
  10 always 10
Line 2689
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2689 always 2689
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2689 always 2689
  5U always 5
  11 always 11
Line 2692
  = always "void f(int x) {\n    if (!x) { a = x; }\n    else a = x;\n}"
  "void f(int x) {\n    if (!x) { a = x; }\n    else a = x;\n}" always "void f(int x) {\n    if (!x) { a = x; }\n    else a = x;\n}"
Line 2696
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2696 always 2696
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2696 always 2696
  code always "void f(int x) {\n    if (!x) { a = x; }\n    else a = x;\n}"
  2U always 2
  0 always 0
Line 2698
  = always "void f(int x, int y) {\n    if (!(x&&y)) { return; }\n    a = x;\n}"
  "void f(int x, int y) {\n    if (!(x&&y)) { return; }\n    a = x;\n}" always "void f(int x, int y) {\n    if (!(x&&y)) { return; }\n    a = x;\n}"
Line 2702
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2702 always 2702
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2702 always 2702
  code always "void f(int x, int y) {\n    if (!(x&&y)) { return; }\n    a = x;\n}"
  3U always 3
  0 always 0
Line 2704
  = always "void f(int x) {\n    if (!x) { { throw new string(); }; }\n    a = x;\n}"
  "void f(int x) {\n    if (!x) { { throw new string(); }; }\n    a = x;\n}" always "void f(int x) {\n    if (!x) { { throw new string(); }; }\n    a = x;\n}"
Line 2708
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2708 always 2708
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2708 always 2708
  code always "void f(int x) {\n    if (!x) { { throw new string(); }; }\n    a = x;\n}"
  3U always 3
  0 always 0
Line 2710
  = always "void f(int x) {\n    if (x != 123) { throw ; }\n    a = x;\n}"
  "void f(int x) {\n    if (x != 123) { throw ; }\n    a = x;\n}" always "void f(int x) {\n    if (x != 123) { throw ; }\n    a = x;\n}"
Line 2714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2714 always 2714
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2714 always 2714
  code always "void f(int x) {\n    if (x != 123) { throw ; }\n    a = x;\n}"
  3U always 3
  123 always 123
Line 2716
  = always "void f(int x) {\n    if (x != 123) { }\n    else { throw ; }\n    a = x;\n}"
  "void f(int x) {\n    if (x != 123) { }\n    else { throw ; }\n    a = x;\n}" always "void f(int x) {\n    if (x != 123) { }\n    else { throw ; }\n    a = x;\n}"
Line 2721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2721 always 2721
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2721 always 2721
  code always "void f(int x) {\n    if (x != 123) { }\n    else { throw ; }\n    a = x;\n}"
  4U always 4
  123 always 123
Line 2722
  = always "void f(int x) {\n    if (x == 123) { }\n    else { throw ; }\n    a = x;\n}"
  "void f(int x) {\n    if (x == 123) { }\n    else { throw ; }\n    a = x;\n}" always "void f(int x) {\n    if (x == 123) { }\n    else { throw ; }\n    a = x;\n}"
Line 2727
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2727 always 2727
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2727 always 2727
  code always "void f(int x) {\n    if (x == 123) { }\n    else { throw ; }\n    a = x;\n}"
  4U always 4
  123 always 123
Line 2730
  = always "void f(int x) {\n    if (x < 123) { }\n    else { a = x; }\n}"
  "void f(int x) {\n    if (x < 123) { }\n    else { a = x; }\n}" always "void f(int x) {\n    if (x < 123) { }\n    else { a = x; }\n}"
Line 2734
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2734 always 2734
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2734 always 2734
  code always "void f(int x) {\n    if (x < 123) { }\n    else { a = x; }\n}"
  3U always 3
  123 always 123
Line 2736
  = always "void f(int x) {\n    if (x < 123) { throw \"\"; }\n    a = x;\n}"
  "void f(int x) {\n    if (x < 123) { throw \"\"; }\n    a = x;\n}" always "void f(int x) {\n    if (x < 123) { throw \"\"; }\n    a = x;\n}"
Line 2740
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2740 always 2740
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2740 always 2740
  code always "void f(int x) {\n    if (x < 123) { throw \"\"; }\n    a = x;\n}"
  3U always 3
  123 always 123
Line 2742
  = always "void f(int x) {\n    if (x < 123) { }\n    else { throw \"\"; }\n    a = x;\n}"
  "void f(int x) {\n    if (x < 123) { }\n    else { throw \"\"; }\n    a = x;\n}" always "void f(int x) {\n    if (x < 123) { }\n    else { throw \"\"; }\n    a = x;\n}"
Line 2747
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2747 always 2747
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2747 always 2747
  code always "void f(int x) {\n    if (x < 123) { }\n    else { throw \"\"; }\n    a = x;\n}"
  4U always 4
  122 always 122
Line 2748
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2748 always 2748
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2748 always 2748
  4U always 4
  123 always 123
Line 2750
  = always "void f(int x) {\n    if (x > 123) { }\n    else { a = x; }\n}"
  "void f(int x) {\n    if (x > 123) { }\n    else { a = x; }\n}" always "void f(int x) {\n    if (x > 123) { }\n    else { a = x; }\n}"
Line 2754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2754 always 2754
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2754 always 2754
  code always "void f(int x) {\n    if (x > 123) { }\n    else { a = x; }\n}"
  3U always 3
  123 always 123
Line 2756
  = always "void f(int x) {\n    if (x > 123) { throw \"\"; }\n    a = x;\n}"
  "void f(int x) {\n    if (x > 123) { throw \"\"; }\n    a = x;\n}" always "void f(int x) {\n    if (x > 123) { throw \"\"; }\n    a = x;\n}"
Line 2760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2760 always 2760
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2760 always 2760
  code always "void f(int x) {\n    if (x > 123) { throw \"\"; }\n    a = x;\n}"
  3U always 3
  123 always 123
Line 2762
  = always "void f(int x) {\n    if (x > 123) { }\n    else { throw \"\"; }\n    a = x;\n}"
  "void f(int x) {\n    if (x > 123) { }\n    else { throw \"\"; }\n    a = x;\n}" always "void f(int x) {\n    if (x > 123) { }\n    else { throw \"\"; }\n    a = x;\n}"
Line 2767
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2767 always 2767
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2767 always 2767
  code always "void f(int x) {\n    if (x > 123) { }\n    else { throw \"\"; }\n    a = x;\n}"
  4U always 4
  124 always 124
Line 2768
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2768 always 2768
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2768 always 2768
  4U always 4
  123 always 123
Line 2770
  = always "void f(int x) {\n    if (x < 123) { return; }\n    else { return; }\n    a = x;\n}"
  "void f(int x) {\n    if (x < 123) { return; }\n    else { return; }\n    a = x;\n}" always "void f(int x) {\n    if (x < 123) { return; }\n    else { return; }\n    a = x;\n}"
Line 2775
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2775 always 2775
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2775 always 2775
  code always "void f(int x) {\n    if (x < 123) { return; }\n    else { return; }\n    a = x;\n}"
  4U always 4
  124 always 124
Line 2776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2776 always 2776
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2776 always 2776
  4U always 4
  123 always 123
Line 2779
  = always "void f(int x) {\n    if (x) { a = x; }\n    else { b = x; }\n    c = x;\n}"
  "void f(int x) {\n    if (x) { a = x; }\n    else { b = x; }\n    c = x;\n}" always "void f(int x) {\n    if (x) { a = x; }\n    else { b = x; }\n    c = x;\n}"
Line 2784
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2784 always 2784
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2784 always 2784
  code always "void f(int x) {\n    if (x) { a = x; }\n    else { b = x; }\n    c = x;\n}"
  2U always 2
  0 always 0
Line 2785
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2785 always 2785
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2785 always 2785
  3U always 3
  0 always 0
Line 2786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2786 always 2786
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2786 always 2786
  4U always 4
  0 always 0
Line 2789
  = always "void f(int x) {\n    while (x != 3) {}\n    a = x;\n}"
  "void f(int x) {\n    while (x != 3) {}\n    a = x;\n}" always "void f(int x) {\n    while (x != 3) {}\n    a = x;\n}"
Line 2793
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2793 always 2793
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2793 always 2793
  code always "void f(int x) {\n    while (x != 3) {}\n    a = x;\n}"
  3U always 3
  3 always 3
Line 2795
  = always "void f(int x) {\n    while (11 != (x = dostuff())) {}\n    a = x;\n}"
  "void f(int x) {\n    while (11 != (x = dostuff())) {}\n    a = x;\n}" always "void f(int x) {\n    while (11 != (x = dostuff())) {}\n    a = x;\n}"
Line 2799
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2799 always 2799
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2799 always 2799
  code always "void f(int x) {\n    while (11 != (x = dostuff())) {}\n    a = x;\n}"
  3U always 3
  11 always 11
Line 2801
  = always "void f(int x) {\n    while (11 != (x = dostuff()) && y) {}\n    a = x;\n}"
  "void f(int x) {\n    while (11 != (x = dostuff()) && y) {}\n    a = x;\n}" always "void f(int x) {\n    while (11 != (x = dostuff()) && y) {}\n    a = x;\n}"
Line 2805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2805 always 2805
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2805 always 2805
  code always "void f(int x) {\n    while (11 != (x = dostuff()) && y) {}\n    a = x;\n}"
  3U always 3
  11 always 11
Line 2807
  = always "void f(int x) {\n    while (x = dostuff()) {}\n    a = x;\n}"
  "void f(int x) {\n    while (x = dostuff()) {}\n    a = x;\n}" always "void f(int x) {\n    while (x = dostuff()) {}\n    a = x;\n}"
Line 2811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2811 always 2811
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2811 always 2811
  code always "void f(int x) {\n    while (x = dostuff()) {}\n    a = x;\n}"
  3U always 3
  0 always 0
Line 2813
  = always "void f(const Token *x) {\n    x = x->next();\n    while (x) { x = x->next(); }\n    if (x->str()) {}\n}"
  "void f(const Token *x) {\n    x = x->next();\n    while (x) { x = x->next(); }\n    if (x->str()) {}\n}" always "void f(const Token *x) {\n    x = x->next();\n    while (x) { x = x->next(); }\n    if (x->str()) {}\n}"
Line 2818
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2818 always 2818
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2818 always 2818
  code always "void f(const Token *x) {\n    x = x->next();\n    while (x) { x = x->next(); }\n    if (x->str()) {}\n}"
  4U always 4
  0 always 0
Line 2820
  = always "void f(const Token *x) {\n  while (0 != (x = x->next)) {}\n  x->ab = 0;\n}\n"
  "void f(const Token *x) {\n  while (0 != (x = x->next)) {}\n  x->ab = 0;\n}\n" always "void f(const Token *x) {\n  while (0 != (x = x->next)) {}\n  x->ab = 0;\n}\n"
Line 2824
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2824 always 2824
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2824 always 2824
  code always "void f(const Token *x) {\n  while (0 != (x = x->next)) {}\n  x->ab = 0;\n}\n"
  3U always 3
  0 always 0
Line 2826
  = always "void f(const Token* x) {\n  while (0 != (x = x->next)) {}\n  if (x->str) {\n    x = y;\n  }\n}\n"
  "void f(const Token* x) {\n  while (0 != (x = x->next)) {}\n  if (x->str) {\n    x = y;\n  }\n}\n" always "void f(const Token* x) {\n  while (0 != (x = x->next)) {}\n  if (x->str) {\n    x = y;\n  }\n}\n"
Line 2832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2832 always 2832
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2832 always 2832
  code always "void f(const Token* x) {\n  while (0 != (x = x->next)) {}\n  if (x->str) {\n    x = y;\n  }\n}\n"
  3U always 3
  0 always 0
Line 2835
  = always "void f(int x) {\n  if (x == 2) {}\n  if (x > 0)\n    a = x;\n  else\n    b = x;\n}"
  "void f(int x) {\n  if (x == 2) {}\n  if (x > 0)\n    a = x;\n  else\n    b = x;\n}" always "void f(int x) {\n  if (x == 2) {}\n  if (x > 0)\n    a = x;\n  else\n    b = x;\n}"
Line 2842
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2842 always 2842
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2842 always 2842
  code always "void f(int x) {\n  if (x == 2) {}\n  if (x > 0)\n    a = x;\n  else\n    b = x;\n}"
  4U always 4
  2 always 2
Line 2843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2843 always 2843
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2843 always 2843
  6U always 6
  2 always 2
Line 2846
  = always "void f(int x) {\n  int y = 0;\n  if (x == 7) { y = 1; }\n  if (!y)\n    a = x;\n}"
  "void f(int x) {\n  int y = 0;\n  if (x == 7) { y = 1; }\n  if (!y)\n    a = x;\n}" always "void f(int x) {\n  int y = 0;\n  if (x == 7) { y = 1; }\n  if (!y)\n    a = x;\n}"
Line 2852
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2852 always 2852
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2852 always 2852
  code always "void f(int x) {\n  int y = 0;\n  if (x == 7) { y = 1; }\n  if (!y)\n    a = x;\n}"
  5U always 5
  7 always 7
Line 2854
  = always "void f(struct X *x) {\n  bool b = TRUE;\n  if(x) { }\n  else\n    b = FALSE;\n  if (b)\n    abc(x->value);\n}\n"
  "void f(struct X *x) {\n  bool b = TRUE;\n  if(x) { }\n  else\n    b = FALSE;\n  if (b)\n    abc(x->value);\n}\n" always "void f(struct X *x) {\n  bool b = TRUE;\n  if(x) { }\n  else\n    b = FALSE;\n  if (b)\n    abc(x->value);\n}\n"
Line 2862
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2862 always 2862
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2862 always 2862
  code always "void f(struct X *x) {\n  bool b = TRUE;\n  if(x) { }\n  else\n    b = FALSE;\n  if (b)\n    abc(x->value);\n}\n"
  7U always 7
  0 always 0
Line 2865
  = always "void f(int x) {\n  a = (x != 3 ||\n       x);\n}"
  "void f(int x) {\n  a = (x != 3 ||\n       x);\n}" always "void f(int x) {\n  a = (x != 3 ||\n       x);\n}"
Line 2869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2869 always 2869
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2869 always 2869
  code always "void f(int x) {\n  a = (x != 3 ||\n       x);\n}"
  3U always 3
  3 always 3
Line 2871
  = always "void f(int x) {\n  a = (x == 4 &&\n       x);\n}"
  "void f(int x) {\n  a = (x == 4 &&\n       x);\n}" always "void f(int x) {\n  a = (x == 4 &&\n       x);\n}"
Line 2875
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2875 always 2875
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2875 always 2875
  code always "void f(int x) {\n  a = (x == 4 &&\n       x);\n}"
  3U always 3
  4 always 4
Line 2878
  = always "void f(const Token* x) {\n    if (x) {}\n    for (; x &&\n         x->str() != y; x = x->next()) {}\n}"
  "void f(const Token* x) {\n    if (x) {}\n    for (; x &&\n         x->str() != y; x = x->next()) {}\n}" always "void f(const Token* x) {\n    if (x) {}\n    for (; x &&\n         x->str() != y; x = x->next()) {}\n}"
Line 2883
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2883 always 2883
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2883 always 2883
  code always "void f(const Token* x) {\n    if (x) {}\n    for (; x &&\n         x->str() != y; x = x->next()) {}\n}"
  3U always 3
  0 always 0
Line 2884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2884 always 2884
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2884 always 2884
  4U always 4
  0 always 0
Line 2886
  = always "void f(const Token* x) {\n    if (x) {}\n    if (x &&\n        x->str() != y) {}\n}"
  "void f(const Token* x) {\n    if (x) {}\n    if (x &&\n        x->str() != y) {}\n}" always "void f(const Token* x) {\n    if (x) {}\n    if (x &&\n        x->str() != y) {}\n}"
Line 2891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2891 always 2891
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2891 always 2891
  code always "void f(const Token* x) {\n    if (x) {}\n    if (x &&\n        x->str() != y) {}\n}"
  3U always 3
  0 always 0
Line 2892
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2892 always 2892
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2892 always 2892
  4U always 4
  0 always 0
Line 2895
  = always "void f(int x) {\n  if (x == 5) {\n    if (z) return; else return;\n  }\n  a = x;\n}"
  "void f(int x) {\n  if (x == 5) {\n    if (z) return; else return;\n  }\n  a = x;\n}" always "void f(int x) {\n  if (x == 5) {\n    if (z) return; else return;\n  }\n  a = x;\n}"
Line 2901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2901 always 2901
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2901 always 2901
  code always "void f(int x) {\n  if (x == 5) {\n    if (z) return; else return;\n  }\n  a = x;\n}"
  5U always 5
  5 always 5
Line 2903
  = always "void f(int x) {\n  if (x == 5) {\n    if (z) continue; else throw e;\n  }\n  a = x;\n}"
  "void f(int x) {\n  if (x == 5) {\n    if (z) continue; else throw e;\n  }\n  a = x;\n}" always "void f(int x) {\n  if (x == 5) {\n    if (z) continue; else throw e;\n  }\n  a = x;\n}"
Line 2909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2909 always 2909
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2909 always 2909
  code always "void f(int x) {\n  if (x == 5) {\n    if (z) continue; else throw e;\n  }\n  a = x;\n}"
  5U always 5
  5 always 5
Line 2912
  = always "void f(float x) {\n  if (x == 0.5) {}\n  a = x;\n}"
  "void f(float x) {\n  if (x == 0.5) {}\n  a = x;\n}" always "void f(float x) {\n  if (x == 0.5) {}\n  a = x;\n}"
Line 2916
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2916 always 2916
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2916 always 2916
  code always "void f(float x) {\n  if (x == 0.5) {}\n  a = x;\n}"
  3U always 3
  0 always 0
Line 2919
  = always "void f() {\n  int x = 1;\n  int *data = &x;\n  if (!x) {\n    calc(data);\n    a = x;\n  }\n}"
  "void f() {\n  int x = 1;\n  int *data = &x;\n  if (!x) {\n    calc(data);\n    a = x;\n  }\n}" always "void f() {\n  int x = 1;\n  int *data = &x;\n  if (!x) {\n    calc(data);\n    a = x;\n  }\n}"
Line 2927
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2927 always 2927
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2927 always 2927
  code always "void f() {\n  int x = 1;\n  int *data = &x;\n  if (!x) {\n    calc(data);\n    a = x;\n  }\n}"
  6U always 6
  0 always 0
Line 2929
  = always "int* g();\nint f() {\n    int * x;\n    x = g();\n    if (x) { printf(\"\"); }\n    return *x;\n}\n"
  "int* g();\nint f() {\n    int * x;\n    x = g();\n    if (x) { printf(\"\"); }\n    return *x;\n}\n" always "int* g();\nint f() {\n    int * x;\n    x = g();\n    if (x) { printf(\"\"); }\n    return *x;\n}\n"
Line 2936
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2936 always 2936
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2936 always 2936
  code always "int* g();\nint f() {\n    int * x;\n    x = g();\n    if (x) { printf(\"\"); }\n    return *x;\n}\n"
  6U always 6
  0 always 0
Line 2937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2937 always 2937
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2937 always 2937
  6U always 6
  0 always 0
Line 2940
  = always "void foo(const volatile int &x) {\n    if (x==1) {\n        return x;\n    }}"
  "void foo(const volatile int &x) {\n    if (x==1) {\n        return x;\n    }}" always "void foo(const volatile int &x) {\n    if (x==1) {\n        return x;\n    }}"
Line 2945
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2945 always 2945
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2945 always 2945
  code always "void foo(const volatile int &x) {\n    if (x==1) {\n        return x;\n    }}"
  3U always 3
  1 always 1
Line 2947
  = always "void foo(const std::atomic<int> &x) {\n    if (x==2) {\n        return x;\n    }}"
  "void foo(const std::atomic<int> &x) {\n    if (x==2) {\n        return x;\n    }}" always "void foo(const std::atomic<int> &x) {\n    if (x==2) {\n        return x;\n    }}"
Line 2952
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2952 always 2952
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2952 always 2952
  code always "void foo(const std::atomic<int> &x) {\n    if (x==2) {\n        return x;\n    }}"
  3U always 3
  2 always 2
Line 2954
  = always "int f(int i, int j) {\n    if (i == 0) {\n        if (j < 0)\n            return 0;\n        i = j+1;\n    }\n    int x = i;\n    return x;\n}\n"
  "int f(int i, int j) {\n    if (i == 0) {\n        if (j < 0)\n            return 0;\n        i = j+1;\n    }\n    int x = i;\n    return x;\n}\n" always "int f(int i, int j) {\n    if (i == 0) {\n        if (j < 0)\n            return 0;\n        i = j+1;\n    }\n    int x = i;\n    return x;\n}\n"
Line 2963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2963 always 2963
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2963 always 2963
  code always "int f(int i, int j) {\n    if (i == 0) {\n        if (j < 0)\n            return 0;\n        i = j+1;\n    }\n    int x = i;\n    return x;\n}\n"
  8U always 8
  0 always 0
Line 2965
  = always "int f(int i, int j) {\n    if (i == 0) {\n        if (j < 0)\n            return 0;\n        if (j < 0)\n            i = j+1;\n    }\n    int x = i;\n    return x;\n}\n"
  "int f(int i, int j) {\n    if (i == 0) {\n        if (j < 0)\n            return 0;\n        if (j < 0)\n            i = j+1;\n    }\n    int x = i;\n    return x;\n}\n" always "int f(int i, int j) {\n    if (i == 0) {\n        if (j < 0)\n            return 0;\n        if (j < 0)\n            i = j+1;\n    }\n    int x = i;\n    return x;\n}\n"
Line 2975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2975 always 2975
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2975 always 2975
  code always "int f(int i, int j) {\n    if (i == 0) {\n        if (j < 0)\n            return 0;\n        if (j < 0)\n            i = j+1;\n    }\n    int x = i;\n    return x;\n}\n"
  9U always 9
  0 always 0
Line 2977
  = always "void g(long& a);\nvoid f(long a) {\n    if (a == 0)\n        return;\n    if (a > 1)\n         g(a);\n    int x = a;\n    return x;\n}\n"
  "void g(long& a);\nvoid f(long a) {\n    if (a == 0)\n        return;\n    if (a > 1)\n         g(a);\n    int x = a;\n    return x;\n}\n" always "void g(long& a);\nvoid f(long a) {\n    if (a == 0)\n        return;\n    if (a > 1)\n         g(a);\n    int x = a;\n    return x;\n}\n"
Line 2986
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2986 always 2986
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2986 always 2986
  code always "void g(long& a);\nvoid f(long a) {\n    if (a == 0)\n        return;\n    if (a > 1)\n         g(a);\n    int x = a;\n    return x;\n}\n"
  8U always 8
  0 always 0
Line 2988
  = always "int foo(int n) {\n    if( n>= 8 ) {\n        while(true) {\n            n -= 8;\n            if( n < 8 )\n                break;\n        }\n        int x = n == 0;\n        return x;\n    }\n}\n"
  "int foo(int n) {\n    if( n>= 8 ) {\n        while(true) {\n            n -= 8;\n            if( n < 8 )\n                break;\n        }\n        int x = n == 0;\n        return x;\n    }\n}\n" always "int foo(int n) {\n    if( n>= 8 ) {\n        while(true) {\n            n -= 8;\n            if( n < 8 )\n                break;\n        }\n        int x = n == 0;\n        return x;\n    }\n}\n"
Line 2999
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2999 always 2999
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  2999 always 2999
  code always "int foo(int n) {\n    if( n>= 8 ) {\n        while(true) {\n            n -= 8;\n            if( n < 8 )\n                break;\n        }\n        int x = n == 0;\n        return x;\n    }\n}\n"
  9U always 9
  0 always 0
Line 3001
  = always "bool c();\nlong f() {\n    bool stop = false;\n    while (!stop) {\n        if (c())\n            stop = true;\n        break;\n    }\n    int x = !stop;\n    return x;\n}\n"
  "bool c();\nlong f() {\n    bool stop = false;\n    while (!stop) {\n        if (c())\n            stop = true;\n        break;\n    }\n    int x = !stop;\n    return x;\n}\n" always "bool c();\nlong f() {\n    bool stop = false;\n    while (!stop) {\n        if (c())\n            stop = true;\n        break;\n    }\n    int x = !stop;\n    return x;\n}\n"
Line 3012
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3012 always 3012
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3012 always 3012
  code always "bool c();\nlong f() {\n    bool stop = false;\n    while (!stop) {\n        if (c())\n            stop = true;\n        break;\n    }\n    int x = !stop;\n    return x;\n}\n"
  10U always 10
  1 always 1
Line 3013
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3013 always 3013
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3013 always 3013
  10U always 10
  0 always 0
Line 3015
  = always "int f(int a, int b) {\n  if (!a && !b)\n    return;\n  if ((!a && b) || (a && !b))\n    return;\n  int x = a;\n  return x;\n}\n"
  "int f(int a, int b) {\n  if (!a && !b)\n    return;\n  if ((!a && b) || (a && !b))\n    return;\n  int x = a;\n  return x;\n}\n" always "int f(int a, int b) {\n  if (!a && !b)\n    return;\n  if ((!a && b) || (a && !b))\n    return;\n  int x = a;\n  return x;\n}\n"
Line 3023
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3023 always 3023
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3023 always 3023
  code always "int f(int a, int b) {\n  if (!a && !b)\n    return;\n  if ((!a && b) || (a && !b))\n    return;\n  int x = a;\n  return x;\n}\n"
  7U always 7
  0 always 0
Line 3025
  = always "void f(int x, int y) {\n    if (x && y)\n        return;\n    int a = x;\n}\n"
  "void f(int x, int y) {\n    if (x && y)\n        return;\n    int a = x;\n}\n" always "void f(int x, int y) {\n    if (x && y)\n        return;\n    int a = x;\n}\n"
Line 3030
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3030 always 3030
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3030 always 3030
  code always "void f(int x, int y) {\n    if (x && y)\n        return;\n    int a = x;\n}\n"
  4U always 4
  0 always 0
Line 3031
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3031 always 3031
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3031 always 3031
  4U always 4
  0 always 0
Line 3032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3032 always 3032
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3032 always 3032
  4U always 4
  1 always 1
Line 3034
  = always "int f(std::vector<int> a, std::vector<int> b) {\n    if (a.empty() && b.empty())\n        return 0;\n    bool x = a.empty() && !b.empty();\n    return x;\n}\n"
  "int f(std::vector<int> a, std::vector<int> b) {\n    if (a.empty() && b.empty())\n        return 0;\n    bool x = a.empty() && !b.empty();\n    return x;\n}\n" always "int f(std::vector<int> a, std::vector<int> b) {\n    if (a.empty() && b.empty())\n        return 0;\n    bool x = a.empty() && !b.empty();\n    return x;\n}\n"
Line 3040
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3040 always 3040
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3040 always 3040
  code always "int f(std::vector<int> a, std::vector<int> b) {\n    if (a.empty() && b.empty())\n        return 0;\n    bool x = a.empty() && !b.empty();\n    return x;\n}\n"
  5U always 5
  0 always 0
Line 3041
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3041 always 3041
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3041 always 3041
  5U always 5
  1 always 1
Line 3042
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3042 always 3042
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3042 always 3042
  5U always 5
  0 always 0
Line 3043
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3043 always 3043
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3043 always 3043
  5U always 5
  1 always 1
Line 3045
  = always "auto f(int i) {\n    if (i == 0) return;\n    auto x = !i;\n    return x;\n}\n"
  "auto f(int i) {\n    if (i == 0) return;\n    auto x = !i;\n    return x;\n}\n" always "auto f(int i) {\n    if (i == 0) return;\n    auto x = !i;\n    return x;\n}\n"
Line 3050
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3050 always 3050
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3050 always 3050
  code always "auto f(int i) {\n    if (i == 0) return;\n    auto x = !i;\n    return x;\n}\n"
  4U always 4
  0 always 0
Line 3052
  = always "auto f(int i) {\n    if (i == 1) return;\n    auto x = !i;\n    return x;\n}\n"
  "auto f(int i) {\n    if (i == 1) return;\n    auto x = !i;\n    return x;\n}\n" always "auto f(int i) {\n    if (i == 1) return;\n    auto x = !i;\n    return x;\n}\n"
Line 3057
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3057 always 3057
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3057 always 3057
  code always "auto f(int i) {\n    if (i == 1) return;\n    auto x = !i;\n    return x;\n}\n"
  4U always 4
  0 always 0
Line 3059
  = always "int g(int x) {\n    switch (x) {\n    case 1:\n        return 1;\n    default:\n        return 2;\n    }\n}\nvoid f(int x) {\n    if (x == 3)\n        x = g(0);\n    int a = x;\n}\n"
  "int g(int x) {\n    switch (x) {\n    case 1:\n        return 1;\n    default:\n        return 2;\n    }\n}\nvoid f(int x) {\n    if (x == 3)\n        x = g(0);\n    int a = x;\n}\n" always "int g(int x) {\n    switch (x) {\n    case 1:\n        return 1;\n    default:\n        return 2;\n    }\n}\nvoid f(int x) {\n    if (x == 3)\n        x = g(0);\n    int a = x;\n}\n"
Line 3072
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3072 always 3072
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3072 always 3072
  code always "int g(int x) {\n    switch (x) {\n    case 1:\n        return 1;\n    default:\n        return 2;\n    }\n}\nvoid f(int x) {\n    if (x == 3)\n        x = g(0);\n    int a = x;\n}\n"
  12U always 12
  3 always 3
Line 3074
  = always "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return (long long)y << (long long)x;\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
  "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return (long long)y << (long long)x;\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n" always "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return (long long)y << (long long)x;\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
Line 3086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3086 always 3086
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3086 always 3086
  code always "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return (long long)y << (long long)x;\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
  6U always 6
  63 always 63
Line 3087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3087 always 3087
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3087 always 3087
  6U always 6
  64 always 64
Line 3089
  = always "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return long long(y) << long long(x);\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
  "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return long long(y) << long long(x);\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n" always "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return long long(y) << long long(x);\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
Line 3101
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3101 always 3101
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3101 always 3101
  code always "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return long long(y) << long long(x);\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
  6U always 6
  63 always 63
Line 3102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3102 always 3102
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3102 always 3102
  6U always 6
  64 always 64
Line 3104
  = always "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return long long{y} << long long{x};\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
  "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return long long{y} << long long{x};\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n" always "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return long long{y} << long long{x};\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
Line 3116
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3116 always 3116
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3116 always 3116
  code always "long long f(const long long& x, const long long& y) {\n    switch (s) {\n    case 0:\n        if (x >= 64)\n            return 0;\n        return long long{y} << long long{x};\n    case 1:\n        if (x >= 64) {\n        }\n    }\n    return 0; \n}\n"
  6U always 6
  63 always 63
Line 3117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3117 always 3117
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3117 always 3117
  6U always 6
  64 always 64
Line 3119
  = always "int g(int x) { throw 0; }\nvoid f(int x) {\n    if (x == 3)\n        x = g(0);\n    int a = x;\n}\n"
  "int g(int x) { throw 0; }\nvoid f(int x) {\n    if (x == 3)\n        x = g(0);\n    int a = x;\n}\n" always "int g(int x) { throw 0; }\nvoid f(int x) {\n    if (x == 3)\n        x = g(0);\n    int a = x;\n}\n"
Line 3125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3125 always 3125
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3125 always 3125
  code always "int g(int x) { throw 0; }\nvoid f(int x) {\n    if (x == 3)\n        x = g(0);\n    int a = x;\n}\n"
  5U always 5
  3 always 3
Line 3127
  = always "struct a {\n  a *b() const;\n  void c();\n};\nvoid e(a *x) {\n  while (x && x->b())\n    x = x->b();\n  x->c();\n}\n"
  "struct a {\n  a *b() const;\n  void c();\n};\nvoid e(a *x) {\n  while (x && x->b())\n    x = x->b();\n  x->c();\n}\n" always "struct a {\n  a *b() const;\n  void c();\n};\nvoid e(a *x) {\n  while (x && x->b())\n    x = x->b();\n  x->c();\n}\n"
Line 3136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3136 always 3136
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3136 always 3136
  code always "struct a {\n  a *b() const;\n  void c();\n};\nvoid e(a *x) {\n  while (x && x->b())\n    x = x->b();\n  x->c();\n}\n"
  8U always 8
  0 always 0
Line 3138
  = always "struct a {\n  a *b();\n  void c();\n};\nvoid e(a *x) {\n  while (x && x->b())\n    x = x->b();\n  x->c();\n}\n"
  "struct a {\n  a *b();\n  void c();\n};\nvoid e(a *x) {\n  while (x && x->b())\n    x = x->b();\n  x->c();\n}\n" always "struct a {\n  a *b();\n  void c();\n};\nvoid e(a *x) {\n  while (x && x->b())\n    x = x->b();\n  x->c();\n}\n"
Line 3147
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3147 always 3147
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3147 always 3147
  code always "struct a {\n  a *b();\n  void c();\n};\nvoid e(a *x) {\n  while (x && x->b())\n    x = x->b();\n  x->c();\n}\n"
  8U always 8
  0 always 0
Line 3149
  = always "constexpr int f();\nint g() {\n    if (f() == 1) {\n        int x = f();\n        return x;\n    }\n    return 0;\n}\n"
  "constexpr int f();\nint g() {\n    if (f() == 1) {\n        int x = f();\n        return x;\n    }\n    return 0;\n}\n" always "constexpr int f();\nint g() {\n    if (f() == 1) {\n        int x = f();\n        return x;\n    }\n    return 0;\n}\n"
Line 3157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3157 always 3157
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3157 always 3157
  code always "constexpr int f();\nint g() {\n    if (f() == 1) {\n        int x = f();\n        return x;\n    }\n    return 0;\n}\n"
  5U always 5
  1 always 1
Line 3159
  = always "int f(int x) {\n    if (x == 1) {\n        for(int i=0;i<1;i++) {\n            if (x == 1)\n                continue;\n        }\n    }\n    return x;\n}\n"
  "int f(int x) {\n    if (x == 1) {\n        for(int i=0;i<1;i++) {\n            if (x == 1)\n                continue;\n        }\n    }\n    return x;\n}\n" always "int f(int x) {\n    if (x == 1) {\n        for(int i=0;i<1;i++) {\n            if (x == 1)\n                continue;\n        }\n    }\n    return x;\n}\n"
Line 3168
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3168 always 3168
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3168 always 3168
  code always "int f(int x) {\n    if (x == 1) {\n        for(int i=0;i<1;i++) {\n            if (x == 1)\n                continue;\n        }\n    }\n    return x;\n}\n"
  8U always 8
  1 always 1
Line 3169
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3169 always 3169
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3169 always 3169
  8U always 8
  1 always 1
Line 3171
  = always "void g(int i) {\n    if (i == 1)\n        return;\n    abort();\n}\nint f(int x) {\n    if (x != 0)\n        g(x);\n    return x;\n}\n"
  "void g(int i) {\n    if (i == 1)\n        return;\n    abort();\n}\nint f(int x) {\n    if (x != 0)\n        g(x);\n    return x;\n}\n" always "void g(int i) {\n    if (i == 1)\n        return;\n    abort();\n}\nint f(int x) {\n    if (x != 0)\n        g(x);\n    return x;\n}\n"
Line 3181
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3181 always 3181
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3181 always 3181
  code always "void g(int i) {\n    if (i == 1)\n        return;\n    abort();\n}\nint f(int x) {\n    if (x != 0)\n        g(x);\n    return x;\n}\n"
  9U always 9
  0 always 0
Line 3182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3182 always 3182
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3182 always 3182
  9U always 9
  0 always 0
Line 3189
  = always "auto f(int x) {\n    return x == 3 ?\n        x :\n        0;\n}\n"
  "auto f(int x) {\n    return x == 3 ?\n        x :\n        0;\n}\n" always "auto f(int x) {\n    return x == 3 ?\n        x :\n        0;\n}\n"
Line 3194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3194 always 3194
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3194 always 3194
  code always "auto f(int x) {\n    return x == 3 ?\n        x :\n        0;\n}\n"
  3U always 3
  3 always 3
Line 3196
  = always "auto f(int x) {\n    return x != 3 ?\n        0 :\n        x;\n}\n"
  "auto f(int x) {\n    return x != 3 ?\n        0 :\n        x;\n}\n" always "auto f(int x) {\n    return x != 3 ?\n        0 :\n        x;\n}\n"
Line 3201
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3201 always 3201
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3201 always 3201
  code always "auto f(int x) {\n    return x != 3 ?\n        0 :\n        x;\n}\n"
  4U always 4
  3 always 3
Line 3203
  = always "auto f(int x) {\n    return !(x == 3) ?\n        0 :\n        x;\n}\n"
  "auto f(int x) {\n    return !(x == 3) ?\n        0 :\n        x;\n}\n" always "auto f(int x) {\n    return !(x == 3) ?\n        0 :\n        x;\n}\n"
Line 3208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3208 always 3208
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3208 always 3208
  code always "auto f(int x) {\n    return !(x == 3) ?\n        0 :\n        x;\n}\n"
  4U always 4
  3 always 3
Line 3210
  = always "auto f(int* x) {\n    return x ?\n        x :\n        0;\n}\n"
  "auto f(int* x) {\n    return x ?\n        x :\n        0;\n}\n" always "auto f(int* x) {\n    return x ?\n        x :\n        0;\n}\n"
Line 3215
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3215 always 3215
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3215 always 3215
  code always "auto f(int* x) {\n    return x ?\n        x :\n        0;\n}\n"
  3U always 3
  0 always 0
Line 3217
  = always "auto f(int* x) {\n    return x ?\n        0 :\n        x;\n}\n"
  "auto f(int* x) {\n    return x ?\n        0 :\n        x;\n}\n" always "auto f(int* x) {\n    return x ?\n        0 :\n        x;\n}\n"
Line 3222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3222 always 3222
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3222 always 3222
  code always "auto f(int* x) {\n    return x ?\n        0 :\n        x;\n}\n"
  4U always 4
  0 always 0
Line 3224
  = always "bool g(int);\nauto f(int* x) {\n    if (!g(x ?\n        *x :\n        0)) {}\n}\n"
  "bool g(int);\nauto f(int* x) {\n    if (!g(x ?\n        *x :\n        0)) {}\n}\n" always "bool g(int);\nauto f(int* x) {\n    if (!g(x ?\n        *x :\n        0)) {}\n}\n"
Line 3230
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3230 always 3230
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3230 always 3230
  code always "bool g(int);\nauto f(int* x) {\n    if (!g(x ?\n        *x :\n        0)) {}\n}\n"
  4U always 4
  0 always 0
Line 3236
  = always "void f(int* p) {\n    if (p[0] == 123) {\n        int x = p[0];\n        int a = x;\n    }\n}"
  "void f(int* p) {\n    if (p[0] == 123) {\n        int x = p[0];\n        int a = x;\n    }\n}" always "void f(int* p) {\n    if (p[0] == 123) {\n        int x = p[0];\n        int a = x;\n    }\n}"
Line 3242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3242 always 3242
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3242 always 3242
  code always "void f(int* p) {\n    if (p[0] == 123) {\n        int x = p[0];\n        int a = x;\n    }\n}"
  4U always 4
  123 always 123
Line 3244
  = always "void f(int y) {\n    if (y+1 == 123) {\n        int x = y+1;\n        int a = x;\n    }\n}"
  "void f(int y) {\n    if (y+1 == 123) {\n        int x = y+1;\n        int a = x;\n    }\n}" always "void f(int y) {\n    if (y+1 == 123) {\n        int x = y+1;\n        int a = x;\n    }\n}"
Line 3250
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3250 always 3250
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3250 always 3250
  code always "void f(int y) {\n    if (y+1 == 123) {\n        int x = y+1;\n        int a = x;\n    }\n}"
  4U always 4
  123 always 123
Line 3252
  = always "void f(int y) {\n    if (y+1 == 123) {\n        int x = y+2;\n        int a = x;\n    }\n}"
  "void f(int y) {\n    if (y+1 == 123) {\n        int x = y+2;\n        int a = x;\n    }\n}" always "void f(int y) {\n    if (y+1 == 123) {\n        int x = y+2;\n        int a = x;\n    }\n}"
Line 3258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3258 always 3258
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3258 always 3258
  code always "void f(int y) {\n    if (y+1 == 123) {\n        int x = y+2;\n        int a = x;\n    }\n}"
  4U always 4
  124 always 124
Line 3260
  = always "void f(int y, int z) {\n    if (y+z == 123) {\n        int x = y+z;\n        int a = x;\n    }\n}"
  "void f(int y, int z) {\n    if (y+z == 123) {\n        int x = y+z;\n        int a = x;\n    }\n}" always "void f(int y, int z) {\n    if (y+z == 123) {\n        int x = y+z;\n        int a = x;\n    }\n}"
Line 3266
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3266 always 3266
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3266 always 3266
  code always "void f(int y, int z) {\n    if (y+z == 123) {\n        int x = y+z;\n        int a = x;\n    }\n}"
  4U always 4
  123 always 123
Line 3268
  = always "void f(int y, int z) {\n    if (y+z == 123) {\n        y++;\n        int x = y+z;\n        int a = x;\n    }\n}"
  "void f(int y, int z) {\n    if (y+z == 123) {\n        y++;\n        int x = y+z;\n        int a = x;\n    }\n}" always "void f(int y, int z) {\n    if (y+z == 123) {\n        y++;\n        int x = y+z;\n        int a = x;\n    }\n}"
Line 3275
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3275 always 3275
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3275 always 3275
  code always "void f(int y, int z) {\n    if (y+z == 123) {\n        y++;\n        int x = y+z;\n        int a = x;\n    }\n}"
  5U always 5
  123 always 123
Line 3277
  = always "void f(int y) {\n    if (y++ == 123) {\n        int x = y++;\n        int a = x;\n    }\n}"
  "void f(int y) {\n    if (y++ == 123) {\n        int x = y++;\n        int a = x;\n    }\n}" always "void f(int y) {\n    if (y++ == 123) {\n        int x = y++;\n        int a = x;\n    }\n}"
Line 3283
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3283 always 3283
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3283 always 3283
  code always "void f(int y) {\n    if (y++ == 123) {\n        int x = y++;\n        int a = x;\n    }\n}"
  4U always 4
  123 always 123
Line 3284
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3284 always 3284
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3284 always 3284
  4U always 4
  124 always 124
Line 3285
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3285 always 3285
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3285 always 3285
  4U always 4
  125 always 125
Line 3287
  = always "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (a.g()) {\n        bool x = a.g();\n        bool a = x;\n    }\n}\n"
  "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (a.g()) {\n        bool x = a.g();\n        bool a = x;\n    }\n}\n" always "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (a.g()) {\n        bool x = a.g();\n        bool a = x;\n    }\n}\n"
Line 3296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3296 always 3296
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3296 always 3296
  code always "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (a.g()) {\n        bool x = a.g();\n        bool a = x;\n    }\n}\n"
  7U always 7
  0 always 0
Line 3298
  = always "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (a.g()) {\n        bool x = !a.g();\n        bool a = x;\n    }\n}\n"
  "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (a.g()) {\n        bool x = !a.g();\n        bool a = x;\n    }\n}\n" always "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (a.g()) {\n        bool x = !a.g();\n        bool a = x;\n    }\n}\n"
Line 3307
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3307 always 3307
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3307 always 3307
  code always "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (a.g()) {\n        bool x = !a.g();\n        bool a = x;\n    }\n}\n"
  7U always 7
  0 always 0
Line 3309
  = always "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (!a.g()) {\n        bool x = a.g();\n        bool a = x;\n    }\n}\n"
  "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (!a.g()) {\n        bool x = a.g();\n        bool a = x;\n    }\n}\n" always "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (!a.g()) {\n        bool x = a.g();\n        bool a = x;\n    }\n}\n"
Line 3318
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3318 always 3318
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3318 always 3318
  code always "struct A {\n    bool g() const;\n};\nvoid f(A a) {\n    if (!a.g()) {\n        bool x = a.g();\n        bool a = x;\n    }\n}\n"
  7U always 7
  0 always 0
Line 3320
  = always "void f(std::vector<int> v) {\n    if (v.size() == 3) {\n        if (v.size() == 1) {\n            int x = 1;\n            int a = x;\n        }\n    }\n}\n"
  "void f(std::vector<int> v) {\n    if (v.size() == 3) {\n        if (v.size() == 1) {\n            int x = 1;\n            int a = x;\n        }\n    }\n}\n" always "void f(std::vector<int> v) {\n    if (v.size() == 3) {\n        if (v.size() == 1) {\n            int x = 1;\n            int a = x;\n        }\n    }\n}\n"
Line 3328
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3328 always 3328
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3328 always 3328
  code always "void f(std::vector<int> v) {\n    if (v.size() == 3) {\n        if (v.size() == 1) {\n            int x = 1;\n            int a = x;\n        }\n    }\n}\n"
  5U always 5
  1 always 1
Line 3334
  = always "int f(int x, int y) {\n    if (x!=0) {}\n      return y/x;\n}"
  "int f(int x, int y) {\n    if (x!=0) {}\n      return y/x;\n}" always "int f(int x, int y) {\n    if (x!=0) {}\n      return y/x;\n}"
Line 3338
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3338 always 3338
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3338 always 3338
  code always "int f(int x, int y) {\n    if (x!=0) {}\n      return y/x;\n}"
  3U always 3
  0 always 0
Line 3340
  = always "int f(int x, int y) {\n    if (!!(x != 0)) {\n      return y/x;\n}\n}"
  "int f(int x, int y) {\n    if (!!(x != 0)) {\n      return y/x;\n}\n}" always "int f(int x, int y) {\n    if (!!(x != 0)) {\n      return y/x;\n}\n}"
Line 3345
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3345 always 3345
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3345 always 3345
  code always "int f(int x, int y) {\n    if (!!(x != 0)) {\n      return y/x;\n}\n}"
  3U always 3
  0 always 0
Line 3347
  = always "int f(int x, int y) {\n    if (!!!(x != 0)) {\n      return y/x;\n}\n}"
  "int f(int x, int y) {\n    if (!!!(x != 0)) {\n      return y/x;\n}\n}" always "int f(int x, int y) {\n    if (!!!(x != 0)) {\n      return y/x;\n}\n}"
Line 3352
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3352 always 3352
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3352 always 3352
  code always "int f(int x, int y) {\n    if (!!!(x != 0)) {\n      return y/x;\n}\n}"
  3U always 3
  0 always 0
Line 3354
  = always "int f(int x, int y) {\n    if (!!!!(x != 0)) {\n      return y/x;\n}\n}"
  "int f(int x, int y) {\n    if (!!!!(x != 0)) {\n      return y/x;\n}\n}" always "int f(int x, int y) {\n    if (!!!!(x != 0)) {\n      return y/x;\n}\n}"
Line 3359
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3359 always 3359
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3359 always 3359
  code always "int f(int x, int y) {\n    if (!!!!(x != 0)) {\n      return y/x;\n}\n}"
  3U always 3
  0 always 0
Line 3365
  = always "void f() {\n    int x = 123;\n    x += 43;\n    return x;\n}"
  "void f() {\n    int x = 123;\n    x += 43;\n    return x;\n}" always "void f() {\n    int x = 123;\n    x += 43;\n    return x;\n}"
Line 3370
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3370 always 3370
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3370 always 3370
  code always "void f() {\n    int x = 123;\n    x += 43;\n    return x;\n}"
  4U always 4
  166 always 166
Line 3371
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3371 always 3371
  "2,Assignment 'x=123', assigned value is 123\n3,Compound assignment '+=', assigned value is 166\n" always "2,Assignment 'x=123', assigned value is 123\n3,Compound assignment '+=', assigned value is 166\n"
  4U always 4
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3371 always 3371
Line 3375
  = always "void f() {\n    int x = 123;\n    x /= 0;\n    return x;\n}"
  "void f() {\n    int x = 123;\n    x /= 0;\n    return x;\n}" always "void f() {\n    int x = 123;\n    x /= 0;\n    return x;\n}"
Line 3380
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3380 always 3380
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3380 always 3380
  code always "void f() {\n    int x = 123;\n    x /= 0;\n    return x;\n}"
  4U always 4
  123 always 123
Line 3382
  = always "void f() {\n    float x = 123.45;\n    x += 67;\n    return x;\n}"
  "void f() {\n    float x = 123.45;\n    x += 67;\n    return x;\n}" always "void f() {\n    float x = 123.45;\n    x += 67;\n    return x;\n}"
Line 3387
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3387 always 3387
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3387 always 3387
  code always "void f() {\n    float x = 123.45;\n    x += 67;\n    return x;\n}"
  4U always 4
  123.45F always 123.45
  + always 190.45
  67 always 67
  0.01F always 0.01
Line 3389
  = always "void f() {\n    int x = 123;\n    x >>= 1;\n    return x;\n}"
  "void f() {\n    int x = 123;\n    x >>= 1;\n    return x;\n}" always "void f() {\n    int x = 123;\n    x >>= 1;\n    return x;\n}"
Line 3394
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3394 always 3394
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3394 always 3394
  code always "void f() {\n    int x = 123;\n    x >>= 1;\n    return x;\n}"
  4U always 4
  61 always 61
Line 3396
  = always "void f() {\n    int x = 123;\n    x <<= 1;\n    return x;\n}"
  "void f() {\n    int x = 123;\n    x <<= 1;\n    return x;\n}" always "void f() {\n    int x = 123;\n    x <<= 1;\n    return x;\n}"
Line 3401
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3401 always 3401
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3401 always 3401
  code always "void f() {\n    int x = 123;\n    x <<= 1;\n    return x;\n}"
  4U always 4
  246 always 246
Line 3407
  = always "void f(int x = 0) {\n  bool zero(x==0);\n  if (zero) a = x;\n  else b = x;\n}"
  "void f(int x = 0) {\n  bool zero(x==0);\n  if (zero) a = x;\n  else b = x;\n}" always "void f(int x = 0) {\n  bool zero(x==0);\n  if (zero) a = x;\n  else b = x;\n}"
Line 3412
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3412 always 3412
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3412 always 3412
  code always "void f(int x = 0) {\n  bool zero(x==0);\n  if (zero) a = x;\n  else b = x;\n}"
  3U always 3
  0 always 0
Line 3413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3413 always 3413
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3413 always 3413
  4U always 4
  0 always 0
Line 3415
  = always "int g();\nint f(bool i, bool j) {\n    if (i && j) {}\n    else {\n        int x = 0;\n        if (i)\n            x = g();\n        return x;\n    }\n    return 0;\n}\n"
  "int g();\nint f(bool i, bool j) {\n    if (i && j) {}\n    else {\n        int x = 0;\n        if (i)\n            x = g();\n        return x;\n    }\n    return 0;\n}\n" always "int g();\nint f(bool i, bool j) {\n    if (i && j) {}\n    else {\n        int x = 0;\n        if (i)\n            x = g();\n        return x;\n    }\n    return 0;\n}\n"
Line 3426
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3426 always 3426
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3426 always 3426
  code always "int g();\nint f(bool i, bool j) {\n    if (i && j) {}\n    else {\n        int x = 0;\n        if (i)\n            x = g();\n        return x;\n    }\n    return 0;\n}\n"
  8U always 8
  0 always 0
Line 3427
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3427 always 3427
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3427 always 3427
  8U always 8
  0 always 0
Line 3433
  = always "void f(bool b) {\n  int x = 0;\n  if (b) x = 1;\n  else b = x;\n}"
  "void f(bool b) {\n  int x = 0;\n  if (b) x = 1;\n  else b = x;\n}" always "void f(bool b) {\n  int x = 0;\n  if (b) x = 1;\n  else b = x;\n}"
Line 3438
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3438 always 3438
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3438 always 3438
  code always "void f(bool b) {\n  int x = 0;\n  if (b) x = 1;\n  else b = x;\n}"
  4U always 4
  0 always 0
Line 3440
  = always "void f(int i) {\n    int x = 0;\n    if (i == 0)\n        x = 1;\n    else if (!x && i == 1)\n        int b = x;\n}\n"
  "void f(int i) {\n    int x = 0;\n    if (i == 0)\n        x = 1;\n    else if (!x && i == 1)\n        int b = x;\n}\n" always "void f(int i) {\n    int x = 0;\n    if (i == 0)\n        x = 1;\n    else if (!x && i == 1)\n        int b = x;\n}\n"
Line 3447
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3447 always 3447
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3447 always 3447
  code always "void f(int i) {\n    int x = 0;\n    if (i == 0)\n        x = 1;\n    else if (!x && i == 1)\n        int b = x;\n}\n"
  5U always 5
  0 always 0
Line 3448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3448 always 3448
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3448 always 3448
  6U always 6
  0 always 0
Line 3454
  = always "class C {\npublic:\n  C(int &i);\n};\nint f() {\n  int x=1;\n  C c(x);\n  return x;\n}"
  "class C {\npublic:\n  C(int &i);\n};\nint f() {\n  int x=1;\n  C c(x);\n  return x;\n}" always "class C {\npublic:\n  C(int &i);\n};\nint f() {\n  int x=1;\n  C c(x);\n  return x;\n}"
Line 3463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3463 always 3463
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3463 always 3463
  code always "class C {\npublic:\n  C(int &i);\n};\nint f() {\n  int x=1;\n  C c(x);\n  return x;\n}"
  8U always 8
  1 always 1
Line 3465
  = always "class C {\npublic:\n  C(const int &i);\n};\nint f() {\n  int x=1;\n  C c(x);\n  return x;\n}"
  "class C {\npublic:\n  C(const int &i);\n};\nint f() {\n  int x=1;\n  C c(x);\n  return x;\n}" always "class C {\npublic:\n  C(const int &i);\n};\nint f() {\n  int x=1;\n  C c(x);\n  return x;\n}"
Line 3474
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3474 always 3474
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3474 always 3474
  code always "class C {\npublic:\n  C(const int &i);\n};\nint f() {\n  int x=1;\n  C c(x);\n  return x;\n}"
  8U always 8
  1 always 1
Line 3476
  = always "int f(int *);\nint g() {\n  const int a = 1;\n  int x = 11;\n  c = (a && f(&x));\n  if (x == 42) {}\n}"
  "int f(int *);\nint g() {\n  const int a = 1;\n  int x = 11;\n  c = (a && f(&x));\n  if (x == 42) {}\n}" always "int f(int *);\nint g() {\n  const int a = 1;\n  int x = 11;\n  c = (a && f(&x));\n  if (x == 42) {}\n}"
Line 3483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3483 always 3483
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3483 always 3483
  code always "int f(int *);\nint g() {\n  const int a = 1;\n  int x = 11;\n  c = (a && f(&x));\n  if (x == 42) {}\n}"
  6U always 6
  11 always 11
Line 3485
  = always "void f() {\n    int x = 1;\n    exit(x);\n}\n"
  "void f() {\n    int x = 1;\n    exit(x);\n}\n" always "void f() {\n    int x = 1;\n    exit(x);\n}\n"
Line 3489
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3489 always 3489
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3489 always 3489
  code always "void f() {\n    int x = 1;\n    exit(x);\n}\n"
  3U always 3
  1 always 1
Line 3491
  = always "void f(jmp_buf env) {\n    int x = 1;\n    longjmp(env, x);\n}\n"
  "void f(jmp_buf env) {\n    int x = 1;\n    longjmp(env, x);\n}\n" always "void f(jmp_buf env) {\n    int x = 1;\n    longjmp(env, x);\n}\n"
Line 3495
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3495 always 3495
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3495 always 3495
  code always "void f(jmp_buf env) {\n    int x = 1;\n    longjmp(env, x);\n}\n"
  3U always 3
  1 always 1
Line 3501
  = always "int f() {\n  int x=5;\n  a = b ? init1(&x) : init2(&x);\n  return 1 + x;\n}"
  "int f() {\n  int x=5;\n  a = b ? init1(&x) : init2(&x);\n  return 1 + x;\n}" always "int f() {\n  int x=5;\n  a = b ? init1(&x) : init2(&x);\n  return 1 + x;\n}"
Line 3506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3506 always 3506
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3506 always 3506
  code always "int f() {\n  int x=5;\n  a = b ? init1(&x) : init2(&x);\n  return 1 + x;\n}"
  3U always 3
  5 always 5
Line 3507
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3507 always 3507
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3507 always 3507
  4U always 4
  5 always 5
Line 3509
  = always "int f(int *p) {\n  if (p) return;\n  x = *p ? : 1;\n}"
  "int f(int *p) {\n  if (p) return;\n  x = *p ? : 1;\n}" always "int f(int *p) {\n  if (p) return;\n  x = *p ? : 1;\n}"
Line 3513
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3513 always 3513
  code always "int f(int *p) {\n  if (p) return;\n  x = *p ? : 1;\n}"
  1U always 1
  0 always 0
Line 3515
  = always "void f(int a) {\n    int x = 13;\n    if (a == 1) x = 26;\n    return a == 1 ? x : 0;\n}"
  "void f(int a) {\n    int x = 13;\n    if (a == 1) x = 26;\n    return a == 1 ? x : 0;\n}" always "void f(int a) {\n    int x = 13;\n    if (a == 1) x = 26;\n    return a == 1 ? x : 0;\n}"
Line 3520
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3520 always 3520
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3520 always 3520
  code always "void f(int a) {\n    int x = 13;\n    if (a == 1) x = 26;\n    return a == 1 ? x : 0;\n}"
  4U always 4
  13 always 13
Line 3521
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3521 always 3521
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3521 always 3521
  4U always 4
  26 always 26
Line 3523
  = always "void f(int* i) {\n    if (!i) return;\n    int * x = *i == 1 ? i : nullptr;\n    int* a = x;\n}\n"
  "void f(int* i) {\n    if (!i) return;\n    int * x = *i == 1 ? i : nullptr;\n    int* a = x;\n}\n" always "void f(int* i) {\n    if (!i) return;\n    int * x = *i == 1 ? i : nullptr;\n    int* a = x;\n}\n"
Line 3528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3528 always 3528
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3528 always 3528
  code always "void f(int* i) {\n    if (!i) return;\n    int * x = *i == 1 ? i : nullptr;\n    int* a = x;\n}\n"
  4U always 4
  0 always 0
Line 3529
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3529 always 3529
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3529 always 3529
  4U always 4
  0 always 0
Line 3535
  = always "void f() {\n  int x=1;\n  auto f = [&](){ a=x; }\n  x = 2;\n  f();\n}"
  "void f() {\n  int x=1;\n  auto f = [&](){ a=x; }\n  x = 2;\n  f();\n}" always "void f() {\n  int x=1;\n  auto f = [&](){ a=x; }\n  x = 2;\n  f();\n}"
Line 3541
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3541 always 3541
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3541 always 3541
  code always "void f() {\n  int x=1;\n  auto f = [&](){ a=x; }\n  x = 2;\n  f();\n}"
  3U always 3
  1 always 1
Line 3542
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3542 always 3542
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3542 always 3542
  3U always 3
  2 always 2
Line 3544
  = always "void f() {\n  int x=3;\n  auto f = [&](){ a=x; }\n  f();\n}"
  "void f() {\n  int x=3;\n  auto f = [&](){ a=x; }\n  f();\n}" always "void f() {\n  int x=3;\n  auto f = [&](){ a=x; }\n  f();\n}"
Line 3549
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3549 always 3549
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3549 always 3549
  code always "void f() {\n  int x=3;\n  auto f = [&](){ a=x; }\n  f();\n}"
  3U always 3
  3 always 3
Line 3551
  = always "void f() {\n  int x=3;\n  auto f = [&](){ x++; }\n  x = 1;\n  f();\n  int a = x;\n}"
  "void f() {\n  int x=3;\n  auto f = [&](){ x++; }\n  x = 1;\n  f();\n  int a = x;\n}" always "void f() {\n  int x=3;\n  auto f = [&](){ x++; }\n  x = 1;\n  f();\n  int a = x;\n}"
Line 3558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3558 always 3558
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3558 always 3558
  code always "void f() {\n  int x=3;\n  auto f = [&](){ x++; }\n  x = 1;\n  f();\n  int a = x;\n}"
  6U always 6
  1 always 1
Line 3559
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3559 always 3559
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3559 always 3559
  6U always 6
  3 always 3
Line 3565
  = always "void g1();\nvoid g2();\nvoid f()\n {    bool x = false;\n    try {\n        g1();\n        x = true;\n        g2();\n    }\n    catch (...) {\n        if (x) {}\n    }\n}\n"
  "void g1();\nvoid g2();\nvoid f()\n {    bool x = false;\n    try {\n        g1();\n        x = true;\n        g2();\n    }\n    catch (...) {\n        if (x) {}\n    }\n}\n" always "void g1();\nvoid g2();\nvoid f()\n {    bool x = false;\n    try {\n        g1();\n        x = true;\n        g2();\n    }\n    catch (...) {\n        if (x) {}\n    }\n}\n"
Line 3578
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3578 always 3578
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3578 always 3578
  code always "void g1();\nvoid g2();\nvoid f()\n {    bool x = false;\n    try {\n        g1();\n        x = true;\n        g2();\n    }\n    catch (...) {\n        if (x) {}\n    }\n}\n"
  11U always 11
  1 always 1
Line 3579
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3579 always 3579
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3579 always 3579
  11U always 11
  1 always 1
Line 3581
  = always "void g1();\nvoid g2();\nvoid f()\n {    bool x = true;\n    try {\n        g1();\n        g2();\n    }\n    catch (...) {\n        if (x) {}\n    }\n}\n"
  "void g1();\nvoid g2();\nvoid f()\n {    bool x = true;\n    try {\n        g1();\n        g2();\n    }\n    catch (...) {\n        if (x) {}\n    }\n}\n" always "void g1();\nvoid g2();\nvoid f()\n {    bool x = true;\n    try {\n        g1();\n        g2();\n    }\n    catch (...) {\n        if (x) {}\n    }\n}\n"
Line 3593
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3593 always 3593
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3593 always 3593
  code always "void g1();\nvoid g2();\nvoid f()\n {    bool x = true;\n    try {\n        g1();\n        g2();\n    }\n    catch (...) {\n        if (x) {}\n    }\n}\n"
  10U always 10
  1 always 1
Line 3599
  = always "int f(int a) {\n  int x = a & 0x80;\n  return x;\n}"
  "int f(int a) {\n  int x = a & 0x80;\n  return x;\n}" always "int f(int a) {\n  int x = a & 0x80;\n  return x;\n}"
Line 3603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3603 always 3603
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3603 always 3603
  code always "int f(int a) {\n  int x = a & 0x80;\n  return x;\n}"
  3U always 3
  0 always 0
Line 3604
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3604 always 3604
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3604 always 3604
  3U always 3
  0x80 always 128
Line 3606
  = always "int f(int a) {\n  int x = a & 0x80 ? 1 : 2;\n  return x;\n}"
  "int f(int a) {\n  int x = a & 0x80 ? 1 : 2;\n  return x;\n}" always "int f(int a) {\n  int x = a & 0x80 ? 1 : 2;\n  return x;\n}"
Line 3610
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3610 always 3610
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3610 always 3610
  code always "int f(int a) {\n  int x = a & 0x80 ? 1 : 2;\n  return x;\n}"
  3U always 3
  0 always 0
Line 3611
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3611 always 3611
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3611 always 3611
  3U always 3
  0x80 always 128
Line 3613
  = always "int f() {\n  int x = (19 - 3) & 15;\n  return x;\n}"
  "int f() {\n  int x = (19 - 3) & 15;\n  return x;\n}" always "int f() {\n  int x = (19 - 3) & 15;\n  return x;\n}"
Line 3617
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3617 always 3617
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3617 always 3617
  code always "int f() {\n  int x = (19 - 3) & 15;\n  return x;\n}"
  3U always 3
  0 always 0
Line 3618
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3618 always 3618
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3618 always 3618
  3U always 3
  16 always 16
Line 3624
  = always "void foo() {\n    bool valid = f1();\n    if (!valid) return;\n    std::tie(endVal, valid) = f2();\n    bool x = !valid;    bool b = x;}\n"
  "void foo() {\n    bool valid = f1();\n    if (!valid) return;\n    std::tie(endVal, valid) = f2();\n    bool x = !valid;    bool b = x;}\n" always "void foo() {\n    bool valid = f1();\n    if (!valid) return;\n    std::tie(endVal, valid) = f2();\n    bool x = !valid;    bool b = x;}\n"
Line 3631
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3631 always 3631
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3631 always 3631
  code always "void foo() {\n    bool valid = f1();\n    if (!valid) return;\n    std::tie(endVal, valid) = f2();\n    bool x = !valid;    bool b = x;}\n"
  6U always 6
  1 always 1
Line 3638
  = always "int f() {\n    const int i = 2;\n    const int x = i+1;\n    goto end;\nend:\n    return x;\n}\n"
  "int f() {\n    const int i = 2;\n    const int x = i+1;\n    goto end;\nend:\n    return x;\n}\n" always "int f() {\n    const int i = 2;\n    const int x = i+1;\n    goto end;\nend:\n    return x;\n}\n"
Line 3645
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3645 always 3645
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3645 always 3645
  code always "int f() {\n    const int i = 2;\n    const int x = i+1;\n    goto end;\nend:\n    return x;\n}\n"
  6U always 6
  3 always 3
Line 3647
  = always "int f() {\n    int i = 2;\n    const int& x = i;\n    i++;\n    return x;\n}\n"
  "int f() {\n    int i = 2;\n    const int& x = i;\n    i++;\n    return x;\n}\n" always "int f() {\n    int i = 2;\n    const int& x = i;\n    i++;\n    return x;\n}\n"
Line 3653
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3653 always 3653
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3653 always 3653
  code always "int f() {\n    int i = 2;\n    const int& x = i;\n    i++;\n    return x;\n}\n"
  6U always 6
  2 always 2
Line 3655
  = always "int f(int a, int b, int c) {\n    const int i = 2;\n    const int x = i+1;\n    if (a == x) { return 0; }\n    if (b == x) { return 0; }\n    if (c == x) { return 0; }\n    return x;\n}\n"
  "int f(int a, int b, int c) {\n    const int i = 2;\n    const int x = i+1;\n    if (a == x) { return 0; }\n    if (b == x) { return 0; }\n    if (c == x) { return 0; }\n    return x;\n}\n" always "int f(int a, int b, int c) {\n    const int i = 2;\n    const int x = i+1;\n    if (a == x) { return 0; }\n    if (b == x) { return 0; }\n    if (c == x) { return 0; }\n    return x;\n}\n"
Line 3663
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3663 always 3663
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3663 always 3663
  code always "int f(int a, int b, int c) {\n    const int i = 2;\n    const int x = i+1;\n    if (a == x) { return 0; }\n    if (b == x) { return 0; }\n    if (c == x) { return 0; }\n    return x;\n}\n"
  7U always 7
  3 always 3
Line 3665
  = always "int f(int a, int b, int c) {\n    const int i = 2;\n    const int y = i+1;\n    const int& x = y;\n    if (a == x) { return 0; }\n    if (b == x) { return 0; }\n    if (c == x) { return 0; }\n    return x;\n}\n"
  "int f(int a, int b, int c) {\n    const int i = 2;\n    const int y = i+1;\n    const int& x = y;\n    if (a == x) { return 0; }\n    if (b == x) { return 0; }\n    if (c == x) { return 0; }\n    return x;\n}\n" always "int f(int a, int b, int c) {\n    const int i = 2;\n    const int y = i+1;\n    const int& x = y;\n    if (a == x) { return 0; }\n    if (b == x) { return 0; }\n    if (c == x) { return 0; }\n    return x;\n}\n"
Line 3674
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3674 always 3674
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3674 always 3674
  code always "int f(int a, int b, int c) {\n    const int i = 2;\n    const int y = i+1;\n    const int& x = y;\n    if (a == x) { return 0; }\n    if (b == x) { return 0; }\n    if (c == x) { return 0; }\n    return x;\n}\n"
  8U always 8
  3 always 3
Line 3676
  = always "int f(int a, int b, int c, int x) {\n    const int i = 2;\n    const int y = i+1;\n    if (a == y) { return 0; }\n    if (b == y) { return 0; }\n    if (c == y) { return 0; }\n    if (x == y)\n        return x;\n    return 0;\n}\n"
  "int f(int a, int b, int c, int x) {\n    const int i = 2;\n    const int y = i+1;\n    if (a == y) { return 0; }\n    if (b == y) { return 0; }\n    if (c == y) { return 0; }\n    if (x == y)\n        return x;\n    return 0;\n}\n" always "int f(int a, int b, int c, int x) {\n    const int i = 2;\n    const int y = i+1;\n    if (a == y) { return 0; }\n    if (b == y) { return 0; }\n    if (c == y) { return 0; }\n    if (x == y)\n        return x;\n    return 0;\n}\n"
Line 3686
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3686 always 3686
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3686 always 3686
  code always "int f(int a, int b, int c, int x) {\n    const int i = 2;\n    const int y = i+1;\n    if (a == y) { return 0; }\n    if (b == y) { return 0; }\n    if (c == y) { return 0; }\n    if (x == y)\n        return x;\n    return 0;\n}\n"
  8U always 8
  3 always 3
Line 3693
  = always "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    for (;;) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
  "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    for (;;) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n" always "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    for (;;) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
Line 3706
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3706 always 3706
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3706 always 3706
  code always "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    for (;;) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
  11U always 11
  3 always 3
Line 3708
  = always "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    while (true) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
  "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    while (true) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n" always "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    while (true) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
Line 3721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3721 always 3721
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3721 always 3721
  code always "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    while (true) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
  11U always 11
  3 always 3
Line 3723
  = always "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    if (true) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
  "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    if (true) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n" always "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    if (true) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
Line 3736
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3736 always 3736
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3736 always 3736
  code always "int g();\nvoid f() {\n    int x = 3;\n    int kk = 11;\n    if (true) {\n        if (kk > 10) {\n            kk = 0;\n            x = g();\n        }\n        kk++;\n        int a = x;\n    }\n}\n"
  11U always 11
  3 always 3
Line 3743
  settings always symbolic=(settingsTmp)
  = always 32
  32 always 32
Line 3744
  = always 64
  64 always 64
Line 3745
  2 always 2
Line 3747
  = always "int f(int a) {\n  int x = (a & 0xff) >> 16;\n  return x;\n}"
  "int f(int a) {\n  int x = (a & 0xff) >> 16;\n  return x;\n}" always "int f(int a) {\n  int x = (a & 0xff) >> 16;\n  return x;\n}"
Line 3751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3751 always 3751
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3751 always 3751
  code always "int f(int a) {\n  int x = (a & 0xff) >> 16;\n  return x;\n}"
  3U always 3
  0 always 0
Line 3753
  = always "int f(unsigned int a) {\n  int x = (a % 123) >> 16;\n  return x;\n}"
  "int f(unsigned int a) {\n  int x = (a % 123) >> 16;\n  return x;\n}" always "int f(unsigned int a) {\n  int x = (a % 123) >> 16;\n  return x;\n}"
Line 3757
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3757 always 3757
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3757 always 3757
  code always "int f(unsigned int a) {\n  int x = (a % 123) >> 16;\n  return x;\n}"
  3U always 3
  0 always 0
Line 3759
  = always "int f(int y) {\n  int x = (y & 0xFFFFFFF) >> 31;\n  return x;\n}"
  "int f(int y) {\n  int x = (y & 0xFFFFFFF) >> 31;\n  return x;\n}" always "int f(int y) {\n  int x = (y & 0xFFFFFFF) >> 31;\n  return x;\n}"
Line 3763
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3763 always 3763
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3763 always 3763
  code always "int f(int y) {\n  int x = (y & 0xFFFFFFF) >> 31;\n  return x;\n}"
  3u always 3
  0 always 0
Line 3765
  = always "int f(int y) {\n  int x = (y & 0xFFFFFFF) >> 32;\n  return x;\n}"
  "int f(int y) {\n  int x = (y & 0xFFFFFFF) >> 32;\n  return x;\n}" always "int f(int y) {\n  int x = (y & 0xFFFFFFF) >> 32;\n  return x;\n}"
Line 3769
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3769 always 3769
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3769 always 3769
  code always "int f(int y) {\n  int x = (y & 0xFFFFFFF) >> 32;\n  return x;\n}"
  3u always 3
  0 always 0
Line 3771
  = always "int f(short y) {\n  int x = (y & 0xFFFFFF) >> 31;\n  return x;\n}"
  "int f(short y) {\n  int x = (y & 0xFFFFFF) >> 31;\n  return x;\n}" always "int f(short y) {\n  int x = (y & 0xFFFFFF) >> 31;\n  return x;\n}"
Line 3775
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3775 always 3775
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3775 always 3775
  code always "int f(short y) {\n  int x = (y & 0xFFFFFF) >> 31;\n  return x;\n}"
  3u always 3
  0 always 0
Line 3777
  = always "int f(short y) {\n  int x = (y & 0xFFFFFF) >> 32;\n  return x;\n}"
  "int f(short y) {\n  int x = (y & 0xFFFFFF) >> 32;\n  return x;\n}" always "int f(short y) {\n  int x = (y & 0xFFFFFF) >> 32;\n  return x;\n}"
Line 3781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3781 always 3781
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3781 always 3781
  code always "int f(short y) {\n  int x = (y & 0xFFFFFF) >> 32;\n  return x;\n}"
  3u always 3
  0 always 0
Line 3783
  = always "int f(long y) {\n  int x = (y & 0xFFFFFF) >> 63;\n  return x;\n}"
  "int f(long y) {\n  int x = (y & 0xFFFFFF) >> 63;\n  return x;\n}" always "int f(long y) {\n  int x = (y & 0xFFFFFF) >> 63;\n  return x;\n}"
Line 3787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3787 always 3787
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3787 always 3787
  code always "int f(long y) {\n  int x = (y & 0xFFFFFF) >> 63;\n  return x;\n}"
  3u always 3
  0 always 0
Line 3789
  = always "int f(long y) {\n  int x = (y & 0xFFFFFF) >> 64;\n  return x;\n}"
  "int f(long y) {\n  int x = (y & 0xFFFFFF) >> 64;\n  return x;\n}" always "int f(long y) {\n  int x = (y & 0xFFFFFF) >> 64;\n  return x;\n}"
Line 3793
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3793 always 3793
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3793 always 3793
  code always "int f(long y) {\n  int x = (y & 0xFFFFFF) >> 64;\n  return x;\n}"
  3u always 3
  0 always 0
Line 3795
  = always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 63;\n  return x;\n}"
  "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 63;\n  return x;\n}" always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 63;\n  return x;\n}"
Line 3799
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3799 always 3799
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3799 always 3799
  code always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 63;\n  return x;\n}"
  3u always 3
  0 always 0
Line 3801
  = always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 64;\n  return x;\n}"
  "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 64;\n  return x;\n}" always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 64;\n  return x;\n}"
Line 3805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3805 always 3805
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3805 always 3805
  code always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 64;\n  return x;\n}"
  3u always 3
  0 always 0
Line 3807
  = always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 121;\n  return x;\n}"
  "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 121;\n  return x;\n}" always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 121;\n  return x;\n}"
Line 3811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3811 always 3811
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3811 always 3811
  code always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 121;\n  return x;\n}"
  3u always 3
  0 always 0
Line 3813
  = always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 128;\n  return x;\n}"
  "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 128;\n  return x;\n}" always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 128;\n  return x;\n}"
Line 3817
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3817 always 3817
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3817 always 3817
  code always "int f(long long y) {\n  int x = (y & 0xFFFFFF) >> 128;\n  return x;\n}"
  3u always 3
  0 always 0
Line 3826
  = always "void f() {\n  struct Foo foo;\n  foo.x = 1;\n  x = 0 + foo.x;\n}"
  "void f() {\n  struct Foo foo;\n  foo.x = 1;\n  x = 0 + foo.x;\n}" always "void f() {\n  struct Foo foo;\n  foo.x = 1;\n  x = 0 + foo.x;\n}"
Line 3831
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3831 always 3831
  code always "void f() {\n  struct Foo foo;\n  foo.x = 1;\n  x = 0 + foo.x;\n}"
  "+" always "+"
Line 3832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3832 always 3832
  1U always 1
  ( always !<=-1
Line 3833
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3833 always 3833
  true always 1
Line 3834
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3834 always 3834
  true always 1
Line 3835
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3835 always 3835
  1 always 1
Line 3837
  = always "void f() {\n  S s;\n  s.x = 1;\n  int y = 10;\n  while (s.x < y)\n    s.x++;\n}"
  "void f() {\n  S s;\n  s.x = 1;\n  int y = 10;\n  while (s.x < y)\n    s.x++;\n}" always "void f() {\n  S s;\n  s.x = 1;\n  int y = 10;\n  while (s.x < y)\n    s.x++;\n}"
Line 3844
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3844 always 3844
  code always "void f() {\n  S s;\n  s.x = 1;\n  int y = 10;\n  while (s.x < y)\n    s.x++;\n}"
  "<" always "<"
Line 3845
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3845 always 3845
  1 always 1
  ( always !<=-1
Line 3846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3846 always 3846
Line 3847
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3847 always 3847
  1 always 1
Line 3849
  = always "void f() {\n  S s;\n  s.x = 37;\n  int y = 10;\n  while (s.x < y)\n    y--;\n}"
  "void f() {\n  S s;\n  s.x = 37;\n  int y = 10;\n  while (s.x < y)\n    y--;\n}" always "void f() {\n  S s;\n  s.x = 37;\n  int y = 10;\n  while (s.x < y)\n    y--;\n}"
Line 3856
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3856 always 3856
  code always "void f() {\n  S s;\n  s.x = 37;\n  int y = 10;\n  while (s.x < y)\n    y--;\n}"
  ". x <" always ". x <"
Line 3857
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3857 always 3857
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
  && always {!<=-1,!>=2}
  values always size=1
  && always {!<=-1,!>=2}
  values always size=1
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  37 always 37
Line 3862
  = always "void f() {\n  Hints hints;\n  hints.x = 1;\n  if (foo)\n    hints.x = 2;\n  x = 0 + foo.x;\n}"
  "void f() {\n  Hints hints;\n  hints.x = 1;\n  if (foo)\n    hints.x = 2;\n  x = 0 + foo.x;\n}" always "void f() {\n  Hints hints;\n  hints.x = 1;\n  if (foo)\n    hints.x = 2;\n  x = 0 + foo.x;\n}"
Line 3869
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3869 always 3869
  code always "void f() {\n  Hints hints;\n  hints.x = 1;\n  if (foo)\n    hints.x = 2;\n  x = 0 + foo.x;\n}"
  "+" always "+"
Line 3870
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3870 always 3870
  2U always 2
  0U always 0
  ( always !<=-1
Line 3873
  = always "bool dostuff(const char *x, const char *y);\nvoid fun(char *s, int *b) {\n  for (int i = 0; i < 42; ++i) {\n    if (dostuff(s, \"1\")) {\n      *b = 1;\n      break;\n    }\n  }\n  if (*b > 0) {\n  }\n}"
  "bool dostuff(const char *x, const char *y);\nvoid fun(char *s, int *b) {\n  for (int i = 0; i < 42; ++i) {\n    if (dostuff(s, \"1\")) {\n      *b = 1;\n      break;\n    }\n  }\n  if (*b > 0) {\n  }\n}" always "bool dostuff(const char *x, const char *y);\nvoid fun(char *s, int *b) {\n  for (int i = 0; i < 42; ++i) {\n    if (dostuff(s, \"1\")) {\n      *b = 1;\n      break;\n    }\n  }\n  if (*b > 0) {\n  }\n}"
Line 3884
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3884 always 3884
  code always "bool dostuff(const char *x, const char *y);\nvoid fun(char *s, int *b) {\n  for (int i = 0; i < 42; ++i) {\n    if (dostuff(s, \"1\")) {\n      *b = 1;\n      break;\n    }\n  }\n  if (*b > 0) {\n  }\n}"
  ">" always ">"
Line 3885
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3885 always 3885
  1 always 1
  ( always !<=-1
Line 3886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3886 always 3886
Line 3887
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3887 always 3887
  1 always 1
Line 3889
  = always "void foo() {\n    struct ISO_PVD_s pvd;\n    pvd.descr_type = 0xff;\n    do {\n        if (pvd.descr_type == 0xff) {}\n        dostuff(&pvd);\n    } while (condition)\n}"
  "void foo() {\n    struct ISO_PVD_s pvd;\n    pvd.descr_type = 0xff;\n    do {\n        if (pvd.descr_type == 0xff) {}\n        dostuff(&pvd);\n    } while (condition)\n}" always "void foo() {\n    struct ISO_PVD_s pvd;\n    pvd.descr_type = 0xff;\n    do {\n        if (pvd.descr_type == 0xff) {}\n        dostuff(&pvd);\n    } while (condition)\n}"
Line 3897
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3897 always 3897
  code always "void foo() {\n    struct ISO_PVD_s pvd;\n    pvd.descr_type = 0xff;\n    do {\n        if (pvd.descr_type == 0xff) {}\n        dostuff(&pvd);\n    } while (condition)\n}"
  "==" always "=="
Line 3898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3898 always 3898
  1 always 1
  ( always !<=-1
Line 3899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3899 always 3899
Line 3900
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3900 always 3900
  1 always 1
Line 3903
  = always "struct S { int x; };\nvoid foo(struct S s) {\n    for (s.x = 0; s.x < 127; s.x++) {}\n}"
  "struct S { int x; };\nvoid foo(struct S s) {\n    for (s.x = 0; s.x < 127; s.x++) {}\n}" always "struct S { int x; };\nvoid foo(struct S s) {\n    for (s.x = 0; s.x < 127; s.x++) {}\n}"
Line 3907
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3907 always 3907
  code always "struct S { int x; };\nvoid foo(struct S s) {\n    for (s.x = 0; s.x < 127; s.x++) {}\n}"
  "<" always "<"
Line 3908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3908 always 3908
  true always 1
  ( always {!<=-1,!>=2}
Line 3913
  = always "void f(int x) {\n    a = x - 1;\n    switch (x) {\n    case 14: a=x+2; break;\n    };\n    a = x;\n}"
  "void f(int x) {\n    a = x - 1;\n    switch (x) {\n    case 14: a=x+2; break;\n    };\n    a = x;\n}" always "void f(int x) {\n    a = x - 1;\n    switch (x) {\n    case 14: a=x+2; break;\n    };\n    a = x;\n}"
Line 3920
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3920 always 3920
  true always 1
  ( always {!<=-1,!>=2}
  code always "void f(int x) {\n    a = x - 1;\n    switch (x) {\n    case 14: a=x+2; break;\n    };\n    a = x;\n}"
  2U always 2
  14 always 14
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3920 always 3920
Line 3921
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3921 always 3921
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  4U always 4
  14 always 14
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3921 always 3921
Line 3922
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3922 always 3922
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  6U always 6
  14 always 14
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3922 always 3922
Line 3924
  "-" always "-"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3924 always 3924
Line 3925
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3925 always 3925
  13 always 13
Line 3926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3926 always 3926
  ! always {!<=-1,!>=2}
Line 3928
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3928 always 3928
Line 3929
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3929 always 3929
  16 always 16
  0 always 0
Line 3930
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3930 always 3930
  true always 1
  false always 0
Line 3937
  = always "void f() {\n    for (int x = 0; x < 10; x++)\n        a[x] = 0;\n}"
  "void f() {\n    for (int x = 0; x < 10; x++)\n        a[x] = 0;\n}" always "void f() {\n    for (int x = 0; x < 10; x++)\n        a[x] = 0;\n}"
Line 3941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3941 always 3941
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3941 always 3941
  code always "void f() {\n    for (int x = 0; x < 10; x++)\n        a[x] = 0;\n}"
  3U always 3
  0 always 0
Line 3942
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3942 always 3942
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3942 always 3942
  3U always 3
  9 always 9
Line 3943
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3943 always 3943
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3943 always 3943
  3U always 3
  10 always 10
Line 3945
  = always "void f() {\n    int x;\n    for (x = 2; x < 1; x++)\n        a[x] = 0;\n    b = x;\n}"
  "void f() {\n    int x;\n    for (x = 2; x < 1; x++)\n        a[x] = 0;\n    b = x;\n}" always "void f() {\n    int x;\n    for (x = 2; x < 1; x++)\n        a[x] = 0;\n    b = x;\n}"
Line 3951
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3951 always 3951
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3951 always 3951
  code always "void f() {\n    int x;\n    for (x = 2; x < 1; x++)\n        a[x] = 0;\n    b = x;\n}"
  4U always 4
  2 always 2
Line 3952
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3952 always 3952
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3952 always 3952
  5U always 5
  2 always 2
Line 3954
  = always "void f() {\n    int x;\n    for (x = 2; x < 1; ++x)\n        a[x] = 0;\n    b = x;\n}"
  "void f() {\n    int x;\n    for (x = 2; x < 1; ++x)\n        a[x] = 0;\n    b = x;\n}" always "void f() {\n    int x;\n    for (x = 2; x < 1; ++x)\n        a[x] = 0;\n    b = x;\n}"
Line 3960
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3960 always 3960
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3960 always 3960
  code always "void f() {\n    int x;\n    for (x = 2; x < 1; ++x)\n        a[x] = 0;\n    b = x;\n}"
  4U always 4
  2 always 2
Line 3961
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3961 always 3961
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3961 always 3961
  5U always 5
  2 always 2
Line 3963
  = always "enum AB {A,B};\nvoid f() {\n    int x;\n    for (x = 1; x < B; ++x)\n        a[x] = 0;\n}"
  "enum AB {A,B};\nvoid f() {\n    int x;\n    for (x = 1; x < B; ++x)\n        a[x] = 0;\n}" always "enum AB {A,B};\nvoid f() {\n    int x;\n    for (x = 1; x < B; ++x)\n        a[x] = 0;\n}"
Line 3969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3969 always 3969
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3969 always 3969
  code always "enum AB {A,B};\nvoid f() {\n    int x;\n    for (x = 1; x < B; ++x)\n        a[x] = 0;\n}"
  5U always 5
  1 always 1
Line 3971
  = always "void f(int a) {\n    for (int x = a; x < 10; x++)\n        a[x] = 0;\n}"
  "void f(int a) {\n    for (int x = a; x < 10; x++)\n        a[x] = 0;\n}" always "void f(int a) {\n    for (int x = a; x < 10; x++)\n        a[x] = 0;\n}"
Line 3975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3975 always 3975
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3975 always 3975
  code always "void f(int a) {\n    for (int x = a; x < 10; x++)\n        a[x] = 0;\n}"
  3U always 3
  9 always 9
Line 3977
  = always "void f() {\n    for (int x = 0; x < 5; x += 2)\n        a[x] = 0;\n}"
  "void f() {\n    for (int x = 0; x < 5; x += 2)\n        a[x] = 0;\n}" always "void f() {\n    for (int x = 0; x < 5; x += 2)\n        a[x] = 0;\n}"
Line 3981
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3981 always 3981
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3981 always 3981
  code always "void f() {\n    for (int x = 0; x < 5; x += 2)\n        a[x] = 0;\n}"
  3U always 3
  0 always 0
Line 3982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3982 always 3982
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3982 always 3982
  3U always 3
  4 always 4
Line 3984
  = always "void f() {\n    for (int x = 0; x < 10; x = x + 2)\n        a[x] = 0;\n}"
  "void f() {\n    for (int x = 0; x < 10; x = x + 2)\n        a[x] = 0;\n}" always "void f() {\n    for (int x = 0; x < 10; x = x + 2)\n        a[x] = 0;\n}"
Line 3988
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3988 always 3988
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3988 always 3988
  code always "void f() {\n    for (int x = 0; x < 10; x = x + 2)\n        a[x] = 0;\n}"
  3U always 3
  0 always 0
Line 3989
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3989 always 3989
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3989 always 3989
  3U always 3
  8 always 8
Line 3990
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3990 always 3990
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3990 always 3990
  3U always 3
  10 always 10
Line 3992
  = always "void f() {\n    for (int x = 0; x < 10; x = x / 0)\n        a[x] = 0;\n}"
  "void f() {\n    for (int x = 0; x < 10; x = x / 0)\n        a[x] = 0;\n}" always "void f() {\n    for (int x = 0; x < 10; x = x / 0)\n        a[x] = 0;\n}"
Line 3996
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3996 always 3996
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  3996 always 3996
  code always "void f() {\n    for (int x = 0; x < 10; x = x / 0)\n        a[x] = 0;\n}"
  3U always 3
  0 always 0
Line 3998
  = always "void f() {\n    for (int x = 0; x < 10; x++)\n        x<4 ?\n        a[x] : 0;\n}"
  "void f() {\n    for (int x = 0; x < 10; x++)\n        x<4 ?\n        a[x] : 0;\n}" always "void f() {\n    for (int x = 0; x < 10; x++)\n        x<4 ?\n        a[x] : 0;\n}"
Line 4003
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4003 always 4003
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4003 always 4003
  code always "void f() {\n    for (int x = 0; x < 10; x++)\n        x<4 ?\n        a[x] : 0;\n}"
  3U always 3
  0 always 0
Line 4004
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4004 always 4004
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4004 always 4004
  3U always 3
  9 always 9
Line 4005
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4005 always 4005
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4005 always 4005
  4U always 4
  9 always 9
Line 4007
  = always "void f() {\n    for (int x = 0; x < 10; x++)\n        x==0 ?\n        0 : a[x];\n}"
  "void f() {\n    for (int x = 0; x < 10; x++)\n        x==0 ?\n        0 : a[x];\n}" always "void f() {\n    for (int x = 0; x < 10; x++)\n        x==0 ?\n        0 : a[x];\n}"
Line 4012
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4012 always 4012
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4012 always 4012
  code always "void f() {\n    for (int x = 0; x < 10; x++)\n        x==0 ?\n        0 : a[x];\n}"
  4U always 4
  0 always 0
Line 4014
  = always "void f() {\n    for (int x = 0; x < 300 && x < 18; x++)\n        x;\n}"
  "void f() {\n    for (int x = 0; x < 300 && x < 18; x++)\n        x;\n}" always "void f() {\n    for (int x = 0; x < 300 && x < 18; x++)\n        x;\n}"
Line 4018
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4018 always 4018
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4018 always 4018
  code always "void f() {\n    for (int x = 0; x < 300 && x < 18; x++)\n        x;\n}"
  3U always 3
  0 always 0
Line 4019
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4019 always 4019
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4019 always 4019
  3U always 3
  17 always 17
Line 4020
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4020 always 4020
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4020 always 4020
  3U always 3
  299 always 299
Line 4022
  = always "void f() {\n    int x;\n    for (int i = 0; x = bar[i]; i++)\n        x;\n}"
  "void f() {\n    int x;\n    for (int i = 0; x = bar[i]; i++)\n        x;\n}" always "void f() {\n    int x;\n    for (int i = 0; x = bar[i]; i++)\n        x;\n}"
Line 4027
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4027 always 4027
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4027 always 4027
  code always "void f() {\n    int x;\n    for (int i = 0; x = bar[i]; i++)\n        x;\n}"
  4U always 4
  0 always 0
Line 4029
  = always "void f() {\n    const char abc[] = \"abc\";\n    int x;\n    for (x = 0; abc[x] != '\\0'; x++) {}\n    a[x] = 0;\n}"
  "void f() {\n    const char abc[] = \"abc\";\n    int x;\n    for (x = 0; abc[x] != '\\0'; x++) {}\n    a[x] = 0;\n}" always "void f() {\n    const char abc[] = \"abc\";\n    int x;\n    for (x = 0; abc[x] != '\\0'; x++) {}\n    a[x] = 0;\n}"
Line 4035
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4035 always 4035
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4035 always 4035
  code always "void f() {\n    const char abc[] = \"abc\";\n    int x;\n    for (x = 0; abc[x] != '\\0'; x++) {}\n    a[x] = 0;\n}"
  5U always 5
  3 always 3
Line 4037
  = always "void f() {\n    int x;\n    for (int x = 0; (x = do_something()) != 0;)\n        x;\n}"
  "void f() {\n    int x;\n    for (int x = 0; (x = do_something()) != 0;)\n        x;\n}" always "void f() {\n    int x;\n    for (int x = 0; (x = do_something()) != 0;)\n        x;\n}"
Line 4042
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4042 always 4042
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4042 always 4042
  code always "void f() {\n    int x;\n    for (int x = 0; (x = do_something()) != 0;)\n        x;\n}"
  4U always 4
  0 always 0
Line 4044
  = always "void f() {\n    int x;\n    for (int x = 0; x < 10 && y = do_something();)\n        x;\n}"
  "void f() {\n    int x;\n    for (int x = 0; x < 10 && y = do_something();)\n        x;\n}" always "void f() {\n    int x;\n    for (int x = 0; x < 10 && y = do_something();)\n        x;\n}"
Line 4049
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4049 always 4049
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4049 always 4049
  code always "void f() {\n    int x;\n    for (int x = 0; x < 10 && y = do_something();)\n        x;\n}"
  4U always 4
  0 always 0
Line 4051
  = always "void f() {\n    int x,y;\n    for (x = 0, y = 0; x < 10, y < 10; x++, y++)\n        x;\n}"
  "void f() {\n    int x,y;\n    for (x = 0, y = 0; x < 10, y < 10; x++, y++)\n        x;\n}" always "void f() {\n    int x,y;\n    for (x = 0, y = 0; x < 10, y < 10; x++, y++)\n        x;\n}"
Line 4056
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4056 always 4056
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4056 always 4056
  code always "void f() {\n    int x,y;\n    for (x = 0, y = 0; x < 10, y < 10; x++, y++)\n        x;\n}"
  4U always 4
  0 always 0
Line 4058
  = always "void foo(double recoveredX) {\n  for (double x = 1e-18; x < 1e40; x *= 1.9) {\n    double relativeError = (x - recoveredX) / x;\n  }\n}\n"
  "void foo(double recoveredX) {\n  for (double x = 1e-18; x < 1e40; x *= 1.9) {\n    double relativeError = (x - recoveredX) / x;\n  }\n}\n" always "void foo(double recoveredX) {\n  for (double x = 1e-18; x < 1e40; x *= 1.9) {\n    double relativeError = (x - recoveredX) / x;\n  }\n}\n"
Line 4063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4063 always 4063
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4063 always 4063
  code always "void foo(double recoveredX) {\n  for (double x = 1e-18; x < 1e40; x *= 1.9) {\n    double relativeError = (x - recoveredX) / x;\n  }\n}\n"
  3U always 3
  0 always 0
Line 4067
  = always "void f(void) {\n    int bit, x;\n    for (bit = 1, x = 0; bit < 128; bit = bit << 1, x++) {\n        z = x;\n    }\n}\n"
  "void f(void) {\n    int bit, x;\n    for (bit = 1, x = 0; bit < 128; bit = bit << 1, x++) {\n        z = x;\n    }\n}\n" always "void f(void) {\n    int bit, x;\n    for (bit = 1, x = 0; bit < 128; bit = bit << 1, x++) {\n        z = x;\n    }\n}\n"
Line 4073
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4073 always 4073
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4073 always 4073
  code always "void f(void) {\n    int bit, x;\n    for (bit = 1, x = 0; bit < 128; bit = bit << 1, x++) {\n        z = x;\n    }\n}\n"
  4U always 4
  0 always 0
Line 4074
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4074 always 4074
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4074 always 4074
  4U always 4
  6 always 6
Line 4075
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4075 always 4075
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4075 always 4075
  4U always 4
  7 always 7
Line 4078
  = always "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x > 1\n        && x) {}  }\n}\n"
  "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x > 1\n        && x) {}  }\n}\n" always "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x > 1\n        && x) {}  }\n}\n"
Line 4084
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4084 always 4084
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4084 always 4084
  code always "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x > 1\n        && x) {}  }\n}\n"
  4U always 4
  0 always 0
Line 4086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4086 always 4086
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4086 always 4086
  4U always 4
  1 always 1
Line 4088
  = always "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x < value\n        && x) {}  }\n}\n"
  "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x < value\n        && x) {}  }\n}\n" always "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x < value\n        && x) {}  }\n}\n"
Line 4094
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4094 always 4094
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4094 always 4094
  code always "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x < value\n        && x) {}  }\n}\n"
  4U always 4
  9 always 9
Line 4097
  = always "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x == 0\n        || x) {}  }\n}\n"
  "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x == 0\n        || x) {}  }\n}\n" always "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x == 0\n        || x) {}  }\n}\n"
Line 4103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4103 always 4103
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4103 always 4103
  code always "void foo() {\n  for (int x = 0; x < 10; x++) {\n    if (x == 0\n        || x) {}  }\n}\n"
  4U always 4
  0 always 0
Line 4105
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4105 always 4105
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4105 always 4105
  4U always 4
  1 always 1
Line 4108
  = always "void foo() {\n  int x;\n  for (x = 0; x < 10; x++) {}\n  a = x;\n}\n"
  "void foo() {\n  int x;\n  for (x = 0; x < 10; x++) {}\n  a = x;\n}\n" always "void foo() {\n  int x;\n  for (x = 0; x < 10; x++) {}\n  a = x;\n}\n"
Line 4113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4113 always 4113
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4113 always 4113
  code always "void foo() {\n  int x;\n  for (x = 0; x < 10; x++) {}\n  a = x;\n}\n"
  4U always 4
  10 always 10
Line 4115
  = always "void foo() {\n  int x;\n  for (x = 0; 2 * x < 20; x++) {}\n  a = x;\n}\n"
  "void foo() {\n  int x;\n  for (x = 0; 2 * x < 20; x++) {}\n  a = x;\n}\n" always "void foo() {\n  int x;\n  for (x = 0; 2 * x < 20; x++) {}\n  a = x;\n}\n"
Line 4120
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4120 always 4120
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4120 always 4120
  code always "void foo() {\n  int x;\n  for (x = 0; 2 * x < 20; x++) {}\n  a = x;\n}\n"
  4U always 4
  10 always 10
Line 4122
  = always "void foo() {\n  int x;\n  for (x = 0; x < 20; x++) {}\n  a = x++;\n}\n"
  "void foo() {\n  int x;\n  for (x = 0; x < 20; x++) {}\n  a = x++;\n}\n" always "void foo() {\n  int x;\n  for (x = 0; x < 20; x++) {}\n  a = x++;\n}\n"
Line 4127
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4127 always 4127
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4127 always 4127
  code always "void foo() {\n  int x;\n  for (x = 0; x < 20; x++) {}\n  a = x++;\n}\n"
  4U always 4
  20 always 20
Line 4129
  = always "void f() {\n  int x;\n  for (x = 0; x < 5; x++) {}\n  if (x == 5) {\n    abort();\n  }\n  a = x;\n}"
  "void f() {\n  int x;\n  for (x = 0; x < 5; x++) {}\n  if (x == 5) {\n    abort();\n  }\n  a = x;\n}" always "void f() {\n  int x;\n  for (x = 0; x < 5; x++) {}\n  if (x == 5) {\n    abort();\n  }\n  a = x;\n}"
Line 4137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4137 always 4137
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4137 always 4137
  code always "void f() {\n  int x;\n  for (x = 0; x < 5; x++) {}\n  if (x == 5) {\n    abort();\n  }\n  a = x;\n}"
  7U always 7
  5 always 5
Line 4139
  = always "void f() {\n  int x;\n  for (x = 0; x < 5; x++) {}\n  if (x < 5) {}\n  else return;\n  a = x;\n}"
  "void f() {\n  int x;\n  for (x = 0; x < 5; x++) {}\n  if (x < 5) {}\n  else return;\n  a = x;\n}" always "void f() {\n  int x;\n  for (x = 0; x < 5; x++) {}\n  if (x < 5) {}\n  else return;\n  a = x;\n}"
Line 4146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4146 always 4146
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4146 always 4146
  code always "void f() {\n  int x;\n  for (x = 0; x < 5; x++) {}\n  if (x < 5) {}\n  else return;\n  a = x;\n}"
  6U always 6
  5 always 5
Line 4149
  = always "static void f() {\n  int x;\n  int ctls[10];\n  for (x = 0; x <= 10; x++) {\n    if (cond)\n      break;\n  }\n  assert(x <= 10);\n  ctls[x] = 123;\n}\n"
  "static void f() {\n  int x;\n  int ctls[10];\n  for (x = 0; x <= 10; x++) {\n    if (cond)\n      break;\n  }\n  assert(x <= 10);\n  ctls[x] = 123;\n}\n" always "static void f() {\n  int x;\n  int ctls[10];\n  for (x = 0; x <= 10; x++) {\n    if (cond)\n      break;\n  }\n  assert(x <= 10);\n  ctls[x] = 123;\n}\n"
Line 4159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4159 always 4159
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4159 always 4159
  code always "static void f() {\n  int x;\n  int ctls[10];\n  for (x = 0; x <= 10; x++) {\n    if (cond)\n      break;\n  }\n  assert(x <= 10);\n  ctls[x] = 123;\n}\n"
  9U always 9
  11 always 11
Line 4162
  = always "void f() {\n  for(int i = 0; i < 20; i++)\n    n = (int)(i < 10 || abs(negWander) < abs(negTravel));\n}"
  "void f() {\n  for(int i = 0; i < 20; i++)\n    n = (int)(i < 10 || abs(negWander) < abs(negTravel));\n}" always "void f() {\n  for(int i = 0; i < 20; i++)\n    n = (int)(i < 10 || abs(negWander) < abs(negTravel));\n}"
Line 4166
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4166 always 4166
  code always "void f() {\n  for(int i = 0; i < 20; i++)\n    n = (int)(i < 10 || abs(negWander) < abs(negTravel));\n}"
  0 always 0
  0 always 0
Line 4169
  = always "void foo(char *z, int n) {\n    int i;\n    if (fPScript) {\n        i = 1;\n    } else if (strncmp(&z[n], \"<!--\", 4) == 0) {\n        for (i = 4;;) {\n            if (z[n] && strncmp(&z[n+i], \"-->\", 3) == 0) ;\n        }\n    }\n}"
  "void foo(char *z, int n) {\n    int i;\n    if (fPScript) {\n        i = 1;\n    } else if (strncmp(&z[n], \"<!--\", 4) == 0) {\n        for (i = 4;;) {\n            if (z[n] && strncmp(&z[n+i], \"-->\", 3) == 0) ;\n        }\n    }\n}" always "void foo(char *z, int n) {\n    int i;\n    if (fPScript) {\n        i = 1;\n    } else if (strncmp(&z[n], \"<!--\", 4) == 0) {\n        for (i = 4;;) {\n            if (z[n] && strncmp(&z[n+i], \"-->\", 3) == 0) ;\n        }\n    }\n}"
Line 4179
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4179 always 4179
  code always "void foo(char *z, int n) {\n    int i;\n    if (fPScript) {\n        i = 1;\n    } else if (strncmp(&z[n], \"<!--\", 4) == 0) {\n        for (i = 4;;) {\n            if (z[n] && strncmp(&z[n+i], \"-->\", 3) == 0) ;\n        }\n    }\n}"
  0 always 0
  0 always 0
Line 4182
  = always "void f(int mask) {\n  for (int x = 10; x < 14; x++) {\n    int bit = mask & (1 << i);\n    if (bit) {\n      if (bit == (1 << 10)) {}\n      else { a = x; }\n    }\n  }\n}"
  "void f(int mask) {\n  for (int x = 10; x < 14; x++) {\n    int bit = mask & (1 << i);\n    if (bit) {\n      if (bit == (1 << 10)) {}\n      else { a = x; }\n    }\n  }\n}" always "void f(int mask) {\n  for (int x = 10; x < 14; x++) {\n    int bit = mask & (1 << i);\n    if (bit) {\n      if (bit == (1 << 10)) {}\n      else { a = x; }\n    }\n  }\n}"
Line 4191
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4191 always 4191
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4191 always 4191
  code always "void f(int mask) {\n  for (int x = 10; x < 14; x++) {\n    int bit = mask & (1 << i);\n    if (bit) {\n      if (bit == (1 << 10)) {}\n      else { a = x; }\n    }\n  }\n}"
  6U always 6
  10 always 10
Line 4194
  = always "void f() {\n  int sz = 4;\n  int x,y;\n  for(x=0,y=0; x < sz && y < 10; x++)\n    a = x;\n}"
  "void f() {\n  int sz = 4;\n  int x,y;\n  for(x=0,y=0; x < sz && y < 10; x++)\n    a = x;\n}" always "void f() {\n  int sz = 4;\n  int x,y;\n  for(x=0,y=0; x < sz && y < 10; x++)\n    a = x;\n}"
Line 4200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4200 always 4200
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4200 always 4200
  code always "void f() {\n  int sz = 4;\n  int x,y;\n  for(x=0,y=0; x < sz && y < 10; x++)\n    a = x;\n}"
  5U always 5
  3 always 3
Line 4202
  = always "void f() {\n    int x;\n    for (x = 0; x < 10; x++)\n        x;\n}"
  "void f() {\n    int x;\n    for (x = 0; x < 10; x++)\n        x;\n}" always "void f() {\n    int x;\n    for (x = 0; x < 10; x++)\n        x;\n}"
Line 4207
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4207 always 4207
  code always "void f() {\n    int x;\n    for (x = 0; x < 10; x++)\n        x;\n}"
  "x <" always "x <"
Line 4208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4208 always 4208
  ( always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(values),start=0}
  ( {lifetime[Iterator]=(values),end=0}
  & {lifetime[Address]=(isUninitValue),!0}
Line 4211
  = always "void f() {\n    unsigned int x = 0;\n    for (x = 0; x < 2; x++) {}\n}\n"
  "void f() {\n    unsigned int x = 0;\n    for (x = 0; x < 2; x++) {}\n}\n" always "void f() {\n    unsigned int x = 0;\n    for (x = 0; x < 2; x++) {}\n}\n"
Line 4215
  code always "void f() {\n    unsigned int x = 0;\n    for (x = 0; x < 2; x++) {}\n}\n"
  "x <" always "x <"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4215 always 4215
Line 4216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4216 always 4216
Line 4217
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4217 always 4217
  0 always 0
Line 4219
  = always "void f() {\n    unsigned int x = 0;\n    for (;x < 2; x++) {}\n}\n"
  "void f() {\n    unsigned int x = 0;\n    for (;x < 2; x++) {}\n}\n" always "void f() {\n    unsigned int x = 0;\n    for (;x < 2; x++) {}\n}\n"
Line 4223
  code always "void f() {\n    unsigned int x = 0;\n    for (;x < 2; x++) {}\n}\n"
  "x <" always "x <"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4223 always 4223
Line 4224
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4224 always 4224
Line 4225
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4225 always 4225
  0 always 0
Line 4227
  = always "void f() {\n    unsigned int x = 1;\n    for (x = 0; x < 2; x++) {}\n}\n"
  "void f() {\n    unsigned int x = 1;\n    for (x = 0; x < 2; x++) {}\n}\n" always "void f() {\n    unsigned int x = 1;\n    for (x = 0; x < 2; x++) {}\n}\n"
Line 4231
  code always "void f() {\n    unsigned int x = 1;\n    for (x = 0; x < 2; x++) {}\n}\n"
  "x <" always "x <"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4231 always 4231
Line 4232
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4232 always 4232
  ! always {!<=-1,!>=2}
Line 4234
  = always "void b(int* a) {\n    for (*a = 1;;)\n        if (0) {}\n}\nstruct S { int* a; }\nvoid b(S& s) {\n    for (*s.a = 1;;)\n        if (0) {}\n}\nstruct T { S s; };\nvoid b(T& t) {\n    for (*&t.s.a[0] = 1;;)\n        if (0) {}\n}\n"
  "void b(int* a) {\n    for (*a = 1;;)\n        if (0) {}\n}\nstruct S { int* a; }\nvoid b(S& s) {\n    for (*s.a = 1;;)\n        if (0) {}\n}\nstruct T { S s; };\nvoid b(T& t) {\n    for (*&t.s.a[0] = 1;;)\n        if (0) {}\n}\n" always "void b(int* a) {\n    for (*a = 1;;)\n        if (0) {}\n}\nstruct S { int* a; }\nvoid b(S& s) {\n    for (*s.a = 1;;)\n        if (0) {}\n}\nstruct T { S s; };\nvoid b(T& t) {\n    for (*&t.s.a[0] = 1;;)\n        if (0) {}\n}\n"
Line 4248
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4248 always 4248
  code always "void b(int* a) {\n    for (*a = 1;;)\n        if (0) {}\n}\nstruct S { int* a; }\nvoid b(S& s) {\n    for (*s.a = 1;;)\n        if (0) {}\n}\nstruct T { S s; };\nvoid b(T& t) {\n    for (*&t.s.a[0] = 1;;)\n        if (0) {}\n}\n"
  0 always 0
  0 always 0
Line 4250
  = always "void f() {\n    int p[2];\n    for (p[0] = 0; p[0] <= 2; p[0]++) {\n        for (p[1] = 0; p[1] <= 2 - p[0]; p[1]++) {}\n    }\n}\n"
  "void f() {\n    int p[2];\n    for (p[0] = 0; p[0] <= 2; p[0]++) {\n        for (p[1] = 0; p[1] <= 2 - p[0]; p[1]++) {}\n    }\n}\n" always "void f() {\n    int p[2];\n    for (p[0] = 0; p[0] <= 2; p[0]++) {\n        for (p[1] = 0; p[1] <= 2 - p[0]; p[1]++) {}\n    }\n}\n"
Line 4256
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4256 always 4256
  code always "void f() {\n    int p[2];\n    for (p[0] = 0; p[0] <= 2; p[0]++) {\n        for (p[1] = 0; p[1] <= 2 - p[0]; p[1]++) {}\n    }\n}\n"
  0 always 0
  0 always 0
Line 4258
  = always "struct C {\n    int& v() { return i; }\n    int& w() { return j; }\n    int i{}, j{};\n};\nvoid f() {\n    C c;\n    for (c.w() = 0; c.w() < 2; c.w()++) {\n        for (c.v() = 0; c.v() < 24; c.v()++) {}\n    }\n}\n"
  "struct C {\n    int& v() { return i; }\n    int& w() { return j; }\n    int i{}, j{};\n};\nvoid f() {\n    C c;\n    for (c.w() = 0; c.w() < 2; c.w()++) {\n        for (c.v() = 0; c.v() < 24; c.v()++) {}\n    }\n}\n" always "struct C {\n    int& v() { return i; }\n    int& w() { return j; }\n    int i{}, j{};\n};\nvoid f() {\n    C c;\n    for (c.w() = 0; c.w() < 2; c.w()++) {\n        for (c.v() = 0; c.v() < 24; c.v()++) {}\n    }\n}\n"
Line 4269
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4269 always 4269
  code always "struct C {\n    int& v() { return i; }\n    int& w() { return j; }\n    int i{}, j{};\n};\nvoid f() {\n    C c;\n    for (c.w() = 0; c.w() < 2; c.w()++) {\n        for (c.v() = 0; c.v() < 24; c.v()++) {}\n    }\n}\n"
  0 always 0
  0 always 0
Line 4272
  = always "struct a {\n    long b;\n    long c[6];\n    long d;\n};\nvoid e(long) {\n    a f = {0};\n    for (f.d = 0; 2; f.d++)\n        e(f.c[f.b]);\n}\n"
  "struct a {\n    long b;\n    long c[6];\n    long d;\n};\nvoid e(long) {\n    a f = {0};\n    for (f.d = 0; 2; f.d++)\n        e(f.c[f.b]);\n}\n" always "struct a {\n    long b;\n    long c[6];\n    long d;\n};\nvoid e(long) {\n    a f = {0};\n    for (f.d = 0; 2; f.d++)\n        e(f.c[f.b]);\n}\n"
Line 4282
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4282 always 4282
  code always "struct a {\n    long b;\n    long c[6];\n    long d;\n};\nvoid e(long) {\n    a f = {0};\n    for (f.d = 0; 2; f.d++)\n        e(f.c[f.b]);\n}\n"
  ". c" always ". c"
Line 4283
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4283 always 4283
  true always 1
  ( always {!<=-1,!>=2}
Line 4284
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4284 always 4284
  "[ f . b" always "[ f . b"
Line 4285
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4285 always 4285
  true always 1
  ( always {!<=-1,!>=2}
Line 4291
  = always "int f(int size) {\n    int x = 0;\n    if(size>16) {\n        x = size;\n        int a = x;\n    }\n    return x;\n}\nvoid g(){\n    f(42);\n}"
  "int f(int size) {\n    int x = 0;\n    if(size>16) {\n        x = size;\n        int a = x;\n    }\n    return x;\n}\nvoid g(){\n    f(42);\n}" always "int f(int size) {\n    int x = 0;\n    if(size>16) {\n        x = size;\n        int a = x;\n    }\n    return x;\n}\nvoid g(){\n    f(42);\n}"
Line 4302
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4302 always 4302
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4302 always 4302
  code always "int f(int size) {\n    int x = 0;\n    if(size>16) {\n        x = size;\n        int a = x;\n    }\n    return x;\n}\nvoid g(){\n    f(42);\n}"
  5U always 5
  17 always 17
Line 4303
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4303 always 4303
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4303 always 4303
  5U always 5
  42 always 42
Line 4304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4304 always 4304
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4304 always 4304
  7U always 7
  0 always 0
Line 4305
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4305 always 4305
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4305 always 4305
  7U always 7
  17 always 17
Line 4306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4306 always 4306
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4306 always 4306
  7U always 7
  42 always 42
Line 4308
  = always "void g(int, int) {}\nvoid f(int x, int y) {\n    g(x, y);\n}\nvoid h() {\n    f(0, 0);\n    f(1, 1);\n    f(2, 2);\n    f(3, 3);\n    f(4, 4);\n    f(5, 5);\n    f(6, 6);\n    f(7, 7);\n    f(8, 8);\n    f(9, 9);\n}\n"
  "void g(int, int) {}\nvoid f(int x, int y) {\n    g(x, y);\n}\nvoid h() {\n    f(0, 0);\n    f(1, 1);\n    f(2, 2);\n    f(3, 3);\n    f(4, 4);\n    f(5, 5);\n    f(6, 6);\n    f(7, 7);\n    f(8, 8);\n    f(9, 9);\n}\n" always "void g(int, int) {}\nvoid f(int x, int y) {\n    g(x, y);\n}\nvoid h() {\n    f(0, 0);\n    f(1, 1);\n    f(2, 2);\n    f(3, 3);\n    f(4, 4);\n    f(5, 5);\n    f(6, 6);\n    f(7, 7);\n    f(8, 8);\n    f(9, 9);\n}\n"
Line 4324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4324 always 4324
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4324 always 4324
  code always "void g(int, int) {}\nvoid f(int x, int y) {\n    g(x, y);\n}\nvoid h() {\n    f(0, 0);\n    f(1, 1);\n    f(2, 2);\n    f(3, 3);\n    f(4, 4);\n    f(5, 5);\n    f(6, 6);\n    f(7, 7);\n    f(8, 8);\n    f(9, 9);\n}\n"
  3U always 3
  0 always 0
Line 4325
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4325 always 4325
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4325 always 4325
  3U always 3
  1 always 1
Line 4326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4326 always 4326
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4326 always 4326
  3U always 3
  2 always 2
Line 4327
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4327 always 4327
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4327 always 4327
  3U always 3
  3 always 3
Line 4328
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4328 always 4328
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4328 always 4328
  3U always 3
  4 always 4
Line 4329
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4329 always 4329
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4329 always 4329
  3U always 3
  5 always 5
Line 4330
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4330 always 4330
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4330 always 4330
  3U always 3
  6 always 6
Line 4331
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4331 always 4331
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4331 always 4331
  3U always 3
  7 always 7
Line 4332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4332 always 4332
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4332 always 4332
  3U always 3
  8 always 8
Line 4333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4333 always 4333
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4333 always 4333
  3U always 3
  9 always 9
Line 4335
  = always "int f(int i, int j) {\n    if (i == j) {\n        int x = i;\n        return x;\n    }\n    return 0;\n}\nint g(int x) {\n    f(x, -1);\n}\n"
  "int f(int i, int j) {\n    if (i == j) {\n        int x = i;\n        return x;\n    }\n    return 0;\n}\nint g(int x) {\n    f(x, -1);\n}\n" always "int f(int i, int j) {\n    if (i == j) {\n        int x = i;\n        return x;\n    }\n    return 0;\n}\nint g(int x) {\n    f(x, -1);\n}\n"
Line 4345
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4345 always 4345
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4345 always 4345
  code always "int f(int i, int j) {\n    if (i == j) {\n        int x = i;\n        return x;\n    }\n    return 0;\n}\nint g(int x) {\n    f(x, -1);\n}\n"
  4U always 4
  -1 always -1
Line 4350
  = always "int f1(int x) {\n  return x+1;\n}\nvoid f2() {\n    x = 10 - f1(2);\n}"
  "int f1(int x) {\n  return x+1;\n}\nvoid f2() {\n    x = 10 - f1(2);\n}" always "int f1(int x) {\n  return x+1;\n}\nvoid f2() {\n    x = 10 - f1(2);\n}"
Line 4356
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4356 always 4356
  7 always 7
  code always "int f1(int x) {\n  return x+1;\n}\nvoid f2() {\n    x = 10 - f1(2);\n}"
  "-" always "-"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4356 always 4356
Line 4357
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4357 always 4357
  true always 1
  "-" always "-"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4357 always 4357
Line 4359
  = always "int add(int x, int y) {\n  return x+y;\n}\nvoid f2() {\n    x = 2 * add(10+1,4);\n}"
  "int add(int x, int y) {\n  return x+y;\n}\nvoid f2() {\n    x = 2 * add(10+1,4);\n}" always "int add(int x, int y) {\n  return x+y;\n}\nvoid f2() {\n    x = 2 * add(10+1,4);\n}"
Line 4365
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4365 always 4365
  30 always 30
  code always "int add(int x, int y) {\n  return x+y;\n}\nvoid f2() {\n    x = 2 * add(10+1,4);\n}"
  "*" always "*"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4365 always 4365
Line 4366
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4366 always 4366
  true always 1
  "*" always "*"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4366 always 4366
Line 4368
  = always "int one() { return 1; }\nvoid f() { x = 2 * one(); }"
  "int one() { return 1; }\nvoid f() { x = 2 * one(); }" always "int one() { return 1; }\nvoid f() { x = 2 * one(); }"
Line 4370
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4370 always 4370
  2 always 2
  code always "int one() { return 1; }\nvoid f() { x = 2 * one(); }"
  "*" always "*"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4370 always 4370
Line 4371
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4371 always 4371
  true always 1
  "*" always "*"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4371 always 4371
Line 4373
  = always "int add(int x, int y) {\n  return x+y;\n}\nvoid f2() {\n    x = 2 * add(1,add(2,3));\n}"
  "int add(int x, int y) {\n  return x+y;\n}\nvoid f2() {\n    x = 2 * add(1,add(2,3));\n}" always "int add(int x, int y) {\n  return x+y;\n}\nvoid f2() {\n    x = 2 * add(1,add(2,3));\n}"
Line 4379
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4379 always 4379
  12 always 12
  code always "int add(int x, int y) {\n  return x+y;\n}\nvoid f2() {\n    x = 2 * add(1,add(2,3));\n}"
  "*" always "*"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4379 always 4379
Line 4380
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4380 always 4380
  true always 1
  "*" always "*"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4380 always 4380
Line 4382
  = always "int f(int i, X x) {\n    if (i)\n        return g(std::move(x));\n    g(x);\n    return 0;\n}"
  "int f(int i, X x) {\n    if (i)\n        return g(std::move(x));\n    g(x);\n    return 0;\n}" always "int f(int i, X x) {\n    if (i)\n        return g(std::move(x));\n    g(x);\n    return 0;\n}"
Line 4388
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4388 always 4388
  false always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4388 always 4388
  code always "int f(int i, X x) {\n    if (i)\n        return g(std::move(x));\n    g(x);\n    return 0;\n}"
  4U always 4
Line 4390
  = always "class A\n{\n    int f1(int x) {\n        return x+1;\n    }\n    void f2() {\n        x = 10 - f1(2);\n    }\n};"
  "class A\n{\n    int f1(int x) {\n        return x+1;\n    }\n    void f2() {\n        x = 10 - f1(2);\n    }\n};" always "class A\n{\n    int f1(int x) {\n        return x+1;\n    }\n    void f2() {\n        x = 10 - f1(2);\n    }\n};"
Line 4399
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4399 always 4399
  7 always 7
  code always "class A\n{\n    int f1(int x) {\n        return x+1;\n    }\n    void f2() {\n        x = 10 - f1(2);\n    }\n};"
  "-" always "-"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4399 always 4399
Line 4400
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4400 always 4400
  true always 1
  "-" always "-"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4400 always 4400
Line 4402
  = always "class A\n{\n    virtual int f1(int x) {\n        return x+1;\n    }\n    void f2() {\n        x = 10 - f1(2);\n    }\n};"
  "class A\n{\n    virtual int f1(int x) {\n        return x+1;\n    }\n    void f2() {\n        x = 10 - f1(2);\n    }\n};" always "class A\n{\n    virtual int f1(int x) {\n        return x+1;\n    }\n    void f2() {\n        x = 10 - f1(2);\n    }\n};"
Line 4411
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4411 always 4411
  7 always 7
  0 always 0
  code always "class A\n{\n    virtual int f1(int x) {\n        return x+1;\n    }\n    void f2() {\n        x = 10 - f1(2);\n    }\n};"
  "-" always "-"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4411 always 4411
Line 4412
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4412 always 4412
  false always 0
  code always "class A\n{\n    virtual int f1(int x) {\n        return x+1;\n    }\n    void f2() {\n        x = 10 - f1(2);\n    }\n};"
  "-" always "-"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4412 always 4412
Line 4414
  = always "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base* b) {\n    int x = b->f();\n    return x;\n}\n"
  "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base* b) {\n    int x = b->f();\n    return x;\n}\n" always "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base* b) {\n    int x = b->f();\n    return x;\n}\n"
Line 4421
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4421 always 4421
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4421 always 4421
  code always "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base* b) {\n    int x = b->f();\n    return x;\n}\n"
  6U always 6
  0 always 0
Line 4422
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4422 always 4422
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4422 always 4422
  code always "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base* b) {\n    int x = b->f();\n    return x;\n}\n"
  6U always 6
  0 always 0
Line 4424
  = always "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base& b) {\n    int x = b.f();\n    return x;\n}\n"
  "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base& b) {\n    int x = b.f();\n    return x;\n}\n" always "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base& b) {\n    int x = b.f();\n    return x;\n}\n"
Line 4431
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4431 always 4431
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4431 always 4431
  code always "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base& b) {\n    int x = b.f();\n    return x;\n}\n"
  6U always 6
  0 always 0
Line 4432
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4432 always 4432
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4432 always 4432
  code always "struct base {\n    virtual int f() { return 0; }\n};\nvoid g(base& b) {\n    int x = b.f();\n    return x;\n}\n"
  6U always 6
  0 always 0
Line 4434
  = always "struct base {\n    virtual int f() { return 0; }\n};\nstruct derived {\n    virtual int f() { return 1; }\n};\nvoid g(derived* d) {\n    base* b = d;\n    int x = b->f();\n    return x;\n}\n"
  "struct base {\n    virtual int f() { return 0; }\n};\nstruct derived {\n    virtual int f() { return 1; }\n};\nvoid g(derived* d) {\n    base* b = d;\n    int x = b->f();\n    return x;\n}\n" always "struct base {\n    virtual int f() { return 0; }\n};\nstruct derived {\n    virtual int f() { return 1; }\n};\nvoid g(derived* d) {\n    base* b = d;\n    int x = b->f();\n    return x;\n}\n"
Line 4445
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4445 always 4445
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4445 always 4445
  code always "struct base {\n    virtual int f() { return 0; }\n};\nstruct derived {\n    virtual int f() { return 1; }\n};\nvoid g(derived* d) {\n    base* b = d;\n    int x = b->f();\n    return x;\n}\n"
  10U always 10
  0 always 0
Line 4446
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4446 always 4446
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4446 always 4446
  10U always 10
  1 always 1
Line 4448
  = always "struct base {\n    virtual int f() final { return 0; }\n};\nvoid g(base* b) {\n    int x = b->f();\n    return x;\n}\n"
  "struct base {\n    virtual int f() final { return 0; }\n};\nvoid g(base* b) {\n    int x = b->f();\n    return x;\n}\n" always "struct base {\n    virtual int f() final { return 0; }\n};\nvoid g(base* b) {\n    int x = b->f();\n    return x;\n}\n"
Line 4455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4455 always 4455
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4455 always 4455
  code always "struct base {\n    virtual int f() final { return 0; }\n};\nvoid g(base* b) {\n    int x = b->f();\n    return x;\n}\n"
  6U always 6
  0 always 0
Line 4461
  = always "class continuous_src_time {\n    continuous_src_time(std::complex<double> f, double st = 0.0, double et = infinity) {}\n};"
  "class continuous_src_time {\n    continuous_src_time(std::complex<double> f, double st = 0.0, double et = infinity) {}\n};" always "class continuous_src_time {\n    continuous_src_time(std::complex<double> f, double st = 0.0, double et = infinity) {}\n};"
Line 4464
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4464 always 4464
  code always "class continuous_src_time {\n    continuous_src_time(std::complex<double> f, double st = 0.0, double et = infinity) {}\n};"
  2U always 2
  2 always 2
Line 4467
  ( always {!<=-1,!>=2}
Line 4468
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4468 always 4468
  code possible {"void f(int c) {\n  int x = 0;\n  if (c) {} else { x++; }\n  return x + 2;\n}"@104,"void f() {\n  int x = 0;\n  dostuff(&x);\n  if (x < 0) {}\n}\n"@105,"void f() {\n  int x = 0;\n  dostuff(0 ? ptr : &x);\n  if (x < 0) {}\n}\n"@106,"void f() {\n  int x = 0;\n  dostuff(unknown ? ptr : &x);\n  if (x < 0) {}\n}\n"@107,"void f() {\n  int x = 0;\n  fred.dostuff(x);\n  if (x < 0) {}\n}\n"@108,"void dostuff(int & x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"@110,"void f() {\n  int x = 0;\n  do {\n    if (x < 0) {}\n    fred.dostuff(x);\n  } while (abc);\n}\n"@112,"int x;\nvoid f() {\n  x = 4;\n  while (1) {\n    a = x+2;\n    dostuff();\n  }\n}"@113,"void f() {\n  int x = 0;\n  if (y) { dostuff(x); }\n  if (!x) {}\n}\n"@114,"void f() {\n  int x = 0;\n  MACRO( v, { if (y) { x++; } } );\n  if (!x) {}\n}\n"@115}
  str possible {"+"@104,"<"@105,"<"@106,"<"@107,"<"@108,"<"@110,"<"@112,"+"@113,"!"@114,"!"@115}
Line 4470
  return always {!<=-1,!>=2}
  false always 0
Line 4472
  return always {!<=-1,!>=2}
  true always 1
Line 4479
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4479 always 4479
  "x = 1;" always "x = 1;"
  "1" always "1"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4479 always 4479
Line 4482
  = always "void f() {\n  int x = 1;\n  return x + 2;\n}"
  "void f() {\n  int x = 1;\n  return x + 2;\n}" always "void f() {\n  int x = 1;\n  return x + 2;\n}"
Line 4486
  code always "void f() {\n  int x = 1;\n  return x + 2;\n}"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4486 always 4486
Line 4487
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4487 always 4487
  3 always 3
Line 4488
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4488 always 4488
Line 4491
  = always "void f() {\n  int x = 15;\n  if (x == 15) { x += 7; }\n}"
  "void f() {\n  int x = 15;\n  if (x == 15) { x += 7; }\n}" always "void f() {\n  int x = 15;\n  if (x == 15) { x += 7; }\n}"
Line 4495
  code always "void f() {\n  int x = 15;\n  if (x == 15) { x += 7; }\n}"
  "==" always "=="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4495 always 4495
Line 4496
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4496 always 4496
  1 always 1
Line 4497
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4497 always 4497
Line 4499
  = always "int f() {\n    int a = 0, x = 0;\n    a = index();\n    if (a != 0)\n        x = next();\n    return x + 1;\n}\n"
  "int f() {\n    int a = 0, x = 0;\n    a = index();\n    if (a != 0)\n        x = next();\n    return x + 1;\n}\n" always "int f() {\n    int a = 0, x = 0;\n    a = index();\n    if (a != 0)\n        x = next();\n    return x + 1;\n}\n"
Line 4506
  code always "int f() {\n    int a = 0, x = 0;\n    a = index();\n    if (a != 0)\n        x = next();\n    return x + 1;\n}\n"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4506 always 4506
Line 4507
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4507 always 4507
Line 4510
  = always "void f() {\n  int x;\n  if (ab) { x = 7; }\n  return x + 2;\n}"
  "void f() {\n  int x;\n  if (ab) { x = 7; }\n  return x + 2;\n}" always "void f() {\n  int x;\n  if (ab) { x = 7; }\n  return x + 2;\n}"
Line 4515
  code always "void f() {\n  int x;\n  if (ab) { x = 7; }\n  return x + 2;\n}"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4515 always 4515
Line 4516
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4516 always 4516
  9 always 9
Line 4517
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4517 always 4517
Line 4519
  = always "void f(int c) {\n  int x = 0;\n  if (c) {} else { x++; }\n  return x + 2;\n}"
  "void f(int c) {\n  int x = 0;\n  if (c) {} else { x++; }\n  return x + 2;\n}" always "void f(int c) {\n  int x = 0;\n  if (c) {} else { x++; }\n  return x + 2;\n}"
Line 4524
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4524 always 4524
  ( always {!<=-1,!>=2}
  code always "void f(int c) {\n  int x = 0;\n  if (c) {} else { x++; }\n  return x + 2;\n}"
  "+" always "+"
Line 4526
  = always "void f() {\n  int x = 0;\n  dostuff(&x);\n  if (x < 0) {}\n}\n"
  "void f() {\n  int x = 0;\n  dostuff(&x);\n  if (x < 0) {}\n}\n" always "void f() {\n  int x = 0;\n  dostuff(&x);\n  if (x < 0) {}\n}\n"
Line 4531
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4531 always 4531
  ( always {!<=-1,!>=2}
  code always "void f() {\n  int x = 0;\n  dostuff(&x);\n  if (x < 0) {}\n}\n"
  "<" always "<"
Line 4533
  = always "void f() {\n  int x = 0;\n  dostuff(0 ? ptr : &x);\n  if (x < 0) {}\n}\n"
  "void f() {\n  int x = 0;\n  dostuff(0 ? ptr : &x);\n  if (x < 0) {}\n}\n" always "void f() {\n  int x = 0;\n  dostuff(0 ? ptr : &x);\n  if (x < 0) {}\n}\n"
Line 4538
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4538 always 4538
  ( always {!<=-1,!>=2}
  code always "void f() {\n  int x = 0;\n  dostuff(0 ? ptr : &x);\n  if (x < 0) {}\n}\n"
  "<" always "<"
Line 4540
  = always "void f() {\n  int x = 0;\n  dostuff(unknown ? ptr : &x);\n  if (x < 0) {}\n}\n"
  "void f() {\n  int x = 0;\n  dostuff(unknown ? ptr : &x);\n  if (x < 0) {}\n}\n" always "void f() {\n  int x = 0;\n  dostuff(unknown ? ptr : &x);\n  if (x < 0) {}\n}\n"
Line 4545
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4545 always 4545
  ( always {!<=-1,!>=2}
  code always "void f() {\n  int x = 0;\n  dostuff(unknown ? ptr : &x);\n  if (x < 0) {}\n}\n"
  "<" always "<"
Line 4547
  = always "void f() {\n  int x = 0;\n  fred.dostuff(x);\n  if (x < 0) {}\n}\n"
  "void f() {\n  int x = 0;\n  fred.dostuff(x);\n  if (x < 0) {}\n}\n" always "void f() {\n  int x = 0;\n  fred.dostuff(x);\n  if (x < 0) {}\n}\n"
Line 4552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4552 always 4552
  ( always {!<=-1,!>=2}
  code always "void f() {\n  int x = 0;\n  fred.dostuff(x);\n  if (x < 0) {}\n}\n"
  "<" always "<"
Line 4554
  = always "void dostuff(int x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
  "void dostuff(int x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n" always "void dostuff(int x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
Line 4560
  code always "void dostuff(int x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
  "<" always "<"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4560 always 4560
Line 4561
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4561 always 4561
  0 always 0
Line 4562
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4562 always 4562
Line 4564
  = always "void dostuff(int & x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
  "void dostuff(int & x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n" always "void dostuff(int & x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
Line 4570
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4570 always 4570
  ( always {!<=-1,!>=2}
  code always "void dostuff(int & x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
  "<" always "<"
Line 4572
  = always "void dostuff(const int & x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
  "void dostuff(const int & x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n" always "void dostuff(const int & x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
Line 4578
  code always "void dostuff(const int & x);\nvoid f() {\n  int x = 0;\n  dostuff(x);\n  if (x < 0) {}\n}\n"
  "<" always "<"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4578 always 4578
Line 4579
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4579 always 4579
  0 always 0
Line 4580
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4580 always 4580
Line 4582
  = always "void f() {\n  int x = 0;\n  do {\n    if (x < 0) {}\n    fred.dostuff(x);\n  } while (abc);\n}\n"
  "void f() {\n  int x = 0;\n  do {\n    if (x < 0) {}\n    fred.dostuff(x);\n  } while (abc);\n}\n" always "void f() {\n  int x = 0;\n  do {\n    if (x < 0) {}\n    fred.dostuff(x);\n  } while (abc);\n}\n"
Line 4589
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4589 always 4589
  ( always {!<=-1,!>=2}
  code always "void f() {\n  int x = 0;\n  do {\n    if (x < 0) {}\n    fred.dostuff(x);\n  } while (abc);\n}\n"
  "<" always "<"
Line 4591
  = always "int x;\nvoid f() {\n  x = 4;\n  while (1) {\n    a = x+2;\n    dostuff();\n  }\n}"
  "int x;\nvoid f() {\n  x = 4;\n  while (1) {\n    a = x+2;\n    dostuff();\n  }\n}" always "int x;\nvoid f() {\n  x = 4;\n  while (1) {\n    a = x+2;\n    dostuff();\n  }\n}"
Line 4599
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4599 always 4599
  ( always {!<=-1,!>=2}
  code always "int x;\nvoid f() {\n  x = 4;\n  while (1) {\n    a = x+2;\n    dostuff();\n  }\n}"
  "+" always "+"
Line 4601
  = always "void f() {\n  int x = 0;\n  if (y) { dostuff(x); }\n  if (!x) {}\n}\n"
  "void f() {\n  int x = 0;\n  if (y) { dostuff(x); }\n  if (!x) {}\n}\n" always "void f() {\n  int x = 0;\n  if (y) { dostuff(x); }\n  if (!x) {}\n}\n"
Line 4606
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4606 always 4606
  ( always {!<=-1,!>=2}
  code always "void f() {\n  int x = 0;\n  if (y) { dostuff(x); }\n  if (!x) {}\n}\n"
  "!" always "!"
Line 4608
  = always "void f() {\n  int x = 0;\n  MACRO( v, { if (y) { x++; } } );\n  if (!x) {}\n}\n"
  "void f() {\n  int x = 0;\n  MACRO( v, { if (y) { x++; } } );\n  if (!x) {}\n}\n" always "void f() {\n  int x = 0;\n  MACRO( v, { if (y) { x++; } } );\n  if (!x) {}\n}\n"
Line 4613
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4613 always 4613
  ( always {!<=-1,!>=2}
  code always "void f() {\n  int x = 0;\n  MACRO( v, { if (y) { x++; } } );\n  if (!x) {}\n}\n"
  "!" always "!"
Line 4615
  = always "void f() {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (cond) {\n      x = 1;\n      break;\n    }\n  }\n  if (!x) {}\n}"
  "void f() {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (cond) {\n      x = 1;\n      break;\n    }\n  }\n  if (!x) {}\n}" always "void f() {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (cond) {\n      x = 1;\n      break;\n    }\n  }\n  if (!x) {}\n}"
Line 4625
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4625 always 4625
  ( always {!<=-1,!>=2}
  code always "void f() {\n  int x = 0;\n  for (int i = 0; i < 10; i++) {\n    if (cond) {\n      x = 1;\n      break;\n    }\n  }\n  if (!x) {}\n}"
  "!" always "!"
Line 4627
  = always "void f() {\n  bool b = false;\n  for(int x = 3; !b && x < 10; x++) {\n    for(int y = 4; !b && y < 20; y++) {}\n  }\n}"
  "void f() {\n  bool b = false;\n  for(int x = 3; !b && x < 10; x++) {\n    for(int y = 4; !b && y < 20; y++) {}\n  }\n}" always "void f() {\n  bool b = false;\n  for(int x = 3; !b && x < 10; x++) {\n    for(int y = 4; !b && y < 20; y++) {}\n  }\n}"
Line 4633
  code always "void f() {\n  bool b = false;\n  for(int x = 3; !b && x < 10; x++) {\n    for(int y = 4; !b && y < 20; y++) {}\n  }\n}"
  "!" always "!"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4633 always 4633
Line 4634
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4634 always 4634
  1 always 1
Line 4635
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4635 always 4635
Line 4637
  = always "void f() {\n  int x = 0;\n  switch (state) {\n  case 1:\n    x = 1;\n    break;\n  }\n  if (!x) {}\n}"
  "void f() {\n  int x = 0;\n  switch (state) {\n  case 1:\n    x = 1;\n    break;\n  }\n  if (!x) {}\n}" always "void f() {\n  int x = 0;\n  switch (state) {\n  case 1:\n    x = 1;\n    break;\n  }\n  if (!x) {}\n}"
Line 4646
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4646 always 4646
  ( always {!<=-1,!>=2}
  code always "void f() {\n  int x = 0;\n  switch (state) {\n  case 1:\n    x = 1;\n    break;\n  }\n  if (!x) {}\n}"
  "!" always "!"
Line 4648
  = always "void f() {\n  int x = 0;\n  switch (a) {\n  case 1:\n    x = 1;\n  case 2:\n    if (!x) {}\n  }\n}"
  "void f() {\n  int x = 0;\n  switch (a) {\n  case 1:\n    x = 1;\n  case 2:\n    if (!x) {}\n  }\n}" always "void f() {\n  int x = 0;\n  switch (a) {\n  case 1:\n    x = 1;\n  case 2:\n    if (!x) {}\n  }\n}"
Line 4657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4657 always 4657
  ( always {!<=-1,!>=2}
  code always "void f() {\n  int x = 0;\n  switch (a) {\n  case 1:\n    x = 1;\n  case 2:\n    if (!x) {}\n  }\n}"
  "!" always "!"
Line 4659
  = always "void f() {\n  int x = 0;\n  while (!x) {\n    scanf(\"%d\", &x);\n  }\n}"
  "void f() {\n  int x = 0;\n  while (!x) {\n    scanf(\"%d\", &x);\n  }\n}" always "void f() {\n  int x = 0;\n  while (!x) {\n    scanf(\"%d\", &x);\n  }\n}"
Line 4665
  code always "void f() {\n  int x = 0;\n  while (!x) {\n    scanf(\"%d\", &x);\n  }\n}"
  "!" always "!"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4665 always 4665
Line 4666
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4666 always 4666
  1 always 1
Line 4667
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4667 always 4667
Line 4669
  = always "void f() {\n  int x = 0;\n  do { } while (++x < 12);\n}"
  "void f() {\n  int x = 0;\n  do { } while (++x < 12);\n}" always "void f() {\n  int x = 0;\n  do { } while (++x < 12);\n}"
Line 4673
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4673 always 4673
  ( always {!<=-1,!>=2}
  code always "void f() {\n  int x = 0;\n  do { } while (++x < 12);\n}"
  "<" always "<"
Line 4675
  = always "void f() {\n  static int x = 0;\n  return x + 1;\n}\n"
  "void f() {\n  static int x = 0;\n  return x + 1;\n}\n" always "void f() {\n  static int x = 0;\n  return x + 1;\n}\n"
Line 4679
  code always "void f() {\n  static int x = 0;\n  return x + 1;\n}\n"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4679 always 4679
Line 4680
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4680 always 4680
  1 always 1
Line 4681
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4681 always 4681
Line 4683
  = always "void f() {\n  int x = 0;\na:\n  a = x + 1;\n}"
  "void f() {\n  int x = 0;\na:\n  a = x + 1;\n}" always "void f() {\n  int x = 0;\na:\n  a = x + 1;\n}"
Line 4688
  code always "void f() {\n  int x = 0;\na:\n  a = x + 1;\n}"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4688 always 4688
Line 4689
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4689 always 4689
  1 always 1
Line 4690
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4690 always 4690
Line 4693
  = always "void f(int x) {\n  if (!x) {\n    a = x+1;\n  }\n}"
  "void f(int x) {\n  if (!x) {\n    a = x+1;\n  }\n}" always "void f(int x) {\n  if (!x) {\n    a = x+1;\n  }\n}"
Line 4698
  code always "void f(int x) {\n  if (!x) {\n    a = x+1;\n  }\n}"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4698 always 4698
Line 4699
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4699 always 4699
  1 always 1
Line 4700
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4700 always 4700
Line 4702
  = always "void f(int x) {\n  if (a && 4==x && y) {\n    a = x+12;\n  }\n}"
  "void f(int x) {\n  if (a && 4==x && y) {\n    a = x+12;\n  }\n}" always "void f(int x) {\n  if (a && 4==x && y) {\n    a = x+12;\n  }\n}"
Line 4707
  code always "void f(int x) {\n  if (a && 4==x && y) {\n    a = x+12;\n  }\n}"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4707 always 4707
Line 4708
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4708 always 4708
  16 always 16
Line 4709
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4709 always 4709
Line 4712
  = always "int f(int x) {\n  if (x == 4) {}\n  return x + 1;\n}"
  "int f(int x) {\n  if (x == 4) {}\n  return x + 1;\n}" always "int f(int x) {\n  if (x == 4) {}\n  return x + 1;\n}"
Line 4716
  code always "int f(int x) {\n  if (x == 4) {}\n  return x + 1;\n}"
  "+" always "+"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4716 always 4716
Line 4717
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4717 always 4717
  5 always 5
Line 4718
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4718 always 4718
Line 4720
  = always "int f(int x) {\n  if (x < 2) {}\n  else if (x >= 2) {}\n}"
  "int f(int x) {\n  if (x < 2) {}\n  else if (x >= 2) {}\n}" always "int f(int x) {\n  if (x < 2) {}\n  else if (x >= 2) {}\n}"
Line 4724
  code always "int f(int x) {\n  if (x < 2) {}\n  else if (x >= 2) {}\n}"
  ">=" always ">="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4724 always 4724
Line 4725
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4725 always 4725
  1 always 1
Line 4726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4726 always 4726
Line 4728
  = always "int f(int x) {\n  if (x < 2) {}\n  else if (x > 2) {}\n}"
  "int f(int x) {\n  if (x < 2) {}\n  else if (x > 2) {}\n}" always "int f(int x) {\n  if (x < 2) {}\n  else if (x > 2) {}\n}"
Line 4732
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4732 always 4732
  ( always {!<=-1,!>=2}
  code always "int f(int x) {\n  if (x < 2) {}\n  else if (x > 2) {}\n}"
  ">" always ">"
Line 4735
  = always "void f() {\n    int x = 1;\n    int y = 2 + x;\n    if (x == 2) {}\n}"
  "void f() {\n    int x = 1;\n    int y = 2 + x;\n    if (x == 2) {}\n}" always "void f() {\n    int x = 1;\n    int y = 2 + x;\n    if (x == 2) {}\n}"
Line 4740
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4740 always 4740
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4740 always 4740
  code always "void f() {\n    int x = 1;\n    int y = 2 + x;\n    if (x == 2) {}\n}"
  3U always 3
  1 always 1
Line 4741
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4741 always 4741
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4741 always 4741
  3U always 3
  2 always 2
Line 4743
  = always "bool f() {\n  const int s( 4 );  return s == 4;\n}"
  "bool f() {\n  const int s( 4 );  return s == 4;\n}" always "bool f() {\n  const int s( 4 );  return s == 4;\n}"
Line 4747
  code always "bool f() {\n  const int s( 4 );  return s == 4;\n}"
  "==" always "=="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4747 always 4747
Line 4748
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4748 always 4748
Line 4749
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4749 always 4749
  1 always 1
Line 4751
  = always "bool f() {\n  const int s{ 4 };  return s == 4;\n}"
  "bool f() {\n  const int s{ 4 };  return s == 4;\n}" always "bool f() {\n  const int s{ 4 };  return s == 4;\n}"
Line 4755
  code always "bool f() {\n  const int s{ 4 };  return s == 4;\n}"
  "==" always "=="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4755 always 4755
Line 4756
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4756 always 4756
Line 4757
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4757 always 4757
  1 always 1
Line 4759
  = always "bool f() {\n  const int s = int( 4 );  return s == 4;\n}"
  "bool f() {\n  const int s = int( 4 );  return s == 4;\n}" always "bool f() {\n  const int s = int( 4 );  return s == 4;\n}"
Line 4763
  code always "bool f() {\n  const int s = int( 4 );  return s == 4;\n}"
  "==" always "=="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4763 always 4763
Line 4764
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4764 always 4764
Line 4765
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4765 always 4765
  1 always 1
Line 4767
  = always "bool f() {\n  const int s = int{ 4 };  return s == 4;\n}"
  "bool f() {\n  const int s = int{ 4 };  return s == 4;\n}" always "bool f() {\n  const int s = int{ 4 };  return s == 4;\n}"
Line 4771
  code always "bool f() {\n  const int s = int{ 4 };  return s == 4;\n}"
  "==" always "=="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4771 always 4771
Line 4772
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4772 always 4772
Line 4773
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4773 always 4773
  1 always 1
Line 4775
  = always "bool f() {\n  const int s = int{};  return s == 0;\n}"
  "bool f() {\n  const int s = int{};  return s == 0;\n}" always "bool f() {\n  const int s = int{};  return s == 0;\n}"
Line 4779
  code always "bool f() {\n  const int s = int{};  return s == 0;\n}"
  "==" always "=="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4779 always 4779
Line 4780
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4780 always 4780
  true always 1
  false always 0
Line 4781
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4781 always 4781
  1 always 1
  0 always 0
Line 4783
  = always "bool f() {\n  const int s = int();  return s == 0;\n}"
  "bool f() {\n  const int s = int();  return s == 0;\n}" always "bool f() {\n  const int s = int();  return s == 0;\n}"
Line 4787
  code always "bool f() {\n  const int s = int();  return s == 0;\n}"
  "==" always "=="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4787 always 4787
Line 4788
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4788 always 4788
  true always 1
  false always 0
Line 4789
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4789 always 4789
  1 always 1
  0 always 0
Line 4792
  = always "int f(int x) { a = x & 0; }"
  "int f(int x) { a = x & 0; }" always "int f(int x) { a = x & 0; }"
Line 4793
  code always "int f(int x) { a = x & 0; }"
  "&" always "&"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4793 always 4793
Line 4794
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4794 always 4794
  0 always 0
Line 4795
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4795 always 4795
Line 4798
  = always "template <int X> void f() { a = X; }\nf<1>();"
  "template <int X> void f() { a = X; }\nf<1>();" always "template <int X> void f() { a = X; }\nf<1>();"
Line 4800
  code always "template <int X> void f() { a = X; }\nf<1>();"
  "1" always "1"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4800 always 4800
Line 4801
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4801 always 4801
  1 always 1
Line 4802
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4802 always 4802
  false always 0
Line 4806
  = always "enum E; sz=sizeof(E);"
  "enum E; sz=sizeof(E);" always "enum E; sz=sizeof(E);"
Line 4807
  code always "enum E; sz=sizeof(E);"
  "=" always "="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4807 always 4807
Line 4813
  = always "int x;\nvoid f() {\n    x = 4;\n    a = x;\n}"
  "int x;\nvoid f() {\n    x = 4;\n    a = x;\n}" always "int x;\nvoid f() {\n    x = 4;\n    a = x;\n}"
Line 4818
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4818 always 4818
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4818 always 4818
  code always "int x;\nvoid f() {\n    x = 4;\n    a = x;\n}"
  4U always 4
  4 always 4
Line 4820
  = always "int x;\nvoid f() {\n    if (x == 4) {}\n    a = x;\n}"
  "int x;\nvoid f() {\n    if (x == 4) {}\n    a = x;\n}" always "int x;\nvoid f() {\n    if (x == 4) {}\n    a = x;\n}"
Line 4825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4825 always 4825
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4825 always 4825
  code always "int x;\nvoid f() {\n    if (x == 4) {}\n    a = x;\n}"
  4U always 4
  4 always 4
Line 4827
  = always "int x;\nvoid f() {\n    x = 42;\n    unknownFunction();\n    a = x;\n}"
  "int x;\nvoid f() {\n    x = 42;\n    unknownFunction();\n    a = x;\n}" always "int x;\nvoid f() {\n    x = 42;\n    unknownFunction();\n    a = x;\n}"
Line 4833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4833 always 4833
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4833 always 4833
  code always "int x;\nvoid f() {\n    x = 42;\n    unknownFunction();\n    a = x;\n}"
  5U always 5
  42 always 42
Line 4839
  = always "const int x = 321;\nvoid f() {\n  a = x;\n}"
  "const int x = 321;\nvoid f() {\n  a = x;\n}" always "const int x = 321;\nvoid f() {\n  a = x;\n}"
Line 4843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4843 always 4843
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4843 always 4843
  code always "const int x = 321;\nvoid f() {\n  a = x;\n}"
  3U always 3
  321 always 321
Line 4845
  = always "void f(const int x = 1) {\n    int a = x;\n}\n"
  "void f(const int x = 1) {\n    int a = x;\n}\n" always "void f(const int x = 1) {\n    int a = x;\n}\n"
Line 4848
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4848 always 4848
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4848 always 4848
  code always "void f(const int x = 1) {\n    int a = x;\n}\n"
  2U always 2
  1 always 1
Line 4850
  = always "volatile const int x = 42;\nvoid f(){ int a = x; }\n"
  "volatile const int x = 42;\nvoid f(){ int a = x; }\n" always "volatile const int x = 42;\nvoid f(){ int a = x; }\n"
Line 4852
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4852 always 4852
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4852 always 4852
  code always "volatile const int x = 42;\nvoid f(){ int a = x; }\n"
  2U always 2
  42 always 42
Line 4854
  = always "static const int x = 42;\nvoid f(){ int a = x; }\n"
  "static const int x = 42;\nvoid f(){ int a = x; }\n" always "static const int x = 42;\nvoid f(){ int a = x; }\n"
Line 4856
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4856 always 4856
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4856 always 4856
  code always "static const int x = 42;\nvoid f(){ int a = x; }\n"
  2U always 2
  42 always 42
Line 4862
  = always "static int x = 321;\nvoid f() {\n  a = x;\n}"
  "static int x = 321;\nvoid f() {\n  a = x;\n}" always "static int x = 321;\nvoid f() {\n  a = x;\n}"
Line 4866
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4866 always 4866
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4866 always 4866
  code always "static int x = 321;\nvoid f() {\n  a = x;\n}"
  3U always 3
  321 always 321
Line 4868
  = always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { x=a; }\n"
  "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { x=a; }\n" always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { x=a; }\n"
Line 4873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4873 always 4873
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4873 always 4873
  code always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { x=a; }\n"
  3U always 3
  321 always 321
Line 4875
  = always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { p = &x; }\n"
  "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { p = &x; }\n" always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { p = &x; }\n"
Line 4880
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4880 always 4880
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4880 always 4880
  code always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { p = &x; }\n"
  3U always 3
  321 always 321
Line 4882
  = always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { x++; }\n"
  "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { x++; }\n" always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { x++; }\n"
Line 4887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4887 always 4887
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4887 always 4887
  code always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { x++; }\n"
  3U always 3
  321 always 321
Line 4889
  = always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { foo(x); }\n"
  "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { foo(x); }\n" always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { foo(x); }\n"
Line 4894
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4894 always 4894
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4894 always 4894
  code always "static int x = 321;\nvoid f() {\n  a = x;\n}void other() { foo(x); }\n"
  3U always 3
  321 always 321
Line 4896
  = always "static int x = 1;\nvoid f() {\n  a = x;\n}void other() { x += b; }\n"
  "static int x = 1;\nvoid f() {\n  a = x;\n}void other() { x += b; }\n" always "static int x = 1;\nvoid f() {\n  a = x;\n}void other() { x += b; }\n"
Line 4901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4901 always 4901
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4901 always 4901
  code always "static int x = 1;\nvoid f() {\n  a = x;\n}void other() { x += b; }\n"
  3U always 3
  1 always 1
Line 4905
  = always "void f() {\n    int x = 42;\n    asm(\"\");\n    a = x;\n}"
  "void f() {\n    int x = 42;\n    asm(\"\");\n    a = x;\n}" always "void f() {\n    int x = 42;\n    asm(\"\");\n    a = x;\n}"
Line 4910
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4910 always 4910
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4910 always 4910
  code always "void f() {\n    int x = 42;\n    asm(\"\");\n    a = x;\n}"
  5U always 5
  42 always 42
Line 4916
  = always "void f(int a) {\n    bool x = a == a;\n    bool b = x;\n}\n"
  "void f(int a) {\n    bool x = a == a;\n    bool b = x;\n}\n" always "void f(int a) {\n    bool x = a == a;\n    bool b = x;\n}\n"
Line 4920
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4920 always 4920
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4920 always 4920
  code always "void f(int a) {\n    bool x = a == a;\n    bool b = x;\n}\n"
  3U always 3
  1 always 1
Line 4922
  = always "void f(int a) {\n    bool x = a != a;\n    bool b = x;\n}\n"
  "void f(int a) {\n    bool x = a != a;\n    bool b = x;\n}\n" always "void f(int a) {\n    bool x = a != a;\n    bool b = x;\n}\n"
Line 4926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4926 always 4926
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4926 always 4926
  code always "void f(int a) {\n    bool x = a != a;\n    bool b = x;\n}\n"
  3U always 3
  0 always 0
Line 4928
  = always "void f(int a) {\n    int x = a - a;\n    int b = x;\n}\n"
  "void f(int a) {\n    int x = a - a;\n    int b = x;\n}\n" always "void f(int a) {\n    int x = a - a;\n    int b = x;\n}\n"
Line 4932
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4932 always 4932
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4932 always 4932
  code always "void f(int a) {\n    int x = a - a;\n    int b = x;\n}\n"
  3U always 3
  0 always 0
Line 4934
  = always "void f(float a) {\n    bool x = a == a;\n    bool b = x;\n}\n"
  "void f(float a) {\n    bool x = a == a;\n    bool b = x;\n}\n" always "void f(float a) {\n    bool x = a == a;\n    bool b = x;\n}\n"
Line 4938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4938 always 4938
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4938 always 4938
  code always "void f(float a) {\n    bool x = a == a;\n    bool b = x;\n}\n"
  3U always 3
  1 always 1
Line 4945
  = always "void f() {\n    int x;\n    switch (x) {}\n}"
  "void f() {\n    int x;\n    switch (x) {}\n}" always "void f() {\n    int x;\n    switch (x) {}\n}"
Line 4949
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4949 always 4949
  code always "void f() {\n    int x;\n    switch (x) {}\n}"
  "x )" always "x )"
Line 4950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4950 always 4950
  true always 1
  ( always !<=-1
  == always {!<=-1,!>=2}
  1U always 1
  && always {!<=-1,!>=2}
  values always size=1
Line 4952
  = always "void f() {\n    const C *c;\n    if (c->x() == 4) {}\n}"
  "void f() {\n    const C *c;\n    if (c->x() == 4) {}\n}" always "void f() {\n    const C *c;\n    if (c->x() == 4) {}\n}"
Line 4956
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4956 always 4956
  code always "void f() {\n    const C *c;\n    if (c->x() == 4) {}\n}"
  "c ." always "c ."
Line 4957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4957 always 4957
  true always 1
  ( always !<=-1
  == always {!<=-1,!>=2}
  1U always 1
  && always {!<=-1,!>=2}
  values always size=1
Line 4959
  = always "void f() {\n    C *c;\n    if (c->x() == 4) {}\n}"
  "void f() {\n    C *c;\n    if (c->x() == 4) {}\n}" always "void f() {\n    C *c;\n    if (c->x() == 4) {}\n}"
Line 4963
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4963 always 4963
  code always "void f() {\n    C *c;\n    if (c->x() == 4) {}\n}"
  "c ." always "c ."
Line 4964
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4964 always 4964
  true always 1
  ( always !<=-1
  == always {!<=-1,!>=2}
  1U always 1
  && always {!<=-1,!>=2}
  values always size=1
Line 4966
  = always "void f() {\n    int **x;\n    y += 10;\n    x = dostuff(sizeof(*x)*y);\n}"
  "void f() {\n    int **x;\n    y += 10;\n    x = dostuff(sizeof(*x)*y);\n}" always "void f() {\n    int **x;\n    y += 10;\n    x = dostuff(sizeof(*x)*y);\n}"
Line 4971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4971 always 4971
  0U always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4971 always 4971
  code always "void f() {\n    int **x;\n    y += 10;\n    x = dostuff(sizeof(*x)*y);\n}"
  "x )" always "x )"
  ( always !<=-1
Line 4974
  = always "void foo() {\n    int x;\n    f(x=3), return x+3;\n}"
  "void foo() {\n    int x;\n    f(x=3), return x+3;\n}" always "void foo() {\n    int x;\n    f(x=3), return x+3;\n}"
Line 4978
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4978 always 4978
  code always "void foo() {\n    int x;\n    f(x=3), return x+3;\n}"
  "x +" always "x +"
Line 4979
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4979 always 4979
  true always 1
  ( always {!<=-1,!>=2}
Line 4985
  = always "void foo(std::istream &is) {\n  int x;\n  if (is >> x) {\n    a = x;\n  }\n}"
  "void foo(std::istream &is) {\n  int x;\n  if (is >> x) {\n    a = x;\n  }\n}" always "void foo(std::istream &is) {\n  int x;\n  if (is >> x) {\n    a = x;\n  }\n}"
Line 4991
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4991 always 4991
  code always "void foo(std::istream &is) {\n  int x;\n  if (is >> x) {\n    a = x;\n  }\n}"
  "x ; }" always "x ; }"
Line 4992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4992 always 4992
  true always 1
  ( always {!<=-1,!>=2}
Line 4995
  = always "int repeat() {\n  const char *n;\n  return((n=42) && *n == 'A');\n}"
  "int repeat() {\n  const char *n;\n  return((n=42) && *n == 'A');\n}" always "int repeat() {\n  const char *n;\n  return((n=42) && *n == 'A');\n}"
Line 4999
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  4999 always 4999
  code always "int repeat() {\n  const char *n;\n  return((n=42) && *n == 'A');\n}"
  "n ==" always "n =="
Line 5000
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5000 always 5000
  true always 1
  ( always {!<=-1,!>=2}
Line 5003
  = always "void foo() {\n  int x;\n  int y = 1;\n  if (y>1)\n    x = 1;\n  else\n    x = 1;\n  if (x>1) {}\n}"
  "void foo() {\n  int x;\n  int y = 1;\n  if (y>1)\n    x = 1;\n  else\n    x = 1;\n  if (x>1) {}\n}" always "void foo() {\n  int x;\n  int y = 1;\n  if (y>1)\n    x = 1;\n  else\n    x = 1;\n  if (x>1) {}\n}"
Line 5012
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5012 always 5012
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5012 always 5012
  code always "void foo() {\n  int x;\n  int y = 1;\n  if (y>1)\n    x = 1;\n  else\n    x = 1;\n  if (x>1) {}\n}"
  8U always 8
  1 always 1
Line 5015
  = always "int test_input_int(int a, int b) {\n    int x;\n    if (a == 1)\n        x = b;\n    else\n        abort();\n    a = x + 1;\n}\n"
  "int test_input_int(int a, int b) {\n    int x;\n    if (a == 1)\n        x = b;\n    else\n        abort();\n    a = x + 1;\n}\n" always "int test_input_int(int a, int b) {\n    int x;\n    if (a == 1)\n        x = b;\n    else\n        abort();\n    a = x + 1;\n}\n"
Line 5023
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5023 always 5023
  code always "int test_input_int(int a, int b) {\n    int x;\n    if (a == 1)\n        x = b;\n    else\n        abort();\n    a = x + 1;\n}\n"
  "x +" always "x +"
Line 5024
  & {lifetime[Address]=(isNotUninitValue),!0}
Line 5025
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5025 always 5025
  true always 1
  ( always {!<=-1,!>=2}
Line 5028
  = always "void f() {\n    int x;\n    a & x;\n}"
  "void f() {\n    int x;\n    a & x;\n}" always "void f() {\n    int x;\n    a & x;\n}"
Line 5032
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5032 always 5032
  code always "void f() {\n    int x;\n    a & x;\n}"
  "x ; }" always "x ; }"
Line 5033
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5033 always 5033
  true always 1
  ( always {!<=-1,!>=2}
Line 5035
  = always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    goto;\n  c++;\n}\n"
  "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    goto;\n  c++;\n}\n" always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    goto;\n  c++;\n}\n"
Line 5043
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5043 always 5043
  code always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    goto;\n  c++;\n}\n"
  "c ++ ; }" always "c ++ ; }"
Line 5044
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5044 always 5044
  true always 1
  ( always {!<=-1,!>=2}
Line 5046
  = always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    return;\n  c++;\n}\n"
  "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    return;\n  c++;\n}\n" always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    return;\n  c++;\n}\n"
Line 5054
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5054 always 5054
  code always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    return;\n  c++;\n}\n"
  "c ++ ; }" always "c ++ ; }"
Line 5055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5055 always 5055
  true always 1
  ( always {!<=-1,!>=2}
Line 5057
  = always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    exit();\n  c++;\n}\n"
  "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    exit();\n  c++;\n}\n" always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    exit();\n  c++;\n}\n"
Line 5065
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5065 always 5065
  code always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n  if (e)\n    exit();\n  c++;\n}\n"
  "c ++ ; }" always "c ++ ; }"
Line 5066
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5066 always 5066
  true always 1
  ( always {!<=-1,!>=2}
Line 5068
  = always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n else if (e)\n   c = 0;\n  c++;\n}\n"
  "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n else if (e)\n   c = 0;\n  c++;\n}\n" always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n else if (e)\n   c = 0;\n  c++;\n}\n"
Line 5076
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5076 always 5076
  code always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n else if (e)\n   c = 0;\n  c++;\n}\n"
  "c ++ ; }" always "c ++ ; }"
Line 5077
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5077 always 5077
  true always 1
  false always 0
  ( always !<=-1
  == always {!<=-1,!>=2}
  2 always 2
Line 5082
  = always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n else if (!d)\n   c = 0;\n  c++;\n}\n"
  "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n else if (!d)\n   c = 0;\n  c++;\n}\n" always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n else if (!d)\n   c = 0;\n  c++;\n}\n"
Line 5090
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5090 always 5090
  code always "void b(bool d, bool e) {\n  int c;\n  if (d)\n    c = 0;\n else if (!d)\n   c = 0;\n  c++;\n}\n"
  "c ++ ; }" always "c ++ ; }"
Line 5091
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5091 always 5091
  true always 1
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 5093
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5093 always 5093
  true always 1
Line 5094
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5094 always 5094
  true always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 5096
  = always "void f() {\n  int szHdr;\n  idx = (A<0x80) ? (szHdr = 0) : dostuff(A, (int *)&(szHdr));\n  d = szHdr;\n}"
  "void f() {\n  int szHdr;\n  idx = (A<0x80) ? (szHdr = 0) : dostuff(A, (int *)&(szHdr));\n  d = szHdr;\n}" always "void f() {\n  int szHdr;\n  idx = (A<0x80) ? (szHdr = 0) : dostuff(A, (int *)&(szHdr));\n  d = szHdr;\n}"
Line 5101
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5101 always 5101
  code always "void f() {\n  int szHdr;\n  idx = (A<0x80) ? (szHdr = 0) : dostuff(A, (int *)&(szHdr));\n  d = szHdr;\n}"
  "szHdr ; }" always "szHdr ; }"
Line 5102
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5102 always 5102
  1 always 1
  0 always 0
  values possible size=1
  ( {!<=-1,1}
Line 5103
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 5104
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5104 always 5104
  false always 0
  values always size=1
Line 5107
  = always "void f () {\n  int szHdr;\n  idx = ((aKey<0x80) ? ((szHdr)=aKey), 1 : sqlite3GetVarint32(&(szHdr)));\n  d = szHdr;\n}"
  "void f () {\n  int szHdr;\n  idx = ((aKey<0x80) ? ((szHdr)=aKey), 1 : sqlite3GetVarint32(&(szHdr)));\n  d = szHdr;\n}" always "void f () {\n  int szHdr;\n  idx = ((aKey<0x80) ? ((szHdr)=aKey), 1 : sqlite3GetVarint32(&(szHdr)));\n  d = szHdr;\n}"
Line 5112
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5112 always 5112
  code always "void f () {\n  int szHdr;\n  idx = ((aKey<0x80) ? ((szHdr)=aKey), 1 : sqlite3GetVarint32(&(szHdr)));\n  d = szHdr;\n}"
  "szHdr ; }" always "szHdr ; }"
Line 5113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5113 always 5113
  0 always 0
  ( always !<=-1
Line 5116
  = always "struct MyStruct { size_t value; }\n\nvoid foo() {\n    MyStruct x;\n    fread(((char *)&x) + 0, sizeof(x), f);\n    if (x.value < 432) {}\n}"
  "struct MyStruct { size_t value; }\n\nvoid foo() {\n    MyStruct x;\n    fread(((char *)&x) + 0, sizeof(x), f);\n    if (x.value < 432) {}\n}" always "struct MyStruct { size_t value; }\n\nvoid foo() {\n    MyStruct x;\n    fread(((char *)&x) + 0, sizeof(x), f);\n    if (x.value < 432) {}\n}"
Line 5123
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5123 always 5123
  code always "struct MyStruct { size_t value; }\n\nvoid foo() {\n    MyStruct x;\n    fread(((char *)&x) + 0, sizeof(x), f);\n    if (x.value < 432) {}\n}"
  "x . value" always "x . value"
Line 5124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5124 always 5124
  0 always 0
  ( always !<=-1
Line 5127
  = always "int f(bool b) {\n    int x;\n    do {\n      if (b) {\n        x = 0;\n        break;\n      }\n    } while (true);\n    return x;\n}\n"
  "int f(bool b) {\n    int x;\n    do {\n      if (b) {\n        x = 0;\n        break;\n      }\n    } while (true);\n    return x;\n}\n" always "int f(bool b) {\n    int x;\n    do {\n      if (b) {\n        x = 0;\n        break;\n      }\n    } while (true);\n    return x;\n}\n"
Line 5137
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5137 always 5137
  code always "int f(bool b) {\n    int x;\n    do {\n      if (b) {\n        x = 0;\n        break;\n      }\n    } while (true);\n    return x;\n}\n"
  "x ; }" always "x ; }"
Line 5138
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5138 always 5138
  0 always 0
  ( always !<=-1
Line 5140
  = always "int f(bool b) {\n    int x;\n    while (true) {\n      if (b) {\n        x = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
  "int f(bool b) {\n    int x;\n    while (true) {\n      if (b) {\n        x = 0;\n        break;\n      }\n    }\n    return x;\n}\n" always "int f(bool b) {\n    int x;\n    while (true) {\n      if (b) {\n        x = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
Line 5150
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5150 always 5150
  code always "int f(bool b) {\n    int x;\n    while (true) {\n      if (b) {\n        x = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
  "x ; }" always "x ; }"
Line 5151
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5151 always 5151
  0 always 0
  ( always !<=-1
Line 5153
  = always "int f(bool b) {\n    int x;\n    for(;;) {\n      if (b) {\n        x = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
  "int f(bool b) {\n    int x;\n    for(;;) {\n      if (b) {\n        x = 0;\n        break;\n      }\n    }\n    return x;\n}\n" always "int f(bool b) {\n    int x;\n    for(;;) {\n      if (b) {\n        x = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
Line 5163
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5163 always 5163
  code always "int f(bool b) {\n    int x;\n    for(;;) {\n      if (b) {\n        x = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
  "x ; }" always "x ; }"
Line 5164
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5164 always 5164
  0 always 0
  ( always !<=-1
Line 5166
  = always "int f(bool b) {\n    int x;\n    switch (b) {\n      case 1: {\n        ret = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
  "int f(bool b) {\n    int x;\n    switch (b) {\n      case 1: {\n        ret = 0;\n        break;\n      }\n    }\n    return x;\n}\n" always "int f(bool b) {\n    int x;\n    switch (b) {\n      case 1: {\n        ret = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
Line 5176
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5176 always 5176
  code always "int f(bool b) {\n    int x;\n    switch (b) {\n      case 1: {\n        ret = 0;\n        break;\n      }\n    }\n    return x;\n}\n"
  "x ; }" always "x ; }"
Line 5177
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5177 always 5177
  0 always 0
  ( always !<=-1
Line 5179
  = always "void f() {\n    int i;\n    if (x) {\n        int y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}\n"
  "void f() {\n    int i;\n    if (x) {\n        int y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}\n" always "void f() {\n    int i;\n    if (x) {\n        int y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}\n"
Line 5187
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5187 always 5187
  code always "void f() {\n    int i;\n    if (x) {\n        int y = -ENOMEM;\n        if (y != 0) return;\n        i++;\n    }\n}\n"
  "i ++" always "i ++"
Line 5188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5188 always 5188
  0 always 0
  ( always !<=-1
Line 5195
  = always "void f(int i, int j) {\n    if (i == j) return;\n    if(i != j) {}\n}\n"
  "void f(int i, int j) {\n    if (i == j) return;\n    if(i != j) {}\n}\n" always "void f(int i, int j) {\n    if (i == j) return;\n    if(i != j) {}\n}\n"
Line 5199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5199 always 5199
  true always 1
  code always "void f(int i, int j) {\n    if (i == j) return;\n    if(i != j) {}\n}\n"
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5199 always 5199
  == always {!<=-1,!>=2}
  1 always 1
Line 5201
  = always "void f(int i, int j) {\n    if (i == j) return;\n    i++;\n    if (i != j) {}\n}\n"
  "void f(int i, int j) {\n    if (i == j) return;\n    i++;\n    if (i != j) {}\n}\n" always "void f(int i, int j) {\n    if (i == j) return;\n    i++;\n    if (i != j) {}\n}\n"
Line 5206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5206 always 5206
  false always 0
  code always "void f(int i, int j) {\n    if (i == j) return;\n    i++;\n    if (i != j) {}\n}\n"
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5206 always 5206
  == always {!<=-1,!>=2}
  1 always 1
Line 5208
  = always "void f(int i, int j, bool a) {\n    if (a) {\n        if (i == j) return;\n    }\n    if (i != j) {}\n}\n"
  "void f(int i, int j, bool a) {\n    if (a) {\n        if (i == j) return;\n    }\n    if (i != j) {}\n}\n" always "void f(int i, int j, bool a) {\n    if (a) {\n        if (i == j) return;\n    }\n    if (i != j) {}\n}\n"
Line 5214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5214 always 5214
  true always 1
  code always "void f(int i, int j, bool a) {\n    if (a) {\n        if (i == j) return;\n    }\n    if (i != j) {}\n}\n"
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5214 always 5214
  == always {!<=-1,!>=2}
  1 always 1
Line 5215
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5215 always 5215
  false always 0
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5215 always 5215
Line 5217
  = always "void f(int i, int j, bool a) {\n    if (i != j) {}\n    if (i == j) return;\n}\n"
  "void f(int i, int j, bool a) {\n    if (i != j) {}\n    if (i == j) return;\n}\n" always "void f(int i, int j, bool a) {\n    if (i != j) {}\n    if (i == j) return;\n}\n"
Line 5221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5221 always 5221
  false always 0
  code always "void f(int i, int j, bool a) {\n    if (i != j) {}\n    if (i == j) return;\n}\n"
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5221 always 5221
  == always {!<=-1,!>=2}
  1 always 1
Line 5224
  = always "void f(int i, int j) {\n    if (i != j) return;\n    bool x = (i != j);\n    bool b = x;\n}\n"
  "void f(int i, int j) {\n    if (i != j) return;\n    bool x = (i != j);\n    bool b = x;\n}\n" always "void f(int i, int j) {\n    if (i != j) return;\n    bool x = (i != j);\n    bool b = x;\n}\n"
Line 5229
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5229 always 5229
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5229 always 5229
  code always "void f(int i, int j) {\n    if (i != j) return;\n    bool x = (i != j);\n    bool b = x;\n}\n"
  4U always 4
  0 always 0
Line 5231
  = always "void f(int i, int j) {\n    if (i != j) return;\n    i++;\n    bool x = (i != j);\n    bool b = x;\n}\n"
  "void f(int i, int j) {\n    if (i != j) return;\n    i++;\n    bool x = (i != j);\n    bool b = x;\n}\n" always "void f(int i, int j) {\n    if (i != j) return;\n    i++;\n    bool x = (i != j);\n    bool b = x;\n}\n"
Line 5237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5237 always 5237
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5237 always 5237
  code always "void f(int i, int j) {\n    if (i != j) return;\n    i++;\n    bool x = (i != j);\n    bool b = x;\n}\n"
  5U always 5
  0 always 0
Line 5239
  = always "void f(int i, int j, bool a) {\n    if (a) {\n        if (i != j) return;\n    }\n    bool x = (i != j);\n    bool b = x;\n}\n"
  "void f(int i, int j, bool a) {\n    if (a) {\n        if (i != j) return;\n    }\n    bool x = (i != j);\n    bool b = x;\n}\n" always "void f(int i, int j, bool a) {\n    if (a) {\n        if (i != j) return;\n    }\n    bool x = (i != j);\n    bool b = x;\n}\n"
Line 5246
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5246 always 5246
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5246 always 5246
  code always "void f(int i, int j, bool a) {\n    if (a) {\n        if (i != j) return;\n    }\n    bool x = (i != j);\n    bool b = x;\n}\n"
  6U always 6
  0 always 0
Line 5248
  = always "void f(int i, int j, bool a) {\n    bool x = (i != j);\n    bool b = x;\n    if (i != j) return;\n}\n"
  "void f(int i, int j, bool a) {\n    bool x = (i != j);\n    bool b = x;\n    if (i != j) return;\n}\n" always "void f(int i, int j, bool a) {\n    bool x = (i != j);\n    bool b = x;\n    if (i != j) return;\n}\n"
Line 5253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5253 always 5253
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5253 always 5253
  code always "void f(int i, int j, bool a) {\n    bool x = (i != j);\n    bool b = x;\n    if (i != j) return;\n}\n"
  3U always 3
  0 always 0
Line 5255
  = always "void f(int i, int j, bool b) {\n    if (i == j) { if(b) return; }\n    if(i != j) {}\n}\n"
  "void f(int i, int j, bool b) {\n    if (i == j) { if(b) return; }\n    if(i != j) {}\n}\n" always "void f(int i, int j, bool b) {\n    if (i == j) { if(b) return; }\n    if(i != j) {}\n}\n"
Line 5259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5259 always 5259
  false always 0
  code always "void f(int i, int j, bool b) {\n    if (i == j) { if(b) return; }\n    if(i != j) {}\n}\n"
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5259 always 5259
  == always {!<=-1,!>=2}
  1 always 1
Line 5261
  = always "void f(bool b, int i, int j) {\n    if (b || i == j) return;\n    if(i != j) {}\n}\n"
  "void f(bool b, int i, int j) {\n    if (b || i == j) return;\n    if(i != j) {}\n}\n" always "void f(bool b, int i, int j) {\n    if (b || i == j) return;\n    if(i != j) {}\n}\n"
Line 5265
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5265 always 5265
  true always 1
  code always "void f(bool b, int i, int j) {\n    if (b || i == j) return;\n    if(i != j) {}\n}\n"
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5265 always 5265
  == always {!<=-1,!>=2}
  1 always 1
Line 5267
  = always "void f(bool b, int i, int j) {\n    if (b && i == j) return;\n    if(i != j) {}\n}\n"
  "void f(bool b, int i, int j) {\n    if (b && i == j) return;\n    if(i != j) {}\n}\n" always "void f(bool b, int i, int j) {\n    if (b && i == j) return;\n    if(i != j) {}\n}\n"
Line 5271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5271 always 5271
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5271 always 5271
  code always "void f(bool b, int i, int j) {\n    if (b && i == j) return;\n    if(i != j) {}\n}\n"
  "!=" always "!="
  ( always {!<=-1,!>=2}
Line 5273
  = always "void f(int i, int j) {\n    if (i == j) {\n        if (i != j) {}\n    }\n}\n"
  "void f(int i, int j) {\n    if (i == j) {\n        if (i != j) {}\n    }\n}\n" always "void f(int i, int j) {\n    if (i == j) {\n        if (i != j) {}\n    }\n}\n"
Line 5278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5278 always 5278
  true always 1
  code always "void f(int i, int j) {\n    if (i == j) {\n        if (i != j) {}\n    }\n}\n"
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5278 always 5278
  == always {!<=-1,!>=2}
  0 always 0
Line 5280
  = always "void f(int i, int j) {\n    if (i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
  "void f(int i, int j) {\n    if (i == j) {} else {\n        if (i != j) {}\n    }\n}\n" always "void f(int i, int j) {\n    if (i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
Line 5285
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5285 always 5285
  true always 1
  code always "void f(int i, int j) {\n    if (i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5285 always 5285
  == always {!<=-1,!>=2}
  1 always 1
Line 5287
  = always "void f(bool b, int i, int j) {\n    if (b && i == j) {\n        if (i != j) {}\n    }\n}\n"
  "void f(bool b, int i, int j) {\n    if (b && i == j) {\n        if (i != j) {}\n    }\n}\n" always "void f(bool b, int i, int j) {\n    if (b && i == j) {\n        if (i != j) {}\n    }\n}\n"
Line 5292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5292 always 5292
  true always 1
  code always "void f(bool b, int i, int j) {\n    if (b && i == j) {\n        if (i != j) {}\n    }\n}\n"
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5292 always 5292
  == always {!<=-1,!>=2}
  0 always 0
Line 5294
  = always "void f(bool b, int i, int j) {\n    if (b || i == j) {\n        if (i != j) {}\n    }\n}\n"
  "void f(bool b, int i, int j) {\n    if (b || i == j) {\n        if (i != j) {}\n    }\n}\n" always "void f(bool b, int i, int j) {\n    if (b || i == j) {\n        if (i != j) {}\n    }\n}\n"
Line 5299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5299 always 5299
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5299 always 5299
  code always "void f(bool b, int i, int j) {\n    if (b || i == j) {\n        if (i != j) {}\n    }\n}\n"
  "!=" always "!="
  ( always {!<=-1,!>=2}
Line 5301
  = always "void f(bool b, int i, int j) {\n    if (b || i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
  "void f(bool b, int i, int j) {\n    if (b || i == j) {} else {\n        if (i != j) {}\n    }\n}\n" always "void f(bool b, int i, int j) {\n    if (b || i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
Line 5306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5306 always 5306
  true always 1
  code always "void f(bool b, int i, int j) {\n    if (b || i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
  "!=" always "!="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5306 always 5306
  == always {!<=-1,!>=2}
  1 always 1
Line 5308
  = always "void f(bool b, int i, int j) {\n    if (b && i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
  "void f(bool b, int i, int j) {\n    if (b && i == j) {} else {\n        if (i != j) {}\n    }\n}\n" always "void f(bool b, int i, int j) {\n    if (b && i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
Line 5313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5313 always 5313
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5313 always 5313
  code always "void f(bool b, int i, int j) {\n    if (b && i == j) {} else {\n        if (i != j) {}\n    }\n}\n"
  "!=" always "!="
  ( always {!<=-1,!>=2}
Line 5315
  = always "void foo()\n{\n    if ( this->FileIndex >= 0 )\n        return;\n\n    this->FileIndex = 1 ;\n    if ( this->FileIndex < 0 ) {}\n}"
  "void foo()\n{\n    if ( this->FileIndex >= 0 )\n        return;\n\n    this->FileIndex = 1 ;\n    if ( this->FileIndex < 0 ) {}\n}" always "void foo()\n{\n    if ( this->FileIndex >= 0 )\n        return;\n\n    this->FileIndex = 1 ;\n    if ( this->FileIndex < 0 ) {}\n}"
Line 5323
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5323 always 5323
  false always 0
  code always "void foo()\n{\n    if ( this->FileIndex >= 0 )\n        return;\n\n    this->FileIndex = 1 ;\n    if ( this->FileIndex < 0 ) {}\n}"
  "<" always "<"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5323 always 5323
  == always {!<=-1,!>=2}
  1 always 1
Line 5325
  = always "int f(int p) {\n    int v = 0;\n    for (int i = 0; i < 1; ++i) {\n        if (p == 0)\n            v = 1;\n        if (v == 1)\n            break;\n    }\n    int x = v;\n    return x;\n}\n"
  "int f(int p) {\n    int v = 0;\n    for (int i = 0; i < 1; ++i) {\n        if (p == 0)\n            v = 1;\n        if (v == 1)\n            break;\n    }\n    int x = v;\n    return x;\n}\n" always "int f(int p) {\n    int v = 0;\n    for (int i = 0; i < 1; ++i) {\n        if (p == 0)\n            v = 1;\n        if (v == 1)\n            break;\n    }\n    int x = v;\n    return x;\n}\n"
Line 5336
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5336 always 5336
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5336 always 5336
  code always "int f(int p) {\n    int v = 0;\n    for (int i = 0; i < 1; ++i) {\n        if (p == 0)\n            v = 1;\n        if (v == 1)\n            break;\n    }\n    int x = v;\n    return x;\n}\n"
  10U always 10
  0 always 0
Line 5337
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5337 always 5337
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5337 always 5337
  10U always 10
  1 always 1
Line 5339
  = always "void f() {\n    const int size = arrayInfo.num(0);\n    if (size <= 0)\n        return;\n    for (;;)\n        if (size > 0) {}\n}\n"
  "void f() {\n    const int size = arrayInfo.num(0);\n    if (size <= 0)\n        return;\n    for (;;)\n        if (size > 0) {}\n}\n" always "void f() {\n    const int size = arrayInfo.num(0);\n    if (size <= 0)\n        return;\n    for (;;)\n        if (size > 0) {}\n}\n"
Line 5346
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5346 always 5346
  true always 1
  code always "void f() {\n    const int size = arrayInfo.num(0);\n    if (size <= 0)\n        return;\n    for (;;)\n        if (size > 0) {}\n}\n"
  "> 0" always "> 0"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5346 always 5346
Line 5347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5347 always 5347
  true always 1
  "> 0" always "> 0"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5347 always 5347
  == always {!<=-1,!>=2}
  1 always 1
Line 5350
  = always "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (!x) {\n        return false;\n    }\n\n    if (x & CB) {\n        return true;\n    }\n    return false;\n}\n"
  "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (!x) {\n        return false;\n    }\n\n    if (x & CB) {\n        return true;\n    }\n    return false;\n}\n" always "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (!x) {\n        return false;\n    }\n\n    if (x & CB) {\n        return true;\n    }\n    return false;\n}\n"
Line 5361
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5361 always 5361
  false always 0
  code always "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (!x) {\n        return false;\n    }\n\n    if (x & CB) {\n        return true;\n    }\n    return false;\n}\n"
  "& CB" always "& CB"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5361 always 5361
Line 5362
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5362 always 5362
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5362 always 5362
  7U always 7
  0 always 0
Line 5364
  = always "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (x) {\n        return false;\n    }\n\n    if ((!x) & CB) {\n        return true;\n    }\n    return false;\n}\n"
  "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (x) {\n        return false;\n    }\n\n    if ((!x) & CB) {\n        return true;\n    }\n    return false;\n}\n" always "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (x) {\n        return false;\n    }\n\n    if ((!x) & CB) {\n        return true;\n    }\n    return false;\n}\n"
Line 5375
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5375 always 5375
  true always 1
  code always "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (x) {\n        return false;\n    }\n\n    if ((!x) & CB) {\n        return true;\n    }\n    return false;\n}\n"
  "& CB" always "& CB"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5375 always 5375
Line 5376
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5376 always 5376
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5376 always 5376
  7U always 7
  0 always 0
Line 5378
  = always "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (!!x) {\n        return false;\n    }\n\n    if (x & CB) {\n        return true;\n    }\n    return false;\n}\n"
  "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (!!x) {\n        return false;\n    }\n\n    if (x & CB) {\n        return true;\n    }\n    return false;\n}\n" always "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (!!x) {\n        return false;\n    }\n\n    if (x & CB) {\n        return true;\n    }\n    return false;\n}\n"
Line 5389
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5389 always 5389
  true always 1
  code always "enum FENUMS { NONE = 0, CB = 8 };\nbool calc(int x) {\n    if (!!x) {\n        return false;\n    }\n\n    if (x & CB) {\n        return true;\n    }\n    return false;\n}\n"
  "& CB" always "& CB"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5389 always 5389
Line 5390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5390 always 5390
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5390 always 5390
  7U always 7
  0 always 0
Line 5392
  = always "bool calc(bool x) {\n    if (!x) {\n        return false;\n    }\n\n    if (x) {\n        return true;\n    }\n    return false;\n}\n"
  "bool calc(bool x) {\n    if (!x) {\n        return false;\n    }\n\n    if (x) {\n        return true;\n    }\n    return false;\n}\n" always "bool calc(bool x) {\n    if (!x) {\n        return false;\n    }\n\n    if (x) {\n        return true;\n    }\n    return false;\n}\n"
Line 5402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5402 always 5402
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5402 always 5402
  code always "bool calc(bool x) {\n    if (!x) {\n        return false;\n    }\n\n    if (x) {\n        return true;\n    }\n    return false;\n}\n"
  6U always 6
  1 always 1
Line 5404
  = always "bool calc(bool x) {\n    if (x) {\n        return false;\n    }\n\n    if (!x) {\n        return true;\n    }\n    return false;\n}\n"
  "bool calc(bool x) {\n    if (x) {\n        return false;\n    }\n\n    if (!x) {\n        return true;\n    }\n    return false;\n}\n" always "bool calc(bool x) {\n    if (x) {\n        return false;\n    }\n\n    if (!x) {\n        return true;\n    }\n    return false;\n}\n"
Line 5414
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5414 always 5414
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5414 always 5414
  code always "bool calc(bool x) {\n    if (x) {\n        return false;\n    }\n\n    if (!x) {\n        return true;\n    }\n    return false;\n}\n"
  6U always 6
  0 always 0
Line 5418
  , always 1
Line 5419
  unique always {!<=-1,!>=2}
  = always 1
  true always 1
Line 5420
  & {lifetime[Address]=(isSymbolicValue),!0}
Line 5421
  ! {!<=-1,!>=2,1@172}
  unique {!<=-1,!>=2,0@172}
Line 5422
  & {lifetime[Address]=(isNotPossible),!0}
Line 5423
  ( always !<=-1
  != always {!<=-1,!>=2}
  1 always 1
Line 5424
  "values.size():" always "values.size():"
  values always !size=1
  ( always {!<=-1,!1}
Line 5425
  ! always {!<=-1,!>=2}
  values always size=1
Line 5426
  "ContainerSizeValue" always "ContainerSizeValue"
Line 5427
  ! always {!<=-1,!>=2}
Line 5428
  "Possible" always "Possible"
Line 5429
  != always {!<=-1,!>=2}
Line 5430
  "intvalue:" always "intvalue:"
Line 5431
  "" always ""
Line 5435
  , always 1
Line 5436
  unique always {!<=-1,!>=2}
  = always 1
  true always 1
Line 5437
  & {lifetime[Address]=(isSymbolicValue),!0}
Line 5438
  ! {!<=-1,!>=2,1@174}
  unique {!<=-1,!>=2,0@174}
Line 5439
  & {lifetime[Address]=(isNotImpossible),!0}
Line 5440
  ( always !<=-1
  != always {!<=-1,!>=2}
  1 always 1
Line 5441
  "values.size():" always "values.size():"
  values always !size=1
  ( always {!<=-1,!1}
Line 5442
  ! always {!<=-1,!>=2}
  values always size=1
Line 5443
  "ContainerSizeValue" always "ContainerSizeValue"
Line 5444
  ! always {!<=-1,!>=2}
Line 5445
  "Impossible" always "Impossible"
Line 5446
  != always {!<=-1,!>=2}
Line 5447
  "intvalue:" always "intvalue:"
Line 5448
  "" always ""
Line 5452
  , always 1
Line 5453
  unique always {!<=-1,!>=2}
  = always 1
  true always 1
Line 5454
  & {lifetime[Address]=(isSymbolicValue),!0}
Line 5455
  ! always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
Line 5456
  & {lifetime[Address]=(isNotInconclusive),!0}
Line 5457
  ( always !<=-1
  != always {!<=-1,!>=2}
  1 always 1
Line 5458
  "values.size():" always "values.size():"
  values always !size=1
  ( always {!<=-1,!1}
Line 5459
  ! always {!<=-1,!>=2}
  values always size=1
Line 5460
  "ContainerSizeValue" always "ContainerSizeValue"
Line 5461
  ! always {!<=-1,!>=2}
Line 5462
  "Inconclusive" always "Inconclusive"
Line 5463
  != always {!<=-1,!>=2}
Line 5464
  "intvalue:" always "intvalue:"
Line 5465
  "" always ""
Line 5468
  , always 1
  unique always {!<=-1,!>=2}
  = always 1
  true always 1
Line 5469
  & {lifetime[Address]=(isSymbolicValue),!0}
Line 5470
  ! {!<=-1,!>=2,1@213}
  unique {!<=-1,!>=2,0@213}
Line 5471
  & {lifetime[Address]=(isNotKnown),!0}
Line 5472
  ( always !<=-1
  != always {!<=-1,!>=2}
  1 always 1
Line 5473
  "values.size():" always "values.size():"
  values always !size=1
  ( always {!<=-1,!1}
Line 5474
  ! always {!<=-1,!>=2}
  values always size=1
Line 5475
  "ContainerSizeValue" always "ContainerSizeValue"
Line 5476
  ! always {!<=-1,!>=2}
Line 5477
  "Known" always "Known"
Line 5478
  != always {!<=-1,!>=2}
Line 5479
  "intvalue:" always "intvalue:"
Line 5480
  "" always ""
Line 5486
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 5489
  = always "void f(const std::list<int> &ints) {\n  if (!static_cast<bool>(ints.empty()))\n    ints.front();\n}"
  "void f(const std::list<int> &ints) {\n  if (!static_cast<bool>(ints.empty()))\n    ints.front();\n}" always "void f(const std::list<int> &ints) {\n  if (!static_cast<bool>(ints.empty()))\n    ints.front();\n}"
Line 5493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5493 always 5493
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5493 always 5493
  code always "void f(const std::list<int> &ints) {\n  if (!static_cast<bool>(ints.empty()))\n    ints.front();\n}"
  "ints . front" always "ints . front"
  0 always 0
Line 5496
  = always "void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.empty()) {}\n}"
  "void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.empty()) {}\n}" always "void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.empty()) {}\n}"
Line 5500
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5500 always 5500
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5500 always 5500
  code always "void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.empty()) {}\n}"
  "ints . front" always "ints . front"
  0 always 0
Line 5502
  = always "void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.size()==0) {}\n}"
  "void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.size()==0) {}\n}" always "void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.size()==0) {}\n}"
Line 5506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5506 always 5506
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5506 always 5506
  code always "void f(const std::list<int> &ints) {\n  ints.front();\n  if (ints.size()==0) {}\n}"
  "ints . front" always "ints . front"
  0 always 0
Line 5508
  = always "void f(std::list<int> ints) {\n  ints.front();\n  ints.pop_back();\n  if (ints.empty()) {}\n}"
  "void f(std::list<int> ints) {\n  ints.front();\n  ints.pop_back();\n  if (ints.empty()) {}\n}" always "void f(std::list<int> ints) {\n  ints.front();\n  ints.pop_back();\n  if (ints.empty()) {}\n}"
Line 5513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5513 always 5513
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5513 always 5513
  code always "void f(std::list<int> ints) {\n  ints.front();\n  ints.pop_back();\n  if (ints.empty()) {}\n}"
  "ints . front" always "ints . front"
  ( always {!<=-1,!>=2}
Line 5515
  = always "void f(std::vector<int> v) {\n  v[10] = 0;\n  if (v.size() == 10) {}\n}"
  "void f(std::vector<int> v) {\n  v[10] = 0;\n  if (v.size() == 10) {}\n}" always "void f(std::vector<int> v) {\n  v[10] = 0;\n  if (v.size() == 10) {}\n}"
Line 5519
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5519 always 5519
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5519 always 5519
  code always "void f(std::vector<int> v) {\n  v[10] = 0;\n  if (v.size() == 10) {}\n}"
  "v [" always "v ["
  10 always 10
Line 5521
  = always "void f(std::vector<std::string> params) {\n  switch(x) {\n  case CMD_RESPONSE:\n    if(y) { break; }\n    params[2];\n    break;\n  case CMD_DELETE:\n    if (params.size() < 2) { }\n    break;\n  }\n}"
  "void f(std::vector<std::string> params) {\n  switch(x) {\n  case CMD_RESPONSE:\n    if(y) { break; }\n    params[2];\n    break;\n  case CMD_DELETE:\n    if (params.size() < 2) { }\n    break;\n  }\n}" always "void f(std::vector<std::string> params) {\n  switch(x) {\n  case CMD_RESPONSE:\n    if(y) { break; }\n    params[2];\n    break;\n  case CMD_DELETE:\n    if (params.size() < 2) { }\n    break;\n  }\n}"
Line 5532
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5532 always 5532
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5532 always 5532
  code always "void f(std::vector<std::string> params) {\n  switch(x) {\n  case CMD_RESPONSE:\n    if(y) { break; }\n    params[2];\n    break;\n  case CMD_DELETE:\n    if (params.size() < 2) { }\n    break;\n  }\n}"
  "params [ 2 ]" always "params [ 2 ]"
  ( always {!<=-1,!>=2}
Line 5535
  = always "void f(const std::vector<std::string>& v) {\n    if(v.empty()) {\n        v.front();\n    }\n}\n"
  "void f(const std::vector<std::string>& v) {\n    if(v.empty()) {\n        v.front();\n    }\n}\n" always "void f(const std::vector<std::string>& v) {\n    if(v.empty()) {\n        v.front();\n    }\n}\n"
Line 5540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5540 always 5540
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5540 always 5540
  code always "void f(const std::vector<std::string>& v) {\n    if(v.empty()) {\n        v.front();\n    }\n}\n"
  "v . front" always "v . front"
  0 always 0
Line 5542
  = always "void f(const std::vector<std::string>& v) {\n    if(std::empty(v)) {\n        v.front();\n    }\n}\n"
  "void f(const std::vector<std::string>& v) {\n    if(std::empty(v)) {\n        v.front();\n    }\n}\n" always "void f(const std::vector<std::string>& v) {\n    if(std::empty(v)) {\n        v.front();\n    }\n}\n"
Line 5547
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5547 always 5547
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5547 always 5547
  code always "void f(const std::vector<std::string>& v) {\n    if(std::empty(v)) {\n        v.front();\n    }\n}\n"
  "v . front" always "v . front"
  0 always 0
Line 5549
  = always "void f(const std::vector<std::string>& v) {\n    if(!v.empty()) {\n        v.front();\n    }\n}\n"
  "void f(const std::vector<std::string>& v) {\n    if(!v.empty()) {\n        v.front();\n    }\n}\n" always "void f(const std::vector<std::string>& v) {\n    if(!v.empty()) {\n        v.front();\n    }\n}\n"
Line 5554
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5554 always 5554
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5554 always 5554
  code always "void f(const std::vector<std::string>& v) {\n    if(!v.empty()) {\n        v.front();\n    }\n}\n"
  "v . front" always "v . front"
  0 always 0
Line 5556
  = always "void f(const std::vector<std::string>& v) {\n    if(!v.empty() && v[0] != \"\") {\n        v.front();\n    }\n}\n"
  "void f(const std::vector<std::string>& v) {\n    if(!v.empty() && v[0] != \"\") {\n        v.front();\n    }\n}\n" always "void f(const std::vector<std::string>& v) {\n    if(!v.empty() && v[0] != \"\") {\n        v.front();\n    }\n}\n"
Line 5561
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5561 always 5561
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5561 always 5561
  code always "void f(const std::vector<std::string>& v) {\n    if(!v.empty() && v[0] != \"\") {\n        v.front();\n    }\n}\n"
  "v . front" always "v . front"
  0 always 0
Line 5564
  = always "void f(const std::list<int> &ints) {\n  if (ints.empty()) {}\n  ints.front();\n}"
  "void f(const std::list<int> &ints) {\n  if (ints.empty()) {}\n  ints.front();\n}" always "void f(const std::list<int> &ints) {\n  if (ints.empty()) {}\n  ints.front();\n}"
Line 5568
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5568 always 5568
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5568 always 5568
  code always "void f(const std::list<int> &ints) {\n  if (ints.empty()) {}\n  ints.front();\n}"
  "ints . front" always "ints . front"
  0 always 0
Line 5570
  = always "void f(const std::list<int> &ints) {\n  if (ints.empty()) { continue; }\n  ints.front();\n}"
  "void f(const std::list<int> &ints) {\n  if (ints.empty()) { continue; }\n  ints.front();\n}" always "void f(const std::list<int> &ints) {\n  if (ints.empty()) { continue; }\n  ints.front();\n}"
Line 5574
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5574 always 5574
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5574 always 5574
  code always "void f(const std::list<int> &ints) {\n  if (ints.empty()) { continue; }\n  ints.front();\n}"
  "ints . front" always "ints . front"
  0 always 0
Line 5576
  = always "void f(const std::list<int> &ints) {\n  if (ints.empty()) { ints.push_back(0); }\n  ints.front();\n}"
  "void f(const std::list<int> &ints) {\n  if (ints.empty()) { ints.push_back(0); }\n  ints.front();\n}" always "void f(const std::list<int> &ints) {\n  if (ints.empty()) { ints.push_back(0); }\n  ints.front();\n}"
Line 5580
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5580 always 5580
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5580 always 5580
  code always "void f(const std::list<int> &ints) {\n  if (ints.empty()) { ints.push_back(0); }\n  ints.front();\n}"
  "ints . front" always "ints . front"
  ( always {!<=-1,!>=2}
Line 5582
  = always "void f(const std::list<int> &ints) {\n  if (ints.empty()) {\n    ints.front();\n  }\n}"
  "void f(const std::list<int> &ints) {\n  if (ints.empty()) {\n    ints.front();\n  }\n}" always "void f(const std::list<int> &ints) {\n  if (ints.empty()) {\n    ints.front();\n  }\n}"
Line 5587
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5587 always 5587
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5587 always 5587
  code always "void f(const std::list<int> &ints) {\n  if (ints.empty()) {\n    ints.front();\n  }\n}"
  "ints . front" always "ints . front"
  0 always 0
Line 5589
  = always "void f(const std::list<int> &ints) {\n  if (ints.size() == 3) {\n    ints.front();\n  }\n}"
  "void f(const std::list<int> &ints) {\n  if (ints.size() == 3) {\n    ints.front();\n  }\n}" always "void f(const std::list<int> &ints) {\n  if (ints.size() == 3) {\n    ints.front();\n  }\n}"
Line 5594
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5594 always 5594
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5594 always 5594
  code always "void f(const std::list<int> &ints) {\n  if (ints.size() == 3) {\n    ints.front();\n  }\n}"
  "ints . front" always "ints . front"
  3 always 3
Line 5596
  = always "void f(const std::list<int> &ints) {\n  if (ints.size() <= 3) {\n    ints.front();\n  }\n}"
  "void f(const std::list<int> &ints) {\n  if (ints.size() <= 3) {\n    ints.front();\n  }\n}" always "void f(const std::list<int> &ints) {\n  if (ints.size() <= 3) {\n    ints.front();\n  }\n}"
Line 5601
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5601 always 5601
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5601 always 5601
  code always "void f(const std::list<int> &ints) {\n  if (ints.size() <= 3) {\n    ints.front();\n  }\n}"
  "ints . front" always "ints . front"
  3 always 3
  false always 0
Line 5602
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5602 always 5602
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5602 always 5602
  "ints . front" always "ints . front"
  4 always 4
  false always 0
Line 5604
  = always "void f(const std::list<int> &ints) {\n  if (ints.size() >= 3) {\n    ints.front();\n  }\n}"
  "void f(const std::list<int> &ints) {\n  if (ints.size() >= 3) {\n    ints.front();\n  }\n}" always "void f(const std::list<int> &ints) {\n  if (ints.size() >= 3) {\n    ints.front();\n  }\n}"
Line 5609
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5609 always 5609
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5609 always 5609
  code always "void f(const std::list<int> &ints) {\n  if (ints.size() >= 3) {\n    ints.front();\n  }\n}"
  "ints . front" always "ints . front"
  3 always 3
  false always 0
Line 5610
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5610 always 5610
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5610 always 5610
  "ints . front" always "ints . front"
  2 always 2
  false always 0
Line 5612
  = always "void f(const std::list<int> &ints) {\n  if (ints.size() < 3) {\n    ints.front();\n  }\n}"
  "void f(const std::list<int> &ints) {\n  if (ints.size() < 3) {\n    ints.front();\n  }\n}" always "void f(const std::list<int> &ints) {\n  if (ints.size() < 3) {\n    ints.front();\n  }\n}"
Line 5617
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5617 always 5617
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5617 always 5617
  code always "void f(const std::list<int> &ints) {\n  if (ints.size() < 3) {\n    ints.front();\n  }\n}"
  "ints . front" always "ints . front"
  2 always 2
  false always 0
Line 5618
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5618 always 5618
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5618 always 5618
  "ints . front" always "ints . front"
  3 always 3
  false always 0
Line 5620
  = always "void f(const std::list<int> &ints) {\n  if (ints.size() > 3) {\n    ints.front();\n  }\n}"
  "void f(const std::list<int> &ints) {\n  if (ints.size() > 3) {\n    ints.front();\n  }\n}" always "void f(const std::list<int> &ints) {\n  if (ints.size() > 3) {\n    ints.front();\n  }\n}"
Line 5625
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5625 always 5625
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5625 always 5625
  code always "void f(const std::list<int> &ints) {\n  if (ints.size() > 3) {\n    ints.front();\n  }\n}"
  "ints . front" always "ints . front"
  4 always 4
  false always 0
Line 5626
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5626 always 5626
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5626 always 5626
  "ints . front" always "ints . front"
  3 always 3
  false always 0
Line 5628
  = always "void f(const std::list<int> &ints) {\n  if (ints.empty() == false) {\n    ints.front();\n  }\n}"
  "void f(const std::list<int> &ints) {\n  if (ints.empty() == false) {\n    ints.front();\n  }\n}" always "void f(const std::list<int> &ints) {\n  if (ints.empty() == false) {\n    ints.front();\n  }\n}"
Line 5633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5633 always 5633
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5633 always 5633
  code always "void f(const std::list<int> &ints) {\n  if (ints.empty() == false) {\n    ints.front();\n  }\n}"
  "ints . front" always "ints . front"
  ( always {!<=-1,!>=2}
Line 5635
  = always "void f(const std::vector<int> &v) {\n  if (v.empty()) {}\n  if (!v.empty() && v[10]==0) {}\n}"
  "void f(const std::vector<int> &v) {\n  if (v.empty()) {}\n  if (!v.empty() && v[10]==0) {}\n}" always "void f(const std::vector<int> &v) {\n  if (v.empty()) {}\n  if (!v.empty() && v[10]==0) {}\n}"
Line 5639
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5639 always 5639
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5639 always 5639
  code always "void f(const std::vector<int> &v) {\n  if (v.empty()) {}\n  if (!v.empty() && v[10]==0) {}\n}"
  "v [" always "v ["
  ( always {!<=-1,!>=2}
Line 5641
  = always "void f() {\n  std::list<int> ints;\n  ints.front();\n}"
  "void f() {\n  std::list<int> ints;\n  ints.front();\n}" always "void f() {\n  std::list<int> ints;\n  ints.front();\n}"
Line 5645
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5645 always 5645
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5645 always 5645
  code always "void f() {\n  std::list<int> ints;\n  ints.front();\n}"
  "ints . front" always "ints . front"
  0 always 0
Line 5647
  = always "void f() {\n  std::array<int,10> ints;\n  ints.front();\n}"
  "void f() {\n  std::array<int,10> ints;\n  ints.front();\n}" always "void f() {\n  std::array<int,10> ints;\n  ints.front();\n}"
Line 5651
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5651 always 5651
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5651 always 5651
  code always "void f() {\n  std::array<int,10> ints;\n  ints.front();\n}"
  "ints . front" always "ints . front"
  10 always 10
Line 5653
  = always "void f() {\n  std::string s;\n  cin >> s;\n  s[0];\n}"
  "void f() {\n  std::string s;\n  cin >> s;\n  s[0];\n}" always "void f() {\n  std::string s;\n  cin >> s;\n  s[0];\n}"
Line 5658
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5658 always 5658
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5658 always 5658
  code always "void f() {\n  std::string s;\n  cin >> s;\n  s[0];\n}"
  "s [" always "s ["
  ( always {!<=-1,!>=2}
Line 5660
  = always "void f() {\n  std::string s = \"abc\";\n  s.size();\n}"
  "void f() {\n  std::string s = \"abc\";\n  s.size();\n}" always "void f() {\n  std::string s = \"abc\";\n  s.size();\n}"
Line 5664
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5664 always 5664
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5664 always 5664
  code always "void f() {\n  std::string s = \"abc\";\n  s.size();\n}"
  "s . size" always "s . size"
  3 always 3
Line 5666
  = always "void f(const char* p) {\n  if (p == nullptr) return;\n  std::string s { p };\n  s.front();\n}"
  "void f(const char* p) {\n  if (p == nullptr) return;\n  std::string s { p };\n  s.front();\n}" always "void f(const char* p) {\n  if (p == nullptr) return;\n  std::string s { p };\n  s.front();\n}"
Line 5671
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5671 always 5671
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5671 always 5671
  code always "void f(const char* p) {\n  if (p == nullptr) return;\n  std::string s { p };\n  s.front();\n}"
  "s . front" always "s . front"
  ( always {!<=-1,!>=2}
Line 5673
  = always "void f() {\n  std::string s = { 'a', 'b', 'c' };\n  s.size();\n}"
  "void f() {\n  std::string s = { 'a', 'b', 'c' };\n  s.size();\n}" always "void f() {\n  std::string s = { 'a', 'b', 'c' };\n  s.size();\n}"
Line 5677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5677 always 5677
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5677 always 5677
  code always "void f() {\n  std::string s = { 'a', 'b', 'c' };\n  s.size();\n}"
  "s . size" always "s . size"
  3 always 3
Line 5679
  = always "void f() {\n  std::string s=\"abc\";\n  s += unknown;\n  s.size();\n}"
  "void f() {\n  std::string s=\"abc\";\n  s += unknown;\n  s.size();\n}" always "void f() {\n  std::string s=\"abc\";\n  s += unknown;\n  s.size();\n}"
Line 5684
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5684 always 5684
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5684 always 5684
  code always "void f() {\n  std::string s=\"abc\";\n  s += unknown;\n  s.size();\n}"
  "s . size" always "s . size"
  ( always {!<=-1,!>=2}
Line 5686
  = always "void f() {\n  std::string s=\"abc\";\n  s += \"def\";\n  s.size();\n}"
  "void f() {\n  std::string s=\"abc\";\n  s += \"def\";\n  s.size();\n}" always "void f() {\n  std::string s=\"abc\";\n  s += \"def\";\n  s.size();\n}"
Line 5691
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5691 always 5691
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5691 always 5691
  code always "void f() {\n  std::string s=\"abc\";\n  s += \"def\";\n  s.size();\n}"
  "s . size" always "s . size"
  6 always 6
Line 5693
  = always "void f(std::string s) {\n    if (s == \"hello\")\n        s[40] = c;\n}"
  "void f(std::string s) {\n    if (s == \"hello\")\n        s[40] = c;\n}" always "void f(std::string s) {\n    if (s == \"hello\")\n        s[40] = c;\n}"
Line 5697
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5697 always 5697
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5697 always 5697
  code always "void f(std::string s) {\n    if (s == \"hello\")\n        s[40] = c;\n}"
  "s [" always "s ["
  5 always 5
Line 5699
  = always "void f(std::string s) {\n    s[40] = c;\n    if (s == \"hello\") {}\n}"
  "void f(std::string s) {\n    s[40] = c;\n    if (s == \"hello\") {}\n}" always "void f(std::string s) {\n    s[40] = c;\n    if (s == \"hello\") {}\n}"
Line 5703
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5703 always 5703
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5703 always 5703
  code always "void f(std::string s) {\n    s[40] = c;\n    if (s == \"hello\") {}\n}"
  "s [" always "s ["
  5 always 5
Line 5705
  = always "void f(std::string s) {\n    if (s != \"hello\") {}\n    s[40] = c;\n}"
  "void f(std::string s) {\n    if (s != \"hello\") {}\n    s[40] = c;\n}" always "void f(std::string s) {\n    if (s != \"hello\") {}\n    s[40] = c;\n}"
Line 5709
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5709 always 5709
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5709 always 5709
  code always "void f(std::string s) {\n    if (s != \"hello\") {}\n    s[40] = c;\n}"
  "s [" always "s ["
  5 always 5
Line 5711
  = always "void f(std::string s) {\n    if (s != \"hello\")\n        s[40] = c;\n}"
  "void f(std::string s) {\n    if (s != \"hello\")\n        s[40] = c;\n}" always "void f(std::string s) {\n    if (s != \"hello\")\n        s[40] = c;\n}"
Line 5715
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5715 always 5715
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5715 always 5715
  code always "void f(std::string s) {\n    if (s != \"hello\")\n        s[40] = c;\n}"
  "s [" always "s ["
  5 always 5
  ( always {!<=-1,!>=2}
Line 5717
  = always "void f() {\n    static std::string s;\n    if (s.size() == 0)\n        s = x;\n}"
  "void f() {\n    static std::string s;\n    if (s.size() == 0)\n        s = x;\n}" always "void f() {\n    static std::string s;\n    if (s.size() == 0)\n        s = x;\n}"
Line 5722
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5722 always 5722
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5722 always 5722
  code always "void f() {\n    static std::string s;\n    if (s.size() == 0)\n        s = x;\n}"
  "s . size" always "s . size"
  ( always {!<=-1,!>=2}
Line 5724
  = always "void f() {\n    const uint8_t data[] = { 1, 2, 3 };\n    std::vector<uint8_t> v{ data, data + sizeof(data) };\n    v.size();\n}"
  "void f() {\n    const uint8_t data[] = { 1, 2, 3 };\n    std::vector<uint8_t> v{ data, data + sizeof(data) };\n    v.size();\n}" always "void f() {\n    const uint8_t data[] = { 1, 2, 3 };\n    std::vector<uint8_t> v{ data, data + sizeof(data) };\n    v.size();\n}"
Line 5729
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5729 always 5729
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5729 always 5729
  code always "void f() {\n    const uint8_t data[] = { 1, 2, 3 };\n    std::vector<uint8_t> v{ data, data + sizeof(data) };\n    v.size();\n}"
  "v . size" always "v . size"
  3 always 3
  false always 0
Line 5732
  = always "void f() {\n    std::stack<Token *> links;\n    while (!links.empty() || indentlevel)\n        links.push(tok);\n}"
  "void f() {\n    std::stack<Token *> links;\n    while (!links.empty() || indentlevel)\n        links.push(tok);\n}" always "void f() {\n    std::stack<Token *> links;\n    while (!links.empty() || indentlevel)\n        links.push(tok);\n}"
Line 5737
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5737 always 5737
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5737 always 5737
  code always "void f() {\n    std::stack<Token *> links;\n    while (!links.empty() || indentlevel)\n        links.push(tok);\n}"
  "links . empty" always "links . empty"
  0 always 0
Line 5740
  = always "void f() {\n  std::list<int> x;\n  f(x);\n  x.front();\n}"
  "void f() {\n  std::list<int> x;\n  f(x);\n  x.front();\n}" always "void f() {\n  std::list<int> x;\n  f(x);\n  x.front();\n}"
Line 5745
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5745 always 5745
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5745 always 5745
  code always "void f() {\n  std::list<int> x;\n  f(x);\n  x.front();\n}"
  "x . front" always "x . front"
  ( always {!<=-1,!>=2}
Line 5747
  = always "void f() {\n  std::list<int> x;\n  f<ns::a>(x);\n  x.front();\n}"
  "void f() {\n  std::list<int> x;\n  f<ns::a>(x);\n  x.front();\n}" always "void f() {\n  std::list<int> x;\n  f<ns::a>(x);\n  x.front();\n}"
Line 5752
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5752 always 5752
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5752 always 5752
  code always "void f() {\n  std::list<int> x;\n  f<ns::a>(x);\n  x.front();\n}"
  "x . front" always "x . front"
  ( always {!<=-1,!>=2}
Line 5754
  = always "void g(std::list<int>&);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "void g(std::list<int>&);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}" always "void g(std::list<int>&);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
Line 5760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5760 always 5760
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5760 always 5760
  code always "void g(std::list<int>&);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "x . front" always "x . front"
  ( always {!<=-1,!>=2}
Line 5762
  = always "void g(std::list<int>*);\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
  "void g(std::list<int>*);\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}" always "void g(std::list<int>*);\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
Line 5768
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5768 always 5768
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5768 always 5768
  code always "void g(std::list<int>*);\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
  "x . front" always "x . front"
  ( always {!<=-1,!>=2}
Line 5770
  = always "void g(std::list<int>* const);\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
  "void g(std::list<int>* const);\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}" always "void g(std::list<int>* const);\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
Line 5776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5776 always 5776
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5776 always 5776
  code always "void g(std::list<int>* const);\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
  "x . front" always "x . front"
  ( always {!<=-1,!>=2}
Line 5778
  = always "void g(const std::list<int>&);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "void g(const std::list<int>&);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}" always "void g(const std::list<int>&);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
Line 5784
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5784 always 5784
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5784 always 5784
  code always "void g(const std::list<int>&);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "x . front" always "x . front"
  0 always 0
Line 5786
  = always "void g(std::list<int>);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "void g(std::list<int>);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}" always "void g(std::list<int>);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
Line 5792
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5792 always 5792
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5792 always 5792
  code always "void g(std::list<int>);\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "x . front" always "x . front"
  0 always 0
Line 5794
  = always "void g(int&);\nvoid f() {\n  std::list<int> x;\n  g(x[0]);\n  x.front();\n}"
  "void g(int&);\nvoid f() {\n  std::list<int> x;\n  g(x[0]);\n  x.front();\n}" always "void g(int&);\nvoid f() {\n  std::list<int> x;\n  g(x[0]);\n  x.front();\n}"
Line 5800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5800 always 5800
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5800 always 5800
  code always "void g(int&);\nvoid f() {\n  std::list<int> x;\n  g(x[0]);\n  x.front();\n}"
  "x . front" always "x . front"
  0 always 0
Line 5802
  = always "void g(int&);\nvoid f() {\n  std::list<int> x;\n  g(x.back());\n  x.front();\n}"
  "void g(int&);\nvoid f() {\n  std::list<int> x;\n  g(x.back());\n  x.front();\n}" always "void g(int&);\nvoid f() {\n  std::list<int> x;\n  g(x.back());\n  x.front();\n}"
Line 5808
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5808 always 5808
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5808 always 5808
  code always "void g(int&);\nvoid f() {\n  std::list<int> x;\n  g(x.back());\n  x.front();\n}"
  "x . front" always "x . front"
  0 always 0
Line 5810
  = always "void g(std::list<int>&) {}\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "void g(std::list<int>&) {}\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}" always "void g(std::list<int>&) {}\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
Line 5816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5816 always 5816
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5816 always 5816
  code always "void g(std::list<int>&) {}\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "x . front" always "x . front"
  0 always 0
Line 5818
  = always "void g(std::list<int>& y) { y.push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "void g(std::list<int>& y) { y.push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}" always "void g(std::list<int>& y) { y.push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
Line 5824
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5824 always 5824
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5824 always 5824
  code always "void g(std::list<int>& y) { y.push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "x . front" always "x . front"
  ( always {!<=-1,!>=2}
Line 5826
  = always "void g(std::list<int>*) {}\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
  "void g(std::list<int>*) {}\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}" always "void g(std::list<int>*) {}\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
Line 5832
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5832 always 5832
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5832 always 5832
  code always "void g(std::list<int>*) {}\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
  "x . front" always "x . front"
  0 always 0
Line 5834
  = always "void g(std::list<int>* y) { y->push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
  "void g(std::list<int>* y) { y->push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}" always "void g(std::list<int>* y) { y->push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
Line 5840
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5840 always 5840
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5840 always 5840
  code always "void g(std::list<int>* y) { y->push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(&x);\n  x.front();\n}"
  "x . front" always "x . front"
  ( always {!<=-1,!>=2}
Line 5842
  = always "void h(std::list<int>&);\nvoid g(std::list<int>& y) { h(y); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "void h(std::list<int>&);\nvoid g(std::list<int>& y) { h(y); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}" always "void h(std::list<int>&);\nvoid g(std::list<int>& y) { h(y); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
Line 5849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5849 always 5849
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5849 always 5849
  code always "void h(std::list<int>&);\nvoid g(std::list<int>& y) { h(y); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "x . front" always "x . front"
  ( always {!<=-1,!>=2}
Line 5851
  = always "void h(const std::list<int>&);\nvoid g(std::list<int>& y) { h(y); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "void h(const std::list<int>&);\nvoid g(std::list<int>& y) { h(y); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}" always "void h(const std::list<int>&);\nvoid g(std::list<int>& y) { h(y); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
Line 5858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5858 always 5858
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5858 always 5858
  code always "void h(const std::list<int>&);\nvoid g(std::list<int>& y) { h(y); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "x . front" always "x . front"
  0 always 0
Line 5860
  = always "void h(const std::list<int>&);\nvoid g(std::list<int>& y) { h(y); y.push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "void h(const std::list<int>&);\nvoid g(std::list<int>& y) { h(y); y.push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}" always "void h(const std::list<int>&);\nvoid g(std::list<int>& y) { h(y); y.push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
Line 5867
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5867 always 5867
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5867 always 5867
  code always "void h(const std::list<int>&);\nvoid g(std::list<int>& y) { h(y); y.push_back(1); }\nvoid f() {\n  std::list<int> x;\n  g(x);\n  x.front();\n}"
  "x . front" always "x . front"
  ( always {!<=-1,!>=2}
Line 5869
  = always "void f(std::vector<int> ints) {\n  if (ints.empty())\n    abort() << 123;\n  ints[0] = 0;\n}"
  "void f(std::vector<int> ints) {\n  if (ints.empty())\n    abort() << 123;\n  ints[0] = 0;\n}" always "void f(std::vector<int> ints) {\n  if (ints.empty())\n    abort() << 123;\n  ints[0] = 0;\n}"
Line 5874
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5874 always 5874
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5874 always 5874
  code always "void f(std::vector<int> ints) {\n  if (ints.empty())\n    abort() << 123;\n  ints[0] = 0;\n}"
  "ints [" always "ints ["
  0 always 0
Line 5876
  = always "struct A {\n    double getMessage( std::vector<unsigned char> *message );\n};\n\nstruct B {\n    A *a;\n    double getMessage( std::vector<unsigned char> *message ) { return a->getMessage( message ); }\n};\n\nvoid foo(B *ptr) {\n    std::vector<unsigned char> v;\n    ptr->getMessage (&v);\n    if (v.size () > 0) {}\n}"
  "struct A {\n    double getMessage( std::vector<unsigned char> *message );\n};\n\nstruct B {\n    A *a;\n    double getMessage( std::vector<unsigned char> *message ) { return a->getMessage( message ); }\n};\n\nvoid foo(B *ptr) {\n    std::vector<unsigned char> v;\n    ptr->getMessage (&v);\n    if (v.size () > 0) {}\n}" always "struct A {\n    double getMessage( std::vector<unsigned char> *message );\n};\n\nstruct B {\n    A *a;\n    double getMessage( std::vector<unsigned char> *message ) { return a->getMessage( message ); }\n};\n\nvoid foo(B *ptr) {\n    std::vector<unsigned char> v;\n    ptr->getMessage (&v);\n    if (v.size () > 0) {}\n}"
Line 5890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5890 always 5890
  0U always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5890 always 5890
  code always "struct A {\n    double getMessage( std::vector<unsigned char> *message );\n};\n\nstruct B {\n    A *a;\n    double getMessage( std::vector<unsigned char> *message ) { return a->getMessage( message ); }\n};\n\nvoid foo(B *ptr) {\n    std::vector<unsigned char> v;\n    ptr->getMessage (&v);\n    if (v.size () > 0) {}\n}"
  "v . size ( )" always "v . size ( )"
  ( always !<=-1
Line 5893
  = always "bool f(std::vector<int>&) {\n  return false;\n}\nint g() {\n    std::vector<int> v;\n    if (f(v) || v.empty())\n        return 0;\n    return v[0];\n}\n"
  "bool f(std::vector<int>&) {\n  return false;\n}\nint g() {\n    std::vector<int> v;\n    if (f(v) || v.empty())\n        return 0;\n    return v[0];\n}\n" always "bool f(std::vector<int>&) {\n  return false;\n}\nint g() {\n    std::vector<int> v;\n    if (f(v) || v.empty())\n        return 0;\n    return v[0];\n}\n"
Line 5902
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5902 always 5902
  0U always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5902 always 5902
  code always "bool f(std::vector<int>&) {\n  return false;\n}\nint g() {\n    std::vector<int> v;\n    if (f(v) || v.empty())\n        return 0;\n    return v[0];\n}\n"
  "v [ 0 ]" always "v [ 0 ]"
  ( always !<=-1
Line 5905
  = always "void f() {\n  std::string s = \"abcd\";\n  s.size();\n}"
  "void f() {\n  std::string s = \"abcd\";\n  s.size();\n}" always "void f() {\n  std::string s = \"abcd\";\n  s.size();\n}"
Line 5909
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5909 always 5909
  4 always 4
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5909 always 5909
  code always "void f() {\n  std::string s = \"abcd\";\n  s.size();\n}"
  "( ) ;" always "( ) ;"
Line 5911
  = always "void f() {\n  std::string s;\n  s.empty();\n}"
  "void f() {\n  std::string s;\n  s.empty();\n}" always "void f() {\n  std::string s;\n  s.empty();\n}"
Line 5915
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5915 always 5915
  1 always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5915 always 5915
  code always "void f() {\n  std::string s;\n  s.empty();\n}"
  "( ) ;" always "( ) ;"
Line 5918
  = always "void f() {\n  std::string s = \"abcd\";\n  x = s + s;\n}"
  "void f() {\n  std::string s = \"abcd\";\n  x = s + s;\n}" always "void f() {\n  std::string s = \"abcd\";\n  x = s + s;\n}"
Line 5922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5922 always 5922
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5922 always 5922
  code always "void f() {\n  std::string s = \"abcd\";\n  x = s + s;\n}"
  "+" always "+"
  8 always 8
Line 5924
  = always "void f(const std::vector<int> &ints) {\n  ints.clear();\n  ints.front();\n}"
  "void f(const std::vector<int> &ints) {\n  ints.clear();\n  ints.front();\n}" always "void f(const std::vector<int> &ints) {\n  ints.clear();\n  ints.front();\n}"
Line 5928
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5928 always 5928
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5928 always 5928
  code always "void f(const std::vector<int> &ints) {\n  ints.clear();\n  ints.front();\n}"
  "ints . front" always "ints . front"
  0 always 0
Line 5930
  = always "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.front();\n}"
  "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.front();\n}" always "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.front();\n}"
Line 5934
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5934 always 5934
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5934 always 5934
  code always "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.front();\n}"
  "ints . front" always "ints . front"
  3 always 3
Line 5936
  = always "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.push_back(3);\n  ints.front();\n}"
  "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.push_back(3);\n  ints.front();\n}" always "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.push_back(3);\n  ints.front();\n}"
Line 5941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5941 always 5941
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5941 always 5941
  code always "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.push_back(3);\n  ints.front();\n}"
  "ints . front" always "ints . front"
  4 always 4
Line 5943
  = always "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.pop_back();\n  ints.front();\n}"
  "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.pop_back();\n  ints.front();\n}" always "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.pop_back();\n  ints.front();\n}"
Line 5948
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5948 always 5948
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5948 always 5948
  code always "void f(const std::vector<int> &ints) {\n  ints.resize(3);\n  ints.pop_back();\n  ints.front();\n}"
  "ints . front" always "ints . front"
  2 always 2
Line 5950
  = always "int f(bool b) {\n    std::map<int, int> m;\n    if (b)\n        m[0] = 1;\n    return m.at(0);\n}\n"
  "int f(bool b) {\n    std::map<int, int> m;\n    if (b)\n        m[0] = 1;\n    return m.at(0);\n}\n" always "int f(bool b) {\n    std::map<int, int> m;\n    if (b)\n        m[0] = 1;\n    return m.at(0);\n}\n"
Line 5956
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5956 always 5956
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5956 always 5956
  code always "int f(bool b) {\n    std::map<int, int> m;\n    if (b)\n        m[0] = 1;\n    return m.at(0);\n}\n"
  "m . at" always "m . at"
  0 always 0
Line 5958
  = always "struct Base {\n    virtual bool GetString(std::string &) const { return false; }\n};\nint f() {\n    std::string str;\n    Base *b = GetClass();\n    if (!b->GetString(str)) {\n        return -2;\n    }\n    else {\n        return str.front();\n    }\n}\n"
  "struct Base {\n    virtual bool GetString(std::string &) const { return false; }\n};\nint f() {\n    std::string str;\n    Base *b = GetClass();\n    if (!b->GetString(str)) {\n        return -2;\n    }\n    else {\n        return str.front();\n    }\n}\n" always "struct Base {\n    virtual bool GetString(std::string &) const { return false; }\n};\nint f() {\n    std::string str;\n    Base *b = GetClass();\n    if (!b->GetString(str)) {\n        return -2;\n    }\n    else {\n        return str.front();\n    }\n}\n"
Line 5971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5971 always 5971
  0U always 0
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5971 always 5971
  code always "struct Base {\n    virtual bool GetString(std::string &) const { return false; }\n};\nint f() {\n    std::string str;\n    Base *b = GetClass();\n    if (!b->GetString(str)) {\n        return -2;\n    }\n    else {\n        return str.front();\n    }\n}\n"
  "str . front" always "str . front"
  ( always !<=-1
Line 5973
  = always "void f() {\n  std::vector<int> ints{};\n  ints.front();\n}"
  "void f() {\n  std::vector<int> ints{};\n  ints.front();\n}" always "void f() {\n  std::vector<int> ints{};\n  ints.front();\n}"
Line 5977
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5977 always 5977
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5977 always 5977
  code always "void f() {\n  std::vector<int> ints{};\n  ints.front();\n}"
  "ints . front" always "ints . front"
  0 always 0
Line 5980
  = always "void f() {\n  std::vector<int> ints{};\n  ints.front();\n}"
  "void f() {\n  std::vector<int> ints{};\n  ints.front();\n}" always "void f() {\n  std::vector<int> ints{};\n  ints.front();\n}"
Line 5984
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5984 always 5984
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5984 always 5984
  code always "void f() {\n  std::vector<int> ints{};\n  ints.front();\n}"
  "ints . front" always "ints . front"
  0 always 0
Line 5987
  = always "void f() {\n  std::vector<int> ints{1};\n  ints.front();\n}"
  "void f() {\n  std::vector<int> ints{1};\n  ints.front();\n}" always "void f() {\n  std::vector<int> ints{1};\n  ints.front();\n}"
Line 5991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5991 always 5991
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5991 always 5991
  code always "void f() {\n  std::vector<int> ints{1};\n  ints.front();\n}"
  "ints . front" always "ints . front"
  1 always 1
Line 5994
  = always "void f() {\n  std::vector<int> ints{1};\n  std::vector<int> ints2{ints.begin(), ints.end()};\n  ints2.front();\n}"
  "void f() {\n  std::vector<int> ints{1};\n  std::vector<int> ints2{ints.begin(), ints.end()};\n  ints2.front();\n}" always "void f() {\n  std::vector<int> ints{1};\n  std::vector<int> ints2{ints.begin(), ints.end()};\n  ints2.front();\n}"
Line 5999
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5999 always 5999
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  5999 always 5999
  code always "void f() {\n  std::vector<int> ints{1};\n  std::vector<int> ints2{ints.begin(), ints.end()};\n  ints2.front();\n}"
  "ints2 . front" always "ints2 . front"
  1 always 1
Line 6002
  = always "void f() {\n  std::vector<int> ints = {};\n  ints.front();\n}"
  "void f() {\n  std::vector<int> ints = {};\n  ints.front();\n}" always "void f() {\n  std::vector<int> ints = {};\n  ints.front();\n}"
Line 6006
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6006 always 6006
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6006 always 6006
  code always "void f() {\n  std::vector<int> ints = {};\n  ints.front();\n}"
  "ints . front" always "ints . front"
  0 always 0
Line 6009
  = always "void f(std::string str) {\n    if (str == \"123\")\n        bool x = str.empty();\n}\n"
  "void f(std::string str) {\n    if (str == \"123\")\n        bool x = str.empty();\n}\n" always "void f(std::string str) {\n    if (str == \"123\")\n        bool x = str.empty();\n}\n"
Line 6013
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6013 always 6013
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6013 always 6013
  code always "void f(std::string str) {\n    if (str == \"123\")\n        bool x = str.empty();\n}\n"
  "str . empty" always "str . empty"
  3 always 3
Line 6016
  = always "int f() {\n    std::array<int, 10> a = {};\n    return a.front();\n}\n"
  "int f() {\n    std::array<int, 10> a = {};\n    return a.front();\n}\n" always "int f() {\n    std::array<int, 10> a = {};\n    return a.front();\n}\n"
Line 6020
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6020 always 6020
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6020 always 6020
  code always "int f() {\n    std::array<int, 10> a = {};\n    return a.front();\n}\n"
  "a . front" always "a . front"
  10 always 10
Line 6023
  = always "int f(const std::vector<int>& x) {\n    if (!x.empty() && x[0] == 0)\n        return 2;\n    return x.front();\n}\n"
  "int f(const std::vector<int>& x) {\n    if (!x.empty() && x[0] == 0)\n        return 2;\n    return x.front();\n}\n" always "int f(const std::vector<int>& x) {\n    if (!x.empty() && x[0] == 0)\n        return 2;\n    return x.front();\n}\n"
Line 6028
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6028 always 6028
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6028 always 6028
  code always "int f(const std::vector<int>& x) {\n    if (!x.empty() && x[0] == 0)\n        return 2;\n    return x.front();\n}\n"
  "x . front" always "x . front"
  0 always 0
Line 6031
  = always "int f(const std::vector<int>& x) {\n    if (!(x.empty() || x[0] != 0))\n        return 2;\n    return x.front();\n}\n"
  "int f(const std::vector<int>& x) {\n    if (!(x.empty() || x[0] != 0))\n        return 2;\n    return x.front();\n}\n" always "int f(const std::vector<int>& x) {\n    if (!(x.empty() || x[0] != 0))\n        return 2;\n    return x.front();\n}\n"
Line 6036
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6036 always 6036
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6036 always 6036
  code always "int f(const std::vector<int>& x) {\n    if (!(x.empty() || x[0] != 0))\n        return 2;\n    return x.front();\n}\n"
  "x . front" always "x . front"
  0 always 0
Line 6039
  = always "int f() {\n    const size_t len = 6;\n    std::vector<char> v;\n    v.resize(1 + len);\n    return v.front();\n}\n"
  "int f() {\n    const size_t len = 6;\n    std::vector<char> v;\n    v.resize(1 + len);\n    return v.front();\n}\n" always "int f() {\n    const size_t len = 6;\n    std::vector<char> v;\n    v.resize(1 + len);\n    return v.front();\n}\n"
Line 6045
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6045 always 6045
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6045 always 6045
  code always "int f() {\n    const size_t len = 6;\n    std::vector<char> v;\n    v.resize(1 + len);\n    return v.front();\n}\n"
  "v . front" always "v . front"
  7 always 7
Line 6049
  = always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str == \"\");\n        bool a = x;\n     }\n}\n"
  "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str == \"\");\n        bool a = x;\n     }\n}\n" always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str == \"\");\n        bool a = x;\n     }\n}\n"
Line 6055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6055 always 6055
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6055 always 6055
  code always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str == \"\");\n        bool a = x;\n     }\n}\n"
  4U always 4
  0 always 0
Line 6057
  = always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str != \"\");\n        bool a = x;\n     }\n}\n"
  "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str != \"\");\n        bool a = x;\n     }\n}\n" always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str != \"\");\n        bool a = x;\n     }\n}\n"
Line 6063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6063 always 6063
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6063 always 6063
  code always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str != \"\");\n        bool a = x;\n     }\n}\n"
  4U always 4
  1 always 1
Line 6065
  = always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str == \"321\");\n        bool a = x;\n     }\n}\n"
  "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str == \"321\");\n        bool a = x;\n     }\n}\n" always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str == \"321\");\n        bool a = x;\n     }\n}\n"
Line 6071
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6071 always 6071
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6071 always 6071
  code always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str == \"321\");\n        bool a = x;\n     }\n}\n"
  4U always 4
  1 always 1
Line 6073
  = always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str != \"321\");\n        bool a = x;\n     }\n}\n"
  "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str != \"321\");\n        bool a = x;\n     }\n}\n" always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str != \"321\");\n        bool a = x;\n     }\n}\n"
Line 6079
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6079 always 6079
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6079 always 6079
  code always "void f(std::string str) {\n    if (str == \"123\") {\n        bool x = (str != \"321\");\n        bool a = x;\n     }\n}\n"
  4U always 4
  0 always 0
Line 6081
  = always "void f(std::string str) {\n    if (str.size() == 1) {\n        bool x = (str == \"123\");\n        bool a = x;\n     }\n}\n"
  "void f(std::string str) {\n    if (str.size() == 1) {\n        bool x = (str == \"123\");\n        bool a = x;\n     }\n}\n" always "void f(std::string str) {\n    if (str.size() == 1) {\n        bool x = (str == \"123\");\n        bool a = x;\n     }\n}\n"
Line 6087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6087 always 6087
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6087 always 6087
  code always "void f(std::string str) {\n    if (str.size() == 1) {\n        bool x = (str == \"123\");\n        bool a = x;\n     }\n}\n"
  4U always 4
  0 always 0
Line 6089
  = always "bool f(std::string s) {\n    if (!s.empty()) {\n        bool x = s == \"0\";\n        return x;\n    }\n    return false;\n}\n"
  "bool f(std::string s) {\n    if (!s.empty()) {\n        bool x = s == \"0\";\n        return x;\n    }\n    return false;\n}\n" always "bool f(std::string s) {\n    if (!s.empty()) {\n        bool x = s == \"0\";\n        return x;\n    }\n    return false;\n}\n"
Line 6096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6096 always 6096
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6096 always 6096
  code always "bool f(std::string s) {\n    if (!s.empty()) {\n        bool x = s == \"0\";\n        return x;\n    }\n    return false;\n}\n"
  4U always 4
  0 always 0
Line 6097
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6097 always 6097
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6097 always 6097
  4U always 4
  1 always 1
Line 6098
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6098 always 6098
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6098 always 6098
  4U always 4
  0 always 0
Line 6100
  = always "void f() {\n    std::vector<int> v;\n    int x = v.size();\n    return x;\n}\n"
  "void f() {\n    std::vector<int> v;\n    int x = v.size();\n    return x;\n}\n" always "void f() {\n    std::vector<int> v;\n    int x = v.size();\n    return x;\n}\n"
Line 6105
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6105 always 6105
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6105 always 6105
  code always "void f() {\n    std::vector<int> v;\n    int x = v.size();\n    return x;\n}\n"
  4U always 4
  0 always 0
Line 6107
  = always "void f() {\n    std::vector<int> v;\n    int x = v.empty();\n    return x;\n}\n"
  "void f() {\n    std::vector<int> v;\n    int x = v.empty();\n    return x;\n}\n" always "void f() {\n    std::vector<int> v;\n    int x = v.empty();\n    return x;\n}\n"
Line 6112
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6112 always 6112
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6112 always 6112
  code always "void f() {\n    std::vector<int> v;\n    int x = v.empty();\n    return x;\n}\n"
  4U always 4
  1 always 1
Line 6114
  = always "void f() {\n    std::vector<int> v;\n    int x = std::size(v);\n    return x;\n}\n"
  "void f() {\n    std::vector<int> v;\n    int x = std::size(v);\n    return x;\n}\n" always "void f() {\n    std::vector<int> v;\n    int x = std::size(v);\n    return x;\n}\n"
Line 6119
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6119 always 6119
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6119 always 6119
  code always "void f() {\n    std::vector<int> v;\n    int x = std::size(v);\n    return x;\n}\n"
  4U always 4
  0 always 0
Line 6121
  = always "void f() {\n    std::vector<int> v;\n    int x = std::empty(v);\n    return x;\n}\n"
  "void f() {\n    std::vector<int> v;\n    int x = std::empty(v);\n    return x;\n}\n" always "void f() {\n    std::vector<int> v;\n    int x = std::empty(v);\n    return x;\n}\n"
Line 6126
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6126 always 6126
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6126 always 6126
  code always "void f() {\n    std::vector<int> v;\n    int x = std::empty(v);\n    return x;\n}\n"
  4U always 4
  1 always 1
Line 6128
  = always "bool f() {\n    std::list<int> x1;\n    std::list<int> x2;\n    for (int i = 0; i < 10; ++i) {\n        std::list<int>& x = (i < 5) ? x1 : x2;\n        x.push_back(i);\n    }\n    return x1.empty() || x2.empty();\n}\n"
  "bool f() {\n    std::list<int> x1;\n    std::list<int> x2;\n    for (int i = 0; i < 10; ++i) {\n        std::list<int>& x = (i < 5) ? x1 : x2;\n        x.push_back(i);\n    }\n    return x1.empty() || x2.empty();\n}\n" always "bool f() {\n    std::list<int> x1;\n    std::list<int> x2;\n    for (int i = 0; i < 10; ++i) {\n        std::list<int>& x = (i < 5) ? x1 : x2;\n        x.push_back(i);\n    }\n    return x1.empty() || x2.empty();\n}\n"
Line 6137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6137 always 6137
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6137 always 6137
  code always "bool f() {\n    std::list<int> x1;\n    std::list<int> x2;\n    for (int i = 0; i < 10; ++i) {\n        std::list<int>& x = (i < 5) ? x1 : x2;\n        x.push_back(i);\n    }\n    return x1.empty() || x2.empty();\n}\n"
  "x1 . empty" always "x1 . empty"
  0 always 0
Line 6138
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6138 always 6138
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6138 always 6138
  "x2 . empty" always "x2 . empty"
  0 always 0
Line 6140
  = always "std::vector<int> g();\nint f(bool b) {\n    std::set<int> a;\n    std::vector<int> c = g();\n    a.insert(c.begin(), c.end());\n    return a.size();\n}\n"
  "std::vector<int> g();\nint f(bool b) {\n    std::set<int> a;\n    std::vector<int> c = g();\n    a.insert(c.begin(), c.end());\n    return a.size();\n}\n" always "std::vector<int> g();\nint f(bool b) {\n    std::set<int> a;\n    std::vector<int> c = g();\n    a.insert(c.begin(), c.end());\n    return a.size();\n}\n"
Line 6147
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6147 always 6147
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6147 always 6147
  code always "std::vector<int> g();\nint f(bool b) {\n    std::set<int> a;\n    std::vector<int> c = g();\n    a.insert(c.begin(), c.end());\n    return a.size();\n}\n"
  "a . size" always "a . size"
Line 6149
  = always "std::vector<int> g();\nstd::vector<int> f() {\n    std::vector<int> v = g();\n    if (!v.empty()) {\n        if (v[0] != 0)\n            v.clear();\n    }\n    if (!v.empty() && v[0] != 0) {}\n    return v;\n}\n"
  "std::vector<int> g();\nstd::vector<int> f() {\n    std::vector<int> v = g();\n    if (!v.empty()) {\n        if (v[0] != 0)\n            v.clear();\n    }\n    if (!v.empty() && v[0] != 0) {}\n    return v;\n}\n" always "std::vector<int> g();\nstd::vector<int> f() {\n    std::vector<int> v = g();\n    if (!v.empty()) {\n        if (v[0] != 0)\n            v.clear();\n    }\n    if (!v.empty() && v[0] != 0) {}\n    return v;\n}\n"
Line 6159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6159 always 6159
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6159 always 6159
  code always "std::vector<int> g();\nstd::vector<int> f() {\n    std::vector<int> v = g();\n    if (!v.empty()) {\n        if (v[0] != 0)\n            v.clear();\n    }\n    if (!v.empty() && v[0] != 0) {}\n    return v;\n}\n"
  "v [ 0 ] != 0 ) { }" always "v [ 0 ] != 0 ) { }"
  ( always {!<=-1,!>=2}
Line 6163
  = always "std::vector<int> f() {\n    std::vector<int> v;\n    v.reserve(1);\n    v[1] = 42;\n    return v;\n}\n"
  "std::vector<int> f() {\n    std::vector<int> v;\n    v.reserve(1);\n    v[1] = 42;\n    return v;\n}\n" always "std::vector<int> f() {\n    std::vector<int> v;\n    v.reserve(1);\n    v[1] = 42;\n    return v;\n}\n"
Line 6169
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6169 always 6169
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6169 always 6169
  code always "std::vector<int> f() {\n    std::vector<int> v;\n    v.reserve(1);\n    v[1] = 42;\n    return v;\n}\n"
  "v [" always "v ["
  0 always 0
Line 6172
  = always "void f() {\n  std::vector<int> v(3);\n  v.size();\n}"
  "void f() {\n  std::vector<int> v(3);\n  v.size();\n}" always "void f() {\n  std::vector<int> v(3);\n  v.size();\n}"
Line 6176
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6176 always 6176
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6176 always 6176
  code always "void f() {\n  std::vector<int> v(3);\n  v.size();\n}"
  "v . size" always "v . size"
  3 always 3
Line 6178
  = always "void f() {\n  std::vector<int> v({ 1, 2, 3 });\n  v.size();\n}"
  "void f() {\n  std::vector<int> v({ 1, 2, 3 });\n  v.size();\n}" always "void f() {\n  std::vector<int> v({ 1, 2, 3 });\n  v.size();\n}"
Line 6182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6182 always 6182
  "" always ""
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6182 always 6182
  code always "void f() {\n  std::vector<int> v({ 1, 2, 3 });\n  v.size();\n}"
  "v . size" always "v . size"
  3 always 3
Line 6188
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 6189
  ( {lifetime[Object]=(exename),!0}
  "posix.cfg" always "posix.cfg"
  != always {!<=-1,!>=2}
  "posix.cfg" always "posix.cfg"
  false always 0
Line 6191
  = always "void* f() {\n  void* x = malloc(10);\n  return x;\n}"
  "void* f() {\n  void* x = malloc(10);\n  return x;\n}" always "void* f() {\n  void* x = malloc(10);\n  return x;\n}"
Line 6195
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6195 always 6195
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6195 always 6195
  code always "void* f() {\n  void* x = malloc(10);\n  return x;\n}"
  3U always 3
  10 always 10
Line 6197
  = always "void* f() {\n  void* x = calloc(4, 5);\n  return x;\n}"
  "void* f() {\n  void* x = calloc(4, 5);\n  return x;\n}" always "void* f() {\n  void* x = calloc(4, 5);\n  return x;\n}"
Line 6201
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6201 always 6201
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6201 always 6201
  code always "void* f() {\n  void* x = calloc(4, 5);\n  return x;\n}"
  3U always 3
  20 always 20
Line 6203
  = always "void* f() {\n  const char* y = \"abcd\";\n  const char* x = strdup(y);\n  return x;\n}"
  "void* f() {\n  const char* y = \"abcd\";\n  const char* x = strdup(y);\n  return x;\n}" always "void* f() {\n  const char* y = \"abcd\";\n  const char* x = strdup(y);\n  return x;\n}"
Line 6208
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6208 always 6208
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6208 always 6208
  code always "void* f() {\n  const char* y = \"abcd\";\n  const char* x = strdup(y);\n  return x;\n}"
  4U always 4
  5 always 5
Line 6210
  = always "void* f() {\n  void* y = malloc(10);\n  void* x = realloc(y, 20);\n  return x;\n}"
  "void* f() {\n  void* y = malloc(10);\n  void* x = realloc(y, 20);\n  return x;\n}" always "void* f() {\n  void* y = malloc(10);\n  void* x = realloc(y, 20);\n  return x;\n}"
Line 6215
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6215 always 6215
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6215 always 6215
  code always "void* f() {\n  void* y = malloc(10);\n  void* x = realloc(y, 20);\n  return x;\n}"
  4U always 4
  20 always 20
Line 6217
  = always "void* f() {\n  void* y = calloc(10, 4);\n  void* x = reallocarray(y, 20, 5);\n  return x;\n}"
  "void* f() {\n  void* y = calloc(10, 4);\n  void* x = reallocarray(y, 20, 5);\n  return x;\n}" always "void* f() {\n  void* y = calloc(10, 4);\n  void* x = reallocarray(y, 20, 5);\n  return x;\n}"
Line 6222
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6222 always 6222
  true always 1
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6222 always 6222
  code always "void* f() {\n  void* y = calloc(10, 4);\n  void* x = reallocarray(y, 20, 5);\n  return x;\n}"
  4U always 4
  100 always 100
Line 6229
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 6230
  = always 1
  = always 1
  = always 1
  true always 1
Line 6232
  = always "short f(short x) {\n  return x + 0;\n}"
  "short f(short x) {\n  return x + 0;\n}" always "short f(short x) {\n  return x + 0;\n}"
Line 6235
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6235 always 6235
  code always "short f(short x) {\n  return x + 0;\n}"
  "+" always "+"
  & {lifetime[Address]=(s),!0}
Line 6236
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6236 always 6236
  2 always 2
  ( always !<=-1
Line 6237
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6237 always 6237
  -0x8000 always -32768
Line 6238
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6238 always 6238
  0x7fff always 32767
Line 6240
  = always "short f(std::string x) {\n  return x[10];\n}"
  "short f(std::string x) {\n  return x[10];\n}" always "short f(std::string x) {\n  return x[10];\n}"
Line 6243
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6243 always 6243
  code always "short f(std::string x) {\n  return x[10];\n}"
  "x [" always "x ["
  & {lifetime[Address]=(s),!0}
Line 6244
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6244 always 6244
  2 always 2
  ( always !<=-1
Line 6245
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6245 always 6245
  0 always 0
Line 6246
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6246 always 6246
  1000000 always 1000000
Line 6248
  = always "int f(float x) {\n  return x;\n}"
  "int f(float x) {\n  return x;\n}" always "int f(float x) {\n  return x;\n}"
Line 6251
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6251 always 6251
  code always "int f(float x) {\n  return x;\n}"
  "x ;" always "x ;"
  & {lifetime[Address]=(s),!0}
Line 6252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6252 always 6252
  2 always 2
  ( always !<=-1
Line 6253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6253 always 6253
  < always {!<=-1,!>=2}
  -1E20 always -1e+20
Line 6254
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6254 always 6254
  > always {!<=-1,!>=2}
  1E20 always 1e+20
Line 6256
  = always "short f(__cppcheck_low__(0) __cppcheck_high__(100) short x) {\n  return x + 0;\n}"
  "short f(__cppcheck_low__(0) __cppcheck_high__(100) short x) {\n  return x + 0;\n}" always "short f(__cppcheck_low__(0) __cppcheck_high__(100) short x) {\n  return x + 0;\n}"
Line 6259
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6259 always 6259
  code always "short f(__cppcheck_low__(0) __cppcheck_high__(100) short x) {\n  return x + 0;\n}"
  "+" always "+"
  & {lifetime[Address]=(s),!0}
Line 6260
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6260 always 6260
  2 always 2
  ( always !<=-1
Line 6261
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6261 always 6261
  0 always 0
Line 6262
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6262 always 6262
  100 always 100
Line 6264
  = always "unsigned short f(unsigned short x) [[expects: x <= 100]] {\n  return x + 0;\n}"
  "unsigned short f(unsigned short x) [[expects: x <= 100]] {\n  return x + 0;\n}" always "unsigned short f(unsigned short x) [[expects: x <= 100]] {\n  return x + 0;\n}"
Line 6267
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6267 always 6267
  code always "unsigned short f(unsigned short x) [[expects: x <= 100]] {\n  return x + 0;\n}"
  "+" always "+"
  & {lifetime[Address]=(s),!0}
Line 6271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6271 always 6271
  2 always 2
  ( always !<=-1
Line 6272
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6272 always 6272
  0 always 0
Line 6273
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6273 always 6273
  100 always 100
Line 6281
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 6282
  "rand" always "rand"
Line 6284
  = always "x = rand();"
  "x = rand();" always "x = rand();"
Line 6285
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6285 always 6285
  code always "x = rand();"
  "(" always "("
  & {lifetime[Address]=(s),!0}
Line 6286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6286 always 6286
  2 always 2
  ( always !<=-1
Line 6287
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6287 always 6287
Line 6288
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6288 always 6288
Line 6294
  = always "int f() {\n  int a = 123;\n  int *p = &a;\n  int x = *p;\n  return x;\n}\n"
  "int f() {\n  int a = 123;\n  int *p = &a;\n  int x = *p;\n  return x;\n}\n" always "int f() {\n  int a = 123;\n  int *p = &a;\n  int x = *p;\n  return x;\n}\n"
Line 6300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6300 always 6300
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6300 always 6300
  code always "int f() {\n  int a = 123;\n  int *p = &a;\n  int x = *p;\n  return x;\n}\n"
  5U always 5
  123 always 123
Line 6306
  = always "void SlopeFloor::setAttr(const Value &val) {\n    int x = val;\n    if (x >= -1)\n        state = x;\n}\n"
  "void SlopeFloor::setAttr(const Value &val) {\n    int x = val;\n    if (x >= -1)\n        state = x;\n}\n" always "void SlopeFloor::setAttr(const Value &val) {\n    int x = val;\n    if (x >= -1)\n        state = x;\n}\n"
Line 6311
  code always "void SlopeFloor::setAttr(const Value &val) {\n    int x = val;\n    if (x >= -1)\n        state = x;\n}\n"
  "=" always "="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6311 always 6311
Line 6313
  = always "void a() {\n  auto b = [b = 0] {\n    if (b) {\n    }\n  };\n}\n"
  "void a() {\n  auto b = [b = 0] {\n    if (b) {\n    }\n  };\n}\n" always "void a() {\n  auto b = [b = 0] {\n    if (b) {\n    }\n  };\n}\n"
Line 6319
  code always "void a() {\n  auto b = [b = 0] {\n    if (b) {\n    }\n  };\n}\n"
  "0" always "0"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6319 always 6319
Line 6321
  = always "namespace juce {\nPopupMenu::Item& PopupMenu::Item::operator= (Item&&) = default;\nPopupMenu::Options withDeletionCheck (Component& comp) const {\n    Options o (*this);\n    o.componentToWatchForDeletion = &comp;\n    o.isWatchingForDeletion = true;\n    return o;\n}}\n"
  "namespace juce {\nPopupMenu::Item& PopupMenu::Item::operator= (Item&&) = default;\nPopupMenu::Options withDeletionCheck (Component& comp) const {\n    Options o (*this);\n    o.componentToWatchForDeletion = &comp;\n    o.isWatchingForDeletion = true;\n    return o;\n}}\n" always "namespace juce {\nPopupMenu::Item& PopupMenu::Item::operator= (Item&&) = default;\nPopupMenu::Options withDeletionCheck (Component& comp) const {\n    Options o (*this);\n    o.componentToWatchForDeletion = &comp;\n    o.isWatchingForDeletion = true;\n    return o;\n}}\n"
Line 6329
  code always "namespace juce {\nPopupMenu::Item& PopupMenu::Item::operator= (Item&&) = default;\nPopupMenu::Options withDeletionCheck (Component& comp) const {\n    Options o (*this);\n    o.componentToWatchForDeletion = &comp;\n    o.isWatchingForDeletion = true;\n    return o;\n}}\n"
  "return" always "return"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6329 always 6329
Line 6331
  = always "class dummy_resource : public instrument_resource {\npublic:\n    int reads;\n    static std::list<int> log;\n};\nvoid dummy_reader_reset() {\n    dummy_resource::log.clear();\n}\n"
  "class dummy_resource : public instrument_resource {\npublic:\n    int reads;\n    static std::list<int> log;\n};\nvoid dummy_reader_reset() {\n    dummy_resource::log.clear();\n}\n" always "class dummy_resource : public instrument_resource {\npublic:\n    int reads;\n    static std::list<int> log;\n};\nvoid dummy_reader_reset() {\n    dummy_resource::log.clear();\n}\n"
Line 6339
  code always "class dummy_resource : public instrument_resource {\npublic:\n    int reads;\n    static std::list<int> log;\n};\nvoid dummy_reader_reset() {\n    dummy_resource::log.clear();\n}\n"
  "log" always "log"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6339 always 6339
Line 6345
  = always "void f(int x) {\n    if (0 * (x > 2)) {}\n}\n"
  "void f(int x) {\n    if (0 * (x > 2)) {}\n}\n" always "void f(int x) {\n    if (0 * (x > 2)) {}\n}\n"
Line 6348
  code always "void f(int x) {\n    if (0 * (x > 2)) {}\n}\n"
  "x" always "x"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6348 always 6348
Line 6350
  = always "struct a {\n  void b();\n};\nvoid d(std::vector<a> c) {\n  a *e;\n  for (auto &child : c)\n    e = &child;\n  (*e).b();\n}\n"
  "struct a {\n  void b();\n};\nvoid d(std::vector<a> c) {\n  a *e;\n  for (auto &child : c)\n    e = &child;\n  (*e).b();\n}\n" always "struct a {\n  void b();\n};\nvoid d(std::vector<a> c) {\n  a *e;\n  for (auto &child : c)\n    e = &child;\n  (*e).b();\n}\n"
Line 6359
  code always "struct a {\n  void b();\n};\nvoid d(std::vector<a> c) {\n  a *e;\n  for (auto &child : c)\n    e = &child;\n  (*e).b();\n}\n"
  "e" always "e"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6359 always 6359
Line 6361
  = always "const int& f(int, const int& y = 0);\nconst int& f(int, const int& y) {\n    return y;\n}\nconst int& g(int x) {\n    const int& r = f(x);\n    return r;\n}\n"
  "const int& f(int, const int& y = 0);\nconst int& f(int, const int& y) {\n    return y;\n}\nconst int& g(int x) {\n    const int& r = f(x);\n    return r;\n}\n" always "const int& f(int, const int& y = 0);\nconst int& f(int, const int& y) {\n    return y;\n}\nconst int& g(int x) {\n    const int& r = f(x);\n    return r;\n}\n"
Line 6369
  code always "const int& f(int, const int& y = 0);\nconst int& f(int, const int& y) {\n    return y;\n}\nconst int& g(int x) {\n    const int& r = f(x);\n    return r;\n}\n"
  "0" always "0"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6369 always 6369
Line 6371
  = always "void fa(int &colors) {\n  for (int i = 0; i != 6; ++i) {}\n}\nvoid fb(not_null<int*> parent, int &&colors2) {\n  dostuff(1);\n}\n"
  "void fa(int &colors) {\n  for (int i = 0; i != 6; ++i) {}\n}\nvoid fb(not_null<int*> parent, int &&colors2) {\n  dostuff(1);\n}\n" always "void fa(int &colors) {\n  for (int i = 0; i != 6; ++i) {}\n}\nvoid fb(not_null<int*> parent, int &&colors2) {\n  dostuff(1);\n}\n"
Line 6377
  code always "void fa(int &colors) {\n  for (int i = 0; i != 6; ++i) {}\n}\nvoid fb(not_null<int*> parent, int &&colors2) {\n  dostuff(1);\n}\n"
  "x" always "x"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6377 always 6377
Line 6379
  = always "void a() {\n  static int x = 0;\n  struct c {\n    c(c &&) { ++x; }\n  };\n}\n"
  "void a() {\n  static int x = 0;\n  struct c {\n    c(c &&) { ++x; }\n  };\n}\n" always "void a() {\n  static int x = 0;\n  struct c {\n    c(c &&) { ++x; }\n  };\n}\n"
Line 6385
  code always "void a() {\n  static int x = 0;\n  struct c {\n    c(c &&) { ++x; }\n  };\n}\n"
  "x" always "x"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6385 always 6385
Line 6387
  = always "void f(){\n      struct dwarf_data **pp;\n      for (pp = (struct dwarf_data **) (void *) &state->fileline_data;\n       *pp != NULL;\n       pp = &(*pp)->next)\n    ;\n}\n"
  "void f(){\n      struct dwarf_data **pp;\n      for (pp = (struct dwarf_data **) (void *) &state->fileline_data;\n       *pp != NULL;\n       pp = &(*pp)->next)\n    ;\n}\n" always "void f(){\n      struct dwarf_data **pp;\n      for (pp = (struct dwarf_data **) (void *) &state->fileline_data;\n       *pp != NULL;\n       pp = &(*pp)->next)\n    ;\n}\n"
Line 6394
  code always "void f(){\n      struct dwarf_data **pp;\n      for (pp = (struct dwarf_data **) (void *) &state->fileline_data;\n       *pp != NULL;\n       pp = &(*pp)->next)\n    ;\n}\n"
  "x" always "x"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6394 always 6394
Line 6396
  = always "void *foo(void *x);\nvoid *foo(void *x)\n{\n    if (!x)\nyes:\n        return &&yes;\n    return x;\n}\n"
  "void *foo(void *x);\nvoid *foo(void *x)\n{\n    if (!x)\nyes:\n        return &&yes;\n    return x;\n}\n" always "void *foo(void *x);\nvoid *foo(void *x)\n{\n    if (!x)\nyes:\n        return &&yes;\n    return x;\n}\n"
Line 6404
  code always "void *foo(void *x);\nvoid *foo(void *x)\n{\n    if (!x)\nyes:\n        return &&yes;\n    return x;\n}\n"
  "x" always "x"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6404 always 6404
Line 6406
  = always "void f() {\n    std::string a = b[c->d()];\n    if(a.empty()) {\n        INFO(std::string{\"a\"} + c->d());\n        INFO(std::string{\"b\"} + a);\n    }\n}\n"
  "void f() {\n    std::string a = b[c->d()];\n    if(a.empty()) {\n        INFO(std::string{\"a\"} + c->d());\n        INFO(std::string{\"b\"} + a);\n    }\n}\n" always "void f() {\n    std::string a = b[c->d()];\n    if(a.empty()) {\n        INFO(std::string{\"a\"} + c->d());\n        INFO(std::string{\"b\"} + a);\n    }\n}\n"
Line 6413
  code always "void f() {\n    std::string a = b[c->d()];\n    if(a.empty()) {\n        INFO(std::string{\"a\"} + c->d());\n        INFO(std::string{\"b\"} + a);\n    }\n}\n"
  "a" always "a"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6413 always 6413
Line 6415
  = always "class A{\n  void f() {\n    std::string c{s()};\n  }\n  std::string s() {\n    return \"\";\n  }\n};\n"
  "class A{\n  void f() {\n    std::string c{s()};\n  }\n  std::string s() {\n    return \"\";\n  }\n};\n" always "class A{\n  void f() {\n    std::string c{s()};\n  }\n  std::string s() {\n    return \"\";\n  }\n};\n"
Line 6423
  code always "class A{\n  void f() {\n    std::string c{s()};\n  }\n  std::string s() {\n    return \"\";\n  }\n};\n"
  "c" always "c"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6423 always 6423
Line 6425
  = always "void f() {\n   char* p = 0;\n   int pi =\n     p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : 0;\n   int *i2 = 0;\n   if (i2) { }\n}\n"
  "void f() {\n   char* p = 0;\n   int pi =\n     p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : 0;\n   int *i2 = 0;\n   if (i2) { }\n}\n" always "void f() {\n   char* p = 0;\n   int pi =\n     p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : 0;\n   int *i2 = 0;\n   if (i2) { }\n}\n"
Line 6437
  code always "void f() {\n   char* p = 0;\n   int pi =\n     p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 : p == \"a\" ? 1 \n   : 0;\n   int *i2 = 0;\n   if (i2) { }\n}\n"
  "p" always "p"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6437 always 6437
Line 6439
  = always "struct a;\nnamespace e {\nstruct f {\n  struct g {\n    enum {} h;\n    int arg;\n  };\n  std::vector<g> i;\n};\n} // namespace e\nvoid fn1() {\n  std::vector<a *> arguments;\n  e::f b;\n  for (e::f::g c : b.i)\n    if (c.h)\n      a *const d = arguments[c.arg];\n}\n"
  "struct a;\nnamespace e {\nstruct f {\n  struct g {\n    enum {} h;\n    int arg;\n  };\n  std::vector<g> i;\n};\n} // namespace e\nvoid fn1() {\n  std::vector<a *> arguments;\n  e::f b;\n  for (e::f::g c : b.i)\n    if (c.h)\n      a *const d = arguments[c.arg];\n}\n" always "struct a;\nnamespace e {\nstruct f {\n  struct g {\n    enum {} h;\n    int arg;\n  };\n  std::vector<g> i;\n};\n} // namespace e\nvoid fn1() {\n  std::vector<a *> arguments;\n  e::f b;\n  for (e::f::g c : b.i)\n    if (c.h)\n      a *const d = arguments[c.arg];\n}\n"
Line 6456
  code always "struct a;\nnamespace e {\nstruct f {\n  struct g {\n    enum {} h;\n    int arg;\n  };\n  std::vector<g> i;\n};\n} // namespace e\nvoid fn1() {\n  std::vector<a *> arguments;\n  e::f b;\n  for (e::f::g c : b.i)\n    if (c.h)\n      a *const d = arguments[c.arg];\n}\n"
  "c" always "c"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6456 always 6456
Line 6458
  = always "void h(char* p, int s) {\n  char *q = p+s;\n  char buf[100];\n  char *b = buf;\n  ++b;\n  if (p < q && buf < b)\n    diff = (buf-b);\n}\n"
  "void h(char* p, int s) {\n  char *q = p+s;\n  char buf[100];\n  char *b = buf;\n  ++b;\n  if (p < q && buf < b)\n    diff = (buf-b);\n}\n" always "void h(char* p, int s) {\n  char *q = p+s;\n  char buf[100];\n  char *b = buf;\n  ++b;\n  if (p < q && buf < b)\n    diff = (buf-b);\n}\n"
Line 6466
  code always "void h(char* p, int s) {\n  char *q = p+s;\n  char buf[100];\n  char *b = buf;\n  ++b;\n  if (p < q && buf < b)\n    diff = (buf-b);\n}\n"
  "diff" always "diff"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6466 always 6466
Line 6468
  = always "void foo() {\n  std::tuple<float, float, float, float> t4(5.2f, 3.1f, 2.4f, 9.1f), t5(4, 6, 9, 27);\n  t4 = t5;\n  ASSERT(!(t4 < t5) && t4 <= t5);\n}"
  "void foo() {\n  std::tuple<float, float, float, float> t4(5.2f, 3.1f, 2.4f, 9.1f), t5(4, 6, 9, 27);\n  t4 = t5;\n  ASSERT(!(t4 < t5) && t4 <= t5);\n}" always "void foo() {\n  std::tuple<float, float, float, float> t4(5.2f, 3.1f, 2.4f, 9.1f), t5(4, 6, 9, 27);\n  t4 = t5;\n  ASSERT(!(t4 < t5) && t4 <= t5);\n}"
Line 6473
  code always "void foo() {\n  std::tuple<float, float, float, float> t4(5.2f, 3.1f, 2.4f, 9.1f), t5(4, 6, 9, 27);\n  t4 = t5;\n  ASSERT(!(t4 < t5) && t4 <= t5);\n}"
  "<=" always "<="
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6473 always 6473
Line 6475
  = always "void f() {\n    unsigned short Xoff = 10;\n    unsigned short Nx = 0;\n    int last;\n    do {\n        last = readData(0);\n        if (last && (last - Xoff < Nx))\n            Nx = last - Xoff;\n    } while (last > 0);\n}\n"
  "void f() {\n    unsigned short Xoff = 10;\n    unsigned short Nx = 0;\n    int last;\n    do {\n        last = readData(0);\n        if (last && (last - Xoff < Nx))\n            Nx = last - Xoff;\n    } while (last > 0);\n}\n" always "void f() {\n    unsigned short Xoff = 10;\n    unsigned short Nx = 0;\n    int last;\n    do {\n        last = readData(0);\n        if (last && (last - Xoff < Nx))\n            Nx = last - Xoff;\n    } while (last > 0);\n}\n"
Line 6485
  code always "void f() {\n    unsigned short Xoff = 10;\n    unsigned short Nx = 0;\n    int last;\n    do {\n        last = readData(0);\n        if (last && (last - Xoff < Nx))\n            Nx = last - Xoff;\n    } while (last > 0);\n}\n"
  "last" always "last"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6485 always 6485
Line 6487
  = always "struct a {\n  void clear();\n  int b();\n};\nstruct d {\n  void c(int);\n  decltype(auto) f() { c(0 != e.b()); }\n  a e;\n};\nvoid d::c(int) { e.clear(); }\n"
  "struct a {\n  void clear();\n  int b();\n};\nstruct d {\n  void c(int);\n  decltype(auto) f() { c(0 != e.b()); }\n  a e;\n};\nvoid d::c(int) { e.clear(); }\n" always "struct a {\n  void clear();\n  int b();\n};\nstruct d {\n  void c(int);\n  decltype(auto) f() { c(0 != e.b()); }\n  a e;\n};\nvoid d::c(int) { e.clear(); }\n"
Line 6497
  code always "struct a {\n  void clear();\n  int b();\n};\nstruct d {\n  void c(int);\n  decltype(auto) f() { c(0 != e.b()); }\n  a e;\n};\nvoid d::c(int) { e.clear(); }\n"
  "e" always "e"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6497 always 6497
Line 6499
  = always "struct a {\n  int b;\n  int c;\n} f;\nunsigned g;\nstruct {\n  a d;\n} e;\nvoid h() {\n  if (g && f.c)\n    e.d.b = g - f.c;\n}\n"
  "struct a {\n  int b;\n  int c;\n} f;\nunsigned g;\nstruct {\n  a d;\n} e;\nvoid h() {\n  if (g && f.c)\n    e.d.b = g - f.c;\n}\n" always "struct a {\n  int b;\n  int c;\n} f;\nunsigned g;\nstruct {\n  a d;\n} e;\nvoid h() {\n  if (g && f.c)\n    e.d.b = g - f.c;\n}\n"
Line 6511
  code always "struct a {\n  int b;\n  int c;\n} f;\nunsigned g;\nstruct {\n  a d;\n} e;\nvoid h() {\n  if (g && f.c)\n    e.d.b = g - f.c;\n}\n"
  "e" always "e"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6511 always 6511
Line 6513
  = always "struct a {\n  std::vector<a> b;\n  void c(unsigned d) {\n    size_t e = 0;\n    size_t f = 0;\n    for (auto child : b) {\n      f = e;\n      e = d - f;\n    }\n  }\n};\n"
  "struct a {\n  std::vector<a> b;\n  void c(unsigned d) {\n    size_t e = 0;\n    size_t f = 0;\n    for (auto child : b) {\n      f = e;\n      e = d - f;\n    }\n  }\n};\n" always "struct a {\n  std::vector<a> b;\n  void c(unsigned d) {\n    size_t e = 0;\n    size_t f = 0;\n    for (auto child : b) {\n      f = e;\n      e = d - f;\n    }\n  }\n};\n"
Line 6524
  code always "struct a {\n  std::vector<a> b;\n  void c(unsigned d) {\n    size_t e = 0;\n    size_t f = 0;\n    for (auto child : b) {\n      f = e;\n      e = d - f;\n    }\n  }\n};\n"
  "e" always "e"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6524 always 6524
Line 6526
  = always "struct a {\n  struct b {\n    std::unique_ptr<a> c;\n  };\n  void d(int, void *);\n  void e() {\n    d(0, [f = b{}] { return f.c.get(); }());\n  }\n  void g() {\n    if (b *h = 0)\n      h->c.get();\n  }\n};\n"
  "struct a {\n  struct b {\n    std::unique_ptr<a> c;\n  };\n  void d(int, void *);\n  void e() {\n    d(0, [f = b{}] { return f.c.get(); }());\n  }\n  void g() {\n    if (b *h = 0)\n      h->c.get();\n  }\n};\n" always "struct a {\n  struct b {\n    std::unique_ptr<a> c;\n  };\n  void d(int, void *);\n  void e() {\n    d(0, [f = b{}] { return f.c.get(); }());\n  }\n  void g() {\n    if (b *h = 0)\n      h->c.get();\n  }\n};\n"
Line 6539
  code always "struct a {\n  struct b {\n    std::unique_ptr<a> c;\n  };\n  void d(int, void *);\n  void e() {\n    d(0, [f = b{}] { return f.c.get(); }());\n  }\n  void g() {\n    if (b *h = 0)\n      h->c.get();\n  }\n};\n"
  "f.c" always "f.c"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6539 always 6539
Line 6541
  = always "void d(fmpz_t a, fmpz_t b) {\n  if (fmpz_sgn(0)) {}\n  else if (b) {}\n}\nvoid e(psl2z_t f) {\n  f->b;\n  d(&f->a, c);\n}\n"
  "void d(fmpz_t a, fmpz_t b) {\n  if (fmpz_sgn(0)) {}\n  else if (b) {}\n}\nvoid e(psl2z_t f) {\n  f->b;\n  d(&f->a, c);\n}\n" always "void d(fmpz_t a, fmpz_t b) {\n  if (fmpz_sgn(0)) {}\n  else if (b) {}\n}\nvoid e(psl2z_t f) {\n  f->b;\n  d(&f->a, c);\n}\n"
Line 6549
  code always "void d(fmpz_t a, fmpz_t b) {\n  if (fmpz_sgn(0)) {}\n  else if (b) {}\n}\nvoid e(psl2z_t f) {\n  f->b;\n  d(&f->a, c);\n}\n"
  "f" always "f"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6549 always 6549
Line 6551
  = always "struct bo {\n  int b, c, a, d;\n  char e, g, h, i, aa, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y;\n  long z, ab, ac, ad, f, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar,\n      as;\n  short at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk,\n      bl, bm;\n};\nchar bn;\nvoid bp() {\n  bo s;\n  if (bn)\n    return;\n  s;\n}\n"
  "struct bo {\n  int b, c, a, d;\n  char e, g, h, i, aa, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y;\n  long z, ab, ac, ad, f, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar,\n      as;\n  short at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk,\n      bl, bm;\n};\nchar bn;\nvoid bp() {\n  bo s;\n  if (bn)\n    return;\n  s;\n}\n" always "struct bo {\n  int b, c, a, d;\n  char e, g, h, i, aa, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y;\n  long z, ab, ac, ad, f, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar,\n      as;\n  short at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk,\n      bl, bm;\n};\nchar bn;\nvoid bp() {\n  bo s;\n  if (bn)\n    return;\n  s;\n}\n"
Line 6566
  code always "struct bo {\n  int b, c, a, d;\n  char e, g, h, i, aa, j, k, l, m, n, o, p, q, r, t, u, v, w, x, y;\n  long z, ab, ac, ad, f, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar,\n      as;\n  short at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk,\n      bl, bm;\n};\nchar bn;\nvoid bp() {\n  bo s;\n  if (bn)\n    return;\n  s;\n}\n"
  "s" always "s"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6566 always 6566
Line 6568
  = always "int f(int value) { return 0; }\nstd::shared_ptr<Manager> g() {\n    static const std::shared_ptr<Manager> x{ new M{} };\n    return x;\n}\n"
  "int f(int value) { return 0; }\nstd::shared_ptr<Manager> g() {\n    static const std::shared_ptr<Manager> x{ new M{} };\n    return x;\n}\n" always "int f(int value) { return 0; }\nstd::shared_ptr<Manager> g() {\n    static const std::shared_ptr<Manager> x{ new M{} };\n    return x;\n}\n"
Line 6573
  code always "int f(int value) { return 0; }\nstd::shared_ptr<Manager> g() {\n    static const std::shared_ptr<Manager> x{ new M{} };\n    return x;\n}\n"
  "x" always "x"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6573 always 6573
Line 6575
  = always "int* g();\nvoid f() {\n    std::cout << (void*)(std::shared_ptr<int>{ g() }.get());\n}\n"
  "int* g();\nvoid f() {\n    std::cout << (void*)(std::shared_ptr<int>{ g() }.get());\n}\n" always "int* g();\nvoid f() {\n    std::cout << (void*)(std::shared_ptr<int>{ g() }.get());\n}\n"
Line 6579
  code always "int* g();\nvoid f() {\n    std::cout << (void*)(std::shared_ptr<int>{ g() }.get());\n}\n"
  "." always "."
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6579 always 6579
Line 6581
  = always "class T;\nstruct S {\n    void f(std::array<T*, 2>& a);\n};\n"
  "class T;\nstruct S {\n    void f(std::array<T*, 2>& a);\n};\n" always "class T;\nstruct S {\n    void f(std::array<T*, 2>& a);\n};\n"
Line 6585
  code always "class T;\nstruct S {\n    void f(std::array<T*, 2>& a);\n};\n"
  "a" always "a"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6585 always 6585
Line 6587
  = always "void f(const char * const x) { !!system(x); }\n"
  "void f(const char * const x) { !!system(x); }\n" always "void f(const char * const x) { !!system(x); }\n"
Line 6588
  code always "void f(const char * const x) { !!system(x); }\n"
  "x" always "x"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6588 always 6588
Line 6590
  = always "struct struct1 {\n    int i1;\n    int i2;\n};\nstruct struct2 {\n    char c1;\n    struct1 is1;\n    char c2[4];\n};\nvoid f() {\n    struct2 a = { 1, 2, 3, {4,5,6,7} }; \n}\n"
  "struct struct1 {\n    int i1;\n    int i2;\n};\nstruct struct2 {\n    char c1;\n    struct1 is1;\n    char c2[4];\n};\nvoid f() {\n    struct2 a = { 1, 2, 3, {4,5,6,7} }; \n}\n" always "struct struct1 {\n    int i1;\n    int i2;\n};\nstruct struct2 {\n    char c1;\n    struct1 is1;\n    char c2[4];\n};\nvoid f() {\n    struct2 a = { 1, 2, 3, {4,5,6,7} }; \n}\n"
Line 6602
  code always "struct struct1 {\n    int i1;\n    int i2;\n};\nstruct struct2 {\n    char c1;\n    struct1 is1;\n    char c2[4];\n};\nvoid f() {\n    struct2 a = { 1, 2, 3, {4,5,6,7} }; \n}\n"
  "a" always "a"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6602 always 6602
Line 6604
  = always "void setDeltas(int life, int age, int multiplier) {\n    int dx = 0;\n    int dy = 0;\n    if (age <= 2 || life < 4) {\n        dy = 0;\n        dx = (rand() % 3) - 1;\n    }\n    else if (age < (multiplier * 3)) {\n        if (age % (int) (multiplier * 0.5) == 0) dy = -1;\n        else dy = 0;\n    }\n}\n"
  "void setDeltas(int life, int age, int multiplier) {\n    int dx = 0;\n    int dy = 0;\n    if (age <= 2 || life < 4) {\n        dy = 0;\n        dx = (rand() % 3) - 1;\n    }\n    else if (age < (multiplier * 3)) {\n        if (age % (int) (multiplier * 0.5) == 0) dy = -1;\n        else dy = 0;\n    }\n}\n" always "void setDeltas(int life, int age, int multiplier) {\n    int dx = 0;\n    int dy = 0;\n    if (age <= 2 || life < 4) {\n        dy = 0;\n        dx = (rand() % 3) - 1;\n    }\n    else if (age < (multiplier * 3)) {\n        if (age % (int) (multiplier * 0.5) == 0) dy = -1;\n        else dy = 0;\n    }\n}\n"
Line 6616
  code always "void setDeltas(int life, int age, int multiplier) {\n    int dx = 0;\n    int dy = 0;\n    if (age <= 2 || life < 4) {\n        dy = 0;\n        dx = (rand() % 3) - 1;\n    }\n    else if (age < (multiplier * 3)) {\n        if (age % (int) (multiplier * 0.5) == 0) dy = -1;\n        else dy = 0;\n    }\n}\n"
  "age" always "age"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6616 always 6616
Line 6618
  = always "void a() {\n  struct b {\n    int d;\n  };\n  for (b c : {b{}, {}}) {}\n}\n"
  "void a() {\n  struct b {\n    int d;\n  };\n  for (b c : {b{}, {}}) {}\n}\n" always "void a() {\n  struct b {\n    int d;\n  };\n  for (b c : {b{}, {}}) {}\n}\n"
Line 6624
  code always "void a() {\n  struct b {\n    int d;\n  };\n  for (b c : {b{}, {}}) {}\n}\n"
  "c" always "c"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6624 always 6624
Line 6630
  = always "float arr1[4][4] = {0.0};\nfloat arr2[4][4] = {0.0};\nvoid f() {\n    if(arr1[0][0] == 0.0 &&\n       arr1[0][1] == 0.0 &&\n       arr1[0][2] == 0.0 &&\n       arr1[0][3] == 0.0 &&\n       arr1[1][0] == 0.0 &&\n       arr1[1][1] == 0.0 &&\n       arr1[1][2] == 0.0 &&\n       arr1[1][3] == 0.0 &&\n       arr1[2][0] == 0.0 &&\n       arr1[2][1] == 0.0 &&\n       arr1[2][2] == 0.0 &&\n       arr1[2][3] == 0.0 &&\n       arr1[3][0] == 0.0 &&\n       arr1[3][1] == 0.0 &&\n       arr1[3][2] == 0.0 &&\n       arr1[3][3] == 0.0 &&\n       arr2[0][0] == 0.0 &&\n       arr2[0][1] == 0.0 &&\n       arr2[0][2] == 0.0 &&\n       arr2[0][3] == 0.0 &&\n       arr2[1][0] == 0.0 &&\n       arr2[1][1] == 0.0 &&\n       arr2[1][2] == 0.0 &&\n       arr2[1][3] == 0.0 &&\n       arr2[2][0] == 0.0 &&\n       arr2[2][1] == 0.0 &&\n       arr2[2][2] == 0.0 &&\n       arr2[2][3] == 0.0 &&\n       arr2[3][0] == 0.0 &&\n       arr2[3][1] == 0.0 &&\n       arr2[3][2] == 0.0 &&\n       arr2[3][3] == 0.0\n       ) {}\n}\n"
  "float arr1[4][4] = {0.0};\nfloat arr2[4][4] = {0.0};\nvoid f() {\n    if(arr1[0][0] == 0.0 &&\n       arr1[0][1] == 0.0 &&\n       arr1[0][2] == 0.0 &&\n       arr1[0][3] == 0.0 &&\n       arr1[1][0] == 0.0 &&\n       arr1[1][1] == 0.0 &&\n       arr1[1][2] == 0.0 &&\n       arr1[1][3] == 0.0 &&\n       arr1[2][0] == 0.0 &&\n       arr1[2][1] == 0.0 &&\n       arr1[2][2] == 0.0 &&\n       arr1[2][3] == 0.0 &&\n       arr1[3][0] == 0.0 &&\n       arr1[3][1] == 0.0 &&\n       arr1[3][2] == 0.0 &&\n       arr1[3][3] == 0.0 &&\n       arr2[0][0] == 0.0 &&\n       arr2[0][1] == 0.0 &&\n       arr2[0][2] == 0.0 &&\n       arr2[0][3] == 0.0 &&\n       arr2[1][0] == 0.0 &&\n       arr2[1][1] == 0.0 &&\n       arr2[1][2] == 0.0 &&\n       arr2[1][3] == 0.0 &&\n       arr2[2][0] == 0.0 &&\n       arr2[2][1] == 0.0 &&\n       arr2[2][2] == 0.0 &&\n       arr2[2][3] == 0.0 &&\n       arr2[3][0] == 0.0 &&\n       arr2[3][1] == 0.0 &&\n       arr2[3][2] == 0.0 &&\n       arr2[3][3] == 0.0\n       ) {}\n}\n" always "float arr1[4][4] = {0.0};\nfloat arr2[4][4] = {0.0};\nvoid f() {\n    if(arr1[0][0] == 0.0 &&\n       arr1[0][1] == 0.0 &&\n       arr1[0][2] == 0.0 &&\n       arr1[0][3] == 0.0 &&\n       arr1[1][0] == 0.0 &&\n       arr1[1][1] == 0.0 &&\n       arr1[1][2] == 0.0 &&\n       arr1[1][3] == 0.0 &&\n       arr1[2][0] == 0.0 &&\n       arr1[2][1] == 0.0 &&\n       arr1[2][2] == 0.0 &&\n       arr1[2][3] == 0.0 &&\n       arr1[3][0] == 0.0 &&\n       arr1[3][1] == 0.0 &&\n       arr1[3][2] == 0.0 &&\n       arr1[3][3] == 0.0 &&\n       arr2[0][0] == 0.0 &&\n       arr2[0][1] == 0.0 &&\n       arr2[0][2] == 0.0 &&\n       arr2[0][3] == 0.0 &&\n       arr2[1][0] == 0.0 &&\n       arr2[1][1] == 0.0 &&\n       arr2[1][2] == 0.0 &&\n       arr2[1][3] == 0.0 &&\n       arr2[2][0] == 0.0 &&\n       arr2[2][1] == 0.0 &&\n       arr2[2][2] == 0.0 &&\n       arr2[2][3] == 0.0 &&\n       arr2[3][0] == 0.0 &&\n       arr2[3][1] == 0.0 &&\n       arr2[3][2] == 0.0 &&\n       arr2[3][3] == 0.0\n       ) {}\n}\n"
Line 6667
  code always "float arr1[4][4] = {0.0};\nfloat arr2[4][4] = {0.0};\nvoid f() {\n    if(arr1[0][0] == 0.0 &&\n       arr1[0][1] == 0.0 &&\n       arr1[0][2] == 0.0 &&\n       arr1[0][3] == 0.0 &&\n       arr1[1][0] == 0.0 &&\n       arr1[1][1] == 0.0 &&\n       arr1[1][2] == 0.0 &&\n       arr1[1][3] == 0.0 &&\n       arr1[2][0] == 0.0 &&\n       arr1[2][1] == 0.0 &&\n       arr1[2][2] == 0.0 &&\n       arr1[2][3] == 0.0 &&\n       arr1[3][0] == 0.0 &&\n       arr1[3][1] == 0.0 &&\n       arr1[3][2] == 0.0 &&\n       arr1[3][3] == 0.0 &&\n       arr2[0][0] == 0.0 &&\n       arr2[0][1] == 0.0 &&\n       arr2[0][2] == 0.0 &&\n       arr2[0][3] == 0.0 &&\n       arr2[1][0] == 0.0 &&\n       arr2[1][1] == 0.0 &&\n       arr2[1][2] == 0.0 &&\n       arr2[1][3] == 0.0 &&\n       arr2[2][0] == 0.0 &&\n       arr2[2][1] == 0.0 &&\n       arr2[2][2] == 0.0 &&\n       arr2[2][3] == 0.0 &&\n       arr2[3][0] == 0.0 &&\n       arr2[3][1] == 0.0 &&\n       arr2[3][2] == 0.0 &&\n       arr2[3][3] == 0.0\n       ) {}\n}\n"
  "x" always "x"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6667 always 6667
Line 6669
  = always "namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b, &b, &b, &b}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {{&b, &b, &b, &b, &b, &b, &b}}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b}}}};\n}\n"
  "namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b, &b, &b, &b}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {{&b, &b, &b, &b, &b, &b, &b}}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b}}}};\n}\n" always "namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b, &b, &b, &b}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {{&b, &b, &b, &b, &b, &b, &b}}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b}}}};\n}\n"
Line 6681
  code always "namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b, &b, &b, &b}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {{&b, &b, &b, &b, &b, &b, &b}}}},\n    {0,\n     {{&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b}}}};\n}\n"
  "x" always "x"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6681 always 6681
Line 6683
  = always "namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}, {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, {&b}}}},\n    {0,\n     {{&b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b,\n       &b}}}};\n}\n"
  "namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}, {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, {&b}}}},\n    {0,\n     {{&b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b,\n       &b}}}};\n}\n" always "namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}, {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, {&b}}}},\n    {0,\n     {{&b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b,\n       &b}}}};\n}\n"
Line 6697
  code always "namespace {\nstruct a {\n  a(...) {}\n  a(std::initializer_list<std::pair<int, std::vector<std::vector<a>>>>) {}\n} b{{0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}}},\n    {0, {{&b}, {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, {&b}}}},\n    {0,\n     {{&b},\n      {&b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b, &b,\n       &b}}}};\n}\n"
  "x" always "x"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6697 always 6697
Line 6699
  = always "int &a(int &);\nint &b(int &);\nint &c(int &);\nint &d(int &e) {\n  if (!e)\n    return a(e);\n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &a(int &e) { \n  if (!e)\n    return d(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &b(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return c(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\nint &c(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\n"
  "int &a(int &);\nint &b(int &);\nint &c(int &);\nint &d(int &e) {\n  if (!e)\n    return a(e);\n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &a(int &e) { \n  if (!e)\n    return d(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &b(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return c(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\nint &c(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\n" always "int &a(int &);\nint &b(int &);\nint &c(int &);\nint &d(int &e) {\n  if (!e)\n    return a(e);\n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &a(int &e) { \n  if (!e)\n    return d(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &b(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return c(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\nint &c(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\n"
Line 6738
  code always "int &a(int &);\nint &b(int &);\nint &c(int &);\nint &d(int &e) {\n  if (!e)\n    return a(e);\n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &a(int &e) { \n  if (!e)\n    return d(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return c(e);\n  return e;\n}\nint &b(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return c(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\nint &c(int &e) { \n  if (!e)\n    return a(e); \n  if (e > 0)\n    return b(e);\n  if (e < 0)\n    return d(e);\n  return e;\n}\n"
  "x" always "x"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6738 always 6738
Line 6740
  = always "void a() {\n  int b = 0;\n  do {\n    for (;;)\n      break;\n  } while (b < 1);\n}\n"
  "void a() {\n  int b = 0;\n  do {\n    for (;;)\n      break;\n  } while (b < 1);\n}\n" always "void a() {\n  int b = 0;\n  do {\n    for (;;)\n      break;\n  } while (b < 1);\n}\n"
Line 6747
  code always "void a() {\n  int b = 0;\n  do {\n    for (;;)\n      break;\n  } while (b < 1);\n}\n"
  "b" always "b"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6747 always 6747
Line 6749
  = always "void ParseEvent(tinyxml2::XMLDocument& doc, std::set<Item*>& retItems) {\n    auto ParseAddItem = [&](Item* item) {\n        return retItems.insert(item).second;\n    };\n    tinyxml2::XMLElement *root = doc.RootElement();\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n}\n"
  "void ParseEvent(tinyxml2::XMLDocument& doc, std::set<Item*>& retItems) {\n    auto ParseAddItem = [&](Item* item) {\n        return retItems.insert(item).second;\n    };\n    tinyxml2::XMLElement *root = doc.RootElement();\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n}\n" always "void ParseEvent(tinyxml2::XMLDocument& doc, std::set<Item*>& retItems) {\n    auto ParseAddItem = [&](Item* item) {\n        return retItems.insert(item).second;\n    };\n    tinyxml2::XMLElement *root = doc.RootElement();\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n}\n"
Line 6770
  code always "void ParseEvent(tinyxml2::XMLDocument& doc, std::set<Item*>& retItems) {\n    auto ParseAddItem = [&](Item* item) {\n        return retItems.insert(item).second;\n    };\n    tinyxml2::XMLElement *root = doc.RootElement();\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n    for (auto *el = root->FirstChildElement(\"Result\"); el && !ParseAddItem(GetItem(el)); el = el->NextSiblingElement(\"Result\")) ;\n}\n"
  "root" always "root"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6770 always 6770
Line 6772
  = always "bool isCharPotentialOperator(char ch)  {\n    return (ispunct((unsigned char) ch)\n            && ch != '{' && ch != '}'\n            && ch != '(' && ch != ')'\n            && ch != '[' && ch != ']'\n            && ch != ';' && ch != ','\n            && ch != '#' && ch != '\\\\'\n            && ch != '\\\'' && ch != '\\\"');\n}\n"
  "bool isCharPotentialOperator(char ch)  {\n    return (ispunct((unsigned char) ch)\n            && ch != '{' && ch != '}'\n            && ch != '(' && ch != ')'\n            && ch != '[' && ch != ']'\n            && ch != ';' && ch != ','\n            && ch != '#' && ch != '\\\\'\n            && ch != '\\\'' && ch != '\\\"');\n}\n" always "bool isCharPotentialOperator(char ch)  {\n    return (ispunct((unsigned char) ch)\n            && ch != '{' && ch != '}'\n            && ch != '(' && ch != ')'\n            && ch != '[' && ch != ']'\n            && ch != ';' && ch != ','\n            && ch != '#' && ch != '\\\\'\n            && ch != '\\\'' && ch != '\\\"');\n}\n"
Line 6781
  code always "bool isCharPotentialOperator(char ch)  {\n    return (ispunct((unsigned char) ch)\n            && ch != '{' && ch != '}'\n            && ch != '(' && ch != ')'\n            && ch != '[' && ch != ']'\n            && ch != ';' && ch != ','\n            && ch != '#' && ch != '\\\\'\n            && ch != '\\\'' && ch != '\\\"');\n}\n"
  "return" always "return"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6781 always 6781
Line 6783
  = always "void heapSort() {\n    int n = m_size;\n    while (n >= 1) {\n        swap(0, n - 1);\n    }\n}\n"
  "void heapSort() {\n    int n = m_size;\n    while (n >= 1) {\n        swap(0, n - 1);\n    }\n}\n" always "void heapSort() {\n    int n = m_size;\n    while (n >= 1) {\n        swap(0, n - 1);\n    }\n}\n"
Line 6789
  code always "void heapSort() {\n    int n = m_size;\n    while (n >= 1) {\n        swap(0, n - 1);\n    }\n}\n"
  "swap" always "swap"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6789 always 6789
Line 6791
  = always "double a;\nint b, c, d, e, f, g;\nvoid h() { double i, j = i = g = f = e = d = c = b = a; }\n"
  "double a;\nint b, c, d, e, f, g;\nvoid h() { double i, j = i = g = f = e = d = c = b = a; }\n" always "double a;\nint b, c, d, e, f, g;\nvoid h() { double i, j = i = g = f = e = d = c = b = a; }\n"
Line 6794
  code always "double a;\nint b, c, d, e, f, g;\nvoid h() { double i, j = i = g = f = e = d = c = b = a; }\n"
  "a" always "a"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6794 always 6794
Line 6796
  = always "double a, c;\ndouble *b;\nvoid d() {\n  double e, f, g, h = g = f = e = c = a;\n  b[8] = a;\n  b[1] = a;\n  a;\n}\n"
  "double a, c;\ndouble *b;\nvoid d() {\n  double e, f, g, h = g = f = e = c = a;\n  b[8] = a;\n  b[1] = a;\n  a;\n}\n" always "double a, c;\ndouble *b;\nvoid d() {\n  double e, f, g, h = g = f = e = c = a;\n  b[8] = a;\n  b[1] = a;\n  a;\n}\n"
Line 6804
  code always "double a, c;\ndouble *b;\nvoid d() {\n  double e, f, g, h = g = f = e = c = a;\n  b[8] = a;\n  b[1] = a;\n  a;\n}\n"
  "a" always "a"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6804 always 6804
Line 6809
  = always "void Error()\n{\n    VfsPath path(\"\");\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}"
  "void Error()\n{\n    VfsPath path(\"\");\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}" always "void Error()\n{\n    VfsPath path(\"\");\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}"
Line 6819
  code always "void Error()\n{\n    VfsPath path(\"\");\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}"
  "path" always "path"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6819 always 6819
Line 6821
  = always "void Error()\n{\n    VfsPath path;\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}"
  "void Error()\n{\n    VfsPath path;\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}" always "void Error()\n{\n    VfsPath path;\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}"
Line 6831
  code always "void Error()\n{\n    VfsPath path;\n    path = path / amtype;\n    size_t base = 0;\n    VfsPath standard(\"standard\");\n    if (path != standard)\n    {\n    }\n}"
  "path" always "path"
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6831 always 6831
Line 6835
  = always "int f(int a, int b, bool x) {\n  if (a == 1 && (!(b == 2 && x))) {\n  } else {\n    if (x) {\n    }\n  }\n\n  return 0;\n}"
  "int f(int a, int b, bool x) {\n  if (a == 1 && (!(b == 2 && x))) {\n  } else {\n    if (x) {\n    }\n  }\n\n  return 0;\n}" always "int f(int a, int b, bool x) {\n  if (a == 1 && (!(b == 2 && x))) {\n  } else {\n    if (x) {\n    }\n  }\n\n  return 0;\n}"
Line 6845
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6845 always 6845
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6845 always 6845
  code always "int f(int a, int b, bool x) {\n  if (a == 1 && (!(b == 2 && x))) {\n  } else {\n    if (x) {\n    }\n  }\n\n  return 0;\n}"
  4U always 4
  1 always 1
Line 6851
  = always "int f(int x) {\n    if ((64 - x) == 8)\n        return x;\n    return 0;\n}\n"
  "int f(int x) {\n    if ((64 - x) == 8)\n        return x;\n    return 0;\n}\n" always "int f(int x) {\n    if ((64 - x) == 8)\n        return x;\n    return 0;\n}\n"
Line 6856
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6856 always 6856
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6856 always 6856
  code always "int f(int x) {\n    if ((64 - x) == 8)\n        return x;\n    return 0;\n}\n"
  3U always 3
  56 always 56
Line 6858
  = always "int f(int x) {\n    if ((x - 64) == 8)\n        return x;\n    return 0;\n}\n"
  "int f(int x) {\n    if ((x - 64) == 8)\n        return x;\n    return 0;\n}\n" always "int f(int x) {\n    if ((x - 64) == 8)\n        return x;\n    return 0;\n}\n"
Line 6863
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6863 always 6863
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6863 always 6863
  code always "int f(int x) {\n    if ((x - 64) == 8)\n        return x;\n    return 0;\n}\n"
  3U always 3
  72 always 72
Line 6865
  = always "int f(int x) {\n    if ((x - 64) == 8)\n        return x;\n    return 0;\n}\n"
  "int f(int x) {\n    if ((x - 64) == 8)\n        return x;\n    return 0;\n}\n" always "int f(int x) {\n    if ((x - 64) == 8)\n        return x;\n    return 0;\n}\n"
Line 6870
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6870 always 6870
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6870 always 6870
  code always "int f(int x) {\n    if ((x - 64) == 8)\n        return x;\n    return 0;\n}\n"
  3U always 3
  72 always 72
Line 6872
  = always "int f(int x) {\n    if ((x + 64) == 8)\n        return x;\n    return 0;\n}\n"
  "int f(int x) {\n    if ((x + 64) == 8)\n        return x;\n    return 0;\n}\n" always "int f(int x) {\n    if ((x + 64) == 8)\n        return x;\n    return 0;\n}\n"
Line 6877
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6877 always 6877
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6877 always 6877
  code always "int f(int x) {\n    if ((x + 64) == 8)\n        return x;\n    return 0;\n}\n"
  3U always 3
  -56 always -56
Line 6879
  = always "int f(int x) {\n    if ((x * 2) == 8)\n        return x;\n    return 0;\n}\n"
  "int f(int x) {\n    if ((x * 2) == 8)\n        return x;\n    return 0;\n}\n" always "int f(int x) {\n    if ((x * 2) == 8)\n        return x;\n    return 0;\n}\n"
Line 6884
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6884 always 6884
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6884 always 6884
  code always "int f(int x) {\n    if ((x * 2) == 8)\n        return x;\n    return 0;\n}\n"
  3U always 3
  4 always 4
Line 6886
  = always "int f(int x) {\n    if ((x ^ 64) == 8)\n        return x;\n    return 0;\n}\n"
  "int f(int x) {\n    if ((x ^ 64) == 8)\n        return x;\n    return 0;\n}\n" always "int f(int x) {\n    if ((x ^ 64) == 8)\n        return x;\n    return 0;\n}\n"
Line 6891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6891 always 6891
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6891 always 6891
  code always "int f(int x) {\n    if ((x ^ 64) == 8)\n        return x;\n    return 0;\n}\n"
  3U always 3
  72 always 72
Line 6893
  = always "int f(int i) {\n    int j = i + 64;\n    int x = j;\n    return x;\n}\n"
  "int f(int i) {\n    int j = i + 64;\n    int x = j;\n    return x;\n}\n" always "int f(int i) {\n    int j = i + 64;\n    int x = j;\n    return x;\n}\n"
Line 6898
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6898 always 6898
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6898 always 6898
  code always "int f(int i) {\n    int j = i + 64;\n    int x = j;\n    return x;\n}\n"
  4U always 4
  "i" always "i"
  64 always 64
Line 6904
  = always "void f(bool a, bool b) {\n    bool x = true;\n    if (a)\n        x = x && b;\n    bool result = x;\n}\n"
  "void f(bool a, bool b) {\n    bool x = true;\n    if (a)\n        x = x && b;\n    bool result = x;\n}\n" always "void f(bool a, bool b) {\n    bool x = true;\n    if (a)\n        x = x && b;\n    bool result = x;\n}\n"
Line 6910
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6910 always 6910
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6910 always 6910
  code always "void f(bool a, bool b) {\n    bool x = true;\n    if (a)\n        x = x && b;\n    bool result = x;\n}\n"
  5U always 5
  1 always 1
Line 6912
  = always "void f(bool a, bool b) {\n    bool x = false;\n    if (a)\n        x = x && b;\n    bool result = x;\n}\n"
  "void f(bool a, bool b) {\n    bool x = false;\n    if (a)\n        x = x && b;\n    bool result = x;\n}\n" always "void f(bool a, bool b) {\n    bool x = false;\n    if (a)\n        x = x && b;\n    bool result = x;\n}\n"
Line 6918
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6918 always 6918
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6918 always 6918
  code always "void f(bool a, bool b) {\n    bool x = false;\n    if (a)\n        x = x && b;\n    bool result = x;\n}\n"
  5U always 5
  0 always 0
Line 6920
  = always "void f(bool a, bool b) {\n    bool x = true;\n    if (a)\n        x = x || b;\n    bool result = x;\n}\n"
  "void f(bool a, bool b) {\n    bool x = true;\n    if (a)\n        x = x || b;\n    bool result = x;\n}\n" always "void f(bool a, bool b) {\n    bool x = true;\n    if (a)\n        x = x || b;\n    bool result = x;\n}\n"
Line 6926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6926 always 6926
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6926 always 6926
  code always "void f(bool a, bool b) {\n    bool x = true;\n    if (a)\n        x = x || b;\n    bool result = x;\n}\n"
  5U always 5
  1 always 1
Line 6928
  = always "void f(bool a, bool b) {\n    bool x = false;\n    if (a)\n        x = x || b;\n    bool result = x;\n}\n"
  "void f(bool a, bool b) {\n    bool x = false;\n    if (a)\n        x = x || b;\n    bool result = x;\n}\n" always "void f(bool a, bool b) {\n    bool x = false;\n    if (a)\n        x = x || b;\n    bool result = x;\n}\n"
Line 6934
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6934 always 6934
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6934 always 6934
  code always "void f(bool a, bool b) {\n    bool x = false;\n    if (a)\n        x = x || b;\n    bool result = x;\n}\n"
  5U always 5
  0 always 0
Line 6936
  = always "void foo() {\n    int x = 0;\n    for (int i = 0; i < 5; i++) {\n        int y = 0;\n        for (int j = 0; j < 10; j++)\n            y++;\n        if (y >= x)\n            x = y;\n    }\n    return x;\n}\n"
  "void foo() {\n    int x = 0;\n    for (int i = 0; i < 5; i++) {\n        int y = 0;\n        for (int j = 0; j < 10; j++)\n            y++;\n        if (y >= x)\n            x = y;\n    }\n    return x;\n}\n" always "void foo() {\n    int x = 0;\n    for (int i = 0; i < 5; i++) {\n        int y = 0;\n        for (int j = 0; j < 10; j++)\n            y++;\n        if (y >= x)\n            x = y;\n    }\n    return x;\n}\n"
Line 6947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6947 always 6947
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6947 always 6947
  code always "void foo() {\n    int x = 0;\n    for (int i = 0; i < 5; i++) {\n        int y = 0;\n        for (int j = 0; j < 10; j++)\n            y++;\n        if (y >= x)\n            x = y;\n    }\n    return x;\n}\n"
  10U always 10
  0 always 0
Line 6953
  = always "auto f(uint32_t i) {\n    auto x = i;\n    return x;\n}\n"
  "auto f(uint32_t i) {\n    auto x = i;\n    return x;\n}\n" always "auto f(uint32_t i) {\n    auto x = i;\n    return x;\n}\n"
Line 6957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6957 always 6957
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6957 always 6957
  code always "auto f(uint32_t i) {\n    auto x = i;\n    return x;\n}\n"
  3U always 3
  -1 always -1
Line 6959
  = always "auto f(uint32_t i) {\n    auto x = (int32_t)i;\n    return x;\n}\n"
  "auto f(uint32_t i) {\n    auto x = (int32_t)i;\n    return x;\n}\n" always "auto f(uint32_t i) {\n    auto x = (int32_t)i;\n    return x;\n}\n"
Line 6963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6963 always 6963
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6963 always 6963
  code always "auto f(uint32_t i) {\n    auto x = (int32_t)i;\n    return x;\n}\n"
  3U always 3
  -1 always -1
Line 6965
  = always "auto f(uint32_t i) {\n    auto x = (int64_t)i;\n    return x;\n}\n"
  "auto f(uint32_t i) {\n    auto x = (int64_t)i;\n    return x;\n}\n" always "auto f(uint32_t i) {\n    auto x = (int64_t)i;\n    return x;\n}\n"
Line 6969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6969 always 6969
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6969 always 6969
  code always "auto f(uint32_t i) {\n    auto x = (int64_t)i;\n    return x;\n}\n"
  3U always 3
  -1 always -1
Line 6971
  = always "size_t g();\nauto f(uint16_t j) {\n    auto x = g() - j;\n    return x;\n}\n"
  "size_t g();\nauto f(uint16_t j) {\n    auto x = g() - j;\n    return x;\n}\n" always "size_t g();\nauto f(uint16_t j) {\n    auto x = g() - j;\n    return x;\n}\n"
Line 6976
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6976 always 6976
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6976 always 6976
  code always "size_t g();\nauto f(uint16_t j) {\n    auto x = g() - j;\n    return x;\n}\n"
  4U always 4
  0 always 0
Line 6977
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6977 always 6977
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6977 always 6977
  4U always 4
  -1 always -1
Line 6979
  = always "auto f(uint32_t i) {\n    auto x = (i + 1) % 16;\n    return x;\n}\n"
  "auto f(uint32_t i) {\n    auto x = (i + 1) % 16;\n    return x;\n}\n" always "auto f(uint32_t i) {\n    auto x = (i + 1) % 16;\n    return x;\n}\n"
Line 6983
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6983 always 6983
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6983 always 6983
  code always "auto f(uint32_t i) {\n    auto x = (i + 1) % 16;\n    return x;\n}\n"
  3U always 3
  0 always 0
Line 6984
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6984 always 6984
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6984 always 6984
  3U always 3
  -1 always -1
Line 6986
  = always "auto f(uint32_t i) {\n    auto x = i ^ 3;\n    return x;\n}\n"
  "auto f(uint32_t i) {\n    auto x = i ^ 3;\n    return x;\n}\n" always "auto f(uint32_t i) {\n    auto x = i ^ 3;\n    return x;\n}\n"
Line 6990
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6990 always 6990
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6990 always 6990
  code always "auto f(uint32_t i) {\n    auto x = i ^ 3;\n    return x;\n}\n"
  3U always 3
  2 always 2
Line 6991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6991 always 6991
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6991 always 6991
  3U always 3
  -1 always -1
Line 6993
  = always "auto f(uint32_t i) {\n    auto x = i & 3;\n    return x;\n}\n"
  "auto f(uint32_t i) {\n    auto x = i & 3;\n    return x;\n}\n" always "auto f(uint32_t i) {\n    auto x = i & 3;\n    return x;\n}\n"
Line 6997
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6997 always 6997
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6997 always 6997
  code always "auto f(uint32_t i) {\n    auto x = i & 3;\n    return x;\n}\n"
  3U always 3
  2 always 2
Line 6998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6998 always 6998
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  6998 always 6998
  3U always 3
  -1 always -1
Line 7004
  = always "auto f(int i) {\n    auto x = i % 2;\n    return x;\n}\n"
  "auto f(int i) {\n    auto x = i % 2;\n    return x;\n}\n" always "auto f(int i) {\n    auto x = i % 2;\n    return x;\n}\n"
Line 7008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7008 always 7008
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7008 always 7008
  code always "auto f(int i) {\n    auto x = i % 2;\n    return x;\n}\n"
  3U always 3
  2 always 2
Line 7010
  = always "auto f(int i) {\n    auto x = !(i % 2);\n    return x;\n}\n"
  "auto f(int i) {\n    auto x = !(i % 2);\n    return x;\n}\n" always "auto f(int i) {\n    auto x = !(i % 2);\n    return x;\n}\n"
Line 7014
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7014 always 7014
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7014 always 7014
  code always "auto f(int i) {\n    auto x = !(i % 2);\n    return x;\n}\n"
  3U always 3
  0 always 0
Line 7015
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7015 always 7015
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7015 always 7015
  3U always 3
  1 always 1
Line 7022
  = always "int f(const std::string &str) {\n    int x = str.c_str();\n    return x;\n}\n"
  "int f(const std::string &str) {\n    int x = str.c_str();\n    return x;\n}\n" always "int f(const std::string &str) {\n    int x = str.c_str();\n    return x;\n}\n"
Line 7026
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7026 always 7026
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7026 always 7026
  code always "int f(const std::string &str) {\n    int x = str.c_str();\n    return x;\n}\n"
  3U always 3
  0 always 0
Line 7028
  = always "int f(const std::string_view &str) {\n    int x = str.c_str();\n    return x;\n}\n"
  "int f(const std::string_view &str) {\n    int x = str.c_str();\n    return x;\n}\n" always "int f(const std::string_view &str) {\n    int x = str.c_str();\n    return x;\n}\n"
Line 7032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7032 always 7032
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7032 always 7032
  code always "int f(const std::string_view &str) {\n    int x = str.c_str();\n    return x;\n}\n"
  3U always 3
  0 always 0
Line 7034
  = always "auto f() {\n    std::shared_ptr<int> x = std::make_shared<int>(1);\n    return x;\n}\n"
  "auto f() {\n    std::shared_ptr<int> x = std::make_shared<int>(1);\n    return x;\n}\n" always "auto f() {\n    std::shared_ptr<int> x = std::make_shared<int>(1);\n    return x;\n}\n"
Line 7038
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7038 always 7038
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7038 always 7038
  code always "auto f() {\n    std::shared_ptr<int> x = std::make_shared<int>(1);\n    return x;\n}\n"
  3U always 3
  0 always 0
Line 7040
  = always "auto f() {\n    std::unique_ptr<int> x = std::make_unique<int>(1);\n    return x;\n}\n"
  "auto f() {\n    std::unique_ptr<int> x = std::make_unique<int>(1);\n    return x;\n}\n" always "auto f() {\n    std::unique_ptr<int> x = std::make_unique<int>(1);\n    return x;\n}\n"
Line 7044
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7044 always 7044
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7044 always 7044
  code always "auto f() {\n    std::unique_ptr<int> x = std::make_unique<int>(1);\n    return x;\n}\n"
  3U always 3
  0 always 0
Line 7046
  = always "struct A {\n    A* f() {\n        A* x = this;\n        return x;\n    }\n};\n"
  "struct A {\n    A* f() {\n        A* x = this;\n        return x;\n    }\n};\n" always "struct A {\n    A* f() {\n        A* x = this;\n        return x;\n    }\n};\n"
Line 7052
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7052 always 7052
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7052 always 7052
  code always "struct A {\n    A* f() {\n        A* x = this;\n        return x;\n    }\n};\n"
  4U always 4
  0 always 0
Line 7058
  = always "int f(int i) {\n    int j = i;\n    int x = i;\n    return x;\n}\n"
  "int f(int i) {\n    int j = i;\n    int x = i;\n    return x;\n}\n" always "int f(int i) {\n    int j = i;\n    int x = i;\n    return x;\n}\n"
Line 7063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7063 always 7063
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7063 always 7063
  code always "int f(int i) {\n    int j = i;\n    int x = i;\n    return x;\n}\n"
  4U always 4
  "j" always "j"
  0 always 0
Line 7064
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7064 always 7064
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7064 always 7064
  4U always 4
  "i" always "i"
  0 always 0
Line 7066
  = always "int f(int i) {\n    int j = i;\n    int x = j;\n    return x;\n}\n"
  "int f(int i) {\n    int j = i;\n    int x = j;\n    return x;\n}\n" always "int f(int i) {\n    int j = i;\n    int x = j;\n    return x;\n}\n"
Line 7071
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7071 always 7071
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7071 always 7071
  code always "int f(int i) {\n    int j = i;\n    int x = j;\n    return x;\n}\n"
  4U always 4
  "i" always "i"
  0 always 0
Line 7072
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7072 always 7072
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7072 always 7072
  4U always 4
  "j" always "j"
  0 always 0
Line 7074
  = always "void g(int&);\nint f(int i) {\n    int j = i;\n    g(i);\n    int x = i;\n    return x;\n}\n"
  "void g(int&);\nint f(int i) {\n    int j = i;\n    g(i);\n    int x = i;\n    return x;\n}\n" always "void g(int&);\nint f(int i) {\n    int j = i;\n    g(i);\n    int x = i;\n    return x;\n}\n"
Line 7081
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7081 always 7081
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7081 always 7081
  code always "void g(int&);\nint f(int i) {\n    int j = i;\n    g(i);\n    int x = i;\n    return x;\n}\n"
  6U always 6
  "i" always "i"
  0 always 0
Line 7082
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7082 always 7082
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7082 always 7082
  6U always 6
  "j" always "j"
  0 always 0
Line 7084
  = always "int f(int i) {\n    int j = i;\n    j++;\n    int x = i == j;\n    return x;\n}\n"
  "int f(int i) {\n    int j = i;\n    j++;\n    int x = i == j;\n    return x;\n}\n" always "int f(int i) {\n    int j = i;\n    j++;\n    int x = i == j;\n    return x;\n}\n"
Line 7090
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7090 always 7090
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7090 always 7090
  code always "int f(int i) {\n    int j = i;\n    j++;\n    int x = i == j;\n    return x;\n}\n"
  5U always 5
  0 always 0
Line 7092
  = always "int f(int i) {\n    int j = i;\n    i++;\n    int x = i - j;\n    return x;\n}\n"
  "int f(int i) {\n    int j = i;\n    i++;\n    int x = i - j;\n    return x;\n}\n" always "int f(int i) {\n    int j = i;\n    i++;\n    int x = i - j;\n    return x;\n}\n"
Line 7098
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7098 always 7098
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7098 always 7098
  code always "int f(int i) {\n    int j = i;\n    i++;\n    int x = i - j;\n    return x;\n}\n"
  5U always 5
  1 always 1
Line 7100
  = always "int f(int i) {\n    int j = i;\n    i++;\n    int x = i > j;\n    return x;\n}\n"
  "int f(int i) {\n    int j = i;\n    i++;\n    int x = i > j;\n    return x;\n}\n" always "int f(int i) {\n    int j = i;\n    i++;\n    int x = i > j;\n    return x;\n}\n"
Line 7106
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7106 always 7106
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7106 always 7106
  code always "int f(int i) {\n    int j = i;\n    i++;\n    int x = i > j;\n    return x;\n}\n"
  5U always 5
  1 always 1
Line 7108
  = always "int f(int i) {\n    int j = i;\n    j++;\n    int x = j > i;\n    return x;\n}\n"
  "int f(int i) {\n    int j = i;\n    j++;\n    int x = j > i;\n    return x;\n}\n" always "int f(int i) {\n    int j = i;\n    j++;\n    int x = j > i;\n    return x;\n}\n"
Line 7114
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7114 always 7114
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7114 always 7114
  code always "int f(int i) {\n    int j = i;\n    j++;\n    int x = j > i;\n    return x;\n}\n"
  5U always 5
  1 always 1
Line 7116
  = always "int f(int i) {\n    int j = i++;\n    int x = i++;\n    return x;\n}\n"
  "int f(int i) {\n    int j = i++;\n    int x = i++;\n    return x;\n}\n" always "int f(int i) {\n    int j = i++;\n    int x = i++;\n    return x;\n}\n"
Line 7121
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7121 always 7121
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7121 always 7121
  code always "int f(int i) {\n    int j = i++;\n    int x = i++;\n    return x;\n}\n"
  4U always 4
  "i++" always "i++"
  0 always 0
Line 7123
  = always "float foo() {\n    float f = 1.0f;\n    float x = f;\n    return x;\n}\n"
  "float foo() {\n    float f = 1.0f;\n    float x = f;\n    return x;\n}\n" always "float foo() {\n    float f = 1.0f;\n    float x = f;\n    return x;\n}\n"
Line 7128
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7128 always 7128
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7128 always 7128
  code always "float foo() {\n    float f = 1.0f;\n    float x = f;\n    return x;\n}\n"
  4U always 4
  "1.0f" always "1.0f"
  0 always 0
Line 7130
  = always "int foo(float f) {\n    float g = f;\n    int x = f == g;\n    return x;\n}\n"
  "int foo(float f) {\n    float g = f;\n    int x = f == g;\n    return x;\n}\n" always "int foo(float f) {\n    float g = f;\n    int x = f == g;\n    return x;\n}\n"
Line 7135
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7135 always 7135
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7135 always 7135
  code always "int foo(float f) {\n    float g = f;\n    int x = f == g;\n    return x;\n}\n"
  4U always 4
  1 always 1
Line 7137
  = always "int f(int i) {\n  for(int j = i;;j++) {\n    int x = j;\n    return x;\n  }\n  return 0;\n}\n"
  "int f(int i) {\n  for(int j = i;;j++) {\n    int x = j;\n    return x;\n  }\n  return 0;\n}\n" always "int f(int i) {\n  for(int j = i;;j++) {\n    int x = j;\n    return x;\n  }\n  return 0;\n}\n"
Line 7144
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7144 always 7144
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7144 always 7144
  code always "int f(int i) {\n  for(int j = i;;j++) {\n    int x = j;\n    return x;\n  }\n  return 0;\n}\n"
  4U always 4
  "i" always "i"
  0 always 0
Line 7145
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7145 always 7145
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7145 always 7145
  4U always 4
  "i" always "i"
  1 always 1
Line 7146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7146 always 7146
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7146 always 7146
  4U always 4
  "j" always "j"
  0 always 0
Line 7148
  = always "void f(int x) {\n  int y = x + 1;\n  return x;\n}\n"
  "void f(int x) {\n  int y = x + 1;\n  return x;\n}\n" always "void f(int x) {\n  int y = x + 1;\n  return x;\n}\n"
Line 7152
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7152 always 7152
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7152 always 7152
  code always "void f(int x) {\n  int y = x + 1;\n  return x;\n}\n"
  3U always 3
  "y" always "y"
  0 always 0
Line 7153
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7153 always 7153
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7153 always 7153
  3U always 3
  "y" always "y"
  -1 always -1
Line 7155
  = always "void f(int x) {\n  int y = x * 2;\n  return x;\n}\n"
  "void f(int x) {\n  int y = x * 2;\n  return x;\n}\n" always "void f(int x) {\n  int y = x * 2;\n  return x;\n}\n"
Line 7159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7159 always 7159
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7159 always 7159
  code always "void f(int x) {\n  int y = x * 2;\n  return x;\n}\n"
  3U always 3
  "y" always "y"
  0 always 0
Line 7161
  = always "int f(int i, int j) {\n    if (i == j) {\n        int x = i - j;\n        return x;\n    }\n    return 0;\n}\n"
  "int f(int i, int j) {\n    if (i == j) {\n        int x = i - j;\n        return x;\n    }\n    return 0;\n}\n" always "int f(int i, int j) {\n    if (i == j) {\n        int x = i - j;\n        return x;\n    }\n    return 0;\n}\n"
Line 7168
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7168 always 7168
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7168 always 7168
  code always "int f(int i, int j) {\n    if (i == j) {\n        int x = i - j;\n        return x;\n    }\n    return 0;\n}\n"
  4U always 4
  0 always 0
Line 7170
  = always "void f(int x, int y) {\n    if (x == y) {\n        int a = x;\n    }\n}"
  "void f(int x, int y) {\n    if (x == y) {\n        int a = x;\n    }\n}" always "void f(int x, int y) {\n    if (x == y) {\n        int a = x;\n    }\n}"
Line 7175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7175 always 7175
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7175 always 7175
  code always "void f(int x, int y) {\n    if (x == y) {\n        int a = x;\n    }\n}"
  3U always 3
  "y" always "y"
  0 always 0
Line 7177
  = always "void f(int x, int y) {\n    if (x != y) {\n        int a = x;\n    }\n}"
  "void f(int x, int y) {\n    if (x != y) {\n        int a = x;\n    }\n}" always "void f(int x, int y) {\n    if (x != y) {\n        int a = x;\n    }\n}"
Line 7182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7182 always 7182
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7182 always 7182
  code always "void f(int x, int y) {\n    if (x != y) {\n        int a = x;\n    }\n}"
  3U always 3
  "y" always "y"
  0 always 0
Line 7184
  = always "void f(int x, int y) {\n    if (x < y) {\n        int a = x;\n    }\n}"
  "void f(int x, int y) {\n    if (x < y) {\n        int a = x;\n    }\n}" always "void f(int x, int y) {\n    if (x < y) {\n        int a = x;\n    }\n}"
Line 7189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7189 always 7189
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7189 always 7189
  code always "void f(int x, int y) {\n    if (x < y) {\n        int a = x;\n    }\n}"
  3U always 3
  "y" always "y"
  -1 always -1
Line 7190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7190 always 7190
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7190 always 7190
  3U always 3
  "y" always "y"
  0 always 0
Line 7192
  = always "void f(int x, int y) {\n    if (x <= y) {\n        int a = x;\n    }\n}"
  "void f(int x, int y) {\n    if (x <= y) {\n        int a = x;\n    }\n}" always "void f(int x, int y) {\n    if (x <= y) {\n        int a = x;\n    }\n}"
Line 7197
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7197 always 7197
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7197 always 7197
  code always "void f(int x, int y) {\n    if (x <= y) {\n        int a = x;\n    }\n}"
  3U always 3
  "y" always "y"
  0 always 0
Line 7198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7198 always 7198
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7198 always 7198
  3U always 3
  "y" always "y"
  1 always 1
Line 7200
  = always "void f(int x, int y) {\n    if (x > y) {\n        int a = x;\n    }\n}"
  "void f(int x, int y) {\n    if (x > y) {\n        int a = x;\n    }\n}" always "void f(int x, int y) {\n    if (x > y) {\n        int a = x;\n    }\n}"
Line 7205
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7205 always 7205
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7205 always 7205
  code always "void f(int x, int y) {\n    if (x > y) {\n        int a = x;\n    }\n}"
  3U always 3
  "y" always "y"
  1 always 1
Line 7206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7206 always 7206
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7206 always 7206
  3U always 3
  "y" always "y"
  0 always 0
Line 7208
  = always "void f(int x, int y) {\n    if (x >= y) {\n        int a = x;\n    }\n}"
  "void f(int x, int y) {\n    if (x >= y) {\n        int a = x;\n    }\n}" always "void f(int x, int y) {\n    if (x >= y) {\n        int a = x;\n    }\n}"
Line 7213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7213 always 7213
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7213 always 7213
  code always "void f(int x, int y) {\n    if (x >= y) {\n        int a = x;\n    }\n}"
  3U always 3
  "y" always "y"
  0 always 0
Line 7214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7214 always 7214
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7214 always 7214
  3U always 3
  "y" always "y"
  -1 always -1
Line 7216
  = always "void f(int y) {\n  int x = y - 1;\n  if (y == 1)\n    int a = x;\n}\n"
  "void f(int y) {\n  int x = y - 1;\n  if (y == 1)\n    int a = x;\n}\n" always "void f(int y) {\n  int x = y - 1;\n  if (y == 1)\n    int a = x;\n}\n"
Line 7221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7221 always 7221
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7221 always 7221
  code always "void f(int y) {\n  int x = y - 1;\n  if (y == 1)\n    int a = x;\n}\n"
  4U always 4
  0 always 0
Line 7223
  = always "void f(int y) {\n  int x = y * y;\n  if (y == 2)\n    int a = x;\n}\n"
  "void f(int y) {\n  int x = y * y;\n  if (y == 2)\n    int a = x;\n}\n" always "void f(int y) {\n  int x = y * y;\n  if (y == 2)\n    int a = x;\n}\n"
Line 7228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7228 always 7228
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7228 always 7228
  code always "void f(int y) {\n  int x = y * y;\n  if (y == 2)\n    int a = x;\n}\n"
  4U always 4
  4 always 4
Line 7230
  = always "void f(int x, int y) {\n  if (x == y*y)\n    if (y == 2)\n      int a = x;\n}\n"
  "void f(int x, int y) {\n  if (x == y*y)\n    if (y == 2)\n      int a = x;\n}\n" always "void f(int x, int y) {\n  if (x == y*y)\n    if (y == 2)\n      int a = x;\n}\n"
Line 7235
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7235 always 7235
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7235 always 7235
  code always "void f(int x, int y) {\n  if (x == y*y)\n    if (y == 2)\n      int a = x;\n}\n"
  4U always 4
  4 always 4
Line 7237
  = always "void f(int x, int y) {\n  if (x > y*y)\n    if (y == 2)\n      int a = x;\n}\n"
  "void f(int x, int y) {\n  if (x > y*y)\n    if (y == 2)\n      int a = x;\n}\n" always "void f(int x, int y) {\n  if (x > y*y)\n    if (y == 2)\n      int a = x;\n}\n"
Line 7242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7242 always 7242
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7242 always 7242
  code always "void f(int x, int y) {\n  if (x > y*y)\n    if (y == 2)\n      int a = x;\n}\n"
  4U always 4
  4 always 4
Line 7244
  = always "void f(int x, int y) {\n  if (x != y*y)\n    if (y == 2)\n      int a = x;\n}\n"
  "void f(int x, int y) {\n  if (x != y*y)\n    if (y == 2)\n      int a = x;\n}\n" always "void f(int x, int y) {\n  if (x != y*y)\n    if (y == 2)\n      int a = x;\n}\n"
Line 7249
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7249 always 7249
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7249 always 7249
  code always "void f(int x, int y) {\n  if (x != y*y)\n    if (y == 2)\n      int a = x;\n}\n"
  4U always 4
  4 always 4
Line 7251
  = always "void f(int x, int y) {\n  if (x >= y*y)\n    if (y == 2)\n      int a = x;\n}\n"
  "void f(int x, int y) {\n  if (x >= y*y)\n    if (y == 2)\n      int a = x;\n}\n" always "void f(int x, int y) {\n  if (x >= y*y)\n    if (y == 2)\n      int a = x;\n}\n"
Line 7256
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7256 always 7256
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7256 always 7256
  code always "void f(int x, int y) {\n  if (x >= y*y)\n    if (y == 2)\n      int a = x;\n}\n"
  4U always 4
  3 always 3
Line 7258
  = always "void f(int x, int y) {\n  if (x == y*y)\n    if (y != 2)\n      int a = x;\n}\n"
  "void f(int x, int y) {\n  if (x == y*y)\n    if (y != 2)\n      int a = x;\n}\n" always "void f(int x, int y) {\n  if (x == y*y)\n    if (y != 2)\n      int a = x;\n}\n"
Line 7263
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7263 always 7263
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7263 always 7263
  code always "void f(int x, int y) {\n  if (x == y*y)\n    if (y != 2)\n      int a = x;\n}\n"
  4U always 4
  4 always 4
Line 7265
  = always "void f(int x, int y) {\n  if (x == y*y)\n    if (y > 2)\n      int a = x;\n}\n"
  "void f(int x, int y) {\n  if (x == y*y)\n    if (y > 2)\n      int a = x;\n}\n" always "void f(int x, int y) {\n  if (x == y*y)\n    if (y > 2)\n      int a = x;\n}\n"
Line 7270
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7270 always 7270
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7270 always 7270
  code always "void f(int x, int y) {\n  if (x == y*y)\n    if (y > 2)\n      int a = x;\n}\n"
  4U always 4
  9 always 9
Line 7272
  = always "struct A {\n    A* b();\n    int c() const;\n};\nvoid f(A *d) {\n    if (!d || d->c() != 1)\n        return;\n    A * y = d;\n    d = d->b();\n    A * x = d;\n    A* z = x;\n}\n"
  "struct A {\n    A* b();\n    int c() const;\n};\nvoid f(A *d) {\n    if (!d || d->c() != 1)\n        return;\n    A * y = d;\n    d = d->b();\n    A * x = d;\n    A* z = x;\n}\n" always "struct A {\n    A* b();\n    int c() const;\n};\nvoid f(A *d) {\n    if (!d || d->c() != 1)\n        return;\n    A * y = d;\n    d = d->b();\n    A * x = d;\n    A* z = x;\n}\n"
Line 7284
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7284 always 7284
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7284 always 7284
  code always "struct A {\n    A* b();\n    int c() const;\n};\nvoid f(A *d) {\n    if (!d || d->c() != 1)\n        return;\n    A * y = d;\n    d = d->b();\n    A * x = d;\n    A* z = x;\n}\n"
  11U always 11
  "d" always "d"
  0 always 0
Line 7285
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7285 always 7285
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7285 always 7285
  11U always 11
  0 always 0
Line 7287
  = always "void f(int * p, int len) {\n    for(int x = 0; x < len; ++x) {\n        p[x] = 1;\n    }\n}\n"
  "void f(int * p, int len) {\n    for(int x = 0; x < len; ++x) {\n        p[x] = 1;\n    }\n}\n" always "void f(int * p, int len) {\n    for(int x = 0; x < len; ++x) {\n        p[x] = 1;\n    }\n}\n"
Line 7292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7292 always 7292
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7292 always 7292
  code always "void f(int * p, int len) {\n    for(int x = 0; x < len; ++x) {\n        p[x] = 1;\n    }\n}\n"
  3U always 3
  "len" always "len"
  -1 always -1
Line 7293
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7293 always 7293
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7293 always 7293
  3U always 3
  "len" always "len"
  0 always 0
Line 7295
  = always "int f(int x) {\n    int i = 64 - x;\n    if(i < 8)\n        return x;\n    return 0;\n}\n"
  "int f(int x) {\n    int i = 64 - x;\n    if(i < 8)\n        return x;\n    return 0;\n}\n" always "int f(int x) {\n    int i = 64 - x;\n    if(i < 8)\n        return x;\n    return 0;\n}\n"
Line 7301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7301 always 7301
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7301 always 7301
  code always "int f(int x) {\n    int i = 64 - x;\n    if(i < 8)\n        return x;\n    return 0;\n}\n"
  4U always 4
  71 always 71
Line 7302
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7302 always 7302
  true always 1
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7302 always 7302
  4U always 4
  56 always 56
Line 7304
  = always "int b(int a) {\n  unsigned long x = a ? 6 : 4;\n  assert(x < 6 && x > 0);\n  return 1 / x;\n}\n"
  "int b(int a) {\n  unsigned long x = a ? 6 : 4;\n  assert(x < 6 && x > 0);\n  return 1 / x;\n}\n" always "int b(int a) {\n  unsigned long x = a ? 6 : 4;\n  assert(x < 6 && x > 0);\n  return 1 / x;\n}\n"
Line 7309
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7309 always 7309
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7309 always 7309
  code always "int b(int a) {\n  unsigned long x = a ? 6 : 4;\n  assert(x < 6 && x > 0);\n  return 1 / x;\n}\n"
  4U always 4
  0 always 0
Line 7311
  = always "void f(int k) {\n  int x = k;\n  int j = k;\n  x--;\n  if (k != 0) {\n    x;\n  }\n}\n"
  "void f(int k) {\n  int x = k;\n  int j = k;\n  x--;\n  if (k != 0) {\n    x;\n  }\n}\n" always "void f(int k) {\n  int x = k;\n  int j = k;\n  x--;\n  if (k != 0) {\n    x;\n  }\n}\n"
Line 7319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7319 always 7319
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7319 always 7319
  code always "void f(int k) {\n  int x = k;\n  int j = k;\n  x--;\n  if (k != 0) {\n    x;\n  }\n}\n"
  6U always 6
  -1 always -1
Line 7320
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7320 always 7320
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7320 always 7320
  6U always 6
  -1 always -1
Line 7322
  = always "char* f() {\n    char *x = malloc(10);\n    return x;\n}\n"
  "char* f() {\n    char *x = malloc(10);\n    return x;\n}\n" always "char* f() {\n    char *x = malloc(10);\n    return x;\n}\n"
Line 7326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7326 always 7326
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7326 always 7326
  code always "char* f() {\n    char *x = malloc(10);\n    return x;\n}\n"
  3U always 3
  "malloc(10)" always "malloc(10)"
  0 always 0
Line 7333
  = always "void f(int a) {\n    int x = a*1;\n    return x;\n}\n"
  "void f(int a) {\n    int x = a*1;\n    return x;\n}\n" always "void f(int a) {\n    int x = a*1;\n    return x;\n}\n"
Line 7337
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7337 always 7337
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7337 always 7337
  code always "void f(int a) {\n    int x = a*1;\n    return x;\n}\n"
  3U always 3
  "a" always "a"
  0 always 0
Line 7339
  = always "void f(int a) {\n    int x = a/1;\n    return x;\n}\n"
  "void f(int a) {\n    int x = a/1;\n    return x;\n}\n" always "void f(int a) {\n    int x = a/1;\n    return x;\n}\n"
Line 7343
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7343 always 7343
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7343 always 7343
  code always "void f(int a) {\n    int x = a/1;\n    return x;\n}\n"
  3U always 3
  "a" always "a"
  0 always 0
Line 7345
  = always "void f(int a) {\n    int x = a+0;\n    return x;\n}\n"
  "void f(int a) {\n    int x = a+0;\n    return x;\n}\n" always "void f(int a) {\n    int x = a+0;\n    return x;\n}\n"
Line 7349
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7349 always 7349
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7349 always 7349
  code always "void f(int a) {\n    int x = a+0;\n    return x;\n}\n"
  3U always 3
  "a" always "a"
  0 always 0
Line 7351
  = always "void f(int a) {\n    int x = a-0;\n    return x;\n}\n"
  "void f(int a) {\n    int x = a-0;\n    return x;\n}\n" always "void f(int a) {\n    int x = a-0;\n    return x;\n}\n"
Line 7355
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7355 always 7355
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7355 always 7355
  code always "void f(int a) {\n    int x = a-0;\n    return x;\n}\n"
  3U always 3
  "a" always "a"
  0 always 0
Line 7357
  = always "void f(int a) {\n    int x = a^0;\n    return x;\n}\n"
  "void f(int a) {\n    int x = a^0;\n    return x;\n}\n" always "void f(int a) {\n    int x = a^0;\n    return x;\n}\n"
Line 7361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7361 always 7361
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7361 always 7361
  code always "void f(int a) {\n    int x = a^0;\n    return x;\n}\n"
  3U always 3
  "a" always "a"
  0 always 0
Line 7363
  = always "void f(int a) {\n    int x = a|0;\n    return x;\n}\n"
  "void f(int a) {\n    int x = a|0;\n    return x;\n}\n" always "void f(int a) {\n    int x = a|0;\n    return x;\n}\n"
Line 7367
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7367 always 7367
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7367 always 7367
  code always "void f(int a) {\n    int x = a|0;\n    return x;\n}\n"
  3U always 3
  "a" always "a"
  0 always 0
Line 7369
  = always "void f(int a) {\n    int x = a>>0;\n    return x;\n}\n"
  "void f(int a) {\n    int x = a>>0;\n    return x;\n}\n" always "void f(int a) {\n    int x = a>>0;\n    return x;\n}\n"
Line 7373
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7373 always 7373
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7373 always 7373
  code always "void f(int a) {\n    int x = a>>0;\n    return x;\n}\n"
  3U always 3
  "a" always "a"
  0 always 0
Line 7375
  = always "void f(int a) {\n    int x = a<<0;\n    return x;\n}\n"
  "void f(int a) {\n    int x = a<<0;\n    return x;\n}\n" always "void f(int a) {\n    int x = a<<0;\n    return x;\n}\n"
Line 7379
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7379 always 7379
  true always 1
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7379 always 7379
  code always "void f(int a) {\n    int x = a<<0;\n    return x;\n}\n"
  3U always 3
  "a" always "a"
  0 always 0
Line 7381
  = always "void f(int a) {\n    int x = 0>>a;\n    return x;\n}\n"
  "void f(int a) {\n    int x = 0>>a;\n    return x;\n}\n" always "void f(int a) {\n    int x = 0>>a;\n    return x;\n}\n"
Line 7385
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7385 always 7385
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7385 always 7385
  code always "void f(int a) {\n    int x = 0>>a;\n    return x;\n}\n"
  3U always 3
  "a" always "a"
  0 always 0
Line 7387
  = always "void f(int a) {\n    int x = 0<<a;\n    return x;\n}\n"
  "void f(int a) {\n    int x = 0<<a;\n    return x;\n}\n" always "void f(int a) {\n    int x = 0<<a;\n    return x;\n}\n"
Line 7391
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7391 always 7391
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7391 always 7391
  code always "void f(int a) {\n    int x = 0<<a;\n    return x;\n}\n"
  3U always 3
  "a" always "a"
  0 always 0
Line 7398
  = always "int* df(int* expr);\nint * f() {\n    std::unique_ptr<int> x;\n    x.reset(df(x.release()));\n    return x;\n}\n"
  "int* df(int* expr);\nint * f() {\n    std::unique_ptr<int> x;\n    x.reset(df(x.release()));\n    return x;\n}\n" always "int* df(int* expr);\nint * f() {\n    std::unique_ptr<int> x;\n    x.reset(df(x.release()));\n    return x;\n}\n"
Line 7404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7404 always 7404
  false always 0
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvalueflow.cpp" always "cppcheck-2.8/test/testvalueflow.cpp"
  7404 always 7404
  code always "int* df(int* expr);\nint * f() {\n    std::unique_ptr<int> x;\n    x.reset(df(x.release()));\n    return x;\n}\n"
  5U always 5
  0 always 0
