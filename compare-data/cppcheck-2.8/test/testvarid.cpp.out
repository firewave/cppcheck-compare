

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073742320 expected@var22 !=@expr1073742321 actual@var23 ) {
62: std ::@expr1073742322 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073742323 expected@var22 ;
64: std ::@expr1073742324 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742325 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742326 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742327 str (@expr1073742328 ) , actualStr@var26 .@expr1073742329 str (@expr1073742330 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742331 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742332 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742333 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742334 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testvarid.cpp

1:
|
29:
30: struct InternalError ;
31:
32:
33: class TestVarID : public TestFixture {
34: public:
35: TestVarID ( ) : TestFixture ( "TestVarID" ) { }
36:
37: private:
38: void run ( ) override {
39: $do ${ $if $(@expr1073742335 $prepareTest $(@expr1073742336 "varid1" $) $) ${ $setVerbose $(@expr1073742337 $false $) $; varid1 $(@expr1073742338 $) $; $} $} $while $(@expr1073742339 $false $) ;
40: $do ${ $if $(@expr1073742340 $prepareTest $(@expr1073742341 "varid2" $) $) ${ $setVerbose $(@expr1073742342 $false $) $; varid2 $(@expr1073742343 $) $; $} $} $while $(@expr1073742344 $false $) ;
41: $do ${ $if $(@expr1073742345 $prepareTest $(@expr1073742346 "varid3" $) $) ${ $setVerbose $(@expr1073742347 $false $) $; varid3 $(@expr1073742348 $) $; $} $} $while $(@expr1073742349 $false $) ;
42: $do ${ $if $(@expr1073742350 $prepareTest $(@expr1073742351 "varid4" $) $) ${ $setVerbose $(@expr1073742352 $false $) $; varid4 $(@expr1073742353 $) $; $} $} $while $(@expr1073742354 $false $) ;
43: $do ${ $if $(@expr1073742355 $prepareTest $(@expr1073742356 "varid5" $) $) ${ $setVerbose $(@expr1073742357 $false $) $; varid5 $(@expr1073742358 $) $; $} $} $while $(@expr1073742359 $false $) ;
44: $do ${ $if $(@expr1073742360 $prepareTest $(@expr1073742361 "varid6" $) $) ${ $setVerbose $(@expr1073742362 $false $) $; varid6 $(@expr1073742363 $) $; $} $} $while $(@expr1073742364 $false $) ;
45: $do ${ $if $(@expr1073742365 $prepareTest $(@expr1073742366 "varid7" $) $) ${ $setVerbose $(@expr1073742367 $false $) $; varid7 $(@expr1073742368 $) $; $} $} $while $(@expr1073742369 $false $) ;
46: $do ${ $if $(@expr1073742370 $prepareTest $(@expr1073742371 "varidReturn1" $) $) ${ $setVerbose $(@expr1073742372 $false $) $; varidReturn1 $(@expr1073742373 $) $; $} $} $while $(@expr1073742374 $false $) ;
47: $do ${ $if $(@expr1073742375 $prepareTest $(@expr1073742376 "varidReturn2" $) $) ${ $setVerbose $(@expr1073742377 $false $) $; varidReturn2 $(@expr1073742378 $) $; $} $} $while $(@expr1073742379 $false $) ;
48: $do ${ $if $(@expr1073742380 $prepareTest $(@expr1073742381 "varid8" $) $) ${ $setVerbose $(@expr1073742382 $false $) $; varid8 $(@expr1073742383 $) $; $} $} $while $(@expr1073742384 $false $) ;
49: $do ${ $if $(@expr1073742385 $prepareTest $(@expr1073742386 "varid9" $) $) ${ $setVerbose $(@expr1073742387 $false $) $; varid9 $(@expr1073742388 $) $; $} $} $while $(@expr1073742389 $false $) ;
50: $do ${ $if $(@expr1073742390 $prepareTest $(@expr1073742391 "varid10" $) $) ${ $setVerbose $(@expr1073742392 $false $) $; varid10 $(@expr1073742393 $) $; $} $} $while $(@expr1073742394 $false $) ;
51: $do ${ $if $(@expr1073742395 $prepareTest $(@expr1073742396 "varid11" $) $) ${ $setVerbose $(@expr1073742397 $false $) $; varid11 $(@expr1073742398 $) $; $} $} $while $(@expr1073742399 $false $) ;
52: $do ${ $if $(@expr1073742400 $prepareTest $(@expr1073742401 "varid12" $) $) ${ $setVerbose $(@expr1073742402 $false $) $; varid12 $(@expr1073742403 $) $; $} $} $while $(@expr1073742404 $false $) ;
53: $do ${ $if $(@expr1073742405 $prepareTest $(@expr1073742406 "varid13" $) $) ${ $setVerbose $(@expr1073742407 $false $) $; varid13 $(@expr1073742408 $) $; $} $} $while $(@expr1073742409 $false $) ;
54: $do ${ $if $(@expr1073742410 $prepareTest $(@expr1073742411 "varid14" $) $) ${ $setVerbose $(@expr1073742412 $false $) $; varid14 $(@expr1073742413 $) $; $} $} $while $(@expr1073742414 $false $) ;
55: $do ${ $if $(@expr1073742415 $prepareTest $(@expr1073742416 "varid15" $) $) ${ $setVerbose $(@expr1073742417 $false $) $; varid15 $(@expr1073742418 $) $; $} $} $while $(@expr1073742419 $false $) ;
56: $do ${ $if $(@expr1073742420 $prepareTest $(@expr1073742421 "varid16" $) $) ${ $setVerbose $(@expr1073742422 $false $) $; varid16 $(@expr1073742423 $) $; $} $} $while $(@expr1073742424 $false $) ;
57: $do ${ $if $(@expr1073742425 $prepareTest $(@expr1073742426 "varid17" $) $) ${ $setVerbose $(@expr1073742427 $false $) $; varid17 $(@expr1073742428 $) $; $} $} $while $(@expr1073742429 $false $) ;
58: $do ${ $if $(@expr1073742430 $prepareTest $(@expr1073742431 "varid18" $) $) ${ $setVerbose $(@expr1073742432 $false $) $; varid18 $(@expr1073742433 $) $; $} $} $while $(@expr1073742434 $false $) ;
59: $do ${ $if $(@expr1073742435 $prepareTest $(@expr1073742436 "varid19" $) $) ${ $setVerbose $(@expr1073742437 $false $) $; varid19 $(@expr1073742438 $) $; $} $} $while $(@expr1073742439 $false $) ;
60: $do ${ $if $(@expr1073742440 $prepareTest $(@expr1073742441 "varid20" $) $) ${ $setVerbose $(@expr1073742442 $false $) $; varid20 $(@expr1073742443 $) $; $} $} $while $(@expr1073742444 $false $) ;
61: $do ${ $if $(@expr1073742445 $prepareTest $(@expr1073742446 "varid24" $) $) ${ $setVerbose $(@expr1073742447 $false $) $; varid24 $(@expr1073742448 $) $; $} $} $while $(@expr1073742449 $false $) ;
62: $do ${ $if $(@expr1073742450 $prepareTest $(@expr1073742451 "varid25" $) $) ${ $setVerbose $(@expr1073742452 $false $) $; varid25 $(@expr1073742453 $) $; $} $} $while $(@expr1073742454 $false $) ;
63: $do ${ $if $(@expr1073742455 $prepareTest $(@expr1073742456 "varid26" $) $) ${ $setVerbose $(@expr1073742457 $false $) $; varid26 $(@expr1073742458 $) $; $} $} $while $(@expr1073742459 $false $) ;
64: $do ${ $if $(@expr1073742460 $prepareTest $(@expr1073742461 "varid27" $) $) ${ $setVerbose $(@expr1073742462 $false $) $; varid27 $(@expr1073742463 $) $; $} $} $while $(@expr1073742464 $false $) ;
65: $do ${ $if $(@expr1073742465 $prepareTest $(@expr1073742466 "varid28" $) $) ${ $setVerbose $(@expr1073742467 $false $) $; varid28 $(@expr1073742468 $) $; $} $} $while $(@expr1073742469 $false $) ;
66: $do ${ $if $(@expr1073742470 $prepareTest $(@expr1073742471 "varid29" $) $) ${ $setVerbose $(@expr1073742472 $false $) $; varid29 $(@expr1073742473 $) $; $} $} $while $(@expr1073742474 $false $) ;
67: $do ${ $if $(@expr1073742475 $prepareTest $(@expr1073742476 "varid30" $) $) ${ $setVerbose $(@expr1073742477 $false $) $; varid30 $(@expr1073742478 $) $; $} $} $while $(@expr1073742479 $false $) ;
68: $do ${ $if $(@expr1073742480 $prepareTest $(@expr1073742481 "varid34" $) $) ${ $setVerbose $(@expr1073742482 $false $) $; varid34 $(@expr1073742483 $) $; $} $} $while $(@expr1073742484 $false $) ;
69: $do ${ $if $(@expr1073742485 $prepareTest $(@expr1073742486 "varid35" $) $) ${ $setVerbose $(@expr1073742487 $false $) $; varid35 $(@expr1073742488 $) $; $} $} $while $(@expr1073742489 $false $) ;
70: $do ${ $if $(@expr1073742490 $prepareTest $(@expr1073742491 "varid36" $) $) ${ $setVerbose $(@expr1073742492 $false $) $; varid36 $(@expr1073742493 $) $; $} $} $while $(@expr1073742494 $false $) ;
71: $do ${ $if $(@expr1073742495 $prepareTest $(@expr1073742496 "varid37" $) $) ${ $setVerbose $(@expr1073742497 $false $) $; varid37 $(@expr1073742498 $) $; $} $} $while $(@expr1073742499 $false $) ;
72: $do ${ $if $(@expr1073742500 $prepareTest $(@expr1073742501 "varid38" $) $) ${ $setVerbose $(@expr1073742502 $false $) $; varid38 $(@expr1073742503 $) $; $} $} $while $(@expr1073742504 $false $) ;
73: $do ${ $if $(@expr1073742505 $prepareTest $(@expr1073742506 "varid39" $) $) ${ $setVerbose $(@expr1073742507 $false $) $; varid39 $(@expr1073742508 $) $; $} $} $while $(@expr1073742509 $false $) ;
74: $do ${ $if $(@expr1073742510 $prepareTest $(@expr1073742511 "varid40" $) $) ${ $setVerbose $(@expr1073742512 $false $) $; varid40 $(@expr1073742513 $) $; $} $} $while $(@expr1073742514 $false $) ;
75: $do ${ $if $(@expr1073742515 $prepareTest $(@expr1073742516 "varid41" $) $) ${ $setVerbose $(@expr1073742517 $false $) $; varid41 $(@expr1073742518 $) $; $} $} $while $(@expr1073742519 $false $) ;
76: $do ${ $if $(@expr1073742520 $prepareTest $(@expr1073742521 "varid42" $) $) ${ $setVerbose $(@expr1073742522 $false $) $; varid42 $(@expr1073742523 $) $; $} $} $while $(@expr1073742524 $false $) ;
77: $do ${ $if $(@expr1073742525 $prepareTest $(@expr1073742526 "varid43" $) $) ${ $setVerbose $(@expr1073742527 $false $) $; varid43 $(@expr1073742528 $) $; $} $} $while $(@expr1073742529 $false $) ;
78: $do ${ $if $(@expr1073742530 $prepareTest $(@expr1073742531 "varid44" $) $) ${ $setVerbose $(@expr1073742532 $false $) $; varid44 $(@expr1073742533 $) $; $} $} $while $(@expr1073742534 $false $) ;
79: $do ${ $if $(@expr1073742535 $prepareTest $(@expr1073742536 "varid45" $) $) ${ $setVerbose $(@expr1073742537 $false $) $; varid45 $(@expr1073742538 $) $; $} $} $while $(@expr1073742539 $false $) ;
80: $do ${ $if $(@expr1073742540 $prepareTest $(@expr1073742541 "varid46" $) $) ${ $setVerbose $(@expr1073742542 $false $) $; varid46 $(@expr1073742543 $) $; $} $} $while $(@expr1073742544 $false $) ;
81: $do ${ $if $(@expr1073742545 $prepareTest $(@expr1073742546 "varid47" $) $) ${ $setVerbose $(@expr1073742547 $false $) $; varid47 $(@expr1073742548 $) $; $} $} $while $(@expr1073742549 $false $) ;
82: $do ${ $if $(@expr1073742550 $prepareTest $(@expr1073742551 "varid48" $) $) ${ $setVerbose $(@expr1073742552 $false $) $; varid48 $(@expr1073742553 $) $; $} $} $while $(@expr1073742554 $false $) ;
83: $do ${ $if $(@expr1073742555 $prepareTest $(@expr1073742556 "varid49" $) $) ${ $setVerbose $(@expr1073742557 $false $) $; varid49 $(@expr1073742558 $) $; $} $} $while $(@expr1073742559 $false $) ;
84: $do ${ $if $(@expr1073742560 $prepareTest $(@expr1073742561 "varid50" $) $) ${ $setVerbose $(@expr1073742562 $false $) $; varid50 $(@expr1073742563 $) $; $} $} $while $(@expr1073742564 $false $) ;
85: $do ${ $if $(@expr1073742565 $prepareTest $(@expr1073742566 "varid51" $) $) ${ $setVerbose $(@expr1073742567 $false $) $; varid51 $(@expr1073742568 $) $; $} $} $while $(@expr1073742569 $false $) ;
86: $do ${ $if $(@expr1073742570 $prepareTest $(@expr1073742571 "varid52" $) $) ${ $setVerbose $(@expr1073742572 $false $) $; varid52 $(@expr1073742573 $) $; $} $} $while $(@expr1073742574 $false $) ;
87: $do ${ $if $(@expr1073742575 $prepareTest $(@expr1073742576 "varid53" $) $) ${ $setVerbose $(@expr1073742577 $false $) $; varid53 $(@expr1073742578 $) $; $} $} $while $(@expr1073742579 $false $) ;
88: $do ${ $if $(@expr1073742580 $prepareTest $(@expr1073742581 "varid54" $) $) ${ $setVerbose $(@expr1073742582 $false $) $; varid54 $(@expr1073742583 $) $; $} $} $while $(@expr1073742584 $false $) ;
89: $do ${ $if $(@expr1073742585 $prepareTest $(@expr1073742586 "varid55" $) $) ${ $setVerbose $(@expr1073742587 $false $) $; varid55 $(@expr1073742588 $) $; $} $} $while $(@expr1073742589 $false $) ;
90: $do ${ $if $(@expr1073742590 $prepareTest $(@expr1073742591 "varid56" $) $) ${ $setVerbose $(@expr1073742592 $false $) $; varid56 $(@expr1073742593 $) $; $} $} $while $(@expr1073742594 $false $) ;
91: $do ${ $if $(@expr1073742595 $prepareTest $(@expr1073742596 "varid57" $) $) ${ $setVerbose $(@expr1073742597 $false $) $; varid57 $(@expr1073742598 $) $; $} $} $while $(@expr1073742599 $false $) ;
92: $do ${ $if $(@expr1073742600 $prepareTest $(@expr1073742601 "varid58" $) $) ${ $setVerbose $(@expr1073742602 $false $) $; varid58 $(@expr1073742603 $) $; $} $} $while $(@expr1073742604 $false $) ;
93: $do ${ $if $(@expr1073742605 $prepareTest $(@expr1073742606 "varid59" $) $) ${ $setVerbose $(@expr1073742607 $false $) $; varid59 $(@expr1073742608 $) $; $} $} $while $(@expr1073742609 $false $) ;
94: $do ${ $if $(@expr1073742610 $prepareTest $(@expr1073742611 "varid60" $) $) ${ $setVerbose $(@expr1073742612 $false $) $; varid60 $(@expr1073742613 $) $; $} $} $while $(@expr1073742614 $false $) ;
95: $do ${ $if $(@expr1073742615 $prepareTest $(@expr1073742616 "varid61" $) $) ${ $setVerbose $(@expr1073742617 $false $) $; varid61 $(@expr1073742618 $) $; $} $} $while $(@expr1073742619 $false $) ;
96: $do ${ $if $(@expr1073742620 $prepareTest $(@expr1073742621 "varid62" $) $) ${ $setVerbose $(@expr1073742622 $false $) $; varid62 $(@expr1073742623 $) $; $} $} $while $(@expr1073742624 $false $) ;
97: $do ${ $if $(@expr1073742625 $prepareTest $(@expr1073742626 "varid63" $) $) ${ $setVerbose $(@expr1073742627 $false $) $; varid63 $(@expr1073742628 $) $; $} $} $while $(@expr1073742629 $false $) ;
98: $do ${ $if $(@expr1073742630 $prepareTest $(@expr1073742631 "varid64" $) $) ${ $setVerbose $(@expr1073742632 $false $) $; varid64 $(@expr1073742633 $) $; $} $} $while $(@expr1073742634 $false $) ;
99: $do ${ $if $(@expr1073742635 $prepareTest $(@expr1073742636 "varid65" $) $) ${ $setVerbose $(@expr1073742637 $false $) $; varid65 $(@expr1073742638 $) $; $} $} $while $(@expr1073742639 $false $) ;
100: $do ${ $if $(@expr1073742640 $prepareTest $(@expr1073742641 "varid_for_1" $) $) ${ $setVerbose $(@expr1073742642 $false $) $; varid_for_1 $(@expr1073742643 $) $; $} $} $while $(@expr1073742644 $false $) ;
101: $do ${ $if $(@expr1073742645 $prepareTest $(@expr1073742646 "varid_for_2" $) $) ${ $setVerbose $(@expr1073742647 $false $) $; varid_for_2 $(@expr1073742648 $) $; $} $} $while $(@expr1073742649 $false $) ;
102: $do ${ $if $(@expr1073742650 $prepareTest $(@expr1073742651 "varid_cpp_keywords_in_c_code" $) $) ${ $setVerbose $(@expr1073742652 $false $) $; varid_cpp_keywords_in_c_code $(@expr1073742653 $) $; $} $} $while $(@expr1073742654 $false $) ;
103: $do ${ $if $(@expr1073742655 $prepareTest $(@expr1073742656 "varid_cpp_keywords_in_c_code2" $) $) ${ $setVerbose $(@expr1073742657 $false $) $; varid_cpp_keywords_in_c_code2 $(@expr1073742658 $) $; $} $} $while $(@expr1073742659 $false $) ;
104: $do ${ $if $(@expr1073742660 $prepareTest $(@expr1073742661 "varidFunctionCall1" $) $) ${ $setVerbose $(@expr1073742662 $false $) $; varidFunctionCall1 $(@expr1073742663 $) $; $} $} $while $(@expr1073742664 $false $) ;
105: $do ${ $if $(@expr1073742665 $prepareTest $(@expr1073742666 "varidFunctionCall2" $) $) ${ $setVerbose $(@expr1073742667 $false $) $; varidFunctionCall2 $(@expr1073742668 $) $; $} $} $while $(@expr1073742669 $false $) ;
106: $do ${ $if $(@expr1073742670 $prepareTest $(@expr1073742671 "varidFunctionCall3" $) $) ${ $setVerbose $(@expr1073742672 $false $) $; varidFunctionCall3 $(@expr1073742673 $) $; $} $} $while $(@expr1073742674 $false $) ;
107: $do ${ $if $(@expr1073742675 $prepareTest $(@expr1073742676 "varidFunctionCall4" $) $) ${ $setVerbose $(@expr1073742677 $false $) $; varidFunctionCall4 $(@expr1073742678 $) $; $} $} $while $(@expr1073742679 $false $) ;
108: $do ${ $if $(@expr1073742680 $prepareTest $(@expr1073742681 "varidFunctionCall5" $) $) ${ $setVerbose $(@expr1073742682 $false $) $; varidFunctionCall5 $(@expr1073742683 $) $; $} $} $while $(@expr1073742684 $false $) ;
109: $do ${ $if $(@expr1073742685 $prepareTest $(@expr1073742686 "varidStl" $) $) ${ $setVerbose $(@expr1073742687 $false $) $; varidStl $(@expr1073742688 $) $; $} $} $while $(@expr1073742689 $false $) ;
110: $do ${ $if $(@expr1073742690 $prepareTest $(@expr1073742691 "varidStl2" $) $) ${ $setVerbose $(@expr1073742692 $false $) $; varidStl2 $(@expr1073742693 $) $; $} $} $while $(@expr1073742694 $false $) ;
111: $do ${ $if $(@expr1073742695 $prepareTest $(@expr1073742696 "varid_newauto" $) $) ${ $setVerbose $(@expr1073742697 $false $) $; varid_newauto $(@expr1073742698 $) $; $} $} $while $(@expr1073742699 $false $) ;
112: $do ${ $if $(@expr1073742700 $prepareTest $(@expr1073742701 "varid_delete" $) $) ${ $setVerbose $(@expr1073742702 $false $) $; varid_delete $(@expr1073742703 $) $; $} $} $while $(@expr1073742704 $false $) ;
113: $do ${ $if $(@expr1073742705 $prepareTest $(@expr1073742706 "varid_functions" $) $) ${ $setVerbose $(@expr1073742707 $false $) $; varid_functions $(@expr1073742708 $) $; $} $} $while $(@expr1073742709 $false $) ;
114: $do ${ $if $(@expr1073742710 $prepareTest $(@expr1073742711 "varid_sizeof" $) $) ${ $setVerbose $(@expr1073742712 $false $) $; varid_sizeof $(@expr1073742713 $) $; $} $} $while $(@expr1073742714 $false $) ;
115: $do ${ $if $(@expr1073742715 $prepareTest $(@expr1073742716 "varid_reference_to_containers" $) $) ${ $setVerbose $(@expr1073742717 $false $) $; varid_reference_to_containers $(@expr1073742718 $) $; $} $} $while $(@expr1073742719 $false $) ;
116: $do ${ $if $(@expr1073742720 $prepareTest $(@expr1073742721 "varid_in_class1" $) $) ${ $setVerbose $(@expr1073742722 $false $) $; varid_in_class1 $(@expr1073742723 $) $; $} $} $while $(@expr1073742724 $false $) ;
117: $do ${ $if $(@expr1073742725 $prepareTest $(@expr1073742726 "varid_in_class2" $) $) ${ $setVerbose $(@expr1073742727 $false $) $; varid_in_class2 $(@expr1073742728 $) $; $} $} $while $(@expr1073742729 $false $) ;
118: $do ${ $if $(@expr1073742730 $prepareTest $(@expr1073742731 "varid_in_class3" $) $) ${ $setVerbose $(@expr1073742732 $false $) $; varid_in_class3 $(@expr1073742733 $) $; $} $} $while $(@expr1073742734 $false $) ;
119: $do ${ $if $(@expr1073742735 $prepareTest $(@expr1073742736 "varid_in_class4" $) $) ${ $setVerbose $(@expr1073742737 $false $) $; varid_in_class4 $(@expr1073742738 $) $; $} $} $while $(@expr1073742739 $false $) ;
120: $do ${ $if $(@expr1073742740 $prepareTest $(@expr1073742741 "varid_in_class5" $) $) ${ $setVerbose $(@expr1073742742 $false $) $; varid_in_class5 $(@expr1073742743 $) $; $} $} $while $(@expr1073742744 $false $) ;
121: $do ${ $if $(@expr1073742745 $prepareTest $(@expr1073742746 "varid_in_class6" $) $) ${ $setVerbose $(@expr1073742747 $false $) $; varid_in_class6 $(@expr1073742748 $) $; $} $} $while $(@expr1073742749 $false $) ;
122: $do ${ $if $(@expr1073742750 $prepareTest $(@expr1073742751 "varid_in_class7" $) $) ${ $setVerbose $(@expr1073742752 $false $) $; varid_in_class7 $(@expr1073742753 $) $; $} $} $while $(@expr1073742754 $false $) ;
123: $do ${ $if $(@expr1073742755 $prepareTest $(@expr1073742756 "varid_in_class8" $) $) ${ $setVerbose $(@expr1073742757 $false $) $; varid_in_class8 $(@expr1073742758 $) $; $} $} $while $(@expr1073742759 $false $) ;
124: $do ${ $if $(@expr1073742760 $prepareTest $(@expr1073742761 "varid_in_class9" $) $) ${ $setVerbose $(@expr1073742762 $false $) $; varid_in_class9 $(@expr1073742763 $) $; $} $} $while $(@expr1073742764 $false $) ;
125: $do ${ $if $(@expr1073742765 $prepareTest $(@expr1073742766 "varid_in_class10" $) $) ${ $setVerbose $(@expr1073742767 $false $) $; varid_in_class10 $(@expr1073742768 $) $; $} $} $while $(@expr1073742769 $false $) ;
126: $do ${ $if $(@expr1073742770 $prepareTest $(@expr1073742771 "varid_in_class11" $) $) ${ $setVerbose $(@expr1073742772 $false $) $; varid_in_class11 $(@expr1073742773 $) $; $} $} $while $(@expr1073742774 $false $) ;
127: $do ${ $if $(@expr1073742775 $prepareTest $(@expr1073742776 "varid_in_class12" $) $) ${ $setVerbose $(@expr1073742777 $false $) $; varid_in_class12 $(@expr1073742778 $) $; $} $} $while $(@expr1073742779 $false $) ;
128: $do ${ $if $(@expr1073742780 $prepareTest $(@expr1073742781 "varid_in_class13" $) $) ${ $setVerbose $(@expr1073742782 $false $) $; varid_in_class13 $(@expr1073742783 $) $; $} $} $while $(@expr1073742784 $false $) ;
129: $do ${ $if $(@expr1073742785 $prepareTest $(@expr1073742786 "varid_in_class14" $) $) ${ $setVerbose $(@expr1073742787 $false $) $; varid_in_class14 $(@expr1073742788 $) $; $} $} $while $(@expr1073742789 $false $) ;
130: $do ${ $if $(@expr1073742790 $prepareTest $(@expr1073742791 "varid_in_class15" $) $) ${ $setVerbose $(@expr1073742792 $false $) $; varid_in_class15 $(@expr1073742793 $) $; $} $} $while $(@expr1073742794 $false $) ;
131: $do ${ $if $(@expr1073742795 $prepareTest $(@expr1073742796 "varid_in_class16" $) $) ${ $setVerbose $(@expr1073742797 $false $) $; varid_in_class16 $(@expr1073742798 $) $; $} $} $while $(@expr1073742799 $false $) ;
132: $do ${ $if $(@expr1073742800 $prepareTest $(@expr1073742801 "varid_in_class17" $) $) ${ $setVerbose $(@expr1073742802 $false $) $; varid_in_class17 $(@expr1073742803 $) $; $} $} $while $(@expr1073742804 $false $) ;
133: $do ${ $if $(@expr1073742805 $prepareTest $(@expr1073742806 "varid_in_class18" $) $) ${ $setVerbose $(@expr1073742807 $false $) $; varid_in_class18 $(@expr1073742808 $) $; $} $} $while $(@expr1073742809 $false $) ;
134: $do ${ $if $(@expr1073742810 $prepareTest $(@expr1073742811 "varid_in_class19" $) $) ${ $setVerbose $(@expr1073742812 $false $) $; varid_in_class19 $(@expr1073742813 $) $; $} $} $while $(@expr1073742814 $false $) ;
135: $do ${ $if $(@expr1073742815 $prepareTest $(@expr1073742816 "varid_in_class20" $) $) ${ $setVerbose $(@expr1073742817 $false $) $; varid_in_class20 $(@expr1073742818 $) $; $} $} $while $(@expr1073742819 $false $) ;
136: $do ${ $if $(@expr1073742820 $prepareTest $(@expr1073742821 "varid_in_class21" $) $) ${ $setVerbose $(@expr1073742822 $false $) $; varid_in_class21 $(@expr1073742823 $) $; $} $} $while $(@expr1073742824 $false $) ;
137: $do ${ $if $(@expr1073742825 $prepareTest $(@expr1073742826 "varid_in_class22" $) $) ${ $setVerbose $(@expr1073742827 $false $) $; varid_in_class22 $(@expr1073742828 $) $; $} $} $while $(@expr1073742829 $false $) ;
138: $do ${ $if $(@expr1073742830 $prepareTest $(@expr1073742831 "varid_namespace_1" $) $) ${ $setVerbose $(@expr1073742832 $false $) $; varid_namespace_1 $(@expr1073742833 $) $; $} $} $while $(@expr1073742834 $false $) ;
139: $do ${ $if $(@expr1073742835 $prepareTest $(@expr1073742836 "varid_namespace_2" $) $) ${ $setVerbose $(@expr1073742837 $false $) $; varid_namespace_2 $(@expr1073742838 $) $; $} $} $while $(@expr1073742839 $false $) ;
140: $do ${ $if $(@expr1073742840 $prepareTest $(@expr1073742841 "varid_namespace_3" $) $) ${ $setVerbose $(@expr1073742842 $false $) $; varid_namespace_3 $(@expr1073742843 $) $; $} $} $while $(@expr1073742844 $false $) ;
141: $do ${ $if $(@expr1073742845 $prepareTest $(@expr1073742846 "varid_namespace_4" $) $) ${ $setVerbose $(@expr1073742847 $false $) $; varid_namespace_4 $(@expr1073742848 $) $; $} $} $while $(@expr1073742849 $false $) ;
142: $do ${ $if $(@expr1073742850 $prepareTest $(@expr1073742851 "varid_namespace_5" $) $) ${ $setVerbose $(@expr1073742852 $false $) $; varid_namespace_5 $(@expr1073742853 $) $; $} $} $while $(@expr1073742854 $false $) ;
143: $do ${ $if $(@expr1073742855 $prepareTest $(@expr1073742856 "varid_initList" $) $) ${ $setVerbose $(@expr1073742857 $false $) $; varid_initList $(@expr1073742858 $) $; $} $} $while $(@expr1073742859 $false $) ;
144: $do ${ $if $(@expr1073742860 $prepareTest $(@expr1073742861 "varid_initListWithBaseTemplate" $) $) ${ $setVerbose $(@expr1073742862 $false $) $; varid_initListWithBaseTemplate $(@expr1073742863 $) $; $} $} $while $(@expr1073742864 $false $) ;
145: $do ${ $if $(@expr1073742865 $prepareTest $(@expr1073742866 "varid_initListWithScope" $) $) ${ $setVerbose $(@expr1073742867 $false $) $; varid_initListWithScope $(@expr1073742868 $) $; $} $} $while $(@expr1073742869 $false $) ;
146: $do ${ $if $(@expr1073742870 $prepareTest $(@expr1073742871 "varid_operator" $) $) ${ $setVerbose $(@expr1073742872 $false $) $; varid_operator $(@expr1073742873 $) $; $} $} $while $(@expr1073742874 $false $) ;
147: $do ${ $if $(@expr1073742875 $prepareTest $(@expr1073742876 "varid_throw" $) $) ${ $setVerbose $(@expr1073742877 $false $) $; varid_throw $(@expr1073742878 $) $; $} $} $while $(@expr1073742879 $false $) ;
148: $do ${ $if $(@expr1073742880 $prepareTest $(@expr1073742881 "varid_unknown_macro" $) $) ${ $setVerbose $(@expr1073742882 $false $) $; varid_unknown_macro $(@expr1073742883 $) $; $} $} $while $(@expr1073742884 $false $) ;
149: $do ${ $if $(@expr1073742885 $prepareTest $(@expr1073742886 "varid_using" $) $) ${ $setVerbose $(@expr1073742887 $false $) $; varid_using $(@expr1073742888 $) $; $} $} $while $(@expr1073742889 $false $) ;
150: $do ${ $if $(@expr1073742890 $prepareTest $(@expr1073742891 "varid_catch" $) $) ${ $setVerbose $(@expr1073742892 $false $) $; varid_catch $(@expr1073742893 $) $; $} $} $while $(@expr1073742894 $false $) ;
151: $do ${ $if $(@expr1073742895 $prepareTest $(@expr1073742896 "varid_functionPrototypeTemplate" $) $) ${ $setVerbose $(@expr1073742897 $false $) $; varid_functionPrototypeTemplate $(@expr1073742898 $) $; $} $} $while $(@expr1073742899 $false $) ;
152: $do ${ $if $(@expr1073742900 $prepareTest $(@expr1073742901 "varid_templatePtr" $) $) ${ $setVerbose $(@expr1073742902 $false $) $; varid_templatePtr $(@expr1073742903 $) $; $} $} $while $(@expr1073742904 $false $) ;
153: $do ${ $if $(@expr1073742905 $prepareTest $(@expr1073742906 "varid_templateNamespaceFuncPtr" $) $) ${ $setVerbose $(@expr1073742907 $false $) $; varid_templateNamespaceFuncPtr $(@expr1073742908 $) $; $} $} $while $(@expr1073742909 $false $) ;
154: $do ${ $if $(@expr1073742910 $prepareTest $(@expr1073742911 "varid_templateArray" $) $) ${ $setVerbose $(@expr1073742912 $false $) $; varid_templateArray $(@expr1073742913 $) $; $} $} $while $(@expr1073742914 $false $) ;
155: $do ${ $if $(@expr1073742915 $prepareTest $(@expr1073742916 "varid_templateParameter" $) $) ${ $setVerbose $(@expr1073742917 $false $) $; varid_templateParameter $(@expr1073742918 $) $; $} $} $while $(@expr1073742919 $false $) ;
156: $do ${ $if $(@expr1073742920 $prepareTest $(@expr1073742921 "varid_templateUsing" $) $) ${ $setVerbose $(@expr1073742922 $false $) $; varid_templateUsing $(@expr1073742923 $) $; $} $} $while $(@expr1073742924 $false $) ;
157: $do ${ $if $(@expr1073742925 $prepareTest $(@expr1073742926 "varid_not_template_in_condition" $) $) ${ $setVerbose $(@expr1073742927 $false $) $; varid_not_template_in_condition $(@expr1073742928 $) $; $} $} $while $(@expr1073742929 $false $) ;
158: $do ${ $if $(@expr1073742930 $prepareTest $(@expr1073742931 "varid_cppcast" $) $) ${ $setVerbose $(@expr1073742932 $false $) $; varid_cppcast $(@expr1073742933 $) $; $} $} $while $(@expr1073742934 $false $) ;
159: $do ${ $if $(@expr1073742935 $prepareTest $(@expr1073742936 "varid_variadicFunc" $) $) ${ $setVerbose $(@expr1073742937 $false $) $; varid_variadicFunc $(@expr1073742938 $) $; $} $} $while $(@expr1073742939 $false $) ;
160: $do ${ $if $(@expr1073742940 $prepareTest $(@expr1073742941 "varid_typename" $) $) ${ $setVerbose $(@expr1073742942 $false $) $; varid_typename $(@expr1073742943 $) $; $} $} $while $(@expr1073742944 $false $) ;
161: $do ${ $if $(@expr1073742945 $prepareTest $(@expr1073742946 "varid_rvalueref" $) $) ${ $setVerbose $(@expr1073742947 $false $) $; varid_rvalueref $(@expr1073742948 $) $; $} $} $while $(@expr1073742949 $false $) ;
162: $do ${ $if $(@expr1073742950 $prepareTest $(@expr1073742951 "varid_arrayFuncPar" $) $) ${ $setVerbose $(@expr1073742952 $false $) $; varid_arrayFuncPar $(@expr1073742953 $) $; $} $} $while $(@expr1073742954 $false $) ;
163: $do ${ $if $(@expr1073742955 $prepareTest $(@expr1073742956 "varid_sizeofPassed" $) $) ${ $setVerbose $(@expr1073742957 $false $) $; varid_sizeofPassed $(@expr1073742958 $) $; $} $} $while $(@expr1073742959 $false $) ;
164: $do ${ $if $(@expr1073742960 $prepareTest $(@expr1073742961 "varid_classInFunction" $) $) ${ $setVerbose $(@expr1073742962 $false $) $; varid_classInFunction $(@expr1073742963 $) $; $} $} $while $(@expr1073742964 $false $) ;
165: $do ${ $if $(@expr1073742965 $prepareTest $(@expr1073742966 "varid_pointerToArray" $) $) ${ $setVerbose $(@expr1073742967 $false $) $; varid_pointerToArray $(@expr1073742968 $) $; $} $} $while $(@expr1073742969 $false $) ;
166: $do ${ $if $(@expr1073742970 $prepareTest $(@expr1073742971 "varid_cpp11initialization" $) $) ${ $setVerbose $(@expr1073742972 $false $) $; varid_cpp11initialization $(@expr1073742973 $) $; $} $} $while $(@expr1073742974 $false $) ;
167: $do ${ $if $(@expr1073742975 $prepareTest $(@expr1073742976 "varid_inheritedMembers" $) $) ${ $setVerbose $(@expr1073742977 $false $) $; varid_inheritedMembers $(@expr1073742978 $) $; $} $} $while $(@expr1073742979 $false $) ;
168: $do ${ $if $(@expr1073742980 $prepareTest $(@expr1073742981 "varid_header" $) $) ${ $setVerbose $(@expr1073742982 $false $) $; varid_header $(@expr1073742983 $) $; $} $} $while $(@expr1073742984 $false $) ;
169: $do ${ $if $(@expr1073742985 $prepareTest $(@expr1073742986 "varid_rangeBasedFor" $) $) ${ $setVerbose $(@expr1073742987 $false $) $; varid_rangeBasedFor $(@expr1073742988 $) $; $} $} $while $(@expr1073742989 $false $) ;
170: $do ${ $if $(@expr1073742990 $prepareTest $(@expr1073742991 "varid_structinit" $) $) ${ $setVerbose $(@expr1073742992 $false $) $; varid_structinit $(@expr1073742993 $) $; $} $} $while $(@expr1073742994 $false $) ;
171: $do ${ $if $(@expr1073742995 $prepareTest $(@expr1073742996 "varid_arrayinit" $) $) ${ $setVerbose $(@expr1073742997 $false $) $; varid_arrayinit $(@expr1073742998 $) $; $} $} $while $(@expr1073742999 $false $) ;
172: $do ${ $if $(@expr1073743000 $prepareTest $(@expr1073743001 "varid_lambda_arg" $) $) ${ $setVerbose $(@expr1073743002 $false $) $; varid_lambda_arg $(@expr1073743003 $) $; $} $} $while $(@expr1073743004 $false $) ;
173: $do ${ $if $(@expr1073743005 $prepareTest $(@expr1073743006 "varid_lambda_mutable" $) $) ${ $setVerbose $(@expr1073743007 $false $) $; varid_lambda_mutable $(@expr1073743008 $) $; $} $} $while $(@expr1073743009 $false $) ;
174: $do ${ $if $(@expr1073743010 $prepareTest $(@expr1073743011 "varid_trailing_return1" $) $) ${ $setVerbose $(@expr1073743012 $false $) $; varid_trailing_return1 $(@expr1073743013 $) $; $} $} $while $(@expr1073743014 $false $) ;
175: $do ${ $if $(@expr1073743015 $prepareTest $(@expr1073743016 "varid_trailing_return2" $) $) ${ $setVerbose $(@expr1073743017 $false $) $; varid_trailing_return2 $(@expr1073743018 $) $; $} $} $while $(@expr1073743019 $false $) ;
176: $do ${ $if $(@expr1073743020 $prepareTest $(@expr1073743021 "varid_parameter_pack" $) $) ${ $setVerbose $(@expr1073743022 $false $) $; varid_parameter_pack $(@expr1073743023 $) $; $} $} $while $(@expr1073743024 $false $) ;
177: $do ${ $if $(@expr1073743025 $prepareTest $(@expr1073743026 "varid_for_auto_cpp17" $) $) ${ $setVerbose $(@expr1073743027 $false $) $; varid_for_auto_cpp17 $(@expr1073743028 $) $; $} $} $while $(@expr1073743029 $false $) ;
178: $do ${ $if $(@expr1073743030 $prepareTest $(@expr1073743031 "varid_not" $) $) ${ $setVerbose $(@expr1073743032 $false $) $; varid_not $(@expr1073743033 $) $; $} $} $while $(@expr1073743034 $false $) ;
179: $do ${ $if $(@expr1073743035 $prepareTest $(@expr1073743036 "varid_declInIfCondition" $) $) ${ $setVerbose $(@expr1073743037 $false $) $; varid_declInIfCondition $(@expr1073743038 $) $; $} $} $while $(@expr1073743039 $false $) ;
180:
181: $do ${ $if $(@expr1073743040 $prepareTest $(@expr1073743041 "varidclass1" $) $) ${ $setVerbose $(@expr1073743042 $false $) $; varidclass1 $(@expr1073743043 $) $; $} $} $while $(@expr1073743044 $false $) ;
182: $do ${ $if $(@expr1073743045 $prepareTest $(@expr1073743046 "varidclass2" $) $) ${ $setVerbose $(@expr1073743047 $false $) $; varidclass2 $(@expr1073743048 $) $; $} $} $while $(@expr1073743049 $false $) ;
183: $do ${ $if $(@expr1073743050 $prepareTest $(@expr1073743051 "varidclass3" $) $) ${ $setVerbose $(@expr1073743052 $false $) $; varidclass3 $(@expr1073743053 $) $; $} $} $while $(@expr1073743054 $false $) ;
184: $do ${ $if $(@expr1073743055 $prepareTest $(@expr1073743056 "varidclass4" $) $) ${ $setVerbose $(@expr1073743057 $false $) $; varidclass4 $(@expr1073743058 $) $; $} $} $while $(@expr1073743059 $false $) ;
185: $do ${ $if $(@expr1073743060 $prepareTest $(@expr1073743061 "varidclass5" $) $) ${ $setVerbose $(@expr1073743062 $false $) $; varidclass5 $(@expr1073743063 $) $; $} $} $while $(@expr1073743064 $false $) ;
186: $do ${ $if $(@expr1073743065 $prepareTest $(@expr1073743066 "varidclass6" $) $) ${ $setVerbose $(@expr1073743067 $false $) $; varidclass6 $(@expr1073743068 $) $; $} $} $while $(@expr1073743069 $false $) ;
187: $do ${ $if $(@expr1073743070 $prepareTest $(@expr1073743071 "varidclass7" $) $) ${ $setVerbose $(@expr1073743072 $false $) $; varidclass7 $(@expr1073743073 $) $; $} $} $while $(@expr1073743074 $false $) ;
188: $do ${ $if $(@expr1073743075 $prepareTest $(@expr1073743076 "varidclass8" $) $) ${ $setVerbose $(@expr1073743077 $false $) $; varidclass8 $(@expr1073743078 $) $; $} $} $while $(@expr1073743079 $false $) ;
189: $do ${ $if $(@expr1073743080 $prepareTest $(@expr1073743081 "varidclass9" $) $) ${ $setVerbose $(@expr1073743082 $false $) $; varidclass9 $(@expr1073743083 $) $; $} $} $while $(@expr1073743084 $false $) ;
190: $do ${ $if $(@expr1073743085 $prepareTest $(@expr1073743086 "varidclass10" $) $) ${ $setVerbose $(@expr1073743087 $false $) $; varidclass10 $(@expr1073743088 $) $; $} $} $while $(@expr1073743089 $false $) ;
191: $do ${ $if $(@expr1073743090 $prepareTest $(@expr1073743091 "varidclass11" $) $) ${ $setVerbose $(@expr1073743092 $false $) $; varidclass11 $(@expr1073743093 $) $; $} $} $while $(@expr1073743094 $false $) ;
192: $do ${ $if $(@expr1073743095 $prepareTest $(@expr1073743096 "varidclass12" $) $) ${ $setVerbose $(@expr1073743097 $false $) $; varidclass12 $(@expr1073743098 $) $; $} $} $while $(@expr1073743099 $false $) ;
193: $do ${ $if $(@expr1073743100 $prepareTest $(@expr1073743101 "varidclass13" $) $) ${ $setVerbose $(@expr1073743102 $false $) $; varidclass13 $(@expr1073743103 $) $; $} $} $while $(@expr1073743104 $false $) ;
194: $do ${ $if $(@expr1073743105 $prepareTest $(@expr1073743106 "varidclass14" $) $) ${ $setVerbose $(@expr1073743107 $false $) $; varidclass14 $(@expr1073743108 $) $; $} $} $while $(@expr1073743109 $false $) ;
195: $do ${ $if $(@expr1073743110 $prepareTest $(@expr1073743111 "varidclass15" $) $) ${ $setVerbose $(@expr1073743112 $false $) $; varidclass15 $(@expr1073743113 $) $; $} $} $while $(@expr1073743114 $false $) ;
196: $do ${ $if $(@expr1073743115 $prepareTest $(@expr1073743116 "varidclass16" $) $) ${ $setVerbose $(@expr1073743117 $false $) $; varidclass16 $(@expr1073743118 $) $; $} $} $while $(@expr1073743119 $false $) ;
197: $do ${ $if $(@expr1073743120 $prepareTest $(@expr1073743121 "varidclass17" $) $) ${ $setVerbose $(@expr1073743122 $false $) $; varidclass17 $(@expr1073743123 $) $; $} $} $while $(@expr1073743124 $false $) ;
198: $do ${ $if $(@expr1073743125 $prepareTest $(@expr1073743126 "varidclass18" $) $) ${ $setVerbose $(@expr1073743127 $false $) $; varidclass18 $(@expr1073743128 $) $; $} $} $while $(@expr1073743129 $false $) ;
199: $do ${ $if $(@expr1073743130 $prepareTest $(@expr1073743131 "varidclass19" $) $) ${ $setVerbose $(@expr1073743132 $false $) $; varidclass19 $(@expr1073743133 $) $; $} $} $while $(@expr1073743134 $false $) ;
200: $do ${ $if $(@expr1073743135 $prepareTest $(@expr1073743136 "varidclass20" $) $) ${ $setVerbose $(@expr1073743137 $false $) $; varidclass20 $(@expr1073743138 $) $; $} $} $while $(@expr1073743139 $false $) ;
201: $do ${ $if $(@expr1073743140 $prepareTest $(@expr1073743141 "varid_classnameshaddowsvariablename" $) $) ${ $setVerbose $(@expr1073743142 $false $) $; varid_classnameshaddowsvariablename $(@expr1073743143 $) $; $} $} $while $(@expr1073743144 $false $) ;
202: $do ${ $if $(@expr1073743145 $prepareTest $(@expr1073743146 "varid_classnametemplate" $) $) ${ $setVerbose $(@expr1073743147 $false $) $; varid_classnametemplate $(@expr1073743148 $) $; $} $} $while $(@expr1073743149 $false $) ;
203:
204: $do ${ $if $(@expr1073743150 $prepareTest $(@expr1073743151 "varidenum1" $) $) ${ $setVerbose $(@expr1073743152 $false $) $; varidenum1 $(@expr1073743153 $) $; $} $} $while $(@expr1073743154 $false $) ;
205: $do ${ $if $(@expr1073743155 $prepareTest $(@expr1073743156 "varidenum2" $) $) ${ $setVerbose $(@expr1073743157 $false $) $; varidenum2 $(@expr1073743158 $) $; $} $} $while $(@expr1073743159 $false $) ;
206: $do ${ $if $(@expr1073743160 $prepareTest $(@expr1073743161 "varidenum3" $) $) ${ $setVerbose $(@expr1073743162 $false $) $; varidenum3 $(@expr1073743163 $) $; $} $} $while $(@expr1073743164 $false $) ;
207: $do ${ $if $(@expr1073743165 $prepareTest $(@expr1073743166 "varidenum4" $) $) ${ $setVerbose $(@expr1073743167 $false $) $; varidenum4 $(@expr1073743168 $) $; $} $} $while $(@expr1073743169 $false $) ;
208: $do ${ $if $(@expr1073743170 $prepareTest $(@expr1073743171 "varidenum5" $) $) ${ $setVerbose $(@expr1073743172 $false $) $; varidenum5 $(@expr1073743173 $) $; $} $} $while $(@expr1073743174 $false $) ;
209: $do ${ $if $(@expr1073743175 $prepareTest $(@expr1073743176 "varidenum6" $) $) ${ $setVerbose $(@expr1073743177 $false $) $; varidenum6 $(@expr1073743178 $) $; $} $} $while $(@expr1073743179 $false $) ;
210: $do ${ $if $(@expr1073743180 $prepareTest $(@expr1073743181 "varidenum7" $) $) ${ $setVerbose $(@expr1073743182 $false $) $; varidenum7 $(@expr1073743183 $) $; $} $} $while $(@expr1073743184 $false $) ;
211:
212: $do ${ $if $(@expr1073743185 $prepareTest $(@expr1073743186 "varidnamespace1" $) $) ${ $setVerbose $(@expr1073743187 $false $) $; varidnamespace1 $(@expr1073743188 $) $; $} $} $while $(@expr1073743189 $false $) ;
213: $do ${ $if $(@expr1073743190 $prepareTest $(@expr1073743191 "varidnamespace2" $) $) ${ $setVerbose $(@expr1073743192 $false $) $; varidnamespace2 $(@expr1073743193 $) $; $} $} $while $(@expr1073743194 $false $) ;
214: $do ${ $if $(@expr1073743195 $prepareTest $(@expr1073743196 "usingNamespace1" $) $) ${ $setVerbose $(@expr1073743197 $false $) $; usingNamespace1 $(@expr1073743198 $) $; $} $} $while $(@expr1073743199 $false $) ;
215: $do ${ $if $(@expr1073743200 $prepareTest $(@expr1073743201 "usingNamespace2" $) $) ${ $setVerbose $(@expr1073743202 $false $) $; usingNamespace2 $(@expr1073743203 $) $; $} $} $while $(@expr1073743204 $false $) ;
216: $do ${ $if $(@expr1073743205 $prepareTest $(@expr1073743206 "usingNamespace3" $) $) ${ $setVerbose $(@expr1073743207 $false $) $; usingNamespace3 $(@expr1073743208 $) $; $} $} $while $(@expr1073743209 $false $) ;
217:
218: $do ${ $if $(@expr1073743210 $prepareTest $(@expr1073743211 "setVarIdStructMembers1" $) $) ${ $setVerbose $(@expr1073743212 $false $) $; setVarIdStructMembers1 $(@expr1073743213 $) $; $} $} $while $(@expr1073743214 $false $) ;
219:
220: $do ${ $if $(@expr1073743215 $prepareTest $(@expr1073743216 "decltype1" $) $) ${ $setVerbose $(@expr1073743217 $false $) $; decltype1 $(@expr1073743218 $) $; $} $} $while $(@expr1073743219 $false $) ;
221: $do ${ $if $(@expr1073743220 $prepareTest $(@expr1073743221 "decltype2" $) $) ${ $setVerbose $(@expr1073743222 $false $) $; decltype2 $(@expr1073743223 $) $; $} $} $while $(@expr1073743224 $false $) ;
222:
223: $do ${ $if $(@expr1073743225 $prepareTest $(@expr1073743226 "exprid1" $) $) ${ $setVerbose $(@expr1073743227 $false $) $; exprid1 $(@expr1073743228 $) $; $} $} $while $(@expr1073743229 $false $) ;
224:
225: $do ${ $if $(@expr1073743230 $prepareTest $(@expr1073743231 "structuredBindings" $) $) ${ $setVerbose $(@expr1073743232 $false $) $; structuredBindings $(@expr1073743233 $) $; $} $} $while $(@expr1073743234 $false $) ;
226: }
227:
228:
229: std :: string tokenize_ ( const char * file@var102 , int line@var103 , const char code@var104 [ ] , const char filename@var105 [ 9 ] = "test.cpp" ) {
230: errout@var100 .@expr1073743238 str (@expr1073743239 "" ) ;
231:
232: Settings settings@var106 ;
233: settings@var106 .@expr1073743240 platform (@expr1073743241 Settings ::@expr1073743242 Unix64@expr1073743235 ) ;
234: settings@var106 .@expr1419 standards@var107 .@expr1073743244 c@var108 =@expr1073743245 Standards ::@expr1073743246 C89@expr1073743236 ;
235: settings@var106 .@expr1419 standards@var107 .@expr1073743248 cpp@var109 =@expr1073743249 Standards ::@expr1073743250 CPPLatest@expr1073743237 ;
236: settings@var106 .@expr1073743251 checkUnusedTemplates@var110 =@expr1073743252 true ;
237:
238: Tokenizer tokenizer@var111 (@expr1073743253 &@expr1073743254 settings@var106 , this@expr1073743255 ) ;
239: std ::@expr1073743256 istringstream istr@var112 (@expr1073743257 code@var104 ) ;
240: $assert_ $(@expr1073743258 file@var102 $, line@var103 $, $(@expr1073743259 tokenizer@var111 .@expr1073743260 tokenize (@expr1073743261 istr@var112 , filename@var105 ) $) $) ;
241:
242:
243: Token ::@expr1073743262 stringifyOptions options@var113 ; options@var113 =@expr1073743263 Token ::@expr1073743264 stringifyOptions ::@expr1073743265 forDebugVarId (@expr1073743266 ) ;
244: options@var113 .@expr1073743267 files@var114 =@expr1073743268 false ;
245: return tokenizer@var111 .@expr1073743269 tokens (@expr1073743270 ) .@expr1073743271 stringifyList (@expr1073743272 options@var113 ) ;
246: }
247:
248:
249: std :: string tokenizeExpr_ ( const char * file@var115 , int line@var116 , const char code@var117 [ ] , const char filename@var118 [ 9 ] = "test.cpp" ) {
250: errout@var100 .@expr1073743276 str (@expr1073743277 "" ) ;
251:
252: Settings settings@var119 ;
253: settings@var119 .@expr1073743278 platform (@expr1073743279 Settings ::@expr1073743280 Unix64@expr1073743273 ) ;
254: settings@var119 .@expr1457 standards@var120 .@expr1073743282 c@var121 =@expr1073743283 Standards ::@expr1073743284 C89@expr1073743274 ;
255: settings@var119 .@expr1457 standards@var120 .@expr1073743286 cpp@var122 =@expr1073743287 Standards ::@expr1073743288 CPPLatest@expr1073743275 ;
256: settings@var119 .@expr1073743289 checkUnusedTemplates@var123 =@expr1073743290 true ;
257:
258: Tokenizer tokenizer@var124 (@expr1073743291 &@expr1073743292 settings@var119 , this@expr1073743293 ) ;
259: std ::@expr1073743294 istringstream istr@var125 (@expr1073743295 code@var117 ) ;
260: $assert_ $(@expr1073743296 file@var115 $, line@var116 $, $(@expr1073743297 tokenizer@var124 .@expr1073743298 tokenize (@expr1073743299 istr@var125 , filename@var118 ) $) $) ;
261:
262:
263: Token ::@expr1073743300 stringifyOptions options@var126 ; options@var126 =@expr1073743301 Token ::@expr1073743302 stringifyOptions ::@expr1073743303 forDebugExprId (@expr1073743304 ) ;
264: options@var126 .@expr1073743305 files@var127 =@expr1073743306 false ;
265: return tokenizer@var124 .@expr1073743307 tokens (@expr1073743308 ) .@expr1073743309 stringifyList (@expr1073743310 options@var126 ) ;
266: }
267:
268:
269: std :: string compareVaridsForVariable_ ( const char * file@var128 , int line@var129 , const char code@var130 [ ] , const char varname@var131 [ ] , const char filename@var132 [ 9 ] = "test.cpp" ) {
270: errout@var100 .@expr1073743314 str (@expr1073743315 "" ) ;
271:
272: Settings settings@var133 ;
273: settings@var133 .@expr1073743316 platform (@expr1073743317 Settings ::@expr1073743318 Unix64@expr1073743311 ) ;
274: settings@var133 .@expr1495 standards@var134 .@expr1073743320 c@var135 =@expr1073743321 Standards ::@expr1073743322 C89@expr1073743312 ;
275: settings@var133 .@expr1495 standards@var134 .@expr1073743324 cpp@var136 =@expr1073743325 Standards ::@expr1073743326 CPP11@expr1073743313 ;
276: settings@var133 .@expr1073743327 checkUnusedTemplates@var137 =@expr1073743328 true ;
277:
278: Tokenizer tokenizer@var138 (@expr1073743329 &@expr1073743330 settings@var133 , this@expr1073743331 ) ;
279: std ::@expr1073743332 istringstream istr@var139 (@expr1073743333 code@var130 ) ;
280: $assert_ $(@expr1073743334 file@var128 $, line@var129 $, $(@expr1073743335 tokenizer@var138 .@expr1073743336 tokenize (@expr1073743337 istr@var139 , filename@var132 ) $) $) ;
281:
282: unsigned int varid@var140 ; varid@var140 =@expr1073743338 ~@expr1515 0U ;
283: for (@expr1073743340 const Token *@expr1073743341 tok@var141 =@expr1073743342 tokenizer@var138 .@expr1519 tokens (@expr1520 ) ; tok@var141 ; tok@var141 =@expr1073743345 tok@var141 .@expr1073743346 next (@expr1073743347 ) ) {
284: if (@expr1073743348 tok@var141 .@expr1073743349 str (@expr1073743350 ) ==@expr1073743351 varname@var131 ) {
285: if (@expr1073743352 varid@var140 ==@expr1073743353 ~@expr1515 0U ) {
286: varid@var140 =@expr1073743355 tok@var141 .@expr1532 varId (@expr1533 ) ; }
287: else { if (@expr1073743358 varid@var140 !=@expr1073743359 tok@var141 .@expr1532 varId (@expr1533 ) ) {
288: return std ::@expr1073743362 string (@expr1073743363 "Variable " ) +@expr1073743364 varname@var131 +@expr1073743365 " has different varids:\n" +@expr1073743366 tokenizer@var138 .@expr1519 tokens (@expr1520 ) .@expr1073743369 stringifyList (@expr1073743370 true , true , true , true , false ) ; } }
289: }
290: }
291:
292: return "same varid" ;
293: }
294:
295: void varid1 ( ) {
296: {
297: const std ::@expr1547 string actual@var142 =@expr1073743372 $tokenize_ $(@expr1073743373 "cppcheck-2.8/test/testvarid.cpp" $, 297 $, "static int i = 1;\nvoid f()\n{\n    int i = 2;\n    for (int i = 0; i < 10; ++i)\n        i = 3;\n    i = 4;\n}\n" , "test.c" $)
298:
|
304:
305: ;
306:
307: const char expected@var143 [@expr1073743374 145 ] =@expr1073743375 "1: static int i@1 = 1 ;\n2: void f ( )\n3: {\n4: int i@2 ; i@2 = 2 ;\n5: for ( int i@3 = 0 ; i@3 < 10 ; ++ i@3 ) {\n6: i@3 = 3 ; }\n7: i@2 = 4 ;\n8: }\n"
308:
|
313:
314: ;
315:
316: $if $(@expr1073743376 $!@expr1073743377 $assertEquals $(@expr1073743378 "cppcheck-2.8/test/testvarid.cpp" $, 316 $, expected@var143 $, actual@var142 $) $) { $return ; }
317: }
318:
319: {
320: const std ::@expr1547 string actual@var144 =@expr1073743380 $tokenize_ $(@expr1073743381 "cppcheck-2.8/test/testvarid.cpp" $, 320 $, "static int i = 1;\nvoid f()\n{\n    int i = 2;\n    for (int i = 0; i < 10; ++i)\n    {\n      i = 3;\n    }\n    i = 4;\n}\n" , "test.c" $)
321:
|
329:
330: ;
331:
332: const char expected@var145 [@expr1073743382 152 ] =@expr1073743383 "1: static int i@1 = 1 ;\n2: void f ( )\n3: {\n4: int i@2 ; i@2 = 2 ;\n5: for ( int i@3 = 0 ; i@3 < 10 ; ++ i@3 )\n6: {\n7: i@3 = 3 ;\n8: }\n9: i@2 = 4 ;\n10: }\n"
333:
|
340:
341: ;
342:
343: $if $(@expr1073743384 $!@expr1073743385 $assertEquals $(@expr1073743386 "cppcheck-2.8/test/testvarid.cpp" $, 343 $, expected@var145 $, actual@var144 $) $) { $return ; }
344: }
345: }
346:
347: void varid2 ( ) {
348: const std ::@expr1073743387 string actual@var146 =@expr1073743388 $tokenize_ $(@expr1073743389 "cppcheck-2.8/test/testvarid.cpp" $, 348 $, "void f()\n{\n    struct ABC abc;\n    abc.a = 3;\n    i = abc.a;\n}\n" , "test.c" $)
349:
|
353:
354: ;
355:
356: const char expected@var147 [@expr1073743390 89 ] =@expr1073743391 "1: void f ( )\n2: {\n3: struct ABC abc@1 ;\n4: abc@1 . a@2 = 3 ;\n5: i = abc@1 . a@2 ;\n6: }\n"
357:
|
360:
361: ;
362:
363: $if $(@expr1073743392 $!@expr1073743393 $assertEquals $(@expr1073743394 "cppcheck-2.8/test/testvarid.cpp" $, 363 $, expected@var147 $, actual@var146 $) $) { $return ; }
364: }
365:
366: void varid3 ( ) {
367: const std ::@expr1073743395 string actual@var148 =@expr1073743396 $tokenize_ $(@expr1073743397 "cppcheck-2.8/test/testvarid.cpp" $, 367 $, "static char str[4];\nvoid f()\n{\n    char str[10];\n    str[0] = 0;\n}\n" , "test.c" $)
368:
|
372:
373: ;
374:
375: const char expected@var149 [@expr1073743398 98 ] =@expr1073743399 "1: static char str@1 [ 4 ] ;\n2: void f ( )\n3: {\n4: char str@2 [ 10 ] ;\n5: str@2 [ 0 ] = 0 ;\n6: }\n"
376:
|
379:
380: ;
381:
382: $if $(@expr1073743400 $!@expr1073743401 $assertEquals $(@expr1073743402 "cppcheck-2.8/test/testvarid.cpp" $, 382 $, expected@var149 $, actual@var148 $) $) { $return ; }
383: }
384:
385: void varid4 ( ) {
386: const std ::@expr1073743403 string actual@var150 =@expr1073743404 $tokenize_ $(@expr1073743405 "cppcheck-2.8/test/testvarid.cpp" $, 386 $, "void f(const unsigned int a[])\n{\n    int i = *(a+10);\n}\n" , "test.c" $)
387:
388:
389:
390: ;
391:
392: const char expected@var151 [@expr1073743406 88 ] =@expr1073743407 "1: void f ( const unsigned int a@1 [ ] )\n2: {\n3: int i@2 ; i@2 = * ( a@1 + 10 ) ;\n4: }\n"
393:
394:
395: ;
396:
397: $if $(@expr1073743408 $!@expr1073743409 $assertEquals $(@expr1073743410 "cppcheck-2.8/test/testvarid.cpp" $, 397 $, expected@var151 $, actual@var150 $) $) { $return ; }
398: }
399:
400: void varid5 ( ) {
401: const std ::@expr1073743411 string actual@var152 =@expr1073743412 $tokenize_ $(@expr1073743413 "cppcheck-2.8/test/testvarid.cpp" $, 401 $, "void f()\n{\n    int a,b;\n}\n" , "test.c" $)
402:
403:
404:
405: ;
406:
407: const char expected@var153 [@expr1073743414 48 ] =@expr1073743415 "1: void f ( )\n2: {\n3: int a@1 ; int b@2 ;\n4: }\n"
408:
409:
410: ;
411:
412: $if $(@expr1073743416 $!@expr1073743417 $assertEquals $(@expr1073743418 "cppcheck-2.8/test/testvarid.cpp" $, 412 $, expected@var153 $, actual@var152 $) $) { $return ; }
413: }
414:
415:
416: void varid6 ( ) {
417: const std ::@expr1073743419 string actual@var154 =@expr1073743420 $tokenize_ $(@expr1073743421 "cppcheck-2.8/test/testvarid.cpp" $, 417 $, "int f(int a, int b)\n{\n    return a+b;\n}\n" , "test.c" $)
418:
419:
420:
421: ;
422:
423: const char expected@var155 [@expr1073743422 64 ] =@expr1073743423 "1: int f ( int a@1 , int b@2 )\n2: {\n3: return a@1 + b@2 ;\n4: }\n"
424:
425:
426: ;
427:
428: $if $(@expr1073743424 $!@expr1073743425 $assertEquals $(@expr1073743426 "cppcheck-2.8/test/testvarid.cpp" $, 428 $, expected@var155 $, actual@var154 $) $) { $return ; }
429: }
430:
431:
432: void varid7 ( ) {
433: const std ::@expr1073743427 string actual@var156 =@expr1073743428 $tokenize_ $(@expr1073743429 "cppcheck-2.8/test/testvarid.cpp" $, 433 $, "void func() {\n    char a[256] = \"test\";\n    {\n        char b[256] = \"test\";\n    }\n}\n" , "test.c" $)
434:
|
438:
439: ;
440:
441: const char expected@var157 [@expr1073743430 97 ] =@expr1073743431 "1: void func ( ) {\n2: char a@1 [ 256 ] = \"test\" ;\n3: {\n4: char b@2 [ 256 ] = \"test\" ;\n5: }\n6: }\n"
442:
|
445:
446: ;
447:
448: $if $(@expr1073743432 $!@expr1073743433 $assertEquals $(@expr1073743434 "cppcheck-2.8/test/testvarid.cpp" $, 448 $, expected@var157 $, actual@var156 $) $) { $return ; }
449: }
450:
451: void varidReturn1 ( ) {
452: const std ::@expr1073743435 string actual@var158 =@expr1073743436 $tokenize_ $(@expr1073743437 "cppcheck-2.8/test/testvarid.cpp" $, 452 $, "int f()\n{\n    int a;\n    return a;\n}\n" , "test.c" $)
453:
|
456:
457: ;
458:
459: const char expected@var159 [@expr1073743438 53 ] =@expr1073743439 "1: int f ( )\n2: {\n3: int a@1 ;\n4: return a@1 ;\n5: }\n"
460:
461:
462:
463: ;
464:
465: $if $(@expr1073743440 $!@expr1073743441 $assertEquals $(@expr1073743442 "cppcheck-2.8/test/testvarid.cpp" $, 465 $, expected@var159 $, actual@var158 $) $) { $return ; }
466: }
467:
468: void varidReturn2 ( ) {
469: const std ::@expr1073743443 string actual@var160 =@expr1073743444 $tokenize_ $(@expr1073743445 "cppcheck-2.8/test/testvarid.cpp" $, 469 $, "void foo()\n{\n    unsigned long mask = (1UL << size_) - 1;\n    return (abits_val_ & mask);\n}\n" , "test.c" $)
470:
|
473:
474: ;
475:
476: const char expected@var161 [@expr1073743446 121 ] =@expr1073743447 "1: void foo ( )\n2: {\n3: unsigned long mask@1 ; mask@1 = ( 1UL << size_ ) - 1 ;\n4: return ( abits_val_ & mask@1 ) ;\n5: }\n"
477:
478:
479:
480: ;
481:
482: $if $(@expr1073743448 $!@expr1073743449 $assertEquals $(@expr1073743450 "cppcheck-2.8/test/testvarid.cpp" $, 482 $, expected@var161 $, actual@var160 $) $) { $return ; }
483: }
484:
485: void varid8 ( ) {
486: const std ::@expr1073743451 string actual@var162 =@expr1073743452 $tokenize_ $(@expr1073743453 "cppcheck-2.8/test/testvarid.cpp" $, 486 $, "void func()\n{\n    std::string str(\"test\");\n    str.clear();\n}" $)
487:
|
490:
491: ;
492:
493: const char expected@var163 [@expr1073743454 87 ] =@expr1073743455 "1: void func ( )\n2: {\n3: std :: string str@1 ( \"test\" ) ;\n4: str@1 . clear ( ) ;\n5: }\n"
494:
495:
496:
497: ;
498:
499: $if $(@expr1073743456 $!@expr1073743457 $assertEquals $(@expr1073743458 "cppcheck-2.8/test/testvarid.cpp" $, 499 $, expected@var163 $, actual@var162 $) $) { $return ; }
500: }
501:
502: void varid9 ( ) {
503: const std ::@expr1073743459 string actual@var164 =@expr1073743460 $tokenize_ $(@expr1073743461 "cppcheck-2.8/test/testvarid.cpp" $, 503 $, "typedef int INT32;\n" , "test.c" $)
504: ;
505:
506: const char expected@var165 [@expr1073743462 6 ] =@expr1073743463 "1: ;\n" ;
507:
508: $if $(@expr1073743464 $!@expr1073743465 $assertEquals $(@expr1073743466 "cppcheck-2.8/test/testvarid.cpp" $, 508 $, expected@var165 $, actual@var164 $) $) { $return ; }
509: }
510:
511: void varid10 ( ) {
512: const std ::@expr1073743467 string actual@var166 =@expr1073743468 $tokenize_ $(@expr1073743469 "cppcheck-2.8/test/testvarid.cpp" $, 512 $, "void foo()\n{\n    int abc;\n    struct abc abc1;\n}" , "test.c" $)
513:
|
516:
517: ;
518:
519: const char expected@var167 [@expr1073743470 65 ] =@expr1073743471 "1: void foo ( )\n2: {\n3: int abc@1 ;\n4: struct abc abc1@2 ;\n5: }\n"
520:
521:
522:
523: ;
524:
525: $if $(@expr1073743472 $!@expr1073743473 $assertEquals $(@expr1073743474 "cppcheck-2.8/test/testvarid.cpp" $, 525 $, expected@var167 $, actual@var166 $) $) { $return ; }
526: }
527:
528: void varid11 ( ) {
529: const std ::@expr1073743475 string actual@var168 =@expr1073743476 $tokenize_ $(@expr1073743477 "cppcheck-2.8/test/testvarid.cpp" $, 529 $, "class Foo;" $) ;
530:
531: const char expected@var169 [@expr1073743478 16 ] =@expr1073743479 "1: class Foo ;\n" ;
532:
533: $if $(@expr1073743480 $!@expr1073743481 $assertEquals $(@expr1073743482 "cppcheck-2.8/test/testvarid.cpp" $, 533 $, expected@var169 $, actual@var168 $) $) { $return ; }
534: }
535:
536: void varid12 ( ) {
537: const std ::@expr1073743483 string actual@var170 =@expr1073743484 $tokenize_ $(@expr1073743485 "cppcheck-2.8/test/testvarid.cpp" $, 537 $, "static void a()\n{\n    class Foo *foo;\n}" $)
538:
539:
540:
541: ;
542:
543: const char expected@var171 [@expr1073743486 55 ] =@expr1073743487 "1: static void a ( )\n2: {\n3: class Foo * foo@1 ;\n4: }\n"
544:
545:
546: ;
547:
548: $if $(@expr1073743488 $!@expr1073743489 $assertEquals $(@expr1073743490 "cppcheck-2.8/test/testvarid.cpp" $, 548 $, expected@var171 $, actual@var170 $) $) { $return ; }
549: }
550:
551: void varid13 ( ) {
552: const std ::@expr1073743491 string actual@var172 =@expr1073743492 $tokenize_ $(@expr1073743493 "cppcheck-2.8/test/testvarid.cpp" $, 552 $, "void f()\n{\n    int a; int b;\n    a = a;\n}\n" , "test.c" $)
553:
|
556:
557: ;
558:
559: const char expected@var173 [@expr1073743494 63 ] =@expr1073743495 "1: void f ( )\n2: {\n3: int a@1 ; int b@2 ;\n4: a@1 = a@1 ;\n5: }\n"
560:
561:
562:
563: ;
564:
565: $if $(@expr1073743496 $!@expr1073743497 $assertEquals $(@expr1073743498 "cppcheck-2.8/test/testvarid.cpp" $, 565 $, expected@var173 $, actual@var172 $) $) { $return ; }
566: }
567:
568: void varid14 ( ) {
569:
570: const std ::@expr1073743499 string actual@var174 =@expr1073743500 $tokenize_ $(@expr1073743501 "cppcheck-2.8/test/testvarid.cpp" $, 570 $, "void foo()\n{\nA a;\nB b;\nb * a;\n}" , "test.c" $)
571:
|
575:
576: ;
577:
578: const char expected@var175 [@expr1073743502 64 ] =@expr1073743503 "1: void foo ( )\n2: {\n3: A a@1 ;\n4: B b@2 ;\n5: b@2 * a@1 ;\n6: }\n"
579:
|
582:
583: ;
584:
585: $if $(@expr1073743504 $!@expr1073743505 $assertEquals $(@expr1073743506 "cppcheck-2.8/test/testvarid.cpp" $, 585 $, expected@var175 $, actual@var174 $) $) { $return ; }
586: }
587:
588: void varid15 ( ) {
589: {
590: const std ::@expr1683 string actual@var176 =@expr1073743508 $tokenize_ $(@expr1073743509 "cppcheck-2.8/test/testvarid.cpp" $, 590 $, "struct S {\n    struct T {\n    } t;\n} s;" , "test.c" $)
591:
592:
593:
594: ;
595:
596: const char expected@var177 [@expr1073743510 73 ] =@expr1073743511 "1: struct S {\n2: struct T {\n3: } ; struct T t@1 ;\n4: } ; struct S s@2 ;\n"
597:
598:
599: ;
600:
601: $if $(@expr1073743512 $!@expr1073743513 $assertEquals $(@expr1073743514 "cppcheck-2.8/test/testvarid.cpp" $, 601 $, expected@var177 $, actual@var176 $) $) { $return ; }
602: }
603:
604: {
605: const std ::@expr1683 string actual@var178 =@expr1073743516 $tokenize_ $(@expr1073743517 "cppcheck-2.8/test/testvarid.cpp" $, 605 $, "struct S {\n    struct T {\n    } t;\n};" , "test.c" $)
606:
607:
608:
609: ;
610:
611: const char expected@var179 [@expr1073743518 58 ] =@expr1073743519 "1: struct S {\n2: struct T {\n3: } ; struct T t@1 ;\n4: } ;\n"
612:
613:
614: ;
615:
616: $if $(@expr1073743520 $!@expr1073743521 $assertEquals $(@expr1073743522 "cppcheck-2.8/test/testvarid.cpp" $, 616 $, expected@var179 $, actual@var178 $) $) { $return ; }
617: }
618: }
619:
620: void varid16 ( ) {
621: const char code@var180 [@expr1073743523 48 ] =@expr1073743524 "void foo()\n{\n    int x = 1;\n    y = (z * x);\n}\n"
622:
623:
624:
625: ;
626:
627: const char expected@var181 [@expr1073743525 67 ] =@expr1073743526 "1: void foo ( )\n2: {\n3: int x@1 ; x@1 = 1 ;\n4: y = z * x@1 ;\n5: }\n"
628:
629:
630:
631: ;
632:
633: $if $(@expr1073743527 $!@expr1073743528 $assertEquals $(@expr1073743529 "cppcheck-2.8/test/testvarid.cpp" $, 633 $, expected@var181 $, $tokenize_ $(@expr1073743530 "cppcheck-2.8/test/testvarid.cpp" $, 633 $, code@var180 , "test.c" $) $) $) { $return ; }
634: }
635:
636: void varid17 ( ) {
637: const char code@var182 [@expr1073743531 47 ] =@expr1073743532 "char foo()\n{\n    char c('c');\n    return c;\n}\n"
638:
639:
640:
641: ;
642:
643: const char expected@var183 [@expr1073743533 65 ] =@expr1073743534 "1: char foo ( )\n2: {\n3: char c@1 ( 'c' ) ;\n4: return c@1 ;\n5: }\n"
644:
645:
646:
647: ;
648:
649: $if $(@expr1073743535 $!@expr1073743536 $assertEquals $(@expr1073743537 "cppcheck-2.8/test/testvarid.cpp" $, 649 $, expected@var183 $, $tokenize_ $(@expr1073743538 "cppcheck-2.8/test/testvarid.cpp" $, 649 $, code@var182 , "test.c" $) $) $) { $return ; }
650: }
651:
652: void varid18 ( ) {
653: const char code@var184 [@expr1073743539 38 ] =@expr1073743540 "char foo(char c)\n{\n    bar::c = c;\n}\n"
654:
655:
656: ;
657:
658: const char expected@var185 [@expr1073743541 56 ] =@expr1073743542 "1: char foo ( char c@1 )\n2: {\n3: bar :: c = c@1 ;\n4: }\n"
659:
660:
661: ;
662:
663: $if $(@expr1073743543 $!@expr1073743544 $assertEquals $(@expr1073743545 "cppcheck-2.8/test/testvarid.cpp" $, 663 $, expected@var185 $, $tokenize_ $(@expr1073743546 "cppcheck-2.8/test/testvarid.cpp" $, 663 $, code@var184 $) $) $) { $return ; }
664: }
665:
666: void varid19 ( ) {
667: const char code@var186 [@expr1073743547 59 ] =@expr1073743548 "void foo()\n{\n    std::pair<std::vector<double>, int> x;\n}\n"
668:
669:
670: ;
671:
672: const char expected@var187 [@expr1073743549 83 ] =@expr1073743550 "1: void foo ( )\n2: {\n3: std :: pair < std :: vector < double > , int > x@1 ;\n4: }\n"
673:
674:
675: ;
676:
677: $if $(@expr1073743551 $!@expr1073743552 $assertEquals $(@expr1073743553 "cppcheck-2.8/test/testvarid.cpp" $, 677 $, expected@var187 $, $tokenize_ $(@expr1073743554 "cppcheck-2.8/test/testvarid.cpp" $, 677 $, code@var186 $) $) $) { $return ; }
678: }
679:
680: void varid20 ( ) {
681: const char code@var188 [@expr1073743555 58 ] =@expr1073743556 "void foo()\n{\n    pair<vector<int>, vector<double> > x;\n}\n"
682:
683:
684: ;
685:
686: const char expected@var189 [@expr1073743557 80 ] =@expr1073743558 "1: void foo ( )\n2: {\n3: pair < vector < int > , vector < double > > x@1 ;\n4: }\n"
687:
688:
689: ;
690:
691: $if $(@expr1073743559 $!@expr1073743560 $assertEquals $(@expr1073743561 "cppcheck-2.8/test/testvarid.cpp" $, 691 $, expected@var189 $, $tokenize_ $(@expr1073743562 "cppcheck-2.8/test/testvarid.cpp" $, 691 $, code@var188 $) $) $) { $return ; }
692: }
693:
694: void varid24 ( ) {
695: const char code@var190 [@expr1073743563 59 ] =@expr1073743564 "class foo()\n{\npublic:\n    ;\nprivate:\n    static int i;\n};\n"
696:
|
700:
701: ;
702:
703: const char expected@var191 [@expr1073743565 78 ] =@expr1073743566 "1: class foo ( )\n2: {\n3: public:\n4: ;\n5: private:\n6: static int i@1 ;\n7: } ;\n"
704:
|
708:
709: ;
710:
711: $if $(@expr1073743567 $!@expr1073743568 $assertEquals $(@expr1073743569 "cppcheck-2.8/test/testvarid.cpp" $, 711 $, expected@var191 $, $tokenize_ $(@expr1073743570 "cppcheck-2.8/test/testvarid.cpp" $, 711 $, code@var190 $) $) $) { $return ; }
712: }
713:
714: void varid25 ( ) {
715: const char code@var192 [@expr1073743571 60 ] =@expr1073743572 "class foo()\n{\npublic:\n    ;\nprivate:\n    mutable int i;\n};\n"
716:
|
720:
721: ;
722:
723: const char expected@var193 [@expr1073743573 79 ] =@expr1073743574 "1: class foo ( )\n2: {\n3: public:\n4: ;\n5: private:\n6: mutable int i@1 ;\n7: } ;\n"
724:
|
728:
729: ;
730:
731: $if $(@expr1073743575 $!@expr1073743576 $assertEquals $(@expr1073743577 "cppcheck-2.8/test/testvarid.cpp" $, 731 $, expected@var193 $, $tokenize_ $(@expr1073743578 "cppcheck-2.8/test/testvarid.cpp" $, 731 $, code@var192 $) $) $) { $return ; }
732: }
733:
734: void varid26 ( ) {
735: const char code@var194 [@expr1073743579 28 ] =@expr1073743580 "list<int (*)()> functions;\n" ;
736: const char expected@var195 [@expr1073743581 41 ] =@expr1073743582 "1: list < int ( * ) ( ) > functions@1 ;\n" ;
737: $if $(@expr1073743583 $!@expr1073743584 $assertEquals $(@expr1073743585 "cppcheck-2.8/test/testvarid.cpp" $, 737 $, expected@var195 $, $tokenize_ $(@expr1073743586 "cppcheck-2.8/test/testvarid.cpp" $, 737 $, code@var194 $) $) $) { $return ; }
738: }
739:
740: void varid27 ( ) {
741: const char code@var196 [@expr1073743587 42 ] =@expr1073743588 "int fooled_ya;\nfooled_ya::iterator iter;\n"
742: ;
743: const char expected@var197 [@expr1073743589 56 ] =@expr1073743590 "1: int fooled_ya@1 ;\n2: fooled_ya :: iterator iter@2 ;\n"
744: ;
745: $if $(@expr1073743591 $!@expr1073743592 $assertEquals $(@expr1073743593 "cppcheck-2.8/test/testvarid.cpp" $, 745 $, expected@var197 $, $tokenize_ $(@expr1073743594 "cppcheck-2.8/test/testvarid.cpp" $, 745 $, code@var196 $) $) $) { $return ; }
746: }
747:
748: void varid28 ( ) {
749: $do ${ $try ${ $tokenize_ $(@expr1073743595 "cppcheck-2.8/test/testvarid.cpp" $, 749 $, "template <typedef A>\n" $) $; $assertThrowFail $(@expr1073743596 "cppcheck-2.8/test/testvarid.cpp" $, 749 $) $; $} $catch $(@expr1073743597 $const InternalError $&@expr1073743598 $) ${ $} $catch $(@expr1073743599 $... $) ${ $assertThrowFail $(@expr1073743600 "cppcheck-2.8/test/testvarid.cpp" $, 749 $) $; $} $} $while $(@expr1073743601 $false $) ;
750: }
751:
752: void varid29 ( ) {
753: const char code@var198 [@expr1073743602 31 ] =@expr1073743603 "class A {\n    B<C<1>,1> b;\n};\n"
754:
755: ;
756: const char expected@var199 [@expr1073743604 48 ] =@expr1073743605 "1: class A {\n2: B < C < 1 > , 1 > b@1 ;\n3: } ;\n"
757:
758: ;
759: $if $(@expr1073743606 $!@expr1073743607 $assertEquals $(@expr1073743608 "cppcheck-2.8/test/testvarid.cpp" $, 759 $, expected@var199 $, $tokenize_ $(@expr1073743609 "cppcheck-2.8/test/testvarid.cpp" $, 759 $, code@var198 $) $) $) { $return ; }
760: }
761:
762: void varid30 ( ) {
763: const char code1@var200 [@expr1073743610 115 ] =@expr1073743611 "void f(EventPtr *eventP, ActionPtr **actionsP)\n{\n    EventPtr event = *eventP;\n    *actionsP = &event->actions;\n}\n"
764:
765:
766:
767: ;
768: const char expected1@var201 [@expr1073743612 159 ] =@expr1073743613 "1: void f ( EventPtr * eventP@1 , ActionPtr * * actionsP@2 )\n2: {\n3: EventPtr event@3 ; event@3 = * eventP@1 ;\n4: * actionsP@2 = & event@3 . actions@4 ;\n5: }\n"
769:
770:
771:
772: ;
773: $if $(@expr1073743614 $!@expr1073743615 $assertEquals $(@expr1073743616 "cppcheck-2.8/test/testvarid.cpp" $, 773 $, expected1@var201 $, $tokenize_ $(@expr1073743617 "cppcheck-2.8/test/testvarid.cpp" $, 773 $, code1@var200 , "test.c" $) $) $) { $return ; }
774:
775: const char code2@var202 [@expr1073743618 43 ] =@expr1073743619 "void f(int b, int c) {\n    x(a*b*c,10);\n}\n"
776:
777: ;
778: const char expected2@var203 [@expr1073743620 70 ] =@expr1073743621 "1: void f ( int b@1 , int c@2 ) {\n2: x ( a * b@1 * c@2 , 10 ) ;\n3: }\n"
779:
780: ;
781: $if $(@expr1073743622 $!@expr1073743623 $assertEquals $(@expr1073743624 "cppcheck-2.8/test/testvarid.cpp" $, 781 $, expected2@var203 $, $tokenize_ $(@expr1073743625 "cppcheck-2.8/test/testvarid.cpp" $, 781 $, code2@var202 , "test.c" $) $) $) { $return ; }
782:
783: const char code3@var204 [@expr1073743626 164 ] =@expr1073743627 "class Nullpointer : public ExecutionPath\n {\n    Nullpointer(Check *c, const unsigned int id, const std::string &name)\n        : ExecutionPath(c, id)\n    {\n    }\n}\n"
784:
|
788:
789: ;
790: const char expected3@var205 [@expr1073743628 187 ] =@expr1073743629 "1: class Nullpointer : public ExecutionPath\n2: {\n3: Nullpointer ( Check * c@1 , const unsigned int id@2 , const std :: string & name@3 )\n4: : ExecutionPath ( c@1 , id@2 )\n5: {\n6: }\n7: }\n"
791:
|
795:
796: ;
797: $if $(@expr1073743630 $!@expr1073743631 $assertEquals $(@expr1073743632 "cppcheck-2.8/test/testvarid.cpp" $, 797 $, expected3@var205 $, $tokenize_ $(@expr1073743633 "cppcheck-2.8/test/testvarid.cpp" $, 797 $, code3@var204 $) $) $) { $return ; }
798: }
799:
800: void varid34 ( ) {
801: const char code@var206 [@expr1073743634 90 ] =@expr1073743635 "class Fred : public B1, public B2\n{\npublic:\n    Fred() { a = 0; }\nprivate:\n    int a;\n};\n"
802:
|
806:
807: ;
808: const char expected@var207 [@expr1073743636 113 ] =@expr1073743637 "1: class Fred : public B1 , public B2\n2: {\n3: public:\n4: Fred ( ) { a@1 = 0 ; }\n5: private:\n6: int a@1 ;\n7: } ;\n"
809:
|
813:
814: ;
815: $if $(@expr1073743638 $!@expr1073743639 $assertEquals $(@expr1073743640 "cppcheck-2.8/test/testvarid.cpp" $, 815 $, expected@var207 $, $tokenize_ $(@expr1073743641 "cppcheck-2.8/test/testvarid.cpp" $, 815 $, code@var206 $) $) $) { $return ; }
816: $if $(@expr1073743642 $!@expr1073743643 $assertEquals $(@expr1073743644 "cppcheck-2.8/test/testvarid.cpp" $, 816 $, "" $, errout@var100 .@expr1073743645 str (@expr1073743646 ) $) $) { $return ; }
817: }
818:
819: void varid35 ( ) {
820:
821: const char code@var208 [@expr1073743647 43 ] =@expr1073743648 "int foo() {\n    int f(x);\n    return f;\n}\n"
822:
823:
824: ;
825: const char expected@var209 [@expr1073743649 58 ] =@expr1073743650 "1: int foo ( ) {\n2: int f@1 ( x ) ;\n3: return f@1 ;\n4: }\n"
826:
827:
828: ;
829: $if $(@expr1073743651 $!@expr1073743652 $assertEquals $(@expr1073743653 "cppcheck-2.8/test/testvarid.cpp" $, 829 $, expected@var209 $, $tokenize_ $(@expr1073743654 "cppcheck-2.8/test/testvarid.cpp" $, 829 $, code@var208 $) $) $) { $return ; }
830:
831:
832: const char code2@var210 [@expr1073743655 44 ] =@expr1073743656 "void f() {\n  int  *p;\n  void bar(int *p);\n}"
833:
834:
835: ;
836: const char expected2@var211 [@expr1073743657 63 ] =@expr1073743658 "1: void f ( ) {\n2: int * p@1 ;\n3: void bar ( int * p ) ;\n4: }\n"
837:
838:
839: ;
840: $if $(@expr1073743659 $!@expr1073743660 $assertEquals $(@expr1073743661 "cppcheck-2.8/test/testvarid.cpp" $, 840 $, expected2@var211 $, $tokenize_ $(@expr1073743662 "cppcheck-2.8/test/testvarid.cpp" $, 840 $, code2@var210 $) $) $) { $return ; }
841:
842:
843: const char code3@var212 [@expr1073743663 57 ] =@expr1073743664 "Float f(float scale) {\n    return Float(val * scale);\n}\n"
844:
845: ;
846: const char expected3@var213 [@expr1073743665 73 ] =@expr1073743666 "1: Float f ( float scale@1 ) {\n2: return Float ( val * scale@1 ) ;\n3: }\n"
847:
848: ;
849: $if $(@expr1073743667 $!@expr1073743668 $assertEquals $(@expr1073743669 "cppcheck-2.8/test/testvarid.cpp" $, 849 $, expected3@var213 $, $tokenize_ $(@expr1073743670 "cppcheck-2.8/test/testvarid.cpp" $, 849 $, code3@var212 $) $) $) { $return ; }
850: }
851:
852: void varid36 ( ) {
853: const char code@var214 [@expr1073743671 18 ] =@expr1073743672 "#elif A\nA,a<b<x0\n"
854: ;
855: $tokenize_ $(@expr1073743673 "cppcheck-2.8/test/testvarid.cpp" $, 855 $, code@var214 $) ;
856: $if $(@expr1073743674 $!@expr1073743675 $assertEquals $(@expr1073743676 "cppcheck-2.8/test/testvarid.cpp" $, 856 $, "" $, errout@var100 .@expr1073743677 str (@expr1073743678 ) $) $) { $return ; }
857: }
858:
859: void varid37 ( ) {
860: {
861: const char code@var215 [@expr1073743679 31 ] =@expr1073743680 "void blah() {    Bar bar(*x);}"
862:
863: ;
864: $if $(@expr1073743681 $!@expr1073743682 $assertEquals $(@expr1073743683 "cppcheck-2.8/test/testvarid.cpp" $, 864 $, "1: void blah ( ) { Bar bar@1 ( * x ) ; }\n" $, $tokenize_ $(@expr1073743684 "cppcheck-2.8/test/testvarid.cpp" $, 864 $, code@var215 $) $) $) { $return
865: ; }
866: }
867: {
868: const char code@var216 [@expr1073743685 31 ] =@expr1073743686 "void blah() {    Bar bar(&x);}"
869:
870: ;
871: $if $(@expr1073743687 $!@expr1073743688 $assertEquals $(@expr1073743689 "cppcheck-2.8/test/testvarid.cpp" $, 871 $, "1: void blah ( ) { Bar bar@1 ( & x ) ; }\n" $, $tokenize_ $(@expr1073743690 "cppcheck-2.8/test/testvarid.cpp" $, 871 $, code@var216 $) $) $) { $return
872: ; }
873: }
874: }
875:
876: void varid38 ( ) {
877: const char code@var217 [@expr1073743691 14 ] =@expr1073743692 "FOO class C;\n" ;
878: $if $(@expr1073743693 $!@expr1073743694 $assertEquals $(@expr1073743695 "cppcheck-2.8/test/testvarid.cpp" $, 878 $, "1: FOO class C ;\n" $, $tokenize_ $(@expr1073743696 "cppcheck-2.8/test/testvarid.cpp" $, 878 $, code@var217 $) $) $) { $return
879: ; }
880: }
881:
882: void varid39 ( ) {
883:
884: {
885: const char code@var218 [@expr1073743697 25 ] =@expr1073743698 "void f(FOO::BAR const);\n" ;
886: $if $(@expr1073743699 $!@expr1073743700 $assertEquals $(@expr1073743701 "cppcheck-2.8/test/testvarid.cpp" $, 886 $, "1: void f ( const FOO :: BAR ) ;\n" $, $tokenize_ $(@expr1073743702 "cppcheck-2.8/test/testvarid.cpp" $, 886 $, code@var218 $) $) $) { $return
887: ; }
888: }
889: {
890: const char code@var219 [@expr1073743703 27 ] =@expr1073743704 "static int const SZ = 22;\n" ;
891: $if $(@expr1073743705 $!@expr1073743706 $assertEquals $(@expr1073743707 "cppcheck-2.8/test/testvarid.cpp" $, 891 $, "1: static const int SZ@1 = 22 ;\n" $, $tokenize_ $(@expr1073743708 "cppcheck-2.8/test/testvarid.cpp" $, 891 $, code@var219 , "test.c" $) $) $) { $return
892: ; }
893: }
894: }
895:
896: void varid40 ( ) {
897: const char code@var220 [@expr1073743709 25 ] =@expr1073743710 "extern \"C\" int (*a())();" ;
898: $if $(@expr1073743711 $!@expr1073743712 $assertEquals $(@expr1073743713 "cppcheck-2.8/test/testvarid.cpp" $, 898 $, "1: int * a ( ) ;\n" $, $tokenize_ $(@expr1073743714 "cppcheck-2.8/test/testvarid.cpp" $, 898 $, code@var220 $) $) $) { $return
899: ; }
900: }
901:
902: void varid41 ( ) {
903: const char code1@var221 [@expr1073743715 38 ] =@expr1073743716 "union evt; void f(const evt & event);" ;
904: $if $(@expr1073743717 $!@expr1073743718 $assertEquals $(@expr1073743719 "cppcheck-2.8/test/testvarid.cpp" $, 904 $, "1: union evt ; void f ( const evt & event@1 ) ;\n" $, $tokenize_ $(@expr1073743720 "cppcheck-2.8/test/testvarid.cpp" $, 904 $, code1@var221 , "test.c" $) $) $) { $return
905: ; }
906:
907: const char code2@var222 [@expr1073743721 39 ] =@expr1073743722 "struct evt; void f(const evt & event);" ;
908: $if $(@expr1073743723 $!@expr1073743724 $assertEquals $(@expr1073743725 "cppcheck-2.8/test/testvarid.cpp" $, 908 $, "1: struct evt ; void f ( const evt & event@1 ) ;\n" $, $tokenize_ $(@expr1073743726 "cppcheck-2.8/test/testvarid.cpp" $, 908 $, code2@var222 , "test.c" $) $) $) { $return
909: ; }
910: }
911:
912: void varid42 ( ) {
913: const char code@var223 [@expr1073743727 102 ] =@expr1073743728 "namespace fruit { struct banana {}; };\nclass Fred {\npublic:\n     struct fruit::banana Bananas[25];\n};"
914:
915:
916:
917: ;
918: $if $(@expr1073743729 $!@expr1073743730 $assertEquals $(@expr1073743731 "cppcheck-2.8/test/testvarid.cpp" $, 918 $, "1: namespace fruit { struct banana { } ; } ;\n2: class Fred {\n3: public:\n4: struct fruit :: banana Bananas@1 [ 25 ] ;\n5: } ;\n" $, $tokenize_ $(@expr1073743732 "cppcheck-2.8/test/testvarid.cpp" $, 918 $, code@var223 $) $) $) { $return
919:
|
922:
923: ; }
924: }
925:
926: void varid43 ( ) {
927: const char code@var224 [@expr1073743733 50 ] =@expr1073743734 "int main(int flag) { if(a & flag) { return 1; } }" ;
928: $if $(@expr1073743735 $!@expr1073743736 $assertEquals $(@expr1073743737 "cppcheck-2.8/test/testvarid.cpp" $, 928 $, "1: int main ( int flag@1 ) { if ( a & flag@1 ) { return 1 ; } }\n" $, $tokenize_ $(@expr1073743738 "cppcheck-2.8/test/testvarid.cpp" $, 928 $, code@var224 , "test.c" $) $) $) { $return
929: ; }
930: }
931:
932: void varid44 ( ) {
933: const char code@var225 [@expr1073743739 39 ] =@expr1073743740 "class A:public B,public C,public D {};" ;
934: $if $(@expr1073743741 $!@expr1073743742 $assertEquals $(@expr1073743743 "cppcheck-2.8/test/testvarid.cpp" $, 934 $, "1: class A : public B , public C , public D { } ;\n" $, $tokenize_ $(@expr1073743744 "cppcheck-2.8/test/testvarid.cpp" $, 934 $, code@var225 $) $) $) { $return
935: ; }
936: }
937:
938: void varid45 ( ) {
939: const char code@var226 [@expr1073743745 40 ] =@expr1073743746 "void foo() { B b(this); A a(this, b); }" ;
940: $if $(@expr1073743747 $!@expr1073743748 $assertEquals $(@expr1073743749 "cppcheck-2.8/test/testvarid.cpp" $, 940 $, "1: void foo ( ) { B b@1 ( this ) ; A a@2 ( this , b@1 ) ; }\n" $, $tokenize_ $(@expr1073743750 "cppcheck-2.8/test/testvarid.cpp" $, 940 $, code@var226 $) $) $) { $return
941: ; }
942: }
943:
944: void varid46 ( ) {
945: const char code@var227 [@expr1073743751 54 ] =@expr1073743752 "void foo() { int t; x = (struct t *)malloc(); f(t); }" ;
946: $if $(@expr1073743753 $!@expr1073743754 $assertEquals $(@expr1073743755 "cppcheck-2.8/test/testvarid.cpp" $, 946 $, "1: void foo ( ) { int t@1 ; x = ( struct t * ) malloc ( ) ; f ( t@1 ) ; }\n" $, $tokenize_ $(@expr1073743756 "cppcheck-2.8/test/testvarid.cpp" $, 946 $, code@var227 , "test.c" $) $) $) { $return
947: ; }
948: }
949:
950: void varid47 ( ) {
951:
952: {
953: const char code@var228 [@expr1073743757 49 ] =@expr1073743758 "void f(std::string &string, std::string &len) {}" ;
954: $if $(@expr1073743759 $!@expr1073743760 $assertEquals $(@expr1073743761 "cppcheck-2.8/test/testvarid.cpp" $, 954 $, "1: void f ( std :: string & string@1 , std :: string & len@2 ) { }\n" $, $tokenize_ $(@expr1073743762 "cppcheck-2.8/test/testvarid.cpp" $, 954 $, code@var228 , "test.cpp" $) $) $) { $return
955: ; }
956: }
957:
958:
959: {
960: const char code@var229 [@expr1073743763 43 ] =@expr1073743764 "int x;\nvoid a(int x);\nvoid b() { x = 0; }\n"
961:
962: ;
963: $if $(@expr1073743765 $!@expr1073743766 $assertEquals $(@expr1073743767 "cppcheck-2.8/test/testvarid.cpp" $, 963 $, "1: int x@1 ;\n2: void a ( int x@2 ) ;\n3: void b ( ) { x@1 = 0 ; }\n" $, $tokenize_ $(@expr1073743768 "cppcheck-2.8/test/testvarid.cpp" $, 963 $, code@var229 $) $) $) { $return
964:
965:
966: ; }
967: }
968: }
969:
970: void varid48 ( ) {
971: const char code@var230 [@expr1073743769 39 ] =@expr1073743770 "int X::f(int b) const { return(a*b); }" ;
972: $if $(@expr1073743771 $!@expr1073743772 $assertEquals $(@expr1073743773 "cppcheck-2.8/test/testvarid.cpp" $, 972 $, "1: int X :: f ( int b@1 ) const { return ( a * b@1 ) ; }\n" $, $tokenize_ $(@expr1073743774 "cppcheck-2.8/test/testvarid.cpp" $, 972 $, code@var230 $) $) $) { $return
973: ; }
974: }
975:
976: void varid49 ( ) {
977: const char code@var231 [@expr1073743775 25 ] =@expr1073743776 "void f(std::vector<int>)" ;
978: $if $(@expr1073743777 $!@expr1073743778 $assertEquals $(@expr1073743779 "cppcheck-2.8/test/testvarid.cpp" $, 978 $, "1: void f ( std :: vector < int > )\n" $, $tokenize_ $(@expr1073743780 "cppcheck-2.8/test/testvarid.cpp" $, 978 $, code@var231 , "test.cpp" $) $) $) { $return
979: ; }
980: }
981:
982: void varid50 ( ) {
983: const char code@var232 [@expr1073743781 35 ] =@expr1073743782 "class A { explicit A(const A&); };" ;
984: $if $(@expr1073743783 $!@expr1073743784 $assertEquals $(@expr1073743785 "cppcheck-2.8/test/testvarid.cpp" $, 984 $, "1: class A { explicit A ( const A & ) ; } ;\n" $, $tokenize_ $(@expr1073743786 "cppcheck-2.8/test/testvarid.cpp" $, 984 $, code@var232 , "test.cpp" $) $) $) { $return
985: ; }
986: }
987:
988: void varid51 ( ) {
989: const char code@var233 [@expr1073743787 15 ] =@expr1073743788 "T t; t.x<0>();" ;
990: $if $(@expr1073743789 $!@expr1073743790 $assertEquals $(@expr1073743791 "cppcheck-2.8/test/testvarid.cpp" $, 990 $, "1: T t@1 ; t@1 . x < 0 > ( ) ;\n" $, $tokenize_ $(@expr1073743792 "cppcheck-2.8/test/testvarid.cpp" $, 990 $, code@var233 , "test.cpp" $) $) $) { $return
991: ; }
992: }
993:
994: void varid52 ( ) {
995: const char code@var234 [@expr1073743793 44 ] =@expr1073743794 "A<B<C>::D> e;\nB< C<> > b[10];\nB<C<>> c[10];"
996:
997: ;
998: $if $(@expr1073743795 $!@expr1073743796 $assertEquals $(@expr1073743797 "cppcheck-2.8/test/testvarid.cpp" $, 998 $, "1: A < B < C > :: D > e@1 ;\n2: B < C < > > b@2 [ 10 ] ;\n3: B < C < > > c@3 [ 10 ] ;\n" $, $tokenize_ $(@expr1073743798 "cppcheck-2.8/test/testvarid.cpp" $, 998 $, code@var234 , "test.cpp" $) $) $) { $return
999:
1000:
1001: ; }
1002: }
1003:
1004: void varid53 ( ) {
1005: $if $(@expr1073743799 $!@expr1073743800 $assertEquals $(@expr1073743801 "cppcheck-2.8/test/testvarid.cpp" $, 1005 $, "1: A < & f > list@1 [ 4 ] ;\n" $, $tokenize_ $(@expr1073743802 "cppcheck-2.8/test/testvarid.cpp" $, 1005 $, "A<&f> list[4];" , "test.cpp" $) $) $) { $return
1006: ; }
1007: }
1008:
1009: void varid54 ( ) {
1010:
1011: $tokenize_ $(@expr1073743803 "cppcheck-2.8/test/testvarid.cpp" $, 1011 $, "STATIC ptr_t GC_approx_sp(void) { word sp; sp = (word)&sp; return((ptr_t)sp); }" $) ;
1012: }
1013:
1014: void varid55 ( ) {
1015: const char code@var235 [@expr1073743804 184 ] =@expr1073743805 "typedef struct foo {} foo; void bar1(struct foo foo) {} void baz1(foo foo) {} void bar2(struct foo& foo) {} void baz2(foo& foo) {} void bar3(struct foo* foo) {} void baz3(foo* foo) {}"
1016:
|
1020:
1021: ;
1022: const char expected@var236 [@expr1073743806 239 ] =@expr1073743807 "1: struct foo { } ; void bar1 ( struct foo foo@1 ) { } void baz1 ( struct foo foo@2 ) { } void bar2 ( struct foo & foo@3 ) { } void baz2 ( struct foo & foo@4 ) { } void bar3 ( struct foo * foo@5 ) { } void baz3 ( struct foo * foo@6 ) { }\n"
1023:
|
1028:
1029: ;
1030: $if $(@expr1073743808 $!@expr1073743809 $assertEquals $(@expr1073743810 "cppcheck-2.8/test/testvarid.cpp" $, 1030 $, expected@var236 $, $tokenize_ $(@expr1073743811 "cppcheck-2.8/test/testvarid.cpp" $, 1030 $, code@var235 , "test.cpp" $) $) $) { $return ; }
1031: }
1032:
1033: void varid56 ( ) {
1034: const char code1@var237 [@expr1073743812 49 ] =@expr1073743813 "void fred(int x) throw() {}void wilma() { x++; }"
1035: ;
1036: const char expected1@var238 [@expr1073743814 66 ] =@expr1073743815 "1: void fred ( int x@1 ) throw ( ) { } void wilma ( ) { x ++ ; }\n"
1037:
1038: ;
1039: $if $(@expr1073743816 $!@expr1073743817 $assertEquals $(@expr1073743818 "cppcheck-2.8/test/testvarid.cpp" $, 1039 $, expected1@var238 $, $tokenize_ $(@expr1073743819 "cppcheck-2.8/test/testvarid.cpp" $, 1039 $, code1@var237 , "test.cpp" $) $) $) { $return ; }
1040:
1041: const char code2@var239 [@expr1073743820 61 ] =@expr1073743821 "void fred(int x) const throw(EXCEPT) {}void wilma() { x++; }"
1042: ;
1043: const char expected2@var240 [@expr1073743822 79 ] =@expr1073743823 "1: void fred ( int x@1 ) const throw ( EXCEPT ) { } void wilma ( ) { x ++ ; }\n"
1044:
1045: ;
1046: $if $(@expr1073743824 $!@expr1073743825 $assertEquals $(@expr1073743826 "cppcheck-2.8/test/testvarid.cpp" $, 1046 $, expected2@var240 $, $tokenize_ $(@expr1073743827 "cppcheck-2.8/test/testvarid.cpp" $, 1046 $, code2@var239 , "test.cpp" $) $) $) { $return ; }
1047:
1048: const char code3@var241 [@expr1073743828 54 ] =@expr1073743829 "void fred(int x) throw() ABCD {}void wilma() { x++; }"
1049: ;
1050: const char expected3@var242 [@expr1073743830 66 ] =@expr1073743831 "1: void fred ( int x@1 ) throw ( ) { } void wilma ( ) { x ++ ; }\n"
1051:
1052: ;
1053: $if $(@expr1073743832 $!@expr1073743833 $assertEquals $(@expr1073743834 "cppcheck-2.8/test/testvarid.cpp" $, 1053 $, expected3@var242 $, $tokenize_ $(@expr1073743835 "cppcheck-2.8/test/testvarid.cpp" $, 1053 $, code3@var241 , "test.cpp" $) $) $) { $return ; }
1054:
1055: const char code4@var243 [@expr1073743836 52 ] =@expr1073743837 "void fred(int x) noexcept() {}void wilma() { x++; }"
1056: ;
1057: const char expected4@var244 [@expr1073743838 69 ] =@expr1073743839 "1: void fred ( int x@1 ) noexcept ( ) { } void wilma ( ) { x ++ ; }\n"
1058:
1059: ;
1060: $if $(@expr1073743840 $!@expr1073743841 $assertEquals $(@expr1073743842 "cppcheck-2.8/test/testvarid.cpp" $, 1060 $, expected4@var244 $, $tokenize_ $(@expr1073743843 "cppcheck-2.8/test/testvarid.cpp" $, 1060 $, code4@var243 , "test.cpp" $) $) $) { $return ; }
1061:
1062: const char code5@var245 [@expr1073743844 50 ] =@expr1073743845 "void fred(int x) noexcept {}void wilma() { x++; }"
1063: ;
1064: const char expected5@var246 [@expr1073743846 74 ] =@expr1073743847 "1: void fred ( int x@1 ) noexcept ( true ) { } void wilma ( ) { x ++ ; }\n"
1065:
1066: ;
1067: $if $(@expr1073743848 $!@expr1073743849 $assertEquals $(@expr1073743850 "cppcheck-2.8/test/testvarid.cpp" $, 1067 $, expected5@var246 $, $tokenize_ $(@expr1073743851 "cppcheck-2.8/test/testvarid.cpp" $, 1067 $, code5@var245 , "test.cpp" $) $) $) { $return ; }
1068:
1069: const char code6@var247 [@expr1073743852 60 ] =@expr1073743853 "void fred(int x) noexcept ( false ) {}void wilma() { x++; }"
1070: ;
1071: const char expected6@var248 [@expr1073743854 75 ] =@expr1073743855 "1: void fred ( int x@1 ) noexcept ( false ) { } void wilma ( ) { x ++ ; }\n"
1072:
1073: ;
1074: $if $(@expr1073743856 $!@expr1073743857 $assertEquals $(@expr1073743858 "cppcheck-2.8/test/testvarid.cpp" $, 1074 $, expected6@var248 $, $tokenize_ $(@expr1073743859 "cppcheck-2.8/test/testvarid.cpp" $, 1074 $, code6@var247 , "test.cpp" $) $) $) { $return ; }
1075: }
1076:
1077: void varid57 ( ) {
1078: const char code1@var249 [@expr1073743860 300 ] =@expr1073743861 "void SmoothPath() {\n    {\n        float dfx = (p2p0.x > 0.0f)?\n                    ((n0->xmax() * SQUARE_SIZE) - p0.x):\n                    ((n0->xmin() * SQUARE_SIZE) - p0.x);\n        float tx = dfx / dx;\n        if (hEdge) {\n        }\n        if (vEdge) {\n            pi.z = tx;\n        }\n    }\n}\n"
1079:
|
1089:
1090: ;
1091: const char expected1@var250 [@expr1073743862 289 ] =@expr1073743863 "1: void SmoothPath ( ) {\n2:\n3: float dfx@1 ; dfx@1 = ( p2p0 . x > 0.0f ) ?\n4: ( ( n0 . xmax ( ) * SQUARE_SIZE ) - p0 . x ) :\n5: ( ( n0 . xmin ( ) * SQUARE_SIZE ) - p0 . x ) ;\n6: float tx@2 ; tx@2 = dfx@1 / dx ;\n7: if ( hEdge ) {\n8: }\n9: if ( vEdge ) {\n10: pi . z = tx@2 ;\n11: }\n12:\n13: }\n"
1092:
|
1102:
1103: ;
1104: $if $(@expr1073743864 $!@expr1073743865 $assertEquals $(@expr1073743866 "cppcheck-2.8/test/testvarid.cpp" $, 1104 $, expected1@var250 $, $tokenize_ $(@expr1073743867 "cppcheck-2.8/test/testvarid.cpp" $, 1104 $, code1@var249 , "test.cpp" $) $) $) { $return ; }
1105: }
1106:
1107: void varid58 ( ) {
1108: const char code1@var251 [@expr1073743868 140 ] =@expr1073743869 "void f() {\n    for (int i;\n         ({for(int i;i;++i){i++;}i++;}),i;\n         ({for(int i;i;++i){i++;}i++;}),i++) {\n         i++;\n    }\n}\n"
1109:
|
1113:
1114: ;
1115: const char expected1@var252 [@expr1073743870 207 ] =@expr1073743871 "1: void f ( ) {\n2: for ( int i@1 ;\n3: ( { for ( int i@2 ; i@2 ; ++ i@2 ) { i@2 ++ ; } i@1 ++ ; } ) , i@1 ;\n4: ( { for ( int i@3 ; i@3 ; ++ i@3 ) { i@3 ++ ; } i@1 ++ ; } ) , i@1 ++ ) {\n5: i@1 ++ ;\n6: }\n7: }\n"
1116:
|
1120:
1121: ;
1122: $if $(@expr1073743872 $!@expr1073743873 $assertEquals $(@expr1073743874 "cppcheck-2.8/test/testvarid.cpp" $, 1122 $, expected1@var252 $, $tokenize_ $(@expr1073743875 "cppcheck-2.8/test/testvarid.cpp" $, 1122 $, code1@var251 , "test.cpp" $) $) $) { $return ; }
1123: }
1124:
1125: void varid59 ( ) {
1126: const char code@var253 [@expr1073743876 42 ] =@expr1073743877 "class DLLSYM B;\nstruct B {\n    ~B() {}\n};"
1127:
1128:
1129: ;
1130: const char expected@var254 [@expr1073743878 61 ] =@expr1073743879 "1: class DLLSYM B@1 ;\n2: struct B {\n3: ~ B@1 ( ) { }\n4: } ;\n"
1131:
1132:
1133: ;
1134: const char wanted@var255 [@expr1073743880 59 ] =@expr1073743881 "1: class DLLSYM B@1 ;\n2: struct B {\n3: ~ B ( ) { }\n4: } ;\n"
1135:
1136:
1137: ;
1138: $todoAssertEquals $(@expr1073743882 "cppcheck-2.8/test/testvarid.cpp" $, 1138 $, wanted@var255 $, expected@var254 $, $tokenize_ $(@expr1073743883 "cppcheck-2.8/test/testvarid.cpp" $, 1138 $, code@var253 , "test.cpp" $) $) ;
1139: }
1140:
1141: void varid60 ( ) {
1142: $if $(@expr1073743884 $!@expr1073743885 $assertEquals $(@expr1073743886 "cppcheck-2.8/test/testvarid.cpp" $, 1142 $, "1: a = ( x y ) 10 ;\n" $, $tokenize_ $(@expr1073743887 "cppcheck-2.8/test/testvarid.cpp" $, 1142 $, "a=(x y)10;" $) $) $) { $return
1143: ; }
1144: }
1145:
1146: void varid61 ( ) {
1147: const char code@var256 [@expr1073743888 48 ] =@expr1073743889 "void foo(int b) {\n  void bar(int a, int b) {}\n}"
1148:
1149: ;
1150: const char expected@var257 [@expr1073743890 70 ] =@expr1073743891 "1: void foo ( int b@1 ) {\n2: void bar ( int a@2 , int b@3 ) { }\n3: }\n"
1151:
1152: ;
1153: $if $(@expr1073743892 $!@expr1073743893 $assertEquals $(@expr1073743894 "cppcheck-2.8/test/testvarid.cpp" $, 1153 $, expected@var257 $, $tokenize_ $(@expr1073743895 "cppcheck-2.8/test/testvarid.cpp" $, 1153 $, code@var256 $) $) $) { $return ; }
1154: }
1155:
1156: void varid62 ( ) {
1157: const char code@var258 [@expr1073743896 114 ] =@expr1073743897 "void bar(int,int);\nvoid f() {\n    for (size_t c = 0; c < 42; ++c) {\n        int x;\n        bar(r, r * x);\n    }\n}"
1158:
|
1162:
1163: ;
1164:
1165: $if $(@expr1073743898 $!@expr1073743899 $assertEquals $(@expr1073743900 "cppcheck-2.8/test/testvarid.cpp" $, 1165 $, "same varid" $, $compareVaridsForVariable_ $(@expr1073743901 "cppcheck-2.8/test/testvarid.cpp" $, 1165 $, code@var258 , "x" $) $) $) { $return ; }
1166: }
1167:
1168: void varid63 ( ) {
1169: const char code@var259 [@expr1073743902 41 ] =@expr1073743903 "void f(boost::optional<int> const& x) {}" ;
1170: const char expected@var260 [@expr1073743904 57 ] =@expr1073743905 "1: void f ( const boost :: optional < int > & x@1 ) { }\n" ;
1171: $if $(@expr1073743906 $!@expr1073743907 $assertEquals $(@expr1073743908 "cppcheck-2.8/test/testvarid.cpp" $, 1171 $, expected@var260 $, $tokenize_ $(@expr1073743909 "cppcheck-2.8/test/testvarid.cpp" $, 1171 $, code@var259 $) $) $) { $return ; }
1172: }
1173:
1174: void varid64 ( ) {
1175: const char code@var261 [@expr1073743910 29 ] =@expr1073743911 "extern const char (*x[256]);" ;
1176: const char expected@var262 [@expr1073743912 42 ] =@expr1073743913 "1: extern const char ( * x@1 [ 256 ] ) ;\n" ;
1177: $if $(@expr1073743914 $!@expr1073743915 $assertEquals $(@expr1073743916 "cppcheck-2.8/test/testvarid.cpp" $, 1177 $, expected@var262 $, $tokenize_ $(@expr1073743917 "cppcheck-2.8/test/testvarid.cpp" $, 1177 $, code@var261 $) $) $) { $return ; }
1178: }
1179:
1180: void varid65 ( ) {
1181: {
1182: const char code@var263 [@expr1073743918 17 ] =@expr1073743919 "extern int (*p);" ;
1183: const char expected@var264 [@expr1073743920 27 ] =@expr1073743921 "1: extern int ( * p@1 ) ;\n" ;
1184: $if $(@expr1073743922 $!@expr1073743923 $assertEquals $(@expr1073743924 "cppcheck-2.8/test/testvarid.cpp" $, 1184 $, expected@var264 $, $tokenize_ $(@expr1073743925 "cppcheck-2.8/test/testvarid.cpp" $, 1184 $, code@var263 $) $) $) { $return ; }
1185: }
1186: {
1187: const char code@var265 [@expr1073743926 16 ] =@expr1073743927 "extern int (i);" ;
1188: const char expected@var266 [@expr1073743928 25 ] =@expr1073743929 "1: extern int ( i@1 ) ;\n" ;
1189: $if $(@expr1073743930 $!@expr1073743931 $assertEquals $(@expr1073743932 "cppcheck-2.8/test/testvarid.cpp" $, 1189 $, expected@var266 $, $tokenize_ $(@expr1073743933 "cppcheck-2.8/test/testvarid.cpp" $, 1189 $, code@var265 $) $) $) { $return ; }
1190: }
1191: {
1192: const char code@var267 [@expr1073743934 10 ] =@expr1073743935 "int (*p);" ;
1193: const char expected@var268 [@expr1073743936 20 ] =@expr1073743937 "1: int ( * p@1 ) ;\n" ;
1194: $if $(@expr1073743938 $!@expr1073743939 $assertEquals $(@expr1073743940 "cppcheck-2.8/test/testvarid.cpp" $, 1194 $, expected@var268 $, $tokenize_ $(@expr1073743941 "cppcheck-2.8/test/testvarid.cpp" $, 1194 $, code@var267 $) $) $) { $return ; }
1195: }
1196: {
1197: const char code@var269 [@expr1073743942 9 ] =@expr1073743943 "int (i);" ;
1198: const char expected@var270 [@expr1073743944 18 ] =@expr1073743945 "1: int ( i@1 ) ;\n" ;
1199: $if $(@expr1073743946 $!@expr1073743947 $assertEquals $(@expr1073743948 "cppcheck-2.8/test/testvarid.cpp" $, 1199 $, expected@var270 $, $tokenize_ $(@expr1073743949 "cppcheck-2.8/test/testvarid.cpp" $, 1199 $, code@var269 $) $) $) { $return ; }
1200: }
1201: }
1202:
1203: void varid_for_1 ( ) {
1204: const char code@var271 [@expr1073743950 52 ] =@expr1073743951 "void foo(int a, int b) {\n  for (int a=1,b=2;;) {}\n}"
1205:
1206: ;
1207: const char expected@var272 [@expr1073743952 83 ] =@expr1073743953 "1: void foo ( int a@1 , int b@2 ) {\n2: for ( int a@3 = 1 , b@4 = 2 ; ; ) { }\n3: }\n"
1208:
1209: ;
1210: $if $(@expr1073743954 $!@expr1073743955 $assertEquals $(@expr1073743956 "cppcheck-2.8/test/testvarid.cpp" $, 1210 $, expected@var272 $, $tokenize_ $(@expr1073743957 "cppcheck-2.8/test/testvarid.cpp" $, 1210 $, code@var271 $) $) $) { $return ; }
1211: }
1212:
1213: void varid_for_2 ( ) {
1214: const char code@var273 [@expr1073743958 59 ] =@expr1073743959 "void foo(int a, int b) {\n  for (int a=f(x,y,z),b=2;;) {}\n}"
1215:
1216: ;
1217: const char expected@var274 [@expr1073743960 97 ] =@expr1073743961 "1: void foo ( int a@1 , int b@2 ) {\n2: for ( int a@3 = f ( x , y , z ) , b@4 = 2 ; ; ) { }\n3: }\n"
1218:
1219: ;
1220: $if $(@expr1073743962 $!@expr1073743963 $assertEquals $(@expr1073743964 "cppcheck-2.8/test/testvarid.cpp" $, 1220 $, expected@var274 $, $tokenize_ $(@expr1073743965 "cppcheck-2.8/test/testvarid.cpp" $, 1220 $, code@var273 $) $) $) { $return ; }
1221: }
1222:
1223: void varid_cpp_keywords_in_c_code ( ) {
1224: const char code@var275 [@expr1073743966 40 ] =@expr1073743967 "void f() {\n    delete d;\n    throw t;\n}"
1225:
1226:
1227: ;
1228:
1229: const char expected@var276 [@expr1073743968 53 ] =@expr1073743969 "1: void f ( ) {\n2: delete d@1 ;\n3: throw t@2 ;\n4: }\n"
1230:
1231:
1232: ;
1233:
1234: $if $(@expr1073743970 $!@expr1073743971 $assertEquals $(@expr1073743972 "cppcheck-2.8/test/testvarid.cpp" $, 1234 $, expected@var276 $, $tokenize_ $(@expr1073743973 "cppcheck-2.8/test/testvarid.cpp" $, 1234 $, code@var275 , "test.c" $) $) $) { $return ; }
1235: }
1236:
1237: void varid_cpp_keywords_in_c_code2 ( ) {
1238: const char code@var277 [@expr1073743974 366 ] =@expr1073743975 "int clear_extent_bit(struct extent_io_tree *tree, u64 start, u64 end, unsigned long bits, int wake, int delete, struct extent_state **cached_state, gfp_t mask) {\n  struct extent_state *state;\n}int clear_extent_dirty() {\n  return clear_extent_bit(tree, start, end, EXTENT_DIRTY | EXTENT_DELALLOC |                           EXTENT_DO_ACCOUNTING, 0, 0, NULL, mask);\n}"
1239:
|
1245:
1246: ;
1247: $tokenize_ $(@expr1073743976 "cppcheck-2.8/test/testvarid.cpp" $, 1247 $, code@var277 , "test.c" $) ;
1248: }
1249:
1250: void varidFunctionCall1 ( ) {
1251: const char code@var278 [@expr1073743977 43 ] =@expr1073743978 "void f() {\n    int x;\n    x = a(y*x,10);\n}"
1252:
1253:
1254: ;
1255: const char expected@var279 [@expr1073743979 65 ] =@expr1073743980 "1: void f ( ) {\n2: int x@1 ;\n3: x@1 = a ( y * x@1 , 10 ) ;\n4: }\n"
1256:
1257:
1258: ;
1259: $if $(@expr1073743981 $!@expr1073743982 $assertEquals $(@expr1073743983 "cppcheck-2.8/test/testvarid.cpp" $, 1259 $, expected@var279 $, $tokenize_ $(@expr1073743984 "cppcheck-2.8/test/testvarid.cpp" $, 1259 $, code@var278 , "test.c" $) $) $) { $return ; }
1260: }
1261:
1262: void varidFunctionCall2 ( ) {
1263:
1264: const char code@var280 [@expr1073743985 33 ] =@expr1073743986 "void f(int b) {\n    x(a*b,10);\n}"
1265:
1266: ;
1267: const std ::@expr1073743987 string expected1@var281 (@expr1073743988 "1: void f ( int b@1 ) {\n2: x ( a * b"
1268: ) ;
1269: const std ::@expr1073743989 string expected2@var282 (@expr1073743990 " , 10 ) ;\n3: }\n"
1270: ) ;
1271: $if $(@expr1073743991 $!@expr1073743992 $assertEquals $(@expr1073743993 "cppcheck-2.8/test/testvarid.cpp" $, 1271 $, expected1@var281 +@expr1073743994 "@1" +@expr1073743995 expected2@var282 $, $tokenize_ $(@expr1073743996 "cppcheck-2.8/test/testvarid.cpp" $, 1271 $, code@var280 , "test.c" $) $) $) { $return ; }
1272: }
1273:
1274: void varidFunctionCall3 ( ) {
1275:
1276: const char code@var283 [@expr1073743997 60 ] =@expr1073743998 "void f() {\n    int a = 0;\n    int b = c - (foo::bar * a);\n}"
1277:
1278:
1279: ;
1280:
1281: const char expected@var284 [@expr1073743999 91 ] =@expr1073744000 "1: void f ( ) {\n2: int a@1 ; a@1 = 0 ;\n3: int b@2 ; b@2 = c - ( foo :: bar * a@1 ) ;\n4: }\n"
1282:
1283:
1284: ;
1285:
1286: $if $(@expr1073744001 $!@expr1073744002 $assertEquals $(@expr1073744003 "cppcheck-2.8/test/testvarid.cpp" $, 1286 $, expected@var284 $, $tokenize_ $(@expr1073744004 "cppcheck-2.8/test/testvarid.cpp" $, 1286 $, code@var283 $) $) $) { $return ; }
1287: }
1288:
1289: void varidFunctionCall4 ( ) {
1290:
1291: const char code1@var285 [@expr1073744005 32 ] =@expr1073744006 "void f() { int x; fun(a,b*x); }" ;
1292: $if $(@expr1073744007 $!@expr1073744008 $assertEquals $(@expr1073744009 "cppcheck-2.8/test/testvarid.cpp" $, 1292 $, "1: void f ( ) { int x@1 ; fun ( a , b * x@1 ) ; }\n" $, $tokenize_ $(@expr1073744010 "cppcheck-2.8/test/testvarid.cpp" $, 1292 $, code1@var285 , "test.c" $) $) $) { $return
1293: ; }
1294: const char code2@var286 [@expr1073744011 37 ] =@expr1073744012 "void f(int a) { int x; fun(a,b*x); }" ;
1295: $if $(@expr1073744013 $!@expr1073744014 $assertEquals $(@expr1073744015 "cppcheck-2.8/test/testvarid.cpp" $, 1295 $, "1: void f ( int a@1 ) { int x@2 ; fun ( a@1 , b * x@2 ) ; }\n" $, $tokenize_ $(@expr1073744016 "cppcheck-2.8/test/testvarid.cpp" $, 1295 $, code2@var286 , "test.c" $) $) $) { $return
1296: ; }
1297: }
1298:
1299: void varidFunctionCall5 ( ) {
1300: const char code@var287 [@expr1073744017 32 ] =@expr1073744018 "void foo() { (f(x[2]))(x[2]); }" ;
1301: $if $(@expr1073744019 $!@expr1073744020 $assertEquals $(@expr1073744021 "cppcheck-2.8/test/testvarid.cpp" $, 1301 $, "1: void foo ( ) { f ( x [ 2 ] ) ( x [ 2 ] ) ; }\n" $, $tokenize_ $(@expr1073744022 "cppcheck-2.8/test/testvarid.cpp" $, 1301 $, code@var287 , "test.c" $) $) $) { $return
1302: ; }
1303: }
1304:
1305: void varidStl ( ) {
1306: const std ::@expr1073744023 string actual@var288 =@expr1073744024 $tokenize_ $(@expr1073744025 "cppcheck-2.8/test/testvarid.cpp" $, 1306 $, "list<int> ints;\nlist<int>::iterator it;\nstd::vector<std::string> dirs;\nstd::map<int, int> coords;\nstd::tr1::unordered_map<int, int> xy;\nstd::list<boost::wave::token_id> tokens;\nstatic std::vector<CvsProcess*> ex1;\nextern std::vector<CvsProcess*> ex2;\nstd::map<int, 1> m;" $)
1307:
|
1314:
1315: ;
1316:
1317: const char expected@var289 [@expr1073744026 382 ] =@expr1073744027 "1: list < int > ints@1 ;\n2: list < int > :: iterator it@2 ;\n3: std :: vector < std :: string > dirs@3 ;\n4: std :: map < int , int > coords@4 ;\n5: std :: tr1 :: unordered_map < int , int > xy@5 ;\n6: std :: list < boost :: wave :: token_id > tokens@6 ;\n7: static std :: vector < CvsProcess * > ex1@7 ;\n8: extern std :: vector < CvsProcess * > ex2@8 ;\n9: std :: map < int , 1 > m@9 ;\n"
1318:
|
1324:
1325: ;
1326:
1327: $if $(@expr1073744028 $!@expr1073744029 $assertEquals $(@expr1073744030 "cppcheck-2.8/test/testvarid.cpp" $, 1327 $, expected@var289 $, actual@var288 $) $) { $return ; }
1328: }
1329:
1330: void varidStl2 ( ) {
1331: const std ::@expr1073744031 string actual@var290 =@expr1073744032 $tokenize_ $(@expr1073744033 "cppcheck-2.8/test/testvarid.cpp" $, 1331 $, "std::bitset<static_cast<int>(2)> x;" $) ;
1332:
1333: const char expected@var291 [@expr1073744034 54 ] =@expr1073744035 "1: std :: bitset < static_cast < int > ( 2 ) > x@1 ;\n" ;
1334:
1335: $if $(@expr1073744036 $!@expr1073744037 $assertEquals $(@expr1073744038 "cppcheck-2.8/test/testvarid.cpp" $, 1335 $, expected@var291 $, actual@var290 $) $) { $return ; }
1336: }
1337:
1338: void varid_newauto ( ) {
1339: $if $(@expr1073744039 $!@expr1073744040 $assertEquals $(@expr1073744041 "cppcheck-2.8/test/testvarid.cpp" $, 1339 $, "1: void f ( ) { const new auto ( 0 ) ; }\n" $, $tokenize_ $(@expr1073744042 "cppcheck-2.8/test/testvarid.cpp" $, 1339 $, "void f(){new const auto(0);}" $) $) $) { $return
1340: ; }
1341: }
1342:
1343: void varid_delete ( ) {
1344: const std ::@expr1073744043 string actual@var292 =@expr1073744044 $tokenize_ $(@expr1073744045 "cppcheck-2.8/test/testvarid.cpp" $, 1344 $, "void f()\n{\n  int *a;\n  delete a;\n}" $)
1345:
|
1348:
1349: ;
1350:
1351: const char expected@var293 [@expr1073744046 56 ] =@expr1073744047 "1: void f ( )\n2: {\n3: int * a@1 ;\n4: delete a@1 ;\n5: }\n"
1352:
1353:
1354:
1355: ;
1356:
1357: $if $(@expr1073744048 $!@expr1073744049 $assertEquals $(@expr1073744050 "cppcheck-2.8/test/testvarid.cpp" $, 1357 $, expected@var293 $, actual@var292 $) $) { $return ; }
1358: }
1359:
1360: void varid_functions ( ) {
1361: {
1362: const std ::@expr2227 string actual@var294 =@expr1073744052 $tokenize_ $(@expr1073744053 "cppcheck-2.8/test/testvarid.cpp" $, 1362 $, "void f();\nvoid f(){}\n" , "test.c" $)
1363:
1364: ;
1365:
1366: const char expected@var295 [@expr1073744054 35 ] =@expr1073744055 "1: void f ( ) ;\n2: void f ( ) { }\n"
1367: ;
1368:
1369: $if $(@expr1073744056 $!@expr1073744057 $assertEquals $(@expr1073744058 "cppcheck-2.8/test/testvarid.cpp" $, 1369 $, expected@var295 $, actual@var294 $) $) { $return ; }
1370: }
1371:
1372: {
1373: const std ::@expr2227 string actual@var296 =@expr1073744060 $tokenize_ $(@expr1073744061 "cppcheck-2.8/test/testvarid.cpp" $, 1373 $, "A f(3);\nA f2(true);\nA g();\nA e(int c);\n" , "test.c" $)
1374:
1375:
1376:
1377: ;
1378:
1379: const char expected@var297 [@expr1073744062 73 ] =@expr1073744063 "1: A f@1 ( 3 ) ;\n2: A f2@2 ( true ) ;\n3: A g ( ) ;\n4: A e ( int c@3 ) ;\n"
1380:
1381:
1382: ;
1383:
1384: $if $(@expr1073744064 $!@expr1073744065 $assertEquals $(@expr1073744066 "cppcheck-2.8/test/testvarid.cpp" $, 1384 $, expected@var297 $, actual@var296 $) $) { $return ; }
1385: }
1386:
1387: {
1388: const std ::@expr2227 string actual@var298 =@expr1073744068 $tokenize_ $(@expr1073744069 "cppcheck-2.8/test/testvarid.cpp" $, 1388 $, "void f1(int &p)\n{\n    p = 0;\n}\nvoid f2(std::string &str)\n{\n   str.clear();\n}\nvoid f3(const std::string &s)\n{\n    s.size();\n}" $)
1389:
|
1399:
1400: ;
1401:
1402: const char expected@var299 [@expr1073744070 193 ] =@expr1073744071 "1: void f1 ( int & p@1 )\n2: {\n3: p@1 = 0 ;\n4: }\n5: void f2 ( std :: string & str@2 )\n6: {\n7: str@2 . clear ( ) ;\n8: }\n9: void f3 ( const std :: string & s@3 )\n10: {\n11: s@3 . size ( ) ;\n12: }\n"
1403:
|
1412:
1413: ;
1414:
1415: $if $(@expr1073744072 $!@expr1073744073 $assertEquals $(@expr1073744074 "cppcheck-2.8/test/testvarid.cpp" $, 1415 $, expected@var299 $, actual@var298 $) $) { $return ; }
1416: }
1417:
1418: {
1419: const std ::@expr2227 string actual@var300 =@expr1073744076 $tokenize_ $(@expr1073744077 "cppcheck-2.8/test/testvarid.cpp" $, 1419 $, "void f(struct foobar);" , "test.c" $) ;
1420: const char expected@var301 [@expr1073744078 31 ] =@expr1073744079 "1: void f ( struct foobar ) ;\n" ;
1421: $if $(@expr1073744080 $!@expr1073744081 $assertEquals $(@expr1073744082 "cppcheck-2.8/test/testvarid.cpp" $, 1421 $, expected@var301 $, actual@var300 $) $) { $return ; }
1422: }
1423:
1424: {
1425: const std ::@expr2227 string actual@var302 =@expr1073744084 $tokenize_ $(@expr1073744085 "cppcheck-2.8/test/testvarid.cpp" $, 1425 $, "bool f(X x, int=3);" , "test.cpp" $) ;
1426: const char expected@var303 [@expr1073744086 33 ] =@expr1073744087 "1: bool f ( X x@1 , int = 3 ) ;\n" ;
1427: $if $(@expr1073744088 $!@expr1073744089 $assertEquals $(@expr1073744090 "cppcheck-2.8/test/testvarid.cpp" $, 1427 $, expected@var303 $, actual@var302 $) $) { $return ; }
1428: }
1429: }
1430:
1431: void varid_sizeof ( ) {
1432: const char code@var304 [@expr1073744091 17 ] =@expr1073744092 "x = sizeof(a*b);" ;
1433: const char expected@var305 [@expr1073744093 27 ] =@expr1073744094 "1: x = sizeof ( a * b ) ;\n" ;
1434: $if $(@expr1073744095 $!@expr1073744096 $assertEquals $(@expr1073744097 "cppcheck-2.8/test/testvarid.cpp" $, 1434 $, expected@var305 $, $tokenize_ $(@expr1073744098 "cppcheck-2.8/test/testvarid.cpp" $, 1434 $, code@var304 , "test.c" $) $) $) { $return ; }
1435: }
1436:
1437: void varid_reference_to_containers ( ) {
1438: const std ::@expr1073744099 string actual@var306 =@expr1073744100 $tokenize_ $(@expr1073744101 "cppcheck-2.8/test/testvarid.cpp" $, 1438 $, "void f()\n{\n    std::vector<int> b;\n    std::vector<int> &a = b;\n    std::vector<int> *c = &b;\n}" $)
1439:
|
1443:
1444: ;
1445:
1446: const char expected@var307 [@expr1073744102 142 ] =@expr1073744103 "1: void f ( )\n2: {\n3: std :: vector < int > b@1 ;\n4: std :: vector < int > & a@2 = b@1 ;\n5: std :: vector < int > * c@3 ; c@3 = & b@1 ;\n6: }\n"
1447:
|
1450:
1451: ;
1452:
1453: $if $(@expr1073744104 $!@expr1073744105 $assertEquals $(@expr1073744106 "cppcheck-2.8/test/testvarid.cpp" $, 1453 $, expected@var307 $, actual@var306 $) $) { $return ; }
1454: }
1455:
1456: void varid_in_class1 ( ) {
1457: {
1458: const std ::@expr2283 string actual@var308 =@expr1073744108 $tokenize_ $(@expr1073744109 "cppcheck-2.8/test/testvarid.cpp" $, 1458 $, "class Foo\n{\npublic:\n    std::string name1;\n    std::string name2;\n};" $)
1459:
|
1463:
1464: ;
1465:
1466: const char expected@var309 [@expr1073744110 91 ] =@expr1073744111 "1: class Foo\n2: {\n3: public:\n4: std :: string name1@1 ;\n5: std :: string name2@2 ;\n6: } ;\n"
1467:
|
1470:
1471: ;
1472:
1473: $if $(@expr1073744112 $!@expr1073744113 $assertEquals $(@expr1073744114 "cppcheck-2.8/test/testvarid.cpp" $, 1473 $, expected@var309 $, actual@var308 $) $) { $return ; }
1474: }
1475:
1476: {
1477: const std ::@expr2283 string actual@var310 =@expr1073744116 $tokenize_ $(@expr1073744117 "cppcheck-2.8/test/testvarid.cpp" $, 1477 $, "class foo\n{\npublic:\n    void do_something(const int x, const int y);\n    void bar();\n};\n\nvoid foo::bar()\n{\n    POINT pOutput = { 0 , 0 };\n    int x = pOutput.x;\n    int y = pOutput.y;\n}" $)
1478:
|
1489:
1490: ;
1491:
1492: const char expected@var311 [@expr1073744118 271 ] =@expr1073744119 "1: class foo\n2: {\n3: public:\n4: void do_something ( const int x@1 , const int y@2 ) ;\n5: void bar ( ) ;\n6: } ;\n7:\n8: void foo :: bar ( )\n9: {\n10: POINT pOutput@3 ; pOutput@3 = { 0 , 0 } ;\n11: int x@4 ; x@4 = pOutput@3 . x@5 ;\n12: int y@6 ; y@6 = pOutput@3 . y@7 ;\n13: }\n"
1493:
|
1503:
1504: ;
1505:
1506: $if $(@expr1073744120 $!@expr1073744121 $assertEquals $(@expr1073744122 "cppcheck-2.8/test/testvarid.cpp" $, 1506 $, expected@var311 $, actual@var310 $) $) { $return ; }
1507: }
1508: }
1509:
1510: void varid_in_class2 ( ) {
1511: const std ::@expr1073744123 string actual@var312 =@expr1073744124 $tokenize_ $(@expr1073744125 "cppcheck-2.8/test/testvarid.cpp" $, 1511 $, "struct Foo {\n    int x;\n};\n\nstruct Bar {\n    Foo foo;\n    int x;\n    void f();\n};\n\nvoid Bar::f()\n{\n    foo.x = x;\n}" $)
1512:
|
1524:
1525: ;
1526: const char expected@var313 [@expr1073744126 169 ] =@expr1073744127 "1: struct Foo {\n2: int x@1 ;\n3: } ;\n4:\n5: struct Bar {\n6: Foo foo@2 ;\n7: int x@3 ;\n8: void f ( ) ;\n9: } ;\n10:\n11: void Bar :: f ( )\n12: {\n13: foo@2 . x@4 = x@3 ;\n14: }\n"
1527:
|
1538:
1539: ;
1540: $if $(@expr1073744128 $!@expr1073744129 $assertEquals $(@expr1073744130 "cppcheck-2.8/test/testvarid.cpp" $, 1540 $, expected@var313 $, actual@var312 $) $) { $return ; }
1541: }
1542:
1543: void varid_in_class3 ( ) {
1544: const char code@var314 [@expr1073744131 72 ] =@expr1073744132 "class Foo {\n    void blah() {\n        Bar x(*this);\n    }\n    int x;\n};"
1545:
|
1548:
1549: ;
1550: $if $(@expr1073744133 $!@expr1073744134 $assertEquals $(@expr1073744135 "cppcheck-2.8/test/testvarid.cpp" $, 1550 $, "1: class Foo {\n2: void blah ( ) {\n3: Bar x@1 ( * this ) ;\n4: }\n5: int x@2 ;\n6: } ;\n" $, $tokenize_ $(@expr1073744136 "cppcheck-2.8/test/testvarid.cpp" $, 1550 $, code@var314 $) $) $) { $return
1551:
|
1554:
1555: ; }
1556: }
1557:
1558: void varid_in_class4 ( ) {
1559: const char code@var315 [@expr1073744137 32 ] =@expr1073744138 "class Foo {\npublic: class C;\n};"
1560:
1561: ;
1562: $if $(@expr1073744139 $!@expr1073744140 $assertEquals $(@expr1073744141 "cppcheck-2.8/test/testvarid.cpp" $, 1562 $, "1: class Foo {\n2: public: class C ;\n3: } ;\n" $, $tokenize_ $(@expr1073744142 "cppcheck-2.8/test/testvarid.cpp" $, 1562 $, code@var315 $) $) $) { $return
1563:
1564:
1565: ; }
1566: }
1567:
1568: void varid_in_class5 ( ) {
1569: const char code@var316 [@expr1073744143 39 ] =@expr1073744144 "struct Foo {\n    std::vector<::X> v;\n}"
1570:
1571: ;
1572: $if $(@expr1073744145 $!@expr1073744146 $assertEquals $(@expr1073744147 "cppcheck-2.8/test/testvarid.cpp" $, 1572 $, "1: struct Foo {\n2: std :: vector < :: X > v@1 ;\n3: }\n" $, $tokenize_ $(@expr1073744148 "cppcheck-2.8/test/testvarid.cpp" $, 1572 $, code@var316 $) $) $) { $return
1573:
1574:
1575: ; }
1576: }
1577:
1578: void varid_in_class6 ( ) {
1579: const char code@var317 [@expr1073744149 105 ] =@expr1073744150 "class A {\n    void f(const char *str) const {\n        std::stringstream sst;\n        sst.str();\n    }\n};"
1580:
|
1583:
1584: ;
1585: $if $(@expr1073744151 $!@expr1073744152 $assertEquals $(@expr1073744153 "cppcheck-2.8/test/testvarid.cpp" $, 1585 $, "1: class A {\n2: void f ( const char * str@1 ) const {\n3: std :: stringstream sst@2 ;\n4: sst@2 . str ( ) ;\n5: }\n6: } ;\n" $, $tokenize_ $(@expr1073744154 "cppcheck-2.8/test/testvarid.cpp" $, 1585 $, code@var317 $) $) $) { $return
1586:
|
1590:
1591: ; }
1592: }
1593:
1594: void varid_in_class7 ( ) {
1595: const char code@var318 [@expr1073744155 73 ] =@expr1073744156 "class A {\n    void f() {\n        abc.a = 0;\n    }\n    struct ABC abc;\n};"
1596:
|
1599:
1600: ;
1601: $if $(@expr1073744157 $!@expr1073744158 $assertEquals $(@expr1073744159 "cppcheck-2.8/test/testvarid.cpp" $, 1601 $, "1: class A {\n2: void f ( ) {\n3: abc@1 . a@2 = 0 ;\n4: }\n5: struct ABC abc@1 ;\n6: } ;\n" $, $tokenize_ $(@expr1073744160 "cppcheck-2.8/test/testvarid.cpp" $, 1601 $, code@var318 $) $) $) { $return
1602:
|
1606:
1607: ; }
1608: }
1609:
1610: void varid_in_class8 ( ) {
1611: const char code@var319 [@expr1073744161 50 ] =@expr1073744162 "class A {\n  UNKNOWN_MACRO(A)\nprivate:\n  int x;\n};"
1612:
1613:
1614:
1615: ;
1616: $if $(@expr1073744163 $!@expr1073744164 $assertEquals $(@expr1073744165 "cppcheck-2.8/test/testvarid.cpp" $, 1616 $, "1: class A {\n2: UNKNOWN_MACRO ( A )\n3: private:\n4: int x@1 ;\n5: } ;\n" $, $tokenize_ $(@expr1073744166 "cppcheck-2.8/test/testvarid.cpp" $, 1616 $, code@var319 $) $) $) { $return
1617:
|
1620:
1621: ; }
1622: }
1623:
1624: void varid_in_class9 ( ) {
1625: const char code1@var320 [@expr1073744167 89 ] =@expr1073744168 "class A {\n  int var;\npublic:\n  void setVar();\n};\nvoid A::setVar() {\n  this->var = var;\n}"
1626:
|
1631:
1632: ;
1633: $if $(@expr1073744169 $!@expr1073744170 $assertEquals $(@expr1073744171 "cppcheck-2.8/test/testvarid.cpp" $, 1633 $, "1: class A {\n2: int var@1 ;\n3: public:\n4: void setVar ( ) ;\n5: } ;\n6: void A :: setVar ( ) {\n7: this . var@1 = var@1 ;\n8: }\n" $, $tokenize_ $(@expr1073744172 "cppcheck-2.8/test/testvarid.cpp" $, 1633 $, code1@var320 $) $) $) { $return
1634:
|
1640:
1641: ; }
1642:
1643: const char code2@var321 [@expr1073744173 131 ] =@expr1073744174 "class Foo : public FooBase {\n    void Clone(FooBase& g);\n    short m_bar;\n};\nvoid Foo::Clone(FooBase& g) {\n    g->m_bar = m_bar;\n}"
1644:
|
1648:
1649: ;
1650: $if $(@expr1073744175 $!@expr1073744176 $assertEquals $(@expr1073744177 "cppcheck-2.8/test/testvarid.cpp" $, 1650 $, "1: class Foo : public FooBase {\n2: void Clone ( FooBase & g@1 ) ;\n3: short m_bar@2 ;\n4: } ;\n5: void Foo :: Clone ( FooBase & g@3 ) {\n6: g@3 . m_bar@4 = m_bar@2 ;\n7: }\n" $, $tokenize_ $(@expr1073744178 "cppcheck-2.8/test/testvarid.cpp" $, 1650 $, code2@var321 $) $) $) { $return
1651:
|
1656:
1657: ; }
1658: }
1659:
1660: void varid_in_class10 ( ) {
1661: const char code@var322 [@expr1073744179 142 ] =@expr1073744180 "class Foo : public FooBase {\n    void Clone(FooBase& g);\n    short m_bar;\n};\nvoid Foo::Clone(FooBase& g) {\n    ((FooBase)g)->m_bar = m_bar;\n}"
1662:
|
1666:
1667: ;
1668: $if $(@expr1073744181 $!@expr1073744182 $assertEquals $(@expr1073744183 "cppcheck-2.8/test/testvarid.cpp" $, 1668 $, "1: class Foo : public FooBase {\n2: void Clone ( FooBase & g@1 ) ;\n3: short m_bar@2 ;\n4: } ;\n5: void Foo :: Clone ( FooBase & g@3 ) {\n6: ( ( FooBase ) g@3 ) . m_bar@4 = m_bar@2 ;\n7: }\n" $, $tokenize_ $(@expr1073744184 "cppcheck-2.8/test/testvarid.cpp" $, 1668 $, code@var322 $) $) $) { $return
1669:
|
1674:
1675: ; }
1676: }
1677:
1678: void varid_in_class11 ( ) {
1679: const char code1@var323 [@expr1073744185 68 ] =@expr1073744186 "class Foo {\n    union { float a; int b; };\n    void f() { a=0; }\n};"
1680:
1681:
1682: ;
1683: $if $(@expr1073744187 $!@expr1073744188 $assertEquals $(@expr1073744189 "cppcheck-2.8/test/testvarid.cpp" $, 1683 $, "1: class Foo {\n2: union { float a@1 ; int b@2 ; } ;\n3: void f ( ) { a@1 = 0 ; }\n4: } ;\n" $, $tokenize_ $(@expr1073744190 "cppcheck-2.8/test/testvarid.cpp" $, 1683 $, code1@var323 $) $) $) { $return
1684:
1685:
1686:
1687: ; }
1688:
1689: const char code2@var324 [@expr1073744191 68 ] =@expr1073744192 "class Foo {\n    void f() { a=0; }\n    union { float a; int b; };\n};"
1690:
1691:
1692: ;
1693: $if $(@expr1073744193 $!@expr1073744194 $assertEquals $(@expr1073744195 "cppcheck-2.8/test/testvarid.cpp" $, 1693 $, "1: class Foo {\n2: void f ( ) { a@1 = 0 ; }\n3: union { float a@1 ; int b@2 ; } ;\n4: } ;\n" $, $tokenize_ $(@expr1073744196 "cppcheck-2.8/test/testvarid.cpp" $, 1693 $, code2@var324 $) $) $) { $return
1694:
1695:
1696:
1697: ; }
1698:
1699: const char code3@var325 [@expr1073744197 139 ] =@expr1073744198 "void f() {\n    union {\n        struct {\n            char a, b, c, d;\n        };\n        int abcd;\n    };\n    g(abcd);\n    h(a, b, c, d);\n}"
1700:
|
1707:
1708: ;
1709: $if $(@expr1073744199 $!@expr1073744200 $assertEquals $(@expr1073744201 "cppcheck-2.8/test/testvarid.cpp" $, 1709 $, "1: void f ( ) {\n2: union {\n3: struct {\n4: char a@1 ; char b@2 ; char c@3 ; char d@4 ;\n5: } ;\n6: int abcd@5 ;\n7: } ;\n8: g ( abcd@5 ) ;\n9: h ( a@1 , b@2 , c@3 , d@4 ) ;\n10: }\n" $, $tokenize_ $(@expr1073744202 "cppcheck-2.8/test/testvarid.cpp" $, 1709 $, code3@var325 $) $) $) { $return
1710:
|
1718:
1719: ; }
1720:
1721:
1722: const char code4@var326 [@expr1073744203 83 ] =@expr1073744204 "class Foo {\n    void f(float a) { this->a = a; }\n    union { float a; int b; };\n};"
1723:
1724:
1725: ;
1726: $if $(@expr1073744205 $!@expr1073744206 $assertEquals $(@expr1073744207 "cppcheck-2.8/test/testvarid.cpp" $, 1726 $, "1: class Foo {\n2: void f ( float a@1 ) { this . a@2 = a@1 ; }\n3: union { float a@2 ; int b@3 ; } ;\n4: } ;\n" $, $tokenize_ $(@expr1073744208 "cppcheck-2.8/test/testvarid.cpp" $, 1726 $, code4@var326 $) $) $) { $return
1727:
1728:
1729:
1730: ; }
1731: }
1732:
1733: void varid_in_class12 ( ) {
1734: const char code@var327 [@expr1073744209 42 ] =@expr1073744210 "class Foo {\nprivate:\n    void f(void);\n};"
1735:
1736:
1737: ;
1738: $if $(@expr1073744211 $!@expr1073744212 $assertEquals $(@expr1073744213 "cppcheck-2.8/test/testvarid.cpp" $, 1738 $, "1: class Foo {\n2: private:\n3: void f ( ) ;\n4: } ;\n" $, $tokenize_ $(@expr1073744214 "cppcheck-2.8/test/testvarid.cpp" $, 1738 $, code@var327 $) $) $) { $return
1739:
1740:
1741:
1742: ; }
1743: }
1744:
1745: void varid_in_class13 ( ) {
1746: const char code1@var328 [@expr1073744215 29 ] =@expr1073744216 "struct a { char typename; };" ;
1747: $if $(@expr1073744217 $!@expr1073744218 $assertEquals $(@expr1073744219 "cppcheck-2.8/test/testvarid.cpp" $, 1747 $, "1: struct a { char typename@1 ; } ;\n" $, $tokenize_ $(@expr1073744220 "cppcheck-2.8/test/testvarid.cpp" $, 1747 $, code1@var328 , "test.c" $) $) $) { $return
1748: ; }
1749: $if $(@expr1073744221 $!@expr1073744222 $assertEquals $(@expr1073744223 "cppcheck-2.8/test/testvarid.cpp" $, 1749 $, "1: struct a { char typename ; } ;\n" $, $tokenize_ $(@expr1073744224 "cppcheck-2.8/test/testvarid.cpp" $, 1749 $, code1@var328 , "test.cpp" $) $) $) { $return
1750: ; }
1751:
1752: const char code2@var329 [@expr1073744225 32 ] =@expr1073744226 "struct a { char typename[2]; };" ;
1753: $if $(@expr1073744227 $!@expr1073744228 $assertEquals $(@expr1073744229 "cppcheck-2.8/test/testvarid.cpp" $, 1753 $, "1: struct a { char typename@1 [ 2 ] ; } ;\n" $, $tokenize_ $(@expr1073744230 "cppcheck-2.8/test/testvarid.cpp" $, 1753 $, code2@var329 , "test.c" $) $) $) { $return
1754: ; }
1755: $if $(@expr1073744231 $!@expr1073744232 $assertEquals $(@expr1073744233 "cppcheck-2.8/test/testvarid.cpp" $, 1755 $, "1: struct a { char typename [ 2 ] ; } ;\n" $, $tokenize_ $(@expr1073744234 "cppcheck-2.8/test/testvarid.cpp" $, 1755 $, code2@var329 , "test.cpp" $) $) $) { $return
1756: ; }
1757: }
1758:
1759: void varid_in_class14 ( ) {
1760: const char code@var330 [@expr1073744235 140 ] =@expr1073744236 "class Tokenizer { TokenList list; };\n\nvoid Tokenizer::f() {\n  std::list<int> x;\n  list.do_something();\n  Tokenizer::list.do_something();\n}\n"
1761:
|
1765:
1766: ;
1767: $if $(@expr1073744237 $!@expr1073744238 $assertEquals $(@expr1073744239 "cppcheck-2.8/test/testvarid.cpp" $, 1767 $, "1: class Tokenizer { TokenList list@1 ; } ;\n2:\n3: void Tokenizer :: f ( ) {\n4: std :: list < int > x@2 ;\n5: list@1 . do_something ( ) ;\n6: Tokenizer :: list@1 . do_something ( ) ;\n7: }\n" $, $tokenize_ $(@expr1073744240 "cppcheck-2.8/test/testvarid.cpp" $, 1767 $, code@var330 , "test.cpp" $) $) $) { $return
1768:
|
1772:
1773: ; }
1774: }
1775:
1776: void varid_in_class15 ( ) {
1777: const char code@var331 [@expr1073744241 59 ] =@expr1073744242 "class Fred {\n  void x(int a) const;\n  void y() { a=0; }\n}\n"
1778:
1779:
1780: ;
1781: $if $(@expr1073744243 $!@expr1073744244 $assertEquals $(@expr1073744245 "cppcheck-2.8/test/testvarid.cpp" $, 1781 $, "1: class Fred {\n2: void x ( int a@1 ) const ;\n3: void y ( ) { a = 0 ; }\n4: }\n" $, $tokenize_ $(@expr1073744246 "cppcheck-2.8/test/testvarid.cpp" $, 1781 $, code@var331 , "test.cpp" $) $) $) { $return
1782:
1783:
1784: ; }
1785: }
1786:
1787: void varid_in_class16 ( ) {
1788: {
1789: const char code@var332 [@expr1073744247 65 ] =@expr1073744248 "class Fred {\n    int x;\n    void foo(int x) { this->x = x; }\n};\n"
1790:
1791:
1792: ;
1793: $if $(@expr1073744249 $!@expr1073744250 $assertEquals $(@expr1073744251 "cppcheck-2.8/test/testvarid.cpp" $, 1793 $, "1: class Fred {\n2: int x@1 ;\n3: void foo ( int x@2 ) { this . x@1 = x@2 ; }\n4: } ;\n" $, $tokenize_ $(@expr1073744252 "cppcheck-2.8/test/testvarid.cpp" $, 1793 $, code@var332 , "test.cpp" $) $) $) { $return
1794:
1795:
1796: ; }
1797: }
1798: {
1799: const char code@var333 [@expr1073744253 65 ] =@expr1073744254 "class Fred {\n    void foo(int x) { this->x = x; }\n    int x;\n};\n"
1800:
1801:
1802: ;
1803: $if $(@expr1073744255 $!@expr1073744256 $assertEquals $(@expr1073744257 "cppcheck-2.8/test/testvarid.cpp" $, 1803 $, "1: class Fred {\n2: void foo ( int x@1 ) { this . x@2 = x@1 ; }\n3: int x@2 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744258 "cppcheck-2.8/test/testvarid.cpp" $, 1803 $, code@var333 , "test.cpp" $) $) $) { $return
1804:
1805:
1806: ; }
1807: }
1808: {
1809: const char code@var334 [@expr1073744259 67 ] =@expr1073744260 "class Fred {\n    void foo(int x) { (*this).x = x; }\n    int x;\n};\n"
1810:
1811:
1812: ;
1813: $if $(@expr1073744261 $!@expr1073744262 $assertEquals $(@expr1073744263 "cppcheck-2.8/test/testvarid.cpp" $, 1813 $, "1: class Fred {\n2: void foo ( int x@1 ) { ( * this ) . x@2 = x@1 ; }\n3: int x@2 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744264 "cppcheck-2.8/test/testvarid.cpp" $, 1813 $, code@var334 , "test.cpp" $) $) $) { $return
1814:
1815:
1816: ; }
1817: }
1818: }
1819:
1820: void varid_in_class17 ( ) {
1821: const char code1@var335 [@expr1073744265 369 ] =@expr1073744266 "class Fred {\n    int method_with_internal(X&);\n    int method_with_internal(X*);\n    int method_with_internal(int&);\n    int method_with_internal(A* b, X&);\n    int method_with_internal(X&, A* b);\n    int method_with_internal(const B &, int);\n    void Set(BAR);\n    FOO Set(BAR);\n    int method_with_class(B<B> b);\n    bool function(std::map<int, int, MYless> & m);\n};"
1822:
|
1831:
1832: ;
1833: $if $(@expr1073744267 $!@expr1073744268 $assertEquals $(@expr1073744269 "cppcheck-2.8/test/testvarid.cpp" $, 1833 $, "1: class Fred {\n2: int method_with_internal ( X & ) ;\n3: int method_with_internal ( X * ) ;\n4: int method_with_internal ( int & ) ;\n5: int method_with_internal ( A * b@1 , X & ) ;\n6: int method_with_internal ( X & , A * b@2 ) ;\n7: int method_with_internal ( const B & , int ) ;\n8: void Set ( BAR ) ;\n9: FOO Set ( BAR ) ;\n10: int method_with_class ( B < B > b@3 ) ;\n11: bool function ( std :: map < int , int , MYless > & m@4 ) ;\n12: } ;\n" $, $tokenize_ $(@expr1073744270 "cppcheck-2.8/test/testvarid.cpp" $, 1833 $, code1@var335 , "test.cpp" $) $) $) { $return
1834:
|
1843:
1844: ; }
1845:
1846: const char code2@var336 [@expr1073744271 110 ] =@expr1073744272 "int i;\nSomeType someVar1(i, i);\nSomeType someVar2(j, j);\nSomeType someVar3(j, 1);\nSomeType someVar4(new bar);"
1847:
1848:
1849:
1850: ;
1851: $if $(@expr1073744273 $!@expr1073744274 $assertEquals $(@expr1073744275 "cppcheck-2.8/test/testvarid.cpp" $, 1851 $, "1: int i@1 ;\n2: SomeType someVar1@2 ( i@1 , i@1 ) ;\n3: SomeType someVar2 ( j , j ) ;\n4: SomeType someVar3@3 ( j , 1 ) ;\n5: SomeType someVar4@4 ( new bar ) ;\n" $, $tokenize_ $(@expr1073744276 "cppcheck-2.8/test/testvarid.cpp" $, 1851 $, code2@var336 , "test.cpp" $) $) $) { $return
1852:
1853:
1854:
1855: ; }
1856: }
1857:
1858: void varid_in_class18 ( ) {
1859: const char code@var337 [@expr1073744277 87 ] =@expr1073744278 "class A {\n    class B;\n};\nclass A::B {\n    B();\n    int* i;\n};\nA::B::B() :\n    i(0)\n{}"
1860:
|
1867:
1868: ;
1869: $if $(@expr1073744279 $!@expr1073744280 $assertEquals $(@expr1073744281 "cppcheck-2.8/test/testvarid.cpp" $, 1869 $, "1: class A {\n2: class B ;\n3: } ;\n4: class A :: B {\n5: B ( ) ;\n6: int * i@1 ;\n7: } ;\n8: A :: B :: B ( ) :\n9: i@1 ( 0 )\n10: { }\n" $, $tokenize_ $(@expr1073744282 "cppcheck-2.8/test/testvarid.cpp" $, 1869 $, code@var337 , "test.cpp" $) $) $) { $return
1870:
|
1877:
1878: ; }
1879: }
1880:
1881: void varid_in_class19 ( ) {
1882: const char code@var338 [@expr1073744283 79 ] =@expr1073744284 "class Fred {\n    char *str1;\n    ~Fred();\n};\nFred::~Fred() {\n    free(str1);\n}"
1883:
|
1887:
1888: ;
1889: $if $(@expr1073744285 $!@expr1073744286 $assertEquals $(@expr1073744287 "cppcheck-2.8/test/testvarid.cpp" $, 1889 $, "1: class Fred {\n2: char * str1@1 ;\n3: ~ Fred ( ) ;\n4: } ;\n5: Fred :: ~ Fred ( ) {\n6: free ( str1@1 ) ;\n7: }\n" $, $tokenize_ $(@expr1073744288 "cppcheck-2.8/test/testvarid.cpp" $, 1889 $, code@var338 , "test.cpp" $) $) $) { $return
1890:
|
1894:
1895: ; }
1896: }
1897:
1898: void varid_in_class20 ( ) {
1899: const char code@var339 [@expr1073744289 152 ] =@expr1073744290 "template<class C> class cacheEntry {\nprotected:\n    int m_key;\npublic:\n    cacheEntry();\n};\n\ntemplate<class C> cacheEntry<C>::cacheEntry() : m_key() {}"
1900:
|
1905:
1906: ;
1907:
1908: $if $(@expr1073744291 $!@expr1073744292 $assertEquals $(@expr1073744293 "cppcheck-2.8/test/testvarid.cpp" $, 1908 $, "1: template < class C > class cacheEntry {\n2: protected:\n3: int m_key@1 ;\n4: public:\n5: cacheEntry ( ) ;\n6: } ;\n7:\n8: template < class C > cacheEntry < C > :: cacheEntry ( ) : m_key@1 ( ) { }\n" $, $tokenize_ $(@expr1073744294 "cppcheck-2.8/test/testvarid.cpp" $, 1908 $, code@var339 , "test.cpp" $) $) $) { $return
1909:
|
1914:
1915: ; }
1916: }
1917:
1918: void varid_in_class21 ( ) {
1919: const char code@var340 [@expr1073744295 134 ] =@expr1073744296 "template <typename t1,typename t2>\nclass A::B {\n    B();\n    int x;\n};\n\ntemplate <typename t1,typename t2>\nA::B<t1,t2>::B() : x(9) {}"
1920:
|
1925:
1926: ;
1927:
1928: const char expected@var341 [@expr1073744297 184 ] =@expr1073744298 "1: template < typename t1 , typename t2 >\n2: class A :: B {\n3: B ( ) ;\n4: int x@1 ;\n5: } ;\n6:\n7: template < typename t1 , typename t2 >\n8: A :: B < t1 , t2 > :: B ( ) : x@1 ( 9 ) { }\n"
1929:
|
1934:
1935: ;
1936:
1937: $if $(@expr1073744299 $!@expr1073744300 $assertEquals $(@expr1073744301 "cppcheck-2.8/test/testvarid.cpp" $, 1937 $, expected@var341 $, $tokenize_ $(@expr1073744302 "cppcheck-2.8/test/testvarid.cpp" $, 1937 $, code@var340 , "test.cpp" $) $) $) { $return ; }
1938: }
1939:
1940: void varid_in_class22 ( ) {
1941: const char code@var342 [@expr1073744303 225 ] =@expr1073744304 "struct data {};\n    struct S {\n    std::vector<data> std;\n    void f();\n};\nvoid S::f() {\n    std::vector<data>::const_iterator end = std.end();\n    for (std::vector<data>::const_iterator i = std.begin(); i != end; ++i) {}\n}\n"
1942:
|
1948:
1949: ;
1950:
1951: const char expected@var343 [@expr1073744305 301 ] =@expr1073744306 "1: struct data { } ;\n2: struct S {\n3: std :: vector < data > std@1 ;\n4: void f ( ) ;\n5: } ;\n6: void S :: f ( ) {\n7: std :: vector < data > :: const_iterator end@2 ; end@2 = std@1 . end ( ) ;\n8: for ( std :: vector < data > :: const_iterator i@3 = std@1 . begin ( ) ; i@3 != end@2 ; ++ i@3 ) { }\n9: }\n"
1952:
|
1958:
1959: ;
1960:
1961: $if $(@expr1073744307 $!@expr1073744308 $assertEquals $(@expr1073744309 "cppcheck-2.8/test/testvarid.cpp" $, 1961 $, expected@var343 $, $tokenize_ $(@expr1073744310 "cppcheck-2.8/test/testvarid.cpp" $, 1961 $, code@var342 , "test.cpp" $) $) $) { $return ; }
1962: }
1963:
1964: void varid_namespace_1 ( ) {
1965: const char code@var344 [@expr1073744311 97 ] =@expr1073744312 "namespace Blah {\n  struct foo { int x;};\n  struct bar {\n    int x;\n    union { char y; };\n  };\n}"
1966:
|
1970:
1971: ;
1972: $if $(@expr1073744313 $!@expr1073744314 $assertEquals $(@expr1073744315 "cppcheck-2.8/test/testvarid.cpp" $, 1972 $, "1: namespace Blah {\n2: struct foo { int x@1 ; } ;\n3: struct bar {\n4: int x@2 ;\n5: union { char y@3 ; } ;\n6: } ;\n7: }\n" $, $tokenize_ $(@expr1073744316 "cppcheck-2.8/test/testvarid.cpp" $, 1972 $, code@var344 , "test.cpp" $) $) $) { $return
1973:
|
1977:
1978: ; }
1979: }
1980:
1981: void varid_namespace_2 ( ) {
1982: const char code@var345 [@expr1073744318 117 ] =@expr1073744319 "namespace Ui {\n    class C { int X; };\n}\n\nclass C {\n   void dostuff();\n   int X;\n};\n\nvoid C::dostuff() {\n   X = 0;\n}"
1983:
|
1992:
1993: ;
1994:
1995: const std ::@expr1073744320 string actual@var346 =@expr1073744321 $tokenize_ $(@expr1073744322 "cppcheck-2.8/test/testvarid.cpp" $, 1995 $, code@var345 , "test.cpp" $) ;
1996:
1997: $if $(@expr1073744323 $!@expr1073744324 $assert_ $(@expr1073744325 "cppcheck-2.8/test/testvarid.cpp" $, 1997 $, actual@var346 .@expr1073744326 find (@expr1073744327 "X@2 = 0" ) !=@expr1073744328 std ::@expr1073744329 string ::@expr1073744330 npos@expr1073744317 $) $) { $return ; }
1998: }
1999:
2000: static std :: string getLine ( const std :: string & code@var347 , int lineNumber@var348 ) {
2001: std ::@expr1073744332 string nr@var349 ; nr@var349 =@expr1073744333 MathLib ::@expr1073744334 toString (@expr1073744335 lineNumber@var348 ) ;
2002: const std ::@expr2512 string ::@expr2512 size_type pos1@var350 =@expr1073744338 code@var347 .@expr2515 find (@expr1073744340 '\n' +@expr1073744341 nr@var349 +@expr1073744342 ": " ) ;
2003: if (@expr1073744343 pos1@var350 ==@expr1073744344 std ::@expr2521 string ::@expr2522 npos@expr2507 ) {
2004: return "" ; }
2005: const std ::@expr2512 string ::@expr2512 size_type pos2@var351 =@expr1073744349 code@var347 .@expr2515 find (@expr1073744351 '\n' , pos1@var350 +@expr2528 1 ) ;
2006: if (@expr1073744353 pos2@var351 ==@expr1073744354 std ::@expr2521 string ::@expr2522 npos@expr2507 ) {
2007: return "" ; }
2008: return code@var347 .@expr1073744357 substr (@expr1073744358 pos1@var350 +@expr2528 1 , pos2@var351 -@expr1073744360 pos1@var350 -@expr1073744361 1 ) ;
2009: }
2010:
2011: void varid_namespace_3 ( ) {
2012: const char code@var352 [@expr1073744362 151 ] =@expr1073744363 "namespace foo {\nstruct Bar {\n  explicit Bar(int type);\n  void f();\n  int type;\n};\n\nBar::Bar(int type) : type(type) {}\n\nvoid Bar::f() {\n  type = 0;\n}\n}"
2013:
|
2023:
2024: ;
2025:
2026: const std ::@expr1073744364 string actual@var353 =@expr1073744365 $tokenize_ $(@expr1073744366 "cppcheck-2.8/test/testvarid.cpp" $, 2026 $, code@var352 , "test.cpp" $) ;
2027:
2028: $if $(@expr1073744367 $!@expr1073744368 $assertEquals $(@expr1073744369 "cppcheck-2.8/test/testvarid.cpp" $, 2028 $, "5: int type@2 ;" $, getLine (@expr1073744370 actual@var353 , 5 ) $) $) { $return ; }
2029: $if $(@expr1073744371 $!@expr1073744372 $assertEquals $(@expr1073744373 "cppcheck-2.8/test/testvarid.cpp" $, 2029 $, "11: type@2 = 0 ;" $, getLine (@expr1073744374 actual@var353 , 11 ) $) $) { $return ; }
2030: }
2031:
2032: void varid_namespace_4 ( ) {
2033: const char code@var354 [@expr1073744375 134 ] =@expr1073744376 "namespace X {\n  struct foo { int x;};\n  struct bar: public foo {\n    void dostuff();\n  };\n  void bar::dostuff() { int x2 = x * 2; }\n}"
2034:
|
2038:
2039: ;
2040: $if $(@expr1073744377 $!@expr1073744378 $assertEquals $(@expr1073744379 "cppcheck-2.8/test/testvarid.cpp" $, 2040 $, "1: namespace X {\n2: struct foo { int x@1 ; } ;\n3: struct bar : public foo {\n4: void dostuff ( ) ;\n5: } ;\n6: void bar :: dostuff ( ) { int x2@2 ; x2@2 = x@1 * 2 ; }\n7: }\n" $, $tokenize_ $(@expr1073744380 "cppcheck-2.8/test/testvarid.cpp" $, 2040 $, code@var354 , "test.cpp" $) $) $) { $return
2041:
|
2045:
2046: ; }
2047: }
2048:
2049: void varid_namespace_5 ( ) {
2050: const char code@var355 [@expr1073744381 162 ] =@expr1073744382 "namespace X {\n  struct foo { int x;};\n  namespace Y {\n    struct bar: public foo {\n      void dostuff();\n    };\n    void bar::dostuff() { int x2 = x * 2; }\n  }\n}"
2051:
|
2057:
2058: ;
2059: $if $(@expr1073744383 $!@expr1073744384 $assertEquals $(@expr1073744385 "cppcheck-2.8/test/testvarid.cpp" $, 2059 $, "1: namespace X {\n2: struct foo { int x@1 ; } ;\n3: namespace Y {\n4: struct bar : public foo {\n5: void dostuff ( ) ;\n6: } ;\n7: void bar :: dostuff ( ) { int x2@2 ; x2@2 = x@1 * 2 ; }\n8: }\n9: }\n" $, $tokenize_ $(@expr1073744386 "cppcheck-2.8/test/testvarid.cpp" $, 2059 $, code@var355 , "test.cpp" $) $) $) { $return
2060:
|
2066:
2067: ; }
2068: }
2069:
2070: void varid_initList ( ) {
2071: const char code1@var356 [@expr1073744387 38 ] =@expr1073744388 "class A {\n  A() : x(0) {}\n  int x;\n};"
2072:
2073:
2074: ;
2075: $if $(@expr1073744389 $!@expr1073744390 $assertEquals $(@expr1073744391 "cppcheck-2.8/test/testvarid.cpp" $, 2075 $, "1: class A {\n2: A ( ) : x@1 ( 0 ) { }\n3: int x@1 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744392 "cppcheck-2.8/test/testvarid.cpp" $, 2075 $, code1@var356 $) $) $) { $return
2076:
2077:
2078:
2079: ; }
2080:
2081: const char code2@var357 [@expr1073744393 43 ] =@expr1073744394 "class A {\n  A(int x) : x(x) {}\n  int x;\n};"
2082:
2083:
2084: ;
2085: $if $(@expr1073744395 $!@expr1073744396 $assertEquals $(@expr1073744397 "cppcheck-2.8/test/testvarid.cpp" $, 2085 $, "1: class A {\n2: A ( int x@1 ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744398 "cppcheck-2.8/test/testvarid.cpp" $, 2085 $, code2@var357 $) $) $) { $return
2086:
2087:
2088:
2089: ; }
2090:
2091: const char code3@var358 [@expr1073744399 56 ] =@expr1073744400 "class A {\n  A(int x);\n  int x;\n};\nA::A(int x) : x(x) {}"
2092:
2093:
2094:
2095: ;
2096: $if $(@expr1073744401 $!@expr1073744402 $assertEquals $(@expr1073744403 "cppcheck-2.8/test/testvarid.cpp" $, 2096 $, "1: class A {\n2: A ( int x@1 ) ;\n3: int x@2 ;\n4: } ;\n5: A :: A ( int x@3 ) : x@2 ( x@3 ) { }\n" $, $tokenize_ $(@expr1073744404 "cppcheck-2.8/test/testvarid.cpp" $, 2096 $, code3@var358 $) $) $) { $return
2097:
|
2100:
2101: ; }
2102:
2103: const char code4@var359 [@expr1073744405 45 ] =@expr1073744406 "struct A {\n  int x;\n  A(int x) : x(x) {}\n};\n"
2104:
2105:
2106: ;
2107: $if $(@expr1073744407 $!@expr1073744408 $assertEquals $(@expr1073744409 "cppcheck-2.8/test/testvarid.cpp" $, 2107 $, "1: struct A {\n2: int x@1 ;\n3: A ( int x@2 ) : x@1 ( x@2 ) { }\n4: } ;\n" $, $tokenize_ $(@expr1073744410 "cppcheck-2.8/test/testvarid.cpp" $, 2107 $, code4@var359 $) $) $) { $return
2108:
2109:
2110:
2111: ; }
2112:
2113: const char code5@var360 [@expr1073744411 52 ] =@expr1073744412 "class A {\n  A(int x) noexcept : x(x) {}\n  int x;\n};"
2114:
2115:
2116: ;
2117: $if $(@expr1073744413 $!@expr1073744414 $assertEquals $(@expr1073744415 "cppcheck-2.8/test/testvarid.cpp" $, 2117 $, "1: class A {\n2: A ( int x@1 ) noexcept ( true ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744416 "cppcheck-2.8/test/testvarid.cpp" $, 2117 $, code5@var360 $) $) $) { $return
2118:
2119:
2120:
2121: ; }
2122:
2123: const char code6@var361 [@expr1073744417 58 ] =@expr1073744418 "class A {\n  A(int x) noexcept(true) : x(x) {}\n  int x;\n};"
2124:
2125:
2126: ;
2127: $if $(@expr1073744419 $!@expr1073744420 $assertEquals $(@expr1073744421 "cppcheck-2.8/test/testvarid.cpp" $, 2127 $, "1: class A {\n2: A ( int x@1 ) noexcept ( true ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744422 "cppcheck-2.8/test/testvarid.cpp" $, 2127 $, code6@var361 $) $) $) { $return
2128:
2129:
2130:
2131: ; }
2132:
2133: const char code7@var362 [@expr1073744423 59 ] =@expr1073744424 "class A {\n  A(int x) noexcept(false) : x(x) {}\n  int x;\n};"
2134:
2135:
2136: ;
2137: $if $(@expr1073744425 $!@expr1073744426 $assertEquals $(@expr1073744427 "cppcheck-2.8/test/testvarid.cpp" $, 2137 $, "1: class A {\n2: A ( int x@1 ) noexcept ( false ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744428 "cppcheck-2.8/test/testvarid.cpp" $, 2137 $, code7@var362 $) $) $) { $return
2138:
2139:
2140:
2141: ; }
2142:
2143: const char code8@var363 [@expr1073744429 78 ] =@expr1073744430 "class Foo : public Bar {\n  explicit Foo(int i) : Bar(mi = i) { }\n  int mi;\n};"
2144:
2145:
2146: ;
2147: $if $(@expr1073744431 $!@expr1073744432 $assertEquals $(@expr1073744433 "cppcheck-2.8/test/testvarid.cpp" $, 2147 $, "1: class Foo : public Bar {\n2: explicit Foo ( int i@1 ) : Bar ( mi@2 = i@1 ) { }\n3: int mi@2 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744434 "cppcheck-2.8/test/testvarid.cpp" $, 2147 $, code8@var363 $) $) $) { $return
2148:
2149:
2150:
2151: ; }
2152:
2153:
2154: const char code9@var364 [@expr1073744435 56 ] =@expr1073744436 "class A {\n  A(int x) : y(a?0:1), x(x) {}\n  int x, y;\n};"
2155:
2156:
2157: ;
2158: $if $(@expr1073744437 $!@expr1073744438 $assertEquals $(@expr1073744439 "cppcheck-2.8/test/testvarid.cpp" $, 2158 $, "1: class A {\n2: A ( int x@1 ) : y@3 ( a ? 0 : 1 ) , x@2 ( x@1 ) { }\n3: int x@2 ; int y@3 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744440 "cppcheck-2.8/test/testvarid.cpp" $, 2158 $, code9@var364 $) $) $) { $return
2159:
2160:
2161:
2162: ; }
2163:
2164:
2165: const char code10@var365 [@expr1073744441 106 ] =@expr1073744442 "class A {\n  double *work;\n  A(const Matrix &m) throw (e);\n};\nA::A(const Matrix &m) throw (e) : work(0)\n{}"
2166:
|
2169:
2170: ;
2171: $if $(@expr1073744443 $!@expr1073744444 $assertEquals $(@expr1073744445 "cppcheck-2.8/test/testvarid.cpp" $, 2171 $, "1: class A {\n2: double * work@1 ;\n3: A ( const Matrix & m@2 ) throw ( e ) ;\n4: } ;\n5: A :: A ( const Matrix & m@3 ) throw ( e ) : work@1 ( 0 )\n6: { }\n" $, $tokenize_ $(@expr1073744446 "cppcheck-2.8/test/testvarid.cpp" $, 2171 $, code10@var365 $) $) $) { $return
2172:
|
2176:
2177: ; }
2178: }
2179:
2180: void varid_initListWithBaseTemplate ( ) {
2181: const char code1@var366 [@expr1073744447 57 ] =@expr1073744448 "class A : B<C,D> {\n  A() : B<C,D>(), x(0) {}\n  int x;\n};"
2182:
2183:
2184: ;
2185: $if $(@expr1073744449 $!@expr1073744450 $assertEquals $(@expr1073744451 "cppcheck-2.8/test/testvarid.cpp" $, 2185 $, "1: class A : B < C , D > {\n2: A ( ) : B < C , D > ( ) , x@1 ( 0 ) { }\n3: int x@1 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744452 "cppcheck-2.8/test/testvarid.cpp" $, 2185 $, code1@var366 $) $) $) { $return
2186:
2187:
2188:
2189: ; }
2190:
2191: const char code2@var367 [@expr1073744453 52 ] =@expr1073744454 "class A : B<C,D> {\n  A(int x) : x(x) {}\n  int x;\n};"
2192:
2193:
2194: ;
2195: $if $(@expr1073744455 $!@expr1073744456 $assertEquals $(@expr1073744457 "cppcheck-2.8/test/testvarid.cpp" $, 2195 $, "1: class A : B < C , D > {\n2: A ( int x@1 ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744458 "cppcheck-2.8/test/testvarid.cpp" $, 2195 $, code2@var367 $) $) $) { $return
2196:
2197:
2198:
2199: ; }
2200:
2201: const char code3@var368 [@expr1073744459 65 ] =@expr1073744460 "class A : B<C,D> {\n  A(int x);\n  int x;\n};\nA::A(int x) : x(x) {}"
2202:
2203:
2204:
2205: ;
2206: $if $(@expr1073744461 $!@expr1073744462 $assertEquals $(@expr1073744463 "cppcheck-2.8/test/testvarid.cpp" $, 2206 $, "1: class A : B < C , D > {\n2: A ( int x@1 ) ;\n3: int x@2 ;\n4: } ;\n5: A :: A ( int x@3 ) : x@2 ( x@3 ) { }\n" $, $tokenize_ $(@expr1073744464 "cppcheck-2.8/test/testvarid.cpp" $, 2206 $, code3@var368 $) $) $) { $return
2207:
|
2210:
2211: ; }
2212:
2213: const char code4@var369 [@expr1073744465 54 ] =@expr1073744466 "struct A : B<C,D> {\n  int x;\n  A(int x) : x(x) {}\n};\n"
2214:
2215:
2216: ;
2217: $if $(@expr1073744467 $!@expr1073744468 $assertEquals $(@expr1073744469 "cppcheck-2.8/test/testvarid.cpp" $, 2217 $, "1: struct A : B < C , D > {\n2: int x@1 ;\n3: A ( int x@2 ) : x@1 ( x@2 ) { }\n4: } ;\n" $, $tokenize_ $(@expr1073744470 "cppcheck-2.8/test/testvarid.cpp" $, 2217 $, code4@var369 $) $) $) { $return
2218:
2219:
2220:
2221: ; }
2222:
2223: const char code5@var370 [@expr1073744471 122 ] =@expr1073744472 "class BCLass : public Ticket<void> {\n  BCLass();\n  PClass* member;\n};\nBCLass::BCLass() : Ticket<void>() {\n  member = 0;\n}"
2224:
|
2228:
2229: ;
2230: $if $(@expr1073744473 $!@expr1073744474 $assertEquals $(@expr1073744475 "cppcheck-2.8/test/testvarid.cpp" $, 2230 $, "1: class BCLass : public Ticket < void > {\n2: BCLass ( ) ;\n3: PClass * member@1 ;\n4: } ;\n5: BCLass :: BCLass ( ) : Ticket < void > ( ) {\n6: member@1 = 0 ;\n7: }\n" $, $tokenize_ $(@expr1073744476 "cppcheck-2.8/test/testvarid.cpp" $, 2230 $, code5@var370 $) $) $) { $return
2231:
|
2236:
2237: ; }
2238: }
2239:
2240: void varid_initListWithScope ( ) {
2241: const char code1@var371 [@expr1073744477 60 ] =@expr1073744478 "class A : public B::C {\n  A() : B::C(), x(0) {}\n  int x;\n};"
2242:
2243:
2244: ;
2245: $if $(@expr1073744479 $!@expr1073744480 $assertEquals $(@expr1073744481 "cppcheck-2.8/test/testvarid.cpp" $, 2245 $, "1: class A : public B :: C {\n2: A ( ) : B :: C ( ) , x@1 ( 0 ) { }\n3: int x@1 ;\n4: } ;\n" $, $tokenize_ $(@expr1073744482 "cppcheck-2.8/test/testvarid.cpp" $, 2245 $, code1@var371 $) $) $) { $return
2246:
2247:
2248:
2249: ; }
2250: }
2251:
2252: void varid_operator ( ) {
2253: {
2254: const std ::@expr2659 string actual@var372 =@expr1073744484 $tokenize_ $(@expr1073744485 "cppcheck-2.8/test/testvarid.cpp" $, 2254 $, "class Foo\n{\npublic:\n    void operator=(const Foo &);\n};" $)
2255:
|
2258:
2259: ;
2260:
2261: const char expected@var373 [@expr1073744486 73 ] =@expr1073744487 "1: class Foo\n2: {\n3: public:\n4: void operator= ( const Foo & ) ;\n5: } ;\n"
2262:
2263:
2264:
2265: ;
2266:
2267: $if $(@expr1073744488 $!@expr1073744489 $assertEquals $(@expr1073744490 "cppcheck-2.8/test/testvarid.cpp" $, 2267 $, expected@var373 $, actual@var372 $) $) { $return ; }
2268: }
2269: {
2270: const std ::@expr2659 string actual@var374 =@expr1073744492 $tokenize_ $(@expr1073744493 "cppcheck-2.8/test/testvarid.cpp" $, 2270 $, "struct Foo {\n    void * operator new [](int);\n};" $)
2271:
2272:
2273: ;
2274: const char expected@var375 [@expr1073744494 58 ] =@expr1073744495 "1: struct Foo {\n2: void * operatornew[] ( int ) ;\n3: } ;\n"
2275:
2276: ;
2277:
2278: $if $(@expr1073744496 $!@expr1073744497 $assertEquals $(@expr1073744498 "cppcheck-2.8/test/testvarid.cpp" $, 2278 $, expected@var375 $, actual@var374 $) $) { $return ; }
2279: }
2280: }
2281:
2282: void varid_throw ( ) {
2283: const std ::@expr1073744499 string actual@var376 =@expr1073744500 $tokenize_ $(@expr1073744501 "cppcheck-2.8/test/testvarid.cpp" $, 2283 $, "UserDefinedException* pe = new UserDefinedException();\nthrow pe;" $)
2284:
2285: ;
2286:
2287: const char expected@var377 [@expr1073744502 88 ] =@expr1073744503 "1: UserDefinedException * pe@1 ; pe@1 = new UserDefinedException ( ) ;\n2: throw pe@1 ;\n"
2288: ;
2289:
2290: $if $(@expr1073744504 $!@expr1073744505 $assertEquals $(@expr1073744506 "cppcheck-2.8/test/testvarid.cpp" $, 2290 $, expected@var377 $, actual@var376 $) $) { $return ; }
2291: }
2292:
2293: void varid_unknown_macro ( ) {
2294:
2295: const char code@var378 [@expr1073744507 50 ] =@expr1073744508 "void f() {\n    int a[10];\n    AAA\n    a[0] = 0;\n}"
2296:
2297:
2298:
2299: ;
2300: const char expected@var379 [@expr1073744509 68 ] =@expr1073744510 "1: void f ( ) {\n2: int a@1 [ 10 ] ;\n3: AAA\n4: a@1 [ 0 ] = 0 ;\n5: }\n"
2301:
2302:
2303:
2304: ;
2305: $if $(@expr1073744511 $!@expr1073744512 $assertEquals $(@expr1073744513 "cppcheck-2.8/test/testvarid.cpp" $, 2305 $, expected@var379 $, $tokenize_ $(@expr1073744514 "cppcheck-2.8/test/testvarid.cpp" $, 2305 $, code@var378 , "test.c" $) $) $) { $return ; }
2306: }
2307:
2308: void varid_using ( ) {
2309:
2310: const char code@var380 [@expr1073744515 19 ] =@expr1073744516 "using std::size_t;" ;
2311: const char expected@var381 [@expr1073744517 26 ] =@expr1073744518 "1: using unsigned long ;\n" ;
2312: $if $(@expr1073744519 $!@expr1073744520 $assertEquals $(@expr1073744521 "cppcheck-2.8/test/testvarid.cpp" $, 2312 $, expected@var381 $, $tokenize_ $(@expr1073744522 "cppcheck-2.8/test/testvarid.cpp" $, 2312 $, code@var380 $) $) $) { $return ; }
2313: }
2314:
2315: void varid_catch ( ) {
2316: const char code@var382 [@expr1073744523 65 ] =@expr1073744524 "void f() {\n    try { dostuff(); }\n    catch (exception &e) { }\n}"
2317:
2318:
2319: ;
2320: const char expected@var383 [@expr1073744525 80 ] =@expr1073744526 "1: void f ( ) {\n2: try { dostuff ( ) ; }\n3: catch ( exception & e@1 ) { }\n4: }\n"
2321:
2322:
2323: ;
2324: $if $(@expr1073744527 $!@expr1073744528 $assertEquals $(@expr1073744529 "cppcheck-2.8/test/testvarid.cpp" $, 2324 $, expected@var383 $, $tokenize_ $(@expr1073744530 "cppcheck-2.8/test/testvarid.cpp" $, 2324 $, code@var382 $) $) $) { $return ; }
2325: }
2326:
2327: void varid_functionPrototypeTemplate ( ) {
2328: $if $(@expr1073744531 $!@expr1073744532 $assertEquals $(@expr1073744533 "cppcheck-2.8/test/testvarid.cpp" $, 2328 $, "1: function < void ( ) > fptr@1 ;\n" $, $tokenize_ $(@expr1073744534 "cppcheck-2.8/test/testvarid.cpp" $, 2328 $, "function<void(void)> fptr;" $) $) $) { $return ; }
2329: }
2330:
2331: void varid_templatePtr ( ) {
2332: $if $(@expr1073744535 $!@expr1073744536 $assertEquals $(@expr1073744537 "cppcheck-2.8/test/testvarid.cpp" $, 2332 $, "1: std :: map < int , FooTemplate < int > * > dummy_member@1 [ 1 ] ;\n" $, $tokenize_ $(@expr1073744538 "cppcheck-2.8/test/testvarid.cpp" $, 2332 $, "std::map<int, FooTemplate<int>*> dummy_member[1];" $) $) $) { $return ; }
2333: }
2334:
2335: void varid_templateNamespaceFuncPtr ( ) {
2336: $if $(@expr1073744539 $!@expr1073744540 $assertEquals $(@expr1073744541 "cppcheck-2.8/test/testvarid.cpp" $, 2336 $, "1: KeyListT < float , & NIFFile :: getFloat > mKeyList@1 [ 4 ] ;\n" $, $tokenize_ $(@expr1073744542 "cppcheck-2.8/test/testvarid.cpp" $, 2336 $, "KeyListT<float, &NIFFile::getFloat> mKeyList[4];" $) $) $) { $return ; }
2337: }
2338:
2339: void varid_templateArray ( ) {
2340: $if $(@expr1073744543 $!@expr1073744544 $assertEquals $(@expr1073744545 "cppcheck-2.8/test/testvarid.cpp" $, 2340 $, "1: VertexArrayIterator < float [ 2 ] > attrPos@1 ; attrPos@1 = m_AttributePos . GetIterator < float [ 2 ] > ( ) ;\n" $, $tokenize_ $(@expr1073744546 "cppcheck-2.8/test/testvarid.cpp" $, 2340 $, "VertexArrayIterator<float[2]> attrPos = m_AttributePos.GetIterator<float[2]>();" $) $) $) { $return
2341: ; }
2342: }
2343:
2344: void varid_templateParameter ( ) {
2345: {
2346: const char code@var384 [@expr1073744547 39 ] =@expr1073744548 "const int X = 0;\nstd::array<int,X> Y;\n"
2347: ;
2348:
2349: $if $(@expr1073744549 $!@expr1073744550 $assertEquals $(@expr1073744551 "cppcheck-2.8/test/testvarid.cpp" $, 2349 $, "1: const int X@1 = 0 ;\n2: std :: array < int , X@1 > Y@2 ;\n" $, $tokenize_ $(@expr1073744552 "cppcheck-2.8/test/testvarid.cpp" $, 2349 $, code@var384 $) $) $) { $return
2350:
2351: ; }
2352: }
2353: {
2354: const char code@var385 [@expr1073744553 31 ] =@expr1073744554 "std::optional<N::Foo<A>> Foo;\n" ;
2355:
2356: $if $(@expr1073744555 $!@expr1073744556 $assertEquals $(@expr1073744557 "cppcheck-2.8/test/testvarid.cpp" $, 2356 $, "1: std :: optional < N :: Foo < A > > Foo@1 ;\n" $, $tokenize_ $(@expr1073744558 "cppcheck-2.8/test/testvarid.cpp" $, 2356 $, code@var385 $) $) $) { $return
2357: ; }
2358: }
2359: }
2360:
2361: void varid_templateUsing ( ) {
2362: const char code@var386 [@expr1073744559 46 ] =@expr1073744560 "template<class T> using X = Y<T,4>;\nX<int> x;"
2363: ;
2364: $if $(@expr1073744561 $!@expr1073744562 $assertEquals $(@expr1073744563 "cppcheck-2.8/test/testvarid.cpp" $, 2364 $, "2: Y < int , 4 > x@1 ;\n" $, $tokenize_ $(@expr1073744564 "cppcheck-2.8/test/testvarid.cpp" $, 2364 $, code@var386 $) $) $) { $return
2365: ; }
2366: }
2367:
2368: void varid_not_template_in_condition ( ) {
2369: const char code1@var387 [@expr1073744565 28 ] =@expr1073744566 "void f() { if (x<a||x>b); }" ;
2370: $if $(@expr1073744567 $!@expr1073744568 $assertEquals $(@expr1073744569 "cppcheck-2.8/test/testvarid.cpp" $, 2370 $, "1: void f ( ) { if ( x < a || x > b ) { ; } }\n" $, $tokenize_ $(@expr1073744570 "cppcheck-2.8/test/testvarid.cpp" $, 2370 $, code1@var387 $) $) $) { $return ; }
2371:
2372: const char code2@var388 [@expr1073744571 30 ] =@expr1073744572 "void f() { if (1+x<a||x>b); }" ;
2373: $if $(@expr1073744573 $!@expr1073744574 $assertEquals $(@expr1073744575 "cppcheck-2.8/test/testvarid.cpp" $, 2373 $, "1: void f ( ) { if ( 1 + x < a || x > b ) { ; } }\n" $, $tokenize_ $(@expr1073744576 "cppcheck-2.8/test/testvarid.cpp" $, 2373 $, code2@var388 $) $) $) { $return ; }
2374:
2375: const char code3@var389 [@expr1073744577 30 ] =@expr1073744578 "void f() { if (x<a||x>b+1); }" ;
2376: $if $(@expr1073744579 $!@expr1073744580 $assertEquals $(@expr1073744581 "cppcheck-2.8/test/testvarid.cpp" $, 2376 $, "1: void f ( ) { if ( x < a || x > b + 1 ) { ; } }\n" $, $tokenize_ $(@expr1073744582 "cppcheck-2.8/test/testvarid.cpp" $, 2376 $, code3@var389 $) $) $) { $return ; }
2377:
2378: const char code4@var390 [@expr1073744583 41 ] =@expr1073744584 "void f() { if ((x==13) && (x<a||x>b)); }" ;
2379: $if $(@expr1073744585 $!@expr1073744586 $assertEquals $(@expr1073744587 "cppcheck-2.8/test/testvarid.cpp" $, 2379 $, "1: void f ( ) { if ( ( x == 13 ) && ( x < a || x > b ) ) { ; } }\n" $, $tokenize_ $(@expr1073744588 "cppcheck-2.8/test/testvarid.cpp" $, 2379 $, code4@var390 $) $) $) { $return ; }
2380: }
2381:
2382: void varid_cppcast ( ) {
2383: $if $(@expr1073744589 $!@expr1073744590 $assertEquals $(@expr1073744591 "cppcheck-2.8/test/testvarid.cpp" $, 2383 $, "1: const_cast < int * > ( code ) [ 0 ] = 0 ;\n" $, $tokenize_ $(@expr1073744592 "cppcheck-2.8/test/testvarid.cpp" $, 2383 $, "const_cast<int *>(code)[0] = 0;" $) $) $) { $return
2384: ; }
2385:
2386: $if $(@expr1073744593 $!@expr1073744594 $assertEquals $(@expr1073744595 "cppcheck-2.8/test/testvarid.cpp" $, 2386 $, "1: dynamic_cast < int * > ( code ) [ 0 ] = 0 ;\n" $, $tokenize_ $(@expr1073744596 "cppcheck-2.8/test/testvarid.cpp" $, 2386 $, "dynamic_cast<int *>(code)[0] = 0;" $) $) $) { $return
2387: ; }
2388:
2389: $if $(@expr1073744597 $!@expr1073744598 $assertEquals $(@expr1073744599 "cppcheck-2.8/test/testvarid.cpp" $, 2389 $, "1: reinterpret_cast < int * > ( code ) [ 0 ] = 0 ;\n" $, $tokenize_ $(@expr1073744600 "cppcheck-2.8/test/testvarid.cpp" $, 2389 $, "reinterpret_cast<int *>(code)[0] = 0;" $) $) $) { $return
2390: ; }
2391:
2392: $if $(@expr1073744601 $!@expr1073744602 $assertEquals $(@expr1073744603 "cppcheck-2.8/test/testvarid.cpp" $, 2392 $, "1: static_cast < int * > ( code ) [ 0 ] = 0 ;\n" $, $tokenize_ $(@expr1073744604 "cppcheck-2.8/test/testvarid.cpp" $, 2392 $, "static_cast<int *>(code)[0] = 0;" $) $) $) { $return
2393: ; }
2394: }
2395:
2396: void varid_variadicFunc ( ) {
2397: $if $(@expr1073744605 $!@expr1073744606 $assertEquals $(@expr1073744607 "cppcheck-2.8/test/testvarid.cpp" $, 2397 $, "1: int foo ( ... ) ;\n" $, $tokenize_ $(@expr1073744608 "cppcheck-2.8/test/testvarid.cpp" $, 2397 $, "int foo(...);" $) $) $) { $return ; }
2398: }
2399:
2400: void varid_typename ( ) {
2401: $if $(@expr1073744609 $!@expr1073744610 $assertEquals $(@expr1073744611 "cppcheck-2.8/test/testvarid.cpp" $, 2401 $, "1: template < int d , class A , class B > struct S { } ;\n" $, $tokenize_ $(@expr1073744612 "cppcheck-2.8/test/testvarid.cpp" $, 2401 $, "template<int d, class A, class B> struct S {};" $) $) $) { $return ; }
2402:
2403: $if $(@expr1073744613 $!@expr1073744614 $assertEquals $(@expr1073744615 "cppcheck-2.8/test/testvarid.cpp" $, 2403 $, "1: template < int d , typename A , typename B > struct S { } ;\n" $, $tokenize_ $(@expr1073744616 "cppcheck-2.8/test/testvarid.cpp" $, 2403 $, "template<int d, typename A, typename B> struct S {};" $) $) $) { $return ; }
2404:
2405: $if $(@expr1073744617 $!@expr1073744618 $assertEquals $(@expr1073744619 "cppcheck-2.8/test/testvarid.cpp" $, 2405 $, "1: A a@1 ;\n" $, $tokenize_ $(@expr1073744620 "cppcheck-2.8/test/testvarid.cpp" $, 2405 $, "typename A a;" $) $) $) { $return ; }
2406: }
2407:
2408: void varid_rvalueref ( ) {
2409: $if $(@expr1073744621 $!@expr1073744622 $assertEquals $(@expr1073744623 "cppcheck-2.8/test/testvarid.cpp" $, 2409 $, "1: int && a@1 ;\n" $, $tokenize_ $(@expr1073744624 "cppcheck-2.8/test/testvarid.cpp" $, 2409 $, "int&& a;" $) $) $) { $return ; }
2410:
2411: $if $(@expr1073744625 $!@expr1073744626 $assertEquals $(@expr1073744627 "cppcheck-2.8/test/testvarid.cpp" $, 2411 $, "1: void foo ( int && a@1 ) { }\n" $, $tokenize_ $(@expr1073744628 "cppcheck-2.8/test/testvarid.cpp" $, 2411 $, "void foo(int&& a) {}" $) $) $) { $return ; }
2412:
2413: $if $(@expr1073744629 $!@expr1073744630 $assertEquals $(@expr1073744631 "cppcheck-2.8/test/testvarid.cpp" $, 2413 $, "1: class C {\n2: C ( int && a@1 ) ;\n3: } ;\n" $, $tokenize_ $(@expr1073744632 "cppcheck-2.8/test/testvarid.cpp" $, 2413 $, "class C {\n    C(int&& a);\n};" $) $) $) { $return
2414:
|
2417:
2418: ; }
2419:
2420: $if $(@expr1073744633 $!@expr1073744634 $assertEquals $(@expr1073744635 "cppcheck-2.8/test/testvarid.cpp" $, 2420 $, "1: void foo ( int && ) ;\n" $, $tokenize_ $(@expr1073744636 "cppcheck-2.8/test/testvarid.cpp" $, 2420 $, "void foo(int&&);" $) $) $) { $return ; }
2421: }
2422:
2423: void varid_arrayFuncPar ( ) {
2424: $if $(@expr1073744637 $!@expr1073744638 $assertEquals $(@expr1073744639 "cppcheck-2.8/test/testvarid.cpp" $, 2424 $, "1: void check ( const char fname@1 [ ] = 0 ) { }\n" $, $tokenize_ $(@expr1073744640 "cppcheck-2.8/test/testvarid.cpp" $, 2424 $, "void check( const char fname[] = 0) { }" $) $) $) { $return ; }
2425: }
2426:
2427: void varid_sizeofPassed ( ) {
2428: $if $(@expr1073744641 $!@expr1073744642 $assertEquals $(@expr1073744643 "cppcheck-2.8/test/testvarid.cpp" $, 2428 $, "1: void which_test ( ) {\n2: const char * argv@1 [ 2 ] = { \"./test_runner\" , \"TestClass\" } ;\n3: options args@2 ( sizeof ( argv@1 ) / sizeof ( argv@1 [ 0 ] ) , argv@1 ) ;\n4: args@2 . which_test ( ) ;\n5: }\n" $, $tokenize_ $(@expr1073744644 "cppcheck-2.8/test/testvarid.cpp" $, 2428 $, "void which_test() {\n    const char* argv[] = { \"./test_runner\", \"TestClass\" };\n    options args(sizeof argv / sizeof argv[0], argv);\n    args.which_test();\n}" $) $) $) { $return
2429:
|
2436:
2437: ; }
2438: }
2439:
2440: void varid_classInFunction ( ) {
2441: $if $(@expr1073744645 $!@expr1073744646 $assertEquals $(@expr1073744647 "cppcheck-2.8/test/testvarid.cpp" $, 2441 $, "1: void AddSuppression ( ) {\n2: class QErrorLogger {\n3: void reportErr ( ErrorLogger :: ErrorMessage & msg@1 ) {\n4: }\n5: } ;\n6: }\n" $, $tokenize_ $(@expr1073744648 "cppcheck-2.8/test/testvarid.cpp" $, 2441 $, "void AddSuppression() {\n    class QErrorLogger {\n        void reportErr(ErrorLogger::ErrorMessage &msg) {\n        }\n    };\n}" $) $) $) { $return
2442:
|
2451:
2452: ; }
2453: }
2454:
2455: void varid_pointerToArray ( ) {
2456: $if $(@expr1073744649 $!@expr1073744650 $assertEquals $(@expr1073744651 "cppcheck-2.8/test/testvarid.cpp" $, 2456 $, "1: int ( * a1@1 ) [ 10 ] ;\n2: void f1 ( ) {\n3: int ( * a2@2 ) [ 10 ] ;\n4: int ( & a3@3 ) [ 10 ] ;\n5: }\n6: struct A {\n7: int ( & a4@4 ) [ 10 ] ;\n8: int f2 ( int i@5 ) { return a4@4 [ i@5 ] ; }\n9: int f3 ( int ( & a5@6 ) [ 10 ] , int i@7 ) { return a5@6 [ i@7 ] ; }\n10: } ;\n11: int f4 ( int ( & a6@8 ) [ 10 ] , int i@9 ) { return a6@8 [ i@9 ] ; }\n" $, $tokenize_ $(@expr1073744652 "cppcheck-2.8/test/testvarid.cpp" $, 2456 $, "int (*a1)[10];\nvoid f1() {\n    int(*a2)[10];\n    int(&a3)[10];\n}\nstruct A {\n    int(&a4)[10];\n    int f2(int i) { return a4[i]; }\n    int f3(int(&a5)[10], int i) { return a5[i]; }\n};\nint f4(int(&a6)[10], int i) { return a6[i]; }" $) $) $) { $return
2457:
|
2476:
2477: ; }
2478: }
2479:
2480: void varid_cpp11initialization ( ) {
2481: $if $(@expr1073744653 $!@expr1073744654 $assertEquals $(@expr1073744655 "cppcheck-2.8/test/testvarid.cpp" $, 2481 $, "1: int i@1 { 1 } ;\n2: std :: vector < int > vec@2 { 1 , 2 , 3 } ;\n3: namespace n { int z@3 ; } ;\n4: int & j@4 { i@1 } ;\n5: int k@5 { 1 } ; int l@6 { 2 } ;\n" $, $tokenize_ $(@expr1073744656 "cppcheck-2.8/test/testvarid.cpp" $, 2481 $, "int i{1};\nstd::vector<int> vec{1, 2, 3};\nnamespace n { int z; };\nint& j{i};\nint k{1}, l{2};" $) $) $) { $return
2482:
|
2489:
2490: ; }
2491:
2492:
2493: $if $(@expr1073744657 $!@expr1073744658 $assertEquals $(@expr1073744659 "cppcheck-2.8/test/testvarid.cpp" $, 2493 $, "1: struct S3 : public S1 , public S2 { } ;\n" $, $tokenize_ $(@expr1073744660 "cppcheck-2.8/test/testvarid.cpp" $, 2493 $, "struct S3 : public S1, public S2 { };" $) $) $) { $return
2494: ; }
2495:
2496:
2497: $if $(@expr1073744661 $!@expr1073744662 $assertEquals $(@expr1073744663 "cppcheck-2.8/test/testvarid.cpp" $, 2497 $, "1: class Scope { } ;\n" $, $tokenize_ $(@expr1073744664 "cppcheck-2.8/test/testvarid.cpp" $, 2497 $, "class CPPCHECKLIB Scope { };" $) $) $) { $return
2498: ; }
2499:
2500:
2501: $if $(@expr1073744665 $!@expr1073744666 $assertEquals $(@expr1073744667 "cppcheck-2.8/test/testvarid.cpp" $, 2501 $, "1: class A : public B , public C :: D , public E < F > :: G < H > {\n2: int i@1 ;\n3: A ( int i@2 ) : B { i@2 } , C :: D { i@2 } , E < F > :: G < H > { i@2 } , i@1 { i@2 } {\n4: int j@3 { i@2 } ;\n5: }\n6: } ;\n" $, $tokenize_ $(@expr1073744668 "cppcheck-2.8/test/testvarid.cpp" $, 2501 $, "class A: public B, public C::D, public E<F>::G<H> {\n    int i;\n    A(int i): B{i}, C::D{i}, E<F>::G<H>{i} ,i{i} {\n        int j{i};\n    }\n};" $) $) $) { $return
2502:
|
2511:
2512: ; }
2513: }
2514:
2515: void varid_inheritedMembers ( ) {
2516: $if $(@expr1073744669 $!@expr1073744670 $assertEquals $(@expr1073744671 "cppcheck-2.8/test/testvarid.cpp" $, 2516 $, "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : public A {\n5: void f ( ) ;\n6: } ;\n7: void B :: f ( ) {\n8: a@1 = 0 ;\n9: }\n" $, $tokenize_ $(@expr1073744672 "cppcheck-2.8/test/testvarid.cpp" $, 2516 $, "class A {\n    int a;\n};\nclass B : public A {\n    void f();\n};\nvoid B::f() {\n    a = 0;\n}" $) $) $) { $return
2517:
|
2532:
2533: ; }
2534:
2535: $if $(@expr1073744673 $!@expr1073744674 $assertEquals $(@expr1073744675 "cppcheck-2.8/test/testvarid.cpp" $, 2535 $, "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : A {\n5: void f ( ) ;\n6: } ;\n7: void B :: f ( ) {\n8: a@1 = 0 ;\n9: }\n" $, $tokenize_ $(@expr1073744676 "cppcheck-2.8/test/testvarid.cpp" $, 2535 $, "class A {\n    int a;\n};\nclass B : A {\n    void f();\n};\nvoid B::f() {\n    a = 0;\n}" $) $) $) { $return
2536:
|
2551:
2552: ; }
2553:
2554: $if $(@expr1073744677 $!@expr1073744678 $assertEquals $(@expr1073744679 "cppcheck-2.8/test/testvarid.cpp" $, 2554 $, "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : protected B , public A {\n5: void f ( ) ;\n6: } ;\n7: void B :: f ( ) {\n8: a@1 = 0 ;\n9: }\n" $, $tokenize_ $(@expr1073744680 "cppcheck-2.8/test/testvarid.cpp" $, 2554 $, "class A {\n    int a;\n};\nclass B : protected B, public A {\n    void f();\n};\nvoid B::f() {\n    a = 0;\n}" $) $) $) { $return
2555:
|
2570:
2571: ; }
2572:
2573: $if $(@expr1073744681 $!@expr1073744682 $assertEquals $(@expr1073744683 "cppcheck-2.8/test/testvarid.cpp" $, 2573 $, "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : public A {\n5: void f ( ) {\n6: a@1 = 0 ;\n7: }\n8: } ;\n" $, $tokenize_ $(@expr1073744684 "cppcheck-2.8/test/testvarid.cpp" $, 2573 $, "class A {\n    int a;\n};\nclass B : public A {\n    void f() {\n        a = 0;\n    }\n};" $) $) $) { $return
2574:
|
2587:
2588: ; }
2589: }
2590:
2591: void varid_header ( ) {
2592: $if $(@expr1073744685 $!@expr1073744686 $assertEquals $(@expr1073744687 "cppcheck-2.8/test/testvarid.cpp" $, 2592 $, "1: class A ;\n2: struct B {\n3: void setData ( const A & a@1 ) ;\n4: } ;\n" $, $tokenize_ $(@expr1073744688 "cppcheck-2.8/test/testvarid.cpp" $, 2592 $, "class A;\nstruct B {\n    void setData(const A & a);\n}; " , "test.h" $) $) $) { $return
2593:
|
2598:
2599: ; }
2600: }
2601:
2602: void varid_rangeBasedFor ( ) {
2603: $if $(@expr1073744689 $!@expr1073744690 $assertEquals $(@expr1073744691 "cppcheck-2.8/test/testvarid.cpp" $, 2603 $, "1: void reset ( Foo array@1 ) {\n2: for ( auto & e@2 : array@1 ) {\n3: foo ( e@2 ) ; }\n4: } ;\n" $, $tokenize_ $(@expr1073744692 "cppcheck-2.8/test/testvarid.cpp" $, 2603 $, "void reset(Foo array) {\n    for (auto& e : array)\n        foo(e);\n};" $) $) $) { $return
2604:
|
2609:
2610: ; }
2611:
2612: $if $(@expr1073744693 $!@expr1073744694 $assertEquals $(@expr1073744695 "cppcheck-2.8/test/testvarid.cpp" $, 2612 $, "1: void reset ( Foo array@1 ) {\n2: for ( auto e@2 : array@1 ) {\n3: foo ( e@2 ) ; }\n4: } ;\n" $, $tokenize_ $(@expr1073744696 "cppcheck-2.8/test/testvarid.cpp" $, 2612 $, "void reset(Foo array) {\n    for (auto e : array)\n        foo(e);\n};" $) $) $) { $return
2613:
|
2618:
2619: ; }
2620:
2621:
2622: $if $(@expr1073744697 $!@expr1073744698 $assertEquals $(@expr1073744699 "cppcheck-2.8/test/testvarid.cpp" $, 2622 $, "1: void foo ( ) {\n2: switch ( event . key . keysym . sym ) {\n3: case SDLK_LEFT : ;\n4: break ;\n5: case SDLK_RIGHT : ;\n6: delta = 1 ;\n7: break ;\n8: }\n9: }\n" $, $tokenize_ $(@expr1073744700 "cppcheck-2.8/test/testvarid.cpp" $, 2622 $, "void foo() {\n    switch (event.key.keysym.sym) {\n    case SDLK_LEFT:\n        break;\n    case SDLK_RIGHT:\n        delta = 1;\n        break;\n    }\n}" , "test.c" $) $) $) { $return
2623:
|
2638:
2639: ; }
2640: }
2641:
2642: void varid_structinit ( ) {
2643: $if $(@expr1073744701 $!@expr1073744702 $assertEquals $(@expr1073744703 "cppcheck-2.8/test/testvarid.cpp" $, 2643 $, "1: void foo ( ) {\n2: struct ABC abc@1 ; abc@1 = { . a@2 = 0 , . b@3 = 1 } ;\n3: }\n" $, $tokenize_ $(@expr1073744704 "cppcheck-2.8/test/testvarid.cpp" $, 2643 $, "void foo() {\n  struct ABC abc = {.a=0,.b=1};\n}" $) $) $) { $return
2644:
|
2647:
2648: ; }
2649:
2650: $if $(@expr1073744705 $!@expr1073744706 $assertEquals $(@expr1073744707 "cppcheck-2.8/test/testvarid.cpp" $, 2650 $, "1: void foo ( ) {\n2: struct ABC abc@1 ; abc@1 = { . a@2 = abc@1 . a@2 , . b@3 = abc@1 . b@3 } ;\n3: }\n" $, $tokenize_ $(@expr1073744708 "cppcheck-2.8/test/testvarid.cpp" $, 2650 $, "void foo() {\n  struct ABC abc = {.a=abc.a,.b=abc.b};\n}" $) $) $) { $return
2651:
|
2654:
2655: ; }
2656:
2657: $if $(@expr1073744709 $!@expr1073744710 $assertEquals $(@expr1073744711 "cppcheck-2.8/test/testvarid.cpp" $, 2657 $, "1: void foo ( ) {\n2: struct ABC abc@1 ; abc@1 = { . a@2 { abc@1 . a@2 } , . b@3 = { abc@1 . b@3 } } ;\n3: }\n" $, $tokenize_ $(@expr1073744712 "cppcheck-2.8/test/testvarid.cpp" $, 2657 $, "void foo() {\n  struct ABC abc = {.a { abc.a },.b= { abc.b } };\n}" $) $) $) { $return
2658:
|
2661:
2662: ; }
2663: }
2664:
2665: void varid_arrayinit ( ) {
2666: $if $(@expr1073744713 $!@expr1073744714 $assertEquals $(@expr1073744715 "cppcheck-2.8/test/testvarid.cpp" $, 2666 $, "1: void foo ( int * a@1 ) { int b@2 [ 1 ] = { x * a@1 [ 0 ] } ; }\n" $, $tokenize_ $(@expr1073744716 "cppcheck-2.8/test/testvarid.cpp" $, 2666 $, "void foo(int*a) { int b[] = { x*a[0] }; }" $) $) $) { $return ; }
2667: }
2668:
2669: void varid_lambda_arg ( ) {
2670:
2671: {
2672: const char code@var391 [@expr1073744717 86 ] =@expr1073744718 "static void func(int ec) {\n    func2([](const std::error_code& ec) { return ec; });\n}"
2673:
2674: ;
2675: const char exp@var392 [@expr1073744719 113 ] =@expr1073744720 "1: static void func ( int ec@1 ) {\n2: func2 ( [ ] ( const std :: error_code & ec@2 ) { return ec@2 ; } ) ;\n3: }\n"
2676:
2677: ;
2678: $if $(@expr1073744721 $!@expr1073744722 $assertEquals $(@expr1073744723 "cppcheck-2.8/test/testvarid.cpp" $, 2678 $, exp@var392 $, $tokenize_ $(@expr1073744724 "cppcheck-2.8/test/testvarid.cpp" $, 2678 $, code@var391 $) $) $) { $return ; }
2679: }
2680: {
2681: const char code@var393 [@expr1073744725 97 ] =@expr1073744726 "static void func(int ec) {\n    func2([](int x, const std::error_code& ec) { return x + ec; });\n}"
2682:
2683: ;
2684: const char exp@var394 [@expr1073744727 129 ] =@expr1073744728 "1: static void func ( int ec@1 ) {\n2: func2 ( [ ] ( int x@2 , const std :: error_code & ec@3 ) { return x@2 + ec@3 ; } ) ;\n3: }\n"
2685:
2686: ;
2687: $if $(@expr1073744729 $!@expr1073744730 $assertEquals $(@expr1073744731 "cppcheck-2.8/test/testvarid.cpp" $, 2687 $, exp@var394 $, $tokenize_ $(@expr1073744732 "cppcheck-2.8/test/testvarid.cpp" $, 2687 $, code@var393 $) $) $) { $return ; }
2688: }
2689:
2690: {
2691: const char code@var395 [@expr1073744733 66 ] =@expr1073744734 "auto g = [](const std::string& s) -> std::string { return {}; };\n" ;
2692: const char exp@var396 [@expr1073744735 90 ] =@expr1073744736 "1: auto g@1 ; g@1 = [ ] ( const std :: string & s@2 ) . std :: string { return { } ; } ;\n" ;
2693: $if $(@expr1073744737 $!@expr1073744738 $assertEquals $(@expr1073744739 "cppcheck-2.8/test/testvarid.cpp" $, 2693 $, exp@var396 $, $tokenize_ $(@expr1073744740 "cppcheck-2.8/test/testvarid.cpp" $, 2693 $, code@var395 $) $) $) { $return ; }
2694: }
2695: {
2696: const char code@var397 [@expr1073744741 42 ] =@expr1073744742 "auto g = [](std::function<void()> p) {};\n" ;
2697: const char exp@var398 [@expr1073744743 68 ] =@expr1073744744 "1: auto g@1 ; g@1 = [ ] ( std :: function < void ( ) > p@2 ) { } ;\n" ;
2698: $if $(@expr1073744745 $!@expr1073744746 $assertEquals $(@expr1073744747 "cppcheck-2.8/test/testvarid.cpp" $, 2698 $, exp@var398 $, $tokenize_ $(@expr1073744748 "cppcheck-2.8/test/testvarid.cpp" $, 2698 $, code@var397 $) $) $) { $return ; }
2699: }
2700:
2701: {
2702: const char code@var399 [@expr1073744749 87 ] =@expr1073744750 "class T {};\nauto g = [](const T* t) -> int {\n    const T* u{}, *v{};\n    return 0;\n};\n"
2703:
2704:
2705:
2706: ;
2707: const char exp@var400 [@expr1073744751 132 ] =@expr1073744752 "1: class T { } ;\n2: auto g@1 ; g@1 = [ ] ( const T * t@2 ) . int {\n3: const T * u@3 { } ; const T * v@4 { } ;\n4: return 0 ;\n5: } ;\n"
2708:
2709:
2710:
2711: ;
2712: $if $(@expr1073744753 $!@expr1073744754 $assertEquals $(@expr1073744755 "cppcheck-2.8/test/testvarid.cpp" $, 2712 $, exp@var400 $, $tokenize_ $(@expr1073744756 "cppcheck-2.8/test/testvarid.cpp" $, 2712 $, code@var399 $) $) $) { $return ; }
2713: }
2714: }
2715:
2716: void varid_lambda_mutable ( ) {
2717:
2718: {
2719: const char code@var401 [@expr1073744757 69 ] =@expr1073744758 "static void func() {\n    auto x = []() mutable {};\n    dostuff(x);\n}"
2720:
2721:
2722: ;
2723: const char exp@var402 [@expr1073744759 95 ] =@expr1073744760 "1: static void func ( ) {\n2: auto x@1 ; x@1 = [ ] ( ) mutable { } ;\n3: dostuff ( x@1 ) ;\n4: }\n"
2724:
2725:
2726: ;
2727: $if $(@expr1073744761 $!@expr1073744762 $assertEquals $(@expr1073744763 "cppcheck-2.8/test/testvarid.cpp" $, 2727 $, exp@var402 $, $tokenize_ $(@expr1073744764 "cppcheck-2.8/test/testvarid.cpp" $, 2727 $, code@var401 $) $) $) { $return ; }
2728: }
2729:
2730: {
2731: const char code@var403 [@expr1073744765 32 ] =@expr1073744766 "auto g = [](int i) mutable {};\n" ;
2732: const char exp@var404 [@expr1073744767 51 ] =@expr1073744768 "1: auto g@1 ; g@1 = [ ] ( int i@2 ) mutable { } ;\n" ;
2733: $if $(@expr1073744769 $!@expr1073744770 $assertEquals $(@expr1073744771 "cppcheck-2.8/test/testvarid.cpp" $, 2733 $, exp@var404 $, $tokenize_ $(@expr1073744772 "cppcheck-2.8/test/testvarid.cpp" $, 2733 $, code@var403 $) $) $) { $return ; }
2734: }
2735: }
2736:
2737: void varid_trailing_return1 ( ) {
2738: const char code1@var405 [@expr1073744773 201 ] =@expr1073744774 "struct Fred {\n    auto foo(const Fred & other) -> Fred &;\n    auto bar(const Fred & other) -> Fred & {\n        return *this;\n    }\n};\nauto Fred::foo(const Fred & other) -> Fred & {\n    return *this;\n}"
2739:
|
2745:
2746: ;
2747: const char exp1@var406 [@expr1073744775 225 ] =@expr1073744776 "1: struct Fred {\n2: auto foo ( const Fred & other@1 ) . Fred & ;\n3: auto bar ( const Fred & other@2 ) . Fred & {\n4: return * this ;\n5: }\n6: } ;\n7: auto Fred :: foo ( const Fred & other@3 ) . Fred & {\n8: return * this ;\n9: }\n"
2748:
|
2754:
2755: ;
2756: $if $(@expr1073744777 $!@expr1073744778 $assertEquals $(@expr1073744779 "cppcheck-2.8/test/testvarid.cpp" $, 2756 $, exp1@var406 $, $tokenize_ $(@expr1073744780 "cppcheck-2.8/test/testvarid.cpp" $, 2756 $, code1@var405 $) $) $) { $return ; }
2757: }
2758:
2759: void varid_trailing_return2 ( ) {
2760: const char code1@var407 [@expr1073744781 35 ] =@expr1073744782 "auto func(int arg) -> bar::quux {}" ;
2761: const char exp1@var408 [@expr1073744783 46 ] =@expr1073744784 "1: auto func ( int arg@1 ) . bar :: quux { }\n" ;
2762: $if $(@expr1073744785 $!@expr1073744786 $assertEquals $(@expr1073744787 "cppcheck-2.8/test/testvarid.cpp" $, 2762 $, exp1@var408 $, $tokenize_ $(@expr1073744788 "cppcheck-2.8/test/testvarid.cpp" $, 2762 $, code1@var407 $) $) $) { $return ; }
2763: }
2764:
2765: void varid_parameter_pack ( ) {
2766: const char code1@var409 [@expr1073744789 87 ] =@expr1073744790 "template <typename... Rest>\nvoid func(Rest... parameters) {\n    foo(parameters...);\n}\n"
2767:
2768:
2769: ;
2770: const char exp1@var410 [@expr1073744791 111 ] =@expr1073744792 "1: template < typename ... Rest >\n2: void func ( Rest ... parameters@1 ) {\n3: foo ( parameters@1 ... ) ;\n4: }\n"
2771:
2772:
2773: ;
2774: $if $(@expr1073744793 $!@expr1073744794 $assertEquals $(@expr1073744795 "cppcheck-2.8/test/testvarid.cpp" $, 2774 $, exp1@var410 $, $tokenize_ $(@expr1073744796 "cppcheck-2.8/test/testvarid.cpp" $, 2774 $, code1@var409 $) $) $) { $return ; }
2775: }
2776:
2777: void varid_for_auto_cpp17 ( ) {
2778: const char code@var411 [@expr1073744797 65 ] =@expr1073744798 "void f() {\n  for (auto [x,y,z]: xyz) {\n    x+y+z;\n  }\n  x+y+z;\n}"
2779:
|
2782:
2783: ;
2784: const char exp1@var412 [@expr1073744799 107 ] =@expr1073744800 "1: void f ( ) {\n2: for ( auto [ x@1 , y@2 , z@3 ] : xyz ) {\n3: x@1 + y@2 + z@3 ;\n4: }\n5: x + y + z ;\n6: }\n"
2785:
|
2788:
2789: ;
2790: $if $(@expr1073744801 $!@expr1073744802 $assertEquals $(@expr1073744803 "cppcheck-2.8/test/testvarid.cpp" $, 2790 $, exp1@var412 $, $tokenize_ $(@expr1073744804 "cppcheck-2.8/test/testvarid.cpp" $, 2790 $, code@var411 $) $) $) { $return ; }
2791: }
2792:
2793: void varid_not ( ) {
2794: const char code1@var413 [@expr1073744805 42 ] =@expr1073744806 "void foo(int x) const {\n  if (not x) {}\n}"
2795:
2796: ;
2797: const char exp1@var414 [@expr1073744807 58 ] =@expr1073744808 "1: void foo ( int x@1 ) const {\n2: if ( ! x@1 ) { }\n3: }\n"
2798:
2799: ;
2800: $if $(@expr1073744809 $!@expr1073744810 $assertEquals $(@expr1073744811 "cppcheck-2.8/test/testvarid.cpp" $, 2800 $, exp1@var414 $, $tokenize_ $(@expr1073744812 "cppcheck-2.8/test/testvarid.cpp" $, 2800 $, code1@var413 $) $) $) { $return ; }
2801: }
2802:
2803: void varid_declInIfCondition ( ) {
2804:
2805: $if $(@expr1073744813 $!@expr1073744814 $assertEquals $(@expr1073744815 "cppcheck-2.8/test/testvarid.cpp" $, 2805 $, "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: x@1 ;\n4: }\n" $, $tokenize_ $(@expr1073744816 "cppcheck-2.8/test/testvarid.cpp" $, 2805 $, "void f(int x) {\n  if (int x = 0) { x; }\n  x;\n}" $) $) $) { $return
2806:
|
2811:
2812: ; }
2813:
2814: $if $(@expr1073744817 $!@expr1073744818 $assertEquals $(@expr1073744819 "cppcheck-2.8/test/testvarid.cpp" $, 2814 $, "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: else { x@2 ; }\n4: x@1 ;\n5: }\n" $, $tokenize_ $(@expr1073744820 "cppcheck-2.8/test/testvarid.cpp" $, 2814 $, "void f(int x) {\n  if (int x = 0) { x; }\n  else { x; }\n  x;\n}" $) $) $) { $return
2815:
|
2822:
2823: ; }
2824:
2825: $if $(@expr1073744821 $!@expr1073744822 $assertEquals $(@expr1073744823 "cppcheck-2.8/test/testvarid.cpp" $, 2825 $, "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: else { if ( void * x@3 = & x@3 ) { x@3 ; } }\n4: x@1 ;\n5: }\n" $, $tokenize_ $(@expr1073744824 "cppcheck-2.8/test/testvarid.cpp" $, 2825 $, "void f(int x) {\n  if (int x = 0) x;\n  else if (void* x = &x) x;\n  x;\n}" $) $) $) { $return
2826:
|
2833:
2834: ; }
2835:
2836: $if $(@expr1073744825 $!@expr1073744826 $assertEquals $(@expr1073744827 "cppcheck-2.8/test/testvarid.cpp" $, 2836 $, "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: else { if ( void * x@3 = & x@3 ) { x@3 ; }\n4: else { x@3 ; } }\n5: x@1 ;\n6: }\n" $, $tokenize_ $(@expr1073744828 "cppcheck-2.8/test/testvarid.cpp" $, 2836 $, "void f(int x) {\n  if (int x = 0) x;\n  else if (void* x = &x) x;\n  else x;\n  x;\n}" $) $) $) { $return
2837:
|
2846:
2847: ; }
2848: }
2849:
2850: void varidclass1 ( ) {
2851: const std ::@expr1073744829 string actual@var415 =@expr1073744830 $tokenize_ $(@expr1073744831 "cppcheck-2.8/test/testvarid.cpp" $, 2851 $, "class Fred\n{\nprivate:\n    int i;\n\n    void foo1();\n    void foo2()\n    {\n        ++i;\n    }\n}\n\nFred::foo1()\n{\n    i = 0;\n}" $)
2852:
|
2866:
2867: ;
2868:
2869: const char expected@var416 [@expr1073744832 164 ] =@expr1073744833 "1: class Fred\n2: {\n3: private:\n4: int i@1 ;\n5:\n6: void foo1 ( ) ;\n7: void foo2 ( )\n8: {\n9: ++ i@1 ;\n10: }\n11: }\n12:\n13: Fred :: foo1 ( )\n14: {\n15: i@1 = 0 ;\n16: }\n"
2870:
|
2883:
2884: ;
2885:
2886: $if $(@expr1073744834 $!@expr1073744835 $assertEquals $(@expr1073744836 "cppcheck-2.8/test/testvarid.cpp" $, 2886 $, expected@var416 $, actual@var415 $) $) { $return ; }
2887: }
2888:
2889:
2890: void varidclass2 ( ) {
2891: const std ::@expr1073744837 string actual@var417 =@expr1073744838 $tokenize_ $(@expr1073744839 "cppcheck-2.8/test/testvarid.cpp" $, 2891 $, "class Fred\n{ void f(); };\n\nvoid A::foo1()\n{\n    int i = 0;\n}\n\nvoid Fred::f()\n{\n    i = 0;\n}" $)
2892:
|
2902:
2903: ;
2904:
2905: const char expected@var418 [@expr1073744840 144 ] =@expr1073744841 "1: class Fred\n2: { void f ( ) ; } ;\n3:\n4: void A :: foo1 ( )\n5: {\n6: int i@1 ; i@1 = 0 ;\n7: }\n8:\n9: void Fred :: f ( )\n10: {\n11: i = 0 ;\n12: }\n"
2906:
|
2915:
2916: ;
2917:
2918: $if $(@expr1073744842 $!@expr1073744843 $assertEquals $(@expr1073744844 "cppcheck-2.8/test/testvarid.cpp" $, 2918 $, expected@var418 $, actual@var417 $) $) { $return ; }
2919: }
2920:
2921:
2922: void varidclass3 ( ) {
2923: const std ::@expr1073744845 string actual@var419 =@expr1073744846 $tokenize_ $(@expr1073744847 "cppcheck-2.8/test/testvarid.cpp" $, 2923 $, "class Fred\n{ int i; void f(); };\n\nvoid Fred::f()\n{\n    i = 0;\n}\n\nvoid A::f()\n{\n    i = 0;\n}" $)
2924:
|
2934:
2935: ;
2936:
2937: const char expected@var420 [@expr1073744848 141 ] =@expr1073744849 "1: class Fred\n2: { int i@1 ; void f ( ) ; } ;\n3:\n4: void Fred :: f ( )\n5: {\n6: i@1 = 0 ;\n7: }\n8:\n9: void A :: f ( )\n10: {\n11: i = 0 ;\n12: }\n"
2938:
|
2947:
2948: ;
2949:
2950: $if $(@expr1073744850 $!@expr1073744851 $assertEquals $(@expr1073744852 "cppcheck-2.8/test/testvarid.cpp" $, 2950 $, expected@var420 $, actual@var419 $) $) { $return ; }
2951: }
2952:
2953:
2954: void varidclass4 ( ) {
2955: const std ::@expr1073744853 string actual@var421 =@expr1073744854 $tokenize_ $(@expr1073744855 "cppcheck-2.8/test/testvarid.cpp" $, 2955 $, "class Fred\n{ int i; void f(); };\n\nvoid Fred::f()\n{\n    if (i) { }\n    i = 0;\n}" $)
2956:
|
2962:
2963: ;
2964:
2965: const char expected@var422 [@expr1073744856 113 ] =@expr1073744857 "1: class Fred\n2: { int i@1 ; void f ( ) ; } ;\n3:\n4: void Fred :: f ( )\n5: {\n6: if ( i@1 ) { }\n7: i@1 = 0 ;\n8: }\n"
2966:
|
2971:
2972: ;
2973:
2974: $if $(@expr1073744858 $!@expr1073744859 $assertEquals $(@expr1073744860 "cppcheck-2.8/test/testvarid.cpp" $, 2974 $, expected@var422 $, actual@var421 $) $) { $return ; }
2975: }
2976:
2977: void varidclass5 ( ) {
2978: const std ::@expr1073744861 string actual@var423 =@expr1073744862 $tokenize_ $(@expr1073744863 "cppcheck-2.8/test/testvarid.cpp" $, 2978 $, "class A { };\nclass B\n{\n    A *a;\n    B() : a(new A)\n    { }\n};" $)
2979:
|
2984:
2985: ;
2986:
2987: const char expected@var424 [@expr1073744864 86 ] =@expr1073744865 "1: class A { } ;\n2: class B\n3: {\n4: A * a@1 ;\n5: B ( ) : a@1 ( new A )\n6: { }\n7: } ;\n"
2988:
|
2992:
2993: ;
2994:
2995: $if $(@expr1073744866 $!@expr1073744867 $assertEquals $(@expr1073744868 "cppcheck-2.8/test/testvarid.cpp" $, 2995 $, expected@var424 $, actual@var423 $) $) { $return ; }
2996: }
2997:
2998: void varidclass6 ( ) {
2999: const std ::@expr1073744869 string actual@var425 =@expr1073744870 $tokenize_ $(@expr1073744871 "cppcheck-2.8/test/testvarid.cpp" $, 2999 $, "class A\n{\n  public:\n  static char buf[20];\n};\nchar A::buf[20];\nint main()\n{\n  char buf[2];\n  A::buf[10] = 0;\n}" $)
3000:
|
3009:
3010: ;
3011:
3012: const char expected@var426 [@expr1073744872 170 ] =@expr1073744873 "1: class A\n2: {\n3: public:\n4: static char buf@1 [ 20 ] ;\n5: } ;\n6: char A :: buf@1 [ 20 ] ;\n7: int main ( )\n8: {\n9: char buf@2 [ 2 ] ;\n10: A :: buf@1 [ 10 ] = 0 ;\n11: }\n"
3013:
|
3021:
3022: ;
3023:
3024: $if $(@expr1073744874 $!@expr1073744875 $assertEquals $(@expr1073744876 "cppcheck-2.8/test/testvarid.cpp" $, 3024 $, expected@var426 $, actual@var425 $) $) { $return ; }
3025: }
3026:
3027: void varidclass7 ( ) {
3028: const std ::@expr1073744877 string actual@var427 =@expr1073744878 $tokenize_ $(@expr1073744879 "cppcheck-2.8/test/testvarid.cpp" $, 3028 $, "int main()\n{\n  char buf[2];\n  A::buf[10] = 0;\n}" $)
3029:
|
3032:
3033: ;
3034:
3035: const char expected@var428 [@expr1073744880 74 ] =@expr1073744881 "1: int main ( )\n2: {\n3: char buf@1 [ 2 ] ;\n4: A :: buf [ 10 ] = 0 ;\n5: }\n"
3036:
3037:
3038:
3039: ;
3040:
3041: $if $(@expr1073744882 $!@expr1073744883 $assertEquals $(@expr1073744884 "cppcheck-2.8/test/testvarid.cpp" $, 3041 $, expected@var428 $, actual@var427 $) $) { $return ; }
3042: }
3043:
3044: void varidclass8 ( ) {
3045: const char code@var429 [@expr1073744885 91 ] =@expr1073744886 "class Fred {\npublic:\n    void foo(int d) {\n        int i = bar(x * d);\n    }\n    int x;\n}\n"
3046:
|
3050:
3051: ;
3052:
3053: const char expected@var430 [@expr1073744887 116 ] =@expr1073744888 "1: class Fred {\n2: public:\n3: void foo ( int d@1 ) {\n4: int i@2 ; i@2 = bar ( x@3 * d@1 ) ;\n5: }\n6: int x@3 ;\n7: }\n"
3054:
|
3058:
3059: ;
3060:
3061: $if $(@expr1073744889 $!@expr1073744890 $assertEquals $(@expr1073744891 "cppcheck-2.8/test/testvarid.cpp" $, 3061 $, expected@var430 $, $tokenize_ $(@expr1073744892 "cppcheck-2.8/test/testvarid.cpp" $, 3061 $, code@var429 $) $) $) { $return ; }
3062: }
3063:
3064: void varidclass9 ( ) {
3065: const char code@var431 [@expr1073744893 124 ] =@expr1073744894 "typedef char Str[10];class A {\npublic:\n    void f(Str &cl);\n    void g(Str cl);\n}\nvoid Fred::f(Str &cl) {\n    sizeof(cl);\n}"
3066:
|
3072:
3073: ;
3074:
3075: const char expected@var432 [@expr1073744895 175 ] =@expr1073744896 "1: class A {\n2: public:\n3: void f ( char ( & cl@1 ) [ 10 ] ) ;\n4: void g ( char cl@2 [ 10 ] ) ;\n5: }\n6: void Fred :: f ( char ( & cl@3 ) [ 10 ] ) {\n7: sizeof ( cl@3 ) ;\n8: }\n"
3076:
|
3081:
3082: ;
3083:
3084: $if $(@expr1073744897 $!@expr1073744898 $assertEquals $(@expr1073744899 "cppcheck-2.8/test/testvarid.cpp" $, 3084 $, expected@var432 $, $tokenize_ $(@expr1073744900 "cppcheck-2.8/test/testvarid.cpp" $, 3084 $, code@var431 $) $) $) { $return ; }
3085: }
3086:
3087: void varidclass10 ( ) {
3088: const char code@var433 [@expr1073744901 61 ] =@expr1073744902 "class A {\n    void f() {\n        a = 3;\n    }\n    int a;\n};\n"
3089:
|
3092:
3093: ;
3094:
3095: const char expected@var434 [@expr1073744903 68 ] =@expr1073744904 "1: class A {\n2: void f ( ) {\n3: a@1 = 3 ;\n4: }\n5: int a@1 ;\n6: } ;\n"
3096:
|
3099:
3100: ;
3101: $if $(@expr1073744905 $!@expr1073744906 $assertEquals $(@expr1073744907 "cppcheck-2.8/test/testvarid.cpp" $, 3101 $, expected@var434 $, $tokenize_ $(@expr1073744908 "cppcheck-2.8/test/testvarid.cpp" $, 3101 $, code@var433 $) $) $) { $return ; }
3102: }
3103:
3104: void varidclass11 ( ) {
3105: const char code@var435 [@expr1073744909 137 ] =@expr1073744910 "class Fred {\n    int a;\n    void f();\n};\nclass Wilma {\n    int a;\n    void f();\n};\nvoid Fred::f() { a = 0; }\nvoid Wilma::f() { a = 0; }\n"
3106:
|
3113:
3114: ;
3115:
3116: const char expected@var436 [@expr1073744911 180 ] =@expr1073744912 "1: class Fred {\n2: int a@1 ;\n3: void f ( ) ;\n4: } ;\n5: class Wilma {\n6: int a@2 ;\n7: void f ( ) ;\n8: } ;\n9: void Fred :: f ( ) { a@1 = 0 ; }\n10: void Wilma :: f ( ) { a@2 = 0 ; }\n"
3117:
|
3124:
3125: ;
3126:
3127: $if $(@expr1073744913 $!@expr1073744914 $assertEquals $(@expr1073744915 "cppcheck-2.8/test/testvarid.cpp" $, 3127 $, expected@var436 $, $tokenize_ $(@expr1073744916 "cppcheck-2.8/test/testvarid.cpp" $, 3127 $, code@var435 $) $) $) { $return ; }
3128: }
3129:
3130: void varidclass12 ( ) {
3131: const char code@var437 [@expr1073744917 58 ] =@expr1073744918 "class Fred {\n    int a;\n    void f() { Fred::a = 0; }\n};\n"
3132:
3133:
3134: ;
3135:
3136: const char expected@var438 [@expr1073744919 73 ] =@expr1073744920 "1: class Fred {\n2: int a@1 ;\n3: void f ( ) { Fred :: a@1 = 0 ; }\n4: } ;\n"
3137:
3138:
3139: ;
3140:
3141: $if $(@expr1073744921 $!@expr1073744922 $assertEquals $(@expr1073744923 "cppcheck-2.8/test/testvarid.cpp" $, 3141 $, expected@var438 $, $tokenize_ $(@expr1073744924 "cppcheck-2.8/test/testvarid.cpp" $, 3141 $, code@var437 $) $) $) { $return ; }
3142: }
3143:
3144: void varidclass13 ( ) {
3145: const char code@var439 [@expr1073744925 63 ] =@expr1073744926 "class Fred {\n    int a;\n    void f() { Foo::Fred::a = 0; }\n};\n"
3146:
3147:
3148: ;
3149:
3150: const char expected@var440 [@expr1073744927 78 ] =@expr1073744928 "1: class Fred {\n2: int a@1 ;\n3: void f ( ) { Foo :: Fred :: a = 0 ; }\n4: } ;\n"
3151:
3152:
3153: ;
3154:
3155: $if $(@expr1073744929 $!@expr1073744930 $assertEquals $(@expr1073744931 "cppcheck-2.8/test/testvarid.cpp" $, 3155 $, expected@var440 $, $tokenize_ $(@expr1073744932 "cppcheck-2.8/test/testvarid.cpp" $, 3155 $, code@var439 $) $) $) { $return ; }
3156: }
3157:
3158: void varidclass14 ( ) {
3159:
3160: {
3161: const char code@var441 [@expr1073744933 28 ] =@expr1073744934 "class A {\nfriend class B;\n}"
3162:
3163: ;
3164:
3165: const char expected@var442 [@expr1073744935 39 ] =@expr1073744936 "1: class A {\n2: friend class B ;\n3: }\n"
3166:
3167: ;
3168:
3169: $if $(@expr1073744937 $!@expr1073744938 $assertEquals $(@expr1073744939 "cppcheck-2.8/test/testvarid.cpp" $, 3169 $, expected@var442 $, $tokenize_ $(@expr1073744940 "cppcheck-2.8/test/testvarid.cpp" $, 3169 $, code@var441 $) $) $) { $return ; }
3170: }
3171:
3172: {
3173: const char code@var443 [@expr1073744941 37 ] =@expr1073744942 "class A {\nprivate: friend class B;\n}"
3174:
3175: ;
3176:
3177: const char expected@var444 [@expr1073744943 48 ] =@expr1073744944 "1: class A {\n2: private: friend class B ;\n3: }\n"
3178:
3179: ;
3180:
3181: $if $(@expr1073744945 $!@expr1073744946 $assertEquals $(@expr1073744947 "cppcheck-2.8/test/testvarid.cpp" $, 3181 $, expected@var444 $, $tokenize_ $(@expr1073744948 "cppcheck-2.8/test/testvarid.cpp" $, 3181 $, code@var443 $) $) $) { $return ; }
3182: }
3183: }
3184:
3185: void varidclass15 ( ) {
3186: const char code@var445 [@expr1073744949 69 ] =@expr1073744950 "class A {\n    int a;\n    int b;\n    A();\n};\nA::A() : a(0) { b = 1; }"
3187:
|
3190:
3191: ;
3192: const char expected@var446 [@expr1073744951 98 ] =@expr1073744952 "1: class A {\n2: int a@1 ;\n3: int b@2 ;\n4: A ( ) ;\n5: } ;\n6: A :: A ( ) : a@1 ( 0 ) { b@2 = 1 ; }\n"
3193:
|
3196:
3197: ;
3198: $if $(@expr1073744953 $!@expr1073744954 $assertEquals $(@expr1073744955 "cppcheck-2.8/test/testvarid.cpp" $, 3198 $, expected@var446 $, $tokenize_ $(@expr1073744956 "cppcheck-2.8/test/testvarid.cpp" $, 3198 $, code@var445 $) $) $) { $return ; }
3199: }
3200:
3201: void varidclass16 ( ) {
3202: const char code@var447 [@expr1073744957 177 ] =@expr1073744958 "struct A;\ntypedef bool (A::* FuncPtr)();\nstruct A {\n    FuncPtr pFun;\n    void setPFun(int mode);\n    bool funcNorm();\n};\nvoid A::setPFun(int mode) {\n    pFun = &A::funcNorm;\n}"
3203:
|
3210:
3211: ;
3212: const char expected@var448 [@expr1073744959 196 ] =@expr1073744960 "1: struct A ;\n2:\n3: struct A {\n4: bool ( * pFun@1 ) ( ) ;\n5: void setPFun ( int mode@2 ) ;\n6: bool funcNorm ( ) ;\n7: } ;\n8: void A :: setPFun ( int mode@3 ) {\n9: pFun@1 = & A :: funcNorm ;\n10: }\n"
3213:
|
3220:
3221: ;
3222: $if $(@expr1073744961 $!@expr1073744962 $assertEquals $(@expr1073744963 "cppcheck-2.8/test/testvarid.cpp" $, 3222 $, expected@var448 $, $tokenize_ $(@expr1073744964 "cppcheck-2.8/test/testvarid.cpp" $, 3222 $, code@var447 $) $) $) { $return ; }
3223: }
3224:
3225: void varidclass17 ( ) {
3226: const char code@var449 [@expr1073744965 107 ] =@expr1073744966 "class A: public B, public C::D {\n    int i;\n    A(int i): B(i), C::D(i), i(i) {\n        int j(i);\n    }\n};"
3227:
|
3230:
3231: ;
3232: const char expected@var450 [@expr1073744967 153 ] =@expr1073744968 "1: class A : public B , public C :: D {\n2: int i@1 ;\n3: A ( int i@2 ) : B ( i@2 ) , C :: D ( i@2 ) , i@1 ( i@2 ) {\n4: int j@3 ; j@3 = i@2 ;\n5: }\n6: } ;\n"
3233:
|
3236:
3237: ;
3238: $if $(@expr1073744969 $!@expr1073744970 $assertEquals $(@expr1073744971 "cppcheck-2.8/test/testvarid.cpp" $, 3238 $, expected@var450 $, $tokenize_ $(@expr1073744972 "cppcheck-2.8/test/testvarid.cpp" $, 3238 $, code@var449 $) $) $) { $return ; }
3239: }
3240:
3241: void varidclass18 ( ) {
3242: const char code@var451 [@expr1073744973 69 ] =@expr1073744974 "class A {\n    int a;\n    int b;\n    A();\n};\nA::A() : a{0} { b = 1; }"
3243:
|
3246:
3247: ;
3248: const char expected@var452 [@expr1073744975 98 ] =@expr1073744976 "1: class A {\n2: int a@1 ;\n3: int b@2 ;\n4: A ( ) ;\n5: } ;\n6: A :: A ( ) : a@1 { 0 } { b@2 = 1 ; }\n"
3249:
|
3252:
3253: ;
3254: $if $(@expr1073744977 $!@expr1073744978 $assertEquals $(@expr1073744979 "cppcheck-2.8/test/testvarid.cpp" $, 3254 $, expected@var452 $, $tokenize_ $(@expr1073744980 "cppcheck-2.8/test/testvarid.cpp" $, 3254 $, code@var451 $) $) $) { $return ; }
3255: }
3256:
3257: void varidclass19 ( ) {
3258: const char code@var453 [@expr1073744981 66 ] =@expr1073744982 "class A : public ::B {\n  int a;\n  A();\n};\nA::A() : ::B(), a(0) {}"
3259:
3260:
3261:
3262: ;
3263: const char expected@var454 [@expr1073744983 100 ] =@expr1073744984 "1: class A : public :: B {\n2: int a@1 ;\n3: A ( ) ;\n4: } ;\n5: A :: A ( ) : :: B ( ) , a@1 ( 0 ) { }\n"
3264:
3265:
3266:
3267: ;
3268: $if $(@expr1073744985 $!@expr1073744986 $assertEquals $(@expr1073744987 "cppcheck-2.8/test/testvarid.cpp" $, 3268 $, expected@var454 $, $tokenize_ $(@expr1073744988 "cppcheck-2.8/test/testvarid.cpp" $, 3268 $, code@var453 $) $) $) { $return ; }
3269: }
3270:
3271: void varidclass20 ( ) {
3272: const char code@var455 [@expr1073744989 57 ] =@expr1073744990 "struct S {\n  int (*p)[2];\n  S();\n};\nS::S() { p[0] = 0; }"
3273:
3274:
3275:
3276: ;
3277: const char expected@var456 [@expr1073744991 92 ] =@expr1073744992 "1: struct S {\n2: int ( * p@1 ) [ 2 ] ;\n3: S ( ) ;\n4: } ;\n5: S :: S ( ) { p@1 [ 0 ] = 0 ; }\n"
3278:
3279:
3280:
3281: ;
3282: $if $(@expr1073744993 $!@expr1073744994 $assertEquals $(@expr1073744995 "cppcheck-2.8/test/testvarid.cpp" $, 3282 $, expected@var456 $, $tokenize_ $(@expr1073744996 "cppcheck-2.8/test/testvarid.cpp" $, 3282 $, code@var455 $) $) $) { $return ; }
3283: }
3284:
3285: void varidenum1 ( ) {
3286: const char code@var457 [@expr1073744997 54 ] =@expr1073744998 "const int eStart = 6;\nenum myEnum {\n  A = eStart;\n};\n"
3287:
3288:
3289: ;
3290: const char expected@var458 [@expr1073744999 71 ] =@expr1073745000 "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = eStart@1 ;\n4: } ;\n"
3291:
3292:
3293: ;
3294: $if $(@expr1073745001 $!@expr1073745002 $assertEquals $(@expr1073745003 "cppcheck-2.8/test/testvarid.cpp" $, 3294 $, expected@var458 $, $tokenize_ $(@expr1073745004 "cppcheck-2.8/test/testvarid.cpp" $, 3294 $, code@var457 $) $) $) { $return ; }
3295: }
3296:
3297: void varidenum2 ( ) {
3298: const char code@var459 [@expr1073745005 57 ] =@expr1073745006 "const int eStart = 6;\nenum myEnum {\n  A = f(eStart);\n};\n"
3299:
3300:
3301: ;
3302: const char expected@var460 [@expr1073745007 77 ] =@expr1073745008 "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( eStart@1 ) ;\n4: } ;\n"
3303:
3304:
3305: ;
3306: $if $(@expr1073745009 $!@expr1073745010 $assertEquals $(@expr1073745011 "cppcheck-2.8/test/testvarid.cpp" $, 3306 $, expected@var460 $, $tokenize_ $(@expr1073745012 "cppcheck-2.8/test/testvarid.cpp" $, 3306 $, code@var459 $) $) $) { $return ; }
3307: }
3308:
3309: void varidenum3 ( ) {
3310: const char code@var461 [@expr1073745013 60 ] =@expr1073745014 "const int eStart = 6;\nenum myEnum {\n  A = f(eStart, x);\n};\n"
3311:
3312:
3313: ;
3314: const char expected@var462 [@expr1073745015 81 ] =@expr1073745016 "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( eStart@1 , x ) ;\n4: } ;\n"
3315:
3316:
3317: ;
3318: $if $(@expr1073745017 $!@expr1073745018 $assertEquals $(@expr1073745019 "cppcheck-2.8/test/testvarid.cpp" $, 3318 $, expected@var462 $, $tokenize_ $(@expr1073745020 "cppcheck-2.8/test/testvarid.cpp" $, 3318 $, code@var461 $) $) $) { $return ; }
3319: }
3320:
3321: void varidenum4 ( ) {
3322: const char code@var463 [@expr1073745021 60 ] =@expr1073745022 "const int eStart = 6;\nenum myEnum {\n  A = f(x, eStart);\n};\n"
3323:
3324:
3325: ;
3326: const char expected@var464 [@expr1073745023 81 ] =@expr1073745024 "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart@1 ) ;\n4: } ;\n"
3327:
3328:
3329: ;
3330: $if $(@expr1073745025 $!@expr1073745026 $assertEquals $(@expr1073745027 "cppcheck-2.8/test/testvarid.cpp" $, 3330 $, expected@var464 $, $tokenize_ $(@expr1073745028 "cppcheck-2.8/test/testvarid.cpp" $, 3330 $, code@var463 $) $) $) { $return ; }
3331: }
3332:
3333: void varidenum5 ( ) {
3334: const char code@var465 [@expr1073745029 63 ] =@expr1073745030 "const int eStart = 6;\nenum myEnum {\n  A = f(x, eStart, y);\n};\n"
3335:
3336:
3337: ;
3338: const char expected@var466 [@expr1073745031 85 ] =@expr1073745032 "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart@1 , y ) ;\n4: } ;\n"
3339:
3340:
3341: ;
3342: const char current@var467 [@expr1073745033 83 ] =@expr1073745034 "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart , y ) ;\n4: } ;\n"
3343:
3344:
3345: ;
3346: $todoAssertEquals $(@expr1073745035 "cppcheck-2.8/test/testvarid.cpp" $, 3346 $, expected@var466 $, current@var467 $, $tokenize_ $(@expr1073745036 "cppcheck-2.8/test/testvarid.cpp" $, 3346 $, code@var465 $) $) ;
3347: }
3348:
3349: void varidenum6 ( ) {
3350: const char code@var468 [@expr1073745037 51 ] =@expr1073745038 "const int IDL1 = 13;\nenum class E { IDL1 = 16, };\n"
3351: ;
3352: const char expected@var469 [@expr1073745039 62 ] =@expr1073745040 "1: const int IDL1@1 = 13 ;\n2: enum class E { IDL1 = 16 , } ;\n"
3353: ;
3354: $if $(@expr1073745041 $!@expr1073745042 $assertEquals $(@expr1073745043 "cppcheck-2.8/test/testvarid.cpp" $, 3354 $, expected@var469 $, $tokenize_ $(@expr1073745044 "cppcheck-2.8/test/testvarid.cpp" $, 3354 $, code@var468 $) $) $) { $return ; }
3355: }
3356:
3357: void varidenum7 ( ) {
3358: const char code@var470 [@expr1073745045 122 ] =@expr1073745046 "namespace N1 { const int c = 42; }\nnamespace N2 { const int c = 24; }\nstruct S {\n    enum { v1 = N1::c, v2 = N2::c };\n};\n"
3359:
3360:
3361:
3362: ;
3363: const char expected@var471 [@expr1073745047 161 ] =@expr1073745048 "1: namespace N1 { const int c@1 = 42 ; }\n2: namespace N2 { const int c@2 = 24 ; }\n3: struct S {\n4: enum Anonymous0 { v1 = N1 :: c@1 , v2 = N2 :: c@2 } ;\n5: } ;\n"
3364:
3365:
3366:
3367: ;
3368: $if $(@expr1073745049 $!@expr1073745050 $assertEquals $(@expr1073745051 "cppcheck-2.8/test/testvarid.cpp" $, 3368 $, expected@var471 $, $tokenize_ $(@expr1073745052 "cppcheck-2.8/test/testvarid.cpp" $, 3368 $, code@var470 $) $) $) { $return ; }
3369: }
3370:
3371: void varid_classnameshaddowsvariablename ( ) {
3372: const char code@var472 [@expr1073745053 124 ] =@expr1073745054 "class Data;\nvoid strange_declarated(const Data& Data);\nvoid handleData(const Data& data) {\n    strange_declarated(data);\n}\n"
3373:
3374:
3375:
3376: ;
3377: const char expected@var473 [@expr1073745055 155 ] =@expr1073745056 "1: class Data ;\n2: void strange_declarated ( const Data & Data@1 ) ;\n3: void handleData ( const Data & data@2 ) {\n4: strange_declarated ( data@2 ) ;\n5: }\n"
3378:
3379:
3380:
3381: ;
3382: $if $(@expr1073745057 $!@expr1073745058 $assertEquals $(@expr1073745059 "cppcheck-2.8/test/testvarid.cpp" $, 3382 $, expected@var473 $, $tokenize_ $(@expr1073745060 "cppcheck-2.8/test/testvarid.cpp" $, 3382 $, code@var472 $) $) $) { $return ; }
3383:
3384: }
3385:
3386: void varid_classnametemplate ( ) {
3387: const char code@var474 [@expr1073745061 189 ] =@expr1073745062 "template <typename T>\nstruct BBB {\n  struct inner;\n};\n\ntemplate <typename T>\nstruct BBB<T>::inner {\n  inner(int x);\n  int x;\n};\n\ntemplate <typename T>\nBBB<T>::inner::inner(int x): x(x) {}\n"
3388:
|
3398:
3399: ;
3400: const char expected@var475 [@expr1073745063 268 ] =@expr1073745064 "1: template < typename T >\n2: struct BBB {\n3: struct inner ;\n4: } ;\n5:\n6: template < typename T >\n7: struct BBB < T > :: inner {\n8: inner ( int x@1 ) ;\n9: int x@2 ;\n10: } ;\n11:\n12: template < typename T >\n13: BBB < T > :: inner :: inner ( int x@3 ) : x@2 ( x@3 ) { }\n"
3401:
|
3411:
3412: ;
3413: $if $(@expr1073745065 $!@expr1073745066 $assertEquals $(@expr1073745067 "cppcheck-2.8/test/testvarid.cpp" $, 3413 $, expected@var475 $, $tokenize_ $(@expr1073745068 "cppcheck-2.8/test/testvarid.cpp" $, 3413 $, code@var474 $) $) $) { $return ; }
3414:
3415: }
3416:
3417: void varidnamespace1 ( ) {
3418: const char code@var476 [@expr1073745069 73 ] =@expr1073745070 "namespace A {\n    char buf[20];\n}\nint main() {\n    return foo(A::buf);\n}"
3419:
|
3422:
3423: ;
3424:
3425: const char expected@var477 [@expr1073745071 100 ] =@expr1073745072 "1: namespace A {\n2: char buf@1 [ 20 ] ;\n3: }\n4: int main ( ) {\n5: return foo ( A :: buf@1 ) ;\n6: }\n"
3426:
|
3429:
3430: ;
3431:
3432: $if $(@expr1073745073 $!@expr1073745074 $assertEquals $(@expr1073745075 "cppcheck-2.8/test/testvarid.cpp" $, 3432 $, expected@var477 $, $tokenize_ $(@expr1073745076 "cppcheck-2.8/test/testvarid.cpp" $, 3432 $, code@var476 $) $) $) { $return ; }
3433: }
3434:
3435: void varidnamespace2 ( ) {
3436: const char code@var478 [@expr1073745077 94 ] =@expr1073745078 "namespace A {\n  namespace B {\n    char buf[20];\n  }\n}\nint main() {\n  return foo(A::B::buf);\n}"
3437:
|
3442:
3443: ;
3444:
3445: const char expected@var479 [@expr1073745079 127 ] =@expr1073745080 "1: namespace A {\n2: namespace B {\n3: char buf@1 [ 20 ] ;\n4: }\n5: }\n6: int main ( ) {\n7: return foo ( A :: B :: buf@1 ) ;\n8: }\n"
3446:
|
3451:
3452: ;
3453:
3454: $if $(@expr1073745081 $!@expr1073745082 $assertEquals $(@expr1073745083 "cppcheck-2.8/test/testvarid.cpp" $, 3454 $, expected@var479 $, $tokenize_ $(@expr1073745084 "cppcheck-2.8/test/testvarid.cpp" $, 3454 $, code@var478 $) $) $) { $return ; }
3455: }
3456:
3457: void usingNamespace1 ( ) {
3458: const char code@var480 [@expr1073745085 105 ] =@expr1073745086 "namespace NS {\n  class A { int x; void dostuff(); };\n}\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n"
3459:
3460:
3461:
3462: ;
3463: const char expected@var481 [@expr1073745087 133 ] =@expr1073745088 "1: namespace NS {\n2: class A { int x@1 ; void dostuff ( ) ; } ;\n3: }\n4: using namespace NS ;\n5: void A :: dostuff ( ) { x@1 = 0 ; }\n"
3464:
3465:
3466:
3467: ;
3468: $if $(@expr1073745089 $!@expr1073745090 $assertEquals $(@expr1073745091 "cppcheck-2.8/test/testvarid.cpp" $, 3468 $, expected@var481 $, $tokenize_ $(@expr1073745092 "cppcheck-2.8/test/testvarid.cpp" $, 3468 $, code@var480 $) $) $) { $return ; }
3469: }
3470:
3471: void usingNamespace2 ( ) {
3472: const char code@var482 [@expr1073745093 86 ] =@expr1073745094 "class A { int x; void dostuff(); };\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n"
3473:
3474: ;
3475: const char expected@var483 [@expr1073745095 110 ] =@expr1073745096 "1: class A { int x@1 ; void dostuff ( ) ; } ;\n2: using namespace NS ;\n3: void A :: dostuff ( ) { x@1 = 0 ; }\n"
3476:
3477: ;
3478: $if $(@expr1073745097 $!@expr1073745098 $assertEquals $(@expr1073745099 "cppcheck-2.8/test/testvarid.cpp" $, 3478 $, expected@var483 $, $tokenize_ $(@expr1073745100 "cppcheck-2.8/test/testvarid.cpp" $, 3478 $, code@var482 $) $) $) { $return ; }
3479: }
3480:
3481: void usingNamespace3 ( ) {
3482: const char code@var484 [@expr1073745101 148 ] =@expr1073745102 "namespace A {\n    namespace B {\n        class C {\n            double m;\n            C();\n        };\n    }\n}\nusing namespace A::B;\nC::C() : m(42) {}"
3483:
|
3490:
3491: ;
3492:
3493: const char expected@var485 [@expr1073745103 152 ] =@expr1073745104 "1: namespace A {\n2: namespace B {\n3: class C {\n4: double m@1 ;\n5: C ( ) ;\n6: } ;\n7: }\n8: }\n9: using namespace A :: B ;\n10: C :: C ( ) : m@1 ( 42 ) { }\n"
3494:
|
3501:
3502: ;
3503:
3504: $if $(@expr1073745105 $!@expr1073745106 $assertEquals $(@expr1073745107 "cppcheck-2.8/test/testvarid.cpp" $, 3504 $, expected@var485 $, $tokenize_ $(@expr1073745108 "cppcheck-2.8/test/testvarid.cpp" $, 3504 $, code@var484 $) $) $) { $return ; }
3505: }
3506:
3507: void setVarIdStructMembers1 ( ) {
3508: const char code@var486 [@expr1073745109 72 ] =@expr1073745110 "void f(Foo foo)\n{\n    foo.size = 0;\n    return ((uint8_t)(foo).size);\n}"
3509:
3510:
3511:
3512: ;
3513: const char expected@var487 [@expr1073745111 106 ] =@expr1073745112 "1: void f ( Foo foo@1 )\n2: {\n3: foo@1 . size@2 = 0 ;\n4: return ( ( uint8_t ) ( foo@1 ) . size@2 ) ;\n5: }\n"
3514:
3515:
3516:
3517: ;
3518: $if $(@expr1073745113 $!@expr1073745114 $assertEquals $(@expr1073745115 "cppcheck-2.8/test/testvarid.cpp" $, 3518 $, expected@var487 $, $tokenize_ $(@expr1073745116 "cppcheck-2.8/test/testvarid.cpp" $, 3518 $, code@var486 $) $) $) { $return ; }
3519: }
3520:
3521: void decltype1 ( ) {
3522: const char code@var488 [@expr1073745117 36 ] =@expr1073745118 "void foo(int x, decltype(A::b) *p);" ;
3523: const char expected@var489 [@expr1073745119 55 ] =@expr1073745120 "1: void foo ( int x@1 , decltype ( A :: b ) * p@2 ) ;\n" ;
3524: $if $(@expr1073745121 $!@expr1073745122 $assertEquals $(@expr1073745123 "cppcheck-2.8/test/testvarid.cpp" $, 3524 $, expected@var489 $, $tokenize_ $(@expr1073745124 "cppcheck-2.8/test/testvarid.cpp" $, 3524 $, code@var488 $) $) $) { $return ; }
3525: }
3526:
3527: void decltype2 ( ) {
3528: const char code@var490 [@expr1073745125 22 ] =@expr1073745126 "int x; decltype(x) y;" ;
3529: const char expected@var491 [@expr1073745127 37 ] =@expr1073745128 "1: int x@1 ; decltype ( x@1 ) y@2 ;\n" ;
3530: $if $(@expr1073745129 $!@expr1073745130 $assertEquals $(@expr1073745131 "cppcheck-2.8/test/testvarid.cpp" $, 3530 $, expected@var491 $, $tokenize_ $(@expr1073745132 "cppcheck-2.8/test/testvarid.cpp" $, 3530 $, code@var490 $) $) $) { $return ; }
3531: }
3532:
3533: void exprid1 ( ) {
3534: const std ::@expr1073745133 string actual@var492 =@expr1073745134 $tokenizeExpr_ $(@expr1073745135 "cppcheck-2.8/test/testvarid.cpp" $, 3534 $, "struct A {\n    int x, y;\n};\nint f(A a, A b) {\n    int x = a.x + b.x;\n    int y = b.x + a.x;\n    return x + y + a.y + b.y;\n}\n" $)
3535:
|
3541:
3542: ;
3543:
3544: const char expected@var493 [@expr1073745136 242 ] =@expr1073745137 "1: struct A {\n2: int x ; int y ;\n3: } ;\n4: int f ( A a , A b ) {\n5: int x@5 ; x@5 =@9 a@3 .@10 x@6 +@11 b@4 .@12 x@7 ;\n6: int y@8 ; y@8 =@13 b@4 .@12 x@7 +@11 a@3 .@10 x@6 ;\n7: return x@5 +@17 y@8 +@18 a@3 .@19 y@9 +@20 b@4 .@21 y@10 ;\n8: }\n"
3545:
|
3550:
3551: ;
3552:
3553: $if $(@expr1073745138 $!@expr1073745139 $assertEquals $(@expr1073745140 "cppcheck-2.8/test/testvarid.cpp" $, 3553 $, expected@var493 $, actual@var492 $) $) { $return ; }
3554: }
3555:
3556: void structuredBindings ( ) {
3557: const char code@var494 [@expr1073745141 45 ] =@expr1073745142 "int foo() { auto [x,y] = xy(); return x+y; }" ;
3558: $if $(@expr1073745143 $!@expr1073745144 $assertEquals $(@expr1073745145 "cppcheck-2.8/test/testvarid.cpp" $, 3558 $, "1: int foo ( ) { auto [ x@1 , y@2 ] = xy ( ) ; return x@1 + y@2 ; }\n" $, $tokenize_ $(@expr1073745146 "cppcheck-2.8/test/testvarid.cpp" $, 3558 $, code@var494 $) $) $) { $return
3559: ; }
3560: }
3561: } ;
3562:
3563: $namespace ${ TestVarID instance_TestVarID@var495 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@6}
  v {!<=-1,!>=2,0@6}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 35
  "TestVarID" always "TestVarID"
Line 39
  ( always {!<=-1,!>=2}
  "varid1" always "varid1"
  false always 0
  false always 0
Line 40
  ( always {!<=-1,!>=2}
  "varid2" always "varid2"
  false always 0
  false always 0
Line 41
  ( always {!<=-1,!>=2}
  "varid3" always "varid3"
  false always 0
  false always 0
Line 42
  ( always {!<=-1,!>=2}
  "varid4" always "varid4"
  false always 0
  false always 0
Line 43
  ( always {!<=-1,!>=2}
  "varid5" always "varid5"
  false always 0
  false always 0
Line 44
  ( always {!<=-1,!>=2}
  "varid6" always "varid6"
  false always 0
  false always 0
Line 45
  ( always {!<=-1,!>=2}
  "varid7" always "varid7"
  false always 0
  false always 0
Line 46
  ( always {!<=-1,!>=2}
  "varidReturn1" always "varidReturn1"
  false always 0
  false always 0
Line 47
  ( always {!<=-1,!>=2}
  "varidReturn2" always "varidReturn2"
  false always 0
  false always 0
Line 48
  ( always {!<=-1,!>=2}
  "varid8" always "varid8"
  false always 0
  false always 0
Line 49
  ( always {!<=-1,!>=2}
  "varid9" always "varid9"
  false always 0
  false always 0
Line 50
  ( always {!<=-1,!>=2}
  "varid10" always "varid10"
  false always 0
  false always 0
Line 51
  ( always {!<=-1,!>=2}
  "varid11" always "varid11"
  false always 0
  false always 0
Line 52
  ( always {!<=-1,!>=2}
  "varid12" always "varid12"
  false always 0
  false always 0
Line 53
  ( always {!<=-1,!>=2}
  "varid13" always "varid13"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "varid14" always "varid14"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "varid15" always "varid15"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "varid16" always "varid16"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "varid17" always "varid17"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "varid18" always "varid18"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "varid19" always "varid19"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "varid20" always "varid20"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "varid24" always "varid24"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "varid25" always "varid25"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "varid26" always "varid26"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "varid27" always "varid27"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "varid28" always "varid28"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "varid29" always "varid29"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "varid30" always "varid30"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "varid34" always "varid34"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "varid35" always "varid35"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "varid36" always "varid36"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "varid37" always "varid37"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "varid38" always "varid38"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "varid39" always "varid39"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "varid40" always "varid40"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "varid41" always "varid41"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "varid42" always "varid42"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "varid43" always "varid43"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "varid44" always "varid44"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "varid45" always "varid45"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "varid46" always "varid46"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "varid47" always "varid47"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "varid48" always "varid48"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "varid49" always "varid49"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "varid50" always "varid50"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "varid51" always "varid51"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "varid52" always "varid52"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "varid53" always "varid53"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "varid54" always "varid54"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "varid55" always "varid55"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "varid56" always "varid56"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "varid57" always "varid57"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "varid58" always "varid58"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "varid59" always "varid59"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "varid60" always "varid60"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "varid61" always "varid61"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "varid62" always "varid62"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "varid63" always "varid63"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "varid64" always "varid64"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "varid65" always "varid65"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "varid_for_1" always "varid_for_1"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "varid_for_2" always "varid_for_2"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "varid_cpp_keywords_in_c_code" always "varid_cpp_keywords_in_c_code"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "varid_cpp_keywords_in_c_code2" always "varid_cpp_keywords_in_c_code2"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "varidFunctionCall1" always "varidFunctionCall1"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "varidFunctionCall2" always "varidFunctionCall2"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "varidFunctionCall3" always "varidFunctionCall3"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "varidFunctionCall4" always "varidFunctionCall4"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "varidFunctionCall5" always "varidFunctionCall5"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "varidStl" always "varidStl"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "varidStl2" always "varidStl2"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "varid_newauto" always "varid_newauto"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "varid_delete" always "varid_delete"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "varid_functions" always "varid_functions"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "varid_sizeof" always "varid_sizeof"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "varid_reference_to_containers" always "varid_reference_to_containers"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "varid_in_class1" always "varid_in_class1"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "varid_in_class2" always "varid_in_class2"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "varid_in_class3" always "varid_in_class3"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "varid_in_class4" always "varid_in_class4"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "varid_in_class5" always "varid_in_class5"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "varid_in_class6" always "varid_in_class6"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "varid_in_class7" always "varid_in_class7"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "varid_in_class8" always "varid_in_class8"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "varid_in_class9" always "varid_in_class9"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "varid_in_class10" always "varid_in_class10"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "varid_in_class11" always "varid_in_class11"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "varid_in_class12" always "varid_in_class12"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "varid_in_class13" always "varid_in_class13"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "varid_in_class14" always "varid_in_class14"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "varid_in_class15" always "varid_in_class15"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "varid_in_class16" always "varid_in_class16"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "varid_in_class17" always "varid_in_class17"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "varid_in_class18" always "varid_in_class18"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "varid_in_class19" always "varid_in_class19"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "varid_in_class20" always "varid_in_class20"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "varid_in_class21" always "varid_in_class21"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "varid_in_class22" always "varid_in_class22"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "varid_namespace_1" always "varid_namespace_1"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "varid_namespace_2" always "varid_namespace_2"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "varid_namespace_3" always "varid_namespace_3"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "varid_namespace_4" always "varid_namespace_4"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "varid_namespace_5" always "varid_namespace_5"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "varid_initList" always "varid_initList"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "varid_initListWithBaseTemplate" always "varid_initListWithBaseTemplate"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "varid_initListWithScope" always "varid_initListWithScope"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "varid_operator" always "varid_operator"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "varid_throw" always "varid_throw"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "varid_unknown_macro" always "varid_unknown_macro"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "varid_using" always "varid_using"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "varid_catch" always "varid_catch"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "varid_functionPrototypeTemplate" always "varid_functionPrototypeTemplate"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "varid_templatePtr" always "varid_templatePtr"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "varid_templateNamespaceFuncPtr" always "varid_templateNamespaceFuncPtr"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "varid_templateArray" always "varid_templateArray"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "varid_templateParameter" always "varid_templateParameter"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "varid_templateUsing" always "varid_templateUsing"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "varid_not_template_in_condition" always "varid_not_template_in_condition"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "varid_cppcast" always "varid_cppcast"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "varid_variadicFunc" always "varid_variadicFunc"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "varid_typename" always "varid_typename"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "varid_rvalueref" always "varid_rvalueref"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "varid_arrayFuncPar" always "varid_arrayFuncPar"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "varid_sizeofPassed" always "varid_sizeofPassed"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "varid_classInFunction" always "varid_classInFunction"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "varid_pointerToArray" always "varid_pointerToArray"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "varid_cpp11initialization" always "varid_cpp11initialization"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "varid_inheritedMembers" always "varid_inheritedMembers"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "varid_header" always "varid_header"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "varid_rangeBasedFor" always "varid_rangeBasedFor"
  false always 0
  false always 0
Line 170
  ( always {!<=-1,!>=2}
  "varid_structinit" always "varid_structinit"
  false always 0
  false always 0
Line 171
  ( always {!<=-1,!>=2}
  "varid_arrayinit" always "varid_arrayinit"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "varid_lambda_arg" always "varid_lambda_arg"
  false always 0
  false always 0
Line 173
  ( always {!<=-1,!>=2}
  "varid_lambda_mutable" always "varid_lambda_mutable"
  false always 0
  false always 0
Line 174
  ( always {!<=-1,!>=2}
  "varid_trailing_return1" always "varid_trailing_return1"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "varid_trailing_return2" always "varid_trailing_return2"
  false always 0
  false always 0
Line 176
  ( always {!<=-1,!>=2}
  "varid_parameter_pack" always "varid_parameter_pack"
  false always 0
  false always 0
Line 177
  ( always {!<=-1,!>=2}
  "varid_for_auto_cpp17" always "varid_for_auto_cpp17"
  false always 0
  false always 0
Line 178
  ( always {!<=-1,!>=2}
  "varid_not" always "varid_not"
  false always 0
  false always 0
Line 179
  ( always {!<=-1,!>=2}
  "varid_declInIfCondition" always "varid_declInIfCondition"
  false always 0
  false always 0
Line 181
  ( always {!<=-1,!>=2}
  "varidclass1" always "varidclass1"
  false always 0
  false always 0
Line 182
  ( always {!<=-1,!>=2}
  "varidclass2" always "varidclass2"
  false always 0
  false always 0
Line 183
  ( always {!<=-1,!>=2}
  "varidclass3" always "varidclass3"
  false always 0
  false always 0
Line 184
  ( always {!<=-1,!>=2}
  "varidclass4" always "varidclass4"
  false always 0
  false always 0
Line 185
  ( always {!<=-1,!>=2}
  "varidclass5" always "varidclass5"
  false always 0
  false always 0
Line 186
  ( always {!<=-1,!>=2}
  "varidclass6" always "varidclass6"
  false always 0
  false always 0
Line 187
  ( always {!<=-1,!>=2}
  "varidclass7" always "varidclass7"
  false always 0
  false always 0
Line 188
  ( always {!<=-1,!>=2}
  "varidclass8" always "varidclass8"
  false always 0
  false always 0
Line 189
  ( always {!<=-1,!>=2}
  "varidclass9" always "varidclass9"
  false always 0
  false always 0
Line 190
  ( always {!<=-1,!>=2}
  "varidclass10" always "varidclass10"
  false always 0
  false always 0
Line 191
  ( always {!<=-1,!>=2}
  "varidclass11" always "varidclass11"
  false always 0
  false always 0
Line 192
  ( always {!<=-1,!>=2}
  "varidclass12" always "varidclass12"
  false always 0
  false always 0
Line 193
  ( always {!<=-1,!>=2}
  "varidclass13" always "varidclass13"
  false always 0
  false always 0
Line 194
  ( always {!<=-1,!>=2}
  "varidclass14" always "varidclass14"
  false always 0
  false always 0
Line 195
  ( always {!<=-1,!>=2}
  "varidclass15" always "varidclass15"
  false always 0
  false always 0
Line 196
  ( always {!<=-1,!>=2}
  "varidclass16" always "varidclass16"
  false always 0
  false always 0
Line 197
  ( always {!<=-1,!>=2}
  "varidclass17" always "varidclass17"
  false always 0
  false always 0
Line 198
  ( always {!<=-1,!>=2}
  "varidclass18" always "varidclass18"
  false always 0
  false always 0
Line 199
  ( always {!<=-1,!>=2}
  "varidclass19" always "varidclass19"
  false always 0
  false always 0
Line 200
  ( always {!<=-1,!>=2}
  "varidclass20" always "varidclass20"
  false always 0
  false always 0
Line 201
  ( always {!<=-1,!>=2}
  "varid_classnameshaddowsvariablename" always "varid_classnameshaddowsvariablename"
  false always 0
  false always 0
Line 202
  ( always {!<=-1,!>=2}
  "varid_classnametemplate" always "varid_classnametemplate"
  false always 0
  false always 0
Line 204
  ( always {!<=-1,!>=2}
  "varidenum1" always "varidenum1"
  false always 0
  false always 0
Line 205
  ( always {!<=-1,!>=2}
  "varidenum2" always "varidenum2"
  false always 0
  false always 0
Line 206
  ( always {!<=-1,!>=2}
  "varidenum3" always "varidenum3"
  false always 0
  false always 0
Line 207
  ( always {!<=-1,!>=2}
  "varidenum4" always "varidenum4"
  false always 0
  false always 0
Line 208
  ( always {!<=-1,!>=2}
  "varidenum5" always "varidenum5"
  false always 0
  false always 0
Line 209
  ( always {!<=-1,!>=2}
  "varidenum6" always "varidenum6"
  false always 0
  false always 0
Line 210
  ( always {!<=-1,!>=2}
  "varidenum7" always "varidenum7"
  false always 0
  false always 0
Line 212
  ( always {!<=-1,!>=2}
  "varidnamespace1" always "varidnamespace1"
  false always 0
  false always 0
Line 213
  ( always {!<=-1,!>=2}
  "varidnamespace2" always "varidnamespace2"
  false always 0
  false always 0
Line 214
  ( always {!<=-1,!>=2}
  "usingNamespace1" always "usingNamespace1"
  false always 0
  false always 0
Line 215
  ( always {!<=-1,!>=2}
  "usingNamespace2" always "usingNamespace2"
  false always 0
  false always 0
Line 216
  ( always {!<=-1,!>=2}
  "usingNamespace3" always "usingNamespace3"
  false always 0
  false always 0
Line 218
  ( always {!<=-1,!>=2}
  "setVarIdStructMembers1" always "setVarIdStructMembers1"
  false always 0
  false always 0
Line 220
  ( always {!<=-1,!>=2}
  "decltype1" always "decltype1"
  false always 0
  false always 0
Line 221
  ( always {!<=-1,!>=2}
  "decltype2" always "decltype2"
  false always 0
  false always 0
Line 223
  ( always {!<=-1,!>=2}
  "exprid1" always "exprid1"
  false always 0
  false always 0
Line 225
  ( always {!<=-1,!>=2}
  "structuredBindings" always "structuredBindings"
  false always 0
  false always 0
Line 229
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 230
  "" always ""
Line 236
  = always 1
  true always 1
Line 238
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 239
  code possible {"int foo() { auto [x,y] = xy(); return x+y; }"@1,"int x; decltype(x) y;"@3,"void foo(int x, decltype(A::b) *p);"@4,"void f(Foo foo)\n{\n    foo.size = 0;\n    return ((uint8_t)(foo).size);\n}"@5,"namespace A {\n    namespace B {\n        class C {\n            double m;\n            C();\n        };\n    }\n}\nusing namespace A::B;\nC::C() : m(42) {}"@6,"class A { int x; void dostuff(); };\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n"@7,"namespace NS {\n  class A { int x; void dostuff(); };\n}\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n"@8,"namespace A {\n  namespace B {\n    char buf[20];\n  }\n}\nint main() {\n  return foo(A::B::buf);\n}"@9,"namespace A {\n    char buf[20];\n}\nint main() {\n    return foo(A::buf);\n}"@10,"template <typename T>\nstruct BBB {\n  struct inner;\n};\n\ntemplate <typename T>\nstruct BBB<T>::inner {\n  inner(int x);\n  int x;\n};\n\ntemplate <typename T>\nBBB<T>::inner::inner(int x): x(x) {}\n"@11}
Line 240
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testvarid.cpp"@1,"cppcheck-2.8/test/testvarid.cpp"@3,"cppcheck-2.8/test/testvarid.cpp"@4,"cppcheck-2.8/test/testvarid.cpp"@5,"cppcheck-2.8/test/testvarid.cpp"@6,"cppcheck-2.8/test/testvarid.cpp"@7,"cppcheck-2.8/test/testvarid.cpp"@8,"cppcheck-2.8/test/testvarid.cpp"@9,"cppcheck-2.8/test/testvarid.cpp"@10,"cppcheck-2.8/test/testvarid.cpp"@11}
  line inconclusive {3558@1,3530@3,3524@4,3518@5,3504@6,3478@7,3468@8,3454@9,3432@10,3413@11}
  filename inconclusive {"test.c"@63,"test.h"@64,"test.c"@102,"test.cpp"@122,"test.cpp"@123,"test.cpp"@124,"test.cpp"@127,"test.cpp"@128,"test.cpp"@129,"test.cpp"@130}
Line 244
  = always 0
  false always 0
Line 249
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 250
  "" always ""
Line 256
  = always 1
  true always 1
Line 258
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 259
  code possible "struct A {\n    int x, y;\n};\nint f(A a, A b) {\n    int x = a.x + b.x;\n    int y = b.x + a.x;\n    return x + y + a.y + b.y;\n}\n"@2
Line 260
  ( always {!<=-1,!>=2}
  file inconclusive "cppcheck-2.8/test/testvarid.cpp"@2
  line inconclusive 3534@2
Line 264
  = always 0
  false always 0
Line 269
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 270
  "" always ""
Line 276
  = always 1
  true always 1
Line 278
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 279
  code possible "void bar(int,int);\nvoid f() {\n    for (size_t c = 0; c < 42; ++c) {\n        int x;\n        bar(r, r * x);\n    }\n}"@189
Line 280
  ( always {!<=-1,!>=2}
  file inconclusive "cppcheck-2.8/test/testvarid.cpp"@189
  line inconclusive 1165@189
Line 282
  varid always !<=-1
  varid always !<=-1
  = always 4294967295
  ~ always 4294967295
  0U always 0
Line 284
  == always {!<=-1,!>=2}
  varname inconclusive "x"@189
Line 285
  varid always !<=-1
  == always {!<=-1,!>=2}
  ~ always 4294967295
  0U always 0
Line 286
  varid always !<=-1
  = always !<=-1
Line 287
  varid always {!<=-1,!4294967295}
  != always {!<=-1,!>=2}
Line 288
  "Variable " always "Variable "
  " has different varids:\n" always " has different varids:\n"
  true always 1
  true always 1
  true always 1
  true always 1
  false always 0
Line 292
  "same varid" always "same varid"
Line 297
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  297 always 297
  "static int i = 1;\nvoid f()\n{\n    int i = 2;\n    for (int i = 0; i < 10; ++i)\n        i = 3;\n    i = 4;\n}\n" always "static int i = 1;\nvoid f()\n{\n    int i = 2;\n    for (int i = 0; i < 10; ++i)\n        i = 3;\n    i = 4;\n}\n"
  "test.c" always "test.c"
Line 307
  145 always 145
  = always "1: static int i@1 = 1 ;\n2: void f ( )\n3: {\n4: int i@2 ; i@2 = 2 ;\n5: for ( int i@3 = 0 ; i@3 < 10 ; ++ i@3 ) {\n6: i@3 = 3 ; }\n7: i@2 = 4 ;\n8: }\n"
  "1: static int i@1 = 1 ;\n2: void f ( )\n3: {\n4: int i@2 ; i@2 = 2 ;\n5: for ( int i@3 = 0 ; i@3 < 10 ; ++ i@3 ) {\n6: i@3 = 3 ; }\n7: i@2 = 4 ;\n8: }\n" always "1: static int i@1 = 1 ;\n2: void f ( )\n3: {\n4: int i@2 ; i@2 = 2 ;\n5: for ( int i@3 = 0 ; i@3 < 10 ; ++ i@3 ) {\n6: i@3 = 3 ; }\n7: i@2 = 4 ;\n8: }\n"
Line 316
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  316 always 316
  expected always "1: static int i@1 = 1 ;\n2: void f ( )\n3: {\n4: int i@2 ; i@2 = 2 ;\n5: for ( int i@3 = 0 ; i@3 < 10 ; ++ i@3 ) {\n6: i@3 = 3 ; }\n7: i@2 = 4 ;\n8: }\n"
Line 320
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  320 always 320
  "static int i = 1;\nvoid f()\n{\n    int i = 2;\n    for (int i = 0; i < 10; ++i)\n    {\n      i = 3;\n    }\n    i = 4;\n}\n" always "static int i = 1;\nvoid f()\n{\n    int i = 2;\n    for (int i = 0; i < 10; ++i)\n    {\n      i = 3;\n    }\n    i = 4;\n}\n"
  "test.c" always "test.c"
Line 332
  152 always 152
  = always "1: static int i@1 = 1 ;\n2: void f ( )\n3: {\n4: int i@2 ; i@2 = 2 ;\n5: for ( int i@3 = 0 ; i@3 < 10 ; ++ i@3 )\n6: {\n7: i@3 = 3 ;\n8: }\n9: i@2 = 4 ;\n10: }\n"
  "1: static int i@1 = 1 ;\n2: void f ( )\n3: {\n4: int i@2 ; i@2 = 2 ;\n5: for ( int i@3 = 0 ; i@3 < 10 ; ++ i@3 )\n6: {\n7: i@3 = 3 ;\n8: }\n9: i@2 = 4 ;\n10: }\n" always "1: static int i@1 = 1 ;\n2: void f ( )\n3: {\n4: int i@2 ; i@2 = 2 ;\n5: for ( int i@3 = 0 ; i@3 < 10 ; ++ i@3 )\n6: {\n7: i@3 = 3 ;\n8: }\n9: i@2 = 4 ;\n10: }\n"
Line 343
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  343 always 343
  expected always "1: static int i@1 = 1 ;\n2: void f ( )\n3: {\n4: int i@2 ; i@2 = 2 ;\n5: for ( int i@3 = 0 ; i@3 < 10 ; ++ i@3 )\n6: {\n7: i@3 = 3 ;\n8: }\n9: i@2 = 4 ;\n10: }\n"
Line 348
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  348 always 348
  "void f()\n{\n    struct ABC abc;\n    abc.a = 3;\n    i = abc.a;\n}\n" always "void f()\n{\n    struct ABC abc;\n    abc.a = 3;\n    i = abc.a;\n}\n"
  "test.c" always "test.c"
Line 356
  89 always 89
  = always "1: void f ( )\n2: {\n3: struct ABC abc@1 ;\n4: abc@1 . a@2 = 3 ;\n5: i = abc@1 . a@2 ;\n6: }\n"
  "1: void f ( )\n2: {\n3: struct ABC abc@1 ;\n4: abc@1 . a@2 = 3 ;\n5: i = abc@1 . a@2 ;\n6: }\n" always "1: void f ( )\n2: {\n3: struct ABC abc@1 ;\n4: abc@1 . a@2 = 3 ;\n5: i = abc@1 . a@2 ;\n6: }\n"
Line 363
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  363 always 363
  expected always "1: void f ( )\n2: {\n3: struct ABC abc@1 ;\n4: abc@1 . a@2 = 3 ;\n5: i = abc@1 . a@2 ;\n6: }\n"
Line 367
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  367 always 367
  "static char str[4];\nvoid f()\n{\n    char str[10];\n    str[0] = 0;\n}\n" always "static char str[4];\nvoid f()\n{\n    char str[10];\n    str[0] = 0;\n}\n"
  "test.c" always "test.c"
Line 375
  98 always 98
  = always "1: static char str@1 [ 4 ] ;\n2: void f ( )\n3: {\n4: char str@2 [ 10 ] ;\n5: str@2 [ 0 ] = 0 ;\n6: }\n"
  "1: static char str@1 [ 4 ] ;\n2: void f ( )\n3: {\n4: char str@2 [ 10 ] ;\n5: str@2 [ 0 ] = 0 ;\n6: }\n" always "1: static char str@1 [ 4 ] ;\n2: void f ( )\n3: {\n4: char str@2 [ 10 ] ;\n5: str@2 [ 0 ] = 0 ;\n6: }\n"
Line 382
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  382 always 382
  expected always "1: static char str@1 [ 4 ] ;\n2: void f ( )\n3: {\n4: char str@2 [ 10 ] ;\n5: str@2 [ 0 ] = 0 ;\n6: }\n"
Line 386
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  386 always 386
  "void f(const unsigned int a[])\n{\n    int i = *(a+10);\n}\n" always "void f(const unsigned int a[])\n{\n    int i = *(a+10);\n}\n"
  "test.c" always "test.c"
Line 392
  88 always 88
  = always "1: void f ( const unsigned int a@1 [ ] )\n2: {\n3: int i@2 ; i@2 = * ( a@1 + 10 ) ;\n4: }\n"
  "1: void f ( const unsigned int a@1 [ ] )\n2: {\n3: int i@2 ; i@2 = * ( a@1 + 10 ) ;\n4: }\n" always "1: void f ( const unsigned int a@1 [ ] )\n2: {\n3: int i@2 ; i@2 = * ( a@1 + 10 ) ;\n4: }\n"
Line 397
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  397 always 397
  expected always "1: void f ( const unsigned int a@1 [ ] )\n2: {\n3: int i@2 ; i@2 = * ( a@1 + 10 ) ;\n4: }\n"
Line 401
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  401 always 401
  "void f()\n{\n    int a,b;\n}\n" always "void f()\n{\n    int a,b;\n}\n"
  "test.c" always "test.c"
Line 407
  48 always 48
  = always "1: void f ( )\n2: {\n3: int a@1 ; int b@2 ;\n4: }\n"
  "1: void f ( )\n2: {\n3: int a@1 ; int b@2 ;\n4: }\n" always "1: void f ( )\n2: {\n3: int a@1 ; int b@2 ;\n4: }\n"
Line 412
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  412 always 412
  expected always "1: void f ( )\n2: {\n3: int a@1 ; int b@2 ;\n4: }\n"
Line 417
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  417 always 417
  "int f(int a, int b)\n{\n    return a+b;\n}\n" always "int f(int a, int b)\n{\n    return a+b;\n}\n"
  "test.c" always "test.c"
Line 423
  64 always 64
  = always "1: int f ( int a@1 , int b@2 )\n2: {\n3: return a@1 + b@2 ;\n4: }\n"
  "1: int f ( int a@1 , int b@2 )\n2: {\n3: return a@1 + b@2 ;\n4: }\n" always "1: int f ( int a@1 , int b@2 )\n2: {\n3: return a@1 + b@2 ;\n4: }\n"
Line 428
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  428 always 428
  expected always "1: int f ( int a@1 , int b@2 )\n2: {\n3: return a@1 + b@2 ;\n4: }\n"
Line 433
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  433 always 433
  "void func() {\n    char a[256] = \"test\";\n    {\n        char b[256] = \"test\";\n    }\n}\n" always "void func() {\n    char a[256] = \"test\";\n    {\n        char b[256] = \"test\";\n    }\n}\n"
  "test.c" always "test.c"
Line 441
  97 always 97
  = always "1: void func ( ) {\n2: char a@1 [ 256 ] = \"test\" ;\n3: {\n4: char b@2 [ 256 ] = \"test\" ;\n5: }\n6: }\n"
  "1: void func ( ) {\n2: char a@1 [ 256 ] = \"test\" ;\n3: {\n4: char b@2 [ 256 ] = \"test\" ;\n5: }\n6: }\n" always "1: void func ( ) {\n2: char a@1 [ 256 ] = \"test\" ;\n3: {\n4: char b@2 [ 256 ] = \"test\" ;\n5: }\n6: }\n"
Line 448
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  448 always 448
  expected always "1: void func ( ) {\n2: char a@1 [ 256 ] = \"test\" ;\n3: {\n4: char b@2 [ 256 ] = \"test\" ;\n5: }\n6: }\n"
Line 452
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  452 always 452
  "int f()\n{\n    int a;\n    return a;\n}\n" always "int f()\n{\n    int a;\n    return a;\n}\n"
  "test.c" always "test.c"
Line 459
  53 always 53
  = always "1: int f ( )\n2: {\n3: int a@1 ;\n4: return a@1 ;\n5: }\n"
  "1: int f ( )\n2: {\n3: int a@1 ;\n4: return a@1 ;\n5: }\n" always "1: int f ( )\n2: {\n3: int a@1 ;\n4: return a@1 ;\n5: }\n"
Line 465
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  465 always 465
  expected always "1: int f ( )\n2: {\n3: int a@1 ;\n4: return a@1 ;\n5: }\n"
Line 469
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  469 always 469
  "void foo()\n{\n    unsigned long mask = (1UL << size_) - 1;\n    return (abits_val_ & mask);\n}\n" always "void foo()\n{\n    unsigned long mask = (1UL << size_) - 1;\n    return (abits_val_ & mask);\n}\n"
  "test.c" always "test.c"
Line 476
  121 always 121
  = always "1: void foo ( )\n2: {\n3: unsigned long mask@1 ; mask@1 = ( 1UL << size_ ) - 1 ;\n4: return ( abits_val_ & mask@1 ) ;\n5: }\n"
  "1: void foo ( )\n2: {\n3: unsigned long mask@1 ; mask@1 = ( 1UL << size_ ) - 1 ;\n4: return ( abits_val_ & mask@1 ) ;\n5: }\n" always "1: void foo ( )\n2: {\n3: unsigned long mask@1 ; mask@1 = ( 1UL << size_ ) - 1 ;\n4: return ( abits_val_ & mask@1 ) ;\n5: }\n"
Line 482
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  482 always 482
  expected always "1: void foo ( )\n2: {\n3: unsigned long mask@1 ; mask@1 = ( 1UL << size_ ) - 1 ;\n4: return ( abits_val_ & mask@1 ) ;\n5: }\n"
Line 486
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  486 always 486
  "void func()\n{\n    std::string str(\"test\");\n    str.clear();\n}" always "void func()\n{\n    std::string str(\"test\");\n    str.clear();\n}"
Line 493
  87 always 87
  = always "1: void func ( )\n2: {\n3: std :: string str@1 ( \"test\" ) ;\n4: str@1 . clear ( ) ;\n5: }\n"
  "1: void func ( )\n2: {\n3: std :: string str@1 ( \"test\" ) ;\n4: str@1 . clear ( ) ;\n5: }\n" always "1: void func ( )\n2: {\n3: std :: string str@1 ( \"test\" ) ;\n4: str@1 . clear ( ) ;\n5: }\n"
Line 499
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  499 always 499
  expected always "1: void func ( )\n2: {\n3: std :: string str@1 ( \"test\" ) ;\n4: str@1 . clear ( ) ;\n5: }\n"
Line 503
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  503 always 503
  "typedef int INT32;\n" always "typedef int INT32;\n"
  "test.c" always "test.c"
Line 506
  6 always 6
  = always "1: ;\n"
  "1: ;\n" always "1: ;\n"
Line 508
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  508 always 508
  expected always "1: ;\n"
Line 512
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  512 always 512
  "void foo()\n{\n    int abc;\n    struct abc abc1;\n}" always "void foo()\n{\n    int abc;\n    struct abc abc1;\n}"
  "test.c" always "test.c"
Line 519
  65 always 65
  = always "1: void foo ( )\n2: {\n3: int abc@1 ;\n4: struct abc abc1@2 ;\n5: }\n"
  "1: void foo ( )\n2: {\n3: int abc@1 ;\n4: struct abc abc1@2 ;\n5: }\n" always "1: void foo ( )\n2: {\n3: int abc@1 ;\n4: struct abc abc1@2 ;\n5: }\n"
Line 525
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  525 always 525
  expected always "1: void foo ( )\n2: {\n3: int abc@1 ;\n4: struct abc abc1@2 ;\n5: }\n"
Line 529
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  529 always 529
  "class Foo;" always "class Foo;"
Line 531
  16 always 16
  = always "1: class Foo ;\n"
  "1: class Foo ;\n" always "1: class Foo ;\n"
Line 533
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  533 always 533
  expected always "1: class Foo ;\n"
Line 537
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  537 always 537
  "static void a()\n{\n    class Foo *foo;\n}" always "static void a()\n{\n    class Foo *foo;\n}"
Line 543
  55 always 55
  = always "1: static void a ( )\n2: {\n3: class Foo * foo@1 ;\n4: }\n"
  "1: static void a ( )\n2: {\n3: class Foo * foo@1 ;\n4: }\n" always "1: static void a ( )\n2: {\n3: class Foo * foo@1 ;\n4: }\n"
Line 548
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  548 always 548
  expected always "1: static void a ( )\n2: {\n3: class Foo * foo@1 ;\n4: }\n"
Line 552
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  552 always 552
  "void f()\n{\n    int a; int b;\n    a = a;\n}\n" always "void f()\n{\n    int a; int b;\n    a = a;\n}\n"
  "test.c" always "test.c"
Line 559
  63 always 63
  = always "1: void f ( )\n2: {\n3: int a@1 ; int b@2 ;\n4: a@1 = a@1 ;\n5: }\n"
  "1: void f ( )\n2: {\n3: int a@1 ; int b@2 ;\n4: a@1 = a@1 ;\n5: }\n" always "1: void f ( )\n2: {\n3: int a@1 ; int b@2 ;\n4: a@1 = a@1 ;\n5: }\n"
Line 565
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  565 always 565
  expected always "1: void f ( )\n2: {\n3: int a@1 ; int b@2 ;\n4: a@1 = a@1 ;\n5: }\n"
Line 570
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  570 always 570
  "void foo()\n{\nA a;\nB b;\nb * a;\n}" always "void foo()\n{\nA a;\nB b;\nb * a;\n}"
  "test.c" always "test.c"
Line 578
  64 always 64
  = always "1: void foo ( )\n2: {\n3: A a@1 ;\n4: B b@2 ;\n5: b@2 * a@1 ;\n6: }\n"
  "1: void foo ( )\n2: {\n3: A a@1 ;\n4: B b@2 ;\n5: b@2 * a@1 ;\n6: }\n" always "1: void foo ( )\n2: {\n3: A a@1 ;\n4: B b@2 ;\n5: b@2 * a@1 ;\n6: }\n"
Line 585
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  585 always 585
  expected always "1: void foo ( )\n2: {\n3: A a@1 ;\n4: B b@2 ;\n5: b@2 * a@1 ;\n6: }\n"
Line 590
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  590 always 590
  "struct S {\n    struct T {\n    } t;\n} s;" always "struct S {\n    struct T {\n    } t;\n} s;"
  "test.c" always "test.c"
Line 596
  73 always 73
  = always "1: struct S {\n2: struct T {\n3: } ; struct T t@1 ;\n4: } ; struct S s@2 ;\n"
  "1: struct S {\n2: struct T {\n3: } ; struct T t@1 ;\n4: } ; struct S s@2 ;\n" always "1: struct S {\n2: struct T {\n3: } ; struct T t@1 ;\n4: } ; struct S s@2 ;\n"
Line 601
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  601 always 601
  expected always "1: struct S {\n2: struct T {\n3: } ; struct T t@1 ;\n4: } ; struct S s@2 ;\n"
Line 605
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  605 always 605
  "struct S {\n    struct T {\n    } t;\n};" always "struct S {\n    struct T {\n    } t;\n};"
  "test.c" always "test.c"
Line 611
  58 always 58
  = always "1: struct S {\n2: struct T {\n3: } ; struct T t@1 ;\n4: } ;\n"
  "1: struct S {\n2: struct T {\n3: } ; struct T t@1 ;\n4: } ;\n" always "1: struct S {\n2: struct T {\n3: } ; struct T t@1 ;\n4: } ;\n"
Line 616
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  616 always 616
  expected always "1: struct S {\n2: struct T {\n3: } ; struct T t@1 ;\n4: } ;\n"
Line 621
  48 always 48
  = always "void foo()\n{\n    int x = 1;\n    y = (z * x);\n}\n"
  "void foo()\n{\n    int x = 1;\n    y = (z * x);\n}\n" always "void foo()\n{\n    int x = 1;\n    y = (z * x);\n}\n"
Line 627
  67 always 67
  = always "1: void foo ( )\n2: {\n3: int x@1 ; x@1 = 1 ;\n4: y = z * x@1 ;\n5: }\n"
  "1: void foo ( )\n2: {\n3: int x@1 ; x@1 = 1 ;\n4: y = z * x@1 ;\n5: }\n" always "1: void foo ( )\n2: {\n3: int x@1 ; x@1 = 1 ;\n4: y = z * x@1 ;\n5: }\n"
Line 633
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  633 always 633
  expected always "1: void foo ( )\n2: {\n3: int x@1 ; x@1 = 1 ;\n4: y = z * x@1 ;\n5: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  633 always 633
  code always "void foo()\n{\n    int x = 1;\n    y = (z * x);\n}\n"
  "test.c" always "test.c"
Line 637
  47 always 47
  = always "char foo()\n{\n    char c('c');\n    return c;\n}\n"
  "char foo()\n{\n    char c('c');\n    return c;\n}\n" always "char foo()\n{\n    char c('c');\n    return c;\n}\n"
Line 643
  65 always 65
  = always "1: char foo ( )\n2: {\n3: char c@1 ( 'c' ) ;\n4: return c@1 ;\n5: }\n"
  "1: char foo ( )\n2: {\n3: char c@1 ( 'c' ) ;\n4: return c@1 ;\n5: }\n" always "1: char foo ( )\n2: {\n3: char c@1 ( 'c' ) ;\n4: return c@1 ;\n5: }\n"
Line 649
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  649 always 649
  expected always "1: char foo ( )\n2: {\n3: char c@1 ( 'c' ) ;\n4: return c@1 ;\n5: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  649 always 649
  code always "char foo()\n{\n    char c('c');\n    return c;\n}\n"
  "test.c" always "test.c"
Line 653
  38 always 38
  = always "char foo(char c)\n{\n    bar::c = c;\n}\n"
  "char foo(char c)\n{\n    bar::c = c;\n}\n" always "char foo(char c)\n{\n    bar::c = c;\n}\n"
Line 658
  56 always 56
  = always "1: char foo ( char c@1 )\n2: {\n3: bar :: c = c@1 ;\n4: }\n"
  "1: char foo ( char c@1 )\n2: {\n3: bar :: c = c@1 ;\n4: }\n" always "1: char foo ( char c@1 )\n2: {\n3: bar :: c = c@1 ;\n4: }\n"
Line 663
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  663 always 663
  expected always "1: char foo ( char c@1 )\n2: {\n3: bar :: c = c@1 ;\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  663 always 663
  code always "char foo(char c)\n{\n    bar::c = c;\n}\n"
Line 667
  59 always 59
  = always "void foo()\n{\n    std::pair<std::vector<double>, int> x;\n}\n"
  "void foo()\n{\n    std::pair<std::vector<double>, int> x;\n}\n" always "void foo()\n{\n    std::pair<std::vector<double>, int> x;\n}\n"
Line 672
  83 always 83
  = always "1: void foo ( )\n2: {\n3: std :: pair < std :: vector < double > , int > x@1 ;\n4: }\n"
  "1: void foo ( )\n2: {\n3: std :: pair < std :: vector < double > , int > x@1 ;\n4: }\n" always "1: void foo ( )\n2: {\n3: std :: pair < std :: vector < double > , int > x@1 ;\n4: }\n"
Line 677
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  677 always 677
  expected always "1: void foo ( )\n2: {\n3: std :: pair < std :: vector < double > , int > x@1 ;\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  677 always 677
  code always "void foo()\n{\n    std::pair<std::vector<double>, int> x;\n}\n"
Line 681
  58 always 58
  = always "void foo()\n{\n    pair<vector<int>, vector<double> > x;\n}\n"
  "void foo()\n{\n    pair<vector<int>, vector<double> > x;\n}\n" always "void foo()\n{\n    pair<vector<int>, vector<double> > x;\n}\n"
Line 686
  80 always 80
  = always "1: void foo ( )\n2: {\n3: pair < vector < int > , vector < double > > x@1 ;\n4: }\n"
  "1: void foo ( )\n2: {\n3: pair < vector < int > , vector < double > > x@1 ;\n4: }\n" always "1: void foo ( )\n2: {\n3: pair < vector < int > , vector < double > > x@1 ;\n4: }\n"
Line 691
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  691 always 691
  expected always "1: void foo ( )\n2: {\n3: pair < vector < int > , vector < double > > x@1 ;\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  691 always 691
  code always "void foo()\n{\n    pair<vector<int>, vector<double> > x;\n}\n"
Line 695
  59 always 59
  = always "class foo()\n{\npublic:\n    ;\nprivate:\n    static int i;\n};\n"
  "class foo()\n{\npublic:\n    ;\nprivate:\n    static int i;\n};\n" always "class foo()\n{\npublic:\n    ;\nprivate:\n    static int i;\n};\n"
Line 703
  78 always 78
  = always "1: class foo ( )\n2: {\n3: public:\n4: ;\n5: private:\n6: static int i@1 ;\n7: } ;\n"
  "1: class foo ( )\n2: {\n3: public:\n4: ;\n5: private:\n6: static int i@1 ;\n7: } ;\n" always "1: class foo ( )\n2: {\n3: public:\n4: ;\n5: private:\n6: static int i@1 ;\n7: } ;\n"
Line 711
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  711 always 711
  expected always "1: class foo ( )\n2: {\n3: public:\n4: ;\n5: private:\n6: static int i@1 ;\n7: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  711 always 711
  code always "class foo()\n{\npublic:\n    ;\nprivate:\n    static int i;\n};\n"
Line 715
  60 always 60
  = always "class foo()\n{\npublic:\n    ;\nprivate:\n    mutable int i;\n};\n"
  "class foo()\n{\npublic:\n    ;\nprivate:\n    mutable int i;\n};\n" always "class foo()\n{\npublic:\n    ;\nprivate:\n    mutable int i;\n};\n"
Line 723
  79 always 79
  = always "1: class foo ( )\n2: {\n3: public:\n4: ;\n5: private:\n6: mutable int i@1 ;\n7: } ;\n"
  "1: class foo ( )\n2: {\n3: public:\n4: ;\n5: private:\n6: mutable int i@1 ;\n7: } ;\n" always "1: class foo ( )\n2: {\n3: public:\n4: ;\n5: private:\n6: mutable int i@1 ;\n7: } ;\n"
Line 731
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  731 always 731
  expected always "1: class foo ( )\n2: {\n3: public:\n4: ;\n5: private:\n6: mutable int i@1 ;\n7: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  731 always 731
  code always "class foo()\n{\npublic:\n    ;\nprivate:\n    mutable int i;\n};\n"
Line 735
  28 always 28
  = always "list<int (*)()> functions;\n"
  "list<int (*)()> functions;\n" always "list<int (*)()> functions;\n"
Line 736
  41 always 41
  = always "1: list < int ( * ) ( ) > functions@1 ;\n"
  "1: list < int ( * ) ( ) > functions@1 ;\n" always "1: list < int ( * ) ( ) > functions@1 ;\n"
Line 737
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  737 always 737
  expected always "1: list < int ( * ) ( ) > functions@1 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  737 always 737
  code always "list<int (*)()> functions;\n"
Line 741
  42 always 42
  = always "int fooled_ya;\nfooled_ya::iterator iter;\n"
  "int fooled_ya;\nfooled_ya::iterator iter;\n" always "int fooled_ya;\nfooled_ya::iterator iter;\n"
Line 743
  56 always 56
  = always "1: int fooled_ya@1 ;\n2: fooled_ya :: iterator iter@2 ;\n"
  "1: int fooled_ya@1 ;\n2: fooled_ya :: iterator iter@2 ;\n" always "1: int fooled_ya@1 ;\n2: fooled_ya :: iterator iter@2 ;\n"
Line 745
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  745 always 745
  expected always "1: int fooled_ya@1 ;\n2: fooled_ya :: iterator iter@2 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  745 always 745
  code always "int fooled_ya;\nfooled_ya::iterator iter;\n"
Line 749
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  749 always 749
  "template <typedef A>\n" always "template <typedef A>\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  749 always 749
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  749 always 749
  false always 0
Line 753
  31 always 31
  = always "class A {\n    B<C<1>,1> b;\n};\n"
  "class A {\n    B<C<1>,1> b;\n};\n" always "class A {\n    B<C<1>,1> b;\n};\n"
Line 756
  48 always 48
  = always "1: class A {\n2: B < C < 1 > , 1 > b@1 ;\n3: } ;\n"
  "1: class A {\n2: B < C < 1 > , 1 > b@1 ;\n3: } ;\n" always "1: class A {\n2: B < C < 1 > , 1 > b@1 ;\n3: } ;\n"
Line 759
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  759 always 759
  expected always "1: class A {\n2: B < C < 1 > , 1 > b@1 ;\n3: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  759 always 759
  code always "class A {\n    B<C<1>,1> b;\n};\n"
Line 763
  115 always 115
  = always "void f(EventPtr *eventP, ActionPtr **actionsP)\n{\n    EventPtr event = *eventP;\n    *actionsP = &event->actions;\n}\n"
  "void f(EventPtr *eventP, ActionPtr **actionsP)\n{\n    EventPtr event = *eventP;\n    *actionsP = &event->actions;\n}\n" always "void f(EventPtr *eventP, ActionPtr **actionsP)\n{\n    EventPtr event = *eventP;\n    *actionsP = &event->actions;\n}\n"
Line 768
  159 always 159
  = always "1: void f ( EventPtr * eventP@1 , ActionPtr * * actionsP@2 )\n2: {\n3: EventPtr event@3 ; event@3 = * eventP@1 ;\n4: * actionsP@2 = & event@3 . actions@4 ;\n5: }\n"
  "1: void f ( EventPtr * eventP@1 , ActionPtr * * actionsP@2 )\n2: {\n3: EventPtr event@3 ; event@3 = * eventP@1 ;\n4: * actionsP@2 = & event@3 . actions@4 ;\n5: }\n" always "1: void f ( EventPtr * eventP@1 , ActionPtr * * actionsP@2 )\n2: {\n3: EventPtr event@3 ; event@3 = * eventP@1 ;\n4: * actionsP@2 = & event@3 . actions@4 ;\n5: }\n"
Line 773
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  773 always 773
  expected1 always "1: void f ( EventPtr * eventP@1 , ActionPtr * * actionsP@2 )\n2: {\n3: EventPtr event@3 ; event@3 = * eventP@1 ;\n4: * actionsP@2 = & event@3 . actions@4 ;\n5: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  773 always 773
  code1 always "void f(EventPtr *eventP, ActionPtr **actionsP)\n{\n    EventPtr event = *eventP;\n    *actionsP = &event->actions;\n}\n"
  "test.c" always "test.c"
Line 775
  43 always 43
  = always "void f(int b, int c) {\n    x(a*b*c,10);\n}\n"
  "void f(int b, int c) {\n    x(a*b*c,10);\n}\n" always "void f(int b, int c) {\n    x(a*b*c,10);\n}\n"
Line 778
  70 always 70
  = always "1: void f ( int b@1 , int c@2 ) {\n2: x ( a * b@1 * c@2 , 10 ) ;\n3: }\n"
  "1: void f ( int b@1 , int c@2 ) {\n2: x ( a * b@1 * c@2 , 10 ) ;\n3: }\n" always "1: void f ( int b@1 , int c@2 ) {\n2: x ( a * b@1 * c@2 , 10 ) ;\n3: }\n"
Line 781
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  781 always 781
  expected2 always "1: void f ( int b@1 , int c@2 ) {\n2: x ( a * b@1 * c@2 , 10 ) ;\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  781 always 781
  code2 always "void f(int b, int c) {\n    x(a*b*c,10);\n}\n"
  "test.c" always "test.c"
Line 783
  164 always 164
  = always "class Nullpointer : public ExecutionPath\n {\n    Nullpointer(Check *c, const unsigned int id, const std::string &name)\n        : ExecutionPath(c, id)\n    {\n    }\n}\n"
  "class Nullpointer : public ExecutionPath\n {\n    Nullpointer(Check *c, const unsigned int id, const std::string &name)\n        : ExecutionPath(c, id)\n    {\n    }\n}\n" always "class Nullpointer : public ExecutionPath\n {\n    Nullpointer(Check *c, const unsigned int id, const std::string &name)\n        : ExecutionPath(c, id)\n    {\n    }\n}\n"
Line 790
  187 always 187
  = always "1: class Nullpointer : public ExecutionPath\n2: {\n3: Nullpointer ( Check * c@1 , const unsigned int id@2 , const std :: string & name@3 )\n4: : ExecutionPath ( c@1 , id@2 )\n5: {\n6: }\n7: }\n"
  "1: class Nullpointer : public ExecutionPath\n2: {\n3: Nullpointer ( Check * c@1 , const unsigned int id@2 , const std :: string & name@3 )\n4: : ExecutionPath ( c@1 , id@2 )\n5: {\n6: }\n7: }\n" always "1: class Nullpointer : public ExecutionPath\n2: {\n3: Nullpointer ( Check * c@1 , const unsigned int id@2 , const std :: string & name@3 )\n4: : ExecutionPath ( c@1 , id@2 )\n5: {\n6: }\n7: }\n"
Line 797
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  797 always 797
  expected3 always "1: class Nullpointer : public ExecutionPath\n2: {\n3: Nullpointer ( Check * c@1 , const unsigned int id@2 , const std :: string & name@3 )\n4: : ExecutionPath ( c@1 , id@2 )\n5: {\n6: }\n7: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  797 always 797
  code3 always "class Nullpointer : public ExecutionPath\n {\n    Nullpointer(Check *c, const unsigned int id, const std::string &name)\n        : ExecutionPath(c, id)\n    {\n    }\n}\n"
Line 801
  90 always 90
  = always "class Fred : public B1, public B2\n{\npublic:\n    Fred() { a = 0; }\nprivate:\n    int a;\n};\n"
  "class Fred : public B1, public B2\n{\npublic:\n    Fred() { a = 0; }\nprivate:\n    int a;\n};\n" always "class Fred : public B1, public B2\n{\npublic:\n    Fred() { a = 0; }\nprivate:\n    int a;\n};\n"
Line 808
  113 always 113
  = always "1: class Fred : public B1 , public B2\n2: {\n3: public:\n4: Fred ( ) { a@1 = 0 ; }\n5: private:\n6: int a@1 ;\n7: } ;\n"
  "1: class Fred : public B1 , public B2\n2: {\n3: public:\n4: Fred ( ) { a@1 = 0 ; }\n5: private:\n6: int a@1 ;\n7: } ;\n" always "1: class Fred : public B1 , public B2\n2: {\n3: public:\n4: Fred ( ) { a@1 = 0 ; }\n5: private:\n6: int a@1 ;\n7: } ;\n"
Line 815
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  815 always 815
  expected always "1: class Fred : public B1 , public B2\n2: {\n3: public:\n4: Fred ( ) { a@1 = 0 ; }\n5: private:\n6: int a@1 ;\n7: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  815 always 815
  code always "class Fred : public B1, public B2\n{\npublic:\n    Fred() { a = 0; }\nprivate:\n    int a;\n};\n"
Line 816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  816 always 816
  "" always ""
Line 821
  43 always 43
  = always "int foo() {\n    int f(x);\n    return f;\n}\n"
  "int foo() {\n    int f(x);\n    return f;\n}\n" always "int foo() {\n    int f(x);\n    return f;\n}\n"
Line 825
  58 always 58
  = always "1: int foo ( ) {\n2: int f@1 ( x ) ;\n3: return f@1 ;\n4: }\n"
  "1: int foo ( ) {\n2: int f@1 ( x ) ;\n3: return f@1 ;\n4: }\n" always "1: int foo ( ) {\n2: int f@1 ( x ) ;\n3: return f@1 ;\n4: }\n"
Line 829
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  829 always 829
  expected always "1: int foo ( ) {\n2: int f@1 ( x ) ;\n3: return f@1 ;\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  829 always 829
  code always "int foo() {\n    int f(x);\n    return f;\n}\n"
Line 832
  44 always 44
  = always "void f() {\n  int  *p;\n  void bar(int *p);\n}"
  "void f() {\n  int  *p;\n  void bar(int *p);\n}" always "void f() {\n  int  *p;\n  void bar(int *p);\n}"
Line 836
  63 always 63
  = always "1: void f ( ) {\n2: int * p@1 ;\n3: void bar ( int * p ) ;\n4: }\n"
  "1: void f ( ) {\n2: int * p@1 ;\n3: void bar ( int * p ) ;\n4: }\n" always "1: void f ( ) {\n2: int * p@1 ;\n3: void bar ( int * p ) ;\n4: }\n"
Line 840
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  840 always 840
  expected2 always "1: void f ( ) {\n2: int * p@1 ;\n3: void bar ( int * p ) ;\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  840 always 840
  code2 always "void f() {\n  int  *p;\n  void bar(int *p);\n}"
Line 843
  57 always 57
  = always "Float f(float scale) {\n    return Float(val * scale);\n}\n"
  "Float f(float scale) {\n    return Float(val * scale);\n}\n" always "Float f(float scale) {\n    return Float(val * scale);\n}\n"
Line 846
  73 always 73
  = always "1: Float f ( float scale@1 ) {\n2: return Float ( val * scale@1 ) ;\n3: }\n"
  "1: Float f ( float scale@1 ) {\n2: return Float ( val * scale@1 ) ;\n3: }\n" always "1: Float f ( float scale@1 ) {\n2: return Float ( val * scale@1 ) ;\n3: }\n"
Line 849
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  849 always 849
  expected3 always "1: Float f ( float scale@1 ) {\n2: return Float ( val * scale@1 ) ;\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  849 always 849
  code3 always "Float f(float scale) {\n    return Float(val * scale);\n}\n"
Line 853
  18 always 18
  = always "#elif A\nA,a<b<x0\n"
  "#elif A\nA,a<b<x0\n" always "#elif A\nA,a<b<x0\n"
Line 855
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  855 always 855
  code always "#elif A\nA,a<b<x0\n"
Line 856
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  856 always 856
  "" always ""
Line 861
  31 always 31
  = always "void blah() {    Bar bar(*x);}"
  "void blah() {    Bar bar(*x);}" always "void blah() {    Bar bar(*x);}"
Line 864
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  864 always 864
  "1: void blah ( ) { Bar bar@1 ( * x ) ; }\n" always "1: void blah ( ) { Bar bar@1 ( * x ) ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  864 always 864
  code always "void blah() {    Bar bar(*x);}"
Line 868
  31 always 31
  = always "void blah() {    Bar bar(&x);}"
  "void blah() {    Bar bar(&x);}" always "void blah() {    Bar bar(&x);}"
Line 871
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  871 always 871
  "1: void blah ( ) { Bar bar@1 ( & x ) ; }\n" always "1: void blah ( ) { Bar bar@1 ( & x ) ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  871 always 871
  code always "void blah() {    Bar bar(&x);}"
Line 877
  14 always 14
  = always "FOO class C;\n"
  "FOO class C;\n" always "FOO class C;\n"
Line 878
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  878 always 878
  "1: FOO class C ;\n" always "1: FOO class C ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  878 always 878
  code always "FOO class C;\n"
Line 885
  25 always 25
  = always "void f(FOO::BAR const);\n"
  "void f(FOO::BAR const);\n" always "void f(FOO::BAR const);\n"
Line 886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  886 always 886
  "1: void f ( const FOO :: BAR ) ;\n" always "1: void f ( const FOO :: BAR ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  886 always 886
  code always "void f(FOO::BAR const);\n"
Line 890
  27 always 27
  = always "static int const SZ = 22;\n"
  "static int const SZ = 22;\n" always "static int const SZ = 22;\n"
Line 891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  891 always 891
  "1: static const int SZ@1 = 22 ;\n" always "1: static const int SZ@1 = 22 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  891 always 891
  code always "static int const SZ = 22;\n"
  "test.c" always "test.c"
Line 897
  25 always 25
  = always "extern \"C\" int (*a())();"
  "extern \"C\" int (*a())();" always "extern \"C\" int (*a())();"
Line 898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  898 always 898
  "1: int * a ( ) ;\n" always "1: int * a ( ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  898 always 898
  code always "extern \"C\" int (*a())();"
Line 903
  38 always 38
  = always "union evt; void f(const evt & event);"
  "union evt; void f(const evt & event);" always "union evt; void f(const evt & event);"
Line 904
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  904 always 904
  "1: union evt ; void f ( const evt & event@1 ) ;\n" always "1: union evt ; void f ( const evt & event@1 ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  904 always 904
  code1 always "union evt; void f(const evt & event);"
  "test.c" always "test.c"
Line 907
  39 always 39
  = always "struct evt; void f(const evt & event);"
  "struct evt; void f(const evt & event);" always "struct evt; void f(const evt & event);"
Line 908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  908 always 908
  "1: struct evt ; void f ( const evt & event@1 ) ;\n" always "1: struct evt ; void f ( const evt & event@1 ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  908 always 908
  code2 always "struct evt; void f(const evt & event);"
  "test.c" always "test.c"
Line 913
  102 always 102
  = always "namespace fruit { struct banana {}; };\nclass Fred {\npublic:\n     struct fruit::banana Bananas[25];\n};"
  "namespace fruit { struct banana {}; };\nclass Fred {\npublic:\n     struct fruit::banana Bananas[25];\n};" always "namespace fruit { struct banana {}; };\nclass Fred {\npublic:\n     struct fruit::banana Bananas[25];\n};"
Line 918
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  918 always 918
  "1: namespace fruit { struct banana { } ; } ;\n2: class Fred {\n3: public:\n4: struct fruit :: banana Bananas@1 [ 25 ] ;\n5: } ;\n" always "1: namespace fruit { struct banana { } ; } ;\n2: class Fred {\n3: public:\n4: struct fruit :: banana Bananas@1 [ 25 ] ;\n5: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  918 always 918
  code always "namespace fruit { struct banana {}; };\nclass Fred {\npublic:\n     struct fruit::banana Bananas[25];\n};"
Line 927
  50 always 50
  = always "int main(int flag) { if(a & flag) { return 1; } }"
  "int main(int flag) { if(a & flag) { return 1; } }" always "int main(int flag) { if(a & flag) { return 1; } }"
Line 928
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  928 always 928
  "1: int main ( int flag@1 ) { if ( a & flag@1 ) { return 1 ; } }\n" always "1: int main ( int flag@1 ) { if ( a & flag@1 ) { return 1 ; } }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  928 always 928
  code always "int main(int flag) { if(a & flag) { return 1; } }"
  "test.c" always "test.c"
Line 933
  39 always 39
  = always "class A:public B,public C,public D {};"
  "class A:public B,public C,public D {};" always "class A:public B,public C,public D {};"
Line 934
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  934 always 934
  "1: class A : public B , public C , public D { } ;\n" always "1: class A : public B , public C , public D { } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  934 always 934
  code always "class A:public B,public C,public D {};"
Line 939
  40 always 40
  = always "void foo() { B b(this); A a(this, b); }"
  "void foo() { B b(this); A a(this, b); }" always "void foo() { B b(this); A a(this, b); }"
Line 940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  940 always 940
  "1: void foo ( ) { B b@1 ( this ) ; A a@2 ( this , b@1 ) ; }\n" always "1: void foo ( ) { B b@1 ( this ) ; A a@2 ( this , b@1 ) ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  940 always 940
  code always "void foo() { B b(this); A a(this, b); }"
Line 945
  54 always 54
  = always "void foo() { int t; x = (struct t *)malloc(); f(t); }"
  "void foo() { int t; x = (struct t *)malloc(); f(t); }" always "void foo() { int t; x = (struct t *)malloc(); f(t); }"
Line 946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  946 always 946
  "1: void foo ( ) { int t@1 ; x = ( struct t * ) malloc ( ) ; f ( t@1 ) ; }\n" always "1: void foo ( ) { int t@1 ; x = ( struct t * ) malloc ( ) ; f ( t@1 ) ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  946 always 946
  code always "void foo() { int t; x = (struct t *)malloc(); f(t); }"
  "test.c" always "test.c"
Line 953
  49 always 49
  = always "void f(std::string &string, std::string &len) {}"
  "void f(std::string &string, std::string &len) {}" always "void f(std::string &string, std::string &len) {}"
Line 954
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  954 always 954
  "1: void f ( std :: string & string@1 , std :: string & len@2 ) { }\n" always "1: void f ( std :: string & string@1 , std :: string & len@2 ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  954 always 954
  code always "void f(std::string &string, std::string &len) {}"
  "test.cpp" always "test.cpp"
Line 960
  43 always 43
  = always "int x;\nvoid a(int x);\nvoid b() { x = 0; }\n"
  "int x;\nvoid a(int x);\nvoid b() { x = 0; }\n" always "int x;\nvoid a(int x);\nvoid b() { x = 0; }\n"
Line 963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  963 always 963
  "1: int x@1 ;\n2: void a ( int x@2 ) ;\n3: void b ( ) { x@1 = 0 ; }\n" always "1: int x@1 ;\n2: void a ( int x@2 ) ;\n3: void b ( ) { x@1 = 0 ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  963 always 963
  code always "int x;\nvoid a(int x);\nvoid b() { x = 0; }\n"
Line 971
  39 always 39
  = always "int X::f(int b) const { return(a*b); }"
  "int X::f(int b) const { return(a*b); }" always "int X::f(int b) const { return(a*b); }"
Line 972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  972 always 972
  "1: int X :: f ( int b@1 ) const { return ( a * b@1 ) ; }\n" always "1: int X :: f ( int b@1 ) const { return ( a * b@1 ) ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  972 always 972
  code always "int X::f(int b) const { return(a*b); }"
Line 977
  25 always 25
  = always "void f(std::vector<int>)"
  "void f(std::vector<int>)" always "void f(std::vector<int>)"
Line 978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  978 always 978
  "1: void f ( std :: vector < int > )\n" always "1: void f ( std :: vector < int > )\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  978 always 978
  code always "void f(std::vector<int>)"
  "test.cpp" always "test.cpp"
Line 983
  35 always 35
  = always "class A { explicit A(const A&); };"
  "class A { explicit A(const A&); };" always "class A { explicit A(const A&); };"
Line 984
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  984 always 984
  "1: class A { explicit A ( const A & ) ; } ;\n" always "1: class A { explicit A ( const A & ) ; } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  984 always 984
  code always "class A { explicit A(const A&); };"
  "test.cpp" always "test.cpp"
Line 989
  15 always 15
  = always "T t; t.x<0>();"
  "T t; t.x<0>();" always "T t; t.x<0>();"
Line 990
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  990 always 990
  "1: T t@1 ; t@1 . x < 0 > ( ) ;\n" always "1: T t@1 ; t@1 . x < 0 > ( ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  990 always 990
  code always "T t; t.x<0>();"
  "test.cpp" always "test.cpp"
Line 995
  44 always 44
  = always "A<B<C>::D> e;\nB< C<> > b[10];\nB<C<>> c[10];"
  "A<B<C>::D> e;\nB< C<> > b[10];\nB<C<>> c[10];" always "A<B<C>::D> e;\nB< C<> > b[10];\nB<C<>> c[10];"
Line 998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  998 always 998
  "1: A < B < C > :: D > e@1 ;\n2: B < C < > > b@2 [ 10 ] ;\n3: B < C < > > c@3 [ 10 ] ;\n" always "1: A < B < C > :: D > e@1 ;\n2: B < C < > > b@2 [ 10 ] ;\n3: B < C < > > c@3 [ 10 ] ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  998 always 998
  code always "A<B<C>::D> e;\nB< C<> > b[10];\nB<C<>> c[10];"
  "test.cpp" always "test.cpp"
Line 1005
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1005 always 1005
  "1: A < & f > list@1 [ 4 ] ;\n" always "1: A < & f > list@1 [ 4 ] ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1005 always 1005
  "A<&f> list[4];" always "A<&f> list[4];"
  "test.cpp" always "test.cpp"
Line 1011
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1011 always 1011
  "STATIC ptr_t GC_approx_sp(void) { word sp; sp = (word)&sp; return((ptr_t)sp); }" always "STATIC ptr_t GC_approx_sp(void) { word sp; sp = (word)&sp; return((ptr_t)sp); }"
Line 1015
  184 always 184
  = always "typedef struct foo {} foo; void bar1(struct foo foo) {} void baz1(foo foo) {} void bar2(struct foo& foo) {} void baz2(foo& foo) {} void bar3(struct foo* foo) {} void baz3(foo* foo) {}"
  "typedef struct foo {} foo; void bar1(struct foo foo) {} void baz1(foo foo) {} void bar2(struct foo& foo) {} void baz2(foo& foo) {} void bar3(struct foo* foo) {} void baz3(foo* foo) {}" always "typedef struct foo {} foo; void bar1(struct foo foo) {} void baz1(foo foo) {} void bar2(struct foo& foo) {} void baz2(foo& foo) {} void bar3(struct foo* foo) {} void baz3(foo* foo) {}"
Line 1022
  239 always 239
  = always "1: struct foo { } ; void bar1 ( struct foo foo@1 ) { } void baz1 ( struct foo foo@2 ) { } void bar2 ( struct foo & foo@3 ) { } void baz2 ( struct foo & foo@4 ) { } void bar3 ( struct foo * foo@5 ) { } void baz3 ( struct foo * foo@6 ) { }\n"
  "1: struct foo { } ; void bar1 ( struct foo foo@1 ) { } void baz1 ( struct foo foo@2 ) { } void bar2 ( struct foo & foo@3 ) { } void baz2 ( struct foo & foo@4 ) { } void bar3 ( struct foo * foo@5 ) { } void baz3 ( struct foo * foo@6 ) { }\n" always "1: struct foo { } ; void bar1 ( struct foo foo@1 ) { } void baz1 ( struct foo foo@2 ) { } void bar2 ( struct foo & foo@3 ) { } void baz2 ( struct foo & foo@4 ) { } void bar3 ( struct foo * foo@5 ) { } void baz3 ( struct foo * foo@6 ) { }\n"
Line 1030
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1030 always 1030
  expected always "1: struct foo { } ; void bar1 ( struct foo foo@1 ) { } void baz1 ( struct foo foo@2 ) { } void bar2 ( struct foo & foo@3 ) { } void baz2 ( struct foo & foo@4 ) { } void bar3 ( struct foo * foo@5 ) { } void baz3 ( struct foo * foo@6 ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1030 always 1030
  code always "typedef struct foo {} foo; void bar1(struct foo foo) {} void baz1(foo foo) {} void bar2(struct foo& foo) {} void baz2(foo& foo) {} void bar3(struct foo* foo) {} void baz3(foo* foo) {}"
  "test.cpp" always "test.cpp"
Line 1034
  49 always 49
  = always "void fred(int x) throw() {}void wilma() { x++; }"
  "void fred(int x) throw() {}void wilma() { x++; }" always "void fred(int x) throw() {}void wilma() { x++; }"
Line 1036
  66 always 66
  = always "1: void fred ( int x@1 ) throw ( ) { } void wilma ( ) { x ++ ; }\n"
  "1: void fred ( int x@1 ) throw ( ) { } void wilma ( ) { x ++ ; }\n" always "1: void fred ( int x@1 ) throw ( ) { } void wilma ( ) { x ++ ; }\n"
Line 1039
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1039 always 1039
  expected1 always "1: void fred ( int x@1 ) throw ( ) { } void wilma ( ) { x ++ ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1039 always 1039
  code1 always "void fred(int x) throw() {}void wilma() { x++; }"
  "test.cpp" always "test.cpp"
Line 1041
  61 always 61
  = always "void fred(int x) const throw(EXCEPT) {}void wilma() { x++; }"
  "void fred(int x) const throw(EXCEPT) {}void wilma() { x++; }" always "void fred(int x) const throw(EXCEPT) {}void wilma() { x++; }"
Line 1043
  79 always 79
  = always "1: void fred ( int x@1 ) const throw ( EXCEPT ) { } void wilma ( ) { x ++ ; }\n"
  "1: void fred ( int x@1 ) const throw ( EXCEPT ) { } void wilma ( ) { x ++ ; }\n" always "1: void fred ( int x@1 ) const throw ( EXCEPT ) { } void wilma ( ) { x ++ ; }\n"
Line 1046
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1046 always 1046
  expected2 always "1: void fred ( int x@1 ) const throw ( EXCEPT ) { } void wilma ( ) { x ++ ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1046 always 1046
  code2 always "void fred(int x) const throw(EXCEPT) {}void wilma() { x++; }"
  "test.cpp" always "test.cpp"
Line 1048
  54 always 54
  = always "void fred(int x) throw() ABCD {}void wilma() { x++; }"
  "void fred(int x) throw() ABCD {}void wilma() { x++; }" always "void fred(int x) throw() ABCD {}void wilma() { x++; }"
Line 1050
  66 always 66
  = always "1: void fred ( int x@1 ) throw ( ) { } void wilma ( ) { x ++ ; }\n"
  "1: void fred ( int x@1 ) throw ( ) { } void wilma ( ) { x ++ ; }\n" always "1: void fred ( int x@1 ) throw ( ) { } void wilma ( ) { x ++ ; }\n"
Line 1053
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1053 always 1053
  expected3 always "1: void fred ( int x@1 ) throw ( ) { } void wilma ( ) { x ++ ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1053 always 1053
  code3 always "void fred(int x) throw() ABCD {}void wilma() { x++; }"
  "test.cpp" always "test.cpp"
Line 1055
  52 always 52
  = always "void fred(int x) noexcept() {}void wilma() { x++; }"
  "void fred(int x) noexcept() {}void wilma() { x++; }" always "void fred(int x) noexcept() {}void wilma() { x++; }"
Line 1057
  69 always 69
  = always "1: void fred ( int x@1 ) noexcept ( ) { } void wilma ( ) { x ++ ; }\n"
  "1: void fred ( int x@1 ) noexcept ( ) { } void wilma ( ) { x ++ ; }\n" always "1: void fred ( int x@1 ) noexcept ( ) { } void wilma ( ) { x ++ ; }\n"
Line 1060
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1060 always 1060
  expected4 always "1: void fred ( int x@1 ) noexcept ( ) { } void wilma ( ) { x ++ ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1060 always 1060
  code4 always "void fred(int x) noexcept() {}void wilma() { x++; }"
  "test.cpp" always "test.cpp"
Line 1062
  50 always 50
  = always "void fred(int x) noexcept {}void wilma() { x++; }"
  "void fred(int x) noexcept {}void wilma() { x++; }" always "void fred(int x) noexcept {}void wilma() { x++; }"
Line 1064
  74 always 74
  = always "1: void fred ( int x@1 ) noexcept ( true ) { } void wilma ( ) { x ++ ; }\n"
  "1: void fred ( int x@1 ) noexcept ( true ) { } void wilma ( ) { x ++ ; }\n" always "1: void fred ( int x@1 ) noexcept ( true ) { } void wilma ( ) { x ++ ; }\n"
Line 1067
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1067 always 1067
  expected5 always "1: void fred ( int x@1 ) noexcept ( true ) { } void wilma ( ) { x ++ ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1067 always 1067
  code5 always "void fred(int x) noexcept {}void wilma() { x++; }"
  "test.cpp" always "test.cpp"
Line 1069
  60 always 60
  = always "void fred(int x) noexcept ( false ) {}void wilma() { x++; }"
  "void fred(int x) noexcept ( false ) {}void wilma() { x++; }" always "void fred(int x) noexcept ( false ) {}void wilma() { x++; }"
Line 1071
  75 always 75
  = always "1: void fred ( int x@1 ) noexcept ( false ) { } void wilma ( ) { x ++ ; }\n"
  "1: void fred ( int x@1 ) noexcept ( false ) { } void wilma ( ) { x ++ ; }\n" always "1: void fred ( int x@1 ) noexcept ( false ) { } void wilma ( ) { x ++ ; }\n"
Line 1074
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1074 always 1074
  expected6 always "1: void fred ( int x@1 ) noexcept ( false ) { } void wilma ( ) { x ++ ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1074 always 1074
  code6 always "void fred(int x) noexcept ( false ) {}void wilma() { x++; }"
  "test.cpp" always "test.cpp"
Line 1078
  300 always 300
  = always "void SmoothPath() {\n    {\n        float dfx = (p2p0.x > 0.0f)?\n                    ((n0->xmax() * SQUARE_SIZE) - p0.x):\n                    ((n0->xmin() * SQUARE_SIZE) - p0.x);\n        float tx = dfx / dx;\n        if (hEdge) {\n        }\n        if (vEdge) {\n            pi.z = tx;\n        }\n    }\n}\n"
  "void SmoothPath() {\n    {\n        float dfx = (p2p0.x > 0.0f)?\n                    ((n0->xmax() * SQUARE_SIZE) - p0.x):\n                    ((n0->xmin() * SQUARE_SIZE) - p0.x);\n        float tx = dfx / dx;\n        if (hEdge) {\n        }\n        if (vEdge) {\n            pi.z = tx;\n        }\n    }\n}\n" always "void SmoothPath() {\n    {\n        float dfx = (p2p0.x > 0.0f)?\n                    ((n0->xmax() * SQUARE_SIZE) - p0.x):\n                    ((n0->xmin() * SQUARE_SIZE) - p0.x);\n        float tx = dfx / dx;\n        if (hEdge) {\n        }\n        if (vEdge) {\n            pi.z = tx;\n        }\n    }\n}\n"
Line 1091
  289 always 289
  = always "1: void SmoothPath ( ) {\n2:\n3: float dfx@1 ; dfx@1 = ( p2p0 . x > 0.0f ) ?\n4: ( ( n0 . xmax ( ) * SQUARE_SIZE ) - p0 . x ) :\n5: ( ( n0 . xmin ( ) * SQUARE_SIZE ) - p0 . x ) ;\n6: float tx@2 ; tx@2 = dfx@1 / dx ;\n7: if ( hEdge ) {\n8: }\n9: if ( vEdge ) {\n10: pi . z = tx@2 ;\n11: }\n12:\n13: }\n"
  "1: void SmoothPath ( ) {\n2:\n3: float dfx@1 ; dfx@1 = ( p2p0 . x > 0.0f ) ?\n4: ( ( n0 . xmax ( ) * SQUARE_SIZE ) - p0 . x ) :\n5: ( ( n0 . xmin ( ) * SQUARE_SIZE ) - p0 . x ) ;\n6: float tx@2 ; tx@2 = dfx@1 / dx ;\n7: if ( hEdge ) {\n8: }\n9: if ( vEdge ) {\n10: pi . z = tx@2 ;\n11: }\n12:\n13: }\n" always "1: void SmoothPath ( ) {\n2:\n3: float dfx@1 ; dfx@1 = ( p2p0 . x > 0.0f ) ?\n4: ( ( n0 . xmax ( ) * SQUARE_SIZE ) - p0 . x ) :\n5: ( ( n0 . xmin ( ) * SQUARE_SIZE ) - p0 . x ) ;\n6: float tx@2 ; tx@2 = dfx@1 / dx ;\n7: if ( hEdge ) {\n8: }\n9: if ( vEdge ) {\n10: pi . z = tx@2 ;\n11: }\n12:\n13: }\n"
Line 1104
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1104 always 1104
  expected1 always "1: void SmoothPath ( ) {\n2:\n3: float dfx@1 ; dfx@1 = ( p2p0 . x > 0.0f ) ?\n4: ( ( n0 . xmax ( ) * SQUARE_SIZE ) - p0 . x ) :\n5: ( ( n0 . xmin ( ) * SQUARE_SIZE ) - p0 . x ) ;\n6: float tx@2 ; tx@2 = dfx@1 / dx ;\n7: if ( hEdge ) {\n8: }\n9: if ( vEdge ) {\n10: pi . z = tx@2 ;\n11: }\n12:\n13: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1104 always 1104
  code1 always "void SmoothPath() {\n    {\n        float dfx = (p2p0.x > 0.0f)?\n                    ((n0->xmax() * SQUARE_SIZE) - p0.x):\n                    ((n0->xmin() * SQUARE_SIZE) - p0.x);\n        float tx = dfx / dx;\n        if (hEdge) {\n        }\n        if (vEdge) {\n            pi.z = tx;\n        }\n    }\n}\n"
  "test.cpp" always "test.cpp"
Line 1108
  140 always 140
  = always "void f() {\n    for (int i;\n         ({for(int i;i;++i){i++;}i++;}),i;\n         ({for(int i;i;++i){i++;}i++;}),i++) {\n         i++;\n    }\n}\n"
  "void f() {\n    for (int i;\n         ({for(int i;i;++i){i++;}i++;}),i;\n         ({for(int i;i;++i){i++;}i++;}),i++) {\n         i++;\n    }\n}\n" always "void f() {\n    for (int i;\n         ({for(int i;i;++i){i++;}i++;}),i;\n         ({for(int i;i;++i){i++;}i++;}),i++) {\n         i++;\n    }\n}\n"
Line 1115
  207 always 207
  = always "1: void f ( ) {\n2: for ( int i@1 ;\n3: ( { for ( int i@2 ; i@2 ; ++ i@2 ) { i@2 ++ ; } i@1 ++ ; } ) , i@1 ;\n4: ( { for ( int i@3 ; i@3 ; ++ i@3 ) { i@3 ++ ; } i@1 ++ ; } ) , i@1 ++ ) {\n5: i@1 ++ ;\n6: }\n7: }\n"
  "1: void f ( ) {\n2: for ( int i@1 ;\n3: ( { for ( int i@2 ; i@2 ; ++ i@2 ) { i@2 ++ ; } i@1 ++ ; } ) , i@1 ;\n4: ( { for ( int i@3 ; i@3 ; ++ i@3 ) { i@3 ++ ; } i@1 ++ ; } ) , i@1 ++ ) {\n5: i@1 ++ ;\n6: }\n7: }\n" always "1: void f ( ) {\n2: for ( int i@1 ;\n3: ( { for ( int i@2 ; i@2 ; ++ i@2 ) { i@2 ++ ; } i@1 ++ ; } ) , i@1 ;\n4: ( { for ( int i@3 ; i@3 ; ++ i@3 ) { i@3 ++ ; } i@1 ++ ; } ) , i@1 ++ ) {\n5: i@1 ++ ;\n6: }\n7: }\n"
Line 1122
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1122 always 1122
  expected1 always "1: void f ( ) {\n2: for ( int i@1 ;\n3: ( { for ( int i@2 ; i@2 ; ++ i@2 ) { i@2 ++ ; } i@1 ++ ; } ) , i@1 ;\n4: ( { for ( int i@3 ; i@3 ; ++ i@3 ) { i@3 ++ ; } i@1 ++ ; } ) , i@1 ++ ) {\n5: i@1 ++ ;\n6: }\n7: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1122 always 1122
  code1 always "void f() {\n    for (int i;\n         ({for(int i;i;++i){i++;}i++;}),i;\n         ({for(int i;i;++i){i++;}i++;}),i++) {\n         i++;\n    }\n}\n"
  "test.cpp" always "test.cpp"
Line 1126
  42 always 42
  = always "class DLLSYM B;\nstruct B {\n    ~B() {}\n};"
  "class DLLSYM B;\nstruct B {\n    ~B() {}\n};" always "class DLLSYM B;\nstruct B {\n    ~B() {}\n};"
Line 1130
  61 always 61
  = always "1: class DLLSYM B@1 ;\n2: struct B {\n3: ~ B@1 ( ) { }\n4: } ;\n"
  "1: class DLLSYM B@1 ;\n2: struct B {\n3: ~ B@1 ( ) { }\n4: } ;\n" always "1: class DLLSYM B@1 ;\n2: struct B {\n3: ~ B@1 ( ) { }\n4: } ;\n"
Line 1134
  59 always 59
  = always "1: class DLLSYM B@1 ;\n2: struct B {\n3: ~ B ( ) { }\n4: } ;\n"
  "1: class DLLSYM B@1 ;\n2: struct B {\n3: ~ B ( ) { }\n4: } ;\n" always "1: class DLLSYM B@1 ;\n2: struct B {\n3: ~ B ( ) { }\n4: } ;\n"
Line 1138
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1138 always 1138
  wanted always "1: class DLLSYM B@1 ;\n2: struct B {\n3: ~ B ( ) { }\n4: } ;\n"
  expected always "1: class DLLSYM B@1 ;\n2: struct B {\n3: ~ B@1 ( ) { }\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1138 always 1138
  code always "class DLLSYM B;\nstruct B {\n    ~B() {}\n};"
  "test.cpp" always "test.cpp"
Line 1142
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1142 always 1142
  "1: a = ( x y ) 10 ;\n" always "1: a = ( x y ) 10 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1142 always 1142
  "a=(x y)10;" always "a=(x y)10;"
Line 1147
  48 always 48
  = always "void foo(int b) {\n  void bar(int a, int b) {}\n}"
  "void foo(int b) {\n  void bar(int a, int b) {}\n}" always "void foo(int b) {\n  void bar(int a, int b) {}\n}"
Line 1150
  70 always 70
  = always "1: void foo ( int b@1 ) {\n2: void bar ( int a@2 , int b@3 ) { }\n3: }\n"
  "1: void foo ( int b@1 ) {\n2: void bar ( int a@2 , int b@3 ) { }\n3: }\n" always "1: void foo ( int b@1 ) {\n2: void bar ( int a@2 , int b@3 ) { }\n3: }\n"
Line 1153
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1153 always 1153
  expected always "1: void foo ( int b@1 ) {\n2: void bar ( int a@2 , int b@3 ) { }\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1153 always 1153
  code always "void foo(int b) {\n  void bar(int a, int b) {}\n}"
Line 1157
  114 always 114
  = always "void bar(int,int);\nvoid f() {\n    for (size_t c = 0; c < 42; ++c) {\n        int x;\n        bar(r, r * x);\n    }\n}"
  "void bar(int,int);\nvoid f() {\n    for (size_t c = 0; c < 42; ++c) {\n        int x;\n        bar(r, r * x);\n    }\n}" always "void bar(int,int);\nvoid f() {\n    for (size_t c = 0; c < 42; ++c) {\n        int x;\n        bar(r, r * x);\n    }\n}"
Line 1165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1165 always 1165
  "same varid" always "same varid"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1165 always 1165
  code always "void bar(int,int);\nvoid f() {\n    for (size_t c = 0; c < 42; ++c) {\n        int x;\n        bar(r, r * x);\n    }\n}"
  "x" always "x"
Line 1169
  41 always 41
  = always "void f(boost::optional<int> const& x) {}"
  "void f(boost::optional<int> const& x) {}" always "void f(boost::optional<int> const& x) {}"
Line 1170
  57 always 57
  = always "1: void f ( const boost :: optional < int > & x@1 ) { }\n"
  "1: void f ( const boost :: optional < int > & x@1 ) { }\n" always "1: void f ( const boost :: optional < int > & x@1 ) { }\n"
Line 1171
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1171 always 1171
  expected always "1: void f ( const boost :: optional < int > & x@1 ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1171 always 1171
  code always "void f(boost::optional<int> const& x) {}"
Line 1175
  29 always 29
  = always "extern const char (*x[256]);"
  "extern const char (*x[256]);" always "extern const char (*x[256]);"
Line 1176
  42 always 42
  = always "1: extern const char ( * x@1 [ 256 ] ) ;\n"
  "1: extern const char ( * x@1 [ 256 ] ) ;\n" always "1: extern const char ( * x@1 [ 256 ] ) ;\n"
Line 1177
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1177 always 1177
  expected always "1: extern const char ( * x@1 [ 256 ] ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1177 always 1177
  code always "extern const char (*x[256]);"
Line 1182
  17 always 17
  = always "extern int (*p);"
  "extern int (*p);" always "extern int (*p);"
Line 1183
  27 always 27
  = always "1: extern int ( * p@1 ) ;\n"
  "1: extern int ( * p@1 ) ;\n" always "1: extern int ( * p@1 ) ;\n"
Line 1184
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1184 always 1184
  expected always "1: extern int ( * p@1 ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1184 always 1184
  code always "extern int (*p);"
Line 1187
  16 always 16
  = always "extern int (i);"
  "extern int (i);" always "extern int (i);"
Line 1188
  25 always 25
  = always "1: extern int ( i@1 ) ;\n"
  "1: extern int ( i@1 ) ;\n" always "1: extern int ( i@1 ) ;\n"
Line 1189
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1189 always 1189
  expected always "1: extern int ( i@1 ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1189 always 1189
  code always "extern int (i);"
Line 1192
  10 always 10
  = always "int (*p);"
  "int (*p);" always "int (*p);"
Line 1193
  20 always 20
  = always "1: int ( * p@1 ) ;\n"
  "1: int ( * p@1 ) ;\n" always "1: int ( * p@1 ) ;\n"
Line 1194
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1194 always 1194
  expected always "1: int ( * p@1 ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1194 always 1194
  code always "int (*p);"
Line 1197
  9 always 9
  = always "int (i);"
  "int (i);" always "int (i);"
Line 1198
  18 always 18
  = always "1: int ( i@1 ) ;\n"
  "1: int ( i@1 ) ;\n" always "1: int ( i@1 ) ;\n"
Line 1199
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1199 always 1199
  expected always "1: int ( i@1 ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1199 always 1199
  code always "int (i);"
Line 1204
  52 always 52
  = always "void foo(int a, int b) {\n  for (int a=1,b=2;;) {}\n}"
  "void foo(int a, int b) {\n  for (int a=1,b=2;;) {}\n}" always "void foo(int a, int b) {\n  for (int a=1,b=2;;) {}\n}"
Line 1207
  83 always 83
  = always "1: void foo ( int a@1 , int b@2 ) {\n2: for ( int a@3 = 1 , b@4 = 2 ; ; ) { }\n3: }\n"
  "1: void foo ( int a@1 , int b@2 ) {\n2: for ( int a@3 = 1 , b@4 = 2 ; ; ) { }\n3: }\n" always "1: void foo ( int a@1 , int b@2 ) {\n2: for ( int a@3 = 1 , b@4 = 2 ; ; ) { }\n3: }\n"
Line 1210
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1210 always 1210
  expected always "1: void foo ( int a@1 , int b@2 ) {\n2: for ( int a@3 = 1 , b@4 = 2 ; ; ) { }\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1210 always 1210
  code always "void foo(int a, int b) {\n  for (int a=1,b=2;;) {}\n}"
Line 1214
  59 always 59
  = always "void foo(int a, int b) {\n  for (int a=f(x,y,z),b=2;;) {}\n}"
  "void foo(int a, int b) {\n  for (int a=f(x,y,z),b=2;;) {}\n}" always "void foo(int a, int b) {\n  for (int a=f(x,y,z),b=2;;) {}\n}"
Line 1217
  97 always 97
  = always "1: void foo ( int a@1 , int b@2 ) {\n2: for ( int a@3 = f ( x , y , z ) , b@4 = 2 ; ; ) { }\n3: }\n"
  "1: void foo ( int a@1 , int b@2 ) {\n2: for ( int a@3 = f ( x , y , z ) , b@4 = 2 ; ; ) { }\n3: }\n" always "1: void foo ( int a@1 , int b@2 ) {\n2: for ( int a@3 = f ( x , y , z ) , b@4 = 2 ; ; ) { }\n3: }\n"
Line 1220
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1220 always 1220
  expected always "1: void foo ( int a@1 , int b@2 ) {\n2: for ( int a@3 = f ( x , y , z ) , b@4 = 2 ; ; ) { }\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1220 always 1220
  code always "void foo(int a, int b) {\n  for (int a=f(x,y,z),b=2;;) {}\n}"
Line 1224
  40 always 40
  = always "void f() {\n    delete d;\n    throw t;\n}"
  "void f() {\n    delete d;\n    throw t;\n}" always "void f() {\n    delete d;\n    throw t;\n}"
Line 1229
  53 always 53
  = always "1: void f ( ) {\n2: delete d@1 ;\n3: throw t@2 ;\n4: }\n"
  "1: void f ( ) {\n2: delete d@1 ;\n3: throw t@2 ;\n4: }\n" always "1: void f ( ) {\n2: delete d@1 ;\n3: throw t@2 ;\n4: }\n"
Line 1234
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1234 always 1234
  expected always "1: void f ( ) {\n2: delete d@1 ;\n3: throw t@2 ;\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1234 always 1234
  code always "void f() {\n    delete d;\n    throw t;\n}"
  "test.c" always "test.c"
Line 1238
  366 always 366
  = always "int clear_extent_bit(struct extent_io_tree *tree, u64 start, u64 end, unsigned long bits, int wake, int delete, struct extent_state **cached_state, gfp_t mask) {\n  struct extent_state *state;\n}int clear_extent_dirty() {\n  return clear_extent_bit(tree, start, end, EXTENT_DIRTY | EXTENT_DELALLOC |                           EXTENT_DO_ACCOUNTING, 0, 0, NULL, mask);\n}"
  "int clear_extent_bit(struct extent_io_tree *tree, u64 start, u64 end, unsigned long bits, int wake, int delete, struct extent_state **cached_state, gfp_t mask) {\n  struct extent_state *state;\n}int clear_extent_dirty() {\n  return clear_extent_bit(tree, start, end, EXTENT_DIRTY | EXTENT_DELALLOC |                           EXTENT_DO_ACCOUNTING, 0, 0, NULL, mask);\n}" always "int clear_extent_bit(struct extent_io_tree *tree, u64 start, u64 end, unsigned long bits, int wake, int delete, struct extent_state **cached_state, gfp_t mask) {\n  struct extent_state *state;\n}int clear_extent_dirty() {\n  return clear_extent_bit(tree, start, end, EXTENT_DIRTY | EXTENT_DELALLOC |                           EXTENT_DO_ACCOUNTING, 0, 0, NULL, mask);\n}"
Line 1247
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1247 always 1247
  code always "int clear_extent_bit(struct extent_io_tree *tree, u64 start, u64 end, unsigned long bits, int wake, int delete, struct extent_state **cached_state, gfp_t mask) {\n  struct extent_state *state;\n}int clear_extent_dirty() {\n  return clear_extent_bit(tree, start, end, EXTENT_DIRTY | EXTENT_DELALLOC |                           EXTENT_DO_ACCOUNTING, 0, 0, NULL, mask);\n}"
  "test.c" always "test.c"
Line 1251
  43 always 43
  = always "void f() {\n    int x;\n    x = a(y*x,10);\n}"
  "void f() {\n    int x;\n    x = a(y*x,10);\n}" always "void f() {\n    int x;\n    x = a(y*x,10);\n}"
Line 1255
  65 always 65
  = always "1: void f ( ) {\n2: int x@1 ;\n3: x@1 = a ( y * x@1 , 10 ) ;\n4: }\n"
  "1: void f ( ) {\n2: int x@1 ;\n3: x@1 = a ( y * x@1 , 10 ) ;\n4: }\n" always "1: void f ( ) {\n2: int x@1 ;\n3: x@1 = a ( y * x@1 , 10 ) ;\n4: }\n"
Line 1259
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1259 always 1259
  expected always "1: void f ( ) {\n2: int x@1 ;\n3: x@1 = a ( y * x@1 , 10 ) ;\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1259 always 1259
  code always "void f() {\n    int x;\n    x = a(y*x,10);\n}"
  "test.c" always "test.c"
Line 1264
  33 always 33
  = always "void f(int b) {\n    x(a*b,10);\n}"
  "void f(int b) {\n    x(a*b,10);\n}" always "void f(int b) {\n    x(a*b,10);\n}"
Line 1267
  "1: void f ( int b@1 ) {\n2: x ( a * b" always "1: void f ( int b@1 ) {\n2: x ( a * b"
Line 1269
  " , 10 ) ;\n3: }\n" always " , 10 ) ;\n3: }\n"
Line 1271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1271 always 1271
  "@1" always "@1"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1271 always 1271
  code always "void f(int b) {\n    x(a*b,10);\n}"
  "test.c" always "test.c"
Line 1276
  60 always 60
  = always "void f() {\n    int a = 0;\n    int b = c - (foo::bar * a);\n}"
  "void f() {\n    int a = 0;\n    int b = c - (foo::bar * a);\n}" always "void f() {\n    int a = 0;\n    int b = c - (foo::bar * a);\n}"
Line 1281
  91 always 91
  = always "1: void f ( ) {\n2: int a@1 ; a@1 = 0 ;\n3: int b@2 ; b@2 = c - ( foo :: bar * a@1 ) ;\n4: }\n"
  "1: void f ( ) {\n2: int a@1 ; a@1 = 0 ;\n3: int b@2 ; b@2 = c - ( foo :: bar * a@1 ) ;\n4: }\n" always "1: void f ( ) {\n2: int a@1 ; a@1 = 0 ;\n3: int b@2 ; b@2 = c - ( foo :: bar * a@1 ) ;\n4: }\n"
Line 1286
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1286 always 1286
  expected always "1: void f ( ) {\n2: int a@1 ; a@1 = 0 ;\n3: int b@2 ; b@2 = c - ( foo :: bar * a@1 ) ;\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1286 always 1286
  code always "void f() {\n    int a = 0;\n    int b = c - (foo::bar * a);\n}"
Line 1291
  32 always 32
  = always "void f() { int x; fun(a,b*x); }"
  "void f() { int x; fun(a,b*x); }" always "void f() { int x; fun(a,b*x); }"
Line 1292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1292 always 1292
  "1: void f ( ) { int x@1 ; fun ( a , b * x@1 ) ; }\n" always "1: void f ( ) { int x@1 ; fun ( a , b * x@1 ) ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1292 always 1292
  code1 always "void f() { int x; fun(a,b*x); }"
  "test.c" always "test.c"
Line 1294
  37 always 37
  = always "void f(int a) { int x; fun(a,b*x); }"
  "void f(int a) { int x; fun(a,b*x); }" always "void f(int a) { int x; fun(a,b*x); }"
Line 1295
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1295 always 1295
  "1: void f ( int a@1 ) { int x@2 ; fun ( a@1 , b * x@2 ) ; }\n" always "1: void f ( int a@1 ) { int x@2 ; fun ( a@1 , b * x@2 ) ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1295 always 1295
  code2 always "void f(int a) { int x; fun(a,b*x); }"
  "test.c" always "test.c"
Line 1300
  32 always 32
  = always "void foo() { (f(x[2]))(x[2]); }"
  "void foo() { (f(x[2]))(x[2]); }" always "void foo() { (f(x[2]))(x[2]); }"
Line 1301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1301 always 1301
  "1: void foo ( ) { f ( x [ 2 ] ) ( x [ 2 ] ) ; }\n" always "1: void foo ( ) { f ( x [ 2 ] ) ( x [ 2 ] ) ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1301 always 1301
  code always "void foo() { (f(x[2]))(x[2]); }"
  "test.c" always "test.c"
Line 1306
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1306 always 1306
  "list<int> ints;\nlist<int>::iterator it;\nstd::vector<std::string> dirs;\nstd::map<int, int> coords;\nstd::tr1::unordered_map<int, int> xy;\nstd::list<boost::wave::token_id> tokens;\nstatic std::vector<CvsProcess*> ex1;\nextern std::vector<CvsProcess*> ex2;\nstd::map<int, 1> m;" always "list<int> ints;\nlist<int>::iterator it;\nstd::vector<std::string> dirs;\nstd::map<int, int> coords;\nstd::tr1::unordered_map<int, int> xy;\nstd::list<boost::wave::token_id> tokens;\nstatic std::vector<CvsProcess*> ex1;\nextern std::vector<CvsProcess*> ex2;\nstd::map<int, 1> m;"
Line 1317
  382 always 382
  = always "1: list < int > ints@1 ;\n2: list < int > :: iterator it@2 ;\n3: std :: vector < std :: string > dirs@3 ;\n4: std :: map < int , int > coords@4 ;\n5: std :: tr1 :: unordered_map < int , int > xy@5 ;\n6: std :: list < boost :: wave :: token_id > tokens@6 ;\n7: static std :: vector < CvsProcess * > ex1@7 ;\n8: extern std :: vector < CvsProcess * > ex2@8 ;\n9: std :: map < int , 1 > m@9 ;\n"
  "1: list < int > ints@1 ;\n2: list < int > :: iterator it@2 ;\n3: std :: vector < std :: string > dirs@3 ;\n4: std :: map < int , int > coords@4 ;\n5: std :: tr1 :: unordered_map < int , int > xy@5 ;\n6: std :: list < boost :: wave :: token_id > tokens@6 ;\n7: static std :: vector < CvsProcess * > ex1@7 ;\n8: extern std :: vector < CvsProcess * > ex2@8 ;\n9: std :: map < int , 1 > m@9 ;\n" always "1: list < int > ints@1 ;\n2: list < int > :: iterator it@2 ;\n3: std :: vector < std :: string > dirs@3 ;\n4: std :: map < int , int > coords@4 ;\n5: std :: tr1 :: unordered_map < int , int > xy@5 ;\n6: std :: list < boost :: wave :: token_id > tokens@6 ;\n7: static std :: vector < CvsProcess * > ex1@7 ;\n8: extern std :: vector < CvsProcess * > ex2@8 ;\n9: std :: map < int , 1 > m@9 ;\n"
Line 1327
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1327 always 1327
  expected always "1: list < int > ints@1 ;\n2: list < int > :: iterator it@2 ;\n3: std :: vector < std :: string > dirs@3 ;\n4: std :: map < int , int > coords@4 ;\n5: std :: tr1 :: unordered_map < int , int > xy@5 ;\n6: std :: list < boost :: wave :: token_id > tokens@6 ;\n7: static std :: vector < CvsProcess * > ex1@7 ;\n8: extern std :: vector < CvsProcess * > ex2@8 ;\n9: std :: map < int , 1 > m@9 ;\n"
Line 1331
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1331 always 1331
  "std::bitset<static_cast<int>(2)> x;" always "std::bitset<static_cast<int>(2)> x;"
Line 1333
  54 always 54
  = always "1: std :: bitset < static_cast < int > ( 2 ) > x@1 ;\n"
  "1: std :: bitset < static_cast < int > ( 2 ) > x@1 ;\n" always "1: std :: bitset < static_cast < int > ( 2 ) > x@1 ;\n"
Line 1335
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1335 always 1335
  expected always "1: std :: bitset < static_cast < int > ( 2 ) > x@1 ;\n"
Line 1339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1339 always 1339
  "1: void f ( ) { const new auto ( 0 ) ; }\n" always "1: void f ( ) { const new auto ( 0 ) ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1339 always 1339
  "void f(){new const auto(0);}" always "void f(){new const auto(0);}"
Line 1344
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1344 always 1344
  "void f()\n{\n  int *a;\n  delete a;\n}" always "void f()\n{\n  int *a;\n  delete a;\n}"
Line 1351
  56 always 56
  = always "1: void f ( )\n2: {\n3: int * a@1 ;\n4: delete a@1 ;\n5: }\n"
  "1: void f ( )\n2: {\n3: int * a@1 ;\n4: delete a@1 ;\n5: }\n" always "1: void f ( )\n2: {\n3: int * a@1 ;\n4: delete a@1 ;\n5: }\n"
Line 1357
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1357 always 1357
  expected always "1: void f ( )\n2: {\n3: int * a@1 ;\n4: delete a@1 ;\n5: }\n"
Line 1362
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1362 always 1362
  "void f();\nvoid f(){}\n" always "void f();\nvoid f(){}\n"
  "test.c" always "test.c"
Line 1366
  35 always 35
  = always "1: void f ( ) ;\n2: void f ( ) { }\n"
  "1: void f ( ) ;\n2: void f ( ) { }\n" always "1: void f ( ) ;\n2: void f ( ) { }\n"
Line 1369
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1369 always 1369
  expected always "1: void f ( ) ;\n2: void f ( ) { }\n"
Line 1373
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1373 always 1373
  "A f(3);\nA f2(true);\nA g();\nA e(int c);\n" always "A f(3);\nA f2(true);\nA g();\nA e(int c);\n"
  "test.c" always "test.c"
Line 1379
  73 always 73
  = always "1: A f@1 ( 3 ) ;\n2: A f2@2 ( true ) ;\n3: A g ( ) ;\n4: A e ( int c@3 ) ;\n"
  "1: A f@1 ( 3 ) ;\n2: A f2@2 ( true ) ;\n3: A g ( ) ;\n4: A e ( int c@3 ) ;\n" always "1: A f@1 ( 3 ) ;\n2: A f2@2 ( true ) ;\n3: A g ( ) ;\n4: A e ( int c@3 ) ;\n"
Line 1384
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1384 always 1384
  expected always "1: A f@1 ( 3 ) ;\n2: A f2@2 ( true ) ;\n3: A g ( ) ;\n4: A e ( int c@3 ) ;\n"
Line 1388
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1388 always 1388
  "void f1(int &p)\n{\n    p = 0;\n}\nvoid f2(std::string &str)\n{\n   str.clear();\n}\nvoid f3(const std::string &s)\n{\n    s.size();\n}" always "void f1(int &p)\n{\n    p = 0;\n}\nvoid f2(std::string &str)\n{\n   str.clear();\n}\nvoid f3(const std::string &s)\n{\n    s.size();\n}"
Line 1402
  193 always 193
  = always "1: void f1 ( int & p@1 )\n2: {\n3: p@1 = 0 ;\n4: }\n5: void f2 ( std :: string & str@2 )\n6: {\n7: str@2 . clear ( ) ;\n8: }\n9: void f3 ( const std :: string & s@3 )\n10: {\n11: s@3 . size ( ) ;\n12: }\n"
  "1: void f1 ( int & p@1 )\n2: {\n3: p@1 = 0 ;\n4: }\n5: void f2 ( std :: string & str@2 )\n6: {\n7: str@2 . clear ( ) ;\n8: }\n9: void f3 ( const std :: string & s@3 )\n10: {\n11: s@3 . size ( ) ;\n12: }\n" always "1: void f1 ( int & p@1 )\n2: {\n3: p@1 = 0 ;\n4: }\n5: void f2 ( std :: string & str@2 )\n6: {\n7: str@2 . clear ( ) ;\n8: }\n9: void f3 ( const std :: string & s@3 )\n10: {\n11: s@3 . size ( ) ;\n12: }\n"
Line 1415
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1415 always 1415
  expected always "1: void f1 ( int & p@1 )\n2: {\n3: p@1 = 0 ;\n4: }\n5: void f2 ( std :: string & str@2 )\n6: {\n7: str@2 . clear ( ) ;\n8: }\n9: void f3 ( const std :: string & s@3 )\n10: {\n11: s@3 . size ( ) ;\n12: }\n"
Line 1419
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1419 always 1419
  "void f(struct foobar);" always "void f(struct foobar);"
  "test.c" always "test.c"
Line 1420
  31 always 31
  = always "1: void f ( struct foobar ) ;\n"
  "1: void f ( struct foobar ) ;\n" always "1: void f ( struct foobar ) ;\n"
Line 1421
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1421 always 1421
  expected always "1: void f ( struct foobar ) ;\n"
Line 1425
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1425 always 1425
  "bool f(X x, int=3);" always "bool f(X x, int=3);"
  "test.cpp" always "test.cpp"
Line 1426
  33 always 33
  = always "1: bool f ( X x@1 , int = 3 ) ;\n"
  "1: bool f ( X x@1 , int = 3 ) ;\n" always "1: bool f ( X x@1 , int = 3 ) ;\n"
Line 1427
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1427 always 1427
  expected always "1: bool f ( X x@1 , int = 3 ) ;\n"
Line 1432
  17 always 17
  = always "x = sizeof(a*b);"
  "x = sizeof(a*b);" always "x = sizeof(a*b);"
Line 1433
  27 always 27
  = always "1: x = sizeof ( a * b ) ;\n"
  "1: x = sizeof ( a * b ) ;\n" always "1: x = sizeof ( a * b ) ;\n"
Line 1434
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1434 always 1434
  expected always "1: x = sizeof ( a * b ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1434 always 1434
  code always "x = sizeof(a*b);"
  "test.c" always "test.c"
Line 1438
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1438 always 1438
  "void f()\n{\n    std::vector<int> b;\n    std::vector<int> &a = b;\n    std::vector<int> *c = &b;\n}" always "void f()\n{\n    std::vector<int> b;\n    std::vector<int> &a = b;\n    std::vector<int> *c = &b;\n}"
Line 1446
  142 always 142
  = always "1: void f ( )\n2: {\n3: std :: vector < int > b@1 ;\n4: std :: vector < int > & a@2 = b@1 ;\n5: std :: vector < int > * c@3 ; c@3 = & b@1 ;\n6: }\n"
  "1: void f ( )\n2: {\n3: std :: vector < int > b@1 ;\n4: std :: vector < int > & a@2 = b@1 ;\n5: std :: vector < int > * c@3 ; c@3 = & b@1 ;\n6: }\n" always "1: void f ( )\n2: {\n3: std :: vector < int > b@1 ;\n4: std :: vector < int > & a@2 = b@1 ;\n5: std :: vector < int > * c@3 ; c@3 = & b@1 ;\n6: }\n"
Line 1453
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1453 always 1453
  expected always "1: void f ( )\n2: {\n3: std :: vector < int > b@1 ;\n4: std :: vector < int > & a@2 = b@1 ;\n5: std :: vector < int > * c@3 ; c@3 = & b@1 ;\n6: }\n"
Line 1458
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1458 always 1458
  "class Foo\n{\npublic:\n    std::string name1;\n    std::string name2;\n};" always "class Foo\n{\npublic:\n    std::string name1;\n    std::string name2;\n};"
Line 1466
  91 always 91
  = always "1: class Foo\n2: {\n3: public:\n4: std :: string name1@1 ;\n5: std :: string name2@2 ;\n6: } ;\n"
  "1: class Foo\n2: {\n3: public:\n4: std :: string name1@1 ;\n5: std :: string name2@2 ;\n6: } ;\n" always "1: class Foo\n2: {\n3: public:\n4: std :: string name1@1 ;\n5: std :: string name2@2 ;\n6: } ;\n"
Line 1473
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1473 always 1473
  expected always "1: class Foo\n2: {\n3: public:\n4: std :: string name1@1 ;\n5: std :: string name2@2 ;\n6: } ;\n"
Line 1477
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1477 always 1477
  "class foo\n{\npublic:\n    void do_something(const int x, const int y);\n    void bar();\n};\n\nvoid foo::bar()\n{\n    POINT pOutput = { 0 , 0 };\n    int x = pOutput.x;\n    int y = pOutput.y;\n}" always "class foo\n{\npublic:\n    void do_something(const int x, const int y);\n    void bar();\n};\n\nvoid foo::bar()\n{\n    POINT pOutput = { 0 , 0 };\n    int x = pOutput.x;\n    int y = pOutput.y;\n}"
Line 1492
  271 always 271
  = always "1: class foo\n2: {\n3: public:\n4: void do_something ( const int x@1 , const int y@2 ) ;\n5: void bar ( ) ;\n6: } ;\n7:\n8: void foo :: bar ( )\n9: {\n10: POINT pOutput@3 ; pOutput@3 = { 0 , 0 } ;\n11: int x@4 ; x@4 = pOutput@3 . x@5 ;\n12: int y@6 ; y@6 = pOutput@3 . y@7 ;\n13: }\n"
  "1: class foo\n2: {\n3: public:\n4: void do_something ( const int x@1 , const int y@2 ) ;\n5: void bar ( ) ;\n6: } ;\n7:\n8: void foo :: bar ( )\n9: {\n10: POINT pOutput@3 ; pOutput@3 = { 0 , 0 } ;\n11: int x@4 ; x@4 = pOutput@3 . x@5 ;\n12: int y@6 ; y@6 = pOutput@3 . y@7 ;\n13: }\n" always "1: class foo\n2: {\n3: public:\n4: void do_something ( const int x@1 , const int y@2 ) ;\n5: void bar ( ) ;\n6: } ;\n7:\n8: void foo :: bar ( )\n9: {\n10: POINT pOutput@3 ; pOutput@3 = { 0 , 0 } ;\n11: int x@4 ; x@4 = pOutput@3 . x@5 ;\n12: int y@6 ; y@6 = pOutput@3 . y@7 ;\n13: }\n"
Line 1506
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1506 always 1506
  expected always "1: class foo\n2: {\n3: public:\n4: void do_something ( const int x@1 , const int y@2 ) ;\n5: void bar ( ) ;\n6: } ;\n7:\n8: void foo :: bar ( )\n9: {\n10: POINT pOutput@3 ; pOutput@3 = { 0 , 0 } ;\n11: int x@4 ; x@4 = pOutput@3 . x@5 ;\n12: int y@6 ; y@6 = pOutput@3 . y@7 ;\n13: }\n"
Line 1511
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1511 always 1511
  "struct Foo {\n    int x;\n};\n\nstruct Bar {\n    Foo foo;\n    int x;\n    void f();\n};\n\nvoid Bar::f()\n{\n    foo.x = x;\n}" always "struct Foo {\n    int x;\n};\n\nstruct Bar {\n    Foo foo;\n    int x;\n    void f();\n};\n\nvoid Bar::f()\n{\n    foo.x = x;\n}"
Line 1526
  169 always 169
  = always "1: struct Foo {\n2: int x@1 ;\n3: } ;\n4:\n5: struct Bar {\n6: Foo foo@2 ;\n7: int x@3 ;\n8: void f ( ) ;\n9: } ;\n10:\n11: void Bar :: f ( )\n12: {\n13: foo@2 . x@4 = x@3 ;\n14: }\n"
  "1: struct Foo {\n2: int x@1 ;\n3: } ;\n4:\n5: struct Bar {\n6: Foo foo@2 ;\n7: int x@3 ;\n8: void f ( ) ;\n9: } ;\n10:\n11: void Bar :: f ( )\n12: {\n13: foo@2 . x@4 = x@3 ;\n14: }\n" always "1: struct Foo {\n2: int x@1 ;\n3: } ;\n4:\n5: struct Bar {\n6: Foo foo@2 ;\n7: int x@3 ;\n8: void f ( ) ;\n9: } ;\n10:\n11: void Bar :: f ( )\n12: {\n13: foo@2 . x@4 = x@3 ;\n14: }\n"
Line 1540
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1540 always 1540
  expected always "1: struct Foo {\n2: int x@1 ;\n3: } ;\n4:\n5: struct Bar {\n6: Foo foo@2 ;\n7: int x@3 ;\n8: void f ( ) ;\n9: } ;\n10:\n11: void Bar :: f ( )\n12: {\n13: foo@2 . x@4 = x@3 ;\n14: }\n"
Line 1544
  72 always 72
  = always "class Foo {\n    void blah() {\n        Bar x(*this);\n    }\n    int x;\n};"
  "class Foo {\n    void blah() {\n        Bar x(*this);\n    }\n    int x;\n};" always "class Foo {\n    void blah() {\n        Bar x(*this);\n    }\n    int x;\n};"
Line 1550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1550 always 1550
  "1: class Foo {\n2: void blah ( ) {\n3: Bar x@1 ( * this ) ;\n4: }\n5: int x@2 ;\n6: } ;\n" always "1: class Foo {\n2: void blah ( ) {\n3: Bar x@1 ( * this ) ;\n4: }\n5: int x@2 ;\n6: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1550 always 1550
  code always "class Foo {\n    void blah() {\n        Bar x(*this);\n    }\n    int x;\n};"
Line 1559
  32 always 32
  = always "class Foo {\npublic: class C;\n};"
  "class Foo {\npublic: class C;\n};" always "class Foo {\npublic: class C;\n};"
Line 1562
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1562 always 1562
  "1: class Foo {\n2: public: class C ;\n3: } ;\n" always "1: class Foo {\n2: public: class C ;\n3: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1562 always 1562
  code always "class Foo {\npublic: class C;\n};"
Line 1569
  39 always 39
  = always "struct Foo {\n    std::vector<::X> v;\n}"
  "struct Foo {\n    std::vector<::X> v;\n}" always "struct Foo {\n    std::vector<::X> v;\n}"
Line 1572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1572 always 1572
  "1: struct Foo {\n2: std :: vector < :: X > v@1 ;\n3: }\n" always "1: struct Foo {\n2: std :: vector < :: X > v@1 ;\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1572 always 1572
  code always "struct Foo {\n    std::vector<::X> v;\n}"
Line 1579
  105 always 105
  = always "class A {\n    void f(const char *str) const {\n        std::stringstream sst;\n        sst.str();\n    }\n};"
  "class A {\n    void f(const char *str) const {\n        std::stringstream sst;\n        sst.str();\n    }\n};" always "class A {\n    void f(const char *str) const {\n        std::stringstream sst;\n        sst.str();\n    }\n};"
Line 1585
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1585 always 1585
  "1: class A {\n2: void f ( const char * str@1 ) const {\n3: std :: stringstream sst@2 ;\n4: sst@2 . str ( ) ;\n5: }\n6: } ;\n" always "1: class A {\n2: void f ( const char * str@1 ) const {\n3: std :: stringstream sst@2 ;\n4: sst@2 . str ( ) ;\n5: }\n6: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1585 always 1585
  code always "class A {\n    void f(const char *str) const {\n        std::stringstream sst;\n        sst.str();\n    }\n};"
Line 1595
  73 always 73
  = always "class A {\n    void f() {\n        abc.a = 0;\n    }\n    struct ABC abc;\n};"
  "class A {\n    void f() {\n        abc.a = 0;\n    }\n    struct ABC abc;\n};" always "class A {\n    void f() {\n        abc.a = 0;\n    }\n    struct ABC abc;\n};"
Line 1601
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1601 always 1601
  "1: class A {\n2: void f ( ) {\n3: abc@1 . a@2 = 0 ;\n4: }\n5: struct ABC abc@1 ;\n6: } ;\n" always "1: class A {\n2: void f ( ) {\n3: abc@1 . a@2 = 0 ;\n4: }\n5: struct ABC abc@1 ;\n6: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1601 always 1601
  code always "class A {\n    void f() {\n        abc.a = 0;\n    }\n    struct ABC abc;\n};"
Line 1611
  50 always 50
  = always "class A {\n  UNKNOWN_MACRO(A)\nprivate:\n  int x;\n};"
  "class A {\n  UNKNOWN_MACRO(A)\nprivate:\n  int x;\n};" always "class A {\n  UNKNOWN_MACRO(A)\nprivate:\n  int x;\n};"
Line 1616
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1616 always 1616
  "1: class A {\n2: UNKNOWN_MACRO ( A )\n3: private:\n4: int x@1 ;\n5: } ;\n" always "1: class A {\n2: UNKNOWN_MACRO ( A )\n3: private:\n4: int x@1 ;\n5: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1616 always 1616
  code always "class A {\n  UNKNOWN_MACRO(A)\nprivate:\n  int x;\n};"
Line 1625
  89 always 89
  = always "class A {\n  int var;\npublic:\n  void setVar();\n};\nvoid A::setVar() {\n  this->var = var;\n}"
  "class A {\n  int var;\npublic:\n  void setVar();\n};\nvoid A::setVar() {\n  this->var = var;\n}" always "class A {\n  int var;\npublic:\n  void setVar();\n};\nvoid A::setVar() {\n  this->var = var;\n}"
Line 1633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1633 always 1633
  "1: class A {\n2: int var@1 ;\n3: public:\n4: void setVar ( ) ;\n5: } ;\n6: void A :: setVar ( ) {\n7: this . var@1 = var@1 ;\n8: }\n" always "1: class A {\n2: int var@1 ;\n3: public:\n4: void setVar ( ) ;\n5: } ;\n6: void A :: setVar ( ) {\n7: this . var@1 = var@1 ;\n8: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1633 always 1633
  code1 always "class A {\n  int var;\npublic:\n  void setVar();\n};\nvoid A::setVar() {\n  this->var = var;\n}"
Line 1643
  131 always 131
  = always "class Foo : public FooBase {\n    void Clone(FooBase& g);\n    short m_bar;\n};\nvoid Foo::Clone(FooBase& g) {\n    g->m_bar = m_bar;\n}"
  "class Foo : public FooBase {\n    void Clone(FooBase& g);\n    short m_bar;\n};\nvoid Foo::Clone(FooBase& g) {\n    g->m_bar = m_bar;\n}" always "class Foo : public FooBase {\n    void Clone(FooBase& g);\n    short m_bar;\n};\nvoid Foo::Clone(FooBase& g) {\n    g->m_bar = m_bar;\n}"
Line 1650
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1650 always 1650
  "1: class Foo : public FooBase {\n2: void Clone ( FooBase & g@1 ) ;\n3: short m_bar@2 ;\n4: } ;\n5: void Foo :: Clone ( FooBase & g@3 ) {\n6: g@3 . m_bar@4 = m_bar@2 ;\n7: }\n" always "1: class Foo : public FooBase {\n2: void Clone ( FooBase & g@1 ) ;\n3: short m_bar@2 ;\n4: } ;\n5: void Foo :: Clone ( FooBase & g@3 ) {\n6: g@3 . m_bar@4 = m_bar@2 ;\n7: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1650 always 1650
  code2 always "class Foo : public FooBase {\n    void Clone(FooBase& g);\n    short m_bar;\n};\nvoid Foo::Clone(FooBase& g) {\n    g->m_bar = m_bar;\n}"
Line 1661
  142 always 142
  = always "class Foo : public FooBase {\n    void Clone(FooBase& g);\n    short m_bar;\n};\nvoid Foo::Clone(FooBase& g) {\n    ((FooBase)g)->m_bar = m_bar;\n}"
  "class Foo : public FooBase {\n    void Clone(FooBase& g);\n    short m_bar;\n};\nvoid Foo::Clone(FooBase& g) {\n    ((FooBase)g)->m_bar = m_bar;\n}" always "class Foo : public FooBase {\n    void Clone(FooBase& g);\n    short m_bar;\n};\nvoid Foo::Clone(FooBase& g) {\n    ((FooBase)g)->m_bar = m_bar;\n}"
Line 1668
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1668 always 1668
  "1: class Foo : public FooBase {\n2: void Clone ( FooBase & g@1 ) ;\n3: short m_bar@2 ;\n4: } ;\n5: void Foo :: Clone ( FooBase & g@3 ) {\n6: ( ( FooBase ) g@3 ) . m_bar@4 = m_bar@2 ;\n7: }\n" always "1: class Foo : public FooBase {\n2: void Clone ( FooBase & g@1 ) ;\n3: short m_bar@2 ;\n4: } ;\n5: void Foo :: Clone ( FooBase & g@3 ) {\n6: ( ( FooBase ) g@3 ) . m_bar@4 = m_bar@2 ;\n7: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1668 always 1668
  code always "class Foo : public FooBase {\n    void Clone(FooBase& g);\n    short m_bar;\n};\nvoid Foo::Clone(FooBase& g) {\n    ((FooBase)g)->m_bar = m_bar;\n}"
Line 1679
  68 always 68
  = always "class Foo {\n    union { float a; int b; };\n    void f() { a=0; }\n};"
  "class Foo {\n    union { float a; int b; };\n    void f() { a=0; }\n};" always "class Foo {\n    union { float a; int b; };\n    void f() { a=0; }\n};"
Line 1683
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1683 always 1683
  "1: class Foo {\n2: union { float a@1 ; int b@2 ; } ;\n3: void f ( ) { a@1 = 0 ; }\n4: } ;\n" always "1: class Foo {\n2: union { float a@1 ; int b@2 ; } ;\n3: void f ( ) { a@1 = 0 ; }\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1683 always 1683
  code1 always "class Foo {\n    union { float a; int b; };\n    void f() { a=0; }\n};"
Line 1689
  68 always 68
  = always "class Foo {\n    void f() { a=0; }\n    union { float a; int b; };\n};"
  "class Foo {\n    void f() { a=0; }\n    union { float a; int b; };\n};" always "class Foo {\n    void f() { a=0; }\n    union { float a; int b; };\n};"
Line 1693
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1693 always 1693
  "1: class Foo {\n2: void f ( ) { a@1 = 0 ; }\n3: union { float a@1 ; int b@2 ; } ;\n4: } ;\n" always "1: class Foo {\n2: void f ( ) { a@1 = 0 ; }\n3: union { float a@1 ; int b@2 ; } ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1693 always 1693
  code2 always "class Foo {\n    void f() { a=0; }\n    union { float a; int b; };\n};"
Line 1699
  139 always 139
  = always "void f() {\n    union {\n        struct {\n            char a, b, c, d;\n        };\n        int abcd;\n    };\n    g(abcd);\n    h(a, b, c, d);\n}"
  "void f() {\n    union {\n        struct {\n            char a, b, c, d;\n        };\n        int abcd;\n    };\n    g(abcd);\n    h(a, b, c, d);\n}" always "void f() {\n    union {\n        struct {\n            char a, b, c, d;\n        };\n        int abcd;\n    };\n    g(abcd);\n    h(a, b, c, d);\n}"
Line 1709
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1709 always 1709
  "1: void f ( ) {\n2: union {\n3: struct {\n4: char a@1 ; char b@2 ; char c@3 ; char d@4 ;\n5: } ;\n6: int abcd@5 ;\n7: } ;\n8: g ( abcd@5 ) ;\n9: h ( a@1 , b@2 , c@3 , d@4 ) ;\n10: }\n" always "1: void f ( ) {\n2: union {\n3: struct {\n4: char a@1 ; char b@2 ; char c@3 ; char d@4 ;\n5: } ;\n6: int abcd@5 ;\n7: } ;\n8: g ( abcd@5 ) ;\n9: h ( a@1 , b@2 , c@3 , d@4 ) ;\n10: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1709 always 1709
  code3 always "void f() {\n    union {\n        struct {\n            char a, b, c, d;\n        };\n        int abcd;\n    };\n    g(abcd);\n    h(a, b, c, d);\n}"
Line 1722
  83 always 83
  = always "class Foo {\n    void f(float a) { this->a = a; }\n    union { float a; int b; };\n};"
  "class Foo {\n    void f(float a) { this->a = a; }\n    union { float a; int b; };\n};" always "class Foo {\n    void f(float a) { this->a = a; }\n    union { float a; int b; };\n};"
Line 1726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1726 always 1726
  "1: class Foo {\n2: void f ( float a@1 ) { this . a@2 = a@1 ; }\n3: union { float a@2 ; int b@3 ; } ;\n4: } ;\n" always "1: class Foo {\n2: void f ( float a@1 ) { this . a@2 = a@1 ; }\n3: union { float a@2 ; int b@3 ; } ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1726 always 1726
  code4 always "class Foo {\n    void f(float a) { this->a = a; }\n    union { float a; int b; };\n};"
Line 1734
  42 always 42
  = always "class Foo {\nprivate:\n    void f(void);\n};"
  "class Foo {\nprivate:\n    void f(void);\n};" always "class Foo {\nprivate:\n    void f(void);\n};"
Line 1738
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1738 always 1738
  "1: class Foo {\n2: private:\n3: void f ( ) ;\n4: } ;\n" always "1: class Foo {\n2: private:\n3: void f ( ) ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1738 always 1738
  code always "class Foo {\nprivate:\n    void f(void);\n};"
Line 1746
  29 always 29
  = always "struct a { char typename; };"
  "struct a { char typename; };" always "struct a { char typename; };"
Line 1747
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1747 always 1747
  "1: struct a { char typename@1 ; } ;\n" always "1: struct a { char typename@1 ; } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1747 always 1747
  code1 always "struct a { char typename; };"
  "test.c" always "test.c"
Line 1749
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1749 always 1749
  "1: struct a { char typename ; } ;\n" always "1: struct a { char typename ; } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1749 always 1749
  code1 always "struct a { char typename; };"
  "test.cpp" always "test.cpp"
Line 1752
  32 always 32
  = always "struct a { char typename[2]; };"
  "struct a { char typename[2]; };" always "struct a { char typename[2]; };"
Line 1753
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1753 always 1753
  "1: struct a { char typename@1 [ 2 ] ; } ;\n" always "1: struct a { char typename@1 [ 2 ] ; } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1753 always 1753
  code2 always "struct a { char typename[2]; };"
  "test.c" always "test.c"
Line 1755
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1755 always 1755
  "1: struct a { char typename [ 2 ] ; } ;\n" always "1: struct a { char typename [ 2 ] ; } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1755 always 1755
  code2 always "struct a { char typename[2]; };"
  "test.cpp" always "test.cpp"
Line 1760
  140 always 140
  = always "class Tokenizer { TokenList list; };\n\nvoid Tokenizer::f() {\n  std::list<int> x;\n  list.do_something();\n  Tokenizer::list.do_something();\n}\n"
  "class Tokenizer { TokenList list; };\n\nvoid Tokenizer::f() {\n  std::list<int> x;\n  list.do_something();\n  Tokenizer::list.do_something();\n}\n" always "class Tokenizer { TokenList list; };\n\nvoid Tokenizer::f() {\n  std::list<int> x;\n  list.do_something();\n  Tokenizer::list.do_something();\n}\n"
Line 1767
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1767 always 1767
  "1: class Tokenizer { TokenList list@1 ; } ;\n2:\n3: void Tokenizer :: f ( ) {\n4: std :: list < int > x@2 ;\n5: list@1 . do_something ( ) ;\n6: Tokenizer :: list@1 . do_something ( ) ;\n7: }\n" always "1: class Tokenizer { TokenList list@1 ; } ;\n2:\n3: void Tokenizer :: f ( ) {\n4: std :: list < int > x@2 ;\n5: list@1 . do_something ( ) ;\n6: Tokenizer :: list@1 . do_something ( ) ;\n7: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1767 always 1767
  code always "class Tokenizer { TokenList list; };\n\nvoid Tokenizer::f() {\n  std::list<int> x;\n  list.do_something();\n  Tokenizer::list.do_something();\n}\n"
  "test.cpp" always "test.cpp"
Line 1777
  59 always 59
  = always "class Fred {\n  void x(int a) const;\n  void y() { a=0; }\n}\n"
  "class Fred {\n  void x(int a) const;\n  void y() { a=0; }\n}\n" always "class Fred {\n  void x(int a) const;\n  void y() { a=0; }\n}\n"
Line 1781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1781 always 1781
  "1: class Fred {\n2: void x ( int a@1 ) const ;\n3: void y ( ) { a = 0 ; }\n4: }\n" always "1: class Fred {\n2: void x ( int a@1 ) const ;\n3: void y ( ) { a = 0 ; }\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1781 always 1781
  code always "class Fred {\n  void x(int a) const;\n  void y() { a=0; }\n}\n"
  "test.cpp" always "test.cpp"
Line 1789
  65 always 65
  = always "class Fred {\n    int x;\n    void foo(int x) { this->x = x; }\n};\n"
  "class Fred {\n    int x;\n    void foo(int x) { this->x = x; }\n};\n" always "class Fred {\n    int x;\n    void foo(int x) { this->x = x; }\n};\n"
Line 1793
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1793 always 1793
  "1: class Fred {\n2: int x@1 ;\n3: void foo ( int x@2 ) { this . x@1 = x@2 ; }\n4: } ;\n" always "1: class Fred {\n2: int x@1 ;\n3: void foo ( int x@2 ) { this . x@1 = x@2 ; }\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1793 always 1793
  code always "class Fred {\n    int x;\n    void foo(int x) { this->x = x; }\n};\n"
  "test.cpp" always "test.cpp"
Line 1799
  65 always 65
  = always "class Fred {\n    void foo(int x) { this->x = x; }\n    int x;\n};\n"
  "class Fred {\n    void foo(int x) { this->x = x; }\n    int x;\n};\n" always "class Fred {\n    void foo(int x) { this->x = x; }\n    int x;\n};\n"
Line 1803
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1803 always 1803
  "1: class Fred {\n2: void foo ( int x@1 ) { this . x@2 = x@1 ; }\n3: int x@2 ;\n4: } ;\n" always "1: class Fred {\n2: void foo ( int x@1 ) { this . x@2 = x@1 ; }\n3: int x@2 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1803 always 1803
  code always "class Fred {\n    void foo(int x) { this->x = x; }\n    int x;\n};\n"
  "test.cpp" always "test.cpp"
Line 1809
  67 always 67
  = always "class Fred {\n    void foo(int x) { (*this).x = x; }\n    int x;\n};\n"
  "class Fred {\n    void foo(int x) { (*this).x = x; }\n    int x;\n};\n" always "class Fred {\n    void foo(int x) { (*this).x = x; }\n    int x;\n};\n"
Line 1813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1813 always 1813
  "1: class Fred {\n2: void foo ( int x@1 ) { ( * this ) . x@2 = x@1 ; }\n3: int x@2 ;\n4: } ;\n" always "1: class Fred {\n2: void foo ( int x@1 ) { ( * this ) . x@2 = x@1 ; }\n3: int x@2 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1813 always 1813
  code always "class Fred {\n    void foo(int x) { (*this).x = x; }\n    int x;\n};\n"
  "test.cpp" always "test.cpp"
Line 1821
  369 always 369
  = always "class Fred {\n    int method_with_internal(X&);\n    int method_with_internal(X*);\n    int method_with_internal(int&);\n    int method_with_internal(A* b, X&);\n    int method_with_internal(X&, A* b);\n    int method_with_internal(const B &, int);\n    void Set(BAR);\n    FOO Set(BAR);\n    int method_with_class(B<B> b);\n    bool function(std::map<int, int, MYless> & m);\n};"
  "class Fred {\n    int method_with_internal(X&);\n    int method_with_internal(X*);\n    int method_with_internal(int&);\n    int method_with_internal(A* b, X&);\n    int method_with_internal(X&, A* b);\n    int method_with_internal(const B &, int);\n    void Set(BAR);\n    FOO Set(BAR);\n    int method_with_class(B<B> b);\n    bool function(std::map<int, int, MYless> & m);\n};" always "class Fred {\n    int method_with_internal(X&);\n    int method_with_internal(X*);\n    int method_with_internal(int&);\n    int method_with_internal(A* b, X&);\n    int method_with_internal(X&, A* b);\n    int method_with_internal(const B &, int);\n    void Set(BAR);\n    FOO Set(BAR);\n    int method_with_class(B<B> b);\n    bool function(std::map<int, int, MYless> & m);\n};"
Line 1833
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1833 always 1833
  "1: class Fred {\n2: int method_with_internal ( X & ) ;\n3: int method_with_internal ( X * ) ;\n4: int method_with_internal ( int & ) ;\n5: int method_with_internal ( A * b@1 , X & ) ;\n6: int method_with_internal ( X & , A * b@2 ) ;\n7: int method_with_internal ( const B & , int ) ;\n8: void Set ( BAR ) ;\n9: FOO Set ( BAR ) ;\n10: int method_with_class ( B < B > b@3 ) ;\n11: bool function ( std :: map < int , int , MYless > & m@4 ) ;\n12: } ;\n" always "1: class Fred {\n2: int method_with_internal ( X & ) ;\n3: int method_with_internal ( X * ) ;\n4: int method_with_internal ( int & ) ;\n5: int method_with_internal ( A * b@1 , X & ) ;\n6: int method_with_internal ( X & , A * b@2 ) ;\n7: int method_with_internal ( const B & , int ) ;\n8: void Set ( BAR ) ;\n9: FOO Set ( BAR ) ;\n10: int method_with_class ( B < B > b@3 ) ;\n11: bool function ( std :: map < int , int , MYless > & m@4 ) ;\n12: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1833 always 1833
  code1 always "class Fred {\n    int method_with_internal(X&);\n    int method_with_internal(X*);\n    int method_with_internal(int&);\n    int method_with_internal(A* b, X&);\n    int method_with_internal(X&, A* b);\n    int method_with_internal(const B &, int);\n    void Set(BAR);\n    FOO Set(BAR);\n    int method_with_class(B<B> b);\n    bool function(std::map<int, int, MYless> & m);\n};"
  "test.cpp" always "test.cpp"
Line 1846
  110 always 110
  = always "int i;\nSomeType someVar1(i, i);\nSomeType someVar2(j, j);\nSomeType someVar3(j, 1);\nSomeType someVar4(new bar);"
  "int i;\nSomeType someVar1(i, i);\nSomeType someVar2(j, j);\nSomeType someVar3(j, 1);\nSomeType someVar4(new bar);" always "int i;\nSomeType someVar1(i, i);\nSomeType someVar2(j, j);\nSomeType someVar3(j, 1);\nSomeType someVar4(new bar);"
Line 1851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1851 always 1851
  "1: int i@1 ;\n2: SomeType someVar1@2 ( i@1 , i@1 ) ;\n3: SomeType someVar2 ( j , j ) ;\n4: SomeType someVar3@3 ( j , 1 ) ;\n5: SomeType someVar4@4 ( new bar ) ;\n" always "1: int i@1 ;\n2: SomeType someVar1@2 ( i@1 , i@1 ) ;\n3: SomeType someVar2 ( j , j ) ;\n4: SomeType someVar3@3 ( j , 1 ) ;\n5: SomeType someVar4@4 ( new bar ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1851 always 1851
  code2 always "int i;\nSomeType someVar1(i, i);\nSomeType someVar2(j, j);\nSomeType someVar3(j, 1);\nSomeType someVar4(new bar);"
  "test.cpp" always "test.cpp"
Line 1859
  87 always 87
  = always "class A {\n    class B;\n};\nclass A::B {\n    B();\n    int* i;\n};\nA::B::B() :\n    i(0)\n{}"
  "class A {\n    class B;\n};\nclass A::B {\n    B();\n    int* i;\n};\nA::B::B() :\n    i(0)\n{}" always "class A {\n    class B;\n};\nclass A::B {\n    B();\n    int* i;\n};\nA::B::B() :\n    i(0)\n{}"
Line 1869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1869 always 1869
  "1: class A {\n2: class B ;\n3: } ;\n4: class A :: B {\n5: B ( ) ;\n6: int * i@1 ;\n7: } ;\n8: A :: B :: B ( ) :\n9: i@1 ( 0 )\n10: { }\n" always "1: class A {\n2: class B ;\n3: } ;\n4: class A :: B {\n5: B ( ) ;\n6: int * i@1 ;\n7: } ;\n8: A :: B :: B ( ) :\n9: i@1 ( 0 )\n10: { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1869 always 1869
  code always "class A {\n    class B;\n};\nclass A::B {\n    B();\n    int* i;\n};\nA::B::B() :\n    i(0)\n{}"
  "test.cpp" always "test.cpp"
Line 1882
  79 always 79
  = always "class Fred {\n    char *str1;\n    ~Fred();\n};\nFred::~Fred() {\n    free(str1);\n}"
  "class Fred {\n    char *str1;\n    ~Fred();\n};\nFred::~Fred() {\n    free(str1);\n}" always "class Fred {\n    char *str1;\n    ~Fred();\n};\nFred::~Fred() {\n    free(str1);\n}"
Line 1889
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1889 always 1889
  "1: class Fred {\n2: char * str1@1 ;\n3: ~ Fred ( ) ;\n4: } ;\n5: Fred :: ~ Fred ( ) {\n6: free ( str1@1 ) ;\n7: }\n" always "1: class Fred {\n2: char * str1@1 ;\n3: ~ Fred ( ) ;\n4: } ;\n5: Fred :: ~ Fred ( ) {\n6: free ( str1@1 ) ;\n7: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1889 always 1889
  code always "class Fred {\n    char *str1;\n    ~Fred();\n};\nFred::~Fred() {\n    free(str1);\n}"
  "test.cpp" always "test.cpp"
Line 1899
  152 always 152
  = always "template<class C> class cacheEntry {\nprotected:\n    int m_key;\npublic:\n    cacheEntry();\n};\n\ntemplate<class C> cacheEntry<C>::cacheEntry() : m_key() {}"
  "template<class C> class cacheEntry {\nprotected:\n    int m_key;\npublic:\n    cacheEntry();\n};\n\ntemplate<class C> cacheEntry<C>::cacheEntry() : m_key() {}" always "template<class C> class cacheEntry {\nprotected:\n    int m_key;\npublic:\n    cacheEntry();\n};\n\ntemplate<class C> cacheEntry<C>::cacheEntry() : m_key() {}"
Line 1908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1908 always 1908
  "1: template < class C > class cacheEntry {\n2: protected:\n3: int m_key@1 ;\n4: public:\n5: cacheEntry ( ) ;\n6: } ;\n7:\n8: template < class C > cacheEntry < C > :: cacheEntry ( ) : m_key@1 ( ) { }\n" always "1: template < class C > class cacheEntry {\n2: protected:\n3: int m_key@1 ;\n4: public:\n5: cacheEntry ( ) ;\n6: } ;\n7:\n8: template < class C > cacheEntry < C > :: cacheEntry ( ) : m_key@1 ( ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1908 always 1908
  code always "template<class C> class cacheEntry {\nprotected:\n    int m_key;\npublic:\n    cacheEntry();\n};\n\ntemplate<class C> cacheEntry<C>::cacheEntry() : m_key() {}"
  "test.cpp" always "test.cpp"
Line 1919
  134 always 134
  = always "template <typename t1,typename t2>\nclass A::B {\n    B();\n    int x;\n};\n\ntemplate <typename t1,typename t2>\nA::B<t1,t2>::B() : x(9) {}"
  "template <typename t1,typename t2>\nclass A::B {\n    B();\n    int x;\n};\n\ntemplate <typename t1,typename t2>\nA::B<t1,t2>::B() : x(9) {}" always "template <typename t1,typename t2>\nclass A::B {\n    B();\n    int x;\n};\n\ntemplate <typename t1,typename t2>\nA::B<t1,t2>::B() : x(9) {}"
Line 1928
  184 always 184
  = always "1: template < typename t1 , typename t2 >\n2: class A :: B {\n3: B ( ) ;\n4: int x@1 ;\n5: } ;\n6:\n7: template < typename t1 , typename t2 >\n8: A :: B < t1 , t2 > :: B ( ) : x@1 ( 9 ) { }\n"
  "1: template < typename t1 , typename t2 >\n2: class A :: B {\n3: B ( ) ;\n4: int x@1 ;\n5: } ;\n6:\n7: template < typename t1 , typename t2 >\n8: A :: B < t1 , t2 > :: B ( ) : x@1 ( 9 ) { }\n" always "1: template < typename t1 , typename t2 >\n2: class A :: B {\n3: B ( ) ;\n4: int x@1 ;\n5: } ;\n6:\n7: template < typename t1 , typename t2 >\n8: A :: B < t1 , t2 > :: B ( ) : x@1 ( 9 ) { }\n"
Line 1937
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1937 always 1937
  expected always "1: template < typename t1 , typename t2 >\n2: class A :: B {\n3: B ( ) ;\n4: int x@1 ;\n5: } ;\n6:\n7: template < typename t1 , typename t2 >\n8: A :: B < t1 , t2 > :: B ( ) : x@1 ( 9 ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1937 always 1937
  code always "template <typename t1,typename t2>\nclass A::B {\n    B();\n    int x;\n};\n\ntemplate <typename t1,typename t2>\nA::B<t1,t2>::B() : x(9) {}"
  "test.cpp" always "test.cpp"
Line 1941
  225 always 225
  = always "struct data {};\n    struct S {\n    std::vector<data> std;\n    void f();\n};\nvoid S::f() {\n    std::vector<data>::const_iterator end = std.end();\n    for (std::vector<data>::const_iterator i = std.begin(); i != end; ++i) {}\n}\n"
  "struct data {};\n    struct S {\n    std::vector<data> std;\n    void f();\n};\nvoid S::f() {\n    std::vector<data>::const_iterator end = std.end();\n    for (std::vector<data>::const_iterator i = std.begin(); i != end; ++i) {}\n}\n" always "struct data {};\n    struct S {\n    std::vector<data> std;\n    void f();\n};\nvoid S::f() {\n    std::vector<data>::const_iterator end = std.end();\n    for (std::vector<data>::const_iterator i = std.begin(); i != end; ++i) {}\n}\n"
Line 1951
  301 always 301
  = always "1: struct data { } ;\n2: struct S {\n3: std :: vector < data > std@1 ;\n4: void f ( ) ;\n5: } ;\n6: void S :: f ( ) {\n7: std :: vector < data > :: const_iterator end@2 ; end@2 = std@1 . end ( ) ;\n8: for ( std :: vector < data > :: const_iterator i@3 = std@1 . begin ( ) ; i@3 != end@2 ; ++ i@3 ) { }\n9: }\n"
  "1: struct data { } ;\n2: struct S {\n3: std :: vector < data > std@1 ;\n4: void f ( ) ;\n5: } ;\n6: void S :: f ( ) {\n7: std :: vector < data > :: const_iterator end@2 ; end@2 = std@1 . end ( ) ;\n8: for ( std :: vector < data > :: const_iterator i@3 = std@1 . begin ( ) ; i@3 != end@2 ; ++ i@3 ) { }\n9: }\n" always "1: struct data { } ;\n2: struct S {\n3: std :: vector < data > std@1 ;\n4: void f ( ) ;\n5: } ;\n6: void S :: f ( ) {\n7: std :: vector < data > :: const_iterator end@2 ; end@2 = std@1 . end ( ) ;\n8: for ( std :: vector < data > :: const_iterator i@3 = std@1 . begin ( ) ; i@3 != end@2 ; ++ i@3 ) { }\n9: }\n"
Line 1961
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1961 always 1961
  expected always "1: struct data { } ;\n2: struct S {\n3: std :: vector < data > std@1 ;\n4: void f ( ) ;\n5: } ;\n6: void S :: f ( ) {\n7: std :: vector < data > :: const_iterator end@2 ; end@2 = std@1 . end ( ) ;\n8: for ( std :: vector < data > :: const_iterator i@3 = std@1 . begin ( ) ; i@3 != end@2 ; ++ i@3 ) { }\n9: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1961 always 1961
  code always "struct data {};\n    struct S {\n    std::vector<data> std;\n    void f();\n};\nvoid S::f() {\n    std::vector<data>::const_iterator end = std.end();\n    for (std::vector<data>::const_iterator i = std.begin(); i != end; ++i) {}\n}\n"
  "test.cpp" always "test.cpp"
Line 1965
  97 always 97
  = always "namespace Blah {\n  struct foo { int x;};\n  struct bar {\n    int x;\n    union { char y; };\n  };\n}"
  "namespace Blah {\n  struct foo { int x;};\n  struct bar {\n    int x;\n    union { char y; };\n  };\n}" always "namespace Blah {\n  struct foo { int x;};\n  struct bar {\n    int x;\n    union { char y; };\n  };\n}"
Line 1972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1972 always 1972
  "1: namespace Blah {\n2: struct foo { int x@1 ; } ;\n3: struct bar {\n4: int x@2 ;\n5: union { char y@3 ; } ;\n6: } ;\n7: }\n" always "1: namespace Blah {\n2: struct foo { int x@1 ; } ;\n3: struct bar {\n4: int x@2 ;\n5: union { char y@3 ; } ;\n6: } ;\n7: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1972 always 1972
  code always "namespace Blah {\n  struct foo { int x;};\n  struct bar {\n    int x;\n    union { char y; };\n  };\n}"
  "test.cpp" always "test.cpp"
Line 1982
  117 always 117
  = always "namespace Ui {\n    class C { int X; };\n}\n\nclass C {\n   void dostuff();\n   int X;\n};\n\nvoid C::dostuff() {\n   X = 0;\n}"
  "namespace Ui {\n    class C { int X; };\n}\n\nclass C {\n   void dostuff();\n   int X;\n};\n\nvoid C::dostuff() {\n   X = 0;\n}" always "namespace Ui {\n    class C { int X; };\n}\n\nclass C {\n   void dostuff();\n   int X;\n};\n\nvoid C::dostuff() {\n   X = 0;\n}"
Line 1995
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1995 always 1995
  code always "namespace Ui {\n    class C { int X; };\n}\n\nclass C {\n   void dostuff();\n   int X;\n};\n\nvoid C::dostuff() {\n   X = 0;\n}"
  "test.cpp" always "test.cpp"
Line 1997
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  1997 always 1997
  ( always !<=-1
  "X@2 = 0" always "X@2 = 0"
  != always {!<=-1,!>=2}
Line 2001
  lineNumber possible {5@125,11@126}
Line 2002
  pos1 always !<=-1
  = always !<=-1
  ( always !<=-1
  '\n' always 10
  ": " always ": "
Line 2003
  pos1 always !<=-1
  == always {!<=-1,!>=2}
Line 2004
  "" always ""
Line 2005
  pos2 always !<=-1
  = always !<=-1
  ( always !<=-1
  '\n' always 10
  pos1 always !<=-1
  + always !<=0
  1 always 1
Line 2006
  pos2 always !<=-1
  == always {!<=-1,!>=2}
Line 2007
  "" always ""
Line 2008
  pos1 always !<=-1
  + always !<=0
  1 always 1
  pos2 always !<=-1
  - always !<=-1
  pos1 always !<=-1
  - always !<=-1
  1 always 1
Line 2012
  151 always 151
  = always "namespace foo {\nstruct Bar {\n  explicit Bar(int type);\n  void f();\n  int type;\n};\n\nBar::Bar(int type) : type(type) {}\n\nvoid Bar::f() {\n  type = 0;\n}\n}"
  "namespace foo {\nstruct Bar {\n  explicit Bar(int type);\n  void f();\n  int type;\n};\n\nBar::Bar(int type) : type(type) {}\n\nvoid Bar::f() {\n  type = 0;\n}\n}" always "namespace foo {\nstruct Bar {\n  explicit Bar(int type);\n  void f();\n  int type;\n};\n\nBar::Bar(int type) : type(type) {}\n\nvoid Bar::f() {\n  type = 0;\n}\n}"
Line 2026
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2026 always 2026
  code always "namespace foo {\nstruct Bar {\n  explicit Bar(int type);\n  void f();\n  int type;\n};\n\nBar::Bar(int type) : type(type) {}\n\nvoid Bar::f() {\n  type = 0;\n}\n}"
  "test.cpp" always "test.cpp"
Line 2028
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2028 always 2028
  "5: int type@2 ;" always "5: int type@2 ;"
  5 always 5
Line 2029
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2029 always 2029
  "11: type@2 = 0 ;" always "11: type@2 = 0 ;"
  11 always 11
Line 2033
  134 always 134
  = always "namespace X {\n  struct foo { int x;};\n  struct bar: public foo {\n    void dostuff();\n  };\n  void bar::dostuff() { int x2 = x * 2; }\n}"
  "namespace X {\n  struct foo { int x;};\n  struct bar: public foo {\n    void dostuff();\n  };\n  void bar::dostuff() { int x2 = x * 2; }\n}" always "namespace X {\n  struct foo { int x;};\n  struct bar: public foo {\n    void dostuff();\n  };\n  void bar::dostuff() { int x2 = x * 2; }\n}"
Line 2040
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2040 always 2040
  "1: namespace X {\n2: struct foo { int x@1 ; } ;\n3: struct bar : public foo {\n4: void dostuff ( ) ;\n5: } ;\n6: void bar :: dostuff ( ) { int x2@2 ; x2@2 = x@1 * 2 ; }\n7: }\n" always "1: namespace X {\n2: struct foo { int x@1 ; } ;\n3: struct bar : public foo {\n4: void dostuff ( ) ;\n5: } ;\n6: void bar :: dostuff ( ) { int x2@2 ; x2@2 = x@1 * 2 ; }\n7: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2040 always 2040
  code always "namespace X {\n  struct foo { int x;};\n  struct bar: public foo {\n    void dostuff();\n  };\n  void bar::dostuff() { int x2 = x * 2; }\n}"
  "test.cpp" always "test.cpp"
Line 2050
  162 always 162
  = always "namespace X {\n  struct foo { int x;};\n  namespace Y {\n    struct bar: public foo {\n      void dostuff();\n    };\n    void bar::dostuff() { int x2 = x * 2; }\n  }\n}"
  "namespace X {\n  struct foo { int x;};\n  namespace Y {\n    struct bar: public foo {\n      void dostuff();\n    };\n    void bar::dostuff() { int x2 = x * 2; }\n  }\n}" always "namespace X {\n  struct foo { int x;};\n  namespace Y {\n    struct bar: public foo {\n      void dostuff();\n    };\n    void bar::dostuff() { int x2 = x * 2; }\n  }\n}"
Line 2059
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2059 always 2059
  "1: namespace X {\n2: struct foo { int x@1 ; } ;\n3: namespace Y {\n4: struct bar : public foo {\n5: void dostuff ( ) ;\n6: } ;\n7: void bar :: dostuff ( ) { int x2@2 ; x2@2 = x@1 * 2 ; }\n8: }\n9: }\n" always "1: namespace X {\n2: struct foo { int x@1 ; } ;\n3: namespace Y {\n4: struct bar : public foo {\n5: void dostuff ( ) ;\n6: } ;\n7: void bar :: dostuff ( ) { int x2@2 ; x2@2 = x@1 * 2 ; }\n8: }\n9: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2059 always 2059
  code always "namespace X {\n  struct foo { int x;};\n  namespace Y {\n    struct bar: public foo {\n      void dostuff();\n    };\n    void bar::dostuff() { int x2 = x * 2; }\n  }\n}"
  "test.cpp" always "test.cpp"
Line 2071
  38 always 38
  = always "class A {\n  A() : x(0) {}\n  int x;\n};"
  "class A {\n  A() : x(0) {}\n  int x;\n};" always "class A {\n  A() : x(0) {}\n  int x;\n};"
Line 2075
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2075 always 2075
  "1: class A {\n2: A ( ) : x@1 ( 0 ) { }\n3: int x@1 ;\n4: } ;\n" always "1: class A {\n2: A ( ) : x@1 ( 0 ) { }\n3: int x@1 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2075 always 2075
  code1 always "class A {\n  A() : x(0) {}\n  int x;\n};"
Line 2081
  43 always 43
  = always "class A {\n  A(int x) : x(x) {}\n  int x;\n};"
  "class A {\n  A(int x) : x(x) {}\n  int x;\n};" always "class A {\n  A(int x) : x(x) {}\n  int x;\n};"
Line 2085
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2085 always 2085
  "1: class A {\n2: A ( int x@1 ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n" always "1: class A {\n2: A ( int x@1 ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2085 always 2085
  code2 always "class A {\n  A(int x) : x(x) {}\n  int x;\n};"
Line 2091
  56 always 56
  = always "class A {\n  A(int x);\n  int x;\n};\nA::A(int x) : x(x) {}"
  "class A {\n  A(int x);\n  int x;\n};\nA::A(int x) : x(x) {}" always "class A {\n  A(int x);\n  int x;\n};\nA::A(int x) : x(x) {}"
Line 2096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2096 always 2096
  "1: class A {\n2: A ( int x@1 ) ;\n3: int x@2 ;\n4: } ;\n5: A :: A ( int x@3 ) : x@2 ( x@3 ) { }\n" always "1: class A {\n2: A ( int x@1 ) ;\n3: int x@2 ;\n4: } ;\n5: A :: A ( int x@3 ) : x@2 ( x@3 ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2096 always 2096
  code3 always "class A {\n  A(int x);\n  int x;\n};\nA::A(int x) : x(x) {}"
Line 2103
  45 always 45
  = always "struct A {\n  int x;\n  A(int x) : x(x) {}\n};\n"
  "struct A {\n  int x;\n  A(int x) : x(x) {}\n};\n" always "struct A {\n  int x;\n  A(int x) : x(x) {}\n};\n"
Line 2107
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2107 always 2107
  "1: struct A {\n2: int x@1 ;\n3: A ( int x@2 ) : x@1 ( x@2 ) { }\n4: } ;\n" always "1: struct A {\n2: int x@1 ;\n3: A ( int x@2 ) : x@1 ( x@2 ) { }\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2107 always 2107
  code4 always "struct A {\n  int x;\n  A(int x) : x(x) {}\n};\n"
Line 2113
  52 always 52
  = always "class A {\n  A(int x) noexcept : x(x) {}\n  int x;\n};"
  "class A {\n  A(int x) noexcept : x(x) {}\n  int x;\n};" always "class A {\n  A(int x) noexcept : x(x) {}\n  int x;\n};"
Line 2117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2117 always 2117
  "1: class A {\n2: A ( int x@1 ) noexcept ( true ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n" always "1: class A {\n2: A ( int x@1 ) noexcept ( true ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2117 always 2117
  code5 always "class A {\n  A(int x) noexcept : x(x) {}\n  int x;\n};"
Line 2123
  58 always 58
  = always "class A {\n  A(int x) noexcept(true) : x(x) {}\n  int x;\n};"
  "class A {\n  A(int x) noexcept(true) : x(x) {}\n  int x;\n};" always "class A {\n  A(int x) noexcept(true) : x(x) {}\n  int x;\n};"
Line 2127
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2127 always 2127
  "1: class A {\n2: A ( int x@1 ) noexcept ( true ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n" always "1: class A {\n2: A ( int x@1 ) noexcept ( true ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2127 always 2127
  code6 always "class A {\n  A(int x) noexcept(true) : x(x) {}\n  int x;\n};"
Line 2133
  59 always 59
  = always "class A {\n  A(int x) noexcept(false) : x(x) {}\n  int x;\n};"
  "class A {\n  A(int x) noexcept(false) : x(x) {}\n  int x;\n};" always "class A {\n  A(int x) noexcept(false) : x(x) {}\n  int x;\n};"
Line 2137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2137 always 2137
  "1: class A {\n2: A ( int x@1 ) noexcept ( false ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n" always "1: class A {\n2: A ( int x@1 ) noexcept ( false ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2137 always 2137
  code7 always "class A {\n  A(int x) noexcept(false) : x(x) {}\n  int x;\n};"
Line 2143
  78 always 78
  = always "class Foo : public Bar {\n  explicit Foo(int i) : Bar(mi = i) { }\n  int mi;\n};"
  "class Foo : public Bar {\n  explicit Foo(int i) : Bar(mi = i) { }\n  int mi;\n};" always "class Foo : public Bar {\n  explicit Foo(int i) : Bar(mi = i) { }\n  int mi;\n};"
Line 2147
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2147 always 2147
  "1: class Foo : public Bar {\n2: explicit Foo ( int i@1 ) : Bar ( mi@2 = i@1 ) { }\n3: int mi@2 ;\n4: } ;\n" always "1: class Foo : public Bar {\n2: explicit Foo ( int i@1 ) : Bar ( mi@2 = i@1 ) { }\n3: int mi@2 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2147 always 2147
  code8 always "class Foo : public Bar {\n  explicit Foo(int i) : Bar(mi = i) { }\n  int mi;\n};"
Line 2154
  56 always 56
  = always "class A {\n  A(int x) : y(a?0:1), x(x) {}\n  int x, y;\n};"
  "class A {\n  A(int x) : y(a?0:1), x(x) {}\n  int x, y;\n};" always "class A {\n  A(int x) : y(a?0:1), x(x) {}\n  int x, y;\n};"
Line 2158
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2158 always 2158
  "1: class A {\n2: A ( int x@1 ) : y@3 ( a ? 0 : 1 ) , x@2 ( x@1 ) { }\n3: int x@2 ; int y@3 ;\n4: } ;\n" always "1: class A {\n2: A ( int x@1 ) : y@3 ( a ? 0 : 1 ) , x@2 ( x@1 ) { }\n3: int x@2 ; int y@3 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2158 always 2158
  code9 always "class A {\n  A(int x) : y(a?0:1), x(x) {}\n  int x, y;\n};"
Line 2165
  106 always 106
  = always "class A {\n  double *work;\n  A(const Matrix &m) throw (e);\n};\nA::A(const Matrix &m) throw (e) : work(0)\n{}"
  "class A {\n  double *work;\n  A(const Matrix &m) throw (e);\n};\nA::A(const Matrix &m) throw (e) : work(0)\n{}" always "class A {\n  double *work;\n  A(const Matrix &m) throw (e);\n};\nA::A(const Matrix &m) throw (e) : work(0)\n{}"
Line 2171
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2171 always 2171
  "1: class A {\n2: double * work@1 ;\n3: A ( const Matrix & m@2 ) throw ( e ) ;\n4: } ;\n5: A :: A ( const Matrix & m@3 ) throw ( e ) : work@1 ( 0 )\n6: { }\n" always "1: class A {\n2: double * work@1 ;\n3: A ( const Matrix & m@2 ) throw ( e ) ;\n4: } ;\n5: A :: A ( const Matrix & m@3 ) throw ( e ) : work@1 ( 0 )\n6: { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2171 always 2171
  code10 always "class A {\n  double *work;\n  A(const Matrix &m) throw (e);\n};\nA::A(const Matrix &m) throw (e) : work(0)\n{}"
Line 2181
  57 always 57
  = always "class A : B<C,D> {\n  A() : B<C,D>(), x(0) {}\n  int x;\n};"
  "class A : B<C,D> {\n  A() : B<C,D>(), x(0) {}\n  int x;\n};" always "class A : B<C,D> {\n  A() : B<C,D>(), x(0) {}\n  int x;\n};"
Line 2185
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2185 always 2185
  "1: class A : B < C , D > {\n2: A ( ) : B < C , D > ( ) , x@1 ( 0 ) { }\n3: int x@1 ;\n4: } ;\n" always "1: class A : B < C , D > {\n2: A ( ) : B < C , D > ( ) , x@1 ( 0 ) { }\n3: int x@1 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2185 always 2185
  code1 always "class A : B<C,D> {\n  A() : B<C,D>(), x(0) {}\n  int x;\n};"
Line 2191
  52 always 52
  = always "class A : B<C,D> {\n  A(int x) : x(x) {}\n  int x;\n};"
  "class A : B<C,D> {\n  A(int x) : x(x) {}\n  int x;\n};" always "class A : B<C,D> {\n  A(int x) : x(x) {}\n  int x;\n};"
Line 2195
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2195 always 2195
  "1: class A : B < C , D > {\n2: A ( int x@1 ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n" always "1: class A : B < C , D > {\n2: A ( int x@1 ) : x@2 ( x@1 ) { }\n3: int x@2 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2195 always 2195
  code2 always "class A : B<C,D> {\n  A(int x) : x(x) {}\n  int x;\n};"
Line 2201
  65 always 65
  = always "class A : B<C,D> {\n  A(int x);\n  int x;\n};\nA::A(int x) : x(x) {}"
  "class A : B<C,D> {\n  A(int x);\n  int x;\n};\nA::A(int x) : x(x) {}" always "class A : B<C,D> {\n  A(int x);\n  int x;\n};\nA::A(int x) : x(x) {}"
Line 2206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2206 always 2206
  "1: class A : B < C , D > {\n2: A ( int x@1 ) ;\n3: int x@2 ;\n4: } ;\n5: A :: A ( int x@3 ) : x@2 ( x@3 ) { }\n" always "1: class A : B < C , D > {\n2: A ( int x@1 ) ;\n3: int x@2 ;\n4: } ;\n5: A :: A ( int x@3 ) : x@2 ( x@3 ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2206 always 2206
  code3 always "class A : B<C,D> {\n  A(int x);\n  int x;\n};\nA::A(int x) : x(x) {}"
Line 2213
  54 always 54
  = always "struct A : B<C,D> {\n  int x;\n  A(int x) : x(x) {}\n};\n"
  "struct A : B<C,D> {\n  int x;\n  A(int x) : x(x) {}\n};\n" always "struct A : B<C,D> {\n  int x;\n  A(int x) : x(x) {}\n};\n"
Line 2217
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2217 always 2217
  "1: struct A : B < C , D > {\n2: int x@1 ;\n3: A ( int x@2 ) : x@1 ( x@2 ) { }\n4: } ;\n" always "1: struct A : B < C , D > {\n2: int x@1 ;\n3: A ( int x@2 ) : x@1 ( x@2 ) { }\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2217 always 2217
  code4 always "struct A : B<C,D> {\n  int x;\n  A(int x) : x(x) {}\n};\n"
Line 2223
  122 always 122
  = always "class BCLass : public Ticket<void> {\n  BCLass();\n  PClass* member;\n};\nBCLass::BCLass() : Ticket<void>() {\n  member = 0;\n}"
  "class BCLass : public Ticket<void> {\n  BCLass();\n  PClass* member;\n};\nBCLass::BCLass() : Ticket<void>() {\n  member = 0;\n}" always "class BCLass : public Ticket<void> {\n  BCLass();\n  PClass* member;\n};\nBCLass::BCLass() : Ticket<void>() {\n  member = 0;\n}"
Line 2230
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2230 always 2230
  "1: class BCLass : public Ticket < void > {\n2: BCLass ( ) ;\n3: PClass * member@1 ;\n4: } ;\n5: BCLass :: BCLass ( ) : Ticket < void > ( ) {\n6: member@1 = 0 ;\n7: }\n" always "1: class BCLass : public Ticket < void > {\n2: BCLass ( ) ;\n3: PClass * member@1 ;\n4: } ;\n5: BCLass :: BCLass ( ) : Ticket < void > ( ) {\n6: member@1 = 0 ;\n7: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2230 always 2230
  code5 always "class BCLass : public Ticket<void> {\n  BCLass();\n  PClass* member;\n};\nBCLass::BCLass() : Ticket<void>() {\n  member = 0;\n}"
Line 2241
  60 always 60
  = always "class A : public B::C {\n  A() : B::C(), x(0) {}\n  int x;\n};"
  "class A : public B::C {\n  A() : B::C(), x(0) {}\n  int x;\n};" always "class A : public B::C {\n  A() : B::C(), x(0) {}\n  int x;\n};"
Line 2245
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2245 always 2245
  "1: class A : public B :: C {\n2: A ( ) : B :: C ( ) , x@1 ( 0 ) { }\n3: int x@1 ;\n4: } ;\n" always "1: class A : public B :: C {\n2: A ( ) : B :: C ( ) , x@1 ( 0 ) { }\n3: int x@1 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2245 always 2245
  code1 always "class A : public B::C {\n  A() : B::C(), x(0) {}\n  int x;\n};"
Line 2254
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2254 always 2254
  "class Foo\n{\npublic:\n    void operator=(const Foo &);\n};" always "class Foo\n{\npublic:\n    void operator=(const Foo &);\n};"
Line 2261
  73 always 73
  = always "1: class Foo\n2: {\n3: public:\n4: void operator= ( const Foo & ) ;\n5: } ;\n"
  "1: class Foo\n2: {\n3: public:\n4: void operator= ( const Foo & ) ;\n5: } ;\n" always "1: class Foo\n2: {\n3: public:\n4: void operator= ( const Foo & ) ;\n5: } ;\n"
Line 2267
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2267 always 2267
  expected always "1: class Foo\n2: {\n3: public:\n4: void operator= ( const Foo & ) ;\n5: } ;\n"
Line 2270
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2270 always 2270
  "struct Foo {\n    void * operator new [](int);\n};" always "struct Foo {\n    void * operator new [](int);\n};"
Line 2274
  58 always 58
  = always "1: struct Foo {\n2: void * operatornew[] ( int ) ;\n3: } ;\n"
  "1: struct Foo {\n2: void * operatornew[] ( int ) ;\n3: } ;\n" always "1: struct Foo {\n2: void * operatornew[] ( int ) ;\n3: } ;\n"
Line 2278
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2278 always 2278
  expected always "1: struct Foo {\n2: void * operatornew[] ( int ) ;\n3: } ;\n"
Line 2283
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2283 always 2283
  "UserDefinedException* pe = new UserDefinedException();\nthrow pe;" always "UserDefinedException* pe = new UserDefinedException();\nthrow pe;"
Line 2287
  88 always 88
  = always "1: UserDefinedException * pe@1 ; pe@1 = new UserDefinedException ( ) ;\n2: throw pe@1 ;\n"
  "1: UserDefinedException * pe@1 ; pe@1 = new UserDefinedException ( ) ;\n2: throw pe@1 ;\n" always "1: UserDefinedException * pe@1 ; pe@1 = new UserDefinedException ( ) ;\n2: throw pe@1 ;\n"
Line 2290
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2290 always 2290
  expected always "1: UserDefinedException * pe@1 ; pe@1 = new UserDefinedException ( ) ;\n2: throw pe@1 ;\n"
Line 2295
  50 always 50
  = always "void f() {\n    int a[10];\n    AAA\n    a[0] = 0;\n}"
  "void f() {\n    int a[10];\n    AAA\n    a[0] = 0;\n}" always "void f() {\n    int a[10];\n    AAA\n    a[0] = 0;\n}"
Line 2300
  68 always 68
  = always "1: void f ( ) {\n2: int a@1 [ 10 ] ;\n3: AAA\n4: a@1 [ 0 ] = 0 ;\n5: }\n"
  "1: void f ( ) {\n2: int a@1 [ 10 ] ;\n3: AAA\n4: a@1 [ 0 ] = 0 ;\n5: }\n" always "1: void f ( ) {\n2: int a@1 [ 10 ] ;\n3: AAA\n4: a@1 [ 0 ] = 0 ;\n5: }\n"
Line 2305
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2305 always 2305
  expected always "1: void f ( ) {\n2: int a@1 [ 10 ] ;\n3: AAA\n4: a@1 [ 0 ] = 0 ;\n5: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2305 always 2305
  code always "void f() {\n    int a[10];\n    AAA\n    a[0] = 0;\n}"
  "test.c" always "test.c"
Line 2310
  19 always 19
  = always "using std::size_t;"
  "using std::size_t;" always "using std::size_t;"
Line 2311
  26 always 26
  = always "1: using unsigned long ;\n"
  "1: using unsigned long ;\n" always "1: using unsigned long ;\n"
Line 2312
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2312 always 2312
  expected always "1: using unsigned long ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2312 always 2312
  code always "using std::size_t;"
Line 2316
  65 always 65
  = always "void f() {\n    try { dostuff(); }\n    catch (exception &e) { }\n}"
  "void f() {\n    try { dostuff(); }\n    catch (exception &e) { }\n}" always "void f() {\n    try { dostuff(); }\n    catch (exception &e) { }\n}"
Line 2320
  80 always 80
  = always "1: void f ( ) {\n2: try { dostuff ( ) ; }\n3: catch ( exception & e@1 ) { }\n4: }\n"
  "1: void f ( ) {\n2: try { dostuff ( ) ; }\n3: catch ( exception & e@1 ) { }\n4: }\n" always "1: void f ( ) {\n2: try { dostuff ( ) ; }\n3: catch ( exception & e@1 ) { }\n4: }\n"
Line 2324
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2324 always 2324
  expected always "1: void f ( ) {\n2: try { dostuff ( ) ; }\n3: catch ( exception & e@1 ) { }\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2324 always 2324
  code always "void f() {\n    try { dostuff(); }\n    catch (exception &e) { }\n}"
Line 2328
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2328 always 2328
  "1: function < void ( ) > fptr@1 ;\n" always "1: function < void ( ) > fptr@1 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2328 always 2328
  "function<void(void)> fptr;" always "function<void(void)> fptr;"
Line 2332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2332 always 2332
  "1: std :: map < int , FooTemplate < int > * > dummy_member@1 [ 1 ] ;\n" always "1: std :: map < int , FooTemplate < int > * > dummy_member@1 [ 1 ] ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2332 always 2332
  "std::map<int, FooTemplate<int>*> dummy_member[1];" always "std::map<int, FooTemplate<int>*> dummy_member[1];"
Line 2336
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2336 always 2336
  "1: KeyListT < float , & NIFFile :: getFloat > mKeyList@1 [ 4 ] ;\n" always "1: KeyListT < float , & NIFFile :: getFloat > mKeyList@1 [ 4 ] ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2336 always 2336
  "KeyListT<float, &NIFFile::getFloat> mKeyList[4];" always "KeyListT<float, &NIFFile::getFloat> mKeyList[4];"
Line 2340
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2340 always 2340
  "1: VertexArrayIterator < float [ 2 ] > attrPos@1 ; attrPos@1 = m_AttributePos . GetIterator < float [ 2 ] > ( ) ;\n" always "1: VertexArrayIterator < float [ 2 ] > attrPos@1 ; attrPos@1 = m_AttributePos . GetIterator < float [ 2 ] > ( ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2340 always 2340
  "VertexArrayIterator<float[2]> attrPos = m_AttributePos.GetIterator<float[2]>();" always "VertexArrayIterator<float[2]> attrPos = m_AttributePos.GetIterator<float[2]>();"
Line 2346
  39 always 39
  = always "const int X = 0;\nstd::array<int,X> Y;\n"
  "const int X = 0;\nstd::array<int,X> Y;\n" always "const int X = 0;\nstd::array<int,X> Y;\n"
Line 2349
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2349 always 2349
  "1: const int X@1 = 0 ;\n2: std :: array < int , X@1 > Y@2 ;\n" always "1: const int X@1 = 0 ;\n2: std :: array < int , X@1 > Y@2 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2349 always 2349
  code always "const int X = 0;\nstd::array<int,X> Y;\n"
Line 2354
  31 always 31
  = always "std::optional<N::Foo<A>> Foo;\n"
  "std::optional<N::Foo<A>> Foo;\n" always "std::optional<N::Foo<A>> Foo;\n"
Line 2356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2356 always 2356
  "1: std :: optional < N :: Foo < A > > Foo@1 ;\n" always "1: std :: optional < N :: Foo < A > > Foo@1 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2356 always 2356
  code always "std::optional<N::Foo<A>> Foo;\n"
Line 2362
  46 always 46
  = always "template<class T> using X = Y<T,4>;\nX<int> x;"
  "template<class T> using X = Y<T,4>;\nX<int> x;" always "template<class T> using X = Y<T,4>;\nX<int> x;"
Line 2364
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2364 always 2364
  "2: Y < int , 4 > x@1 ;\n" always "2: Y < int , 4 > x@1 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2364 always 2364
  code always "template<class T> using X = Y<T,4>;\nX<int> x;"
Line 2369
  28 always 28
  = always "void f() { if (x<a||x>b); }"
  "void f() { if (x<a||x>b); }" always "void f() { if (x<a||x>b); }"
Line 2370
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2370 always 2370
  "1: void f ( ) { if ( x < a || x > b ) { ; } }\n" always "1: void f ( ) { if ( x < a || x > b ) { ; } }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2370 always 2370
  code1 always "void f() { if (x<a||x>b); }"
Line 2372
  30 always 30
  = always "void f() { if (1+x<a||x>b); }"
  "void f() { if (1+x<a||x>b); }" always "void f() { if (1+x<a||x>b); }"
Line 2373
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2373 always 2373
  "1: void f ( ) { if ( 1 + x < a || x > b ) { ; } }\n" always "1: void f ( ) { if ( 1 + x < a || x > b ) { ; } }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2373 always 2373
  code2 always "void f() { if (1+x<a||x>b); }"
Line 2375
  30 always 30
  = always "void f() { if (x<a||x>b+1); }"
  "void f() { if (x<a||x>b+1); }" always "void f() { if (x<a||x>b+1); }"
Line 2376
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2376 always 2376
  "1: void f ( ) { if ( x < a || x > b + 1 ) { ; } }\n" always "1: void f ( ) { if ( x < a || x > b + 1 ) { ; } }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2376 always 2376
  code3 always "void f() { if (x<a||x>b+1); }"
Line 2378
  41 always 41
  = always "void f() { if ((x==13) && (x<a||x>b)); }"
  "void f() { if ((x==13) && (x<a||x>b)); }" always "void f() { if ((x==13) && (x<a||x>b)); }"
Line 2379
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2379 always 2379
  "1: void f ( ) { if ( ( x == 13 ) && ( x < a || x > b ) ) { ; } }\n" always "1: void f ( ) { if ( ( x == 13 ) && ( x < a || x > b ) ) { ; } }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2379 always 2379
  code4 always "void f() { if ((x==13) && (x<a||x>b)); }"
Line 2383
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2383 always 2383
  "1: const_cast < int * > ( code ) [ 0 ] = 0 ;\n" always "1: const_cast < int * > ( code ) [ 0 ] = 0 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2383 always 2383
  "const_cast<int *>(code)[0] = 0;" always "const_cast<int *>(code)[0] = 0;"
Line 2386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2386 always 2386
  "1: dynamic_cast < int * > ( code ) [ 0 ] = 0 ;\n" always "1: dynamic_cast < int * > ( code ) [ 0 ] = 0 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2386 always 2386
  "dynamic_cast<int *>(code)[0] = 0;" always "dynamic_cast<int *>(code)[0] = 0;"
Line 2389
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2389 always 2389
  "1: reinterpret_cast < int * > ( code ) [ 0 ] = 0 ;\n" always "1: reinterpret_cast < int * > ( code ) [ 0 ] = 0 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2389 always 2389
  "reinterpret_cast<int *>(code)[0] = 0;" always "reinterpret_cast<int *>(code)[0] = 0;"
Line 2392
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2392 always 2392
  "1: static_cast < int * > ( code ) [ 0 ] = 0 ;\n" always "1: static_cast < int * > ( code ) [ 0 ] = 0 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2392 always 2392
  "static_cast<int *>(code)[0] = 0;" always "static_cast<int *>(code)[0] = 0;"
Line 2397
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2397 always 2397
  "1: int foo ( ... ) ;\n" always "1: int foo ( ... ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2397 always 2397
  "int foo(...);" always "int foo(...);"
Line 2401
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2401 always 2401
  "1: template < int d , class A , class B > struct S { } ;\n" always "1: template < int d , class A , class B > struct S { } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2401 always 2401
  "template<int d, class A, class B> struct S {};" always "template<int d, class A, class B> struct S {};"
Line 2403
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2403 always 2403
  "1: template < int d , typename A , typename B > struct S { } ;\n" always "1: template < int d , typename A , typename B > struct S { } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2403 always 2403
  "template<int d, typename A, typename B> struct S {};" always "template<int d, typename A, typename B> struct S {};"
Line 2405
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2405 always 2405
  "1: A a@1 ;\n" always "1: A a@1 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2405 always 2405
  "typename A a;" always "typename A a;"
Line 2409
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2409 always 2409
  "1: int && a@1 ;\n" always "1: int && a@1 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2409 always 2409
  "int&& a;" always "int&& a;"
Line 2411
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2411 always 2411
  "1: void foo ( int && a@1 ) { }\n" always "1: void foo ( int && a@1 ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2411 always 2411
  "void foo(int&& a) {}" always "void foo(int&& a) {}"
Line 2413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2413 always 2413
  "1: class C {\n2: C ( int && a@1 ) ;\n3: } ;\n" always "1: class C {\n2: C ( int && a@1 ) ;\n3: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2413 always 2413
  "class C {\n    C(int&& a);\n};" always "class C {\n    C(int&& a);\n};"
Line 2420
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2420 always 2420
  "1: void foo ( int && ) ;\n" always "1: void foo ( int && ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2420 always 2420
  "void foo(int&&);" always "void foo(int&&);"
Line 2424
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2424 always 2424
  "1: void check ( const char fname@1 [ ] = 0 ) { }\n" always "1: void check ( const char fname@1 [ ] = 0 ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2424 always 2424
  "void check( const char fname[] = 0) { }" always "void check( const char fname[] = 0) { }"
Line 2428
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2428 always 2428
  "1: void which_test ( ) {\n2: const char * argv@1 [ 2 ] = { \"./test_runner\" , \"TestClass\" } ;\n3: options args@2 ( sizeof ( argv@1 ) / sizeof ( argv@1 [ 0 ] ) , argv@1 ) ;\n4: args@2 . which_test ( ) ;\n5: }\n" always "1: void which_test ( ) {\n2: const char * argv@1 [ 2 ] = { \"./test_runner\" , \"TestClass\" } ;\n3: options args@2 ( sizeof ( argv@1 ) / sizeof ( argv@1 [ 0 ] ) , argv@1 ) ;\n4: args@2 . which_test ( ) ;\n5: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2428 always 2428
  "void which_test() {\n    const char* argv[] = { \"./test_runner\", \"TestClass\" };\n    options args(sizeof argv / sizeof argv[0], argv);\n    args.which_test();\n}" always "void which_test() {\n    const char* argv[] = { \"./test_runner\", \"TestClass\" };\n    options args(sizeof argv / sizeof argv[0], argv);\n    args.which_test();\n}"
Line 2441
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2441 always 2441
  "1: void AddSuppression ( ) {\n2: class QErrorLogger {\n3: void reportErr ( ErrorLogger :: ErrorMessage & msg@1 ) {\n4: }\n5: } ;\n6: }\n" always "1: void AddSuppression ( ) {\n2: class QErrorLogger {\n3: void reportErr ( ErrorLogger :: ErrorMessage & msg@1 ) {\n4: }\n5: } ;\n6: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2441 always 2441
  "void AddSuppression() {\n    class QErrorLogger {\n        void reportErr(ErrorLogger::ErrorMessage &msg) {\n        }\n    };\n}" always "void AddSuppression() {\n    class QErrorLogger {\n        void reportErr(ErrorLogger::ErrorMessage &msg) {\n        }\n    };\n}"
Line 2456
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2456 always 2456
  "1: int ( * a1@1 ) [ 10 ] ;\n2: void f1 ( ) {\n3: int ( * a2@2 ) [ 10 ] ;\n4: int ( & a3@3 ) [ 10 ] ;\n5: }\n6: struct A {\n7: int ( & a4@4 ) [ 10 ] ;\n8: int f2 ( int i@5 ) { return a4@4 [ i@5 ] ; }\n9: int f3 ( int ( & a5@6 ) [ 10 ] , int i@7 ) { return a5@6 [ i@7 ] ; }\n10: } ;\n11: int f4 ( int ( & a6@8 ) [ 10 ] , int i@9 ) { return a6@8 [ i@9 ] ; }\n" always "1: int ( * a1@1 ) [ 10 ] ;\n2: void f1 ( ) {\n3: int ( * a2@2 ) [ 10 ] ;\n4: int ( & a3@3 ) [ 10 ] ;\n5: }\n6: struct A {\n7: int ( & a4@4 ) [ 10 ] ;\n8: int f2 ( int i@5 ) { return a4@4 [ i@5 ] ; }\n9: int f3 ( int ( & a5@6 ) [ 10 ] , int i@7 ) { return a5@6 [ i@7 ] ; }\n10: } ;\n11: int f4 ( int ( & a6@8 ) [ 10 ] , int i@9 ) { return a6@8 [ i@9 ] ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2456 always 2456
  "int (*a1)[10];\nvoid f1() {\n    int(*a2)[10];\n    int(&a3)[10];\n}\nstruct A {\n    int(&a4)[10];\n    int f2(int i) { return a4[i]; }\n    int f3(int(&a5)[10], int i) { return a5[i]; }\n};\nint f4(int(&a6)[10], int i) { return a6[i]; }" always "int (*a1)[10];\nvoid f1() {\n    int(*a2)[10];\n    int(&a3)[10];\n}\nstruct A {\n    int(&a4)[10];\n    int f2(int i) { return a4[i]; }\n    int f3(int(&a5)[10], int i) { return a5[i]; }\n};\nint f4(int(&a6)[10], int i) { return a6[i]; }"
Line 2481
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2481 always 2481
  "1: int i@1 { 1 } ;\n2: std :: vector < int > vec@2 { 1 , 2 , 3 } ;\n3: namespace n { int z@3 ; } ;\n4: int & j@4 { i@1 } ;\n5: int k@5 { 1 } ; int l@6 { 2 } ;\n" always "1: int i@1 { 1 } ;\n2: std :: vector < int > vec@2 { 1 , 2 , 3 } ;\n3: namespace n { int z@3 ; } ;\n4: int & j@4 { i@1 } ;\n5: int k@5 { 1 } ; int l@6 { 2 } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2481 always 2481
  "int i{1};\nstd::vector<int> vec{1, 2, 3};\nnamespace n { int z; };\nint& j{i};\nint k{1}, l{2};" always "int i{1};\nstd::vector<int> vec{1, 2, 3};\nnamespace n { int z; };\nint& j{i};\nint k{1}, l{2};"
Line 2493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2493 always 2493
  "1: struct S3 : public S1 , public S2 { } ;\n" always "1: struct S3 : public S1 , public S2 { } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2493 always 2493
  "struct S3 : public S1, public S2 { };" always "struct S3 : public S1, public S2 { };"
Line 2497
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2497 always 2497
  "1: class Scope { } ;\n" always "1: class Scope { } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2497 always 2497
  "class CPPCHECKLIB Scope { };" always "class CPPCHECKLIB Scope { };"
Line 2501
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2501 always 2501
  "1: class A : public B , public C :: D , public E < F > :: G < H > {\n2: int i@1 ;\n3: A ( int i@2 ) : B { i@2 } , C :: D { i@2 } , E < F > :: G < H > { i@2 } , i@1 { i@2 } {\n4: int j@3 { i@2 } ;\n5: }\n6: } ;\n" always "1: class A : public B , public C :: D , public E < F > :: G < H > {\n2: int i@1 ;\n3: A ( int i@2 ) : B { i@2 } , C :: D { i@2 } , E < F > :: G < H > { i@2 } , i@1 { i@2 } {\n4: int j@3 { i@2 } ;\n5: }\n6: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2501 always 2501
  "class A: public B, public C::D, public E<F>::G<H> {\n    int i;\n    A(int i): B{i}, C::D{i}, E<F>::G<H>{i} ,i{i} {\n        int j{i};\n    }\n};" always "class A: public B, public C::D, public E<F>::G<H> {\n    int i;\n    A(int i): B{i}, C::D{i}, E<F>::G<H>{i} ,i{i} {\n        int j{i};\n    }\n};"
Line 2516
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2516 always 2516
  "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : public A {\n5: void f ( ) ;\n6: } ;\n7: void B :: f ( ) {\n8: a@1 = 0 ;\n9: }\n" always "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : public A {\n5: void f ( ) ;\n6: } ;\n7: void B :: f ( ) {\n8: a@1 = 0 ;\n9: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2516 always 2516
  "class A {\n    int a;\n};\nclass B : public A {\n    void f();\n};\nvoid B::f() {\n    a = 0;\n}" always "class A {\n    int a;\n};\nclass B : public A {\n    void f();\n};\nvoid B::f() {\n    a = 0;\n}"
Line 2535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2535 always 2535
  "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : A {\n5: void f ( ) ;\n6: } ;\n7: void B :: f ( ) {\n8: a@1 = 0 ;\n9: }\n" always "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : A {\n5: void f ( ) ;\n6: } ;\n7: void B :: f ( ) {\n8: a@1 = 0 ;\n9: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2535 always 2535
  "class A {\n    int a;\n};\nclass B : A {\n    void f();\n};\nvoid B::f() {\n    a = 0;\n}" always "class A {\n    int a;\n};\nclass B : A {\n    void f();\n};\nvoid B::f() {\n    a = 0;\n}"
Line 2554
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2554 always 2554
  "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : protected B , public A {\n5: void f ( ) ;\n6: } ;\n7: void B :: f ( ) {\n8: a@1 = 0 ;\n9: }\n" always "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : protected B , public A {\n5: void f ( ) ;\n6: } ;\n7: void B :: f ( ) {\n8: a@1 = 0 ;\n9: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2554 always 2554
  "class A {\n    int a;\n};\nclass B : protected B, public A {\n    void f();\n};\nvoid B::f() {\n    a = 0;\n}" always "class A {\n    int a;\n};\nclass B : protected B, public A {\n    void f();\n};\nvoid B::f() {\n    a = 0;\n}"
Line 2573
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2573 always 2573
  "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : public A {\n5: void f ( ) {\n6: a@1 = 0 ;\n7: }\n8: } ;\n" always "1: class A {\n2: int a@1 ;\n3: } ;\n4: class B : public A {\n5: void f ( ) {\n6: a@1 = 0 ;\n7: }\n8: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2573 always 2573
  "class A {\n    int a;\n};\nclass B : public A {\n    void f() {\n        a = 0;\n    }\n};" always "class A {\n    int a;\n};\nclass B : public A {\n    void f() {\n        a = 0;\n    }\n};"
Line 2592
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2592 always 2592
  "1: class A ;\n2: struct B {\n3: void setData ( const A & a@1 ) ;\n4: } ;\n" always "1: class A ;\n2: struct B {\n3: void setData ( const A & a@1 ) ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2592 always 2592
  "class A;\nstruct B {\n    void setData(const A & a);\n}; " always "class A;\nstruct B {\n    void setData(const A & a);\n}; "
  "test.h" always "test.h"
Line 2603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2603 always 2603
  "1: void reset ( Foo array@1 ) {\n2: for ( auto & e@2 : array@1 ) {\n3: foo ( e@2 ) ; }\n4: } ;\n" always "1: void reset ( Foo array@1 ) {\n2: for ( auto & e@2 : array@1 ) {\n3: foo ( e@2 ) ; }\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2603 always 2603
  "void reset(Foo array) {\n    for (auto& e : array)\n        foo(e);\n};" always "void reset(Foo array) {\n    for (auto& e : array)\n        foo(e);\n};"
Line 2612
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2612 always 2612
  "1: void reset ( Foo array@1 ) {\n2: for ( auto e@2 : array@1 ) {\n3: foo ( e@2 ) ; }\n4: } ;\n" always "1: void reset ( Foo array@1 ) {\n2: for ( auto e@2 : array@1 ) {\n3: foo ( e@2 ) ; }\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2612 always 2612
  "void reset(Foo array) {\n    for (auto e : array)\n        foo(e);\n};" always "void reset(Foo array) {\n    for (auto e : array)\n        foo(e);\n};"
Line 2622
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2622 always 2622
  "1: void foo ( ) {\n2: switch ( event . key . keysym . sym ) {\n3: case SDLK_LEFT : ;\n4: break ;\n5: case SDLK_RIGHT : ;\n6: delta = 1 ;\n7: break ;\n8: }\n9: }\n" always "1: void foo ( ) {\n2: switch ( event . key . keysym . sym ) {\n3: case SDLK_LEFT : ;\n4: break ;\n5: case SDLK_RIGHT : ;\n6: delta = 1 ;\n7: break ;\n8: }\n9: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2622 always 2622
  "void foo() {\n    switch (event.key.keysym.sym) {\n    case SDLK_LEFT:\n        break;\n    case SDLK_RIGHT:\n        delta = 1;\n        break;\n    }\n}" always "void foo() {\n    switch (event.key.keysym.sym) {\n    case SDLK_LEFT:\n        break;\n    case SDLK_RIGHT:\n        delta = 1;\n        break;\n    }\n}"
  "test.c" always "test.c"
Line 2643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2643 always 2643
  "1: void foo ( ) {\n2: struct ABC abc@1 ; abc@1 = { . a@2 = 0 , . b@3 = 1 } ;\n3: }\n" always "1: void foo ( ) {\n2: struct ABC abc@1 ; abc@1 = { . a@2 = 0 , . b@3 = 1 } ;\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2643 always 2643
  "void foo() {\n  struct ABC abc = {.a=0,.b=1};\n}" always "void foo() {\n  struct ABC abc = {.a=0,.b=1};\n}"
Line 2650
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2650 always 2650
  "1: void foo ( ) {\n2: struct ABC abc@1 ; abc@1 = { . a@2 = abc@1 . a@2 , . b@3 = abc@1 . b@3 } ;\n3: }\n" always "1: void foo ( ) {\n2: struct ABC abc@1 ; abc@1 = { . a@2 = abc@1 . a@2 , . b@3 = abc@1 . b@3 } ;\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2650 always 2650
  "void foo() {\n  struct ABC abc = {.a=abc.a,.b=abc.b};\n}" always "void foo() {\n  struct ABC abc = {.a=abc.a,.b=abc.b};\n}"
Line 2657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2657 always 2657
  "1: void foo ( ) {\n2: struct ABC abc@1 ; abc@1 = { . a@2 { abc@1 . a@2 } , . b@3 = { abc@1 . b@3 } } ;\n3: }\n" always "1: void foo ( ) {\n2: struct ABC abc@1 ; abc@1 = { . a@2 { abc@1 . a@2 } , . b@3 = { abc@1 . b@3 } } ;\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2657 always 2657
  "void foo() {\n  struct ABC abc = {.a { abc.a },.b= { abc.b } };\n}" always "void foo() {\n  struct ABC abc = {.a { abc.a },.b= { abc.b } };\n}"
Line 2666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2666 always 2666
  "1: void foo ( int * a@1 ) { int b@2 [ 1 ] = { x * a@1 [ 0 ] } ; }\n" always "1: void foo ( int * a@1 ) { int b@2 [ 1 ] = { x * a@1 [ 0 ] } ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2666 always 2666
  "void foo(int*a) { int b[] = { x*a[0] }; }" always "void foo(int*a) { int b[] = { x*a[0] }; }"
Line 2672
  86 always 86
  = always "static void func(int ec) {\n    func2([](const std::error_code& ec) { return ec; });\n}"
  "static void func(int ec) {\n    func2([](const std::error_code& ec) { return ec; });\n}" always "static void func(int ec) {\n    func2([](const std::error_code& ec) { return ec; });\n}"
Line 2675
  113 always 113
  = always "1: static void func ( int ec@1 ) {\n2: func2 ( [ ] ( const std :: error_code & ec@2 ) { return ec@2 ; } ) ;\n3: }\n"
  "1: static void func ( int ec@1 ) {\n2: func2 ( [ ] ( const std :: error_code & ec@2 ) { return ec@2 ; } ) ;\n3: }\n" always "1: static void func ( int ec@1 ) {\n2: func2 ( [ ] ( const std :: error_code & ec@2 ) { return ec@2 ; } ) ;\n3: }\n"
Line 2678
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2678 always 2678
  exp always "1: static void func ( int ec@1 ) {\n2: func2 ( [ ] ( const std :: error_code & ec@2 ) { return ec@2 ; } ) ;\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2678 always 2678
  code always "static void func(int ec) {\n    func2([](const std::error_code& ec) { return ec; });\n}"
Line 2681
  97 always 97
  = always "static void func(int ec) {\n    func2([](int x, const std::error_code& ec) { return x + ec; });\n}"
  "static void func(int ec) {\n    func2([](int x, const std::error_code& ec) { return x + ec; });\n}" always "static void func(int ec) {\n    func2([](int x, const std::error_code& ec) { return x + ec; });\n}"
Line 2684
  129 always 129
  = always "1: static void func ( int ec@1 ) {\n2: func2 ( [ ] ( int x@2 , const std :: error_code & ec@3 ) { return x@2 + ec@3 ; } ) ;\n3: }\n"
  "1: static void func ( int ec@1 ) {\n2: func2 ( [ ] ( int x@2 , const std :: error_code & ec@3 ) { return x@2 + ec@3 ; } ) ;\n3: }\n" always "1: static void func ( int ec@1 ) {\n2: func2 ( [ ] ( int x@2 , const std :: error_code & ec@3 ) { return x@2 + ec@3 ; } ) ;\n3: }\n"
Line 2687
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2687 always 2687
  exp always "1: static void func ( int ec@1 ) {\n2: func2 ( [ ] ( int x@2 , const std :: error_code & ec@3 ) { return x@2 + ec@3 ; } ) ;\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2687 always 2687
  code always "static void func(int ec) {\n    func2([](int x, const std::error_code& ec) { return x + ec; });\n}"
Line 2691
  66 always 66
  = always "auto g = [](const std::string& s) -> std::string { return {}; };\n"
  "auto g = [](const std::string& s) -> std::string { return {}; };\n" always "auto g = [](const std::string& s) -> std::string { return {}; };\n"
Line 2692
  90 always 90
  = always "1: auto g@1 ; g@1 = [ ] ( const std :: string & s@2 ) . std :: string { return { } ; } ;\n"
  "1: auto g@1 ; g@1 = [ ] ( const std :: string & s@2 ) . std :: string { return { } ; } ;\n" always "1: auto g@1 ; g@1 = [ ] ( const std :: string & s@2 ) . std :: string { return { } ; } ;\n"
Line 2693
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2693 always 2693
  exp always "1: auto g@1 ; g@1 = [ ] ( const std :: string & s@2 ) . std :: string { return { } ; } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2693 always 2693
  code always "auto g = [](const std::string& s) -> std::string { return {}; };\n"
Line 2696
  42 always 42
  = always "auto g = [](std::function<void()> p) {};\n"
  "auto g = [](std::function<void()> p) {};\n" always "auto g = [](std::function<void()> p) {};\n"
Line 2697
  68 always 68
  = always "1: auto g@1 ; g@1 = [ ] ( std :: function < void ( ) > p@2 ) { } ;\n"
  "1: auto g@1 ; g@1 = [ ] ( std :: function < void ( ) > p@2 ) { } ;\n" always "1: auto g@1 ; g@1 = [ ] ( std :: function < void ( ) > p@2 ) { } ;\n"
Line 2698
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2698 always 2698
  exp always "1: auto g@1 ; g@1 = [ ] ( std :: function < void ( ) > p@2 ) { } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2698 always 2698
  code always "auto g = [](std::function<void()> p) {};\n"
Line 2702
  87 always 87
  = always "class T {};\nauto g = [](const T* t) -> int {\n    const T* u{}, *v{};\n    return 0;\n};\n"
  "class T {};\nauto g = [](const T* t) -> int {\n    const T* u{}, *v{};\n    return 0;\n};\n" always "class T {};\nauto g = [](const T* t) -> int {\n    const T* u{}, *v{};\n    return 0;\n};\n"
Line 2707
  132 always 132
  = always "1: class T { } ;\n2: auto g@1 ; g@1 = [ ] ( const T * t@2 ) . int {\n3: const T * u@3 { } ; const T * v@4 { } ;\n4: return 0 ;\n5: } ;\n"
  "1: class T { } ;\n2: auto g@1 ; g@1 = [ ] ( const T * t@2 ) . int {\n3: const T * u@3 { } ; const T * v@4 { } ;\n4: return 0 ;\n5: } ;\n" always "1: class T { } ;\n2: auto g@1 ; g@1 = [ ] ( const T * t@2 ) . int {\n3: const T * u@3 { } ; const T * v@4 { } ;\n4: return 0 ;\n5: } ;\n"
Line 2712
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2712 always 2712
  exp always "1: class T { } ;\n2: auto g@1 ; g@1 = [ ] ( const T * t@2 ) . int {\n3: const T * u@3 { } ; const T * v@4 { } ;\n4: return 0 ;\n5: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2712 always 2712
  code always "class T {};\nauto g = [](const T* t) -> int {\n    const T* u{}, *v{};\n    return 0;\n};\n"
Line 2719
  69 always 69
  = always "static void func() {\n    auto x = []() mutable {};\n    dostuff(x);\n}"
  "static void func() {\n    auto x = []() mutable {};\n    dostuff(x);\n}" always "static void func() {\n    auto x = []() mutable {};\n    dostuff(x);\n}"
Line 2723
  95 always 95
  = always "1: static void func ( ) {\n2: auto x@1 ; x@1 = [ ] ( ) mutable { } ;\n3: dostuff ( x@1 ) ;\n4: }\n"
  "1: static void func ( ) {\n2: auto x@1 ; x@1 = [ ] ( ) mutable { } ;\n3: dostuff ( x@1 ) ;\n4: }\n" always "1: static void func ( ) {\n2: auto x@1 ; x@1 = [ ] ( ) mutable { } ;\n3: dostuff ( x@1 ) ;\n4: }\n"
Line 2727
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2727 always 2727
  exp always "1: static void func ( ) {\n2: auto x@1 ; x@1 = [ ] ( ) mutable { } ;\n3: dostuff ( x@1 ) ;\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2727 always 2727
  code always "static void func() {\n    auto x = []() mutable {};\n    dostuff(x);\n}"
Line 2731
  32 always 32
  = always "auto g = [](int i) mutable {};\n"
  "auto g = [](int i) mutable {};\n" always "auto g = [](int i) mutable {};\n"
Line 2732
  51 always 51
  = always "1: auto g@1 ; g@1 = [ ] ( int i@2 ) mutable { } ;\n"
  "1: auto g@1 ; g@1 = [ ] ( int i@2 ) mutable { } ;\n" always "1: auto g@1 ; g@1 = [ ] ( int i@2 ) mutable { } ;\n"
Line 2733
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2733 always 2733
  exp always "1: auto g@1 ; g@1 = [ ] ( int i@2 ) mutable { } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2733 always 2733
  code always "auto g = [](int i) mutable {};\n"
Line 2738
  201 always 201
  = always "struct Fred {\n    auto foo(const Fred & other) -> Fred &;\n    auto bar(const Fred & other) -> Fred & {\n        return *this;\n    }\n};\nauto Fred::foo(const Fred & other) -> Fred & {\n    return *this;\n}"
  "struct Fred {\n    auto foo(const Fred & other) -> Fred &;\n    auto bar(const Fred & other) -> Fred & {\n        return *this;\n    }\n};\nauto Fred::foo(const Fred & other) -> Fred & {\n    return *this;\n}" always "struct Fred {\n    auto foo(const Fred & other) -> Fred &;\n    auto bar(const Fred & other) -> Fred & {\n        return *this;\n    }\n};\nauto Fred::foo(const Fred & other) -> Fred & {\n    return *this;\n}"
Line 2747
  225 always 225
  = always "1: struct Fred {\n2: auto foo ( const Fred & other@1 ) . Fred & ;\n3: auto bar ( const Fred & other@2 ) . Fred & {\n4: return * this ;\n5: }\n6: } ;\n7: auto Fred :: foo ( const Fred & other@3 ) . Fred & {\n8: return * this ;\n9: }\n"
  "1: struct Fred {\n2: auto foo ( const Fred & other@1 ) . Fred & ;\n3: auto bar ( const Fred & other@2 ) . Fred & {\n4: return * this ;\n5: }\n6: } ;\n7: auto Fred :: foo ( const Fred & other@3 ) . Fred & {\n8: return * this ;\n9: }\n" always "1: struct Fred {\n2: auto foo ( const Fred & other@1 ) . Fred & ;\n3: auto bar ( const Fred & other@2 ) . Fred & {\n4: return * this ;\n5: }\n6: } ;\n7: auto Fred :: foo ( const Fred & other@3 ) . Fred & {\n8: return * this ;\n9: }\n"
Line 2756
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2756 always 2756
  exp1 always "1: struct Fred {\n2: auto foo ( const Fred & other@1 ) . Fred & ;\n3: auto bar ( const Fred & other@2 ) . Fred & {\n4: return * this ;\n5: }\n6: } ;\n7: auto Fred :: foo ( const Fred & other@3 ) . Fred & {\n8: return * this ;\n9: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2756 always 2756
  code1 always "struct Fred {\n    auto foo(const Fred & other) -> Fred &;\n    auto bar(const Fred & other) -> Fred & {\n        return *this;\n    }\n};\nauto Fred::foo(const Fred & other) -> Fred & {\n    return *this;\n}"
Line 2760
  35 always 35
  = always "auto func(int arg) -> bar::quux {}"
  "auto func(int arg) -> bar::quux {}" always "auto func(int arg) -> bar::quux {}"
Line 2761
  46 always 46
  = always "1: auto func ( int arg@1 ) . bar :: quux { }\n"
  "1: auto func ( int arg@1 ) . bar :: quux { }\n" always "1: auto func ( int arg@1 ) . bar :: quux { }\n"
Line 2762
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2762 always 2762
  exp1 always "1: auto func ( int arg@1 ) . bar :: quux { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2762 always 2762
  code1 always "auto func(int arg) -> bar::quux {}"
Line 2766
  87 always 87
  = always "template <typename... Rest>\nvoid func(Rest... parameters) {\n    foo(parameters...);\n}\n"
  "template <typename... Rest>\nvoid func(Rest... parameters) {\n    foo(parameters...);\n}\n" always "template <typename... Rest>\nvoid func(Rest... parameters) {\n    foo(parameters...);\n}\n"
Line 2770
  111 always 111
  = always "1: template < typename ... Rest >\n2: void func ( Rest ... parameters@1 ) {\n3: foo ( parameters@1 ... ) ;\n4: }\n"
  "1: template < typename ... Rest >\n2: void func ( Rest ... parameters@1 ) {\n3: foo ( parameters@1 ... ) ;\n4: }\n" always "1: template < typename ... Rest >\n2: void func ( Rest ... parameters@1 ) {\n3: foo ( parameters@1 ... ) ;\n4: }\n"
Line 2774
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2774 always 2774
  exp1 always "1: template < typename ... Rest >\n2: void func ( Rest ... parameters@1 ) {\n3: foo ( parameters@1 ... ) ;\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2774 always 2774
  code1 always "template <typename... Rest>\nvoid func(Rest... parameters) {\n    foo(parameters...);\n}\n"
Line 2778
  65 always 65
  = always "void f() {\n  for (auto [x,y,z]: xyz) {\n    x+y+z;\n  }\n  x+y+z;\n}"
  "void f() {\n  for (auto [x,y,z]: xyz) {\n    x+y+z;\n  }\n  x+y+z;\n}" always "void f() {\n  for (auto [x,y,z]: xyz) {\n    x+y+z;\n  }\n  x+y+z;\n}"
Line 2784
  107 always 107
  = always "1: void f ( ) {\n2: for ( auto [ x@1 , y@2 , z@3 ] : xyz ) {\n3: x@1 + y@2 + z@3 ;\n4: }\n5: x + y + z ;\n6: }\n"
  "1: void f ( ) {\n2: for ( auto [ x@1 , y@2 , z@3 ] : xyz ) {\n3: x@1 + y@2 + z@3 ;\n4: }\n5: x + y + z ;\n6: }\n" always "1: void f ( ) {\n2: for ( auto [ x@1 , y@2 , z@3 ] : xyz ) {\n3: x@1 + y@2 + z@3 ;\n4: }\n5: x + y + z ;\n6: }\n"
Line 2790
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2790 always 2790
  exp1 always "1: void f ( ) {\n2: for ( auto [ x@1 , y@2 , z@3 ] : xyz ) {\n3: x@1 + y@2 + z@3 ;\n4: }\n5: x + y + z ;\n6: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2790 always 2790
  code always "void f() {\n  for (auto [x,y,z]: xyz) {\n    x+y+z;\n  }\n  x+y+z;\n}"
Line 2794
  42 always 42
  = always "void foo(int x) const {\n  if (not x) {}\n}"
  "void foo(int x) const {\n  if (not x) {}\n}" always "void foo(int x) const {\n  if (not x) {}\n}"
Line 2797
  58 always 58
  = always "1: void foo ( int x@1 ) const {\n2: if ( ! x@1 ) { }\n3: }\n"
  "1: void foo ( int x@1 ) const {\n2: if ( ! x@1 ) { }\n3: }\n" always "1: void foo ( int x@1 ) const {\n2: if ( ! x@1 ) { }\n3: }\n"
Line 2800
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2800 always 2800
  exp1 always "1: void foo ( int x@1 ) const {\n2: if ( ! x@1 ) { }\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2800 always 2800
  code1 always "void foo(int x) const {\n  if (not x) {}\n}"
Line 2805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2805 always 2805
  "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: x@1 ;\n4: }\n" always "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: x@1 ;\n4: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2805 always 2805
  "void f(int x) {\n  if (int x = 0) { x; }\n  x;\n}" always "void f(int x) {\n  if (int x = 0) { x; }\n  x;\n}"
Line 2814
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2814 always 2814
  "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: else { x@2 ; }\n4: x@1 ;\n5: }\n" always "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: else { x@2 ; }\n4: x@1 ;\n5: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2814 always 2814
  "void f(int x) {\n  if (int x = 0) { x; }\n  else { x; }\n  x;\n}" always "void f(int x) {\n  if (int x = 0) { x; }\n  else { x; }\n  x;\n}"
Line 2825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2825 always 2825
  "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: else { if ( void * x@3 = & x@3 ) { x@3 ; } }\n4: x@1 ;\n5: }\n" always "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: else { if ( void * x@3 = & x@3 ) { x@3 ; } }\n4: x@1 ;\n5: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2825 always 2825
  "void f(int x) {\n  if (int x = 0) x;\n  else if (void* x = &x) x;\n  x;\n}" always "void f(int x) {\n  if (int x = 0) x;\n  else if (void* x = &x) x;\n  x;\n}"
Line 2836
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2836 always 2836
  "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: else { if ( void * x@3 = & x@3 ) { x@3 ; }\n4: else { x@3 ; } }\n5: x@1 ;\n6: }\n" always "1: void f ( int x@1 ) {\n2: if ( int x@2 = 0 ) { x@2 ; }\n3: else { if ( void * x@3 = & x@3 ) { x@3 ; }\n4: else { x@3 ; } }\n5: x@1 ;\n6: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2836 always 2836
  "void f(int x) {\n  if (int x = 0) x;\n  else if (void* x = &x) x;\n  else x;\n  x;\n}" always "void f(int x) {\n  if (int x = 0) x;\n  else if (void* x = &x) x;\n  else x;\n  x;\n}"
Line 2851
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2851 always 2851
  "class Fred\n{\nprivate:\n    int i;\n\n    void foo1();\n    void foo2()\n    {\n        ++i;\n    }\n}\n\nFred::foo1()\n{\n    i = 0;\n}" always "class Fred\n{\nprivate:\n    int i;\n\n    void foo1();\n    void foo2()\n    {\n        ++i;\n    }\n}\n\nFred::foo1()\n{\n    i = 0;\n}"
Line 2869
  164 always 164
  = always "1: class Fred\n2: {\n3: private:\n4: int i@1 ;\n5:\n6: void foo1 ( ) ;\n7: void foo2 ( )\n8: {\n9: ++ i@1 ;\n10: }\n11: }\n12:\n13: Fred :: foo1 ( )\n14: {\n15: i@1 = 0 ;\n16: }\n"
  "1: class Fred\n2: {\n3: private:\n4: int i@1 ;\n5:\n6: void foo1 ( ) ;\n7: void foo2 ( )\n8: {\n9: ++ i@1 ;\n10: }\n11: }\n12:\n13: Fred :: foo1 ( )\n14: {\n15: i@1 = 0 ;\n16: }\n" always "1: class Fred\n2: {\n3: private:\n4: int i@1 ;\n5:\n6: void foo1 ( ) ;\n7: void foo2 ( )\n8: {\n9: ++ i@1 ;\n10: }\n11: }\n12:\n13: Fred :: foo1 ( )\n14: {\n15: i@1 = 0 ;\n16: }\n"
Line 2886
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2886 always 2886
  expected always "1: class Fred\n2: {\n3: private:\n4: int i@1 ;\n5:\n6: void foo1 ( ) ;\n7: void foo2 ( )\n8: {\n9: ++ i@1 ;\n10: }\n11: }\n12:\n13: Fred :: foo1 ( )\n14: {\n15: i@1 = 0 ;\n16: }\n"
Line 2891
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2891 always 2891
  "class Fred\n{ void f(); };\n\nvoid A::foo1()\n{\n    int i = 0;\n}\n\nvoid Fred::f()\n{\n    i = 0;\n}" always "class Fred\n{ void f(); };\n\nvoid A::foo1()\n{\n    int i = 0;\n}\n\nvoid Fred::f()\n{\n    i = 0;\n}"
Line 2905
  144 always 144
  = always "1: class Fred\n2: { void f ( ) ; } ;\n3:\n4: void A :: foo1 ( )\n5: {\n6: int i@1 ; i@1 = 0 ;\n7: }\n8:\n9: void Fred :: f ( )\n10: {\n11: i = 0 ;\n12: }\n"
  "1: class Fred\n2: { void f ( ) ; } ;\n3:\n4: void A :: foo1 ( )\n5: {\n6: int i@1 ; i@1 = 0 ;\n7: }\n8:\n9: void Fred :: f ( )\n10: {\n11: i = 0 ;\n12: }\n" always "1: class Fred\n2: { void f ( ) ; } ;\n3:\n4: void A :: foo1 ( )\n5: {\n6: int i@1 ; i@1 = 0 ;\n7: }\n8:\n9: void Fred :: f ( )\n10: {\n11: i = 0 ;\n12: }\n"
Line 2918
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2918 always 2918
  expected always "1: class Fred\n2: { void f ( ) ; } ;\n3:\n4: void A :: foo1 ( )\n5: {\n6: int i@1 ; i@1 = 0 ;\n7: }\n8:\n9: void Fred :: f ( )\n10: {\n11: i = 0 ;\n12: }\n"
Line 2923
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2923 always 2923
  "class Fred\n{ int i; void f(); };\n\nvoid Fred::f()\n{\n    i = 0;\n}\n\nvoid A::f()\n{\n    i = 0;\n}" always "class Fred\n{ int i; void f(); };\n\nvoid Fred::f()\n{\n    i = 0;\n}\n\nvoid A::f()\n{\n    i = 0;\n}"
Line 2937
  141 always 141
  = always "1: class Fred\n2: { int i@1 ; void f ( ) ; } ;\n3:\n4: void Fred :: f ( )\n5: {\n6: i@1 = 0 ;\n7: }\n8:\n9: void A :: f ( )\n10: {\n11: i = 0 ;\n12: }\n"
  "1: class Fred\n2: { int i@1 ; void f ( ) ; } ;\n3:\n4: void Fred :: f ( )\n5: {\n6: i@1 = 0 ;\n7: }\n8:\n9: void A :: f ( )\n10: {\n11: i = 0 ;\n12: }\n" always "1: class Fred\n2: { int i@1 ; void f ( ) ; } ;\n3:\n4: void Fred :: f ( )\n5: {\n6: i@1 = 0 ;\n7: }\n8:\n9: void A :: f ( )\n10: {\n11: i = 0 ;\n12: }\n"
Line 2950
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2950 always 2950
  expected always "1: class Fred\n2: { int i@1 ; void f ( ) ; } ;\n3:\n4: void Fred :: f ( )\n5: {\n6: i@1 = 0 ;\n7: }\n8:\n9: void A :: f ( )\n10: {\n11: i = 0 ;\n12: }\n"
Line 2955
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2955 always 2955
  "class Fred\n{ int i; void f(); };\n\nvoid Fred::f()\n{\n    if (i) { }\n    i = 0;\n}" always "class Fred\n{ int i; void f(); };\n\nvoid Fred::f()\n{\n    if (i) { }\n    i = 0;\n}"
Line 2965
  113 always 113
  = always "1: class Fred\n2: { int i@1 ; void f ( ) ; } ;\n3:\n4: void Fred :: f ( )\n5: {\n6: if ( i@1 ) { }\n7: i@1 = 0 ;\n8: }\n"
  "1: class Fred\n2: { int i@1 ; void f ( ) ; } ;\n3:\n4: void Fred :: f ( )\n5: {\n6: if ( i@1 ) { }\n7: i@1 = 0 ;\n8: }\n" always "1: class Fred\n2: { int i@1 ; void f ( ) ; } ;\n3:\n4: void Fred :: f ( )\n5: {\n6: if ( i@1 ) { }\n7: i@1 = 0 ;\n8: }\n"
Line 2974
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2974 always 2974
  expected always "1: class Fred\n2: { int i@1 ; void f ( ) ; } ;\n3:\n4: void Fred :: f ( )\n5: {\n6: if ( i@1 ) { }\n7: i@1 = 0 ;\n8: }\n"
Line 2978
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2978 always 2978
  "class A { };\nclass B\n{\n    A *a;\n    B() : a(new A)\n    { }\n};" always "class A { };\nclass B\n{\n    A *a;\n    B() : a(new A)\n    { }\n};"
Line 2987
  86 always 86
  = always "1: class A { } ;\n2: class B\n3: {\n4: A * a@1 ;\n5: B ( ) : a@1 ( new A )\n6: { }\n7: } ;\n"
  "1: class A { } ;\n2: class B\n3: {\n4: A * a@1 ;\n5: B ( ) : a@1 ( new A )\n6: { }\n7: } ;\n" always "1: class A { } ;\n2: class B\n3: {\n4: A * a@1 ;\n5: B ( ) : a@1 ( new A )\n6: { }\n7: } ;\n"
Line 2995
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2995 always 2995
  expected always "1: class A { } ;\n2: class B\n3: {\n4: A * a@1 ;\n5: B ( ) : a@1 ( new A )\n6: { }\n7: } ;\n"
Line 2999
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  2999 always 2999
  "class A\n{\n  public:\n  static char buf[20];\n};\nchar A::buf[20];\nint main()\n{\n  char buf[2];\n  A::buf[10] = 0;\n}" always "class A\n{\n  public:\n  static char buf[20];\n};\nchar A::buf[20];\nint main()\n{\n  char buf[2];\n  A::buf[10] = 0;\n}"
Line 3012
  170 always 170
  = always "1: class A\n2: {\n3: public:\n4: static char buf@1 [ 20 ] ;\n5: } ;\n6: char A :: buf@1 [ 20 ] ;\n7: int main ( )\n8: {\n9: char buf@2 [ 2 ] ;\n10: A :: buf@1 [ 10 ] = 0 ;\n11: }\n"
  "1: class A\n2: {\n3: public:\n4: static char buf@1 [ 20 ] ;\n5: } ;\n6: char A :: buf@1 [ 20 ] ;\n7: int main ( )\n8: {\n9: char buf@2 [ 2 ] ;\n10: A :: buf@1 [ 10 ] = 0 ;\n11: }\n" always "1: class A\n2: {\n3: public:\n4: static char buf@1 [ 20 ] ;\n5: } ;\n6: char A :: buf@1 [ 20 ] ;\n7: int main ( )\n8: {\n9: char buf@2 [ 2 ] ;\n10: A :: buf@1 [ 10 ] = 0 ;\n11: }\n"
Line 3024
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3024 always 3024
  expected always "1: class A\n2: {\n3: public:\n4: static char buf@1 [ 20 ] ;\n5: } ;\n6: char A :: buf@1 [ 20 ] ;\n7: int main ( )\n8: {\n9: char buf@2 [ 2 ] ;\n10: A :: buf@1 [ 10 ] = 0 ;\n11: }\n"
Line 3028
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3028 always 3028
  "int main()\n{\n  char buf[2];\n  A::buf[10] = 0;\n}" always "int main()\n{\n  char buf[2];\n  A::buf[10] = 0;\n}"
Line 3035
  74 always 74
  = always "1: int main ( )\n2: {\n3: char buf@1 [ 2 ] ;\n4: A :: buf [ 10 ] = 0 ;\n5: }\n"
  "1: int main ( )\n2: {\n3: char buf@1 [ 2 ] ;\n4: A :: buf [ 10 ] = 0 ;\n5: }\n" always "1: int main ( )\n2: {\n3: char buf@1 [ 2 ] ;\n4: A :: buf [ 10 ] = 0 ;\n5: }\n"
Line 3041
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3041 always 3041
  expected always "1: int main ( )\n2: {\n3: char buf@1 [ 2 ] ;\n4: A :: buf [ 10 ] = 0 ;\n5: }\n"
Line 3045
  91 always 91
  = always "class Fred {\npublic:\n    void foo(int d) {\n        int i = bar(x * d);\n    }\n    int x;\n}\n"
  "class Fred {\npublic:\n    void foo(int d) {\n        int i = bar(x * d);\n    }\n    int x;\n}\n" always "class Fred {\npublic:\n    void foo(int d) {\n        int i = bar(x * d);\n    }\n    int x;\n}\n"
Line 3053
  116 always 116
  = always "1: class Fred {\n2: public:\n3: void foo ( int d@1 ) {\n4: int i@2 ; i@2 = bar ( x@3 * d@1 ) ;\n5: }\n6: int x@3 ;\n7: }\n"
  "1: class Fred {\n2: public:\n3: void foo ( int d@1 ) {\n4: int i@2 ; i@2 = bar ( x@3 * d@1 ) ;\n5: }\n6: int x@3 ;\n7: }\n" always "1: class Fred {\n2: public:\n3: void foo ( int d@1 ) {\n4: int i@2 ; i@2 = bar ( x@3 * d@1 ) ;\n5: }\n6: int x@3 ;\n7: }\n"
Line 3061
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3061 always 3061
  expected always "1: class Fred {\n2: public:\n3: void foo ( int d@1 ) {\n4: int i@2 ; i@2 = bar ( x@3 * d@1 ) ;\n5: }\n6: int x@3 ;\n7: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3061 always 3061
  code always "class Fred {\npublic:\n    void foo(int d) {\n        int i = bar(x * d);\n    }\n    int x;\n}\n"
Line 3065
  124 always 124
  = always "typedef char Str[10];class A {\npublic:\n    void f(Str &cl);\n    void g(Str cl);\n}\nvoid Fred::f(Str &cl) {\n    sizeof(cl);\n}"
  "typedef char Str[10];class A {\npublic:\n    void f(Str &cl);\n    void g(Str cl);\n}\nvoid Fred::f(Str &cl) {\n    sizeof(cl);\n}" always "typedef char Str[10];class A {\npublic:\n    void f(Str &cl);\n    void g(Str cl);\n}\nvoid Fred::f(Str &cl) {\n    sizeof(cl);\n}"
Line 3075
  175 always 175
  = always "1: class A {\n2: public:\n3: void f ( char ( & cl@1 ) [ 10 ] ) ;\n4: void g ( char cl@2 [ 10 ] ) ;\n5: }\n6: void Fred :: f ( char ( & cl@3 ) [ 10 ] ) {\n7: sizeof ( cl@3 ) ;\n8: }\n"
  "1: class A {\n2: public:\n3: void f ( char ( & cl@1 ) [ 10 ] ) ;\n4: void g ( char cl@2 [ 10 ] ) ;\n5: }\n6: void Fred :: f ( char ( & cl@3 ) [ 10 ] ) {\n7: sizeof ( cl@3 ) ;\n8: }\n" always "1: class A {\n2: public:\n3: void f ( char ( & cl@1 ) [ 10 ] ) ;\n4: void g ( char cl@2 [ 10 ] ) ;\n5: }\n6: void Fred :: f ( char ( & cl@3 ) [ 10 ] ) {\n7: sizeof ( cl@3 ) ;\n8: }\n"
Line 3084
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3084 always 3084
  expected always "1: class A {\n2: public:\n3: void f ( char ( & cl@1 ) [ 10 ] ) ;\n4: void g ( char cl@2 [ 10 ] ) ;\n5: }\n6: void Fred :: f ( char ( & cl@3 ) [ 10 ] ) {\n7: sizeof ( cl@3 ) ;\n8: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3084 always 3084
  code always "typedef char Str[10];class A {\npublic:\n    void f(Str &cl);\n    void g(Str cl);\n}\nvoid Fred::f(Str &cl) {\n    sizeof(cl);\n}"
Line 3088
  61 always 61
  = always "class A {\n    void f() {\n        a = 3;\n    }\n    int a;\n};\n"
  "class A {\n    void f() {\n        a = 3;\n    }\n    int a;\n};\n" always "class A {\n    void f() {\n        a = 3;\n    }\n    int a;\n};\n"
Line 3095
  68 always 68
  = always "1: class A {\n2: void f ( ) {\n3: a@1 = 3 ;\n4: }\n5: int a@1 ;\n6: } ;\n"
  "1: class A {\n2: void f ( ) {\n3: a@1 = 3 ;\n4: }\n5: int a@1 ;\n6: } ;\n" always "1: class A {\n2: void f ( ) {\n3: a@1 = 3 ;\n4: }\n5: int a@1 ;\n6: } ;\n"
Line 3101
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3101 always 3101
  expected always "1: class A {\n2: void f ( ) {\n3: a@1 = 3 ;\n4: }\n5: int a@1 ;\n6: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3101 always 3101
  code always "class A {\n    void f() {\n        a = 3;\n    }\n    int a;\n};\n"
Line 3105
  137 always 137
  = always "class Fred {\n    int a;\n    void f();\n};\nclass Wilma {\n    int a;\n    void f();\n};\nvoid Fred::f() { a = 0; }\nvoid Wilma::f() { a = 0; }\n"
  "class Fred {\n    int a;\n    void f();\n};\nclass Wilma {\n    int a;\n    void f();\n};\nvoid Fred::f() { a = 0; }\nvoid Wilma::f() { a = 0; }\n" always "class Fred {\n    int a;\n    void f();\n};\nclass Wilma {\n    int a;\n    void f();\n};\nvoid Fred::f() { a = 0; }\nvoid Wilma::f() { a = 0; }\n"
Line 3116
  180 always 180
  = always "1: class Fred {\n2: int a@1 ;\n3: void f ( ) ;\n4: } ;\n5: class Wilma {\n6: int a@2 ;\n7: void f ( ) ;\n8: } ;\n9: void Fred :: f ( ) { a@1 = 0 ; }\n10: void Wilma :: f ( ) { a@2 = 0 ; }\n"
  "1: class Fred {\n2: int a@1 ;\n3: void f ( ) ;\n4: } ;\n5: class Wilma {\n6: int a@2 ;\n7: void f ( ) ;\n8: } ;\n9: void Fred :: f ( ) { a@1 = 0 ; }\n10: void Wilma :: f ( ) { a@2 = 0 ; }\n" always "1: class Fred {\n2: int a@1 ;\n3: void f ( ) ;\n4: } ;\n5: class Wilma {\n6: int a@2 ;\n7: void f ( ) ;\n8: } ;\n9: void Fred :: f ( ) { a@1 = 0 ; }\n10: void Wilma :: f ( ) { a@2 = 0 ; }\n"
Line 3127
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3127 always 3127
  expected always "1: class Fred {\n2: int a@1 ;\n3: void f ( ) ;\n4: } ;\n5: class Wilma {\n6: int a@2 ;\n7: void f ( ) ;\n8: } ;\n9: void Fred :: f ( ) { a@1 = 0 ; }\n10: void Wilma :: f ( ) { a@2 = 0 ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3127 always 3127
  code always "class Fred {\n    int a;\n    void f();\n};\nclass Wilma {\n    int a;\n    void f();\n};\nvoid Fred::f() { a = 0; }\nvoid Wilma::f() { a = 0; }\n"
Line 3131
  58 always 58
  = always "class Fred {\n    int a;\n    void f() { Fred::a = 0; }\n};\n"
  "class Fred {\n    int a;\n    void f() { Fred::a = 0; }\n};\n" always "class Fred {\n    int a;\n    void f() { Fred::a = 0; }\n};\n"
Line 3136
  73 always 73
  = always "1: class Fred {\n2: int a@1 ;\n3: void f ( ) { Fred :: a@1 = 0 ; }\n4: } ;\n"
  "1: class Fred {\n2: int a@1 ;\n3: void f ( ) { Fred :: a@1 = 0 ; }\n4: } ;\n" always "1: class Fred {\n2: int a@1 ;\n3: void f ( ) { Fred :: a@1 = 0 ; }\n4: } ;\n"
Line 3141
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3141 always 3141
  expected always "1: class Fred {\n2: int a@1 ;\n3: void f ( ) { Fred :: a@1 = 0 ; }\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3141 always 3141
  code always "class Fred {\n    int a;\n    void f() { Fred::a = 0; }\n};\n"
Line 3145
  63 always 63
  = always "class Fred {\n    int a;\n    void f() { Foo::Fred::a = 0; }\n};\n"
  "class Fred {\n    int a;\n    void f() { Foo::Fred::a = 0; }\n};\n" always "class Fred {\n    int a;\n    void f() { Foo::Fred::a = 0; }\n};\n"
Line 3150
  78 always 78
  = always "1: class Fred {\n2: int a@1 ;\n3: void f ( ) { Foo :: Fred :: a = 0 ; }\n4: } ;\n"
  "1: class Fred {\n2: int a@1 ;\n3: void f ( ) { Foo :: Fred :: a = 0 ; }\n4: } ;\n" always "1: class Fred {\n2: int a@1 ;\n3: void f ( ) { Foo :: Fred :: a = 0 ; }\n4: } ;\n"
Line 3155
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3155 always 3155
  expected always "1: class Fred {\n2: int a@1 ;\n3: void f ( ) { Foo :: Fred :: a = 0 ; }\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3155 always 3155
  code always "class Fred {\n    int a;\n    void f() { Foo::Fred::a = 0; }\n};\n"
Line 3161
  28 always 28
  = always "class A {\nfriend class B;\n}"
  "class A {\nfriend class B;\n}" always "class A {\nfriend class B;\n}"
Line 3165
  39 always 39
  = always "1: class A {\n2: friend class B ;\n3: }\n"
  "1: class A {\n2: friend class B ;\n3: }\n" always "1: class A {\n2: friend class B ;\n3: }\n"
Line 3169
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3169 always 3169
  expected always "1: class A {\n2: friend class B ;\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3169 always 3169
  code always "class A {\nfriend class B;\n}"
Line 3173
  37 always 37
  = always "class A {\nprivate: friend class B;\n}"
  "class A {\nprivate: friend class B;\n}" always "class A {\nprivate: friend class B;\n}"
Line 3177
  48 always 48
  = always "1: class A {\n2: private: friend class B ;\n3: }\n"
  "1: class A {\n2: private: friend class B ;\n3: }\n" always "1: class A {\n2: private: friend class B ;\n3: }\n"
Line 3181
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3181 always 3181
  expected always "1: class A {\n2: private: friend class B ;\n3: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3181 always 3181
  code always "class A {\nprivate: friend class B;\n}"
Line 3186
  69 always 69
  = always "class A {\n    int a;\n    int b;\n    A();\n};\nA::A() : a(0) { b = 1; }"
  "class A {\n    int a;\n    int b;\n    A();\n};\nA::A() : a(0) { b = 1; }" always "class A {\n    int a;\n    int b;\n    A();\n};\nA::A() : a(0) { b = 1; }"
Line 3192
  98 always 98
  = always "1: class A {\n2: int a@1 ;\n3: int b@2 ;\n4: A ( ) ;\n5: } ;\n6: A :: A ( ) : a@1 ( 0 ) { b@2 = 1 ; }\n"
  "1: class A {\n2: int a@1 ;\n3: int b@2 ;\n4: A ( ) ;\n5: } ;\n6: A :: A ( ) : a@1 ( 0 ) { b@2 = 1 ; }\n" always "1: class A {\n2: int a@1 ;\n3: int b@2 ;\n4: A ( ) ;\n5: } ;\n6: A :: A ( ) : a@1 ( 0 ) { b@2 = 1 ; }\n"
Line 3198
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3198 always 3198
  expected always "1: class A {\n2: int a@1 ;\n3: int b@2 ;\n4: A ( ) ;\n5: } ;\n6: A :: A ( ) : a@1 ( 0 ) { b@2 = 1 ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3198 always 3198
  code always "class A {\n    int a;\n    int b;\n    A();\n};\nA::A() : a(0) { b = 1; }"
Line 3202
  177 always 177
  = always "struct A;\ntypedef bool (A::* FuncPtr)();\nstruct A {\n    FuncPtr pFun;\n    void setPFun(int mode);\n    bool funcNorm();\n};\nvoid A::setPFun(int mode) {\n    pFun = &A::funcNorm;\n}"
  "struct A;\ntypedef bool (A::* FuncPtr)();\nstruct A {\n    FuncPtr pFun;\n    void setPFun(int mode);\n    bool funcNorm();\n};\nvoid A::setPFun(int mode) {\n    pFun = &A::funcNorm;\n}" always "struct A;\ntypedef bool (A::* FuncPtr)();\nstruct A {\n    FuncPtr pFun;\n    void setPFun(int mode);\n    bool funcNorm();\n};\nvoid A::setPFun(int mode) {\n    pFun = &A::funcNorm;\n}"
Line 3212
  196 always 196
  = always "1: struct A ;\n2:\n3: struct A {\n4: bool ( * pFun@1 ) ( ) ;\n5: void setPFun ( int mode@2 ) ;\n6: bool funcNorm ( ) ;\n7: } ;\n8: void A :: setPFun ( int mode@3 ) {\n9: pFun@1 = & A :: funcNorm ;\n10: }\n"
  "1: struct A ;\n2:\n3: struct A {\n4: bool ( * pFun@1 ) ( ) ;\n5: void setPFun ( int mode@2 ) ;\n6: bool funcNorm ( ) ;\n7: } ;\n8: void A :: setPFun ( int mode@3 ) {\n9: pFun@1 = & A :: funcNorm ;\n10: }\n" always "1: struct A ;\n2:\n3: struct A {\n4: bool ( * pFun@1 ) ( ) ;\n5: void setPFun ( int mode@2 ) ;\n6: bool funcNorm ( ) ;\n7: } ;\n8: void A :: setPFun ( int mode@3 ) {\n9: pFun@1 = & A :: funcNorm ;\n10: }\n"
Line 3222
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3222 always 3222
  expected always "1: struct A ;\n2:\n3: struct A {\n4: bool ( * pFun@1 ) ( ) ;\n5: void setPFun ( int mode@2 ) ;\n6: bool funcNorm ( ) ;\n7: } ;\n8: void A :: setPFun ( int mode@3 ) {\n9: pFun@1 = & A :: funcNorm ;\n10: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3222 always 3222
  code always "struct A;\ntypedef bool (A::* FuncPtr)();\nstruct A {\n    FuncPtr pFun;\n    void setPFun(int mode);\n    bool funcNorm();\n};\nvoid A::setPFun(int mode) {\n    pFun = &A::funcNorm;\n}"
Line 3226
  107 always 107
  = always "class A: public B, public C::D {\n    int i;\n    A(int i): B(i), C::D(i), i(i) {\n        int j(i);\n    }\n};"
  "class A: public B, public C::D {\n    int i;\n    A(int i): B(i), C::D(i), i(i) {\n        int j(i);\n    }\n};" always "class A: public B, public C::D {\n    int i;\n    A(int i): B(i), C::D(i), i(i) {\n        int j(i);\n    }\n};"
Line 3232
  153 always 153
  = always "1: class A : public B , public C :: D {\n2: int i@1 ;\n3: A ( int i@2 ) : B ( i@2 ) , C :: D ( i@2 ) , i@1 ( i@2 ) {\n4: int j@3 ; j@3 = i@2 ;\n5: }\n6: } ;\n"
  "1: class A : public B , public C :: D {\n2: int i@1 ;\n3: A ( int i@2 ) : B ( i@2 ) , C :: D ( i@2 ) , i@1 ( i@2 ) {\n4: int j@3 ; j@3 = i@2 ;\n5: }\n6: } ;\n" always "1: class A : public B , public C :: D {\n2: int i@1 ;\n3: A ( int i@2 ) : B ( i@2 ) , C :: D ( i@2 ) , i@1 ( i@2 ) {\n4: int j@3 ; j@3 = i@2 ;\n5: }\n6: } ;\n"
Line 3238
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3238 always 3238
  expected always "1: class A : public B , public C :: D {\n2: int i@1 ;\n3: A ( int i@2 ) : B ( i@2 ) , C :: D ( i@2 ) , i@1 ( i@2 ) {\n4: int j@3 ; j@3 = i@2 ;\n5: }\n6: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3238 always 3238
  code always "class A: public B, public C::D {\n    int i;\n    A(int i): B(i), C::D(i), i(i) {\n        int j(i);\n    }\n};"
Line 3242
  69 always 69
  = always "class A {\n    int a;\n    int b;\n    A();\n};\nA::A() : a{0} { b = 1; }"
  "class A {\n    int a;\n    int b;\n    A();\n};\nA::A() : a{0} { b = 1; }" always "class A {\n    int a;\n    int b;\n    A();\n};\nA::A() : a{0} { b = 1; }"
Line 3248
  98 always 98
  = always "1: class A {\n2: int a@1 ;\n3: int b@2 ;\n4: A ( ) ;\n5: } ;\n6: A :: A ( ) : a@1 { 0 } { b@2 = 1 ; }\n"
  "1: class A {\n2: int a@1 ;\n3: int b@2 ;\n4: A ( ) ;\n5: } ;\n6: A :: A ( ) : a@1 { 0 } { b@2 = 1 ; }\n" always "1: class A {\n2: int a@1 ;\n3: int b@2 ;\n4: A ( ) ;\n5: } ;\n6: A :: A ( ) : a@1 { 0 } { b@2 = 1 ; }\n"
Line 3254
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3254 always 3254
  expected always "1: class A {\n2: int a@1 ;\n3: int b@2 ;\n4: A ( ) ;\n5: } ;\n6: A :: A ( ) : a@1 { 0 } { b@2 = 1 ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3254 always 3254
  code always "class A {\n    int a;\n    int b;\n    A();\n};\nA::A() : a{0} { b = 1; }"
Line 3258
  66 always 66
  = always "class A : public ::B {\n  int a;\n  A();\n};\nA::A() : ::B(), a(0) {}"
  "class A : public ::B {\n  int a;\n  A();\n};\nA::A() : ::B(), a(0) {}" always "class A : public ::B {\n  int a;\n  A();\n};\nA::A() : ::B(), a(0) {}"
Line 3263
  100 always 100
  = always "1: class A : public :: B {\n2: int a@1 ;\n3: A ( ) ;\n4: } ;\n5: A :: A ( ) : :: B ( ) , a@1 ( 0 ) { }\n"
  "1: class A : public :: B {\n2: int a@1 ;\n3: A ( ) ;\n4: } ;\n5: A :: A ( ) : :: B ( ) , a@1 ( 0 ) { }\n" always "1: class A : public :: B {\n2: int a@1 ;\n3: A ( ) ;\n4: } ;\n5: A :: A ( ) : :: B ( ) , a@1 ( 0 ) { }\n"
Line 3268
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3268 always 3268
  expected always "1: class A : public :: B {\n2: int a@1 ;\n3: A ( ) ;\n4: } ;\n5: A :: A ( ) : :: B ( ) , a@1 ( 0 ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3268 always 3268
  code always "class A : public ::B {\n  int a;\n  A();\n};\nA::A() : ::B(), a(0) {}"
Line 3272
  57 always 57
  = always "struct S {\n  int (*p)[2];\n  S();\n};\nS::S() { p[0] = 0; }"
  "struct S {\n  int (*p)[2];\n  S();\n};\nS::S() { p[0] = 0; }" always "struct S {\n  int (*p)[2];\n  S();\n};\nS::S() { p[0] = 0; }"
Line 3277
  92 always 92
  = always "1: struct S {\n2: int ( * p@1 ) [ 2 ] ;\n3: S ( ) ;\n4: } ;\n5: S :: S ( ) { p@1 [ 0 ] = 0 ; }\n"
  "1: struct S {\n2: int ( * p@1 ) [ 2 ] ;\n3: S ( ) ;\n4: } ;\n5: S :: S ( ) { p@1 [ 0 ] = 0 ; }\n" always "1: struct S {\n2: int ( * p@1 ) [ 2 ] ;\n3: S ( ) ;\n4: } ;\n5: S :: S ( ) { p@1 [ 0 ] = 0 ; }\n"
Line 3282
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3282 always 3282
  expected always "1: struct S {\n2: int ( * p@1 ) [ 2 ] ;\n3: S ( ) ;\n4: } ;\n5: S :: S ( ) { p@1 [ 0 ] = 0 ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3282 always 3282
  code always "struct S {\n  int (*p)[2];\n  S();\n};\nS::S() { p[0] = 0; }"
Line 3286
  54 always 54
  = always "const int eStart = 6;\nenum myEnum {\n  A = eStart;\n};\n"
  "const int eStart = 6;\nenum myEnum {\n  A = eStart;\n};\n" always "const int eStart = 6;\nenum myEnum {\n  A = eStart;\n};\n"
Line 3290
  71 always 71
  = always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = eStart@1 ;\n4: } ;\n"
  "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = eStart@1 ;\n4: } ;\n" always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = eStart@1 ;\n4: } ;\n"
Line 3294
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3294 always 3294
  expected always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = eStart@1 ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3294 always 3294
  code always "const int eStart = 6;\nenum myEnum {\n  A = eStart;\n};\n"
Line 3298
  57 always 57
  = always "const int eStart = 6;\nenum myEnum {\n  A = f(eStart);\n};\n"
  "const int eStart = 6;\nenum myEnum {\n  A = f(eStart);\n};\n" always "const int eStart = 6;\nenum myEnum {\n  A = f(eStart);\n};\n"
Line 3302
  77 always 77
  = always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( eStart@1 ) ;\n4: } ;\n"
  "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( eStart@1 ) ;\n4: } ;\n" always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( eStart@1 ) ;\n4: } ;\n"
Line 3306
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3306 always 3306
  expected always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( eStart@1 ) ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3306 always 3306
  code always "const int eStart = 6;\nenum myEnum {\n  A = f(eStart);\n};\n"
Line 3310
  60 always 60
  = always "const int eStart = 6;\nenum myEnum {\n  A = f(eStart, x);\n};\n"
  "const int eStart = 6;\nenum myEnum {\n  A = f(eStart, x);\n};\n" always "const int eStart = 6;\nenum myEnum {\n  A = f(eStart, x);\n};\n"
Line 3314
  81 always 81
  = always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( eStart@1 , x ) ;\n4: } ;\n"
  "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( eStart@1 , x ) ;\n4: } ;\n" always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( eStart@1 , x ) ;\n4: } ;\n"
Line 3318
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3318 always 3318
  expected always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( eStart@1 , x ) ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3318 always 3318
  code always "const int eStart = 6;\nenum myEnum {\n  A = f(eStart, x);\n};\n"
Line 3322
  60 always 60
  = always "const int eStart = 6;\nenum myEnum {\n  A = f(x, eStart);\n};\n"
  "const int eStart = 6;\nenum myEnum {\n  A = f(x, eStart);\n};\n" always "const int eStart = 6;\nenum myEnum {\n  A = f(x, eStart);\n};\n"
Line 3326
  81 always 81
  = always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart@1 ) ;\n4: } ;\n"
  "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart@1 ) ;\n4: } ;\n" always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart@1 ) ;\n4: } ;\n"
Line 3330
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3330 always 3330
  expected always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart@1 ) ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3330 always 3330
  code always "const int eStart = 6;\nenum myEnum {\n  A = f(x, eStart);\n};\n"
Line 3334
  63 always 63
  = always "const int eStart = 6;\nenum myEnum {\n  A = f(x, eStart, y);\n};\n"
  "const int eStart = 6;\nenum myEnum {\n  A = f(x, eStart, y);\n};\n" always "const int eStart = 6;\nenum myEnum {\n  A = f(x, eStart, y);\n};\n"
Line 3338
  85 always 85
  = always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart@1 , y ) ;\n4: } ;\n"
  "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart@1 , y ) ;\n4: } ;\n" always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart@1 , y ) ;\n4: } ;\n"
Line 3342
  83 always 83
  = always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart , y ) ;\n4: } ;\n"
  "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart , y ) ;\n4: } ;\n" always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart , y ) ;\n4: } ;\n"
Line 3346
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3346 always 3346
  expected always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart@1 , y ) ;\n4: } ;\n"
  current always "1: const int eStart@1 = 6 ;\n2: enum myEnum {\n3: A = f ( x , eStart , y ) ;\n4: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3346 always 3346
  code always "const int eStart = 6;\nenum myEnum {\n  A = f(x, eStart, y);\n};\n"
Line 3350
  51 always 51
  = always "const int IDL1 = 13;\nenum class E { IDL1 = 16, };\n"
  "const int IDL1 = 13;\nenum class E { IDL1 = 16, };\n" always "const int IDL1 = 13;\nenum class E { IDL1 = 16, };\n"
Line 3352
  62 always 62
  = always "1: const int IDL1@1 = 13 ;\n2: enum class E { IDL1 = 16 , } ;\n"
  "1: const int IDL1@1 = 13 ;\n2: enum class E { IDL1 = 16 , } ;\n" always "1: const int IDL1@1 = 13 ;\n2: enum class E { IDL1 = 16 , } ;\n"
Line 3354
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3354 always 3354
  expected always "1: const int IDL1@1 = 13 ;\n2: enum class E { IDL1 = 16 , } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3354 always 3354
  code always "const int IDL1 = 13;\nenum class E { IDL1 = 16, };\n"
Line 3358
  122 always 122
  = always "namespace N1 { const int c = 42; }\nnamespace N2 { const int c = 24; }\nstruct S {\n    enum { v1 = N1::c, v2 = N2::c };\n};\n"
  "namespace N1 { const int c = 42; }\nnamespace N2 { const int c = 24; }\nstruct S {\n    enum { v1 = N1::c, v2 = N2::c };\n};\n" always "namespace N1 { const int c = 42; }\nnamespace N2 { const int c = 24; }\nstruct S {\n    enum { v1 = N1::c, v2 = N2::c };\n};\n"
Line 3363
  161 always 161
  = always "1: namespace N1 { const int c@1 = 42 ; }\n2: namespace N2 { const int c@2 = 24 ; }\n3: struct S {\n4: enum Anonymous0 { v1 = N1 :: c@1 , v2 = N2 :: c@2 } ;\n5: } ;\n"
  "1: namespace N1 { const int c@1 = 42 ; }\n2: namespace N2 { const int c@2 = 24 ; }\n3: struct S {\n4: enum Anonymous0 { v1 = N1 :: c@1 , v2 = N2 :: c@2 } ;\n5: } ;\n" always "1: namespace N1 { const int c@1 = 42 ; }\n2: namespace N2 { const int c@2 = 24 ; }\n3: struct S {\n4: enum Anonymous0 { v1 = N1 :: c@1 , v2 = N2 :: c@2 } ;\n5: } ;\n"
Line 3368
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3368 always 3368
  expected always "1: namespace N1 { const int c@1 = 42 ; }\n2: namespace N2 { const int c@2 = 24 ; }\n3: struct S {\n4: enum Anonymous0 { v1 = N1 :: c@1 , v2 = N2 :: c@2 } ;\n5: } ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3368 always 3368
  code always "namespace N1 { const int c = 42; }\nnamespace N2 { const int c = 24; }\nstruct S {\n    enum { v1 = N1::c, v2 = N2::c };\n};\n"
Line 3372
  124 always 124
  = always "class Data;\nvoid strange_declarated(const Data& Data);\nvoid handleData(const Data& data) {\n    strange_declarated(data);\n}\n"
  "class Data;\nvoid strange_declarated(const Data& Data);\nvoid handleData(const Data& data) {\n    strange_declarated(data);\n}\n" always "class Data;\nvoid strange_declarated(const Data& Data);\nvoid handleData(const Data& data) {\n    strange_declarated(data);\n}\n"
Line 3377
  155 always 155
  = always "1: class Data ;\n2: void strange_declarated ( const Data & Data@1 ) ;\n3: void handleData ( const Data & data@2 ) {\n4: strange_declarated ( data@2 ) ;\n5: }\n"
  "1: class Data ;\n2: void strange_declarated ( const Data & Data@1 ) ;\n3: void handleData ( const Data & data@2 ) {\n4: strange_declarated ( data@2 ) ;\n5: }\n" always "1: class Data ;\n2: void strange_declarated ( const Data & Data@1 ) ;\n3: void handleData ( const Data & data@2 ) {\n4: strange_declarated ( data@2 ) ;\n5: }\n"
Line 3382
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3382 always 3382
  expected always "1: class Data ;\n2: void strange_declarated ( const Data & Data@1 ) ;\n3: void handleData ( const Data & data@2 ) {\n4: strange_declarated ( data@2 ) ;\n5: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3382 always 3382
  code always "class Data;\nvoid strange_declarated(const Data& Data);\nvoid handleData(const Data& data) {\n    strange_declarated(data);\n}\n"
Line 3387
  189 always 189
  = always "template <typename T>\nstruct BBB {\n  struct inner;\n};\n\ntemplate <typename T>\nstruct BBB<T>::inner {\n  inner(int x);\n  int x;\n};\n\ntemplate <typename T>\nBBB<T>::inner::inner(int x): x(x) {}\n"
  "template <typename T>\nstruct BBB {\n  struct inner;\n};\n\ntemplate <typename T>\nstruct BBB<T>::inner {\n  inner(int x);\n  int x;\n};\n\ntemplate <typename T>\nBBB<T>::inner::inner(int x): x(x) {}\n" always "template <typename T>\nstruct BBB {\n  struct inner;\n};\n\ntemplate <typename T>\nstruct BBB<T>::inner {\n  inner(int x);\n  int x;\n};\n\ntemplate <typename T>\nBBB<T>::inner::inner(int x): x(x) {}\n"
Line 3400
  268 always 268
  = always "1: template < typename T >\n2: struct BBB {\n3: struct inner ;\n4: } ;\n5:\n6: template < typename T >\n7: struct BBB < T > :: inner {\n8: inner ( int x@1 ) ;\n9: int x@2 ;\n10: } ;\n11:\n12: template < typename T >\n13: BBB < T > :: inner :: inner ( int x@3 ) : x@2 ( x@3 ) { }\n"
  "1: template < typename T >\n2: struct BBB {\n3: struct inner ;\n4: } ;\n5:\n6: template < typename T >\n7: struct BBB < T > :: inner {\n8: inner ( int x@1 ) ;\n9: int x@2 ;\n10: } ;\n11:\n12: template < typename T >\n13: BBB < T > :: inner :: inner ( int x@3 ) : x@2 ( x@3 ) { }\n" always "1: template < typename T >\n2: struct BBB {\n3: struct inner ;\n4: } ;\n5:\n6: template < typename T >\n7: struct BBB < T > :: inner {\n8: inner ( int x@1 ) ;\n9: int x@2 ;\n10: } ;\n11:\n12: template < typename T >\n13: BBB < T > :: inner :: inner ( int x@3 ) : x@2 ( x@3 ) { }\n"
Line 3413
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3413 always 3413
  expected always "1: template < typename T >\n2: struct BBB {\n3: struct inner ;\n4: } ;\n5:\n6: template < typename T >\n7: struct BBB < T > :: inner {\n8: inner ( int x@1 ) ;\n9: int x@2 ;\n10: } ;\n11:\n12: template < typename T >\n13: BBB < T > :: inner :: inner ( int x@3 ) : x@2 ( x@3 ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3413 always 3413
  code always "template <typename T>\nstruct BBB {\n  struct inner;\n};\n\ntemplate <typename T>\nstruct BBB<T>::inner {\n  inner(int x);\n  int x;\n};\n\ntemplate <typename T>\nBBB<T>::inner::inner(int x): x(x) {}\n"
Line 3418
  73 always 73
  = always "namespace A {\n    char buf[20];\n}\nint main() {\n    return foo(A::buf);\n}"
  "namespace A {\n    char buf[20];\n}\nint main() {\n    return foo(A::buf);\n}" always "namespace A {\n    char buf[20];\n}\nint main() {\n    return foo(A::buf);\n}"
Line 3425
  100 always 100
  = always "1: namespace A {\n2: char buf@1 [ 20 ] ;\n3: }\n4: int main ( ) {\n5: return foo ( A :: buf@1 ) ;\n6: }\n"
  "1: namespace A {\n2: char buf@1 [ 20 ] ;\n3: }\n4: int main ( ) {\n5: return foo ( A :: buf@1 ) ;\n6: }\n" always "1: namespace A {\n2: char buf@1 [ 20 ] ;\n3: }\n4: int main ( ) {\n5: return foo ( A :: buf@1 ) ;\n6: }\n"
Line 3432
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3432 always 3432
  expected always "1: namespace A {\n2: char buf@1 [ 20 ] ;\n3: }\n4: int main ( ) {\n5: return foo ( A :: buf@1 ) ;\n6: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3432 always 3432
  code always "namespace A {\n    char buf[20];\n}\nint main() {\n    return foo(A::buf);\n}"
Line 3436
  94 always 94
  = always "namespace A {\n  namespace B {\n    char buf[20];\n  }\n}\nint main() {\n  return foo(A::B::buf);\n}"
  "namespace A {\n  namespace B {\n    char buf[20];\n  }\n}\nint main() {\n  return foo(A::B::buf);\n}" always "namespace A {\n  namespace B {\n    char buf[20];\n  }\n}\nint main() {\n  return foo(A::B::buf);\n}"
Line 3445
  127 always 127
  = always "1: namespace A {\n2: namespace B {\n3: char buf@1 [ 20 ] ;\n4: }\n5: }\n6: int main ( ) {\n7: return foo ( A :: B :: buf@1 ) ;\n8: }\n"
  "1: namespace A {\n2: namespace B {\n3: char buf@1 [ 20 ] ;\n4: }\n5: }\n6: int main ( ) {\n7: return foo ( A :: B :: buf@1 ) ;\n8: }\n" always "1: namespace A {\n2: namespace B {\n3: char buf@1 [ 20 ] ;\n4: }\n5: }\n6: int main ( ) {\n7: return foo ( A :: B :: buf@1 ) ;\n8: }\n"
Line 3454
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3454 always 3454
  expected always "1: namespace A {\n2: namespace B {\n3: char buf@1 [ 20 ] ;\n4: }\n5: }\n6: int main ( ) {\n7: return foo ( A :: B :: buf@1 ) ;\n8: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3454 always 3454
  code always "namespace A {\n  namespace B {\n    char buf[20];\n  }\n}\nint main() {\n  return foo(A::B::buf);\n}"
Line 3458
  105 always 105
  = always "namespace NS {\n  class A { int x; void dostuff(); };\n}\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n"
  "namespace NS {\n  class A { int x; void dostuff(); };\n}\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n" always "namespace NS {\n  class A { int x; void dostuff(); };\n}\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n"
Line 3463
  133 always 133
  = always "1: namespace NS {\n2: class A { int x@1 ; void dostuff ( ) ; } ;\n3: }\n4: using namespace NS ;\n5: void A :: dostuff ( ) { x@1 = 0 ; }\n"
  "1: namespace NS {\n2: class A { int x@1 ; void dostuff ( ) ; } ;\n3: }\n4: using namespace NS ;\n5: void A :: dostuff ( ) { x@1 = 0 ; }\n" always "1: namespace NS {\n2: class A { int x@1 ; void dostuff ( ) ; } ;\n3: }\n4: using namespace NS ;\n5: void A :: dostuff ( ) { x@1 = 0 ; }\n"
Line 3468
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3468 always 3468
  expected always "1: namespace NS {\n2: class A { int x@1 ; void dostuff ( ) ; } ;\n3: }\n4: using namespace NS ;\n5: void A :: dostuff ( ) { x@1 = 0 ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3468 always 3468
  code always "namespace NS {\n  class A { int x; void dostuff(); };\n}\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n"
Line 3472
  86 always 86
  = always "class A { int x; void dostuff(); };\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n"
  "class A { int x; void dostuff(); };\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n" always "class A { int x; void dostuff(); };\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n"
Line 3475
  110 always 110
  = always "1: class A { int x@1 ; void dostuff ( ) ; } ;\n2: using namespace NS ;\n3: void A :: dostuff ( ) { x@1 = 0 ; }\n"
  "1: class A { int x@1 ; void dostuff ( ) ; } ;\n2: using namespace NS ;\n3: void A :: dostuff ( ) { x@1 = 0 ; }\n" always "1: class A { int x@1 ; void dostuff ( ) ; } ;\n2: using namespace NS ;\n3: void A :: dostuff ( ) { x@1 = 0 ; }\n"
Line 3478
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3478 always 3478
  expected always "1: class A { int x@1 ; void dostuff ( ) ; } ;\n2: using namespace NS ;\n3: void A :: dostuff ( ) { x@1 = 0 ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3478 always 3478
  code always "class A { int x; void dostuff(); };\nusing namespace NS;\nvoid A::dostuff() { x = 0; }\n"
Line 3482
  148 always 148
  = always "namespace A {\n    namespace B {\n        class C {\n            double m;\n            C();\n        };\n    }\n}\nusing namespace A::B;\nC::C() : m(42) {}"
  "namespace A {\n    namespace B {\n        class C {\n            double m;\n            C();\n        };\n    }\n}\nusing namespace A::B;\nC::C() : m(42) {}" always "namespace A {\n    namespace B {\n        class C {\n            double m;\n            C();\n        };\n    }\n}\nusing namespace A::B;\nC::C() : m(42) {}"
Line 3493
  152 always 152
  = always "1: namespace A {\n2: namespace B {\n3: class C {\n4: double m@1 ;\n5: C ( ) ;\n6: } ;\n7: }\n8: }\n9: using namespace A :: B ;\n10: C :: C ( ) : m@1 ( 42 ) { }\n"
  "1: namespace A {\n2: namespace B {\n3: class C {\n4: double m@1 ;\n5: C ( ) ;\n6: } ;\n7: }\n8: }\n9: using namespace A :: B ;\n10: C :: C ( ) : m@1 ( 42 ) { }\n" always "1: namespace A {\n2: namespace B {\n3: class C {\n4: double m@1 ;\n5: C ( ) ;\n6: } ;\n7: }\n8: }\n9: using namespace A :: B ;\n10: C :: C ( ) : m@1 ( 42 ) { }\n"
Line 3504
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3504 always 3504
  expected always "1: namespace A {\n2: namespace B {\n3: class C {\n4: double m@1 ;\n5: C ( ) ;\n6: } ;\n7: }\n8: }\n9: using namespace A :: B ;\n10: C :: C ( ) : m@1 ( 42 ) { }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3504 always 3504
  code always "namespace A {\n    namespace B {\n        class C {\n            double m;\n            C();\n        };\n    }\n}\nusing namespace A::B;\nC::C() : m(42) {}"
Line 3508
  72 always 72
  = always "void f(Foo foo)\n{\n    foo.size = 0;\n    return ((uint8_t)(foo).size);\n}"
  "void f(Foo foo)\n{\n    foo.size = 0;\n    return ((uint8_t)(foo).size);\n}" always "void f(Foo foo)\n{\n    foo.size = 0;\n    return ((uint8_t)(foo).size);\n}"
Line 3513
  106 always 106
  = always "1: void f ( Foo foo@1 )\n2: {\n3: foo@1 . size@2 = 0 ;\n4: return ( ( uint8_t ) ( foo@1 ) . size@2 ) ;\n5: }\n"
  "1: void f ( Foo foo@1 )\n2: {\n3: foo@1 . size@2 = 0 ;\n4: return ( ( uint8_t ) ( foo@1 ) . size@2 ) ;\n5: }\n" always "1: void f ( Foo foo@1 )\n2: {\n3: foo@1 . size@2 = 0 ;\n4: return ( ( uint8_t ) ( foo@1 ) . size@2 ) ;\n5: }\n"
Line 3518
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3518 always 3518
  expected always "1: void f ( Foo foo@1 )\n2: {\n3: foo@1 . size@2 = 0 ;\n4: return ( ( uint8_t ) ( foo@1 ) . size@2 ) ;\n5: }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3518 always 3518
  code always "void f(Foo foo)\n{\n    foo.size = 0;\n    return ((uint8_t)(foo).size);\n}"
Line 3522
  36 always 36
  = always "void foo(int x, decltype(A::b) *p);"
  "void foo(int x, decltype(A::b) *p);" always "void foo(int x, decltype(A::b) *p);"
Line 3523
  55 always 55
  = always "1: void foo ( int x@1 , decltype ( A :: b ) * p@2 ) ;\n"
  "1: void foo ( int x@1 , decltype ( A :: b ) * p@2 ) ;\n" always "1: void foo ( int x@1 , decltype ( A :: b ) * p@2 ) ;\n"
Line 3524
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3524 always 3524
  expected always "1: void foo ( int x@1 , decltype ( A :: b ) * p@2 ) ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3524 always 3524
  code always "void foo(int x, decltype(A::b) *p);"
Line 3528
  22 always 22
  = always "int x; decltype(x) y;"
  "int x; decltype(x) y;" always "int x; decltype(x) y;"
Line 3529
  37 always 37
  = always "1: int x@1 ; decltype ( x@1 ) y@2 ;\n"
  "1: int x@1 ; decltype ( x@1 ) y@2 ;\n" always "1: int x@1 ; decltype ( x@1 ) y@2 ;\n"
Line 3530
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3530 always 3530
  expected always "1: int x@1 ; decltype ( x@1 ) y@2 ;\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3530 always 3530
  code always "int x; decltype(x) y;"
Line 3534
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3534 always 3534
  "struct A {\n    int x, y;\n};\nint f(A a, A b) {\n    int x = a.x + b.x;\n    int y = b.x + a.x;\n    return x + y + a.y + b.y;\n}\n" always "struct A {\n    int x, y;\n};\nint f(A a, A b) {\n    int x = a.x + b.x;\n    int y = b.x + a.x;\n    return x + y + a.y + b.y;\n}\n"
Line 3544
  242 always 242
  = always "1: struct A {\n2: int x ; int y ;\n3: } ;\n4: int f ( A a , A b ) {\n5: int x@5 ; x@5 =@9 a@3 .@10 x@6 +@11 b@4 .@12 x@7 ;\n6: int y@8 ; y@8 =@13 b@4 .@12 x@7 +@11 a@3 .@10 x@6 ;\n7: return x@5 +@17 y@8 +@18 a@3 .@19 y@9 +@20 b@4 .@21 y@10 ;\n8: }\n"
  "1: struct A {\n2: int x ; int y ;\n3: } ;\n4: int f ( A a , A b ) {\n5: int x@5 ; x@5 =@9 a@3 .@10 x@6 +@11 b@4 .@12 x@7 ;\n6: int y@8 ; y@8 =@13 b@4 .@12 x@7 +@11 a@3 .@10 x@6 ;\n7: return x@5 +@17 y@8 +@18 a@3 .@19 y@9 +@20 b@4 .@21 y@10 ;\n8: }\n" always "1: struct A {\n2: int x ; int y ;\n3: } ;\n4: int f ( A a , A b ) {\n5: int x@5 ; x@5 =@9 a@3 .@10 x@6 +@11 b@4 .@12 x@7 ;\n6: int y@8 ; y@8 =@13 b@4 .@12 x@7 +@11 a@3 .@10 x@6 ;\n7: return x@5 +@17 y@8 +@18 a@3 .@19 y@9 +@20 b@4 .@21 y@10 ;\n8: }\n"
Line 3553
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3553 always 3553
  expected always "1: struct A {\n2: int x ; int y ;\n3: } ;\n4: int f ( A a , A b ) {\n5: int x@5 ; x@5 =@9 a@3 .@10 x@6 +@11 b@4 .@12 x@7 ;\n6: int y@8 ; y@8 =@13 b@4 .@12 x@7 +@11 a@3 .@10 x@6 ;\n7: return x@5 +@17 y@8 +@18 a@3 .@19 y@9 +@20 b@4 .@21 y@10 ;\n8: }\n"
Line 3557
  45 always 45
  = always "int foo() { auto [x,y] = xy(); return x+y; }"
  "int foo() { auto [x,y] = xy(); return x+y; }" always "int foo() { auto [x,y] = xy(); return x+y; }"
Line 3558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3558 always 3558
  "1: int foo ( ) { auto [ x@1 , y@2 ] = xy ( ) ; return x@1 + y@2 ; }\n" always "1: int foo ( ) { auto [ x@1 , y@2 ] = xy ( ) ; return x@1 + y@2 ; }\n"
  "cppcheck-2.8/test/testvarid.cpp" always "cppcheck-2.8/test/testvarid.cpp"
  3558 always 3558
  code always "int foo() { auto [x,y] = xy(); return x+y; }"
